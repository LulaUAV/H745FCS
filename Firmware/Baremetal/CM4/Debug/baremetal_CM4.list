
baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fab4  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0810fd50  0810fd50  0001fd50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810fe60  0810fe60  0001fe60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810fe68  0810fe68  0001fe68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810fe6c  0810fe6c  0001fe6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  10000000  0810fe70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000664  1000008c  0810fefc  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100006f0  0810fefc  000206f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000329bc  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f1a  00000000  00000000  00052a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001748  00000000  00000000  00057998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015b0  00000000  00000000  000590e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d352  00000000  00000000  0005a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000202fe  00000000  00000000  000979e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018fa5e  00000000  00000000  000b7ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024773e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000065f0  00000000  00000000  00247794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000008c 	.word	0x1000008c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810fd34 	.word	0x0810fd34

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000090 	.word	0x10000090
 81002d4:	0810fd34 	.word	0x0810fd34

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9b9 	b.w	8101200 <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b96e 	b.w	8101200 <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468c      	mov	ip, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	f040 8083 	bne.w	8101052 <__udivmoddi4+0x116>
 8100f4c:	428a      	cmp	r2, r1
 8100f4e:	4617      	mov	r7, r2
 8100f50:	d947      	bls.n	8100fe2 <__udivmoddi4+0xa6>
 8100f52:	fab2 f282 	clz	r2, r2
 8100f56:	b142      	cbz	r2, 8100f6a <__udivmoddi4+0x2e>
 8100f58:	f1c2 0020 	rsb	r0, r2, #32
 8100f5c:	fa24 f000 	lsr.w	r0, r4, r0
 8100f60:	4091      	lsls	r1, r2
 8100f62:	4097      	lsls	r7, r2
 8100f64:	ea40 0c01 	orr.w	ip, r0, r1
 8100f68:	4094      	lsls	r4, r2
 8100f6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100f6e:	0c23      	lsrs	r3, r4, #16
 8100f70:	fbbc f6f8 	udiv	r6, ip, r8
 8100f74:	fa1f fe87 	uxth.w	lr, r7
 8100f78:	fb08 c116 	mls	r1, r8, r6, ip
 8100f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f80:	fb06 f10e 	mul.w	r1, r6, lr
 8100f84:	4299      	cmp	r1, r3
 8100f86:	d909      	bls.n	8100f9c <__udivmoddi4+0x60>
 8100f88:	18fb      	adds	r3, r7, r3
 8100f8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f8e:	f080 8119 	bcs.w	81011c4 <__udivmoddi4+0x288>
 8100f92:	4299      	cmp	r1, r3
 8100f94:	f240 8116 	bls.w	81011c4 <__udivmoddi4+0x288>
 8100f98:	3e02      	subs	r6, #2
 8100f9a:	443b      	add	r3, r7
 8100f9c:	1a5b      	subs	r3, r3, r1
 8100f9e:	b2a4      	uxth	r4, r4
 8100fa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa4:	fb08 3310 	mls	r3, r8, r0, r3
 8100fa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8100fb0:	45a6      	cmp	lr, r4
 8100fb2:	d909      	bls.n	8100fc8 <__udivmoddi4+0x8c>
 8100fb4:	193c      	adds	r4, r7, r4
 8100fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fba:	f080 8105 	bcs.w	81011c8 <__udivmoddi4+0x28c>
 8100fbe:	45a6      	cmp	lr, r4
 8100fc0:	f240 8102 	bls.w	81011c8 <__udivmoddi4+0x28c>
 8100fc4:	3802      	subs	r0, #2
 8100fc6:	443c      	add	r4, r7
 8100fc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fcc:	eba4 040e 	sub.w	r4, r4, lr
 8100fd0:	2600      	movs	r6, #0
 8100fd2:	b11d      	cbz	r5, 8100fdc <__udivmoddi4+0xa0>
 8100fd4:	40d4      	lsrs	r4, r2
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	e9c5 4300 	strd	r4, r3, [r5]
 8100fdc:	4631      	mov	r1, r6
 8100fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe2:	b902      	cbnz	r2, 8100fe6 <__udivmoddi4+0xaa>
 8100fe4:	deff      	udf	#255	; 0xff
 8100fe6:	fab2 f282 	clz	r2, r2
 8100fea:	2a00      	cmp	r2, #0
 8100fec:	d150      	bne.n	8101090 <__udivmoddi4+0x154>
 8100fee:	1bcb      	subs	r3, r1, r7
 8100ff0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100ff4:	fa1f f887 	uxth.w	r8, r7
 8100ff8:	2601      	movs	r6, #1
 8100ffa:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ffe:	0c21      	lsrs	r1, r4, #16
 8101000:	fb0e 331c 	mls	r3, lr, ip, r3
 8101004:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101008:	fb08 f30c 	mul.w	r3, r8, ip
 810100c:	428b      	cmp	r3, r1
 810100e:	d907      	bls.n	8101020 <__udivmoddi4+0xe4>
 8101010:	1879      	adds	r1, r7, r1
 8101012:	f10c 30ff 	add.w	r0, ip, #4294967295
 8101016:	d202      	bcs.n	810101e <__udivmoddi4+0xe2>
 8101018:	428b      	cmp	r3, r1
 810101a:	f200 80e9 	bhi.w	81011f0 <__udivmoddi4+0x2b4>
 810101e:	4684      	mov	ip, r0
 8101020:	1ac9      	subs	r1, r1, r3
 8101022:	b2a3      	uxth	r3, r4
 8101024:	fbb1 f0fe 	udiv	r0, r1, lr
 8101028:	fb0e 1110 	mls	r1, lr, r0, r1
 810102c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8101030:	fb08 f800 	mul.w	r8, r8, r0
 8101034:	45a0      	cmp	r8, r4
 8101036:	d907      	bls.n	8101048 <__udivmoddi4+0x10c>
 8101038:	193c      	adds	r4, r7, r4
 810103a:	f100 33ff 	add.w	r3, r0, #4294967295
 810103e:	d202      	bcs.n	8101046 <__udivmoddi4+0x10a>
 8101040:	45a0      	cmp	r8, r4
 8101042:	f200 80d9 	bhi.w	81011f8 <__udivmoddi4+0x2bc>
 8101046:	4618      	mov	r0, r3
 8101048:	eba4 0408 	sub.w	r4, r4, r8
 810104c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8101050:	e7bf      	b.n	8100fd2 <__udivmoddi4+0x96>
 8101052:	428b      	cmp	r3, r1
 8101054:	d909      	bls.n	810106a <__udivmoddi4+0x12e>
 8101056:	2d00      	cmp	r5, #0
 8101058:	f000 80b1 	beq.w	81011be <__udivmoddi4+0x282>
 810105c:	2600      	movs	r6, #0
 810105e:	e9c5 0100 	strd	r0, r1, [r5]
 8101062:	4630      	mov	r0, r6
 8101064:	4631      	mov	r1, r6
 8101066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810106a:	fab3 f683 	clz	r6, r3
 810106e:	2e00      	cmp	r6, #0
 8101070:	d14a      	bne.n	8101108 <__udivmoddi4+0x1cc>
 8101072:	428b      	cmp	r3, r1
 8101074:	d302      	bcc.n	810107c <__udivmoddi4+0x140>
 8101076:	4282      	cmp	r2, r0
 8101078:	f200 80b8 	bhi.w	81011ec <__udivmoddi4+0x2b0>
 810107c:	1a84      	subs	r4, r0, r2
 810107e:	eb61 0103 	sbc.w	r1, r1, r3
 8101082:	2001      	movs	r0, #1
 8101084:	468c      	mov	ip, r1
 8101086:	2d00      	cmp	r5, #0
 8101088:	d0a8      	beq.n	8100fdc <__udivmoddi4+0xa0>
 810108a:	e9c5 4c00 	strd	r4, ip, [r5]
 810108e:	e7a5      	b.n	8100fdc <__udivmoddi4+0xa0>
 8101090:	f1c2 0320 	rsb	r3, r2, #32
 8101094:	fa20 f603 	lsr.w	r6, r0, r3
 8101098:	4097      	lsls	r7, r2
 810109a:	fa01 f002 	lsl.w	r0, r1, r2
 810109e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81010a2:	40d9      	lsrs	r1, r3
 81010a4:	4330      	orrs	r0, r6
 81010a6:	0c03      	lsrs	r3, r0, #16
 81010a8:	fbb1 f6fe 	udiv	r6, r1, lr
 81010ac:	fa1f f887 	uxth.w	r8, r7
 81010b0:	fb0e 1116 	mls	r1, lr, r6, r1
 81010b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81010b8:	fb06 f108 	mul.w	r1, r6, r8
 81010bc:	4299      	cmp	r1, r3
 81010be:	fa04 f402 	lsl.w	r4, r4, r2
 81010c2:	d909      	bls.n	81010d8 <__udivmoddi4+0x19c>
 81010c4:	18fb      	adds	r3, r7, r3
 81010c6:	f106 3cff 	add.w	ip, r6, #4294967295
 81010ca:	f080 808d 	bcs.w	81011e8 <__udivmoddi4+0x2ac>
 81010ce:	4299      	cmp	r1, r3
 81010d0:	f240 808a 	bls.w	81011e8 <__udivmoddi4+0x2ac>
 81010d4:	3e02      	subs	r6, #2
 81010d6:	443b      	add	r3, r7
 81010d8:	1a5b      	subs	r3, r3, r1
 81010da:	b281      	uxth	r1, r0
 81010dc:	fbb3 f0fe 	udiv	r0, r3, lr
 81010e0:	fb0e 3310 	mls	r3, lr, r0, r3
 81010e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010e8:	fb00 f308 	mul.w	r3, r0, r8
 81010ec:	428b      	cmp	r3, r1
 81010ee:	d907      	bls.n	8101100 <__udivmoddi4+0x1c4>
 81010f0:	1879      	adds	r1, r7, r1
 81010f2:	f100 3cff 	add.w	ip, r0, #4294967295
 81010f6:	d273      	bcs.n	81011e0 <__udivmoddi4+0x2a4>
 81010f8:	428b      	cmp	r3, r1
 81010fa:	d971      	bls.n	81011e0 <__udivmoddi4+0x2a4>
 81010fc:	3802      	subs	r0, #2
 81010fe:	4439      	add	r1, r7
 8101100:	1acb      	subs	r3, r1, r3
 8101102:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8101106:	e778      	b.n	8100ffa <__udivmoddi4+0xbe>
 8101108:	f1c6 0c20 	rsb	ip, r6, #32
 810110c:	fa03 f406 	lsl.w	r4, r3, r6
 8101110:	fa22 f30c 	lsr.w	r3, r2, ip
 8101114:	431c      	orrs	r4, r3
 8101116:	fa20 f70c 	lsr.w	r7, r0, ip
 810111a:	fa01 f306 	lsl.w	r3, r1, r6
 810111e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8101122:	fa21 f10c 	lsr.w	r1, r1, ip
 8101126:	431f      	orrs	r7, r3
 8101128:	0c3b      	lsrs	r3, r7, #16
 810112a:	fbb1 f9fe 	udiv	r9, r1, lr
 810112e:	fa1f f884 	uxth.w	r8, r4
 8101132:	fb0e 1119 	mls	r1, lr, r9, r1
 8101136:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 810113a:	fb09 fa08 	mul.w	sl, r9, r8
 810113e:	458a      	cmp	sl, r1
 8101140:	fa02 f206 	lsl.w	r2, r2, r6
 8101144:	fa00 f306 	lsl.w	r3, r0, r6
 8101148:	d908      	bls.n	810115c <__udivmoddi4+0x220>
 810114a:	1861      	adds	r1, r4, r1
 810114c:	f109 30ff 	add.w	r0, r9, #4294967295
 8101150:	d248      	bcs.n	81011e4 <__udivmoddi4+0x2a8>
 8101152:	458a      	cmp	sl, r1
 8101154:	d946      	bls.n	81011e4 <__udivmoddi4+0x2a8>
 8101156:	f1a9 0902 	sub.w	r9, r9, #2
 810115a:	4421      	add	r1, r4
 810115c:	eba1 010a 	sub.w	r1, r1, sl
 8101160:	b2bf      	uxth	r7, r7
 8101162:	fbb1 f0fe 	udiv	r0, r1, lr
 8101166:	fb0e 1110 	mls	r1, lr, r0, r1
 810116a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810116e:	fb00 f808 	mul.w	r8, r0, r8
 8101172:	45b8      	cmp	r8, r7
 8101174:	d907      	bls.n	8101186 <__udivmoddi4+0x24a>
 8101176:	19e7      	adds	r7, r4, r7
 8101178:	f100 31ff 	add.w	r1, r0, #4294967295
 810117c:	d22e      	bcs.n	81011dc <__udivmoddi4+0x2a0>
 810117e:	45b8      	cmp	r8, r7
 8101180:	d92c      	bls.n	81011dc <__udivmoddi4+0x2a0>
 8101182:	3802      	subs	r0, #2
 8101184:	4427      	add	r7, r4
 8101186:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810118a:	eba7 0708 	sub.w	r7, r7, r8
 810118e:	fba0 8902 	umull	r8, r9, r0, r2
 8101192:	454f      	cmp	r7, r9
 8101194:	46c6      	mov	lr, r8
 8101196:	4649      	mov	r1, r9
 8101198:	d31a      	bcc.n	81011d0 <__udivmoddi4+0x294>
 810119a:	d017      	beq.n	81011cc <__udivmoddi4+0x290>
 810119c:	b15d      	cbz	r5, 81011b6 <__udivmoddi4+0x27a>
 810119e:	ebb3 020e 	subs.w	r2, r3, lr
 81011a2:	eb67 0701 	sbc.w	r7, r7, r1
 81011a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 81011aa:	40f2      	lsrs	r2, r6
 81011ac:	ea4c 0202 	orr.w	r2, ip, r2
 81011b0:	40f7      	lsrs	r7, r6
 81011b2:	e9c5 2700 	strd	r2, r7, [r5]
 81011b6:	2600      	movs	r6, #0
 81011b8:	4631      	mov	r1, r6
 81011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81011be:	462e      	mov	r6, r5
 81011c0:	4628      	mov	r0, r5
 81011c2:	e70b      	b.n	8100fdc <__udivmoddi4+0xa0>
 81011c4:	4606      	mov	r6, r0
 81011c6:	e6e9      	b.n	8100f9c <__udivmoddi4+0x60>
 81011c8:	4618      	mov	r0, r3
 81011ca:	e6fd      	b.n	8100fc8 <__udivmoddi4+0x8c>
 81011cc:	4543      	cmp	r3, r8
 81011ce:	d2e5      	bcs.n	810119c <__udivmoddi4+0x260>
 81011d0:	ebb8 0e02 	subs.w	lr, r8, r2
 81011d4:	eb69 0104 	sbc.w	r1, r9, r4
 81011d8:	3801      	subs	r0, #1
 81011da:	e7df      	b.n	810119c <__udivmoddi4+0x260>
 81011dc:	4608      	mov	r0, r1
 81011de:	e7d2      	b.n	8101186 <__udivmoddi4+0x24a>
 81011e0:	4660      	mov	r0, ip
 81011e2:	e78d      	b.n	8101100 <__udivmoddi4+0x1c4>
 81011e4:	4681      	mov	r9, r0
 81011e6:	e7b9      	b.n	810115c <__udivmoddi4+0x220>
 81011e8:	4666      	mov	r6, ip
 81011ea:	e775      	b.n	81010d8 <__udivmoddi4+0x19c>
 81011ec:	4630      	mov	r0, r6
 81011ee:	e74a      	b.n	8101086 <__udivmoddi4+0x14a>
 81011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 81011f4:	4439      	add	r1, r7
 81011f6:	e713      	b.n	8101020 <__udivmoddi4+0xe4>
 81011f8:	3802      	subs	r0, #2
 81011fa:	443c      	add	r4, r7
 81011fc:	e724      	b.n	8101048 <__udivmoddi4+0x10c>
 81011fe:	bf00      	nop

08101200 <__aeabi_idiv0>:
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop

08101204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101204:	b480      	push	{r7}
 8101206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101208:	4b0b      	ldr	r3, [pc, #44]	; (8101238 <SystemInit+0x34>)
 810120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810120e:	4a0a      	ldr	r2, [pc, #40]	; (8101238 <SystemInit+0x34>)
 8101210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101218:	4b07      	ldr	r3, [pc, #28]	; (8101238 <SystemInit+0x34>)
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	4a06      	ldr	r2, [pc, #24]	; (8101238 <SystemInit+0x34>)
 810121e:	f043 0310 	orr.w	r3, r3, #16
 8101222:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101224:	4b04      	ldr	r3, [pc, #16]	; (8101238 <SystemInit+0x34>)
 8101226:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810122a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810122c:	bf00      	nop
 810122e:	46bd      	mov	sp, r7
 8101230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101234:	4770      	bx	lr
 8101236:	bf00      	nop
 8101238:	e000ed00 	.word	0xe000ed00

0810123c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b08a      	sub	sp, #40	; 0x28
 8101240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101242:	f107 031c 	add.w	r3, r7, #28
 8101246:	2200      	movs	r2, #0
 8101248:	601a      	str	r2, [r3, #0]
 810124a:	605a      	str	r2, [r3, #4]
 810124c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810124e:	463b      	mov	r3, r7
 8101250:	2200      	movs	r2, #0
 8101252:	601a      	str	r2, [r3, #0]
 8101254:	605a      	str	r2, [r3, #4]
 8101256:	609a      	str	r2, [r3, #8]
 8101258:	60da      	str	r2, [r3, #12]
 810125a:	611a      	str	r2, [r3, #16]
 810125c:	615a      	str	r2, [r3, #20]
 810125e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8101260:	4b2f      	ldr	r3, [pc, #188]	; (8101320 <MX_ADC1_Init+0xe4>)
 8101262:	4a30      	ldr	r2, [pc, #192]	; (8101324 <MX_ADC1_Init+0xe8>)
 8101264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8101266:	4b2e      	ldr	r3, [pc, #184]	; (8101320 <MX_ADC1_Init+0xe4>)
 8101268:	2200      	movs	r2, #0
 810126a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810126c:	4b2c      	ldr	r3, [pc, #176]	; (8101320 <MX_ADC1_Init+0xe4>)
 810126e:	2200      	movs	r2, #0
 8101270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101272:	4b2b      	ldr	r3, [pc, #172]	; (8101320 <MX_ADC1_Init+0xe4>)
 8101274:	2200      	movs	r2, #0
 8101276:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101278:	4b29      	ldr	r3, [pc, #164]	; (8101320 <MX_ADC1_Init+0xe4>)
 810127a:	2204      	movs	r2, #4
 810127c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810127e:	4b28      	ldr	r3, [pc, #160]	; (8101320 <MX_ADC1_Init+0xe4>)
 8101280:	2200      	movs	r2, #0
 8101282:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101284:	4b26      	ldr	r3, [pc, #152]	; (8101320 <MX_ADC1_Init+0xe4>)
 8101286:	2200      	movs	r2, #0
 8101288:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810128a:	4b25      	ldr	r3, [pc, #148]	; (8101320 <MX_ADC1_Init+0xe4>)
 810128c:	2201      	movs	r2, #1
 810128e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101290:	4b23      	ldr	r3, [pc, #140]	; (8101320 <MX_ADC1_Init+0xe4>)
 8101292:	2200      	movs	r2, #0
 8101294:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101296:	4b22      	ldr	r3, [pc, #136]	; (8101320 <MX_ADC1_Init+0xe4>)
 8101298:	2200      	movs	r2, #0
 810129a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810129c:	4b20      	ldr	r3, [pc, #128]	; (8101320 <MX_ADC1_Init+0xe4>)
 810129e:	2200      	movs	r2, #0
 81012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81012a2:	4b1f      	ldr	r3, [pc, #124]	; (8101320 <MX_ADC1_Init+0xe4>)
 81012a4:	2200      	movs	r2, #0
 81012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81012a8:	4b1d      	ldr	r3, [pc, #116]	; (8101320 <MX_ADC1_Init+0xe4>)
 81012aa:	2200      	movs	r2, #0
 81012ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81012ae:	4b1c      	ldr	r3, [pc, #112]	; (8101320 <MX_ADC1_Init+0xe4>)
 81012b0:	2200      	movs	r2, #0
 81012b2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81012b4:	4b1a      	ldr	r3, [pc, #104]	; (8101320 <MX_ADC1_Init+0xe4>)
 81012b6:	2200      	movs	r2, #0
 81012b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81012bc:	4818      	ldr	r0, [pc, #96]	; (8101320 <MX_ADC1_Init+0xe4>)
 81012be:	f002 fe21 	bl	8103f04 <HAL_ADC_Init>
 81012c2:	4603      	mov	r3, r0
 81012c4:	2b00      	cmp	r3, #0
 81012c6:	d001      	beq.n	81012cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 81012c8:	f001 fe6d 	bl	8102fa6 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81012cc:	2300      	movs	r3, #0
 81012ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81012d0:	f107 031c 	add.w	r3, r7, #28
 81012d4:	4619      	mov	r1, r3
 81012d6:	4812      	ldr	r0, [pc, #72]	; (8101320 <MX_ADC1_Init+0xe4>)
 81012d8:	f003 febe 	bl	8105058 <HAL_ADCEx_MultiModeConfigChannel>
 81012dc:	4603      	mov	r3, r0
 81012de:	2b00      	cmp	r3, #0
 81012e0:	d001      	beq.n	81012e6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 81012e2:	f001 fe60 	bl	8102fa6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 81012e6:	4b10      	ldr	r3, [pc, #64]	; (8101328 <MX_ADC1_Init+0xec>)
 81012e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81012ea:	2306      	movs	r3, #6
 81012ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81012ee:	2300      	movs	r3, #0
 81012f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81012f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81012f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81012f8:	2304      	movs	r3, #4
 81012fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81012fc:	2300      	movs	r3, #0
 81012fe:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101300:	2300      	movs	r3, #0
 8101302:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101304:	463b      	mov	r3, r7
 8101306:	4619      	mov	r1, r3
 8101308:	4805      	ldr	r0, [pc, #20]	; (8101320 <MX_ADC1_Init+0xe4>)
 810130a:	f003 f9f3 	bl	81046f4 <HAL_ADC_ConfigChannel>
 810130e:	4603      	mov	r3, r0
 8101310:	2b00      	cmp	r3, #0
 8101312:	d001      	beq.n	8101318 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8101314:	f001 fe47 	bl	8102fa6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8101318:	bf00      	nop
 810131a:	3728      	adds	r7, #40	; 0x28
 810131c:	46bd      	mov	sp, r7
 810131e:	bd80      	pop	{r7, pc}
 8101320:	100000cc 	.word	0x100000cc
 8101324:	40022000 	.word	0x40022000
 8101328:	08600004 	.word	0x08600004

0810132c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 810132c:	b580      	push	{r7, lr}
 810132e:	b0b8      	sub	sp, #224	; 0xe0
 8101330:	af00      	add	r7, sp, #0
 8101332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101334:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101338:	2200      	movs	r2, #0
 810133a:	601a      	str	r2, [r3, #0]
 810133c:	605a      	str	r2, [r3, #4]
 810133e:	609a      	str	r2, [r3, #8]
 8101340:	60da      	str	r2, [r3, #12]
 8101342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101344:	f107 0310 	add.w	r3, r7, #16
 8101348:	22bc      	movs	r2, #188	; 0xbc
 810134a:	2100      	movs	r1, #0
 810134c:	4618      	mov	r0, r3
 810134e:	f00d fd33 	bl	810edb8 <memset>
  if(adcHandle->Instance==ADC1)
 8101352:	687b      	ldr	r3, [r7, #4]
 8101354:	681b      	ldr	r3, [r3, #0]
 8101356:	4a47      	ldr	r2, [pc, #284]	; (8101474 <HAL_ADC_MspInit+0x148>)
 8101358:	4293      	cmp	r3, r2
 810135a:	f040 8087 	bne.w	810146c <HAL_ADC_MspInit+0x140>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 810135e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8101362:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8101364:	2301      	movs	r3, #1
 8101366:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8101368:	2309      	movs	r3, #9
 810136a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 810136c:	2302      	movs	r3, #2
 810136e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101370:	2302      	movs	r3, #2
 8101372:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101374:	2302      	movs	r3, #2
 8101376:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8101378:	23c0      	movs	r3, #192	; 0xc0
 810137a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 810137c:	2320      	movs	r3, #32
 810137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072.0;
 8101380:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101384:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101386:	2300      	movs	r3, #0
 8101388:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810138c:	f107 0310 	add.w	r3, r7, #16
 8101390:	4618      	mov	r0, r3
 8101392:	f008 ff73 	bl	810a27c <HAL_RCCEx_PeriphCLKConfig>
 8101396:	4603      	mov	r3, r0
 8101398:	2b00      	cmp	r3, #0
 810139a:	d001      	beq.n	81013a0 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 810139c:	f001 fe03 	bl	8102fa6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81013a0:	4b35      	ldr	r3, [pc, #212]	; (8101478 <HAL_ADC_MspInit+0x14c>)
 81013a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81013a6:	4a34      	ldr	r2, [pc, #208]	; (8101478 <HAL_ADC_MspInit+0x14c>)
 81013a8:	f043 0320 	orr.w	r3, r3, #32
 81013ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81013b0:	4b31      	ldr	r3, [pc, #196]	; (8101478 <HAL_ADC_MspInit+0x14c>)
 81013b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81013b6:	f003 0320 	and.w	r3, r3, #32
 81013ba:	60fb      	str	r3, [r7, #12]
 81013bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81013be:	4b2e      	ldr	r3, [pc, #184]	; (8101478 <HAL_ADC_MspInit+0x14c>)
 81013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013c4:	4a2c      	ldr	r2, [pc, #176]	; (8101478 <HAL_ADC_MspInit+0x14c>)
 81013c6:	f043 0320 	orr.w	r3, r3, #32
 81013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013ce:	4b2a      	ldr	r3, [pc, #168]	; (8101478 <HAL_ADC_MspInit+0x14c>)
 81013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d4:	f003 0320 	and.w	r3, r3, #32
 81013d8:	60bb      	str	r3, [r7, #8]
 81013da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 81013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81013e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81013e4:	2303      	movs	r3, #3
 81013e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013ea:	2300      	movs	r3, #0
 81013ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81013f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81013f4:	4619      	mov	r1, r3
 81013f6:	4821      	ldr	r0, [pc, #132]	; (810147c <HAL_ADC_MspInit+0x150>)
 81013f8:	f006 ff02 	bl	8108200 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream4;
 81013fc:	4b20      	ldr	r3, [pc, #128]	; (8101480 <HAL_ADC_MspInit+0x154>)
 81013fe:	4a21      	ldr	r2, [pc, #132]	; (8101484 <HAL_ADC_MspInit+0x158>)
 8101400:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8101402:	4b1f      	ldr	r3, [pc, #124]	; (8101480 <HAL_ADC_MspInit+0x154>)
 8101404:	2209      	movs	r2, #9
 8101406:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101408:	4b1d      	ldr	r3, [pc, #116]	; (8101480 <HAL_ADC_MspInit+0x154>)
 810140a:	2200      	movs	r2, #0
 810140c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 810140e:	4b1c      	ldr	r3, [pc, #112]	; (8101480 <HAL_ADC_MspInit+0x154>)
 8101410:	2200      	movs	r2, #0
 8101412:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8101414:	4b1a      	ldr	r3, [pc, #104]	; (8101480 <HAL_ADC_MspInit+0x154>)
 8101416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810141a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 810141c:	4b18      	ldr	r3, [pc, #96]	; (8101480 <HAL_ADC_MspInit+0x154>)
 810141e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101422:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8101424:	4b16      	ldr	r3, [pc, #88]	; (8101480 <HAL_ADC_MspInit+0x154>)
 8101426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810142a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 810142c:	4b14      	ldr	r3, [pc, #80]	; (8101480 <HAL_ADC_MspInit+0x154>)
 810142e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101432:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8101434:	4b12      	ldr	r3, [pc, #72]	; (8101480 <HAL_ADC_MspInit+0x154>)
 8101436:	2200      	movs	r2, #0
 8101438:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810143a:	4b11      	ldr	r3, [pc, #68]	; (8101480 <HAL_ADC_MspInit+0x154>)
 810143c:	2200      	movs	r2, #0
 810143e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8101440:	480f      	ldr	r0, [pc, #60]	; (8101480 <HAL_ADC_MspInit+0x154>)
 8101442:	f004 f88b 	bl	810555c <HAL_DMA_Init>
 8101446:	4603      	mov	r3, r0
 8101448:	2b00      	cmp	r3, #0
 810144a:	d001      	beq.n	8101450 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 810144c:	f001 fdab 	bl	8102fa6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8101450:	687b      	ldr	r3, [r7, #4]
 8101452:	4a0b      	ldr	r2, [pc, #44]	; (8101480 <HAL_ADC_MspInit+0x154>)
 8101454:	64da      	str	r2, [r3, #76]	; 0x4c
 8101456:	4a0a      	ldr	r2, [pc, #40]	; (8101480 <HAL_ADC_MspInit+0x154>)
 8101458:	687b      	ldr	r3, [r7, #4]
 810145a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 810145c:	2200      	movs	r2, #0
 810145e:	2100      	movs	r1, #0
 8101460:	2012      	movs	r0, #18
 8101462:	f003 ffb6 	bl	81053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8101466:	2012      	movs	r0, #18
 8101468:	f003 ffcd 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 810146c:	bf00      	nop
 810146e:	37e0      	adds	r7, #224	; 0xe0
 8101470:	46bd      	mov	sp, r7
 8101472:	bd80      	pop	{r7, pc}
 8101474:	40022000 	.word	0x40022000
 8101478:	58024400 	.word	0x58024400
 810147c:	58021400 	.word	0x58021400
 8101480:	10000130 	.word	0x10000130
 8101484:	40020070 	.word	0x40020070

08101488 <CheckBMP280ChipID>:

int flag = 0;


uint8_t CheckBMP280ChipID()
{
 8101488:	b580      	push	{r7, lr}
 810148a:	b082      	sub	sp, #8
 810148c:	af00      	add	r7, sp, #0
  uint8_t SerialData[3] = {(BMP280_REG_ID | 0x80), 0, 0};
 810148e:	4a19      	ldr	r2, [pc, #100]	; (81014f4 <CheckBMP280ChipID+0x6c>)
 8101490:	1d3b      	adds	r3, r7, #4
 8101492:	6812      	ldr	r2, [r2, #0]
 8101494:	4611      	mov	r1, r2
 8101496:	8019      	strh	r1, [r3, #0]
 8101498:	3302      	adds	r3, #2
 810149a:	0c12      	lsrs	r2, r2, #16
 810149c:	701a      	strb	r2, [r3, #0]
  volatile uint8_t aRxBuffer[3]= {0};
 810149e:	4b16      	ldr	r3, [pc, #88]	; (81014f8 <CheckBMP280ChipID+0x70>)
 81014a0:	881b      	ldrh	r3, [r3, #0]
 81014a2:	803b      	strh	r3, [r7, #0]
 81014a4:	2300      	movs	r3, #0
 81014a6:	70bb      	strb	r3, [r7, #2]

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 81014a8:	2200      	movs	r2, #0
 81014aa:	2110      	movs	r1, #16
 81014ac:	4813      	ldr	r0, [pc, #76]	; (81014fc <CheckBMP280ChipID+0x74>)
 81014ae:	f007 f857 	bl	8108560 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 81014b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81014b6:	f002 fb27 	bl	8103b08 <HAL_Delay>
  if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 2) == HAL_OK)
 81014ba:	463a      	mov	r2, r7
 81014bc:	1d39      	adds	r1, r7, #4
 81014be:	2302      	movs	r3, #2
 81014c0:	480f      	ldr	r0, [pc, #60]	; (8101500 <CheckBMP280ChipID+0x78>)
 81014c2:	f00b f963 	bl	810c78c <HAL_SPI_TransmitReceive_DMA>
 81014c6:	4603      	mov	r3, r0
 81014c8:	2b00      	cmp	r3, #0
 81014ca:	d10a      	bne.n	81014e2 <CheckBMP280ChipID+0x5a>
  {
   while(flag == 1)
 81014cc:	e005      	b.n	81014da <CheckBMP280ChipID+0x52>
    {
      if(aRxBuffer[1] != BMP280_CHIP_ID)
 81014ce:	787b      	ldrb	r3, [r7, #1]
 81014d0:	b2db      	uxtb	r3, r3
 81014d2:	2b58      	cmp	r3, #88	; 0x58
 81014d4:	d001      	beq.n	81014da <CheckBMP280ChipID+0x52>
      {
        return HAL_ERROR;
 81014d6:	2301      	movs	r3, #1
 81014d8:	e007      	b.n	81014ea <CheckBMP280ChipID+0x62>
   while(flag == 1)
 81014da:	4b0a      	ldr	r3, [pc, #40]	; (8101504 <CheckBMP280ChipID+0x7c>)
 81014dc:	681b      	ldr	r3, [r3, #0]
 81014de:	2b01      	cmp	r3, #1
 81014e0:	d0f5      	beq.n	81014ce <CheckBMP280ChipID+0x46>
      }
    }

  }

  flag = 0;
 81014e2:	4b08      	ldr	r3, [pc, #32]	; (8101504 <CheckBMP280ChipID+0x7c>)
 81014e4:	2200      	movs	r2, #0
 81014e6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 81014e8:	2300      	movs	r3, #0

}
 81014ea:	4618      	mov	r0, r3
 81014ec:	3708      	adds	r7, #8
 81014ee:	46bd      	mov	sp, r7
 81014f0:	bd80      	pop	{r7, pc}
 81014f2:	bf00      	nop
 81014f4:	0810fd50 	.word	0x0810fd50
 81014f8:	0810fd54 	.word	0x0810fd54
 81014fc:	58020000 	.word	0x58020000
 8101500:	100003f4 	.word	0x100003f4
 8101504:	100000a8 	.word	0x100000a8

08101508 <Read16Bit>:
{
  return HAL_OK;
}

uint16_t Read16Bit(uint8_t reg)
{
 8101508:	b580      	push	{r7, lr}
 810150a:	b084      	sub	sp, #16
 810150c:	af00      	add	r7, sp, #0
 810150e:	4603      	mov	r3, r0
 8101510:	71fb      	strb	r3, [r7, #7]
   uint16_t result;
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101512:	2200      	movs	r2, #0
 8101514:	2110      	movs	r1, #16
 8101516:	4815      	ldr	r0, [pc, #84]	; (810156c <Read16Bit+0x64>)
 8101518:	f007 f822 	bl	8108560 <HAL_GPIO_WritePin>
   uint8_t SerialData[3] = {(reg|0x80), 0, 0};
 810151c:	79fb      	ldrb	r3, [r7, #7]
 810151e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8101522:	b2db      	uxtb	r3, r3
 8101524:	723b      	strb	r3, [r7, #8]
 8101526:	2300      	movs	r3, #0
 8101528:	727b      	strb	r3, [r7, #9]
 810152a:	2300      	movs	r3, #0
 810152c:	72bb      	strb	r3, [r7, #10]
   static uint8_t aRxBuffer[3]= {0};
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 3);
 810152e:	f107 0108 	add.w	r1, r7, #8
 8101532:	2303      	movs	r3, #3
 8101534:	4a0e      	ldr	r2, [pc, #56]	; (8101570 <Read16Bit+0x68>)
 8101536:	480f      	ldr	r0, [pc, #60]	; (8101574 <Read16Bit+0x6c>)
 8101538:	f00b f928 	bl	810c78c <HAL_SPI_TransmitReceive_DMA>

   while(flag == 1)
 810153c:	e00c      	b.n	8101558 <Read16Bit+0x50>
   {
     result = aRxBuffer[2] << 8 | aRxBuffer [1];
 810153e:	4b0c      	ldr	r3, [pc, #48]	; (8101570 <Read16Bit+0x68>)
 8101540:	789b      	ldrb	r3, [r3, #2]
 8101542:	021b      	lsls	r3, r3, #8
 8101544:	b21a      	sxth	r2, r3
 8101546:	4b0a      	ldr	r3, [pc, #40]	; (8101570 <Read16Bit+0x68>)
 8101548:	785b      	ldrb	r3, [r3, #1]
 810154a:	b21b      	sxth	r3, r3
 810154c:	4313      	orrs	r3, r2
 810154e:	b21b      	sxth	r3, r3
 8101550:	81fb      	strh	r3, [r7, #14]
     flag = 0;
 8101552:	4b09      	ldr	r3, [pc, #36]	; (8101578 <Read16Bit+0x70>)
 8101554:	2200      	movs	r2, #0
 8101556:	601a      	str	r2, [r3, #0]
   while(flag == 1)
 8101558:	4b07      	ldr	r3, [pc, #28]	; (8101578 <Read16Bit+0x70>)
 810155a:	681b      	ldr	r3, [r3, #0]
 810155c:	2b01      	cmp	r3, #1
 810155e:	d0ee      	beq.n	810153e <Read16Bit+0x36>

   }


   return result;
 8101560:	89fb      	ldrh	r3, [r7, #14]
}
 8101562:	4618      	mov	r0, r3
 8101564:	3710      	adds	r7, #16
 8101566:	46bd      	mov	sp, r7
 8101568:	bd80      	pop	{r7, pc}
 810156a:	bf00      	nop
 810156c:	58020000 	.word	0x58020000
 8101570:	100000ac 	.word	0x100000ac
 8101574:	100003f4 	.word	0x100003f4
 8101578:	100000a8 	.word	0x100000a8

0810157c <Read24Bit>:


uint32_t Read24Bit(uint8_t reg)
{
 810157c:	b580      	push	{r7, lr}
 810157e:	b084      	sub	sp, #16
 8101580:	af00      	add	r7, sp, #0
 8101582:	4603      	mov	r3, r0
 8101584:	71fb      	strb	r3, [r7, #7]
  uint32_t result;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101586:	2200      	movs	r2, #0
 8101588:	2110      	movs	r1, #16
 810158a:	4817      	ldr	r0, [pc, #92]	; (81015e8 <Read24Bit+0x6c>)
 810158c:	f006 ffe8 	bl	8108560 <HAL_GPIO_WritePin>
  uint8_t SerialData[4] = {(reg|0x80), 0, 0,0};
 8101590:	79fb      	ldrb	r3, [r7, #7]
 8101592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8101596:	b2db      	uxtb	r3, r3
 8101598:	723b      	strb	r3, [r7, #8]
 810159a:	2300      	movs	r3, #0
 810159c:	727b      	strb	r3, [r7, #9]
 810159e:	2300      	movs	r3, #0
 81015a0:	72bb      	strb	r3, [r7, #10]
 81015a2:	2300      	movs	r3, #0
 81015a4:	72fb      	strb	r3, [r7, #11]
  static uint8_t aRxBuffer[4] = {0};
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 4);
 81015a6:	f107 0108 	add.w	r1, r7, #8
 81015aa:	2304      	movs	r3, #4
 81015ac:	4a0f      	ldr	r2, [pc, #60]	; (81015ec <Read24Bit+0x70>)
 81015ae:	4810      	ldr	r0, [pc, #64]	; (81015f0 <Read24Bit+0x74>)
 81015b0:	f00b f8ec 	bl	810c78c <HAL_SPI_TransmitReceive_DMA>
  while(flag == 1)
 81015b4:	e00f      	b.n	81015d6 <Read24Bit+0x5a>
     {
        result = aRxBuffer[1] << 16 | aRxBuffer[2] << 8 | aRxBuffer[3] >> 4;
 81015b6:	4b0d      	ldr	r3, [pc, #52]	; (81015ec <Read24Bit+0x70>)
 81015b8:	785b      	ldrb	r3, [r3, #1]
 81015ba:	041a      	lsls	r2, r3, #16
 81015bc:	4b0b      	ldr	r3, [pc, #44]	; (81015ec <Read24Bit+0x70>)
 81015be:	789b      	ldrb	r3, [r3, #2]
 81015c0:	021b      	lsls	r3, r3, #8
 81015c2:	4313      	orrs	r3, r2
 81015c4:	4a09      	ldr	r2, [pc, #36]	; (81015ec <Read24Bit+0x70>)
 81015c6:	78d2      	ldrb	r2, [r2, #3]
 81015c8:	0912      	lsrs	r2, r2, #4
 81015ca:	b2d2      	uxtb	r2, r2
 81015cc:	4313      	orrs	r3, r2
 81015ce:	60fb      	str	r3, [r7, #12]
        flag = 0;
 81015d0:	4b08      	ldr	r3, [pc, #32]	; (81015f4 <Read24Bit+0x78>)
 81015d2:	2200      	movs	r2, #0
 81015d4:	601a      	str	r2, [r3, #0]
  while(flag == 1)
 81015d6:	4b07      	ldr	r3, [pc, #28]	; (81015f4 <Read24Bit+0x78>)
 81015d8:	681b      	ldr	r3, [r3, #0]
 81015da:	2b01      	cmp	r3, #1
 81015dc:	d0eb      	beq.n	81015b6 <Read24Bit+0x3a>
     }


  return result;
 81015de:	68fb      	ldr	r3, [r7, #12]
}
 81015e0:	4618      	mov	r0, r3
 81015e2:	3710      	adds	r7, #16
 81015e4:	46bd      	mov	sp, r7
 81015e6:	bd80      	pop	{r7, pc}
 81015e8:	58020000 	.word	0x58020000
 81015ec:	100000b0 	.word	0x100000b0
 81015f0:	100003f4 	.word	0x100003f4
 81015f4:	100000a8 	.word	0x100000a8

081015f8 <ReadTemp>:

void ReadTemp(BMP280Handle* baro)
{
 81015f8:	b580      	push	{r7, lr}
 81015fa:	b086      	sub	sp, #24
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;

  int32_t adc_T = Read24Bit(BMP280_REG_TEMP_MSB);
 8101600:	20fa      	movs	r0, #250	; 0xfa
 8101602:	f7ff ffbb 	bl	810157c <Read24Bit>
 8101606:	4603      	mov	r3, r0
 8101608:	617b      	str	r3, [r7, #20]
  adc_T >>= 4;
 810160a:	697b      	ldr	r3, [r7, #20]
 810160c:	111b      	asrs	r3, r3, #4
 810160e:	617b      	str	r3, [r7, #20]

  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 8101610:	697b      	ldr	r3, [r7, #20]
 8101612:	10da      	asrs	r2, r3, #3
 8101614:	687b      	ldr	r3, [r7, #4]
 8101616:	8b1b      	ldrh	r3, [r3, #24]
 8101618:	005b      	lsls	r3, r3, #1
 810161a:	1ad3      	subs	r3, r2, r3
         ((int32_t)baro->comp_vals.dig_T2)) >> 11;
 810161c:	687a      	ldr	r2, [r7, #4]
 810161e:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 8101622:	fb02 f303 	mul.w	r3, r2, r3
 8101626:	12db      	asrs	r3, r3, #11
 8101628:	613b      	str	r3, [r7, #16]

  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 810162a:	697b      	ldr	r3, [r7, #20]
 810162c:	111b      	asrs	r3, r3, #4
 810162e:	687a      	ldr	r2, [r7, #4]
 8101630:	8b12      	ldrh	r2, [r2, #24]
 8101632:	1a9b      	subs	r3, r3, r2
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 8101634:	697a      	ldr	r2, [r7, #20]
 8101636:	1112      	asrs	r2, r2, #4
 8101638:	6879      	ldr	r1, [r7, #4]
 810163a:	8b09      	ldrh	r1, [r1, #24]
 810163c:	1a52      	subs	r2, r2, r1
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 810163e:	fb02 f303 	mul.w	r3, r2, r3
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 8101642:	131b      	asrs	r3, r3, #12
            12) *
           ((int32_t)baro->comp_vals.dig_T3)) >>
 8101644:	687a      	ldr	r2, [r7, #4]
 8101646:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
            12) *
 810164a:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 810164e:	139b      	asrs	r3, r3, #14
 8101650:	60fb      	str	r3, [r7, #12]
          14;

  t_fine = var1 + var2;
 8101652:	693a      	ldr	r2, [r7, #16]
 8101654:	68fb      	ldr	r3, [r7, #12]
 8101656:	4413      	add	r3, r2
 8101658:	4a0d      	ldr	r2, [pc, #52]	; (8101690 <ReadTemp+0x98>)
 810165a:	6013      	str	r3, [r2, #0]

  float T = (t_fine * 5 + 128) >> 8;
 810165c:	4b0c      	ldr	r3, [pc, #48]	; (8101690 <ReadTemp+0x98>)
 810165e:	681a      	ldr	r2, [r3, #0]
 8101660:	4613      	mov	r3, r2
 8101662:	009b      	lsls	r3, r3, #2
 8101664:	4413      	add	r3, r2
 8101666:	3380      	adds	r3, #128	; 0x80
 8101668:	121b      	asrs	r3, r3, #8
 810166a:	ee07 3a90 	vmov	s15, r3
 810166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101672:	edc7 7a02 	vstr	s15, [r7, #8]
  baro->temperature = T/100;
 8101676:	ed97 7a02 	vldr	s14, [r7, #8]
 810167a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8101694 <ReadTemp+0x9c>
 810167e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101682:	687b      	ldr	r3, [r7, #4]
 8101684:	edc3 7a00 	vstr	s15, [r3]

}
 8101688:	bf00      	nop
 810168a:	3718      	adds	r7, #24
 810168c:	46bd      	mov	sp, r7
 810168e:	bd80      	pop	{r7, pc}
 8101690:	100001a8 	.word	0x100001a8
 8101694:	42c80000 	.word	0x42c80000

08101698 <ReadPressure>:

void ReadPressure(BMP280Handle* baro)
{
 8101698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810169c:	b09c      	sub	sp, #112	; 0x70
 810169e:	af00      	add	r7, sp, #0
 81016a0:	64f8      	str	r0, [r7, #76]	; 0x4c

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp(baro);
 81016a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 81016a4:	f7ff ffa8 	bl	81015f8 <ReadTemp>

  int32_t adc_P = Read24Bit(BMP280_REG_PRESS_MSB);
 81016a8:	20f7      	movs	r0, #247	; 0xf7
 81016aa:	f7ff ff67 	bl	810157c <Read24Bit>
 81016ae:	4603      	mov	r3, r0
 81016b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  adc_P >>=4;
 81016b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81016b4:	111b      	asrs	r3, r3, #4
 81016b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  var1 = ((int64_t)t_fine) - 128000;
 81016b8:	4b6b      	ldr	r3, [pc, #428]	; (8101868 <ReadPressure+0x1d0>)
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	461a      	mov	r2, r3
 81016be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81016c2:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 81016c6:	f143 35ff 	adc.w	r5, r3, #4294967295
 81016ca:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  var2 = var1 * var1 * (int64_t)baro->comp_vals.dig_P6;
 81016ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 81016d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81016d2:	fb03 f102 	mul.w	r1, r3, r2
 81016d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 81016d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81016da:	fb03 f302 	mul.w	r3, r3, r2
 81016de:	18ca      	adds	r2, r1, r3
 81016e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81016e2:	fba3 4503 	umull	r4, r5, r3, r3
 81016e6:	1953      	adds	r3, r2, r5
 81016e8:	461d      	mov	r5, r3
 81016ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81016ec:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 81016f0:	b21a      	sxth	r2, r3
 81016f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81016f6:	fb02 f005 	mul.w	r0, r2, r5
 81016fa:	fb04 f103 	mul.w	r1, r4, r3
 81016fe:	4401      	add	r1, r0
 8101700:	fba4 2302 	umull	r2, r3, r4, r2
 8101704:	4419      	add	r1, r3
 8101706:	460b      	mov	r3, r1
 8101708:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 810170c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  var2 = var2 + ((var1 * (int64_t)baro->comp_vals.dig_P5) << 17);
 8101710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101712:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8101716:	b21a      	sxth	r2, r3
 8101718:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810171c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 810171e:	fb03 f001 	mul.w	r0, r3, r1
 8101722:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8101724:	fb02 f101 	mul.w	r1, r2, r1
 8101728:	4408      	add	r0, r1
 810172a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 810172c:	fba1 2302 	umull	r2, r3, r1, r2
 8101730:	18c1      	adds	r1, r0, r3
 8101732:	460b      	mov	r3, r1
 8101734:	f04f 0000 	mov.w	r0, #0
 8101738:	f04f 0100 	mov.w	r1, #0
 810173c:	0459      	lsls	r1, r3, #17
 810173e:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8101742:	0450      	lsls	r0, r2, #17
 8101744:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101748:	eb12 0800 	adds.w	r8, r2, r0
 810174c:	eb43 0901 	adc.w	r9, r3, r1
 8101750:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
  var2 = var2 + (((int64_t)baro->comp_vals.dig_P4) << 35);
 8101754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101756:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 810175a:	b21a      	sxth	r2, r3
 810175c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101760:	f04f 0000 	mov.w	r0, #0
 8101764:	f04f 0100 	mov.w	r1, #0
 8101768:	00d1      	lsls	r1, r2, #3
 810176a:	2000      	movs	r0, #0
 810176c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101770:	1814      	adds	r4, r2, r0
 8101772:	61bc      	str	r4, [r7, #24]
 8101774:	414b      	adcs	r3, r1
 8101776:	61fb      	str	r3, [r7, #28]
 8101778:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 810177c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 8101780:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101784:	fb03 f102 	mul.w	r1, r3, r2
 8101788:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810178a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810178c:	fb03 f302 	mul.w	r3, r3, r2
 8101790:	18ca      	adds	r2, r1, r3
 8101792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101794:	fba3 4503 	umull	r4, r5, r3, r3
 8101798:	1953      	adds	r3, r2, r5
 810179a:	461d      	mov	r5, r3
 810179c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810179e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 81017a2:	b21a      	sxth	r2, r3
 81017a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81017a8:	fb02 f005 	mul.w	r0, r2, r5
 81017ac:	fb04 f103 	mul.w	r1, r4, r3
 81017b0:	4401      	add	r1, r0
 81017b2:	fba4 2302 	umull	r2, r3, r4, r2
 81017b6:	4419      	add	r1, r3
 81017b8:	460b      	mov	r3, r1
 81017ba:	f04f 0800 	mov.w	r8, #0
 81017be:	f04f 0900 	mov.w	r9, #0
 81017c2:	ea4f 2812 	mov.w	r8, r2, lsr #8
 81017c6:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 81017ca:	ea4f 2923 	mov.w	r9, r3, asr #8
           ((var1 * (int64_t)baro->comp_vals.dig_P2) << 12);
 81017ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017d0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 81017d4:	b21a      	sxth	r2, r3
 81017d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81017da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81017dc:	fb03 f001 	mul.w	r0, r3, r1
 81017e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 81017e2:	fb02 f101 	mul.w	r1, r2, r1
 81017e6:	1844      	adds	r4, r0, r1
 81017e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81017ea:	fba1 0102 	umull	r0, r1, r1, r2
 81017ee:	1863      	adds	r3, r4, r1
 81017f0:	4619      	mov	r1, r3
 81017f2:	f04f 0200 	mov.w	r2, #0
 81017f6:	f04f 0300 	mov.w	r3, #0
 81017fa:	030b      	lsls	r3, r1, #12
 81017fc:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8101800:	0302      	lsls	r2, r0, #12
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 8101802:	eb18 0102 	adds.w	r1, r8, r2
 8101806:	6139      	str	r1, [r7, #16]
 8101808:	eb49 0303 	adc.w	r3, r9, r3
 810180c:	617b      	str	r3, [r7, #20]
 810180e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8101812:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  var1 =
        (((((int64_t)1) << 47) + var1)) * ((int64_t)baro->comp_vals.dig_P1) >> 33;
 8101816:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810181a:	1c11      	adds	r1, r2, #0
 810181c:	6439      	str	r1, [r7, #64]	; 0x40
 810181e:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8101822:	647b      	str	r3, [r7, #68]	; 0x44
 8101824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101826:	8bdb      	ldrh	r3, [r3, #30]
 8101828:	b29a      	uxth	r2, r3
 810182a:	f04f 0300 	mov.w	r3, #0
 810182e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8101832:	4629      	mov	r1, r5
 8101834:	fb02 f001 	mul.w	r0, r2, r1
 8101838:	4621      	mov	r1, r4
 810183a:	fb01 f103 	mul.w	r1, r1, r3
 810183e:	4401      	add	r1, r0
 8101840:	4620      	mov	r0, r4
 8101842:	fba0 2302 	umull	r2, r3, r0, r2
 8101846:	4419      	add	r1, r3
 8101848:	460b      	mov	r3, r1
  var1 =
 810184a:	f04f 0000 	mov.w	r0, #0
 810184e:	f04f 0100 	mov.w	r1, #0
 8101852:	1058      	asrs	r0, r3, #1
 8101854:	17d9      	asrs	r1, r3, #31
 8101856:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    if (var1 == 0) {
 810185a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810185e:	4313      	orrs	r3, r2
 8101860:	f000 80f5 	beq.w	8101a4e <ReadPressure+0x3b6>
 8101864:	e004      	b.n	8101870 <ReadPressure+0x1d8>
 8101866:	bf00      	nop
 8101868:	100001a8 	.word	0x100001a8
 810186c:	43800000 	.word	0x43800000
        return; // avoid exception caused by division by zero
      }
    p = 1048576 - adc_P;
 8101870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101872:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8101876:	461a      	mov	r2, r3
 8101878:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810187c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    p = (((p << 31) - var2) * 3125) / var1;
 8101880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101882:	105b      	asrs	r3, r3, #1
 8101884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101888:	07db      	lsls	r3, r3, #31
 810188a:	63bb      	str	r3, [r7, #56]	; 0x38
 810188c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101890:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8101894:	4621      	mov	r1, r4
 8101896:	ebb1 0a02 	subs.w	sl, r1, r2
 810189a:	4629      	mov	r1, r5
 810189c:	eb61 0b03 	sbc.w	fp, r1, r3
 81018a0:	4652      	mov	r2, sl
 81018a2:	465b      	mov	r3, fp
 81018a4:	1891      	adds	r1, r2, r2
 81018a6:	60b9      	str	r1, [r7, #8]
 81018a8:	415b      	adcs	r3, r3
 81018aa:	60fb      	str	r3, [r7, #12]
 81018ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 81018b0:	eb12 020a 	adds.w	r2, r2, sl
 81018b4:	eb43 030b 	adc.w	r3, r3, fp
 81018b8:	f04f 0000 	mov.w	r0, #0
 81018bc:	f04f 0100 	mov.w	r1, #0
 81018c0:	0199      	lsls	r1, r3, #6
 81018c2:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 81018c6:	0190      	lsls	r0, r2, #6
 81018c8:	1812      	adds	r2, r2, r0
 81018ca:	eb41 0303 	adc.w	r3, r1, r3
 81018ce:	f04f 0000 	mov.w	r0, #0
 81018d2:	f04f 0100 	mov.w	r1, #0
 81018d6:	0099      	lsls	r1, r3, #2
 81018d8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 81018dc:	0090      	lsls	r0, r2, #2
 81018de:	4602      	mov	r2, r0
 81018e0:	460b      	mov	r3, r1
 81018e2:	eb12 020a 	adds.w	r2, r2, sl
 81018e6:	eb43 030b 	adc.w	r3, r3, fp
 81018ea:	f04f 0000 	mov.w	r0, #0
 81018ee:	f04f 0100 	mov.w	r1, #0
 81018f2:	0099      	lsls	r1, r3, #2
 81018f4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 81018f8:	0090      	lsls	r0, r2, #2
 81018fa:	4602      	mov	r2, r0
 81018fc:	460b      	mov	r3, r1
 81018fe:	eb12 010a 	adds.w	r1, r2, sl
 8101902:	6339      	str	r1, [r7, #48]	; 0x30
 8101904:	eb43 030b 	adc.w	r3, r3, fp
 8101908:	637b      	str	r3, [r7, #52]	; 0x34
 810190a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810190e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8101912:	f7ff faab 	bl	8100e6c <__aeabi_ldivmod>
 8101916:	4602      	mov	r2, r0
 8101918:	460b      	mov	r3, r1
 810191a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    var1 = (((int64_t)baro->comp_vals.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 810191e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101920:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8101924:	b218      	sxth	r0, r3
 8101926:	ea4f 71e0 	mov.w	r1, r0, asr #31
 810192a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 810192e:	f04f 0200 	mov.w	r2, #0
 8101932:	f04f 0300 	mov.w	r3, #0
 8101936:	0b62      	lsrs	r2, r4, #13
 8101938:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 810193c:	136b      	asrs	r3, r5, #13
 810193e:	fb02 f501 	mul.w	r5, r2, r1
 8101942:	fb00 f403 	mul.w	r4, r0, r3
 8101946:	442c      	add	r4, r5
 8101948:	fba0 0102 	umull	r0, r1, r0, r2
 810194c:	1863      	adds	r3, r4, r1
 810194e:	4619      	mov	r1, r3
 8101950:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8101954:	f04f 0200 	mov.w	r2, #0
 8101958:	f04f 0300 	mov.w	r3, #0
 810195c:	0b62      	lsrs	r2, r4, #13
 810195e:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8101962:	136b      	asrs	r3, r5, #13
 8101964:	fb02 f501 	mul.w	r5, r2, r1
 8101968:	fb00 f403 	mul.w	r4, r0, r3
 810196c:	442c      	add	r4, r5
 810196e:	fba0 0102 	umull	r0, r1, r0, r2
 8101972:	1863      	adds	r3, r4, r1
 8101974:	4619      	mov	r1, r3
 8101976:	f04f 0200 	mov.w	r2, #0
 810197a:	f04f 0300 	mov.w	r3, #0
 810197e:	0e42      	lsrs	r2, r0, #25
 8101980:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8101984:	164b      	asrs	r3, r1, #25
 8101986:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    var2 = (((int64_t)baro->comp_vals.dig_P8) * p) >> 19;
 810198a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810198c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8101990:	b21a      	sxth	r2, r3
 8101992:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101996:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8101998:	fb03 f001 	mul.w	r0, r3, r1
 810199c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 810199e:	fb02 f101 	mul.w	r1, r2, r1
 81019a2:	1844      	adds	r4, r0, r1
 81019a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 81019a6:	fba1 0102 	umull	r0, r1, r1, r2
 81019aa:	1863      	adds	r3, r4, r1
 81019ac:	4619      	mov	r1, r3
 81019ae:	f04f 0200 	mov.w	r2, #0
 81019b2:	f04f 0300 	mov.w	r3, #0
 81019b6:	0cc2      	lsrs	r2, r0, #19
 81019b8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 81019bc:	14cb      	asrs	r3, r1, #19
 81019be:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    p = ((p + var1 + var2) >> 8) + (((int64_t)baro->comp_vals.dig_P7) << 4);
 81019c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 81019c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81019ca:	1884      	adds	r4, r0, r2
 81019cc:	62bc      	str	r4, [r7, #40]	; 0x28
 81019ce:	eb41 0303 	adc.w	r3, r1, r3
 81019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 81019d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 81019d8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 81019dc:	4621      	mov	r1, r4
 81019de:	1889      	adds	r1, r1, r2
 81019e0:	6239      	str	r1, [r7, #32]
 81019e2:	4629      	mov	r1, r5
 81019e4:	eb43 0101 	adc.w	r1, r3, r1
 81019e8:	6279      	str	r1, [r7, #36]	; 0x24
 81019ea:	f04f 0000 	mov.w	r0, #0
 81019ee:	f04f 0100 	mov.w	r1, #0
 81019f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 81019f6:	4623      	mov	r3, r4
 81019f8:	0a18      	lsrs	r0, r3, #8
 81019fa:	462b      	mov	r3, r5
 81019fc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8101a00:	462b      	mov	r3, r5
 8101a02:	1219      	asrs	r1, r3, #8
 8101a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101a06:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8101a0a:	b21c      	sxth	r4, r3
 8101a0c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8101a10:	f04f 0200 	mov.w	r2, #0
 8101a14:	f04f 0300 	mov.w	r3, #0
 8101a18:	012b      	lsls	r3, r5, #4
 8101a1a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8101a1e:	0122      	lsls	r2, r4, #4
 8101a20:	1884      	adds	r4, r0, r2
 8101a22:	603c      	str	r4, [r7, #0]
 8101a24:	eb41 0303 	adc.w	r3, r1, r3
 8101a28:	607b      	str	r3, [r7, #4]
 8101a2a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8101a2e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

    baro->pressure = (float) p/256;
 8101a32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8101a36:	f7ff f9db 	bl	8100df0 <__aeabi_l2f>
 8101a3a:	ee06 0a90 	vmov	s13, r0
 8101a3e:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 810186c <ReadPressure+0x1d4>
 8101a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101a48:	edc3 7a01 	vstr	s15, [r3, #4]
 8101a4c:	e000      	b.n	8101a50 <ReadPressure+0x3b8>
        return; // avoid exception caused by division by zero
 8101a4e:	bf00      	nop

}
 8101a50:	3770      	adds	r7, #112	; 0x70
 8101a52:	46bd      	mov	sp, r7
 8101a54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08101a58 <ReadAltitude>:

void ReadAltitude(BMP280Handle* baro)
{
 8101a58:	b580      	push	{r7, lr}
 8101a5a:	b084      	sub	sp, #16
 8101a5c:	af00      	add	r7, sp, #0
 8101a5e:	6078      	str	r0, [r7, #4]
  float altitude = 0;
 8101a60:	f04f 0300 	mov.w	r3, #0
 8101a64:	60fb      	str	r3, [r7, #12]
  float pressure = baro->pressure;
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	685b      	ldr	r3, [r3, #4]
 8101a6a:	60bb      	str	r3, [r7, #8]
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure/ SEA_LEVEL_PRESSURE), (1/5.255)));
 8101a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8101a70:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8101b08 <ReadAltitude+0xb0>
 8101a74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101a78:	ee16 0a90 	vmov	r0, s13
 8101a7c:	f7fe fd90 	bl	81005a0 <__aeabi_f2d>
 8101a80:	4602      	mov	r2, r0
 8101a82:	460b      	mov	r3, r1
 8101a84:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8101af8 <ReadAltitude+0xa0>
 8101a88:	ec43 2b10 	vmov	d0, r2, r3
 8101a8c:	f00d f99c 	bl	810edc8 <pow>
 8101a90:	ec53 2b10 	vmov	r2, r3, d0
 8101a94:	f04f 0000 	mov.w	r0, #0
 8101a98:	491c      	ldr	r1, [pc, #112]	; (8101b0c <ReadAltitude+0xb4>)
 8101a9a:	f7fe fc21 	bl	81002e0 <__aeabi_dsub>
 8101a9e:	4602      	mov	r2, r0
 8101aa0:	460b      	mov	r3, r1
 8101aa2:	4610      	mov	r0, r2
 8101aa4:	4619      	mov	r1, r3
 8101aa6:	a316      	add	r3, pc, #88	; (adr r3, 8101b00 <ReadAltitude+0xa8>)
 8101aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101aac:	f7fe fdd0 	bl	8100650 <__aeabi_dmul>
 8101ab0:	4602      	mov	r2, r0
 8101ab2:	460b      	mov	r3, r1
 8101ab4:	4610      	mov	r0, r2
 8101ab6:	4619      	mov	r1, r3
 8101ab8:	f7ff f87a 	bl	8100bb0 <__aeabi_d2f>
 8101abc:	4603      	mov	r3, r0
 8101abe:	60fb      	str	r3, [r7, #12]

  if((altitude <= MIN_ALTITUDE) || altitude >= MAX_ALTITUDE)
 8101ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8101ac4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8101b10 <ReadAltitude+0xb8>
 8101ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101ad0:	d90c      	bls.n	8101aec <ReadAltitude+0x94>
 8101ad2:	edd7 7a03 	vldr	s15, [r7, #12]
 8101ad6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8101b14 <ReadAltitude+0xbc>
 8101ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101ae2:	da03      	bge.n	8101aec <ReadAltitude+0x94>
  {
    return;
  }

  baro->altitude = altitude;
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	68fa      	ldr	r2, [r7, #12]
 8101ae8:	609a      	str	r2, [r3, #8]
 8101aea:	e000      	b.n	8101aee <ReadAltitude+0x96>
    return;
 8101aec:	bf00      	nop

}
 8101aee:	3710      	adds	r7, #16
 8101af0:	46bd      	mov	sp, r7
 8101af2:	bd80      	pop	{r7, pc}
 8101af4:	f3af 8000 	nop.w
 8101af8:	ccd9456c 	.word	0xccd9456c
 8101afc:	3fc85b95 	.word	0x3fc85b95
 8101b00:	00000000 	.word	0x00000000
 8101b04:	40e5a540 	.word	0x40e5a540
 8101b08:	47c5e680 	.word	0x47c5e680
 8101b0c:	3ff00000 	.word	0x3ff00000
 8101b10:	c3fa0000 	.word	0xc3fa0000
 8101b14:	460ca000 	.word	0x460ca000

08101b18 <ReadCalibCoefficients>:



void ReadCalibCoefficients(BMP280Handle* baro)
{
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	b082      	sub	sp, #8
 8101b1c:	af00      	add	r7, sp, #0
 8101b1e:	6078      	str	r0, [r7, #4]
  baro->comp_vals.dig_T1 = Read16Bit(dig_T1);
 8101b20:	2088      	movs	r0, #136	; 0x88
 8101b22:	f7ff fcf1 	bl	8101508 <Read16Bit>
 8101b26:	4603      	mov	r3, r0
 8101b28:	461a      	mov	r2, r3
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	831a      	strh	r2, [r3, #24]
  baro->comp_vals.dig_T2 = Read16Bit(dig_T2);
 8101b2e:	208a      	movs	r0, #138	; 0x8a
 8101b30:	f7ff fcea 	bl	8101508 <Read16Bit>
 8101b34:	4603      	mov	r3, r0
 8101b36:	b21a      	sxth	r2, r3
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	835a      	strh	r2, [r3, #26]
  baro->comp_vals.dig_T3 = Read16Bit(dig_T3);
 8101b3c:	208c      	movs	r0, #140	; 0x8c
 8101b3e:	f7ff fce3 	bl	8101508 <Read16Bit>
 8101b42:	4603      	mov	r3, r0
 8101b44:	b21a      	sxth	r2, r3
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	839a      	strh	r2, [r3, #28]
  baro->comp_vals.dig_P1 = Read16Bit(dig_P1);
 8101b4a:	208e      	movs	r0, #142	; 0x8e
 8101b4c:	f7ff fcdc 	bl	8101508 <Read16Bit>
 8101b50:	4603      	mov	r3, r0
 8101b52:	461a      	mov	r2, r3
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	83da      	strh	r2, [r3, #30]
  baro->comp_vals.dig_P2 = Read16Bit(dig_P2);
 8101b58:	2090      	movs	r0, #144	; 0x90
 8101b5a:	f7ff fcd5 	bl	8101508 <Read16Bit>
 8101b5e:	4603      	mov	r3, r0
 8101b60:	b21a      	sxth	r2, r3
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	841a      	strh	r2, [r3, #32]
  baro->comp_vals.dig_P3 = Read16Bit(dig_P3);
 8101b66:	2092      	movs	r0, #146	; 0x92
 8101b68:	f7ff fcce 	bl	8101508 <Read16Bit>
 8101b6c:	4603      	mov	r3, r0
 8101b6e:	b21a      	sxth	r2, r3
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	845a      	strh	r2, [r3, #34]	; 0x22
  baro->comp_vals.dig_P4 = Read16Bit(dig_P4);
 8101b74:	2094      	movs	r0, #148	; 0x94
 8101b76:	f7ff fcc7 	bl	8101508 <Read16Bit>
 8101b7a:	4603      	mov	r3, r0
 8101b7c:	b21a      	sxth	r2, r3
 8101b7e:	687b      	ldr	r3, [r7, #4]
 8101b80:	849a      	strh	r2, [r3, #36]	; 0x24
  baro->comp_vals.dig_P5 = Read16Bit(dig_P5);
 8101b82:	2096      	movs	r0, #150	; 0x96
 8101b84:	f7ff fcc0 	bl	8101508 <Read16Bit>
 8101b88:	4603      	mov	r3, r0
 8101b8a:	b21a      	sxth	r2, r3
 8101b8c:	687b      	ldr	r3, [r7, #4]
 8101b8e:	84da      	strh	r2, [r3, #38]	; 0x26
  baro->comp_vals.dig_P6 = Read16Bit(dig_P6);
 8101b90:	2098      	movs	r0, #152	; 0x98
 8101b92:	f7ff fcb9 	bl	8101508 <Read16Bit>
 8101b96:	4603      	mov	r3, r0
 8101b98:	b21a      	sxth	r2, r3
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	851a      	strh	r2, [r3, #40]	; 0x28
  baro->comp_vals.dig_P7 = Read16Bit(dig_P7);
 8101b9e:	209a      	movs	r0, #154	; 0x9a
 8101ba0:	f7ff fcb2 	bl	8101508 <Read16Bit>
 8101ba4:	4603      	mov	r3, r0
 8101ba6:	b21a      	sxth	r2, r3
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	855a      	strh	r2, [r3, #42]	; 0x2a
  baro->comp_vals.dig_P8 = Read16Bit(dig_P8);
 8101bac:	209c      	movs	r0, #156	; 0x9c
 8101bae:	f7ff fcab 	bl	8101508 <Read16Bit>
 8101bb2:	4603      	mov	r3, r0
 8101bb4:	b21a      	sxth	r2, r3
 8101bb6:	687b      	ldr	r3, [r7, #4]
 8101bb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  baro->comp_vals.dig_P9 = Read16Bit(dig_P9);
 8101bba:	209e      	movs	r0, #158	; 0x9e
 8101bbc:	f7ff fca4 	bl	8101508 <Read16Bit>
 8101bc0:	4603      	mov	r3, r0
 8101bc2:	b21a      	sxth	r2, r3
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

}
 8101bc8:	bf00      	nop
 8101bca:	3708      	adds	r7, #8
 8101bcc:	46bd      	mov	sp, r7
 8101bce:	bd80      	pop	{r7, pc}

08101bd0 <setConfig>:
void WriteRegister(uint8_t reg, uint8_t data)
{

}
uint8_t setConfig(BMP280Handle* baro)
{
 8101bd0:	b580      	push	{r7, lr}
 8101bd2:	b084      	sub	sp, #16
 8101bd4:	af00      	add	r7, sp, #0
 8101bd6:	6078      	str	r0, [r7, #4]


    // Ultra High resolution 26.3 Hz
   baro->config.mode = NORMAL;
 8101bd8:	687b      	ldr	r3, [r7, #4]
 8101bda:	2203      	movs	r2, #3
 8101bdc:	749a      	strb	r2, [r3, #18]
   baro->config.pressure_oversampling =  X16; // X16;
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	2205      	movs	r2, #5
 8101be2:	755a      	strb	r2, [r3, #21]
   baro->config.temp_oversampling =  X2; //X2;
 8101be4:	687b      	ldr	r3, [r7, #4]
 8101be6:	2202      	movs	r2, #2
 8101be8:	759a      	strb	r2, [r3, #22]

   uint8_t SerialData[2] = {0};
 8101bea:	2300      	movs	r3, #0
 8101bec:	81bb      	strh	r3, [r7, #12]
   uint8_t aRxBuffer[3]= {0};
 8101bee:	4b3c      	ldr	r3, [pc, #240]	; (8101ce0 <setConfig+0x110>)
 8101bf0:	881b      	ldrh	r3, [r3, #0]
 8101bf2:	813b      	strh	r3, [r7, #8]
 8101bf4:	2300      	movs	r3, #0
 8101bf6:	72bb      	strb	r3, [r7, #10]
   SerialData[0] = BMP280_REG_CTRL_MEAS & ~0x80;
 8101bf8:	2374      	movs	r3, #116	; 0x74
 8101bfa:	733b      	strb	r3, [r7, #12]
   SerialData[1] = baro->config.temp_oversampling << 5 | baro->config.pressure_oversampling << 2 | baro->config.mode ;
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	7d9b      	ldrb	r3, [r3, #22]
 8101c00:	015b      	lsls	r3, r3, #5
 8101c02:	b25a      	sxtb	r2, r3
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	7d5b      	ldrb	r3, [r3, #21]
 8101c08:	009b      	lsls	r3, r3, #2
 8101c0a:	b25b      	sxtb	r3, r3
 8101c0c:	4313      	orrs	r3, r2
 8101c0e:	b25a      	sxtb	r2, r3
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	7c9b      	ldrb	r3, [r3, #18]
 8101c14:	b25b      	sxtb	r3, r3
 8101c16:	4313      	orrs	r3, r2
 8101c18:	b25b      	sxtb	r3, r3
 8101c1a:	b2db      	uxtb	r3, r3
 8101c1c:	737b      	strb	r3, [r7, #13]
   //SerialData[1] = 0x27;

   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101c1e:	2200      	movs	r2, #0
 8101c20:	2110      	movs	r1, #16
 8101c22:	4830      	ldr	r0, [pc, #192]	; (8101ce4 <setConfig+0x114>)
 8101c24:	f006 fc9c 	bl	8108560 <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 8101c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101c2c:	f001 ff6c 	bl	8103b08 <HAL_Delay>

   HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 8101c30:	f107 0208 	add.w	r2, r7, #8
 8101c34:	f107 010c 	add.w	r1, r7, #12
 8101c38:	2303      	movs	r3, #3
 8101c3a:	482b      	ldr	r0, [pc, #172]	; (8101ce8 <setConfig+0x118>)
 8101c3c:	f00a fda6 	bl	810c78c <HAL_SPI_TransmitReceive_DMA>

   while(flag == 1)
 8101c40:	e010      	b.n	8101c64 <setConfig+0x94>
   {
        memset(SerialData, 0, sizeof(SerialData));
 8101c42:	f107 030c 	add.w	r3, r7, #12
 8101c46:	2202      	movs	r2, #2
 8101c48:	2100      	movs	r1, #0
 8101c4a:	4618      	mov	r0, r3
 8101c4c:	f00d f8b4 	bl	810edb8 <memset>
        memset(aRxBuffer, 0, sizeof(aRxBuffer));
 8101c50:	f107 0308 	add.w	r3, r7, #8
 8101c54:	2203      	movs	r2, #3
 8101c56:	2100      	movs	r1, #0
 8101c58:	4618      	mov	r0, r3
 8101c5a:	f00d f8ad 	bl	810edb8 <memset>
        flag  = 0;
 8101c5e:	4b23      	ldr	r3, [pc, #140]	; (8101cec <setConfig+0x11c>)
 8101c60:	2200      	movs	r2, #0
 8101c62:	601a      	str	r2, [r3, #0]
   while(flag == 1)
 8101c64:	4b21      	ldr	r3, [pc, #132]	; (8101cec <setConfig+0x11c>)
 8101c66:	681b      	ldr	r3, [r3, #0]
 8101c68:	2b01      	cmp	r3, #1
 8101c6a:	d0ea      	beq.n	8101c42 <setConfig+0x72>
   }


       baro->config.IIR_Filter = FILTER_OFF;
 8101c6c:	687b      	ldr	r3, [r7, #4]
 8101c6e:	2200      	movs	r2, #0
 8101c70:	74da      	strb	r2, [r3, #19]
       baro->config.standby = STANDBY_0_5;
 8101c72:	687b      	ldr	r3, [r7, #4]
 8101c74:	2200      	movs	r2, #0
 8101c76:	751a      	strb	r2, [r3, #20]

       SerialData[0] = BMP280_REG_CONFIG & ~0x80;
 8101c78:	2375      	movs	r3, #117	; 0x75
 8101c7a:	733b      	strb	r3, [r7, #12]
       SerialData[1] = baro->config.standby << 5 | baro->config.IIR_Filter ;
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	7d1b      	ldrb	r3, [r3, #20]
 8101c80:	015b      	lsls	r3, r3, #5
 8101c82:	b25a      	sxtb	r2, r3
 8101c84:	687b      	ldr	r3, [r7, #4]
 8101c86:	7cdb      	ldrb	r3, [r3, #19]
 8101c88:	b25b      	sxtb	r3, r3
 8101c8a:	4313      	orrs	r3, r2
 8101c8c:	b25b      	sxtb	r3, r3
 8101c8e:	b2db      	uxtb	r3, r3
 8101c90:	737b      	strb	r3, [r7, #13]
       HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101c92:	2200      	movs	r2, #0
 8101c94:	2110      	movs	r1, #16
 8101c96:	4813      	ldr	r0, [pc, #76]	; (8101ce4 <setConfig+0x114>)
 8101c98:	f006 fc62 	bl	8108560 <HAL_GPIO_WritePin>

       uint8_t res = HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 8101c9c:	f107 0208 	add.w	r2, r7, #8
 8101ca0:	f107 010c 	add.w	r1, r7, #12
 8101ca4:	2303      	movs	r3, #3
 8101ca6:	4810      	ldr	r0, [pc, #64]	; (8101ce8 <setConfig+0x118>)
 8101ca8:	f00a fd70 	bl	810c78c <HAL_SPI_TransmitReceive_DMA>
 8101cac:	4603      	mov	r3, r0
 8101cae:	73fb      	strb	r3, [r7, #15]

       while(flag == 1)
 8101cb0:	bf00      	nop
 8101cb2:	4b0e      	ldr	r3, [pc, #56]	; (8101cec <setConfig+0x11c>)
 8101cb4:	681b      	ldr	r3, [r3, #0]
 8101cb6:	2b01      	cmp	r3, #1
 8101cb8:	d10c      	bne.n	8101cd4 <setConfig+0x104>
       {
          if(res == HAL_OK)
 8101cba:	7bfb      	ldrb	r3, [r7, #15]
 8101cbc:	2b00      	cmp	r3, #0
 8101cbe:	d104      	bne.n	8101cca <setConfig+0xfa>
          {
            flag = 0;
 8101cc0:	4b0a      	ldr	r3, [pc, #40]	; (8101cec <setConfig+0x11c>)
 8101cc2:	2200      	movs	r2, #0
 8101cc4:	601a      	str	r2, [r3, #0]
            return HAL_OK;
 8101cc6:	2300      	movs	r3, #0
 8101cc8:	e005      	b.n	8101cd6 <setConfig+0x106>
          }

          else
          {
            flag = 0;
 8101cca:	4b08      	ldr	r3, [pc, #32]	; (8101cec <setConfig+0x11c>)
 8101ccc:	2200      	movs	r2, #0
 8101cce:	601a      	str	r2, [r3, #0]
              return HAL_ERROR;
 8101cd0:	2301      	movs	r3, #1
 8101cd2:	e000      	b.n	8101cd6 <setConfig+0x106>
          }

       }


       return HAL_OK;
 8101cd4:	2300      	movs	r3, #0


}
 8101cd6:	4618      	mov	r0, r3
 8101cd8:	3710      	adds	r7, #16
 8101cda:	46bd      	mov	sp, r7
 8101cdc:	bd80      	pop	{r7, pc}
 8101cde:	bf00      	nop
 8101ce0:	0810fd54 	.word	0x0810fd54
 8101ce4:	58020000 	.word	0x58020000
 8101ce8:	100003f4 	.word	0x100003f4
 8101cec:	100000a8 	.word	0x100000a8

08101cf0 <HAL_SPI_TxRxCpltCallback>:

void  HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8101cf0:	b580      	push	{r7, lr}
 8101cf2:	b082      	sub	sp, #8
 8101cf4:	af00      	add	r7, sp, #0
 8101cf6:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8101cf8:	687b      	ldr	r3, [r7, #4]
 8101cfa:	681b      	ldr	r3, [r3, #0]
 8101cfc:	4a07      	ldr	r2, [pc, #28]	; (8101d1c <HAL_SPI_TxRxCpltCallback+0x2c>)
 8101cfe:	4293      	cmp	r3, r2
 8101d00:	d107      	bne.n	8101d12 <HAL_SPI_TxRxCpltCallback+0x22>
    {
      flag = 1;
 8101d02:	4b07      	ldr	r3, [pc, #28]	; (8101d20 <HAL_SPI_TxRxCpltCallback+0x30>)
 8101d04:	2201      	movs	r2, #1
 8101d06:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8101d08:	2201      	movs	r2, #1
 8101d0a:	2110      	movs	r1, #16
 8101d0c:	4805      	ldr	r0, [pc, #20]	; (8101d24 <HAL_SPI_TxRxCpltCallback+0x34>)
 8101d0e:	f006 fc27 	bl	8108560 <HAL_GPIO_WritePin>
    }
}
 8101d12:	bf00      	nop
 8101d14:	3708      	adds	r7, #8
 8101d16:	46bd      	mov	sp, r7
 8101d18:	bd80      	pop	{r7, pc}
 8101d1a:	bf00      	nop
 8101d1c:	40013000 	.word	0x40013000
 8101d20:	100000a8 	.word	0x100000a8
 8101d24:	58020000 	.word	0x58020000

08101d28 <ResetBMP280>:
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);

}

uint8_t ResetBMP280(void)
{
 8101d28:	b580      	push	{r7, lr}
 8101d2a:	b082      	sub	sp, #8
 8101d2c:	af00      	add	r7, sp, #0
   uint8_t SerialData[2] = {(BMP280_REG_RESET & ~0x80), BMP280_RESET_VALUE}; // Register address, Data,
 8101d2e:	f24b 6360 	movw	r3, #46688	; 0xb660
 8101d32:	80bb      	strh	r3, [r7, #4]
   static uint8_t aRxBuffer[3]= {0};
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101d34:	2200      	movs	r2, #0
 8101d36:	2110      	movs	r1, #16
 8101d38:	4809      	ldr	r0, [pc, #36]	; (8101d60 <ResetBMP280+0x38>)
 8101d3a:	f006 fc11 	bl	8108560 <HAL_GPIO_WritePin>

   if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 2) == HAL_OK)
 8101d3e:	1d39      	adds	r1, r7, #4
 8101d40:	2302      	movs	r3, #2
 8101d42:	4a08      	ldr	r2, [pc, #32]	; (8101d64 <ResetBMP280+0x3c>)
 8101d44:	4808      	ldr	r0, [pc, #32]	; (8101d68 <ResetBMP280+0x40>)
 8101d46:	f00a fd21 	bl	810c78c <HAL_SPI_TransmitReceive_DMA>
 8101d4a:	4603      	mov	r3, r0
 8101d4c:	2b00      	cmp	r3, #0
 8101d4e:	d101      	bne.n	8101d54 <ResetBMP280+0x2c>
   {
     return HAL_OK;
 8101d50:	2300      	movs	r3, #0
 8101d52:	e000      	b.n	8101d56 <ResetBMP280+0x2e>
//     return HAL_OK;
//   }

   else
   {
     return HAL_ERROR;
 8101d54:	2301      	movs	r3, #1
   }



}
 8101d56:	4618      	mov	r0, r3
 8101d58:	3708      	adds	r7, #8
 8101d5a:	46bd      	mov	sp, r7
 8101d5c:	bd80      	pop	{r7, pc}
 8101d5e:	bf00      	nop
 8101d60:	58020000 	.word	0x58020000
 8101d64:	100000b4 	.word	0x100000b4
 8101d68:	100003f4 	.word	0x100003f4

08101d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101d6c:	b580      	push	{r7, lr}
 8101d6e:	b082      	sub	sp, #8
 8101d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101d72:	4b2d      	ldr	r3, [pc, #180]	; (8101e28 <MX_DMA_Init+0xbc>)
 8101d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d78:	4a2b      	ldr	r2, [pc, #172]	; (8101e28 <MX_DMA_Init+0xbc>)
 8101d7a:	f043 0301 	orr.w	r3, r3, #1
 8101d7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101d82:	4b29      	ldr	r3, [pc, #164]	; (8101e28 <MX_DMA_Init+0xbc>)
 8101d84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d88:	f003 0301 	and.w	r3, r3, #1
 8101d8c:	607b      	str	r3, [r7, #4]
 8101d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101d90:	4b25      	ldr	r3, [pc, #148]	; (8101e28 <MX_DMA_Init+0xbc>)
 8101d92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d96:	4a24      	ldr	r2, [pc, #144]	; (8101e28 <MX_DMA_Init+0xbc>)
 8101d98:	f043 0302 	orr.w	r3, r3, #2
 8101d9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101da0:	4b21      	ldr	r3, [pc, #132]	; (8101e28 <MX_DMA_Init+0xbc>)
 8101da2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101da6:	f003 0302 	and.w	r3, r3, #2
 8101daa:	603b      	str	r3, [r7, #0]
 8101dac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101dae:	2200      	movs	r2, #0
 8101db0:	2100      	movs	r1, #0
 8101db2:	200b      	movs	r0, #11
 8101db4:	f003 fb0d 	bl	81053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101db8:	200b      	movs	r0, #11
 8101dba:	f003 fb24 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101dbe:	2200      	movs	r2, #0
 8101dc0:	2100      	movs	r1, #0
 8101dc2:	200c      	movs	r0, #12
 8101dc4:	f003 fb05 	bl	81053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101dc8:	200c      	movs	r0, #12
 8101dca:	f003 fb1c 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101dce:	2200      	movs	r2, #0
 8101dd0:	2100      	movs	r1, #0
 8101dd2:	200d      	movs	r0, #13
 8101dd4:	f003 fafd 	bl	81053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101dd8:	200d      	movs	r0, #13
 8101dda:	f003 fb14 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101dde:	2200      	movs	r2, #0
 8101de0:	2100      	movs	r1, #0
 8101de2:	200e      	movs	r0, #14
 8101de4:	f003 faf5 	bl	81053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101de8:	200e      	movs	r0, #14
 8101dea:	f003 fb0c 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8101dee:	2200      	movs	r2, #0
 8101df0:	2100      	movs	r1, #0
 8101df2:	200f      	movs	r0, #15
 8101df4:	f003 faed 	bl	81053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8101df8:	200f      	movs	r0, #15
 8101dfa:	f003 fb04 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101dfe:	2200      	movs	r2, #0
 8101e00:	2100      	movs	r1, #0
 8101e02:	202f      	movs	r0, #47	; 0x2f
 8101e04:	f003 fae5 	bl	81053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101e08:	202f      	movs	r0, #47	; 0x2f
 8101e0a:	f003 fafc 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101e0e:	2200      	movs	r2, #0
 8101e10:	2100      	movs	r1, #0
 8101e12:	2038      	movs	r0, #56	; 0x38
 8101e14:	f003 fadd 	bl	81053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101e18:	2038      	movs	r0, #56	; 0x38
 8101e1a:	f003 faf4 	bl	8105406 <HAL_NVIC_EnableIRQ>

}
 8101e1e:	bf00      	nop
 8101e20:	3708      	adds	r7, #8
 8101e22:	46bd      	mov	sp, r7
 8101e24:	bd80      	pop	{r7, pc}
 8101e26:	bf00      	nop
 8101e28:	58024400 	.word	0x58024400

08101e2c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101e2c:	b580      	push	{r7, lr}
 8101e2e:	b08a      	sub	sp, #40	; 0x28
 8101e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e32:	f107 0314 	add.w	r3, r7, #20
 8101e36:	2200      	movs	r2, #0
 8101e38:	601a      	str	r2, [r3, #0]
 8101e3a:	605a      	str	r2, [r3, #4]
 8101e3c:	609a      	str	r2, [r3, #8]
 8101e3e:	60da      	str	r2, [r3, #12]
 8101e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e42:	4b29      	ldr	r3, [pc, #164]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e48:	4a27      	ldr	r2, [pc, #156]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e4a:	f043 0301 	orr.w	r3, r3, #1
 8101e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e52:	4b25      	ldr	r3, [pc, #148]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e58:	f003 0301 	and.w	r3, r3, #1
 8101e5c:	613b      	str	r3, [r7, #16]
 8101e5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101e60:	4b21      	ldr	r3, [pc, #132]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e66:	4a20      	ldr	r2, [pc, #128]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e68:	f043 0320 	orr.w	r3, r3, #32
 8101e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e70:	4b1d      	ldr	r3, [pc, #116]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e76:	f003 0320 	and.w	r3, r3, #32
 8101e7a:	60fb      	str	r3, [r7, #12]
 8101e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101e7e:	4b1a      	ldr	r3, [pc, #104]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e84:	4a18      	ldr	r2, [pc, #96]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e86:	f043 0308 	orr.w	r3, r3, #8
 8101e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e8e:	4b16      	ldr	r3, [pc, #88]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e94:	f003 0308 	and.w	r3, r3, #8
 8101e98:	60bb      	str	r3, [r7, #8]
 8101e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101e9c:	4b12      	ldr	r3, [pc, #72]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ea2:	4a11      	ldr	r2, [pc, #68]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101ea4:	f043 0302 	orr.w	r3, r3, #2
 8101ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101eac:	4b0e      	ldr	r3, [pc, #56]	; (8101ee8 <MX_GPIO_Init+0xbc>)
 8101eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101eb2:	f003 0302 	and.w	r3, r3, #2
 8101eb6:	607b      	str	r3, [r7, #4]
 8101eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101eba:	2200      	movs	r2, #0
 8101ebc:	2110      	movs	r1, #16
 8101ebe:	480b      	ldr	r0, [pc, #44]	; (8101eec <MX_GPIO_Init+0xc0>)
 8101ec0:	f006 fb4e 	bl	8108560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101ec4:	2310      	movs	r3, #16
 8101ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101ec8:	2301      	movs	r3, #1
 8101eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ecc:	2300      	movs	r3, #0
 8101ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ed0:	2300      	movs	r3, #0
 8101ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101ed4:	f107 0314 	add.w	r3, r7, #20
 8101ed8:	4619      	mov	r1, r3
 8101eda:	4804      	ldr	r0, [pc, #16]	; (8101eec <MX_GPIO_Init+0xc0>)
 8101edc:	f006 f990 	bl	8108200 <HAL_GPIO_Init>

}
 8101ee0:	bf00      	nop
 8101ee2:	3728      	adds	r7, #40	; 0x28
 8101ee4:	46bd      	mov	sp, r7
 8101ee6:	bd80      	pop	{r7, pc}
 8101ee8:	58024400 	.word	0x58024400
 8101eec:	58020000 	.word	0x58020000

08101ef0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101ef0:	b580      	push	{r7, lr}
 8101ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101ef4:	4b1b      	ldr	r3, [pc, #108]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101ef6:	4a1c      	ldr	r2, [pc, #112]	; (8101f68 <MX_I2C1_Init+0x78>)
 8101ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101efa:	4b1a      	ldr	r3, [pc, #104]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101efc:	4a1b      	ldr	r2, [pc, #108]	; (8101f6c <MX_I2C1_Init+0x7c>)
 8101efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101f00:	4b18      	ldr	r3, [pc, #96]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f02:	2200      	movs	r2, #0
 8101f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101f06:	4b17      	ldr	r3, [pc, #92]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f08:	2201      	movs	r2, #1
 8101f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101f0c:	4b15      	ldr	r3, [pc, #84]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f0e:	2200      	movs	r2, #0
 8101f10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101f12:	4b14      	ldr	r3, [pc, #80]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f14:	2200      	movs	r2, #0
 8101f16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101f18:	4b12      	ldr	r3, [pc, #72]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f1a:	2200      	movs	r2, #0
 8101f1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101f1e:	4b11      	ldr	r3, [pc, #68]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f20:	2200      	movs	r2, #0
 8101f22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101f24:	4b0f      	ldr	r3, [pc, #60]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f26:	2200      	movs	r2, #0
 8101f28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101f2a:	480e      	ldr	r0, [pc, #56]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f2c:	f006 fb72 	bl	8108614 <HAL_I2C_Init>
 8101f30:	4603      	mov	r3, r0
 8101f32:	2b00      	cmp	r3, #0
 8101f34:	d001      	beq.n	8101f3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101f36:	f001 f836 	bl	8102fa6 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101f3a:	2100      	movs	r1, #0
 8101f3c:	4809      	ldr	r0, [pc, #36]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f3e:	f007 fea5 	bl	8109c8c <HAL_I2CEx_ConfigAnalogFilter>
 8101f42:	4603      	mov	r3, r0
 8101f44:	2b00      	cmp	r3, #0
 8101f46:	d001      	beq.n	8101f4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101f48:	f001 f82d 	bl	8102fa6 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101f4c:	2100      	movs	r1, #0
 8101f4e:	4805      	ldr	r0, [pc, #20]	; (8101f64 <MX_I2C1_Init+0x74>)
 8101f50:	f007 fee7 	bl	8109d22 <HAL_I2CEx_ConfigDigitalFilter>
 8101f54:	4603      	mov	r3, r0
 8101f56:	2b00      	cmp	r3, #0
 8101f58:	d001      	beq.n	8101f5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101f5a:	f001 f824 	bl	8102fa6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101f5e:	bf00      	nop
 8101f60:	bd80      	pop	{r7, pc}
 8101f62:	bf00      	nop
 8101f64:	10000224 	.word	0x10000224
 8101f68:	40005400 	.word	0x40005400
 8101f6c:	307075b1 	.word	0x307075b1

08101f70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101f70:	b580      	push	{r7, lr}
 8101f72:	b0b8      	sub	sp, #224	; 0xe0
 8101f74:	af00      	add	r7, sp, #0
 8101f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101f7c:	2200      	movs	r2, #0
 8101f7e:	601a      	str	r2, [r3, #0]
 8101f80:	605a      	str	r2, [r3, #4]
 8101f82:	609a      	str	r2, [r3, #8]
 8101f84:	60da      	str	r2, [r3, #12]
 8101f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f88:	f107 0310 	add.w	r3, r7, #16
 8101f8c:	22bc      	movs	r2, #188	; 0xbc
 8101f8e:	2100      	movs	r1, #0
 8101f90:	4618      	mov	r0, r3
 8101f92:	f00c ff11 	bl	810edb8 <memset>
  if(i2cHandle->Instance==I2C1)
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	681b      	ldr	r3, [r3, #0]
 8101f9a:	4a5b      	ldr	r2, [pc, #364]	; (8102108 <HAL_I2C_MspInit+0x198>)
 8101f9c:	4293      	cmp	r3, r2
 8101f9e:	f040 80af 	bne.w	8102100 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101fa2:	2308      	movs	r3, #8
 8101fa4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101fa6:	2300      	movs	r3, #0
 8101fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101fac:	f107 0310 	add.w	r3, r7, #16
 8101fb0:	4618      	mov	r0, r3
 8101fb2:	f008 f963 	bl	810a27c <HAL_RCCEx_PeriphCLKConfig>
 8101fb6:	4603      	mov	r3, r0
 8101fb8:	2b00      	cmp	r3, #0
 8101fba:	d001      	beq.n	8101fc0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101fbc:	f000 fff3 	bl	8102fa6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101fc0:	4b52      	ldr	r3, [pc, #328]	; (810210c <HAL_I2C_MspInit+0x19c>)
 8101fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fc6:	4a51      	ldr	r2, [pc, #324]	; (810210c <HAL_I2C_MspInit+0x19c>)
 8101fc8:	f043 0302 	orr.w	r3, r3, #2
 8101fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fd0:	4b4e      	ldr	r3, [pc, #312]	; (810210c <HAL_I2C_MspInit+0x19c>)
 8101fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fd6:	f003 0302 	and.w	r3, r3, #2
 8101fda:	60fb      	str	r3, [r7, #12]
 8101fdc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101fe6:	2312      	movs	r3, #18
 8101fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fec:	2300      	movs	r3, #0
 8101fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ff2:	2300      	movs	r3, #0
 8101ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101ff8:	2304      	movs	r3, #4
 8101ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101ffe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102002:	4619      	mov	r1, r3
 8102004:	4842      	ldr	r0, [pc, #264]	; (8102110 <HAL_I2C_MspInit+0x1a0>)
 8102006:	f006 f8fb 	bl	8108200 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810200a:	4b40      	ldr	r3, [pc, #256]	; (810210c <HAL_I2C_MspInit+0x19c>)
 810200c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102010:	4a3e      	ldr	r2, [pc, #248]	; (810210c <HAL_I2C_MspInit+0x19c>)
 8102012:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102016:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810201a:	4b3c      	ldr	r3, [pc, #240]	; (810210c <HAL_I2C_MspInit+0x19c>)
 810201c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102024:	60bb      	str	r3, [r7, #8]
 8102026:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8102028:	4b3a      	ldr	r3, [pc, #232]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 810202a:	4a3b      	ldr	r2, [pc, #236]	; (8102118 <HAL_I2C_MspInit+0x1a8>)
 810202c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 810202e:	4b39      	ldr	r3, [pc, #228]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 8102030:	2221      	movs	r2, #33	; 0x21
 8102032:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102034:	4b37      	ldr	r3, [pc, #220]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 8102036:	2200      	movs	r2, #0
 8102038:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810203a:	4b36      	ldr	r3, [pc, #216]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 810203c:	2200      	movs	r2, #0
 810203e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102040:	4b34      	ldr	r3, [pc, #208]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 8102042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102046:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102048:	4b32      	ldr	r3, [pc, #200]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 810204a:	2200      	movs	r2, #0
 810204c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810204e:	4b31      	ldr	r3, [pc, #196]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 8102050:	2200      	movs	r2, #0
 8102052:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8102054:	4b2f      	ldr	r3, [pc, #188]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 8102056:	2200      	movs	r2, #0
 8102058:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 810205a:	4b2e      	ldr	r3, [pc, #184]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 810205c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102060:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102062:	4b2c      	ldr	r3, [pc, #176]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 8102064:	2200      	movs	r2, #0
 8102066:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8102068:	482a      	ldr	r0, [pc, #168]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 810206a:	f003 fa77 	bl	810555c <HAL_DMA_Init>
 810206e:	4603      	mov	r3, r0
 8102070:	2b00      	cmp	r3, #0
 8102072:	d001      	beq.n	8102078 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8102074:	f000 ff97 	bl	8102fa6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	4a26      	ldr	r2, [pc, #152]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 810207c:	63da      	str	r2, [r3, #60]	; 0x3c
 810207e:	4a25      	ldr	r2, [pc, #148]	; (8102114 <HAL_I2C_MspInit+0x1a4>)
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8102084:	4b25      	ldr	r3, [pc, #148]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 8102086:	4a26      	ldr	r2, [pc, #152]	; (8102120 <HAL_I2C_MspInit+0x1b0>)
 8102088:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 810208a:	4b24      	ldr	r3, [pc, #144]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 810208c:	2222      	movs	r2, #34	; 0x22
 810208e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102090:	4b22      	ldr	r3, [pc, #136]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 8102092:	2240      	movs	r2, #64	; 0x40
 8102094:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102096:	4b21      	ldr	r3, [pc, #132]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 8102098:	2200      	movs	r2, #0
 810209a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 810209c:	4b1f      	ldr	r3, [pc, #124]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 810209e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81020a2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81020a4:	4b1d      	ldr	r3, [pc, #116]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 81020a6:	2200      	movs	r2, #0
 81020a8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81020aa:	4b1c      	ldr	r3, [pc, #112]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 81020ac:	2200      	movs	r2, #0
 81020ae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 81020b0:	4b1a      	ldr	r3, [pc, #104]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 81020b2:	2200      	movs	r2, #0
 81020b4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 81020b6:	4b19      	ldr	r3, [pc, #100]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 81020b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81020bc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81020be:	4b17      	ldr	r3, [pc, #92]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 81020c0:	2200      	movs	r2, #0
 81020c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 81020c4:	4815      	ldr	r0, [pc, #84]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 81020c6:	f003 fa49 	bl	810555c <HAL_DMA_Init>
 81020ca:	4603      	mov	r3, r0
 81020cc:	2b00      	cmp	r3, #0
 81020ce:	d001      	beq.n	81020d4 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 81020d0:	f000 ff69 	bl	8102fa6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	4a11      	ldr	r2, [pc, #68]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 81020d8:	639a      	str	r2, [r3, #56]	; 0x38
 81020da:	4a10      	ldr	r2, [pc, #64]	; (810211c <HAL_I2C_MspInit+0x1ac>)
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 81020e0:	2200      	movs	r2, #0
 81020e2:	2100      	movs	r1, #0
 81020e4:	201f      	movs	r0, #31
 81020e6:	f003 f974 	bl	81053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 81020ea:	201f      	movs	r0, #31
 81020ec:	f003 f98b 	bl	8105406 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 81020f0:	2200      	movs	r2, #0
 81020f2:	2100      	movs	r1, #0
 81020f4:	2020      	movs	r0, #32
 81020f6:	f003 f96c 	bl	81053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 81020fa:	2020      	movs	r0, #32
 81020fc:	f003 f983 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8102100:	bf00      	nop
 8102102:	37e0      	adds	r7, #224	; 0xe0
 8102104:	46bd      	mov	sp, r7
 8102106:	bd80      	pop	{r7, pc}
 8102108:	40005400 	.word	0x40005400
 810210c:	58024400 	.word	0x58024400
 8102110:	58020400 	.word	0x58020400
 8102114:	10000270 	.word	0x10000270
 8102118:	40020040 	.word	0x40020040
 810211c:	100001ac 	.word	0x100001ac
 8102120:	40020058 	.word	0x40020058

08102124 <CheckIMUSensorID>:
#include "lsm9ds1.h"
#include <stm32h7xx_hal.h>


uint8_t CheckIMUSensorID(uint8_t address, uint8_t reg)
{
 8102124:	b580      	push	{r7, lr}
 8102126:	b088      	sub	sp, #32
 8102128:	af04      	add	r7, sp, #16
 810212a:	4603      	mov	r3, r0
 810212c:	460a      	mov	r2, r1
 810212e:	71fb      	strb	r3, [r7, #7]
 8102130:	4613      	mov	r3, r2
 8102132:	71bb      	strb	r3, [r7, #6]

//  HAL_Delay(100);
//   uint8_t result = I2CReadByte(address, reg);
//

    uint8_t value = 0x00;
 8102134:	2300      	movs	r3, #0
 8102136:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
//    status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1);
    status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,100);
 8102138:	79fb      	ldrb	r3, [r7, #7]
 810213a:	b29b      	uxth	r3, r3
 810213c:	005b      	lsls	r3, r3, #1
 810213e:	b299      	uxth	r1, r3
 8102140:	79bb      	ldrb	r3, [r7, #6]
 8102142:	b29a      	uxth	r2, r3
 8102144:	2364      	movs	r3, #100	; 0x64
 8102146:	9302      	str	r3, [sp, #8]
 8102148:	2301      	movs	r3, #1
 810214a:	9301      	str	r3, [sp, #4]
 810214c:	f107 030e 	add.w	r3, r7, #14
 8102150:	9300      	str	r3, [sp, #0]
 8102152:	2301      	movs	r3, #1
 8102154:	4807      	ldr	r0, [pc, #28]	; (8102174 <CheckIMUSensorID+0x50>)
 8102156:	f006 fc01 	bl	810895c <HAL_I2C_Mem_Read>
 810215a:	4603      	mov	r3, r0
 810215c:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK)
 810215e:	7bfb      	ldrb	r3, [r7, #15]
 8102160:	2b00      	cmp	r3, #0
 8102162:	d001      	beq.n	8102168 <CheckIMUSensorID+0x44>
    {
       return HAL_ERROR;
 8102164:	2301      	movs	r3, #1
 8102166:	e000      	b.n	810216a <CheckIMUSensorID+0x46>
    }
    return value;
 8102168:	7bbb      	ldrb	r3, [r7, #14]
   //return result;


}
 810216a:	4618      	mov	r0, r3
 810216c:	3710      	adds	r7, #16
 810216e:	46bd      	mov	sp, r7
 8102170:	bd80      	pop	{r7, pc}
 8102172:	bf00      	nop
 8102174:	10000224 	.word	0x10000224

08102178 <init>:

void init(LSM9DS1Handle* imu)
{
 8102178:	b480      	push	{r7}
 810217a:	b083      	sub	sp, #12
 810217c:	af00      	add	r7, sp, #0
 810217e:	6078      	str	r0, [r7, #4]
  // Setup Gyroscope
  imu->gyro_settings.enabled = 1;
 8102180:	687b      	ldr	r3, [r7, #4]
 8102182:	2201      	movs	r2, #1
 8102184:	701a      	strb	r2, [r3, #0]
  imu->gyro_settings.enableX = 1;
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	2201      	movs	r2, #1
 810218a:	735a      	strb	r2, [r3, #13]
  imu->gyro_settings.enableY = 1;
 810218c:	687b      	ldr	r3, [r7, #4]
 810218e:	2201      	movs	r2, #1
 8102190:	739a      	strb	r2, [r3, #14]
  imu->gyro_settings.enableZ = 1;
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	2201      	movs	r2, #1
 8102196:	73da      	strb	r2, [r3, #15]

  // Set GyroScope Scale  245, 500, 2000
  imu->gyro_settings.scale = 245;
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	22f5      	movs	r2, #245	; 0xf5
 810219c:	805a      	strh	r2, [r3, #2]
  imu->gyro_settings.sampleRate = ODR_952HZ;
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	2206      	movs	r2, #6
 81021a2:	711a      	strb	r2, [r3, #4]
  // set cutoff frequency // set this all to zero
  // and do filtering in software
  imu->gyro_settings.bandwidth = 0;
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	2200      	movs	r2, #0
 81021a8:	715a      	strb	r2, [r3, #5]
  imu->gyro_settings.lowPowerEnable = 0;
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	2200      	movs	r2, #0
 81021ae:	719a      	strb	r2, [r3, #6]
  imu->gyro_settings.HPFEnable = 0;
 81021b0:	687b      	ldr	r3, [r7, #4]
 81021b2:	2200      	movs	r2, #0
 81021b4:	71da      	strb	r2, [r3, #7]
  imu->gyro_settings.HPFCutoff = 0;
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	2200      	movs	r2, #0
 81021ba:	721a      	strb	r2, [r3, #8]
  imu->gyro_settings.flipX = 0;
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	2200      	movs	r2, #0
 81021c0:	725a      	strb	r2, [r3, #9]
  imu->gyro_settings.flipY = 0;
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	2200      	movs	r2, #0
 81021c6:	729a      	strb	r2, [r3, #10]
  imu->gyro_settings.flipZ = 0;
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	2200      	movs	r2, #0
 81021cc:	72da      	strb	r2, [r3, #11]
  imu->gyro_settings.orientation = 0;
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	2200      	movs	r2, #0
 81021d2:	731a      	strb	r2, [r3, #12]
  imu->gyro_settings.latchInterrupt = 1;
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	2201      	movs	r2, #1
 81021d8:	741a      	strb	r2, [r3, #16]

  //************Setup Accelerometer***************//
  imu->accel_settings.enabled = 1;
 81021da:	687b      	ldr	r3, [r7, #4]
 81021dc:	2201      	movs	r2, #1
 81021de:	749a      	strb	r2, [r3, #18]
  imu->accel_settings.enableX = 1;
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	2201      	movs	r2, #1
 81021e4:	755a      	strb	r2, [r3, #21]
  imu->accel_settings.enableY = 1;
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	2201      	movs	r2, #1
 81021ea:	759a      	strb	r2, [r3, #22]
  imu->accel_settings.enableZ = 1;
 81021ec:	687b      	ldr	r3, [r7, #4]
 81021ee:	2201      	movs	r2, #1
 81021f0:	75da      	strb	r2, [r3, #23]

  // 2,4, 8,16
  imu->accel_settings.scale = 2;
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	2202      	movs	r2, #2
 81021f6:	74da      	strb	r2, [r3, #19]
  imu->accel_settings.sampleRate = ODR_952HZ;
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	2206      	movs	r2, #6
 81021fc:	751a      	strb	r2, [r3, #20]
  imu->accel_settings.bandwidth = -1;  // bandwidth determined by sample rate
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	22ff      	movs	r2, #255	; 0xff
 8102202:	761a      	strb	r2, [r3, #24]
  imu->accel_settings.highResEnable = 0;
 8102204:	687b      	ldr	r3, [r7, #4]
 8102206:	2200      	movs	r2, #0
 8102208:	765a      	strb	r2, [r3, #25]
  imu->accel_settings.highResBandwidth = 0;
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	2200      	movs	r2, #0
 810220e:	769a      	strb	r2, [r3, #26]

  //**********************Magnetometer******************//

  imu->mag_settings.enabled = 1;
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	2201      	movs	r2, #1
 8102214:	76da      	strb	r2, [r3, #27]
  imu->mag_settings.scale = 4;
 8102216:	687b      	ldr	r3, [r7, #4]
 8102218:	2204      	movs	r2, #4
 810221a:	771a      	strb	r2, [r3, #28]
  imu->mag_settings.sampleRate = MAG_ODR_80HZ;
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	2207      	movs	r2, #7
 8102220:	775a      	strb	r2, [r3, #29]
  imu->mag_settings.tempCompensationEnable = 0;
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	2200      	movs	r2, #0
 8102226:	779a      	strb	r2, [r3, #30]
  imu->mag_settings.XYPerformance = MAG_UHP_MODE;  // ultra high performance
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	2203      	movs	r2, #3
 810222c:	77da      	strb	r2, [r3, #31]
  imu->mag_settings.ZPerformance = MAG_UHP_MODE;
 810222e:	687b      	ldr	r3, [r7, #4]
 8102230:	2203      	movs	r2, #3
 8102232:	f883 2020 	strb.w	r2, [r3, #32]
  imu->mag_settings.lowPowerEnable = 0;
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	2200      	movs	r2, #0
 810223a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  imu->mag_settings.operatingMode = 0 ; // continuous
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	2200      	movs	r2, #0
 8102242:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  imu->temp_settings.enabled = 1;
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	2201      	movs	r2, #1
 810224a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

}
 810224e:	bf00      	nop
 8102250:	370c      	adds	r7, #12
 8102252:	46bd      	mov	sp, r7
 8102254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102258:	4770      	bx	lr

0810225a <setup>:

uint16_t setup(LSM9DS1Handle* imu)
{
 810225a:	b580      	push	{r7, lr}
 810225c:	b084      	sub	sp, #16
 810225e:	af00      	add	r7, sp, #0
 8102260:	6078      	str	r0, [r7, #4]

  // initialise the sensors
  init(imu);
 8102262:	6878      	ldr	r0, [r7, #4]
 8102264:	f7ff ff88 	bl	8102178 <init>

  // constrain the limits of each sensor
  clampScales(imu);
 8102268:	6878      	ldr	r0, [r7, #4]
 810226a:	f000 f9ea 	bl	8102642 <clampScales>

  // Calculate the resolution of each sensor
  calcGyroResolution(imu);
 810226e:	6878      	ldr	r0, [r7, #4]
 8102270:	f000 fb5e 	bl	8102930 <calcGyroResolution>
  calcAccResoltuion(imu);
 8102274:	6878      	ldr	r0, [r7, #4]
 8102276:	f000 fb89 	bl	810298c <calcAccResoltuion>
  calcMagResolution(imu);
 810227a:	6878      	ldr	r0, [r7, #4]
 810227c:	f000 fbd2 	bl	8102a24 <calcMagResolution>

  // check that sensors are detected
  uint8_t ag_check = CheckIMUSensorID(LSM9DS1_AG_ADDR, WHO_AM_I_XG);
 8102280:	210f      	movs	r1, #15
 8102282:	206b      	movs	r0, #107	; 0x6b
 8102284:	f7ff ff4e 	bl	8102124 <CheckIMUSensorID>
 8102288:	4603      	mov	r3, r0
 810228a:	73fb      	strb	r3, [r7, #15]
  uint8_t mag_check = CheckIMUSensorID(LSM9DS1_M_ADDR, WHO_AM_I_M);
 810228c:	210f      	movs	r1, #15
 810228e:	201e      	movs	r0, #30
 8102290:	f7ff ff48 	bl	8102124 <CheckIMUSensorID>
 8102294:	4603      	mov	r3, r0
 8102296:	73bb      	strb	r3, [r7, #14]

  uint16_t imu_response = (ag_check << 8) | mag_check;
 8102298:	7bfb      	ldrb	r3, [r7, #15]
 810229a:	021b      	lsls	r3, r3, #8
 810229c:	b21a      	sxth	r2, r3
 810229e:	7bbb      	ldrb	r3, [r7, #14]
 81022a0:	b21b      	sxth	r3, r3
 81022a2:	4313      	orrs	r3, r2
 81022a4:	b21b      	sxth	r3, r3
 81022a6:	81bb      	strh	r3, [r7, #12]

  if(imu_response != ((WHO_AM_I_AG_RSP << 8 ) | WHO_AM_I_M_RSP))
 81022a8:	89bb      	ldrh	r3, [r7, #12]
 81022aa:	f646 023d 	movw	r2, #26685	; 0x683d
 81022ae:	4293      	cmp	r3, r2
 81022b0:	d001      	beq.n	81022b6 <setup+0x5c>
  {
          return 0;
 81022b2:	2300      	movs	r3, #0
 81022b4:	e009      	b.n	81022ca <setup+0x70>
  }

  // initialise gyro
  initGyro(imu);
 81022b6:	6878      	ldr	r0, [r7, #4]
 81022b8:	f000 f80b 	bl	81022d2 <initGyro>
  // initialise accel
  initAccel(imu);
 81022bc:	6878      	ldr	r0, [r7, #4]
 81022be:	f000 f8ad 	bl	810241c <initAccel>
  // init Mag
 initMag(imu);
 81022c2:	6878      	ldr	r0, [r7, #4]
 81022c4:	f000 f931 	bl	810252a <initMag>
  return imu_response;
 81022c8:	89bb      	ldrh	r3, [r7, #12]
}
 81022ca:	4618      	mov	r0, r3
 81022cc:	3710      	adds	r7, #16
 81022ce:	46bd      	mov	sp, r7
 81022d0:	bd80      	pop	{r7, pc}

081022d2 <initGyro>:


void initGyro(LSM9DS1Handle* imu)
{
 81022d2:	b580      	push	{r7, lr}
 81022d4:	b084      	sub	sp, #16
 81022d6:	af00      	add	r7, sp, #0
 81022d8:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 81022da:	2300      	movs	r3, #0
 81022dc:	73fb      	strb	r3, [r7, #15]
  // ONly set sampleRate if gyro is enabled
  if(imu->gyro_settings.enabled == 1)
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	781b      	ldrb	r3, [r3, #0]
 81022e2:	2b01      	cmp	r3, #1
 81022e4:	d103      	bne.n	81022ee <initGyro+0x1c>
  {
    tempRegValue = (imu->gyro_settings.sampleRate & 0x07) << 5;
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	791b      	ldrb	r3, [r3, #4]
 81022ea:	015b      	lsls	r3, r3, #5
 81022ec:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->gyro_settings.scale)
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	885b      	ldrh	r3, [r3, #2]
 81022f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81022f6:	d003      	beq.n	8102300 <initGyro+0x2e>
 81022f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81022fc:	d005      	beq.n	810230a <initGyro+0x38>
 81022fe:	e009      	b.n	8102314 <initGyro+0x42>
  {
    case 500:
      tempRegValue |= (0x1 << 3);
 8102300:	7bfb      	ldrb	r3, [r7, #15]
 8102302:	f043 0308 	orr.w	r3, r3, #8
 8102306:	73fb      	strb	r3, [r7, #15]
      break;
 8102308:	e004      	b.n	8102314 <initGyro+0x42>
    case 2000:
      tempRegValue |= (0x3 << 3);
 810230a:	7bfb      	ldrb	r3, [r7, #15]
 810230c:	f043 0318 	orr.w	r3, r3, #24
 8102310:	73fb      	strb	r3, [r7, #15]
      break;
 8102312:	bf00      	nop
      // defaults to 0x0 << 4 245 dps
  }
  tempRegValue |= (imu->gyro_settings.bandwidth & 0x3);
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	795b      	ldrb	r3, [r3, #5]
 8102318:	b25b      	sxtb	r3, r3
 810231a:	f003 0303 	and.w	r3, r3, #3
 810231e:	b25a      	sxtb	r2, r3
 8102320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102324:	4313      	orrs	r3, r2
 8102326:	b25b      	sxtb	r3, r3
 8102328:	73fb      	strb	r3, [r7, #15]
  // Write settings to the register
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG1_G, tempRegValue);
 810232a:	7bfb      	ldrb	r3, [r7, #15]
 810232c:	461a      	mov	r2, r3
 810232e:	2110      	movs	r1, #16
 8102330:	206b      	movs	r0, #107	; 0x6b
 8102332:	f000 fbed 	bl	8102b10 <WriteByte>

   // reset tempValue
   tempRegValue = 0;
 8102336:	2300      	movs	r3, #0
 8102338:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG2_G, tempRegValue);
 810233a:	7bfb      	ldrb	r3, [r7, #15]
 810233c:	461a      	mov	r2, r3
 810233e:	2111      	movs	r1, #17
 8102340:	206b      	movs	r0, #107	; 0x6b
 8102342:	f000 fbe5 	bl	8102b10 <WriteByte>

   tempRegValue = 0;
 8102346:	2300      	movs	r3, #0
 8102348:	73fb      	strb	r3, [r7, #15]
   tempRegValue = imu->gyro_settings.lowPowerEnable ? (1<<7) : 0;
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	799b      	ldrb	r3, [r3, #6]
 810234e:	2b00      	cmp	r3, #0
 8102350:	d001      	beq.n	8102356 <initGyro+0x84>
 8102352:	2380      	movs	r3, #128	; 0x80
 8102354:	e000      	b.n	8102358 <initGyro+0x86>
 8102356:	2300      	movs	r3, #0
 8102358:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.HPFEnable == 0x01)
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	79db      	ldrb	r3, [r3, #7]
 810235e:	2b01      	cmp	r3, #1
 8102360:	d10a      	bne.n	8102378 <initGyro+0xa6>
   {
     tempRegValue |= (1 << 6) | (imu->gyro_settings.HPFCutoff & 0x0F);
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	7a1b      	ldrb	r3, [r3, #8]
 8102366:	f003 030f 	and.w	r3, r3, #15
 810236a:	b2da      	uxtb	r2, r3
 810236c:	7bfb      	ldrb	r3, [r7, #15]
 810236e:	4313      	orrs	r3, r2
 8102370:	b2db      	uxtb	r3, r3
 8102372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102376:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG3_G, tempRegValue);
 8102378:	7bfb      	ldrb	r3, [r7, #15]
 810237a:	461a      	mov	r2, r3
 810237c:	2112      	movs	r1, #18
 810237e:	206b      	movs	r0, #107	; 0x6b
 8102380:	f000 fbc6 	bl	8102b10 <WriteByte>


   tempRegValue = 0;
 8102384:	2300      	movs	r3, #0
 8102386:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.enableZ)
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	7bdb      	ldrb	r3, [r3, #15]
 810238c:	2b00      	cmp	r3, #0
 810238e:	d003      	beq.n	8102398 <initGyro+0xc6>
   {
     tempRegValue |= 1 << 5;
 8102390:	7bfb      	ldrb	r3, [r7, #15]
 8102392:	f043 0320 	orr.w	r3, r3, #32
 8102396:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableY)
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	7b9b      	ldrb	r3, [r3, #14]
 810239c:	2b00      	cmp	r3, #0
 810239e:	d003      	beq.n	81023a8 <initGyro+0xd6>
   {
     tempRegValue |= 1 << 4;
 81023a0:	7bfb      	ldrb	r3, [r7, #15]
 81023a2:	f043 0310 	orr.w	r3, r3, #16
 81023a6:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableX)
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	7b5b      	ldrb	r3, [r3, #13]
 81023ac:	2b00      	cmp	r3, #0
 81023ae:	d003      	beq.n	81023b8 <initGyro+0xe6>
   {
     tempRegValue |= 1 << 3;
 81023b0:	7bfb      	ldrb	r3, [r7, #15]
 81023b2:	f043 0308 	orr.w	r3, r3, #8
 81023b6:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.latchInterrupt)
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	7c1b      	ldrb	r3, [r3, #16]
 81023bc:	2b00      	cmp	r3, #0
 81023be:	d003      	beq.n	81023c8 <initGyro+0xf6>
   {
     tempRegValue |= 1 << 1;
 81023c0:	7bfb      	ldrb	r3, [r7, #15]
 81023c2:	f043 0302 	orr.w	r3, r3, #2
 81023c6:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG4, tempRegValue);
 81023c8:	7bfb      	ldrb	r3, [r7, #15]
 81023ca:	461a      	mov	r2, r3
 81023cc:	211e      	movs	r1, #30
 81023ce:	206b      	movs	r0, #107	; 0x6b
 81023d0:	f000 fb9e 	bl	8102b10 <WriteByte>

   tempRegValue = 0;
 81023d4:	2300      	movs	r3, #0
 81023d6:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.flipX)
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	7a5b      	ldrb	r3, [r3, #9]
 81023dc:	2b00      	cmp	r3, #0
 81023de:	d003      	beq.n	81023e8 <initGyro+0x116>
   {
      tempRegValue |= 1 << 5;
 81023e0:	7bfb      	ldrb	r3, [r7, #15]
 81023e2:	f043 0320 	orr.w	r3, r3, #32
 81023e6:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipY)
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	7a9b      	ldrb	r3, [r3, #10]
 81023ec:	2b00      	cmp	r3, #0
 81023ee:	d003      	beq.n	81023f8 <initGyro+0x126>
   {
      tempRegValue |= 1 << 4;
 81023f0:	7bfb      	ldrb	r3, [r7, #15]
 81023f2:	f043 0310 	orr.w	r3, r3, #16
 81023f6:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipZ)
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	7adb      	ldrb	r3, [r3, #11]
 81023fc:	2b00      	cmp	r3, #0
 81023fe:	d003      	beq.n	8102408 <initGyro+0x136>
   {
      tempRegValue |= 1 << 3;
 8102400:	7bfb      	ldrb	r3, [r7, #15]
 8102402:	f043 0308 	orr.w	r3, r3, #8
 8102406:	73fb      	strb	r3, [r7, #15]
   }

   WriteByte(LSM9DS1_AG_ADDR, ORIENT_CFG_G, tempRegValue);
 8102408:	7bfb      	ldrb	r3, [r7, #15]
 810240a:	461a      	mov	r2, r3
 810240c:	2113      	movs	r1, #19
 810240e:	206b      	movs	r0, #107	; 0x6b
 8102410:	f000 fb7e 	bl	8102b10 <WriteByte>
}
 8102414:	bf00      	nop
 8102416:	3710      	adds	r7, #16
 8102418:	46bd      	mov	sp, r7
 810241a:	bd80      	pop	{r7, pc}

0810241c <initAccel>:

void initAccel(LSM9DS1Handle* imu)
{
 810241c:	b580      	push	{r7, lr}
 810241e:	b084      	sub	sp, #16
 8102420:	af00      	add	r7, sp, #0
 8102422:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 8102424:	2300      	movs	r3, #0
 8102426:	73fb      	strb	r3, [r7, #15]

  if(imu->accel_settings.enableZ)
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	7ddb      	ldrb	r3, [r3, #23]
 810242c:	2b00      	cmp	r3, #0
 810242e:	d003      	beq.n	8102438 <initAccel+0x1c>
  {
    tempRegValue |= 1 << 5;
 8102430:	7bfb      	ldrb	r3, [r7, #15]
 8102432:	f043 0320 	orr.w	r3, r3, #32
 8102436:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableY)
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	7d9b      	ldrb	r3, [r3, #22]
 810243c:	2b00      	cmp	r3, #0
 810243e:	d003      	beq.n	8102448 <initAccel+0x2c>
  {
    tempRegValue |= 1 << 4;
 8102440:	7bfb      	ldrb	r3, [r7, #15]
 8102442:	f043 0310 	orr.w	r3, r3, #16
 8102446:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableX)
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	7d5b      	ldrb	r3, [r3, #21]
 810244c:	2b00      	cmp	r3, #0
 810244e:	d003      	beq.n	8102458 <initAccel+0x3c>
  {
    tempRegValue |= 1 << 3;
 8102450:	7bfb      	ldrb	r3, [r7, #15]
 8102452:	f043 0308 	orr.w	r3, r3, #8
 8102456:	73fb      	strb	r3, [r7, #15]
  }

  // Write settings to the register
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG5_XL, tempRegValue);
 8102458:	7bfb      	ldrb	r3, [r7, #15]
 810245a:	461a      	mov	r2, r3
 810245c:	211f      	movs	r1, #31
 810245e:	206b      	movs	r0, #107	; 0x6b
 8102460:	f000 fb56 	bl	8102b10 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 8102464:	2300      	movs	r3, #0
 8102466:	73fb      	strb	r3, [r7, #15]
  // to disable accelerometer, set sampleRate bitfield to 0
  if(imu->accel_settings.enabled)
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	7c9b      	ldrb	r3, [r3, #18]
 810246c:	2b00      	cmp	r3, #0
 810246e:	d008      	beq.n	8102482 <initAccel+0x66>
  {
    tempRegValue |= (imu->accel_settings.sampleRate & 0x07) << 5;
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	7d1b      	ldrb	r3, [r3, #20]
 8102474:	015b      	lsls	r3, r3, #5
 8102476:	b25a      	sxtb	r2, r3
 8102478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810247c:	4313      	orrs	r3, r2
 810247e:	b25b      	sxtb	r3, r3
 8102480:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->accel_settings.scale)
 8102482:	687b      	ldr	r3, [r7, #4]
 8102484:	7cdb      	ldrb	r3, [r3, #19]
 8102486:	2b10      	cmp	r3, #16
 8102488:	d010      	beq.n	81024ac <initAccel+0x90>
 810248a:	2b10      	cmp	r3, #16
 810248c:	dc13      	bgt.n	81024b6 <initAccel+0x9a>
 810248e:	2b04      	cmp	r3, #4
 8102490:	d002      	beq.n	8102498 <initAccel+0x7c>
 8102492:	2b08      	cmp	r3, #8
 8102494:	d005      	beq.n	81024a2 <initAccel+0x86>
 8102496:	e00e      	b.n	81024b6 <initAccel+0x9a>
  {
    case 4:
      tempRegValue |= (0x2 << 3);
 8102498:	7bfb      	ldrb	r3, [r7, #15]
 810249a:	f043 0310 	orr.w	r3, r3, #16
 810249e:	73fb      	strb	r3, [r7, #15]
      break;
 81024a0:	e009      	b.n	81024b6 <initAccel+0x9a>
    case 8:
      tempRegValue |= (0x3 << 3);
 81024a2:	7bfb      	ldrb	r3, [r7, #15]
 81024a4:	f043 0318 	orr.w	r3, r3, #24
 81024a8:	73fb      	strb	r3, [r7, #15]
      break;
 81024aa:	e004      	b.n	81024b6 <initAccel+0x9a>
    case 16:
      tempRegValue |= (0x1 << 3);
 81024ac:	7bfb      	ldrb	r3, [r7, #15]
 81024ae:	f043 0308 	orr.w	r3, r3, #8
 81024b2:	73fb      	strb	r3, [r7, #15]
      break;
 81024b4:	bf00      	nop

  }

  if(imu->accel_settings.bandwidth >= 0)
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	f993 3018 	ldrsb.w	r3, [r3, #24]
 81024bc:	2b00      	cmp	r3, #0
 81024be:	db0e      	blt.n	81024de <initAccel+0xc2>
  {
     // Set BW Scale ODR
    tempRegValue |= (1 << 2);
 81024c0:	7bfb      	ldrb	r3, [r7, #15]
 81024c2:	f043 0304 	orr.w	r3, r3, #4
 81024c6:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.bandwidth & 0x03);
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	f993 3018 	ldrsb.w	r3, [r3, #24]
 81024ce:	f003 0303 	and.w	r3, r3, #3
 81024d2:	b25a      	sxtb	r2, r3
 81024d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81024d8:	4313      	orrs	r3, r2
 81024da:	b25b      	sxtb	r3, r3
 81024dc:	73fb      	strb	r3, [r7, #15]
  }

  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG6_XL, tempRegValue);
 81024de:	7bfb      	ldrb	r3, [r7, #15]
 81024e0:	461a      	mov	r2, r3
 81024e2:	2120      	movs	r1, #32
 81024e4:	206b      	movs	r0, #107	; 0x6b
 81024e6:	f000 fb13 	bl	8102b10 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 81024ea:	2300      	movs	r3, #0
 81024ec:	73fb      	strb	r3, [r7, #15]
  if(imu->accel_settings.highResEnable == 0x1)
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	7e5b      	ldrb	r3, [r3, #25]
 81024f2:	2b01      	cmp	r3, #1
 81024f4:	d10f      	bne.n	8102516 <initAccel+0xfa>
  {
    tempRegValue |= (1 << 7);
 81024f6:	7bfb      	ldrb	r3, [r7, #15]
 81024f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81024fc:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.highResBandwidth & 0x3) << 5;
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	7e9b      	ldrb	r3, [r3, #26]
 8102502:	015b      	lsls	r3, r3, #5
 8102504:	b25b      	sxtb	r3, r3
 8102506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 810250a:	b25a      	sxtb	r2, r3
 810250c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102510:	4313      	orrs	r3, r2
 8102512:	b25b      	sxtb	r3, r3
 8102514:	73fb      	strb	r3, [r7, #15]
  }
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG7_XL, tempRegValue);
 8102516:	7bfb      	ldrb	r3, [r7, #15]
 8102518:	461a      	mov	r2, r3
 810251a:	2121      	movs	r1, #33	; 0x21
 810251c:	206b      	movs	r0, #107	; 0x6b
 810251e:	f000 faf7 	bl	8102b10 <WriteByte>
}
 8102522:	bf00      	nop
 8102524:	3710      	adds	r7, #16
 8102526:	46bd      	mov	sp, r7
 8102528:	bd80      	pop	{r7, pc}

0810252a <initMag>:



void initMag(LSM9DS1Handle* imu)
{
 810252a:	b580      	push	{r7, lr}
 810252c:	b084      	sub	sp, #16
 810252e:	af00      	add	r7, sp, #0
 8102530:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 8102532:	2300      	movs	r3, #0
 8102534:	73fb      	strb	r3, [r7, #15]

  // check if temperature compensation is enabled
  if(imu->mag_settings.tempCompensationEnable == 0x01)
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	7f9b      	ldrb	r3, [r3, #30]
 810253a:	2b01      	cmp	r3, #1
 810253c:	d103      	bne.n	8102546 <initMag+0x1c>
  {
    // Add 1 to the 7th bit of CTRL_REG_1_M
    tempRegValue |= 1 << 7;
 810253e:	7bfb      	ldrb	r3, [r7, #15]
 8102540:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8102544:	73fb      	strb	r3, [r7, #15]
  }
  // Make Operative mode Ultra High Performance
  tempRegValue |= (imu->mag_settings.XYPerformance & 0x3) << 5;
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	7fdb      	ldrb	r3, [r3, #31]
 810254a:	015b      	lsls	r3, r3, #5
 810254c:	b25b      	sxtb	r3, r3
 810254e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8102552:	b25a      	sxtb	r2, r3
 8102554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102558:	4313      	orrs	r3, r2
 810255a:	b25b      	sxtb	r3, r3
 810255c:	73fb      	strb	r3, [r7, #15]
  // Output Data rate set to 80Hz
  tempRegValue |= (imu->mag_settings.sampleRate & 0x7) << 2;
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	7f5b      	ldrb	r3, [r3, #29]
 8102562:	009b      	lsls	r3, r3, #2
 8102564:	b25b      	sxtb	r3, r3
 8102566:	f003 031c 	and.w	r3, r3, #28
 810256a:	b25a      	sxtb	r2, r3
 810256c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102570:	4313      	orrs	r3, r2
 8102572:	b25b      	sxtb	r3, r3
 8102574:	73fb      	strb	r3, [r7, #15]
  // Write to Register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG1_M, tempRegValue);
 8102576:	7bfb      	ldrb	r3, [r7, #15]
 8102578:	461a      	mov	r2, r3
 810257a:	2120      	movs	r1, #32
 810257c:	201e      	movs	r0, #30
 810257e:	f000 fac7 	bl	8102b10 <WriteByte>

   // reset regTempValue
   tempRegValue = 0;
 8102582:	2300      	movs	r3, #0
 8102584:	73fb      	strb	r3, [r7, #15]

   switch(imu->mag_settings.scale)
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	7f1b      	ldrb	r3, [r3, #28]
 810258a:	2b10      	cmp	r3, #16
 810258c:	d010      	beq.n	81025b0 <initMag+0x86>
 810258e:	2b10      	cmp	r3, #16
 8102590:	dc13      	bgt.n	81025ba <initMag+0x90>
 8102592:	2b08      	cmp	r3, #8
 8102594:	d002      	beq.n	810259c <initMag+0x72>
 8102596:	2b0c      	cmp	r3, #12
 8102598:	d005      	beq.n	81025a6 <initMag+0x7c>
 810259a:	e00e      	b.n	81025ba <initMag+0x90>
   {
     case 8:
      tempRegValue |= (0x1 << 5);
 810259c:	7bfb      	ldrb	r3, [r7, #15]
 810259e:	f043 0320 	orr.w	r3, r3, #32
 81025a2:	73fb      	strb	r3, [r7, #15]
      break;
 81025a4:	e009      	b.n	81025ba <initMag+0x90>
     case 12:
      tempRegValue |= (0x2 << 5);
 81025a6:	7bfb      	ldrb	r3, [r7, #15]
 81025a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81025ac:	73fb      	strb	r3, [r7, #15]
      break;
 81025ae:	e004      	b.n	81025ba <initMag+0x90>
     case 16:
      tempRegValue |= (0x3 << 5);
 81025b0:	7bfb      	ldrb	r3, [r7, #15]
 81025b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 81025b6:	73fb      	strb	r3, [r7, #15]
      break;
 81025b8:	bf00      	nop
   }
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG2_M, tempRegValue);
 81025ba:	7bfb      	ldrb	r3, [r7, #15]
 81025bc:	461a      	mov	r2, r3
 81025be:	2121      	movs	r1, #33	; 0x21
 81025c0:	201e      	movs	r0, #30
 81025c2:	f000 faa5 	bl	8102b10 <WriteByte>

   tempRegValue = 0;
 81025c6:	2300      	movs	r3, #0
 81025c8:	73fb      	strb	r3, [r7, #15]
   if(imu->mag_settings.lowPowerEnable == 0x01)
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 81025d0:	2b01      	cmp	r3, #1
 81025d2:	d103      	bne.n	81025dc <initMag+0xb2>
   {
     // set LP bit in CTRL_REG3_M
     tempRegValue |= 0x1 << 5;
 81025d4:	7bfb      	ldrb	r3, [r7, #15]
 81025d6:	f043 0320 	orr.w	r3, r3, #32
 81025da:	73fb      	strb	r3, [r7, #15]
   }
   // Set Operating Mode to continuous conversion mode
   tempRegValue |= imu->mag_settings.operatingMode & 0x3;
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 81025e2:	b25b      	sxtb	r3, r3
 81025e4:	f003 0303 	and.w	r3, r3, #3
 81025e8:	b25a      	sxtb	r2, r3
 81025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81025ee:	4313      	orrs	r3, r2
 81025f0:	b25b      	sxtb	r3, r3
 81025f2:	73fb      	strb	r3, [r7, #15]
   // Write value to register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG3_M, tempRegValue);
 81025f4:	7bfb      	ldrb	r3, [r7, #15]
 81025f6:	461a      	mov	r2, r3
 81025f8:	2122      	movs	r1, #34	; 0x22
 81025fa:	201e      	movs	r0, #30
 81025fc:	f000 fa88 	bl	8102b10 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 8102600:	2300      	movs	r3, #0
 8102602:	73fb      	strb	r3, [r7, #15]
   // set Z performance
   tempRegValue |= (imu->mag_settings.ZPerformance & 0x3) << 2;
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	f893 3020 	ldrb.w	r3, [r3, #32]
 810260a:	009b      	lsls	r3, r3, #2
 810260c:	b25b      	sxtb	r3, r3
 810260e:	f003 030c 	and.w	r3, r3, #12
 8102612:	b25a      	sxtb	r2, r3
 8102614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102618:	4313      	orrs	r3, r2
 810261a:	b25b      	sxtb	r3, r3
 810261c:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG4_M, tempRegValue);
 810261e:	7bfb      	ldrb	r3, [r7, #15]
 8102620:	461a      	mov	r2, r3
 8102622:	2123      	movs	r1, #35	; 0x23
 8102624:	201e      	movs	r0, #30
 8102626:	f000 fa73 	bl	8102b10 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 810262a:	2300      	movs	r3, #0
 810262c:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG5_M, tempRegValue);
 810262e:	7bfb      	ldrb	r3, [r7, #15]
 8102630:	461a      	mov	r2, r3
 8102632:	2124      	movs	r1, #36	; 0x24
 8102634:	201e      	movs	r0, #30
 8102636:	f000 fa6b 	bl	8102b10 <WriteByte>

}
 810263a:	bf00      	nop
 810263c:	3710      	adds	r7, #16
 810263e:	46bd      	mov	sp, r7
 8102640:	bd80      	pop	{r7, pc}

08102642 <clampScales>:


void clampScales(LSM9DS1Handle* imu)
{
 8102642:	b480      	push	{r7}
 8102644:	b083      	sub	sp, #12
 8102646:	af00      	add	r7, sp, #0
 8102648:	6078      	str	r0, [r7, #4]

  // clamp gyro scales
  if((imu->gyro_settings.scale != 245) && (imu->gyro_settings.scale!= 500) && (imu->gyro_settings.scale!= 2000))
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	885b      	ldrh	r3, [r3, #2]
 810264e:	2bf5      	cmp	r3, #245	; 0xf5
 8102650:	d00c      	beq.n	810266c <clampScales+0x2a>
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	885b      	ldrh	r3, [r3, #2]
 8102656:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 810265a:	d007      	beq.n	810266c <clampScales+0x2a>
 810265c:	687b      	ldr	r3, [r7, #4]
 810265e:	885b      	ldrh	r3, [r3, #2]
 8102660:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102664:	d002      	beq.n	810266c <clampScales+0x2a>
  {
     imu->gyro_settings.scale = 245;
 8102666:	687b      	ldr	r3, [r7, #4]
 8102668:	22f5      	movs	r2, #245	; 0xf5
 810266a:	805a      	strh	r2, [r3, #2]
  }

  if((imu->accel_settings.scale != 2) && (imu->accel_settings.scale!= 4) && (imu->accel_settings.scale!= 8)
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	7cdb      	ldrb	r3, [r3, #19]
 8102670:	2b02      	cmp	r3, #2
 8102672:	d00e      	beq.n	8102692 <clampScales+0x50>
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	7cdb      	ldrb	r3, [r3, #19]
 8102678:	2b04      	cmp	r3, #4
 810267a:	d00a      	beq.n	8102692 <clampScales+0x50>
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	7cdb      	ldrb	r3, [r3, #19]
 8102680:	2b08      	cmp	r3, #8
 8102682:	d006      	beq.n	8102692 <clampScales+0x50>
      && (imu->accel_settings.scale != 16))
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	7cdb      	ldrb	r3, [r3, #19]
 8102688:	2b10      	cmp	r3, #16
 810268a:	d002      	beq.n	8102692 <clampScales+0x50>
  {
     imu->accel_settings.scale = 245;
 810268c:	687b      	ldr	r3, [r7, #4]
 810268e:	22f5      	movs	r2, #245	; 0xf5
 8102690:	74da      	strb	r2, [r3, #19]
  }


  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	7f1b      	ldrb	r3, [r3, #28]
 8102696:	2b04      	cmp	r3, #4
 8102698:	d00e      	beq.n	81026b8 <clampScales+0x76>
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	7f1b      	ldrb	r3, [r3, #28]
 810269e:	2b08      	cmp	r3, #8
 81026a0:	d00a      	beq.n	81026b8 <clampScales+0x76>
 81026a2:	687b      	ldr	r3, [r7, #4]
 81026a4:	7f1b      	ldrb	r3, [r3, #28]
 81026a6:	2b0c      	cmp	r3, #12
 81026a8:	d006      	beq.n	81026b8 <clampScales+0x76>
      (imu->mag_settings.scale != 16))
 81026aa:	687b      	ldr	r3, [r7, #4]
 81026ac:	7f1b      	ldrb	r3, [r3, #28]
  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 81026ae:	2b10      	cmp	r3, #16
 81026b0:	d002      	beq.n	81026b8 <clampScales+0x76>
  {
     imu->mag_settings.scale = 4;
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	2204      	movs	r2, #4
 81026b6:	771a      	strb	r2, [r3, #28]
  }

}
 81026b8:	bf00      	nop
 81026ba:	370c      	adds	r7, #12
 81026bc:	46bd      	mov	sp, r7
 81026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026c2:	4770      	bx	lr

081026c4 <calcGyro>:

float calcGyro(float gyro)
{
 81026c4:	b480      	push	{r7}
 81026c6:	b083      	sub	sp, #12
 81026c8:	af00      	add	r7, sp, #0
 81026ca:	ed87 0a01 	vstr	s0, [r7, #4]
  return gyro * gyro_res;
 81026ce:	4b07      	ldr	r3, [pc, #28]	; (81026ec <calcGyro+0x28>)
 81026d0:	ed93 7a00 	vldr	s14, [r3]
 81026d4:	edd7 7a01 	vldr	s15, [r7, #4]
 81026d8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 81026dc:	eeb0 0a67 	vmov.f32	s0, s15
 81026e0:	370c      	adds	r7, #12
 81026e2:	46bd      	mov	sp, r7
 81026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026e8:	4770      	bx	lr
 81026ea:	bf00      	nop
 81026ec:	100002f0 	.word	0x100002f0

081026f0 <calcMag>:
float calcMag(float mag)
{
 81026f0:	b480      	push	{r7}
 81026f2:	b083      	sub	sp, #12
 81026f4:	af00      	add	r7, sp, #0
 81026f6:	ed87 0a01 	vstr	s0, [r7, #4]
  return mag * mag_res;
 81026fa:	4b07      	ldr	r3, [pc, #28]	; (8102718 <calcMag+0x28>)
 81026fc:	ed93 7a00 	vldr	s14, [r3]
 8102700:	edd7 7a01 	vldr	s15, [r7, #4]
 8102704:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102708:	eeb0 0a67 	vmov.f32	s0, s15
 810270c:	370c      	adds	r7, #12
 810270e:	46bd      	mov	sp, r7
 8102710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102714:	4770      	bx	lr
 8102716:	bf00      	nop
 8102718:	100002ec 	.word	0x100002ec

0810271c <calcAccel>:
float calcAccel(float accel)
{
 810271c:	b480      	push	{r7}
 810271e:	b083      	sub	sp, #12
 8102720:	af00      	add	r7, sp, #0
 8102722:	ed87 0a01 	vstr	s0, [r7, #4]
  return accel * acc_res;
 8102726:	4b07      	ldr	r3, [pc, #28]	; (8102744 <calcAccel+0x28>)
 8102728:	ed93 7a00 	vldr	s14, [r3]
 810272c:	edd7 7a01 	vldr	s15, [r7, #4]
 8102730:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102734:	eeb0 0a67 	vmov.f32	s0, s15
 8102738:	370c      	adds	r7, #12
 810273a:	46bd      	mov	sp, r7
 810273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102740:	4770      	bx	lr
 8102742:	bf00      	nop
 8102744:	100002e8 	.word	0x100002e8

08102748 <readGyro>:
///@brief returns the gyroscope
/// data in dps
///@param imu struct handle
///@returns nothing
void readGyro(LSM9DS1Handle* imu)
{
 8102748:	b580      	push	{r7, lr}
 810274a:	b086      	sub	sp, #24
 810274c:	af00      	add	r7, sp, #0
 810274e:	6078      	str	r0, [r7, #4]

  int16_t gx, gy, gz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_G_L, buffer, 6);
 8102750:	f107 020c 	add.w	r2, r7, #12
 8102754:	2306      	movs	r3, #6
 8102756:	2118      	movs	r1, #24
 8102758:	206b      	movs	r0, #107	; 0x6b
 810275a:	f000 f9af 	bl	8102abc <I2CReadBytes>

  gx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 810275e:	7b7b      	ldrb	r3, [r7, #13]
 8102760:	021b      	lsls	r3, r3, #8
 8102762:	b21a      	sxth	r2, r3
 8102764:	7b3b      	ldrb	r3, [r7, #12]
 8102766:	b21b      	sxth	r3, r3
 8102768:	4313      	orrs	r3, r2
 810276a:	82fb      	strh	r3, [r7, #22]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 810276c:	7bfb      	ldrb	r3, [r7, #15]
 810276e:	021b      	lsls	r3, r3, #8
 8102770:	b21a      	sxth	r2, r3
 8102772:	7bbb      	ldrb	r3, [r7, #14]
 8102774:	b21b      	sxth	r3, r3
 8102776:	4313      	orrs	r3, r2
 8102778:	82bb      	strh	r3, [r7, #20]
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 810277a:	7c7b      	ldrb	r3, [r7, #17]
 810277c:	021b      	lsls	r3, r3, #8
 810277e:	b21a      	sxth	r2, r3
 8102780:	7c3b      	ldrb	r3, [r7, #16]
 8102782:	b21b      	sxth	r3, r3
 8102784:	4313      	orrs	r3, r2
 8102786:	827b      	strh	r3, [r7, #18]

  imu->gyro_values.x = calcGyro(gx);
 8102788:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810278c:	ee07 3a90 	vmov	s15, r3
 8102790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102794:	eeb0 0a67 	vmov.f32	s0, s15
 8102798:	f7ff ff94 	bl	81026c4 <calcGyro>
 810279c:	eef0 7a40 	vmov.f32	s15, s0
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  imu->gyro_values.y = calcGyro(gy);
 81027a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 81027aa:	ee07 3a90 	vmov	s15, r3
 81027ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81027b2:	eeb0 0a67 	vmov.f32	s0, s15
 81027b6:	f7ff ff85 	bl	81026c4 <calcGyro>
 81027ba:	eef0 7a40 	vmov.f32	s15, s0
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  imu->gyro_values.z = calcGyro(gz);
 81027c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81027c8:	ee07 3a90 	vmov	s15, r3
 81027cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81027d0:	eeb0 0a67 	vmov.f32	s0, s15
 81027d4:	f7ff ff76 	bl	81026c4 <calcGyro>
 81027d8:	eef0 7a40 	vmov.f32	s15, s0
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

}
 81027e2:	bf00      	nop
 81027e4:	3718      	adds	r7, #24
 81027e6:	46bd      	mov	sp, r7
 81027e8:	bd80      	pop	{r7, pc}

081027ea <readMag>:
///@brief returns the magnetometer
/// data in Gauss
///@param imu struct handle
///@returns nothing
void readMag(LSM9DS1Handle* imu)
{
 81027ea:	b580      	push	{r7, lr}
 81027ec:	b086      	sub	sp, #24
 81027ee:	af00      	add	r7, sp, #0
 81027f0:	6078      	str	r0, [r7, #4]

  int16_t mx, my, mz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_M_ADDR, OUT_X_M_L, buffer, 6);
 81027f2:	f107 020c 	add.w	r2, r7, #12
 81027f6:	2306      	movs	r3, #6
 81027f8:	2128      	movs	r1, #40	; 0x28
 81027fa:	201e      	movs	r0, #30
 81027fc:	f000 f95e 	bl	8102abc <I2CReadBytes>

  mx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into mx
 8102800:	7b7b      	ldrb	r3, [r7, #13]
 8102802:	021b      	lsls	r3, r3, #8
 8102804:	b21a      	sxth	r2, r3
 8102806:	7b3b      	ldrb	r3, [r7, #12]
 8102808:	b21b      	sxth	r3, r3
 810280a:	4313      	orrs	r3, r2
 810280c:	82fb      	strh	r3, [r7, #22]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 810280e:	7bfb      	ldrb	r3, [r7, #15]
 8102810:	021b      	lsls	r3, r3, #8
 8102812:	b21a      	sxth	r2, r3
 8102814:	7bbb      	ldrb	r3, [r7, #14]
 8102816:	b21b      	sxth	r3, r3
 8102818:	4313      	orrs	r3, r2
 810281a:	82bb      	strh	r3, [r7, #20]
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 810281c:	7c7b      	ldrb	r3, [r7, #17]
 810281e:	021b      	lsls	r3, r3, #8
 8102820:	b21a      	sxth	r2, r3
 8102822:	7c3b      	ldrb	r3, [r7, #16]
 8102824:	b21b      	sxth	r3, r3
 8102826:	4313      	orrs	r3, r2
 8102828:	827b      	strh	r3, [r7, #18]

    imu->mag_values.x = calcMag(mx);
 810282a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810282e:	ee07 3a90 	vmov	s15, r3
 8102832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102836:	eeb0 0a67 	vmov.f32	s0, s15
 810283a:	f7ff ff59 	bl	81026f0 <calcMag>
 810283e:	eef0 7a40 	vmov.f32	s15, s0
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->mag_values.y = calcMag(my);
 8102848:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 810284c:	ee07 3a90 	vmov	s15, r3
 8102850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102854:	eeb0 0a67 	vmov.f32	s0, s15
 8102858:	f7ff ff4a 	bl	81026f0 <calcMag>
 810285c:	eef0 7a40 	vmov.f32	s15, s0
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu->mag_values.z = calcMag(mz);
 8102866:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810286a:	ee07 3a90 	vmov	s15, r3
 810286e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102872:	eeb0 0a67 	vmov.f32	s0, s15
 8102876:	f7ff ff3b 	bl	81026f0 <calcMag>
 810287a:	eef0 7a40 	vmov.f32	s15, s0
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8102884:	bf00      	nop
 8102886:	3718      	adds	r7, #24
 8102888:	46bd      	mov	sp, r7
 810288a:	bd80      	pop	{r7, pc}

0810288c <readAccel>:
///@brief returns the
/// accelerometer data in g's
///@param imu struct handle
///@returns nothing
void readAccel(LSM9DS1Handle* imu)
{
 810288c:	b580      	push	{r7, lr}
 810288e:	b086      	sub	sp, #24
 8102890:	af00      	add	r7, sp, #0
 8102892:	6078      	str	r0, [r7, #4]

  int16_t ax, ay, az;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_XL_L, buffer, 6);
 8102894:	f107 020c 	add.w	r2, r7, #12
 8102898:	2306      	movs	r3, #6
 810289a:	2128      	movs	r1, #40	; 0x28
 810289c:	206b      	movs	r0, #107	; 0x6b
 810289e:	f000 f90d 	bl	8102abc <I2CReadBytes>

  ax = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 81028a2:	7b7b      	ldrb	r3, [r7, #13]
 81028a4:	021b      	lsls	r3, r3, #8
 81028a6:	b21a      	sxth	r2, r3
 81028a8:	7b3b      	ldrb	r3, [r7, #12]
 81028aa:	b21b      	sxth	r3, r3
 81028ac:	4313      	orrs	r3, r2
 81028ae:	82fb      	strh	r3, [r7, #22]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 81028b0:	7bfb      	ldrb	r3, [r7, #15]
 81028b2:	021b      	lsls	r3, r3, #8
 81028b4:	b21a      	sxth	r2, r3
 81028b6:	7bbb      	ldrb	r3, [r7, #14]
 81028b8:	b21b      	sxth	r3, r3
 81028ba:	4313      	orrs	r3, r2
 81028bc:	82bb      	strh	r3, [r7, #20]
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 81028be:	7c7b      	ldrb	r3, [r7, #17]
 81028c0:	021b      	lsls	r3, r3, #8
 81028c2:	b21a      	sxth	r2, r3
 81028c4:	7c3b      	ldrb	r3, [r7, #16]
 81028c6:	b21b      	sxth	r3, r3
 81028c8:	4313      	orrs	r3, r2
 81028ca:	827b      	strh	r3, [r7, #18]

  imu->accel_values.x = calcAccel(ax);
 81028cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 81028d0:	ee07 3a90 	vmov	s15, r3
 81028d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81028d8:	eeb0 0a67 	vmov.f32	s0, s15
 81028dc:	f7ff ff1e 	bl	810271c <calcAccel>
 81028e0:	eef0 7a40 	vmov.f32	s15, s0
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  imu->accel_values.y = calcAccel(ay);
 81028ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 81028ee:	ee07 3a90 	vmov	s15, r3
 81028f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81028f6:	eeb0 0a67 	vmov.f32	s0, s15
 81028fa:	f7ff ff0f 	bl	810271c <calcAccel>
 81028fe:	eef0 7a40 	vmov.f32	s15, s0
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  imu->accel_values.z = calcAccel(az);
 8102908:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810290c:	ee07 3a90 	vmov	s15, r3
 8102910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102914:	eeb0 0a67 	vmov.f32	s0, s15
 8102918:	f7ff ff00 	bl	810271c <calcAccel>
 810291c:	eef0 7a40 	vmov.f32	s15, s0
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38


}
 8102926:	bf00      	nop
 8102928:	3718      	adds	r7, #24
 810292a:	46bd      	mov	sp, r7
 810292c:	bd80      	pop	{r7, pc}
	...

08102930 <calcGyroResolution>:
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG9, temp);
}


void calcGyroResolution(LSM9DS1Handle* imu)
{
 8102930:	b480      	push	{r7}
 8102932:	b083      	sub	sp, #12
 8102934:	af00      	add	r7, sp, #0
 8102936:	6078      	str	r0, [r7, #4]

  switch(imu->gyro_settings.scale)
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	885b      	ldrh	r3, [r3, #2]
 810293c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102940:	d010      	beq.n	8102964 <calcGyroResolution+0x34>
 8102942:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102946:	dc11      	bgt.n	810296c <calcGyroResolution+0x3c>
 8102948:	2bf5      	cmp	r3, #245	; 0xf5
 810294a:	d003      	beq.n	8102954 <calcGyroResolution+0x24>
 810294c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8102950:	d004      	beq.n	810295c <calcGyroResolution+0x2c>
    case 2000:
      gyro_res = GYRO_FS_2000;
      break;

    default:
      break;
 8102952:	e00b      	b.n	810296c <calcGyroResolution+0x3c>
      gyro_res =  GYRO_FS_245;
 8102954:	4b09      	ldr	r3, [pc, #36]	; (810297c <calcGyroResolution+0x4c>)
 8102956:	4a0a      	ldr	r2, [pc, #40]	; (8102980 <calcGyroResolution+0x50>)
 8102958:	601a      	str	r2, [r3, #0]
      break;
 810295a:	e008      	b.n	810296e <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_500;
 810295c:	4b07      	ldr	r3, [pc, #28]	; (810297c <calcGyroResolution+0x4c>)
 810295e:	4a09      	ldr	r2, [pc, #36]	; (8102984 <calcGyroResolution+0x54>)
 8102960:	601a      	str	r2, [r3, #0]
      break;
 8102962:	e004      	b.n	810296e <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_2000;
 8102964:	4b05      	ldr	r3, [pc, #20]	; (810297c <calcGyroResolution+0x4c>)
 8102966:	4a08      	ldr	r2, [pc, #32]	; (8102988 <calcGyroResolution+0x58>)
 8102968:	601a      	str	r2, [r3, #0]
      break;
 810296a:	e000      	b.n	810296e <calcGyroResolution+0x3e>
      break;
 810296c:	bf00      	nop
  }
}
 810296e:	bf00      	nop
 8102970:	370c      	adds	r7, #12
 8102972:	46bd      	mov	sp, r7
 8102974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102978:	4770      	bx	lr
 810297a:	bf00      	nop
 810297c:	100002f0 	.word	0x100002f0
 8102980:	3c0f5c29 	.word	0x3c0f5c29
 8102984:	3c8f5c29 	.word	0x3c8f5c29
 8102988:	3d8f5c29 	.word	0x3d8f5c29

0810298c <calcAccResoltuion>:

void calcAccResoltuion(LSM9DS1Handle* imu)
{
 810298c:	b480      	push	{r7}
 810298e:	b083      	sub	sp, #12
 8102990:	af00      	add	r7, sp, #0
 8102992:	6078      	str	r0, [r7, #4]

  switch(imu->accel_settings.scale)
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	7cdb      	ldrb	r3, [r3, #19]
 8102998:	3b02      	subs	r3, #2
 810299a:	2b0e      	cmp	r3, #14
 810299c:	d830      	bhi.n	8102a00 <calcAccResoltuion+0x74>
 810299e:	a201      	add	r2, pc, #4	; (adr r2, 81029a4 <calcAccResoltuion+0x18>)
 81029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81029a4:	081029e1 	.word	0x081029e1
 81029a8:	08102a01 	.word	0x08102a01
 81029ac:	081029e9 	.word	0x081029e9
 81029b0:	08102a01 	.word	0x08102a01
 81029b4:	08102a01 	.word	0x08102a01
 81029b8:	08102a01 	.word	0x08102a01
 81029bc:	081029f1 	.word	0x081029f1
 81029c0:	08102a01 	.word	0x08102a01
 81029c4:	08102a01 	.word	0x08102a01
 81029c8:	08102a01 	.word	0x08102a01
 81029cc:	08102a01 	.word	0x08102a01
 81029d0:	08102a01 	.word	0x08102a01
 81029d4:	08102a01 	.word	0x08102a01
 81029d8:	08102a01 	.word	0x08102a01
 81029dc:	081029f9 	.word	0x081029f9
  {
    case 2:
      acc_res = ACC_FS_2G;
 81029e0:	4b0b      	ldr	r3, [pc, #44]	; (8102a10 <calcAccResoltuion+0x84>)
 81029e2:	4a0c      	ldr	r2, [pc, #48]	; (8102a14 <calcAccResoltuion+0x88>)
 81029e4:	601a      	str	r2, [r3, #0]
    break;
 81029e6:	e00c      	b.n	8102a02 <calcAccResoltuion+0x76>

    case 4:
      acc_res = ACC_FS_4G;
 81029e8:	4b09      	ldr	r3, [pc, #36]	; (8102a10 <calcAccResoltuion+0x84>)
 81029ea:	4a0b      	ldr	r2, [pc, #44]	; (8102a18 <calcAccResoltuion+0x8c>)
 81029ec:	601a      	str	r2, [r3, #0]
     break;
 81029ee:	e008      	b.n	8102a02 <calcAccResoltuion+0x76>

    case 8:
      acc_res = ACC_FS_8G;
 81029f0:	4b07      	ldr	r3, [pc, #28]	; (8102a10 <calcAccResoltuion+0x84>)
 81029f2:	4a0a      	ldr	r2, [pc, #40]	; (8102a1c <calcAccResoltuion+0x90>)
 81029f4:	601a      	str	r2, [r3, #0]
      break;
 81029f6:	e004      	b.n	8102a02 <calcAccResoltuion+0x76>

    case 16:
      acc_res = ACC_FS_16G;
 81029f8:	4b05      	ldr	r3, [pc, #20]	; (8102a10 <calcAccResoltuion+0x84>)
 81029fa:	4a09      	ldr	r2, [pc, #36]	; (8102a20 <calcAccResoltuion+0x94>)
 81029fc:	601a      	str	r2, [r3, #0]
      break;
 81029fe:	e000      	b.n	8102a02 <calcAccResoltuion+0x76>

    default:
      break;
 8102a00:	bf00      	nop

  }

}
 8102a02:	bf00      	nop
 8102a04:	370c      	adds	r7, #12
 8102a06:	46bd      	mov	sp, r7
 8102a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a0c:	4770      	bx	lr
 8102a0e:	bf00      	nop
 8102a10:	100002e8 	.word	0x100002e8
 8102a14:	387fda40 	.word	0x387fda40
 8102a18:	38ffda40 	.word	0x38ffda40
 8102a1c:	397fda40 	.word	0x397fda40
 8102a20:	3a3fe3b0 	.word	0x3a3fe3b0

08102a24 <calcMagResolution>:
void calcMagResolution(LSM9DS1Handle* imu)
{
 8102a24:	b480      	push	{r7}
 8102a26:	b083      	sub	sp, #12
 8102a28:	af00      	add	r7, sp, #0
 8102a2a:	6078      	str	r0, [r7, #4]

  switch(imu->mag_settings.scale)
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	7f1b      	ldrb	r3, [r3, #28]
 8102a30:	3b02      	subs	r3, #2
 8102a32:	2b0e      	cmp	r3, #14
 8102a34:	d830      	bhi.n	8102a98 <calcMagResolution+0x74>
 8102a36:	a201      	add	r2, pc, #4	; (adr r2, 8102a3c <calcMagResolution+0x18>)
 8102a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a3c:	08102a79 	.word	0x08102a79
 8102a40:	08102a99 	.word	0x08102a99
 8102a44:	08102a81 	.word	0x08102a81
 8102a48:	08102a99 	.word	0x08102a99
 8102a4c:	08102a99 	.word	0x08102a99
 8102a50:	08102a99 	.word	0x08102a99
 8102a54:	08102a89 	.word	0x08102a89
 8102a58:	08102a99 	.word	0x08102a99
 8102a5c:	08102a99 	.word	0x08102a99
 8102a60:	08102a99 	.word	0x08102a99
 8102a64:	08102a99 	.word	0x08102a99
 8102a68:	08102a99 	.word	0x08102a99
 8102a6c:	08102a99 	.word	0x08102a99
 8102a70:	08102a99 	.word	0x08102a99
 8102a74:	08102a91 	.word	0x08102a91
  {
    case 2:
      mag_res = MAG_FS_4G;
 8102a78:	4b0b      	ldr	r3, [pc, #44]	; (8102aa8 <calcMagResolution+0x84>)
 8102a7a:	4a0c      	ldr	r2, [pc, #48]	; (8102aac <calcMagResolution+0x88>)
 8102a7c:	601a      	str	r2, [r3, #0]
    break;
 8102a7e:	e00c      	b.n	8102a9a <calcMagResolution+0x76>

    case 4:
      mag_res = MAG_FS_8G;
 8102a80:	4b09      	ldr	r3, [pc, #36]	; (8102aa8 <calcMagResolution+0x84>)
 8102a82:	4a0b      	ldr	r2, [pc, #44]	; (8102ab0 <calcMagResolution+0x8c>)
 8102a84:	601a      	str	r2, [r3, #0]
     break;
 8102a86:	e008      	b.n	8102a9a <calcMagResolution+0x76>

    case 8:
      mag_res = MAG_FS_12G;
 8102a88:	4b07      	ldr	r3, [pc, #28]	; (8102aa8 <calcMagResolution+0x84>)
 8102a8a:	4a0a      	ldr	r2, [pc, #40]	; (8102ab4 <calcMagResolution+0x90>)
 8102a8c:	601a      	str	r2, [r3, #0]
      break;
 8102a8e:	e004      	b.n	8102a9a <calcMagResolution+0x76>

    case 16:
      mag_res = MAG_FS_16G;
 8102a90:	4b05      	ldr	r3, [pc, #20]	; (8102aa8 <calcMagResolution+0x84>)
 8102a92:	4a09      	ldr	r2, [pc, #36]	; (8102ab8 <calcMagResolution+0x94>)
 8102a94:	601a      	str	r2, [r3, #0]
      break;
 8102a96:	e000      	b.n	8102a9a <calcMagResolution+0x76>

    default:
      break;
 8102a98:	bf00      	nop

  }

}
 8102a9a:	bf00      	nop
 8102a9c:	370c      	adds	r7, #12
 8102a9e:	46bd      	mov	sp, r7
 8102aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aa4:	4770      	bx	lr
 8102aa6:	bf00      	nop
 8102aa8:	100002ec 	.word	0x100002ec
 8102aac:	3912ccf7 	.word	0x3912ccf7
 8102ab0:	39980b24 	.word	0x39980b24
 8102ab4:	39e1719f 	.word	0x39e1719f
 8102ab8:	3a180b24 	.word	0x3a180b24

08102abc <I2CReadBytes>:
   }
   return value;
}

uint8_t I2CReadBytes(uint8_t address, uint8_t reg, uint8_t* buffer, uint8_t numBytes)
{
 8102abc:	b580      	push	{r7, lr}
 8102abe:	b088      	sub	sp, #32
 8102ac0:	af04      	add	r7, sp, #16
 8102ac2:	603a      	str	r2, [r7, #0]
 8102ac4:	461a      	mov	r2, r3
 8102ac6:	4603      	mov	r3, r0
 8102ac8:	71fb      	strb	r3, [r7, #7]
 8102aca:	460b      	mov	r3, r1
 8102acc:	71bb      	strb	r3, [r7, #6]
 8102ace:	4613      	mov	r3, r2
 8102ad0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;

  //status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes,100);
 8102ad2:	79fb      	ldrb	r3, [r7, #7]
 8102ad4:	b29b      	uxth	r3, r3
 8102ad6:	005b      	lsls	r3, r3, #1
 8102ad8:	b299      	uxth	r1, r3
 8102ada:	79bb      	ldrb	r3, [r7, #6]
 8102adc:	b29a      	uxth	r2, r3
 8102ade:	797b      	ldrb	r3, [r7, #5]
 8102ae0:	b29b      	uxth	r3, r3
 8102ae2:	2064      	movs	r0, #100	; 0x64
 8102ae4:	9002      	str	r0, [sp, #8]
 8102ae6:	9301      	str	r3, [sp, #4]
 8102ae8:	683b      	ldr	r3, [r7, #0]
 8102aea:	9300      	str	r3, [sp, #0]
 8102aec:	2301      	movs	r3, #1
 8102aee:	4807      	ldr	r0, [pc, #28]	; (8102b0c <I2CReadBytes+0x50>)
 8102af0:	f005 ff34 	bl	810895c <HAL_I2C_Mem_Read>
 8102af4:	4603      	mov	r3, r0
 8102af6:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 8102af8:	7bfb      	ldrb	r3, [r7, #15]
 8102afa:	2b00      	cmp	r3, #0
 8102afc:	d001      	beq.n	8102b02 <I2CReadBytes+0x46>
  {
    return HAL_ERROR;
 8102afe:	2301      	movs	r3, #1
 8102b00:	e000      	b.n	8102b04 <I2CReadBytes+0x48>
  }

  return numBytes;
 8102b02:	797b      	ldrb	r3, [r7, #5]

}
 8102b04:	4618      	mov	r0, r3
 8102b06:	3710      	adds	r7, #16
 8102b08:	46bd      	mov	sp, r7
 8102b0a:	bd80      	pop	{r7, pc}
 8102b0c:	10000224 	.word	0x10000224

08102b10 <WriteByte>:

HAL_StatusTypeDef WriteByte(uint8_t address, uint8_t reg, uint8_t data)
{
 8102b10:	b580      	push	{r7, lr}
 8102b12:	b088      	sub	sp, #32
 8102b14:	af04      	add	r7, sp, #16
 8102b16:	4603      	mov	r3, r0
 8102b18:	71fb      	strb	r3, [r7, #7]
 8102b1a:	460b      	mov	r3, r1
 8102b1c:	71bb      	strb	r3, [r7, #6]
 8102b1e:	4613      	mov	r3, r2
 8102b20:	717b      	strb	r3, [r7, #5]

  HAL_StatusTypeDef status;

//  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
 8102b22:	79fb      	ldrb	r3, [r7, #7]
 8102b24:	b29b      	uxth	r3, r3
 8102b26:	005b      	lsls	r3, r3, #1
 8102b28:	b299      	uxth	r1, r3
 8102b2a:	79bb      	ldrb	r3, [r7, #6]
 8102b2c:	b29a      	uxth	r2, r3
 8102b2e:	2364      	movs	r3, #100	; 0x64
 8102b30:	9302      	str	r3, [sp, #8]
 8102b32:	2301      	movs	r3, #1
 8102b34:	9301      	str	r3, [sp, #4]
 8102b36:	1d7b      	adds	r3, r7, #5
 8102b38:	9300      	str	r3, [sp, #0]
 8102b3a:	2301      	movs	r3, #1
 8102b3c:	4807      	ldr	r0, [pc, #28]	; (8102b5c <WriteByte+0x4c>)
 8102b3e:	f005 fdf9 	bl	8108734 <HAL_I2C_Mem_Write>
 8102b42:	4603      	mov	r3, r0
 8102b44:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 8102b46:	7bfb      	ldrb	r3, [r7, #15]
 8102b48:	2b00      	cmp	r3, #0
 8102b4a:	d001      	beq.n	8102b50 <WriteByte+0x40>
  {
    return HAL_ERROR;
 8102b4c:	2301      	movs	r3, #1
 8102b4e:	e000      	b.n	8102b52 <WriteByte+0x42>
  }

  return HAL_OK;
 8102b50:	2300      	movs	r3, #0

}
 8102b52:	4618      	mov	r0, r3
 8102b54:	3710      	adds	r7, #16
 8102b56:	46bd      	mov	sp, r7
 8102b58:	bd80      	pop	{r7, pc}
 8102b5a:	bf00      	nop
 8102b5c:	10000224 	.word	0x10000224

08102b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8102b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8102b64:	b082      	sub	sp, #8
 8102b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8102b68:	f000 f9f0 	bl	8102f4c <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102b6c:	4b4c      	ldr	r3, [pc, #304]	; (8102ca0 <main+0x140>)
 8102b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b72:	4a4b      	ldr	r2, [pc, #300]	; (8102ca0 <main+0x140>)
 8102b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b7c:	4b48      	ldr	r3, [pc, #288]	; (8102ca0 <main+0x140>)
 8102b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102b86:	607b      	str	r3, [r7, #4]
 8102b88:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102b8a:	2001      	movs	r0, #1
 8102b8c:	f005 fd30 	bl	81085f0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8102b90:	f007 f98e 	bl	8109eb0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8102b94:	2201      	movs	r2, #1
 8102b96:	2102      	movs	r1, #2
 8102b98:	2000      	movs	r0, #0
 8102b9a:	f007 f90f 	bl	8109dbc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102b9e:	4b41      	ldr	r3, [pc, #260]	; (8102ca4 <main+0x144>)
 8102ba0:	681b      	ldr	r3, [r3, #0]
 8102ba2:	091b      	lsrs	r3, r3, #4
 8102ba4:	f003 030f 	and.w	r3, r3, #15
 8102ba8:	2b07      	cmp	r3, #7
 8102baa:	d108      	bne.n	8102bbe <main+0x5e>
 8102bac:	4b3e      	ldr	r3, [pc, #248]	; (8102ca8 <main+0x148>)
 8102bae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8102bb2:	4a3d      	ldr	r2, [pc, #244]	; (8102ca8 <main+0x148>)
 8102bb4:	f043 0301 	orr.w	r3, r3, #1
 8102bb8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8102bbc:	e007      	b.n	8102bce <main+0x6e>
 8102bbe:	4b3a      	ldr	r3, [pc, #232]	; (8102ca8 <main+0x148>)
 8102bc0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8102bc4:	4a38      	ldr	r2, [pc, #224]	; (8102ca8 <main+0x148>)
 8102bc6:	f043 0301 	orr.w	r3, r3, #1
 8102bca:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102bce:	f000 fee7 	bl	81039a0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8102bd2:	f7ff f92b 	bl	8101e2c <MX_GPIO_Init>
  MX_DMA_Init();
 8102bd6:	f7ff f8c9 	bl	8101d6c <MX_DMA_Init>
  MX_SPI1_Init();
 8102bda:	f000 f9e9 	bl	8102fb0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8102bde:	f7ff f987 	bl	8101ef0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8102be2:	f000 fd95 	bl	8103710 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8102be6:	f7fe fb29 	bl	810123c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   ConfigSensors();
 8102bea:	f000 f97b 	bl	8102ee4 <ConfigSensors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    TimerCount_Start();
 8102bee:	4b2f      	ldr	r3, [pc, #188]	; (8102cac <main+0x14c>)
 8102bf0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8102bf4:	605a      	str	r2, [r3, #4]
 8102bf6:	4b2d      	ldr	r3, [pc, #180]	; (8102cac <main+0x14c>)
 8102bf8:	2200      	movs	r2, #0
 8102bfa:	609a      	str	r2, [r3, #8]
 8102bfc:	4b2b      	ldr	r3, [pc, #172]	; (8102cac <main+0x14c>)
 8102bfe:	2205      	movs	r2, #5
 8102c00:	601a      	str	r2, [r3, #0]
    ReadSensors();
 8102c02:	f000 f89d 	bl	8102d40 <ReadSensors>
    TimerCount_Stop(nb_cycles);
 8102c06:	4b29      	ldr	r3, [pc, #164]	; (8102cac <main+0x14c>)
 8102c08:	2200      	movs	r2, #0
 8102c0a:	601a      	str	r2, [r3, #0]
 8102c0c:	4b27      	ldr	r3, [pc, #156]	; (8102cac <main+0x14c>)
 8102c0e:	689b      	ldr	r3, [r3, #8]
 8102c10:	4a27      	ldr	r2, [pc, #156]	; (8102cb0 <main+0x150>)
 8102c12:	6013      	str	r3, [r2, #0]
 8102c14:	4b26      	ldr	r3, [pc, #152]	; (8102cb0 <main+0x150>)
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8102c1c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8102c20:	4a23      	ldr	r2, [pc, #140]	; (8102cb0 <main+0x150>)
 8102c22:	6013      	str	r3, [r2, #0]
    duration_us = (uint32_t)(((uint64_t)US_IN_SECOND * (nb_cycles)) / SystemCoreClock);
 8102c24:	4b22      	ldr	r3, [pc, #136]	; (8102cb0 <main+0x150>)
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	461c      	mov	r4, r3
 8102c2a:	f04f 0500 	mov.w	r5, #0
 8102c2e:	4622      	mov	r2, r4
 8102c30:	462b      	mov	r3, r5
 8102c32:	f04f 0000 	mov.w	r0, #0
 8102c36:	f04f 0100 	mov.w	r1, #0
 8102c3a:	0159      	lsls	r1, r3, #5
 8102c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8102c40:	0150      	lsls	r0, r2, #5
 8102c42:	4602      	mov	r2, r0
 8102c44:	460b      	mov	r3, r1
 8102c46:	1b12      	subs	r2, r2, r4
 8102c48:	eb63 0305 	sbc.w	r3, r3, r5
 8102c4c:	f04f 0000 	mov.w	r0, #0
 8102c50:	f04f 0100 	mov.w	r1, #0
 8102c54:	0259      	lsls	r1, r3, #9
 8102c56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8102c5a:	0250      	lsls	r0, r2, #9
 8102c5c:	4602      	mov	r2, r0
 8102c5e:	460b      	mov	r3, r1
 8102c60:	1912      	adds	r2, r2, r4
 8102c62:	eb45 0303 	adc.w	r3, r5, r3
 8102c66:	f04f 0000 	mov.w	r0, #0
 8102c6a:	f04f 0100 	mov.w	r1, #0
 8102c6e:	0199      	lsls	r1, r3, #6
 8102c70:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8102c74:	0190      	lsls	r0, r2, #6
 8102c76:	1a80      	subs	r0, r0, r2
 8102c78:	eb61 0103 	sbc.w	r1, r1, r3
 8102c7c:	eb10 0804 	adds.w	r8, r0, r4
 8102c80:	eb41 0905 	adc.w	r9, r1, r5
 8102c84:	4b0b      	ldr	r3, [pc, #44]	; (8102cb4 <main+0x154>)
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	461a      	mov	r2, r3
 8102c8a:	f04f 0300 	mov.w	r3, #0
 8102c8e:	4640      	mov	r0, r8
 8102c90:	4649      	mov	r1, r9
 8102c92:	f7fe f93b 	bl	8100f0c <__aeabi_uldivmod>
 8102c96:	4602      	mov	r2, r0
 8102c98:	460b      	mov	r3, r1
 8102c9a:	4b07      	ldr	r3, [pc, #28]	; (8102cb8 <main+0x158>)
 8102c9c:	601a      	str	r2, [r3, #0]
    TimerCount_Start();
 8102c9e:	e7a6      	b.n	8102bee <main+0x8e>
 8102ca0:	58024400 	.word	0x58024400
 8102ca4:	e000ed00 	.word	0xe000ed00
 8102ca8:	58026400 	.word	0x58026400
 8102cac:	e000e010 	.word	0xe000e010
 8102cb0:	100000bc 	.word	0x100000bc
 8102cb4:	10000000 	.word	0x10000000
 8102cb8:	100000b8 	.word	0x100000b8

08102cbc <GpsTask>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void GpsTask(void)
{
 8102cbc:	b580      	push	{r7, lr}
 8102cbe:	af00      	add	r7, sp, #0
     processGPS(&gps);
 8102cc0:	4803      	ldr	r0, [pc, #12]	; (8102cd0 <GpsTask+0x14>)
 8102cc2:	f000 fb89 	bl	81033d8 <processGPS>
     M4DataToM7(GPS_DATA_TYPE);
 8102cc6:	2001      	movs	r0, #1
 8102cc8:	f000 f848 	bl	8102d5c <M4DataToM7>
}
 8102ccc:	bf00      	nop
 8102cce:	bd80      	pop	{r7, pc}
 8102cd0:	100002f4 	.word	0x100002f4

08102cd4 <AccelTask>:
void AccelTask(void)
{
 8102cd4:	b580      	push	{r7, lr}
 8102cd6:	af00      	add	r7, sp, #0
    readAccel(&imu);
 8102cd8:	4803      	ldr	r0, [pc, #12]	; (8102ce8 <AccelTask+0x14>)
 8102cda:	f7ff fdd7 	bl	810288c <readAccel>
    M4DataToM7(ACC_DATA_TYPE);
 8102cde:	2003      	movs	r0, #3
 8102ce0:	f000 f83c 	bl	8102d5c <M4DataToM7>
}
 8102ce4:	bf00      	nop
 8102ce6:	bd80      	pop	{r7, pc}
 8102ce8:	10000374 	.word	0x10000374

08102cec <GyroTask>:
void GyroTask(void)
{
 8102cec:	b580      	push	{r7, lr}
 8102cee:	af00      	add	r7, sp, #0
    readGyro(&imu);
 8102cf0:	4803      	ldr	r0, [pc, #12]	; (8102d00 <GyroTask+0x14>)
 8102cf2:	f7ff fd29 	bl	8102748 <readGyro>
    //readTemp(&imu);
    M4DataToM7(GYRO_DATA_TYPE);
 8102cf6:	2004      	movs	r0, #4
 8102cf8:	f000 f830 	bl	8102d5c <M4DataToM7>
}
 8102cfc:	bf00      	nop
 8102cfe:	bd80      	pop	{r7, pc}
 8102d00:	10000374 	.word	0x10000374

08102d04 <MagTask>:
void MagTask(void)
{
 8102d04:	b580      	push	{r7, lr}
 8102d06:	af00      	add	r7, sp, #0
    readMag(&imu);
 8102d08:	4803      	ldr	r0, [pc, #12]	; (8102d18 <MagTask+0x14>)
 8102d0a:	f7ff fd6e 	bl	81027ea <readMag>
    M4DataToM7(MAG_DATA_TYPE);
 8102d0e:	2002      	movs	r0, #2
 8102d10:	f000 f824 	bl	8102d5c <M4DataToM7>
}
 8102d14:	bf00      	nop
 8102d16:	bd80      	pop	{r7, pc}
 8102d18:	10000374 	.word	0x10000374

08102d1c <BaroTask>:

void BaroTask(void)
{
 8102d1c:	b580      	push	{r7, lr}
 8102d1e:	af00      	add	r7, sp, #0
    ReadTemp(&baro);
 8102d20:	4806      	ldr	r0, [pc, #24]	; (8102d3c <BaroTask+0x20>)
 8102d22:	f7fe fc69 	bl	81015f8 <ReadTemp>
    ReadPressure(&baro);
 8102d26:	4805      	ldr	r0, [pc, #20]	; (8102d3c <BaroTask+0x20>)
 8102d28:	f7fe fcb6 	bl	8101698 <ReadPressure>
    ReadAltitude(&baro);
 8102d2c:	4803      	ldr	r0, [pc, #12]	; (8102d3c <BaroTask+0x20>)
 8102d2e:	f7fe fe93 	bl	8101a58 <ReadAltitude>

    M4DataToM7(BARO_DATA_TYPE);
 8102d32:	2005      	movs	r0, #5
 8102d34:	f000 f812 	bl	8102d5c <M4DataToM7>

}
 8102d38:	bf00      	nop
 8102d3a:	bd80      	pop	{r7, pc}
 8102d3c:	100003c0 	.word	0x100003c0

08102d40 <ReadSensors>:
  notif_rx = 1;
}


void ReadSensors(void)
{
 8102d40:	b580      	push	{r7, lr}
 8102d42:	af00      	add	r7, sp, #0
  GpsTask();
 8102d44:	f7ff ffba 	bl	8102cbc <GpsTask>

  AccelTask();
 8102d48:	f7ff ffc4 	bl	8102cd4 <AccelTask>

  GyroTask();
 8102d4c:	f7ff ffce 	bl	8102cec <GyroTask>

  MagTask();
 8102d50:	f7ff ffd8 	bl	8102d04 <MagTask>

  BaroTask();
 8102d54:	f7ff ffe2 	bl	8102d1c <BaroTask>

}
 8102d58:	bf00      	nop
 8102d5a:	bd80      	pop	{r7, pc}

08102d5c <M4DataToM7>:
void M4DataToM7(uint8_t data_type)
{
 8102d5c:	b580      	push	{r7, lr}
 8102d5e:	b082      	sub	sp, #8
 8102d60:	af00      	add	r7, sp, #0
 8102d62:	4603      	mov	r3, r0
 8102d64:	71fb      	strb	r3, [r7, #7]

  switch (data_type)
 8102d66:	79fb      	ldrb	r3, [r7, #7]
 8102d68:	3b01      	subs	r3, #1
 8102d6a:	2b04      	cmp	r3, #4
 8102d6c:	f200 80a4 	bhi.w	8102eb8 <M4DataToM7+0x15c>
 8102d70:	a201      	add	r2, pc, #4	; (adr r2, 8102d78 <M4DataToM7+0x1c>)
 8102d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102d76:	bf00      	nop
 8102d78:	08102d8d 	.word	0x08102d8d
 8102d7c:	08102e5b 	.word	0x08102e5b
 8102d80:	08102df3 	.word	0x08102df3
 8102d84:	08102e27 	.word	0x08102e27
 8102d88:	08102e8f 	.word	0x08102e8f
  {
    case GPS_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102d8c:	2000      	movs	r0, #0
 8102d8e:	f005 fc01 	bl	8108594 <HAL_HSEM_FastTake>
 8102d92:	4603      	mov	r3, r0
 8102d94:	2b00      	cmp	r3, #0
 8102d96:	d127      	bne.n	8102de8 <M4DataToM7+0x8c>
      {

        gps_values_m4->gps_latitude = gps.latitude;
 8102d98:	4b4a      	ldr	r3, [pc, #296]	; (8102ec4 <M4DataToM7+0x168>)
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	4a4a      	ldr	r2, [pc, #296]	; (8102ec8 <M4DataToM7+0x16c>)
 8102d9e:	6812      	ldr	r2, [r2, #0]
 8102da0:	601a      	str	r2, [r3, #0]
        gps_values_m4->gps_longitude = gps.longitude;
 8102da2:	4b48      	ldr	r3, [pc, #288]	; (8102ec4 <M4DataToM7+0x168>)
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	4a48      	ldr	r2, [pc, #288]	; (8102ec8 <M4DataToM7+0x16c>)
 8102da8:	6852      	ldr	r2, [r2, #4]
 8102daa:	605a      	str	r2, [r3, #4]
        gps_values_m4->gps_altitude = gps.altitude;
 8102dac:	4b45      	ldr	r3, [pc, #276]	; (8102ec4 <M4DataToM7+0x168>)
 8102dae:	681b      	ldr	r3, [r3, #0]
 8102db0:	4a45      	ldr	r2, [pc, #276]	; (8102ec8 <M4DataToM7+0x16c>)
 8102db2:	6892      	ldr	r2, [r2, #8]
 8102db4:	609a      	str	r2, [r3, #8]
        gps_values_m4->gps_velocity_x = gps.vel_x;
 8102db6:	4b43      	ldr	r3, [pc, #268]	; (8102ec4 <M4DataToM7+0x168>)
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	4a43      	ldr	r2, [pc, #268]	; (8102ec8 <M4DataToM7+0x16c>)
 8102dbc:	68d2      	ldr	r2, [r2, #12]
 8102dbe:	60da      	str	r2, [r3, #12]
        gps_values_m4->gps_velocity_y = gps.vel_y;
 8102dc0:	4b40      	ldr	r3, [pc, #256]	; (8102ec4 <M4DataToM7+0x168>)
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	4a40      	ldr	r2, [pc, #256]	; (8102ec8 <M4DataToM7+0x16c>)
 8102dc6:	6912      	ldr	r2, [r2, #16]
 8102dc8:	611a      	str	r2, [r3, #16]
        gps_values_m4->gps_velocity_z = gps.vel_z;
 8102dca:	4b3e      	ldr	r3, [pc, #248]	; (8102ec4 <M4DataToM7+0x168>)
 8102dcc:	681b      	ldr	r3, [r3, #0]
 8102dce:	4a3e      	ldr	r2, [pc, #248]	; (8102ec8 <M4DataToM7+0x16c>)
 8102dd0:	6952      	ldr	r2, [r2, #20]
 8102dd2:	615a      	str	r2, [r3, #20]
        gps_values_m4->gnd_speed = gps.gndSpeed;
 8102dd4:	4b3b      	ldr	r3, [pc, #236]	; (8102ec4 <M4DataToM7+0x168>)
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	4a3b      	ldr	r2, [pc, #236]	; (8102ec8 <M4DataToM7+0x16c>)
 8102dda:	6992      	ldr	r2, [r2, #24]
 8102ddc:	619a      	str	r2, [r3, #24]
        gps_values_m4->gps_satellites = gps.num_satellites;
 8102dde:	4b39      	ldr	r3, [pc, #228]	; (8102ec4 <M4DataToM7+0x168>)
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	4a39      	ldr	r2, [pc, #228]	; (8102ec8 <M4DataToM7+0x16c>)
 8102de4:	69d2      	ldr	r2, [r2, #28]
 8102de6:	61da      	str	r2, [r3, #28]
      }
      // Release semaphore
      HAL_HSEM_Release(HSEM_ID_0, 0);
 8102de8:	2100      	movs	r1, #0
 8102dea:	2000      	movs	r0, #0
 8102dec:	f005 fbec 	bl	81085c8 <HAL_HSEM_Release>
      break;
 8102df0:	e063      	b.n	8102eba <M4DataToM7+0x15e>
    }

    case ACC_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102df2:	2000      	movs	r0, #0
 8102df4:	f005 fbce 	bl	8108594 <HAL_HSEM_FastTake>
 8102df8:	4603      	mov	r3, r0
 8102dfa:	2b00      	cmp	r3, #0
 8102dfc:	d10e      	bne.n	8102e1c <M4DataToM7+0xc0>
      {
        acc_values_m4->imu_acc_x = imu.accel_values.x;
 8102dfe:	4b33      	ldr	r3, [pc, #204]	; (8102ecc <M4DataToM7+0x170>)
 8102e00:	681b      	ldr	r3, [r3, #0]
 8102e02:	4a33      	ldr	r2, [pc, #204]	; (8102ed0 <M4DataToM7+0x174>)
 8102e04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8102e06:	601a      	str	r2, [r3, #0]
        acc_values_m4->imu_acc_y = imu.accel_values.y;
 8102e08:	4b30      	ldr	r3, [pc, #192]	; (8102ecc <M4DataToM7+0x170>)
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	4a30      	ldr	r2, [pc, #192]	; (8102ed0 <M4DataToM7+0x174>)
 8102e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8102e10:	605a      	str	r2, [r3, #4]
        acc_values_m4->imu_acc_z = imu.accel_values.z;
 8102e12:	4b2e      	ldr	r3, [pc, #184]	; (8102ecc <M4DataToM7+0x170>)
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	4a2e      	ldr	r2, [pc, #184]	; (8102ed0 <M4DataToM7+0x174>)
 8102e18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8102e1a:	609a      	str	r2, [r3, #8]
      }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102e1c:	2100      	movs	r1, #0
 8102e1e:	2000      	movs	r0, #0
 8102e20:	f005 fbd2 	bl	81085c8 <HAL_HSEM_Release>

      break;
 8102e24:	e049      	b.n	8102eba <M4DataToM7+0x15e>
    }

    case GYRO_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102e26:	2000      	movs	r0, #0
 8102e28:	f005 fbb4 	bl	8108594 <HAL_HSEM_FastTake>
 8102e2c:	4603      	mov	r3, r0
 8102e2e:	2b00      	cmp	r3, #0
 8102e30:	d10e      	bne.n	8102e50 <M4DataToM7+0xf4>
      {
        gyro_values_m4->imu_gyro_x = imu.gyro_values.x;
 8102e32:	4b28      	ldr	r3, [pc, #160]	; (8102ed4 <M4DataToM7+0x178>)
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	4a26      	ldr	r2, [pc, #152]	; (8102ed0 <M4DataToM7+0x174>)
 8102e38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102e3a:	601a      	str	r2, [r3, #0]
        gyro_values_m4->imu_gyro_y = imu.gyro_values.y;
 8102e3c:	4b25      	ldr	r3, [pc, #148]	; (8102ed4 <M4DataToM7+0x178>)
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	4a23      	ldr	r2, [pc, #140]	; (8102ed0 <M4DataToM7+0x174>)
 8102e42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102e44:	605a      	str	r2, [r3, #4]
        gyro_values_m4->imu_gyro_z = imu.gyro_values.z;
 8102e46:	4b23      	ldr	r3, [pc, #140]	; (8102ed4 <M4DataToM7+0x178>)
 8102e48:	681b      	ldr	r3, [r3, #0]
 8102e4a:	4a21      	ldr	r2, [pc, #132]	; (8102ed0 <M4DataToM7+0x174>)
 8102e4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102e4e:	609a      	str	r2, [r3, #8]
      }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102e50:	2100      	movs	r1, #0
 8102e52:	2000      	movs	r0, #0
 8102e54:	f005 fbb8 	bl	81085c8 <HAL_HSEM_Release>

      break;
 8102e58:	e02f      	b.n	8102eba <M4DataToM7+0x15e>
    }

    case MAG_DATA_TYPE:
    {

      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102e5a:	2000      	movs	r0, #0
 8102e5c:	f005 fb9a 	bl	8108594 <HAL_HSEM_FastTake>
 8102e60:	4603      	mov	r3, r0
 8102e62:	2b00      	cmp	r3, #0
 8102e64:	d10e      	bne.n	8102e84 <M4DataToM7+0x128>
        {
          mag_values_m4->imu_mag_x = imu.mag_values.x;
 8102e66:	4b1c      	ldr	r3, [pc, #112]	; (8102ed8 <M4DataToM7+0x17c>)
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	4a19      	ldr	r2, [pc, #100]	; (8102ed0 <M4DataToM7+0x174>)
 8102e6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8102e6e:	601a      	str	r2, [r3, #0]
          mag_values_m4->imu_mag_y = imu.mag_values.y;
 8102e70:	4b19      	ldr	r3, [pc, #100]	; (8102ed8 <M4DataToM7+0x17c>)
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4a16      	ldr	r2, [pc, #88]	; (8102ed0 <M4DataToM7+0x174>)
 8102e76:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8102e78:	605a      	str	r2, [r3, #4]
          mag_values_m4->imu_mag_z = imu.mag_values.z;
 8102e7a:	4b17      	ldr	r3, [pc, #92]	; (8102ed8 <M4DataToM7+0x17c>)
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	4a14      	ldr	r2, [pc, #80]	; (8102ed0 <M4DataToM7+0x174>)
 8102e80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8102e82:	609a      	str	r2, [r3, #8]
        }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102e84:	2100      	movs	r1, #0
 8102e86:	2000      	movs	r0, #0
 8102e88:	f005 fb9e 	bl	81085c8 <HAL_HSEM_Release>
      break;
 8102e8c:	e015      	b.n	8102eba <M4DataToM7+0x15e>
    }

    case BARO_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102e8e:	2000      	movs	r0, #0
 8102e90:	f005 fb80 	bl	8108594 <HAL_HSEM_FastTake>
 8102e94:	4603      	mov	r3, r0
 8102e96:	2b00      	cmp	r3, #0
 8102e98:	d109      	bne.n	8102eae <M4DataToM7+0x152>
      {
          baro_values_m4->baro_altitude = baro.altitude;
 8102e9a:	4b10      	ldr	r3, [pc, #64]	; (8102edc <M4DataToM7+0x180>)
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	4a10      	ldr	r2, [pc, #64]	; (8102ee0 <M4DataToM7+0x184>)
 8102ea0:	6892      	ldr	r2, [r2, #8]
 8102ea2:	605a      	str	r2, [r3, #4]
          baro_values_m4->baro_pressure = baro.pressure;
 8102ea4:	4b0d      	ldr	r3, [pc, #52]	; (8102edc <M4DataToM7+0x180>)
 8102ea6:	681b      	ldr	r3, [r3, #0]
 8102ea8:	4a0d      	ldr	r2, [pc, #52]	; (8102ee0 <M4DataToM7+0x184>)
 8102eaa:	6852      	ldr	r2, [r2, #4]
 8102eac:	601a      	str	r2, [r3, #0]
      }
             // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102eae:	2100      	movs	r1, #0
 8102eb0:	2000      	movs	r0, #0
 8102eb2:	f005 fb89 	bl	81085c8 <HAL_HSEM_Release>
      break;
 8102eb6:	e000      	b.n	8102eba <M4DataToM7+0x15e>
    }

    default:
      break;
 8102eb8:	bf00      	nop

  }



}
 8102eba:	bf00      	nop
 8102ebc:	3708      	adds	r7, #8
 8102ebe:	46bd      	mov	sp, r7
 8102ec0:	bd80      	pop	{r7, pc}
 8102ec2:	bf00      	nop
 8102ec4:	10000018 	.word	0x10000018
 8102ec8:	100002f4 	.word	0x100002f4
 8102ecc:	10000008 	.word	0x10000008
 8102ed0:	10000374 	.word	0x10000374
 8102ed4:	1000000c 	.word	0x1000000c
 8102ed8:	10000010 	.word	0x10000010
 8102edc:	10000014 	.word	0x10000014
 8102ee0:	100003c0 	.word	0x100003c0

08102ee4 <ConfigSensors>:




void ConfigSensors(void)
{
 8102ee4:	b580      	push	{r7, lr}
 8102ee6:	b082      	sub	sp, #8
 8102ee8:	af00      	add	r7, sp, #0

  // COnfigure GPS Sensor
  ConfigGPS();
 8102eea:	f000 faf3 	bl	81034d4 <ConfigGPS>

  // Configure BMP280
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8102eee:	2201      	movs	r2, #1
 8102ef0:	2110      	movs	r1, #16
 8102ef2:	4813      	ldr	r0, [pc, #76]	; (8102f40 <ConfigSensors+0x5c>)
 8102ef4:	f005 fb34 	bl	8108560 <HAL_GPIO_WritePin>
  uint8_t baro_res = CheckBMP280ChipID();
 8102ef8:	f7fe fac6 	bl	8101488 <CheckBMP280ChipID>
 8102efc:	4603      	mov	r3, r0
 8102efe:	71fb      	strb	r3, [r7, #7]
  if(baro_res == HAL_OK)
 8102f00:	79fb      	ldrb	r3, [r7, #7]
 8102f02:	2b00      	cmp	r3, #0
 8102f04:	d10f      	bne.n	8102f26 <ConfigSensors+0x42>
  {
    uint8_t reset_chip_ok = ResetBMP280();
 8102f06:	f7fe ff0f 	bl	8101d28 <ResetBMP280>
 8102f0a:	4603      	mov	r3, r0
 8102f0c:	71bb      	strb	r3, [r7, #6]
    HAL_Delay(1000);
 8102f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8102f12:	f000 fdf9 	bl	8103b08 <HAL_Delay>
    uint8_t set_config_ok = setConfig(&baro);
 8102f16:	480b      	ldr	r0, [pc, #44]	; (8102f44 <ConfigSensors+0x60>)
 8102f18:	f7fe fe5a 	bl	8101bd0 <setConfig>
 8102f1c:	4603      	mov	r3, r0
 8102f1e:	717b      	strb	r3, [r7, #5]
    ReadCalibCoefficients(&baro);
 8102f20:	4808      	ldr	r0, [pc, #32]	; (8102f44 <ConfigSensors+0x60>)
 8102f22:	f7fe fdf9 	bl	8101b18 <ReadCalibCoefficients>
  }

  HAL_Delay(1000);
 8102f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8102f2a:	f000 fded 	bl	8103b08 <HAL_Delay>

  // Configure IMU;
  uint16_t imu_res = setup(&imu);
 8102f2e:	4806      	ldr	r0, [pc, #24]	; (8102f48 <ConfigSensors+0x64>)
 8102f30:	f7ff f993 	bl	810225a <setup>
 8102f34:	4603      	mov	r3, r0
 8102f36:	807b      	strh	r3, [r7, #2]


}
 8102f38:	bf00      	nop
 8102f3a:	3708      	adds	r7, #8
 8102f3c:	46bd      	mov	sp, r7
 8102f3e:	bd80      	pop	{r7, pc}
 8102f40:	58020000 	.word	0x58020000
 8102f44:	100003c0 	.word	0x100003c0
 8102f48:	10000374 	.word	0x10000374

08102f4c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8102f4c:	b580      	push	{r7, lr}
 8102f4e:	b084      	sub	sp, #16
 8102f50:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8102f52:	463b      	mov	r3, r7
 8102f54:	2200      	movs	r2, #0
 8102f56:	601a      	str	r2, [r3, #0]
 8102f58:	605a      	str	r2, [r3, #4]
 8102f5a:	609a      	str	r2, [r3, #8]
 8102f5c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8102f5e:	f002 fa6d 	bl	810543c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102f62:	2301      	movs	r3, #1
 8102f64:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8102f66:	2300      	movs	r3, #0
 8102f68:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x10000000;
 8102f6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8102f6e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8102f70:	2311      	movs	r3, #17
 8102f72:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8102f74:	2300      	movs	r3, #0
 8102f76:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8102f78:	2300      	movs	r3, #0
 8102f7a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8102f7c:	2303      	movs	r3, #3
 8102f7e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102f80:	2300      	movs	r3, #0
 8102f82:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8102f84:	2300      	movs	r3, #0
 8102f86:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8102f88:	2300      	movs	r3, #0
 8102f8a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8102f8c:	2300      	movs	r3, #0
 8102f8e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102f90:	463b      	mov	r3, r7
 8102f92:	4618      	mov	r0, r3
 8102f94:	f002 fa8a 	bl	81054ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8102f98:	2004      	movs	r0, #4
 8102f9a:	f002 fa67 	bl	810546c <HAL_MPU_Enable>

}
 8102f9e:	bf00      	nop
 8102fa0:	3710      	adds	r7, #16
 8102fa2:	46bd      	mov	sp, r7
 8102fa4:	bd80      	pop	{r7, pc}

08102fa6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102fa6:	b480      	push	{r7}
 8102fa8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102faa:	b672      	cpsid	i
}
 8102fac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102fae:	e7fe      	b.n	8102fae <Error_Handler+0x8>

08102fb0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8102fb0:	b580      	push	{r7, lr}
 8102fb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102fb4:	4b27      	ldr	r3, [pc, #156]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102fb6:	4a28      	ldr	r2, [pc, #160]	; (8103058 <MX_SPI1_Init+0xa8>)
 8102fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8102fba:	4b26      	ldr	r3, [pc, #152]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102fbc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8102fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8102fc2:	4b24      	ldr	r3, [pc, #144]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102fc4:	2200      	movs	r2, #0
 8102fc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102fc8:	4b22      	ldr	r3, [pc, #136]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102fca:	2207      	movs	r2, #7
 8102fcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8102fce:	4b21      	ldr	r3, [pc, #132]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102fd0:	2200      	movs	r2, #0
 8102fd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8102fd4:	4b1f      	ldr	r3, [pc, #124]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102fd6:	2200      	movs	r2, #0
 8102fd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8102fda:	4b1e      	ldr	r3, [pc, #120]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102fdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102fe0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8102fe2:	4b1c      	ldr	r3, [pc, #112]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102fe4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8102fe8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8102fea:	4b1a      	ldr	r3, [pc, #104]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102fec:	2200      	movs	r2, #0
 8102fee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102ff0:	4b18      	ldr	r3, [pc, #96]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102ff2:	2200      	movs	r2, #0
 8102ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102ff6:	4b17      	ldr	r3, [pc, #92]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102ff8:	2200      	movs	r2, #0
 8102ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102ffc:	4b15      	ldr	r3, [pc, #84]	; (8103054 <MX_SPI1_Init+0xa4>)
 8102ffe:	2200      	movs	r2, #0
 8103000:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8103002:	4b14      	ldr	r3, [pc, #80]	; (8103054 <MX_SPI1_Init+0xa4>)
 8103004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8103008:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810300a:	4b12      	ldr	r3, [pc, #72]	; (8103054 <MX_SPI1_Init+0xa4>)
 810300c:	2200      	movs	r2, #0
 810300e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8103010:	4b10      	ldr	r3, [pc, #64]	; (8103054 <MX_SPI1_Init+0xa4>)
 8103012:	2200      	movs	r2, #0
 8103014:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8103016:	4b0f      	ldr	r3, [pc, #60]	; (8103054 <MX_SPI1_Init+0xa4>)
 8103018:	2200      	movs	r2, #0
 810301a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810301c:	4b0d      	ldr	r3, [pc, #52]	; (8103054 <MX_SPI1_Init+0xa4>)
 810301e:	2200      	movs	r2, #0
 8103020:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8103022:	4b0c      	ldr	r3, [pc, #48]	; (8103054 <MX_SPI1_Init+0xa4>)
 8103024:	2200      	movs	r2, #0
 8103026:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8103028:	4b0a      	ldr	r3, [pc, #40]	; (8103054 <MX_SPI1_Init+0xa4>)
 810302a:	2200      	movs	r2, #0
 810302c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810302e:	4b09      	ldr	r3, [pc, #36]	; (8103054 <MX_SPI1_Init+0xa4>)
 8103030:	2200      	movs	r2, #0
 8103032:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8103034:	4b07      	ldr	r3, [pc, #28]	; (8103054 <MX_SPI1_Init+0xa4>)
 8103036:	2200      	movs	r2, #0
 8103038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810303a:	4b06      	ldr	r3, [pc, #24]	; (8103054 <MX_SPI1_Init+0xa4>)
 810303c:	2200      	movs	r2, #0
 810303e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8103040:	4804      	ldr	r0, [pc, #16]	; (8103054 <MX_SPI1_Init+0xa4>)
 8103042:	f009 faa1 	bl	810c588 <HAL_SPI_Init>
 8103046:	4603      	mov	r3, r0
 8103048:	2b00      	cmp	r3, #0
 810304a:	d001      	beq.n	8103050 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 810304c:	f7ff ffab 	bl	8102fa6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8103050:	bf00      	nop
 8103052:	bd80      	pop	{r7, pc}
 8103054:	100003f4 	.word	0x100003f4
 8103058:	40013000 	.word	0x40013000

0810305c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 810305c:	b580      	push	{r7, lr}
 810305e:	b0b8      	sub	sp, #224	; 0xe0
 8103060:	af00      	add	r7, sp, #0
 8103062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103064:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8103068:	2200      	movs	r2, #0
 810306a:	601a      	str	r2, [r3, #0]
 810306c:	605a      	str	r2, [r3, #4]
 810306e:	609a      	str	r2, [r3, #8]
 8103070:	60da      	str	r2, [r3, #12]
 8103072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103074:	f107 0310 	add.w	r3, r7, #16
 8103078:	22bc      	movs	r2, #188	; 0xbc
 810307a:	2100      	movs	r1, #0
 810307c:	4618      	mov	r0, r3
 810307e:	f00b fe9b 	bl	810edb8 <memset>
  if(spiHandle->Instance==SPI1)
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	4a57      	ldr	r2, [pc, #348]	; (81031e4 <HAL_SPI_MspInit+0x188>)
 8103088:	4293      	cmp	r3, r2
 810308a:	f040 80a6 	bne.w	81031da <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 810308e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8103092:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8103094:	2300      	movs	r3, #0
 8103096:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103098:	f107 0310 	add.w	r3, r7, #16
 810309c:	4618      	mov	r0, r3
 810309e:	f007 f8ed 	bl	810a27c <HAL_RCCEx_PeriphCLKConfig>
 81030a2:	4603      	mov	r3, r0
 81030a4:	2b00      	cmp	r3, #0
 81030a6:	d001      	beq.n	81030ac <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 81030a8:	f7ff ff7d 	bl	8102fa6 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81030ac:	4b4e      	ldr	r3, [pc, #312]	; (81031e8 <HAL_SPI_MspInit+0x18c>)
 81030ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81030b2:	4a4d      	ldr	r2, [pc, #308]	; (81031e8 <HAL_SPI_MspInit+0x18c>)
 81030b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81030b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81030bc:	4b4a      	ldr	r3, [pc, #296]	; (81031e8 <HAL_SPI_MspInit+0x18c>)
 81030be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81030c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81030c6:	60fb      	str	r3, [r7, #12]
 81030c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81030ca:	4b47      	ldr	r3, [pc, #284]	; (81031e8 <HAL_SPI_MspInit+0x18c>)
 81030cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81030d0:	4a45      	ldr	r2, [pc, #276]	; (81031e8 <HAL_SPI_MspInit+0x18c>)
 81030d2:	f043 0301 	orr.w	r3, r3, #1
 81030d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81030da:	4b43      	ldr	r3, [pc, #268]	; (81031e8 <HAL_SPI_MspInit+0x18c>)
 81030dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81030e0:	f003 0301 	and.w	r3, r3, #1
 81030e4:	60bb      	str	r3, [r7, #8]
 81030e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 81030e8:	23e0      	movs	r3, #224	; 0xe0
 81030ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81030ee:	2302      	movs	r3, #2
 81030f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81030f4:	2300      	movs	r3, #0
 81030f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81030fa:	2300      	movs	r3, #0
 81030fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8103100:	2305      	movs	r3, #5
 8103102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103106:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810310a:	4619      	mov	r1, r3
 810310c:	4837      	ldr	r0, [pc, #220]	; (81031ec <HAL_SPI_MspInit+0x190>)
 810310e:	f005 f877 	bl	8108200 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8103112:	4b37      	ldr	r3, [pc, #220]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 8103114:	4a37      	ldr	r2, [pc, #220]	; (81031f4 <HAL_SPI_MspInit+0x198>)
 8103116:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8103118:	4b35      	ldr	r3, [pc, #212]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 810311a:	2225      	movs	r2, #37	; 0x25
 810311c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810311e:	4b34      	ldr	r3, [pc, #208]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 8103120:	2200      	movs	r2, #0
 8103122:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8103124:	4b32      	ldr	r3, [pc, #200]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 8103126:	2200      	movs	r2, #0
 8103128:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810312a:	4b31      	ldr	r3, [pc, #196]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 810312c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103130:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8103132:	4b2f      	ldr	r3, [pc, #188]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 8103134:	2200      	movs	r2, #0
 8103136:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8103138:	4b2d      	ldr	r3, [pc, #180]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 810313a:	2200      	movs	r2, #0
 810313c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 810313e:	4b2c      	ldr	r3, [pc, #176]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 8103140:	2200      	movs	r2, #0
 8103142:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8103144:	4b2a      	ldr	r3, [pc, #168]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 8103146:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810314a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810314c:	4b28      	ldr	r3, [pc, #160]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 810314e:	2200      	movs	r2, #0
 8103150:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8103152:	4827      	ldr	r0, [pc, #156]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 8103154:	f002 fa02 	bl	810555c <HAL_DMA_Init>
 8103158:	4603      	mov	r3, r0
 810315a:	2b00      	cmp	r3, #0
 810315c:	d001      	beq.n	8103162 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 810315e:	f7ff ff22 	bl	8102fa6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	4a22      	ldr	r2, [pc, #136]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 8103166:	67da      	str	r2, [r3, #124]	; 0x7c
 8103168:	4a21      	ldr	r2, [pc, #132]	; (81031f0 <HAL_SPI_MspInit+0x194>)
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 810316e:	4b22      	ldr	r3, [pc, #136]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 8103170:	4a22      	ldr	r2, [pc, #136]	; (81031fc <HAL_SPI_MspInit+0x1a0>)
 8103172:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8103174:	4b20      	ldr	r3, [pc, #128]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 8103176:	2226      	movs	r2, #38	; 0x26
 8103178:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810317a:	4b1f      	ldr	r3, [pc, #124]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 810317c:	2240      	movs	r2, #64	; 0x40
 810317e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8103180:	4b1d      	ldr	r3, [pc, #116]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 8103182:	2200      	movs	r2, #0
 8103184:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8103186:	4b1c      	ldr	r3, [pc, #112]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 8103188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810318c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810318e:	4b1a      	ldr	r3, [pc, #104]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 8103190:	2200      	movs	r2, #0
 8103192:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8103194:	4b18      	ldr	r3, [pc, #96]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 8103196:	2200      	movs	r2, #0
 8103198:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 810319a:	4b17      	ldr	r3, [pc, #92]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 810319c:	2200      	movs	r2, #0
 810319e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 81031a0:	4b15      	ldr	r3, [pc, #84]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 81031a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81031a6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81031a8:	4b13      	ldr	r3, [pc, #76]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 81031aa:	2200      	movs	r2, #0
 81031ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 81031ae:	4812      	ldr	r0, [pc, #72]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 81031b0:	f002 f9d4 	bl	810555c <HAL_DMA_Init>
 81031b4:	4603      	mov	r3, r0
 81031b6:	2b00      	cmp	r3, #0
 81031b8:	d001      	beq.n	81031be <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 81031ba:	f7ff fef4 	bl	8102fa6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	4a0d      	ldr	r2, [pc, #52]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 81031c2:	679a      	str	r2, [r3, #120]	; 0x78
 81031c4:	4a0c      	ldr	r2, [pc, #48]	; (81031f8 <HAL_SPI_MspInit+0x19c>)
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 81031ca:	2200      	movs	r2, #0
 81031cc:	2100      	movs	r1, #0
 81031ce:	2023      	movs	r0, #35	; 0x23
 81031d0:	f002 f8ff 	bl	81053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 81031d4:	2023      	movs	r0, #35	; 0x23
 81031d6:	f002 f916 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81031da:	bf00      	nop
 81031dc:	37e0      	adds	r7, #224	; 0xe0
 81031de:	46bd      	mov	sp, r7
 81031e0:	bd80      	pop	{r7, pc}
 81031e2:	bf00      	nop
 81031e4:	40013000 	.word	0x40013000
 81031e8:	58024400 	.word	0x58024400
 81031ec:	58020000 	.word	0x58020000
 81031f0:	1000047c 	.word	0x1000047c
 81031f4:	40020010 	.word	0x40020010
 81031f8:	100004f4 	.word	0x100004f4
 81031fc:	40020028 	.word	0x40020028

08103200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8103200:	b480      	push	{r7}
 8103202:	b083      	sub	sp, #12
 8103204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103206:	4b0a      	ldr	r3, [pc, #40]	; (8103230 <HAL_MspInit+0x30>)
 8103208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810320c:	4a08      	ldr	r2, [pc, #32]	; (8103230 <HAL_MspInit+0x30>)
 810320e:	f043 0302 	orr.w	r3, r3, #2
 8103212:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103216:	4b06      	ldr	r3, [pc, #24]	; (8103230 <HAL_MspInit+0x30>)
 8103218:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810321c:	f003 0302 	and.w	r3, r3, #2
 8103220:	607b      	str	r3, [r7, #4]
 8103222:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103224:	bf00      	nop
 8103226:	370c      	adds	r7, #12
 8103228:	46bd      	mov	sp, r7
 810322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810322e:	4770      	bx	lr
 8103230:	58024400 	.word	0x58024400

08103234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8103234:	b480      	push	{r7}
 8103236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8103238:	e7fe      	b.n	8103238 <NMI_Handler+0x4>

0810323a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810323a:	b480      	push	{r7}
 810323c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810323e:	e7fe      	b.n	810323e <HardFault_Handler+0x4>

08103240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8103240:	b480      	push	{r7}
 8103242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8103244:	e7fe      	b.n	8103244 <MemManage_Handler+0x4>

08103246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8103246:	b480      	push	{r7}
 8103248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810324a:	e7fe      	b.n	810324a <BusFault_Handler+0x4>

0810324c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810324c:	b480      	push	{r7}
 810324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8103250:	e7fe      	b.n	8103250 <UsageFault_Handler+0x4>

08103252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8103252:	b480      	push	{r7}
 8103254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8103256:	bf00      	nop
 8103258:	46bd      	mov	sp, r7
 810325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810325e:	4770      	bx	lr

08103260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8103260:	b480      	push	{r7}
 8103262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8103264:	bf00      	nop
 8103266:	46bd      	mov	sp, r7
 8103268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810326c:	4770      	bx	lr

0810326e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810326e:	b480      	push	{r7}
 8103270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8103272:	bf00      	nop
 8103274:	46bd      	mov	sp, r7
 8103276:	f85d 7b04 	ldr.w	r7, [sp], #4
 810327a:	4770      	bx	lr

0810327c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810327c:	b580      	push	{r7, lr}
 810327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8103280:	f000 fc22 	bl	8103ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8103284:	bf00      	nop
 8103286:	bd80      	pop	{r7, pc}

08103288 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8103288:	b580      	push	{r7, lr}
 810328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 810328c:	4802      	ldr	r0, [pc, #8]	; (8103298 <DMA1_Stream0_IRQHandler+0x10>)
 810328e:	f003 fc8b 	bl	8106ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8103292:	bf00      	nop
 8103294:	bd80      	pop	{r7, pc}
 8103296:	bf00      	nop
 8103298:	1000047c 	.word	0x1000047c

0810329c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 810329c:	b580      	push	{r7, lr}
 810329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 81032a0:	4802      	ldr	r0, [pc, #8]	; (81032ac <DMA1_Stream1_IRQHandler+0x10>)
 81032a2:	f003 fc81 	bl	8106ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 81032a6:	bf00      	nop
 81032a8:	bd80      	pop	{r7, pc}
 81032aa:	bf00      	nop
 81032ac:	100004f4 	.word	0x100004f4

081032b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 81032b0:	b580      	push	{r7, lr}
 81032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 81032b4:	4802      	ldr	r0, [pc, #8]	; (81032c0 <DMA1_Stream2_IRQHandler+0x10>)
 81032b6:	f003 fc77 	bl	8106ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 81032ba:	bf00      	nop
 81032bc:	bd80      	pop	{r7, pc}
 81032be:	bf00      	nop
 81032c0:	10000270 	.word	0x10000270

081032c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 81032c4:	b580      	push	{r7, lr}
 81032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 81032c8:	4802      	ldr	r0, [pc, #8]	; (81032d4 <DMA1_Stream3_IRQHandler+0x10>)
 81032ca:	f003 fc6d 	bl	8106ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 81032ce:	bf00      	nop
 81032d0:	bd80      	pop	{r7, pc}
 81032d2:	bf00      	nop
 81032d4:	100001ac 	.word	0x100001ac

081032d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 81032d8:	b580      	push	{r7, lr}
 81032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 81032dc:	4802      	ldr	r0, [pc, #8]	; (81032e8 <DMA1_Stream4_IRQHandler+0x10>)
 81032de:	f003 fc63 	bl	8106ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 81032e2:	bf00      	nop
 81032e4:	bd80      	pop	{r7, pc}
 81032e6:	bf00      	nop
 81032e8:	10000130 	.word	0x10000130

081032ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 81032ec:	b580      	push	{r7, lr}
 81032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 81032f0:	4802      	ldr	r0, [pc, #8]	; (81032fc <ADC_IRQHandler+0x10>)
 81032f2:	f000 ffa7 	bl	8104244 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 81032f6:	bf00      	nop
 81032f8:	bd80      	pop	{r7, pc}
 81032fa:	bf00      	nop
 81032fc:	100000cc 	.word	0x100000cc

08103300 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8103300:	b580      	push	{r7, lr}
 8103302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8103304:	4802      	ldr	r0, [pc, #8]	; (8103310 <I2C1_EV_IRQHandler+0x10>)
 8103306:	f005 fc43 	bl	8108b90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 810330a:	bf00      	nop
 810330c:	bd80      	pop	{r7, pc}
 810330e:	bf00      	nop
 8103310:	10000224 	.word	0x10000224

08103314 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8103314:	b580      	push	{r7, lr}
 8103316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8103318:	4802      	ldr	r0, [pc, #8]	; (8103324 <I2C1_ER_IRQHandler+0x10>)
 810331a:	f005 fc53 	bl	8108bc4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 810331e:	bf00      	nop
 8103320:	bd80      	pop	{r7, pc}
 8103322:	bf00      	nop
 8103324:	10000224 	.word	0x10000224

08103328 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8103328:	b580      	push	{r7, lr}
 810332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 810332c:	4802      	ldr	r0, [pc, #8]	; (8103338 <SPI1_IRQHandler+0x10>)
 810332e:	f009 fbf9 	bl	810cb24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8103332:	bf00      	nop
 8103334:	bd80      	pop	{r7, pc}
 8103336:	bf00      	nop
 8103338:	100003f4 	.word	0x100003f4

0810333c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 810333c:	b580      	push	{r7, lr}
 810333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8103340:	4802      	ldr	r0, [pc, #8]	; (810334c <USART3_IRQHandler+0x10>)
 8103342:	f00a f871 	bl	810d428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8103346:	bf00      	nop
 8103348:	bd80      	pop	{r7, pc}
 810334a:	bf00      	nop
 810334c:	100005e4 	.word	0x100005e4

08103350 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8103350:	b580      	push	{r7, lr}
 8103352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8103354:	4802      	ldr	r0, [pc, #8]	; (8103360 <DMA1_Stream7_IRQHandler+0x10>)
 8103356:	f003 fc27 	bl	8106ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 810335a:	bf00      	nop
 810335c:	bd80      	pop	{r7, pc}
 810335e:	bf00      	nop
 8103360:	1000056c 	.word	0x1000056c

08103364 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8103364:	b580      	push	{r7, lr}
 8103366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8103368:	4802      	ldr	r0, [pc, #8]	; (8103374 <DMA2_Stream0_IRQHandler+0x10>)
 810336a:	f003 fc1d 	bl	8106ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 810336e:	bf00      	nop
 8103370:	bd80      	pop	{r7, pc}
 8103372:	bf00      	nop
 8103374:	10000674 	.word	0x10000674

08103378 <calcChecksum>:
//      }
//
// }

 void calcChecksum(unsigned char* ck)
 {
 8103378:	b580      	push	{r7, lr}
 810337a:	b084      	sub	sp, #16
 810337c:	af00      	add	r7, sp, #0
 810337e:	6078      	str	r0, [r7, #4]
     memset(ck, 0, 2);
 8103380:	2202      	movs	r2, #2
 8103382:	2100      	movs	r1, #0
 8103384:	6878      	ldr	r0, [r7, #4]
 8103386:	f00b fd17 	bl	810edb8 <memset>
     for (int i = 0; i < (int)sizeof(pvt); i++)
 810338a:	2300      	movs	r3, #0
 810338c:	60fb      	str	r3, [r7, #12]
 810338e:	e016      	b.n	81033be <calcChecksum+0x46>
      {
        ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	781a      	ldrb	r2, [r3, #0]
 8103394:	68fb      	ldr	r3, [r7, #12]
 8103396:	490e      	ldr	r1, [pc, #56]	; (81033d0 <calcChecksum+0x58>)
 8103398:	440b      	add	r3, r1
 810339a:	781b      	ldrb	r3, [r3, #0]
 810339c:	4413      	add	r3, r2
 810339e:	b2da      	uxtb	r2, r3
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	701a      	strb	r2, [r3, #0]
        ck[1] = ck[1] + ck[0];
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	3301      	adds	r3, #1
 81033a8:	7819      	ldrb	r1, [r3, #0]
 81033aa:	687b      	ldr	r3, [r7, #4]
 81033ac:	781a      	ldrb	r2, [r3, #0]
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	3301      	adds	r3, #1
 81033b2:	440a      	add	r2, r1
 81033b4:	b2d2      	uxtb	r2, r2
 81033b6:	701a      	strb	r2, [r3, #0]
     for (int i = 0; i < (int)sizeof(pvt); i++)
 81033b8:	68fb      	ldr	r3, [r7, #12]
 81033ba:	3301      	adds	r3, #1
 81033bc:	60fb      	str	r3, [r7, #12]
 81033be:	68fb      	ldr	r3, [r7, #12]
 81033c0:	2b5f      	cmp	r3, #95	; 0x5f
 81033c2:	dde5      	ble.n	8103390 <calcChecksum+0x18>
      }

 }
 81033c4:	bf00      	nop
 81033c6:	bf00      	nop
 81033c8:	3710      	adds	r7, #16
 81033ca:	46bd      	mov	sp, r7
 81033cc:	bd80      	pop	{r7, pc}
 81033ce:	bf00      	nop
 81033d0:	10000314 	.word	0x10000314
 81033d4:	00000000 	.word	0x00000000

081033d8 <processGPS>:


 void processGPS(GPSHandle* gps)
 {
 81033d8:	b580      	push	{r7, lr}
 81033da:	b082      	sub	sp, #8
 81033dc:	af00      	add	r7, sp, #0
 81033de:	6078      	str	r0, [r7, #4]
     gps->latitude = pvt.latitude * 1.0e-7;
 81033e0:	4b39      	ldr	r3, [pc, #228]	; (81034c8 <processGPS+0xf0>)
 81033e2:	6a1b      	ldr	r3, [r3, #32]
 81033e4:	4618      	mov	r0, r3
 81033e6:	f7fd f8c9 	bl	810057c <__aeabi_i2d>
 81033ea:	a335      	add	r3, pc, #212	; (adr r3, 81034c0 <processGPS+0xe8>)
 81033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033f0:	f7fd f92e 	bl	8100650 <__aeabi_dmul>
 81033f4:	4602      	mov	r2, r0
 81033f6:	460b      	mov	r3, r1
 81033f8:	4610      	mov	r0, r2
 81033fa:	4619      	mov	r1, r3
 81033fc:	f7fd fbd8 	bl	8100bb0 <__aeabi_d2f>
 8103400:	4602      	mov	r2, r0
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	601a      	str	r2, [r3, #0]
     gps->longitude = pvt.longitude * 1.0e-7;
 8103406:	4b30      	ldr	r3, [pc, #192]	; (81034c8 <processGPS+0xf0>)
 8103408:	69db      	ldr	r3, [r3, #28]
 810340a:	4618      	mov	r0, r3
 810340c:	f7fd f8b6 	bl	810057c <__aeabi_i2d>
 8103410:	a32b      	add	r3, pc, #172	; (adr r3, 81034c0 <processGPS+0xe8>)
 8103412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103416:	f7fd f91b 	bl	8100650 <__aeabi_dmul>
 810341a:	4602      	mov	r2, r0
 810341c:	460b      	mov	r3, r1
 810341e:	4610      	mov	r0, r2
 8103420:	4619      	mov	r1, r3
 8103422:	f7fd fbc5 	bl	8100bb0 <__aeabi_d2f>
 8103426:	4602      	mov	r2, r0
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	605a      	str	r2, [r3, #4]
     gps->altitude = pvt.hMSL / 1000.0f;  // use Mean sea level instead
 810342c:	4b26      	ldr	r3, [pc, #152]	; (81034c8 <processGPS+0xf0>)
 810342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103430:	ee07 3a90 	vmov	s15, r3
 8103434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103438:	eddf 6a24 	vldr	s13, [pc, #144]	; 81034cc <processGPS+0xf4>
 810343c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	edc3 7a02 	vstr	s15, [r3, #8]

     // format to ENU
     gps->vel_x = pvt.velE / 1000.0f;
 8103446:	4b20      	ldr	r3, [pc, #128]	; (81034c8 <processGPS+0xf0>)
 8103448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810344a:	ee07 3a90 	vmov	s15, r3
 810344e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103452:	eddf 6a1e 	vldr	s13, [pc, #120]	; 81034cc <processGPS+0xf4>
 8103456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	edc3 7a03 	vstr	s15, [r3, #12]
     gps->vel_y = pvt.velN / 1000.0f;
 8103460:	4b19      	ldr	r3, [pc, #100]	; (81034c8 <processGPS+0xf0>)
 8103462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103464:	ee07 3a90 	vmov	s15, r3
 8103468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810346c:	eddf 6a17 	vldr	s13, [pc, #92]	; 81034cc <processGPS+0xf4>
 8103470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	edc3 7a04 	vstr	s15, [r3, #16]
     gps->vel_z = pvt.velD / -1000.0f;
 810347a:	4b13      	ldr	r3, [pc, #76]	; (81034c8 <processGPS+0xf0>)
 810347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810347e:	ee07 3a90 	vmov	s15, r3
 8103482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103486:	eddf 6a12 	vldr	s13, [pc, #72]	; 81034d0 <processGPS+0xf8>
 810348a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	edc3 7a05 	vstr	s15, [r3, #20]
     gps->gndSpeed = pvt.gSpeed / 1000.0f;
 8103494:	4b0c      	ldr	r3, [pc, #48]	; (81034c8 <processGPS+0xf0>)
 8103496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103498:	ee07 3a90 	vmov	s15, r3
 810349c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81034a0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 81034cc <processGPS+0xf4>
 81034a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81034a8:	687b      	ldr	r3, [r7, #4]
 81034aa:	edc3 7a06 	vstr	s15, [r3, #24]
     gps->num_satellites = pvt.numSV;
 81034ae:	4b06      	ldr	r3, [pc, #24]	; (81034c8 <processGPS+0xf0>)
 81034b0:	7edb      	ldrb	r3, [r3, #27]
 81034b2:	461a      	mov	r2, r3
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	61da      	str	r2, [r3, #28]


 }
 81034b8:	bf00      	nop
 81034ba:	3708      	adds	r7, #8
 81034bc:	46bd      	mov	sp, r7
 81034be:	bd80      	pop	{r7, pc}
 81034c0:	9abcaf48 	.word	0x9abcaf48
 81034c4:	3e7ad7f2 	.word	0x3e7ad7f2
 81034c8:	10000314 	.word	0x10000314
 81034cc:	447a0000 	.word	0x447a0000
 81034d0:	c47a0000 	.word	0xc47a0000

081034d4 <ConfigGPS>:
//     return *gps;
// }


 void ConfigGPS(void)
 {
 81034d4:	b590      	push	{r4, r7, lr}
 81034d6:	b0c1      	sub	sp, #260	; 0x104
 81034d8:	af00      	add	r7, sp, #0
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 81034da:	4b43      	ldr	r3, [pc, #268]	; (81035e8 <ConfigGPS+0x114>)
 81034dc:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 81034e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81034e2:	c407      	stmia	r4!, {r0, r1, r2}
 81034e4:	8023      	strh	r3, [r4, #0]
 81034e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 81034ea:	220e      	movs	r2, #14
 81034ec:	4619      	mov	r1, r3
 81034ee:	483f      	ldr	r0, [pc, #252]	; (81035ec <ConfigGPS+0x118>)
 81034f0:	f009 fed4 	bl	810d29c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81034f4:	2032      	movs	r0, #50	; 0x32
 81034f6:	f000 fb07 	bl	8103b08 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 81034fa:	4b3d      	ldr	r3, [pc, #244]	; (81035f0 <ConfigGPS+0x11c>)
 81034fc:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8103500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103502:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103506:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 810350a:	2210      	movs	r2, #16
 810350c:	4619      	mov	r1, r3
 810350e:	4837      	ldr	r0, [pc, #220]	; (81035ec <ConfigGPS+0x118>)
 8103510:	f009 fec4 	bl	810d29c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103514:	2032      	movs	r0, #50	; 0x32
 8103516:	f000 faf7 	bl	8103b08 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 810351a:	4b36      	ldr	r3, [pc, #216]	; (81035f4 <ConfigGPS+0x120>)
 810351c:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8103520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103526:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 810352a:	2210      	movs	r2, #16
 810352c:	4619      	mov	r1, r3
 810352e:	482f      	ldr	r0, [pc, #188]	; (81035ec <ConfigGPS+0x118>)
 8103530:	f009 feb4 	bl	810d29c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103534:	2032      	movs	r0, #50	; 0x32
 8103536:	f000 fae7 	bl	8103b08 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 810353a:	4b2f      	ldr	r3, [pc, #188]	; (81035f8 <ConfigGPS+0x124>)
 810353c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8103540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103546:	f107 0390 	add.w	r3, r7, #144	; 0x90
 810354a:	2210      	movs	r2, #16
 810354c:	4619      	mov	r1, r3
 810354e:	4827      	ldr	r0, [pc, #156]	; (81035ec <ConfigGPS+0x118>)
 8103550:	f009 fea4 	bl	810d29c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103554:	2032      	movs	r0, #50	; 0x32
 8103556:	f000 fad7 	bl	8103b08 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 810355a:	4b28      	ldr	r3, [pc, #160]	; (81035fc <ConfigGPS+0x128>)
 810355c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8103560:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103566:	f107 0370 	add.w	r3, r7, #112	; 0x70
 810356a:	2210      	movs	r2, #16
 810356c:	4619      	mov	r1, r3
 810356e:	481f      	ldr	r0, [pc, #124]	; (81035ec <ConfigGPS+0x118>)
 8103570:	f009 fe94 	bl	810d29c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103574:	2032      	movs	r0, #50	; 0x32
 8103576:	f000 fac7 	bl	8103b08 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 810357a:	4b21      	ldr	r3, [pc, #132]	; (8103600 <ConfigGPS+0x12c>)
 810357c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8103580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103586:	f107 0350 	add.w	r3, r7, #80	; 0x50
 810358a:	2210      	movs	r2, #16
 810358c:	4619      	mov	r1, r3
 810358e:	4817      	ldr	r0, [pc, #92]	; (81035ec <ConfigGPS+0x118>)
 8103590:	f009 fe84 	bl	810d29c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103594:	2032      	movs	r0, #50	; 0x32
 8103596:	f000 fab7 	bl	8103b08 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 810359a:	4b1a      	ldr	r3, [pc, #104]	; (8103604 <ConfigGPS+0x130>)
 810359c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 81035a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81035a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81035a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81035aa:	2210      	movs	r2, #16
 81035ac:	4619      	mov	r1, r3
 81035ae:	480f      	ldr	r0, [pc, #60]	; (81035ec <ConfigGPS+0x118>)
 81035b0:	f009 fe74 	bl	810d29c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81035b4:	2032      	movs	r0, #50	; 0x32
 81035b6:	f000 faa7 	bl	8103b08 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 81035ba:	4b13      	ldr	r3, [pc, #76]	; (8103608 <ConfigGPS+0x134>)
 81035bc:	f107 0410 	add.w	r4, r7, #16
 81035c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81035c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81035c6:	f107 0310 	add.w	r3, r7, #16
 81035ca:	2210      	movs	r2, #16
 81035cc:	4619      	mov	r1, r3
 81035ce:	4807      	ldr	r0, [pc, #28]	; (81035ec <ConfigGPS+0x118>)
 81035d0:	f009 fe64 	bl	810d29c <HAL_UART_Transmit_DMA>

   HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1);
 81035d4:	2201      	movs	r2, #1
 81035d6:	490d      	ldr	r1, [pc, #52]	; (810360c <ConfigGPS+0x138>)
 81035d8:	4804      	ldr	r0, [pc, #16]	; (81035ec <ConfigGPS+0x118>)
 81035da:	f009 fedf 	bl	810d39c <HAL_UART_Receive_DMA>
 }
 81035de:	bf00      	nop
 81035e0:	f507 7782 	add.w	r7, r7, #260	; 0x104
 81035e4:	46bd      	mov	sp, r7
 81035e6:	bd90      	pop	{r4, r7, pc}
 81035e8:	0810fd58 	.word	0x0810fd58
 81035ec:	100005e4 	.word	0x100005e4
 81035f0:	0810fd68 	.word	0x0810fd68
 81035f4:	0810fd78 	.word	0x0810fd78
 81035f8:	0810fd88 	.word	0x0810fd88
 81035fc:	0810fd98 	.word	0x0810fd98
 8103600:	0810fda8 	.word	0x0810fda8
 8103604:	0810fdb8 	.word	0x0810fdb8
 8103608:	0810fdc8 	.word	0x0810fdc8
 810360c:	100000c0 	.word	0x100000c0

08103610 <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8103610:	b480      	push	{r7}
 8103612:	b083      	sub	sp, #12
 8103614:	af00      	add	r7, sp, #0
 8103616:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART3)
    {

    }
 }
 8103618:	bf00      	nop
 810361a:	370c      	adds	r7, #12
 810361c:	46bd      	mov	sp, r7
 810361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103622:	4770      	bx	lr

08103624 <HAL_UART_RxCpltCallback>:


 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8103624:	b580      	push	{r7, lr}
 8103626:	b084      	sub	sp, #16
 8103628:	af00      	add	r7, sp, #0
 810362a:	6078      	str	r0, [r7, #4]
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	681b      	ldr	r3, [r3, #0]
 8103630:	4a31      	ldr	r2, [pc, #196]	; (81036f8 <HAL_UART_RxCpltCallback+0xd4>)
 8103632:	4293      	cmp	r3, r2
 8103634:	d15b      	bne.n	81036ee <HAL_UART_RxCpltCallback+0xca>
    {
      if(byte_pos < 2)
 8103636:	4b31      	ldr	r3, [pc, #196]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	2b01      	cmp	r3, #1
 810363c:	dc17      	bgt.n	810366e <HAL_UART_RxCpltCallback+0x4a>
      {
        if(data_byte[0] == UBX_HEADER[byte_pos])
 810363e:	4b30      	ldr	r3, [pc, #192]	; (8103700 <HAL_UART_RxCpltCallback+0xdc>)
 8103640:	781a      	ldrb	r2, [r3, #0]
 8103642:	4b30      	ldr	r3, [pc, #192]	; (8103704 <HAL_UART_RxCpltCallback+0xe0>)
 8103644:	881b      	ldrh	r3, [r3, #0]
 8103646:	81bb      	strh	r3, [r7, #12]
 8103648:	4b2c      	ldr	r3, [pc, #176]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	f107 0110 	add.w	r1, r7, #16
 8103650:	440b      	add	r3, r1
 8103652:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8103656:	429a      	cmp	r2, r3
 8103658:	d105      	bne.n	8103666 <HAL_UART_RxCpltCallback+0x42>
        {
          byte_pos++;
 810365a:	4b28      	ldr	r3, [pc, #160]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 810365c:	681b      	ldr	r3, [r3, #0]
 810365e:	3301      	adds	r3, #1
 8103660:	4a26      	ldr	r2, [pc, #152]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 8103662:	6013      	str	r3, [r2, #0]
        }
      }
    }

    //processGPS(&gps);
 }
 8103664:	e043      	b.n	81036ee <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 8103666:	4b25      	ldr	r3, [pc, #148]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 8103668:	2200      	movs	r2, #0
 810366a:	601a      	str	r2, [r3, #0]
 }
 810366c:	e03f      	b.n	81036ee <HAL_UART_RxCpltCallback+0xca>
        if((byte_pos -2) < data_size)
 810366e:	4b23      	ldr	r3, [pc, #140]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 8103670:	681b      	ldr	r3, [r3, #0]
 8103672:	3b01      	subs	r3, #1
 8103674:	2260      	movs	r2, #96	; 0x60
 8103676:	4293      	cmp	r3, r2
 8103678:	dc07      	bgt.n	810368a <HAL_UART_RxCpltCallback+0x66>
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 810367a:	4b20      	ldr	r3, [pc, #128]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	3b02      	subs	r3, #2
 8103680:	4a21      	ldr	r2, [pc, #132]	; (8103708 <HAL_UART_RxCpltCallback+0xe4>)
 8103682:	4413      	add	r3, r2
 8103684:	4a1e      	ldr	r2, [pc, #120]	; (8103700 <HAL_UART_RxCpltCallback+0xdc>)
 8103686:	7812      	ldrb	r2, [r2, #0]
 8103688:	701a      	strb	r2, [r3, #0]
        byte_pos++;
 810368a:	4b1c      	ldr	r3, [pc, #112]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 810368c:	681b      	ldr	r3, [r3, #0]
 810368e:	3301      	adds	r3, #1
 8103690:	4a1a      	ldr	r2, [pc, #104]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 8103692:	6013      	str	r3, [r2, #0]
        if (byte_pos == (data_size+2))
 8103694:	2360      	movs	r3, #96	; 0x60
 8103696:	1c9a      	adds	r2, r3, #2
 8103698:	4b18      	ldr	r3, [pc, #96]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	429a      	cmp	r2, r3
 810369e:	d103      	bne.n	81036a8 <HAL_UART_RxCpltCallback+0x84>
          calcChecksum(checksum);
 81036a0:	481a      	ldr	r0, [pc, #104]	; (810370c <HAL_UART_RxCpltCallback+0xe8>)
 81036a2:	f7ff fe69 	bl	8103378 <calcChecksum>
 }
 81036a6:	e022      	b.n	81036ee <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+3) )
 81036a8:	2360      	movs	r3, #96	; 0x60
 81036aa:	1cda      	adds	r2, r3, #3
 81036ac:	4b13      	ldr	r3, [pc, #76]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	429a      	cmp	r2, r3
 81036b2:	d109      	bne.n	81036c8 <HAL_UART_RxCpltCallback+0xa4>
          if (data_byte[0] != checksum[0])
 81036b4:	4b12      	ldr	r3, [pc, #72]	; (8103700 <HAL_UART_RxCpltCallback+0xdc>)
 81036b6:	781a      	ldrb	r2, [r3, #0]
 81036b8:	4b14      	ldr	r3, [pc, #80]	; (810370c <HAL_UART_RxCpltCallback+0xe8>)
 81036ba:	781b      	ldrb	r3, [r3, #0]
 81036bc:	429a      	cmp	r2, r3
 81036be:	d016      	beq.n	81036ee <HAL_UART_RxCpltCallback+0xca>
            byte_pos = 0;
 81036c0:	4b0e      	ldr	r3, [pc, #56]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 81036c2:	2200      	movs	r2, #0
 81036c4:	601a      	str	r2, [r3, #0]
 }
 81036c6:	e012      	b.n	81036ee <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+4) )
 81036c8:	2360      	movs	r3, #96	; 0x60
 81036ca:	1d1a      	adds	r2, r3, #4
 81036cc:	4b0b      	ldr	r3, [pc, #44]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	429a      	cmp	r2, r3
 81036d2:	d103      	bne.n	81036dc <HAL_UART_RxCpltCallback+0xb8>
          byte_pos = 0;
 81036d4:	4b09      	ldr	r3, [pc, #36]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 81036d6:	2200      	movs	r2, #0
 81036d8:	601a      	str	r2, [r3, #0]
 }
 81036da:	e008      	b.n	81036ee <HAL_UART_RxCpltCallback+0xca>
        else if ( byte_pos > (data_size+4) )
 81036dc:	2360      	movs	r3, #96	; 0x60
 81036de:	1d1a      	adds	r2, r3, #4
 81036e0:	4b06      	ldr	r3, [pc, #24]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	429a      	cmp	r2, r3
 81036e6:	da02      	bge.n	81036ee <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 81036e8:	4b04      	ldr	r3, [pc, #16]	; (81036fc <HAL_UART_RxCpltCallback+0xd8>)
 81036ea:	2200      	movs	r2, #0
 81036ec:	601a      	str	r2, [r3, #0]
 }
 81036ee:	bf00      	nop
 81036f0:	3710      	adds	r7, #16
 81036f2:	46bd      	mov	sp, r7
 81036f4:	bd80      	pop	{r7, pc}
 81036f6:	bf00      	nop
 81036f8:	40004800 	.word	0x40004800
 81036fc:	100000c4 	.word	0x100000c4
 8103700:	100000c0 	.word	0x100000c0
 8103704:	0810fdd8 	.word	0x0810fdd8
 8103708:	10000314 	.word	0x10000314
 810370c:	100000c8 	.word	0x100000c8

08103710 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8103710:	b580      	push	{r7, lr}
 8103712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8103714:	4b22      	ldr	r3, [pc, #136]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 8103716:	4a23      	ldr	r2, [pc, #140]	; (81037a4 <MX_USART3_UART_Init+0x94>)
 8103718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 810371a:	4b21      	ldr	r3, [pc, #132]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 810371c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8103720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8103722:	4b1f      	ldr	r3, [pc, #124]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 8103724:	2200      	movs	r2, #0
 8103726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103728:	4b1d      	ldr	r3, [pc, #116]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 810372a:	2200      	movs	r2, #0
 810372c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810372e:	4b1c      	ldr	r3, [pc, #112]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 8103730:	2200      	movs	r2, #0
 8103732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8103734:	4b1a      	ldr	r3, [pc, #104]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 8103736:	220c      	movs	r2, #12
 8103738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810373a:	4b19      	ldr	r3, [pc, #100]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 810373c:	2200      	movs	r2, #0
 810373e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103740:	4b17      	ldr	r3, [pc, #92]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 8103742:	2200      	movs	r2, #0
 8103744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103746:	4b16      	ldr	r3, [pc, #88]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 8103748:	2200      	movs	r2, #0
 810374a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810374c:	4b14      	ldr	r3, [pc, #80]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 810374e:	2200      	movs	r2, #0
 8103750:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103752:	4b13      	ldr	r3, [pc, #76]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 8103754:	2200      	movs	r2, #0
 8103756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8103758:	4811      	ldr	r0, [pc, #68]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 810375a:	f009 fd4f 	bl	810d1fc <HAL_UART_Init>
 810375e:	4603      	mov	r3, r0
 8103760:	2b00      	cmp	r3, #0
 8103762:	d001      	beq.n	8103768 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8103764:	f7ff fc1f 	bl	8102fa6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103768:	2100      	movs	r1, #0
 810376a:	480d      	ldr	r0, [pc, #52]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 810376c:	f00b fa30 	bl	810ebd0 <HAL_UARTEx_SetTxFifoThreshold>
 8103770:	4603      	mov	r3, r0
 8103772:	2b00      	cmp	r3, #0
 8103774:	d001      	beq.n	810377a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8103776:	f7ff fc16 	bl	8102fa6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810377a:	2100      	movs	r1, #0
 810377c:	4808      	ldr	r0, [pc, #32]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 810377e:	f00b fa65 	bl	810ec4c <HAL_UARTEx_SetRxFifoThreshold>
 8103782:	4603      	mov	r3, r0
 8103784:	2b00      	cmp	r3, #0
 8103786:	d001      	beq.n	810378c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8103788:	f7ff fc0d 	bl	8102fa6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810378c:	4804      	ldr	r0, [pc, #16]	; (81037a0 <MX_USART3_UART_Init+0x90>)
 810378e:	f00b f9e6 	bl	810eb5e <HAL_UARTEx_DisableFifoMode>
 8103792:	4603      	mov	r3, r0
 8103794:	2b00      	cmp	r3, #0
 8103796:	d001      	beq.n	810379c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8103798:	f7ff fc05 	bl	8102fa6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810379c:	bf00      	nop
 810379e:	bd80      	pop	{r7, pc}
 81037a0:	100005e4 	.word	0x100005e4
 81037a4:	40004800 	.word	0x40004800

081037a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 81037a8:	b580      	push	{r7, lr}
 81037aa:	b0b8      	sub	sp, #224	; 0xe0
 81037ac:	af00      	add	r7, sp, #0
 81037ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81037b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81037b4:	2200      	movs	r2, #0
 81037b6:	601a      	str	r2, [r3, #0]
 81037b8:	605a      	str	r2, [r3, #4]
 81037ba:	609a      	str	r2, [r3, #8]
 81037bc:	60da      	str	r2, [r3, #12]
 81037be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81037c0:	f107 0310 	add.w	r3, r7, #16
 81037c4:	22bc      	movs	r2, #188	; 0xbc
 81037c6:	2100      	movs	r1, #0
 81037c8:	4618      	mov	r0, r3
 81037ca:	f00b faf5 	bl	810edb8 <memset>
  if(uartHandle->Instance==USART3)
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	681b      	ldr	r3, [r3, #0]
 81037d2:	4a57      	ldr	r2, [pc, #348]	; (8103930 <HAL_UART_MspInit+0x188>)
 81037d4:	4293      	cmp	r3, r2
 81037d6:	f040 80a7 	bne.w	8103928 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81037da:	2302      	movs	r3, #2
 81037dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81037de:	2300      	movs	r3, #0
 81037e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81037e4:	f107 0310 	add.w	r3, r7, #16
 81037e8:	4618      	mov	r0, r3
 81037ea:	f006 fd47 	bl	810a27c <HAL_RCCEx_PeriphCLKConfig>
 81037ee:	4603      	mov	r3, r0
 81037f0:	2b00      	cmp	r3, #0
 81037f2:	d001      	beq.n	81037f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 81037f4:	f7ff fbd7 	bl	8102fa6 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81037f8:	4b4e      	ldr	r3, [pc, #312]	; (8103934 <HAL_UART_MspInit+0x18c>)
 81037fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81037fe:	4a4d      	ldr	r2, [pc, #308]	; (8103934 <HAL_UART_MspInit+0x18c>)
 8103800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103804:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8103808:	4b4a      	ldr	r3, [pc, #296]	; (8103934 <HAL_UART_MspInit+0x18c>)
 810380a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810380e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103812:	60fb      	str	r3, [r7, #12]
 8103814:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103816:	4b47      	ldr	r3, [pc, #284]	; (8103934 <HAL_UART_MspInit+0x18c>)
 8103818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810381c:	4a45      	ldr	r2, [pc, #276]	; (8103934 <HAL_UART_MspInit+0x18c>)
 810381e:	f043 0308 	orr.w	r3, r3, #8
 8103822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103826:	4b43      	ldr	r3, [pc, #268]	; (8103934 <HAL_UART_MspInit+0x18c>)
 8103828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810382c:	f003 0308 	and.w	r3, r3, #8
 8103830:	60bb      	str	r3, [r7, #8]
 8103832:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8103834:	f44f 7340 	mov.w	r3, #768	; 0x300
 8103838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810383c:	2302      	movs	r3, #2
 810383e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103842:	2300      	movs	r3, #0
 8103844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103848:	2300      	movs	r3, #0
 810384a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810384e:	2307      	movs	r3, #7
 8103850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103854:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8103858:	4619      	mov	r1, r3
 810385a:	4837      	ldr	r0, [pc, #220]	; (8103938 <HAL_UART_MspInit+0x190>)
 810385c:	f004 fcd0 	bl	8108200 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8103860:	4b36      	ldr	r3, [pc, #216]	; (810393c <HAL_UART_MspInit+0x194>)
 8103862:	4a37      	ldr	r2, [pc, #220]	; (8103940 <HAL_UART_MspInit+0x198>)
 8103864:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8103866:	4b35      	ldr	r3, [pc, #212]	; (810393c <HAL_UART_MspInit+0x194>)
 8103868:	222d      	movs	r2, #45	; 0x2d
 810386a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810386c:	4b33      	ldr	r3, [pc, #204]	; (810393c <HAL_UART_MspInit+0x194>)
 810386e:	2200      	movs	r2, #0
 8103870:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8103872:	4b32      	ldr	r3, [pc, #200]	; (810393c <HAL_UART_MspInit+0x194>)
 8103874:	2200      	movs	r2, #0
 8103876:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8103878:	4b30      	ldr	r3, [pc, #192]	; (810393c <HAL_UART_MspInit+0x194>)
 810387a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810387e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8103880:	4b2e      	ldr	r3, [pc, #184]	; (810393c <HAL_UART_MspInit+0x194>)
 8103882:	2200      	movs	r2, #0
 8103884:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8103886:	4b2d      	ldr	r3, [pc, #180]	; (810393c <HAL_UART_MspInit+0x194>)
 8103888:	2200      	movs	r2, #0
 810388a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 810388c:	4b2b      	ldr	r3, [pc, #172]	; (810393c <HAL_UART_MspInit+0x194>)
 810388e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103892:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8103894:	4b29      	ldr	r3, [pc, #164]	; (810393c <HAL_UART_MspInit+0x194>)
 8103896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810389a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810389c:	4b27      	ldr	r3, [pc, #156]	; (810393c <HAL_UART_MspInit+0x194>)
 810389e:	2200      	movs	r2, #0
 81038a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81038a2:	4826      	ldr	r0, [pc, #152]	; (810393c <HAL_UART_MspInit+0x194>)
 81038a4:	f001 fe5a 	bl	810555c <HAL_DMA_Init>
 81038a8:	4603      	mov	r3, r0
 81038aa:	2b00      	cmp	r3, #0
 81038ac:	d001      	beq.n	81038b2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 81038ae:	f7ff fb7a 	bl	8102fa6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	4a21      	ldr	r2, [pc, #132]	; (810393c <HAL_UART_MspInit+0x194>)
 81038b6:	67da      	str	r2, [r3, #124]	; 0x7c
 81038b8:	4a20      	ldr	r2, [pc, #128]	; (810393c <HAL_UART_MspInit+0x194>)
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 81038be:	4b21      	ldr	r3, [pc, #132]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038c0:	4a21      	ldr	r2, [pc, #132]	; (8103948 <HAL_UART_MspInit+0x1a0>)
 81038c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81038c4:	4b1f      	ldr	r3, [pc, #124]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038c6:	222e      	movs	r2, #46	; 0x2e
 81038c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81038ca:	4b1e      	ldr	r3, [pc, #120]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038cc:	2240      	movs	r2, #64	; 0x40
 81038ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81038d0:	4b1c      	ldr	r3, [pc, #112]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038d2:	2200      	movs	r2, #0
 81038d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81038d6:	4b1b      	ldr	r3, [pc, #108]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81038dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81038de:	4b19      	ldr	r3, [pc, #100]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038e0:	2200      	movs	r2, #0
 81038e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81038e4:	4b17      	ldr	r3, [pc, #92]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038e6:	2200      	movs	r2, #0
 81038e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 81038ea:	4b16      	ldr	r3, [pc, #88]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038ec:	2200      	movs	r2, #0
 81038ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 81038f0:	4b14      	ldr	r3, [pc, #80]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038f2:	2200      	movs	r2, #0
 81038f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81038f6:	4b13      	ldr	r3, [pc, #76]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038f8:	2200      	movs	r2, #0
 81038fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 81038fc:	4811      	ldr	r0, [pc, #68]	; (8103944 <HAL_UART_MspInit+0x19c>)
 81038fe:	f001 fe2d 	bl	810555c <HAL_DMA_Init>
 8103902:	4603      	mov	r3, r0
 8103904:	2b00      	cmp	r3, #0
 8103906:	d001      	beq.n	810390c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8103908:	f7ff fb4d 	bl	8102fa6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	4a0d      	ldr	r2, [pc, #52]	; (8103944 <HAL_UART_MspInit+0x19c>)
 8103910:	679a      	str	r2, [r3, #120]	; 0x78
 8103912:	4a0c      	ldr	r2, [pc, #48]	; (8103944 <HAL_UART_MspInit+0x19c>)
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8103918:	2200      	movs	r2, #0
 810391a:	2100      	movs	r1, #0
 810391c:	2027      	movs	r0, #39	; 0x27
 810391e:	f001 fd58 	bl	81053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8103922:	2027      	movs	r0, #39	; 0x27
 8103924:	f001 fd6f 	bl	8105406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8103928:	bf00      	nop
 810392a:	37e0      	adds	r7, #224	; 0xe0
 810392c:	46bd      	mov	sp, r7
 810392e:	bd80      	pop	{r7, pc}
 8103930:	40004800 	.word	0x40004800
 8103934:	58024400 	.word	0x58024400
 8103938:	58020c00 	.word	0x58020c00
 810393c:	1000056c 	.word	0x1000056c
 8103940:	400200b8 	.word	0x400200b8
 8103944:	10000674 	.word	0x10000674
 8103948:	40020410 	.word	0x40020410

0810394c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810394c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8103984 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103950:	f7fd fc58 	bl	8101204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103954:	480c      	ldr	r0, [pc, #48]	; (8103988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103956:	490d      	ldr	r1, [pc, #52]	; (810398c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103958:	4a0d      	ldr	r2, [pc, #52]	; (8103990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810395a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810395c:	e002      	b.n	8103964 <LoopCopyDataInit>

0810395e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810395e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103962:	3304      	adds	r3, #4

08103964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8103966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103968:	d3f9      	bcc.n	810395e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810396a:	4a0a      	ldr	r2, [pc, #40]	; (8103994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810396c:	4c0a      	ldr	r4, [pc, #40]	; (8103998 <LoopFillZerobss+0x22>)
  movs r3, #0
 810396e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103970:	e001      	b.n	8103976 <LoopFillZerobss>

08103972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103974:	3204      	adds	r2, #4

08103976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8103976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103978:	d3fb      	bcc.n	8103972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810397a:	f00b f9f9 	bl	810ed70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810397e:	f7ff f8ef 	bl	8102b60 <main>
  bx  lr
 8103982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103984:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103988:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810398c:	1000008c 	.word	0x1000008c
  ldr r2, =_sidata
 8103990:	0810fe70 	.word	0x0810fe70
  ldr r2, =_sbss
 8103994:	1000008c 	.word	0x1000008c
  ldr r4, =_ebss
 8103998:	100006f0 	.word	0x100006f0

0810399c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810399c:	e7fe      	b.n	810399c <ADC3_IRQHandler>
	...

081039a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81039a0:	b580      	push	{r7, lr}
 81039a2:	b082      	sub	sp, #8
 81039a4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81039a6:	4b28      	ldr	r3, [pc, #160]	; (8103a48 <HAL_Init+0xa8>)
 81039a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81039ac:	4a26      	ldr	r2, [pc, #152]	; (8103a48 <HAL_Init+0xa8>)
 81039ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81039b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81039b6:	4b24      	ldr	r3, [pc, #144]	; (8103a48 <HAL_Init+0xa8>)
 81039b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81039bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81039c0:	603b      	str	r3, [r7, #0]
 81039c2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81039c4:	4b21      	ldr	r3, [pc, #132]	; (8103a4c <HAL_Init+0xac>)
 81039c6:	681b      	ldr	r3, [r3, #0]
 81039c8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81039cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81039d0:	4a1e      	ldr	r2, [pc, #120]	; (8103a4c <HAL_Init+0xac>)
 81039d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81039d6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81039d8:	4b1c      	ldr	r3, [pc, #112]	; (8103a4c <HAL_Init+0xac>)
 81039da:	681b      	ldr	r3, [r3, #0]
 81039dc:	4a1b      	ldr	r2, [pc, #108]	; (8103a4c <HAL_Init+0xac>)
 81039de:	f043 0301 	orr.w	r3, r3, #1
 81039e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81039e4:	2003      	movs	r0, #3
 81039e6:	f001 fce9 	bl	81053bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81039ea:	f006 fa6f 	bl	8109ecc <HAL_RCC_GetSysClockFreq>
 81039ee:	4602      	mov	r2, r0
 81039f0:	4b15      	ldr	r3, [pc, #84]	; (8103a48 <HAL_Init+0xa8>)
 81039f2:	699b      	ldr	r3, [r3, #24]
 81039f4:	0a1b      	lsrs	r3, r3, #8
 81039f6:	f003 030f 	and.w	r3, r3, #15
 81039fa:	4915      	ldr	r1, [pc, #84]	; (8103a50 <HAL_Init+0xb0>)
 81039fc:	5ccb      	ldrb	r3, [r1, r3]
 81039fe:	f003 031f 	and.w	r3, r3, #31
 8103a02:	fa22 f303 	lsr.w	r3, r2, r3
 8103a06:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103a08:	4b0f      	ldr	r3, [pc, #60]	; (8103a48 <HAL_Init+0xa8>)
 8103a0a:	699b      	ldr	r3, [r3, #24]
 8103a0c:	f003 030f 	and.w	r3, r3, #15
 8103a10:	4a0f      	ldr	r2, [pc, #60]	; (8103a50 <HAL_Init+0xb0>)
 8103a12:	5cd3      	ldrb	r3, [r2, r3]
 8103a14:	f003 031f 	and.w	r3, r3, #31
 8103a18:	687a      	ldr	r2, [r7, #4]
 8103a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8103a1e:	4a0d      	ldr	r2, [pc, #52]	; (8103a54 <HAL_Init+0xb4>)
 8103a20:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103a22:	4b0c      	ldr	r3, [pc, #48]	; (8103a54 <HAL_Init+0xb4>)
 8103a24:	681b      	ldr	r3, [r3, #0]
 8103a26:	4a0c      	ldr	r2, [pc, #48]	; (8103a58 <HAL_Init+0xb8>)
 8103a28:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103a2a:	2000      	movs	r0, #0
 8103a2c:	f000 f816 	bl	8103a5c <HAL_InitTick>
 8103a30:	4603      	mov	r3, r0
 8103a32:	2b00      	cmp	r3, #0
 8103a34:	d001      	beq.n	8103a3a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103a36:	2301      	movs	r3, #1
 8103a38:	e002      	b.n	8103a40 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103a3a:	f7ff fbe1 	bl	8103200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8103a3e:	2300      	movs	r3, #0
}
 8103a40:	4618      	mov	r0, r3
 8103a42:	3708      	adds	r7, #8
 8103a44:	46bd      	mov	sp, r7
 8103a46:	bd80      	pop	{r7, pc}
 8103a48:	58024400 	.word	0x58024400
 8103a4c:	40024400 	.word	0x40024400
 8103a50:	0810fddc 	.word	0x0810fddc
 8103a54:	10000004 	.word	0x10000004
 8103a58:	10000000 	.word	0x10000000

08103a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103a5c:	b580      	push	{r7, lr}
 8103a5e:	b082      	sub	sp, #8
 8103a60:	af00      	add	r7, sp, #0
 8103a62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103a64:	4b15      	ldr	r3, [pc, #84]	; (8103abc <HAL_InitTick+0x60>)
 8103a66:	781b      	ldrb	r3, [r3, #0]
 8103a68:	2b00      	cmp	r3, #0
 8103a6a:	d101      	bne.n	8103a70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103a6c:	2301      	movs	r3, #1
 8103a6e:	e021      	b.n	8103ab4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103a70:	4b13      	ldr	r3, [pc, #76]	; (8103ac0 <HAL_InitTick+0x64>)
 8103a72:	681a      	ldr	r2, [r3, #0]
 8103a74:	4b11      	ldr	r3, [pc, #68]	; (8103abc <HAL_InitTick+0x60>)
 8103a76:	781b      	ldrb	r3, [r3, #0]
 8103a78:	4619      	mov	r1, r3
 8103a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8103a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8103a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8103a86:	4618      	mov	r0, r3
 8103a88:	f001 fccb 	bl	8105422 <HAL_SYSTICK_Config>
 8103a8c:	4603      	mov	r3, r0
 8103a8e:	2b00      	cmp	r3, #0
 8103a90:	d001      	beq.n	8103a96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103a92:	2301      	movs	r3, #1
 8103a94:	e00e      	b.n	8103ab4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	2b0f      	cmp	r3, #15
 8103a9a:	d80a      	bhi.n	8103ab2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103a9c:	2200      	movs	r2, #0
 8103a9e:	6879      	ldr	r1, [r7, #4]
 8103aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8103aa4:	f001 fc95 	bl	81053d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103aa8:	4a06      	ldr	r2, [pc, #24]	; (8103ac4 <HAL_InitTick+0x68>)
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103aae:	2300      	movs	r3, #0
 8103ab0:	e000      	b.n	8103ab4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103ab2:	2301      	movs	r3, #1
}
 8103ab4:	4618      	mov	r0, r3
 8103ab6:	3708      	adds	r7, #8
 8103ab8:	46bd      	mov	sp, r7
 8103aba:	bd80      	pop	{r7, pc}
 8103abc:	10000020 	.word	0x10000020
 8103ac0:	10000000 	.word	0x10000000
 8103ac4:	1000001c 	.word	0x1000001c

08103ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103ac8:	b480      	push	{r7}
 8103aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103acc:	4b06      	ldr	r3, [pc, #24]	; (8103ae8 <HAL_IncTick+0x20>)
 8103ace:	781b      	ldrb	r3, [r3, #0]
 8103ad0:	461a      	mov	r2, r3
 8103ad2:	4b06      	ldr	r3, [pc, #24]	; (8103aec <HAL_IncTick+0x24>)
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4413      	add	r3, r2
 8103ad8:	4a04      	ldr	r2, [pc, #16]	; (8103aec <HAL_IncTick+0x24>)
 8103ada:	6013      	str	r3, [r2, #0]
}
 8103adc:	bf00      	nop
 8103ade:	46bd      	mov	sp, r7
 8103ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ae4:	4770      	bx	lr
 8103ae6:	bf00      	nop
 8103ae8:	10000020 	.word	0x10000020
 8103aec:	100006ec 	.word	0x100006ec

08103af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103af0:	b480      	push	{r7}
 8103af2:	af00      	add	r7, sp, #0
  return uwTick;
 8103af4:	4b03      	ldr	r3, [pc, #12]	; (8103b04 <HAL_GetTick+0x14>)
 8103af6:	681b      	ldr	r3, [r3, #0]
}
 8103af8:	4618      	mov	r0, r3
 8103afa:	46bd      	mov	sp, r7
 8103afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b00:	4770      	bx	lr
 8103b02:	bf00      	nop
 8103b04:	100006ec 	.word	0x100006ec

08103b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103b08:	b580      	push	{r7, lr}
 8103b0a:	b084      	sub	sp, #16
 8103b0c:	af00      	add	r7, sp, #0
 8103b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103b10:	f7ff ffee 	bl	8103af0 <HAL_GetTick>
 8103b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103b1a:	68fb      	ldr	r3, [r7, #12]
 8103b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103b20:	d005      	beq.n	8103b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103b22:	4b0a      	ldr	r3, [pc, #40]	; (8103b4c <HAL_Delay+0x44>)
 8103b24:	781b      	ldrb	r3, [r3, #0]
 8103b26:	461a      	mov	r2, r3
 8103b28:	68fb      	ldr	r3, [r7, #12]
 8103b2a:	4413      	add	r3, r2
 8103b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8103b2e:	bf00      	nop
 8103b30:	f7ff ffde 	bl	8103af0 <HAL_GetTick>
 8103b34:	4602      	mov	r2, r0
 8103b36:	68bb      	ldr	r3, [r7, #8]
 8103b38:	1ad3      	subs	r3, r2, r3
 8103b3a:	68fa      	ldr	r2, [r7, #12]
 8103b3c:	429a      	cmp	r2, r3
 8103b3e:	d8f7      	bhi.n	8103b30 <HAL_Delay+0x28>
  {
  }
}
 8103b40:	bf00      	nop
 8103b42:	bf00      	nop
 8103b44:	3710      	adds	r7, #16
 8103b46:	46bd      	mov	sp, r7
 8103b48:	bd80      	pop	{r7, pc}
 8103b4a:	bf00      	nop
 8103b4c:	10000020 	.word	0x10000020

08103b50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8103b50:	b480      	push	{r7}
 8103b52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8103b54:	4b03      	ldr	r3, [pc, #12]	; (8103b64 <HAL_GetREVID+0x14>)
 8103b56:	681b      	ldr	r3, [r3, #0]
 8103b58:	0c1b      	lsrs	r3, r3, #16
}
 8103b5a:	4618      	mov	r0, r3
 8103b5c:	46bd      	mov	sp, r7
 8103b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b62:	4770      	bx	lr
 8103b64:	5c001000 	.word	0x5c001000

08103b68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8103b68:	b480      	push	{r7}
 8103b6a:	b083      	sub	sp, #12
 8103b6c:	af00      	add	r7, sp, #0
 8103b6e:	6078      	str	r0, [r7, #4]
 8103b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	689b      	ldr	r3, [r3, #8]
 8103b76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8103b7a:	683b      	ldr	r3, [r7, #0]
 8103b7c:	431a      	orrs	r2, r3
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	609a      	str	r2, [r3, #8]
}
 8103b82:	bf00      	nop
 8103b84:	370c      	adds	r7, #12
 8103b86:	46bd      	mov	sp, r7
 8103b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b8c:	4770      	bx	lr

08103b8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8103b8e:	b480      	push	{r7}
 8103b90:	b083      	sub	sp, #12
 8103b92:	af00      	add	r7, sp, #0
 8103b94:	6078      	str	r0, [r7, #4]
 8103b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	689b      	ldr	r3, [r3, #8]
 8103b9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8103ba0:	683b      	ldr	r3, [r7, #0]
 8103ba2:	431a      	orrs	r2, r3
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	609a      	str	r2, [r3, #8]
}
 8103ba8:	bf00      	nop
 8103baa:	370c      	adds	r7, #12
 8103bac:	46bd      	mov	sp, r7
 8103bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bb2:	4770      	bx	lr

08103bb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103bb4:	b480      	push	{r7}
 8103bb6:	b083      	sub	sp, #12
 8103bb8:	af00      	add	r7, sp, #0
 8103bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	689b      	ldr	r3, [r3, #8]
 8103bc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8103bc4:	4618      	mov	r0, r3
 8103bc6:	370c      	adds	r7, #12
 8103bc8:	46bd      	mov	sp, r7
 8103bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bce:	4770      	bx	lr

08103bd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8103bd0:	b480      	push	{r7}
 8103bd2:	b087      	sub	sp, #28
 8103bd4:	af00      	add	r7, sp, #0
 8103bd6:	60f8      	str	r0, [r7, #12]
 8103bd8:	60b9      	str	r1, [r7, #8]
 8103bda:	607a      	str	r2, [r7, #4]
 8103bdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8103bde:	68fb      	ldr	r3, [r7, #12]
 8103be0:	3360      	adds	r3, #96	; 0x60
 8103be2:	461a      	mov	r2, r3
 8103be4:	68bb      	ldr	r3, [r7, #8]
 8103be6:	009b      	lsls	r3, r3, #2
 8103be8:	4413      	add	r3, r2
 8103bea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8103bec:	697b      	ldr	r3, [r7, #20]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8103bfa:	683b      	ldr	r3, [r7, #0]
 8103bfc:	430b      	orrs	r3, r1
 8103bfe:	431a      	orrs	r2, r3
 8103c00:	697b      	ldr	r3, [r7, #20]
 8103c02:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8103c04:	bf00      	nop
 8103c06:	371c      	adds	r7, #28
 8103c08:	46bd      	mov	sp, r7
 8103c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c0e:	4770      	bx	lr

08103c10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8103c10:	b480      	push	{r7}
 8103c12:	b085      	sub	sp, #20
 8103c14:	af00      	add	r7, sp, #0
 8103c16:	60f8      	str	r0, [r7, #12]
 8103c18:	60b9      	str	r1, [r7, #8]
 8103c1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8103c1c:	68fb      	ldr	r3, [r7, #12]
 8103c1e:	691b      	ldr	r3, [r3, #16]
 8103c20:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8103c24:	68bb      	ldr	r3, [r7, #8]
 8103c26:	f003 031f 	and.w	r3, r3, #31
 8103c2a:	6879      	ldr	r1, [r7, #4]
 8103c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8103c30:	431a      	orrs	r2, r3
 8103c32:	68fb      	ldr	r3, [r7, #12]
 8103c34:	611a      	str	r2, [r3, #16]
}
 8103c36:	bf00      	nop
 8103c38:	3714      	adds	r7, #20
 8103c3a:	46bd      	mov	sp, r7
 8103c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c40:	4770      	bx	lr

08103c42 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8103c42:	b480      	push	{r7}
 8103c44:	b087      	sub	sp, #28
 8103c46:	af00      	add	r7, sp, #0
 8103c48:	60f8      	str	r0, [r7, #12]
 8103c4a:	60b9      	str	r1, [r7, #8]
 8103c4c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8103c4e:	68fb      	ldr	r3, [r7, #12]
 8103c50:	3360      	adds	r3, #96	; 0x60
 8103c52:	461a      	mov	r2, r3
 8103c54:	68bb      	ldr	r3, [r7, #8]
 8103c56:	009b      	lsls	r3, r3, #2
 8103c58:	4413      	add	r3, r2
 8103c5a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8103c5c:	697b      	ldr	r3, [r7, #20]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	431a      	orrs	r2, r3
 8103c68:	697b      	ldr	r3, [r7, #20]
 8103c6a:	601a      	str	r2, [r3, #0]
  }
}
 8103c6c:	bf00      	nop
 8103c6e:	371c      	adds	r7, #28
 8103c70:	46bd      	mov	sp, r7
 8103c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c76:	4770      	bx	lr

08103c78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8103c78:	b480      	push	{r7}
 8103c7a:	b083      	sub	sp, #12
 8103c7c:	af00      	add	r7, sp, #0
 8103c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	68db      	ldr	r3, [r3, #12]
 8103c84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8103c88:	2b00      	cmp	r3, #0
 8103c8a:	d101      	bne.n	8103c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8103c8c:	2301      	movs	r3, #1
 8103c8e:	e000      	b.n	8103c92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8103c90:	2300      	movs	r3, #0
}
 8103c92:	4618      	mov	r0, r3
 8103c94:	370c      	adds	r7, #12
 8103c96:	46bd      	mov	sp, r7
 8103c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c9c:	4770      	bx	lr

08103c9e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8103c9e:	b480      	push	{r7}
 8103ca0:	b087      	sub	sp, #28
 8103ca2:	af00      	add	r7, sp, #0
 8103ca4:	60f8      	str	r0, [r7, #12]
 8103ca6:	60b9      	str	r1, [r7, #8]
 8103ca8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8103caa:	68fb      	ldr	r3, [r7, #12]
 8103cac:	3330      	adds	r3, #48	; 0x30
 8103cae:	461a      	mov	r2, r3
 8103cb0:	68bb      	ldr	r3, [r7, #8]
 8103cb2:	0a1b      	lsrs	r3, r3, #8
 8103cb4:	009b      	lsls	r3, r3, #2
 8103cb6:	f003 030c 	and.w	r3, r3, #12
 8103cba:	4413      	add	r3, r2
 8103cbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103cbe:	697b      	ldr	r3, [r7, #20]
 8103cc0:	681a      	ldr	r2, [r3, #0]
 8103cc2:	68bb      	ldr	r3, [r7, #8]
 8103cc4:	f003 031f 	and.w	r3, r3, #31
 8103cc8:	211f      	movs	r1, #31
 8103cca:	fa01 f303 	lsl.w	r3, r1, r3
 8103cce:	43db      	mvns	r3, r3
 8103cd0:	401a      	ands	r2, r3
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	0e9b      	lsrs	r3, r3, #26
 8103cd6:	f003 011f 	and.w	r1, r3, #31
 8103cda:	68bb      	ldr	r3, [r7, #8]
 8103cdc:	f003 031f 	and.w	r3, r3, #31
 8103ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8103ce4:	431a      	orrs	r2, r3
 8103ce6:	697b      	ldr	r3, [r7, #20]
 8103ce8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8103cea:	bf00      	nop
 8103cec:	371c      	adds	r7, #28
 8103cee:	46bd      	mov	sp, r7
 8103cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf4:	4770      	bx	lr

08103cf6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8103cf6:	b480      	push	{r7}
 8103cf8:	b083      	sub	sp, #12
 8103cfa:	af00      	add	r7, sp, #0
 8103cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d02:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8103d06:	2b00      	cmp	r3, #0
 8103d08:	d101      	bne.n	8103d0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8103d0a:	2301      	movs	r3, #1
 8103d0c:	e000      	b.n	8103d10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8103d0e:	2300      	movs	r3, #0
}
 8103d10:	4618      	mov	r0, r3
 8103d12:	370c      	adds	r7, #12
 8103d14:	46bd      	mov	sp, r7
 8103d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d1a:	4770      	bx	lr

08103d1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8103d1c:	b480      	push	{r7}
 8103d1e:	b087      	sub	sp, #28
 8103d20:	af00      	add	r7, sp, #0
 8103d22:	60f8      	str	r0, [r7, #12]
 8103d24:	60b9      	str	r1, [r7, #8]
 8103d26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8103d28:	68fb      	ldr	r3, [r7, #12]
 8103d2a:	3314      	adds	r3, #20
 8103d2c:	461a      	mov	r2, r3
 8103d2e:	68bb      	ldr	r3, [r7, #8]
 8103d30:	0e5b      	lsrs	r3, r3, #25
 8103d32:	009b      	lsls	r3, r3, #2
 8103d34:	f003 0304 	and.w	r3, r3, #4
 8103d38:	4413      	add	r3, r2
 8103d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103d3c:	697b      	ldr	r3, [r7, #20]
 8103d3e:	681a      	ldr	r2, [r3, #0]
 8103d40:	68bb      	ldr	r3, [r7, #8]
 8103d42:	0d1b      	lsrs	r3, r3, #20
 8103d44:	f003 031f 	and.w	r3, r3, #31
 8103d48:	2107      	movs	r1, #7
 8103d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8103d4e:	43db      	mvns	r3, r3
 8103d50:	401a      	ands	r2, r3
 8103d52:	68bb      	ldr	r3, [r7, #8]
 8103d54:	0d1b      	lsrs	r3, r3, #20
 8103d56:	f003 031f 	and.w	r3, r3, #31
 8103d5a:	6879      	ldr	r1, [r7, #4]
 8103d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8103d60:	431a      	orrs	r2, r3
 8103d62:	697b      	ldr	r3, [r7, #20]
 8103d64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8103d66:	bf00      	nop
 8103d68:	371c      	adds	r7, #28
 8103d6a:	46bd      	mov	sp, r7
 8103d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d70:	4770      	bx	lr
	...

08103d74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8103d74:	b480      	push	{r7}
 8103d76:	b085      	sub	sp, #20
 8103d78:	af00      	add	r7, sp, #0
 8103d7a:	60f8      	str	r0, [r7, #12]
 8103d7c:	60b9      	str	r1, [r7, #8]
 8103d7e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8103d80:	68fb      	ldr	r3, [r7, #12]
 8103d82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8103d86:	68bb      	ldr	r3, [r7, #8]
 8103d88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103d8c:	43db      	mvns	r3, r3
 8103d8e:	401a      	ands	r2, r3
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	f003 0318 	and.w	r3, r3, #24
 8103d96:	4908      	ldr	r1, [pc, #32]	; (8103db8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8103d98:	40d9      	lsrs	r1, r3
 8103d9a:	68bb      	ldr	r3, [r7, #8]
 8103d9c:	400b      	ands	r3, r1
 8103d9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103da2:	431a      	orrs	r2, r3
 8103da4:	68fb      	ldr	r3, [r7, #12]
 8103da6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8103daa:	bf00      	nop
 8103dac:	3714      	adds	r7, #20
 8103dae:	46bd      	mov	sp, r7
 8103db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103db4:	4770      	bx	lr
 8103db6:	bf00      	nop
 8103db8:	000fffff 	.word	0x000fffff

08103dbc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103dbc:	b480      	push	{r7}
 8103dbe:	b083      	sub	sp, #12
 8103dc0:	af00      	add	r7, sp, #0
 8103dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	689b      	ldr	r3, [r3, #8]
 8103dc8:	f003 031f 	and.w	r3, r3, #31
}
 8103dcc:	4618      	mov	r0, r3
 8103dce:	370c      	adds	r7, #12
 8103dd0:	46bd      	mov	sp, r7
 8103dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dd6:	4770      	bx	lr

08103dd8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103dd8:	b480      	push	{r7}
 8103dda:	b083      	sub	sp, #12
 8103ddc:	af00      	add	r7, sp, #0
 8103dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	689b      	ldr	r3, [r3, #8]
 8103de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8103de8:	4618      	mov	r0, r3
 8103dea:	370c      	adds	r7, #12
 8103dec:	46bd      	mov	sp, r7
 8103dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103df2:	4770      	bx	lr

08103df4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8103df4:	b480      	push	{r7}
 8103df6:	b083      	sub	sp, #12
 8103df8:	af00      	add	r7, sp, #0
 8103dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	689b      	ldr	r3, [r3, #8]
 8103e00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8103e04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103e08:	687a      	ldr	r2, [r7, #4]
 8103e0a:	6093      	str	r3, [r2, #8]
}
 8103e0c:	bf00      	nop
 8103e0e:	370c      	adds	r7, #12
 8103e10:	46bd      	mov	sp, r7
 8103e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e16:	4770      	bx	lr

08103e18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8103e18:	b480      	push	{r7}
 8103e1a:	b083      	sub	sp, #12
 8103e1c:	af00      	add	r7, sp, #0
 8103e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8103e20:	687b      	ldr	r3, [r7, #4]
 8103e22:	689b      	ldr	r3, [r3, #8]
 8103e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e2c:	d101      	bne.n	8103e32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8103e2e:	2301      	movs	r3, #1
 8103e30:	e000      	b.n	8103e34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8103e32:	2300      	movs	r3, #0
}
 8103e34:	4618      	mov	r0, r3
 8103e36:	370c      	adds	r7, #12
 8103e38:	46bd      	mov	sp, r7
 8103e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e3e:	4770      	bx	lr

08103e40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8103e40:	b480      	push	{r7}
 8103e42:	b083      	sub	sp, #12
 8103e44:	af00      	add	r7, sp, #0
 8103e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	689b      	ldr	r3, [r3, #8]
 8103e4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8103e50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103e54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8103e5c:	bf00      	nop
 8103e5e:	370c      	adds	r7, #12
 8103e60:	46bd      	mov	sp, r7
 8103e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e66:	4770      	bx	lr

08103e68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8103e68:	b480      	push	{r7}
 8103e6a:	b083      	sub	sp, #12
 8103e6c:	af00      	add	r7, sp, #0
 8103e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	689b      	ldr	r3, [r3, #8]
 8103e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103e7c:	d101      	bne.n	8103e82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8103e7e:	2301      	movs	r3, #1
 8103e80:	e000      	b.n	8103e84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8103e82:	2300      	movs	r3, #0
}
 8103e84:	4618      	mov	r0, r3
 8103e86:	370c      	adds	r7, #12
 8103e88:	46bd      	mov	sp, r7
 8103e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e8e:	4770      	bx	lr

08103e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8103e90:	b480      	push	{r7}
 8103e92:	b083      	sub	sp, #12
 8103e94:	af00      	add	r7, sp, #0
 8103e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103e98:	687b      	ldr	r3, [r7, #4]
 8103e9a:	689b      	ldr	r3, [r3, #8]
 8103e9c:	f003 0301 	and.w	r3, r3, #1
 8103ea0:	2b01      	cmp	r3, #1
 8103ea2:	d101      	bne.n	8103ea8 <LL_ADC_IsEnabled+0x18>
 8103ea4:	2301      	movs	r3, #1
 8103ea6:	e000      	b.n	8103eaa <LL_ADC_IsEnabled+0x1a>
 8103ea8:	2300      	movs	r3, #0
}
 8103eaa:	4618      	mov	r0, r3
 8103eac:	370c      	adds	r7, #12
 8103eae:	46bd      	mov	sp, r7
 8103eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eb4:	4770      	bx	lr

08103eb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103eb6:	b480      	push	{r7}
 8103eb8:	b083      	sub	sp, #12
 8103eba:	af00      	add	r7, sp, #0
 8103ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	689b      	ldr	r3, [r3, #8]
 8103ec2:	f003 0304 	and.w	r3, r3, #4
 8103ec6:	2b04      	cmp	r3, #4
 8103ec8:	d101      	bne.n	8103ece <LL_ADC_REG_IsConversionOngoing+0x18>
 8103eca:	2301      	movs	r3, #1
 8103ecc:	e000      	b.n	8103ed0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103ece:	2300      	movs	r3, #0
}
 8103ed0:	4618      	mov	r0, r3
 8103ed2:	370c      	adds	r7, #12
 8103ed4:	46bd      	mov	sp, r7
 8103ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eda:	4770      	bx	lr

08103edc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103edc:	b480      	push	{r7}
 8103ede:	b083      	sub	sp, #12
 8103ee0:	af00      	add	r7, sp, #0
 8103ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	689b      	ldr	r3, [r3, #8]
 8103ee8:	f003 0308 	and.w	r3, r3, #8
 8103eec:	2b08      	cmp	r3, #8
 8103eee:	d101      	bne.n	8103ef4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8103ef0:	2301      	movs	r3, #1
 8103ef2:	e000      	b.n	8103ef6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8103ef4:	2300      	movs	r3, #0
}
 8103ef6:	4618      	mov	r0, r3
 8103ef8:	370c      	adds	r7, #12
 8103efa:	46bd      	mov	sp, r7
 8103efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f00:	4770      	bx	lr
	...

08103f04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8103f04:	b590      	push	{r4, r7, lr}
 8103f06:	b089      	sub	sp, #36	; 0x24
 8103f08:	af00      	add	r7, sp, #0
 8103f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103f0c:	2300      	movs	r3, #0
 8103f0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8103f10:	2300      	movs	r3, #0
 8103f12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	2b00      	cmp	r3, #0
 8103f18:	d101      	bne.n	8103f1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8103f1a:	2301      	movs	r3, #1
 8103f1c:	e18e      	b.n	810423c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	68db      	ldr	r3, [r3, #12]
 8103f22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f28:	2b00      	cmp	r3, #0
 8103f2a:	d109      	bne.n	8103f40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8103f2c:	6878      	ldr	r0, [r7, #4]
 8103f2e:	f7fd f9fd 	bl	810132c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	2200      	movs	r2, #0
 8103f36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	2200      	movs	r2, #0
 8103f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	4618      	mov	r0, r3
 8103f46:	f7ff ff67 	bl	8103e18 <LL_ADC_IsDeepPowerDownEnabled>
 8103f4a:	4603      	mov	r3, r0
 8103f4c:	2b00      	cmp	r3, #0
 8103f4e:	d004      	beq.n	8103f5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	681b      	ldr	r3, [r3, #0]
 8103f54:	4618      	mov	r0, r3
 8103f56:	f7ff ff4d 	bl	8103df4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103f5a:	687b      	ldr	r3, [r7, #4]
 8103f5c:	681b      	ldr	r3, [r3, #0]
 8103f5e:	4618      	mov	r0, r3
 8103f60:	f7ff ff82 	bl	8103e68 <LL_ADC_IsInternalRegulatorEnabled>
 8103f64:	4603      	mov	r3, r0
 8103f66:	2b00      	cmp	r3, #0
 8103f68:	d114      	bne.n	8103f94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	4618      	mov	r0, r3
 8103f70:	f7ff ff66 	bl	8103e40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103f74:	4b9b      	ldr	r3, [pc, #620]	; (81041e4 <HAL_ADC_Init+0x2e0>)
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	099b      	lsrs	r3, r3, #6
 8103f7a:	4a9b      	ldr	r2, [pc, #620]	; (81041e8 <HAL_ADC_Init+0x2e4>)
 8103f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8103f80:	099b      	lsrs	r3, r3, #6
 8103f82:	3301      	adds	r3, #1
 8103f84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103f86:	e002      	b.n	8103f8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8103f88:	68bb      	ldr	r3, [r7, #8]
 8103f8a:	3b01      	subs	r3, #1
 8103f8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103f8e:	68bb      	ldr	r3, [r7, #8]
 8103f90:	2b00      	cmp	r3, #0
 8103f92:	d1f9      	bne.n	8103f88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	4618      	mov	r0, r3
 8103f9a:	f7ff ff65 	bl	8103e68 <LL_ADC_IsInternalRegulatorEnabled>
 8103f9e:	4603      	mov	r3, r0
 8103fa0:	2b00      	cmp	r3, #0
 8103fa2:	d10d      	bne.n	8103fc0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fa8:	f043 0210 	orr.w	r2, r3, #16
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103fb4:	f043 0201 	orr.w	r2, r3, #1
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8103fbc:	2301      	movs	r3, #1
 8103fbe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	4618      	mov	r0, r3
 8103fc6:	f7ff ff76 	bl	8103eb6 <LL_ADC_REG_IsConversionOngoing>
 8103fca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fd0:	f003 0310 	and.w	r3, r3, #16
 8103fd4:	2b00      	cmp	r3, #0
 8103fd6:	f040 8128 	bne.w	810422a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8103fda:	697b      	ldr	r3, [r7, #20]
 8103fdc:	2b00      	cmp	r3, #0
 8103fde:	f040 8124 	bne.w	810422a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fe6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8103fea:	f043 0202 	orr.w	r2, r3, #2
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	4618      	mov	r0, r3
 8103ff8:	f7ff ff4a 	bl	8103e90 <LL_ADC_IsEnabled>
 8103ffc:	4603      	mov	r3, r0
 8103ffe:	2b00      	cmp	r3, #0
 8104000:	d136      	bne.n	8104070 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	4a79      	ldr	r2, [pc, #484]	; (81041ec <HAL_ADC_Init+0x2e8>)
 8104008:	4293      	cmp	r3, r2
 810400a:	d004      	beq.n	8104016 <HAL_ADC_Init+0x112>
 810400c:	687b      	ldr	r3, [r7, #4]
 810400e:	681b      	ldr	r3, [r3, #0]
 8104010:	4a77      	ldr	r2, [pc, #476]	; (81041f0 <HAL_ADC_Init+0x2ec>)
 8104012:	4293      	cmp	r3, r2
 8104014:	d10e      	bne.n	8104034 <HAL_ADC_Init+0x130>
 8104016:	4875      	ldr	r0, [pc, #468]	; (81041ec <HAL_ADC_Init+0x2e8>)
 8104018:	f7ff ff3a 	bl	8103e90 <LL_ADC_IsEnabled>
 810401c:	4604      	mov	r4, r0
 810401e:	4874      	ldr	r0, [pc, #464]	; (81041f0 <HAL_ADC_Init+0x2ec>)
 8104020:	f7ff ff36 	bl	8103e90 <LL_ADC_IsEnabled>
 8104024:	4603      	mov	r3, r0
 8104026:	4323      	orrs	r3, r4
 8104028:	2b00      	cmp	r3, #0
 810402a:	bf0c      	ite	eq
 810402c:	2301      	moveq	r3, #1
 810402e:	2300      	movne	r3, #0
 8104030:	b2db      	uxtb	r3, r3
 8104032:	e008      	b.n	8104046 <HAL_ADC_Init+0x142>
 8104034:	486f      	ldr	r0, [pc, #444]	; (81041f4 <HAL_ADC_Init+0x2f0>)
 8104036:	f7ff ff2b 	bl	8103e90 <LL_ADC_IsEnabled>
 810403a:	4603      	mov	r3, r0
 810403c:	2b00      	cmp	r3, #0
 810403e:	bf0c      	ite	eq
 8104040:	2301      	moveq	r3, #1
 8104042:	2300      	movne	r3, #0
 8104044:	b2db      	uxtb	r3, r3
 8104046:	2b00      	cmp	r3, #0
 8104048:	d012      	beq.n	8104070 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	4a67      	ldr	r2, [pc, #412]	; (81041ec <HAL_ADC_Init+0x2e8>)
 8104050:	4293      	cmp	r3, r2
 8104052:	d004      	beq.n	810405e <HAL_ADC_Init+0x15a>
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	681b      	ldr	r3, [r3, #0]
 8104058:	4a65      	ldr	r2, [pc, #404]	; (81041f0 <HAL_ADC_Init+0x2ec>)
 810405a:	4293      	cmp	r3, r2
 810405c:	d101      	bne.n	8104062 <HAL_ADC_Init+0x15e>
 810405e:	4a66      	ldr	r2, [pc, #408]	; (81041f8 <HAL_ADC_Init+0x2f4>)
 8104060:	e000      	b.n	8104064 <HAL_ADC_Init+0x160>
 8104062:	4a66      	ldr	r2, [pc, #408]	; (81041fc <HAL_ADC_Init+0x2f8>)
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	685b      	ldr	r3, [r3, #4]
 8104068:	4619      	mov	r1, r3
 810406a:	4610      	mov	r0, r2
 810406c:	f7ff fd7c 	bl	8103b68 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8104070:	f7ff fd6e 	bl	8103b50 <HAL_GetREVID>
 8104074:	4603      	mov	r3, r0
 8104076:	f241 0203 	movw	r2, #4099	; 0x1003
 810407a:	4293      	cmp	r3, r2
 810407c:	d914      	bls.n	81040a8 <HAL_ADC_Init+0x1a4>
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	689b      	ldr	r3, [r3, #8]
 8104082:	2b10      	cmp	r3, #16
 8104084:	d110      	bne.n	81040a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	7d5b      	ldrb	r3, [r3, #21]
 810408a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104090:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8104096:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	7f1b      	ldrb	r3, [r3, #28]
 810409c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810409e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81040a0:	f043 030c 	orr.w	r3, r3, #12
 81040a4:	61bb      	str	r3, [r7, #24]
 81040a6:	e00d      	b.n	81040c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	7d5b      	ldrb	r3, [r3, #21]
 81040ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81040b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81040b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	7f1b      	ldrb	r3, [r3, #28]
 81040be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81040c0:	4313      	orrs	r3, r2
 81040c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	7f1b      	ldrb	r3, [r3, #28]
 81040c8:	2b01      	cmp	r3, #1
 81040ca:	d106      	bne.n	81040da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	6a1b      	ldr	r3, [r3, #32]
 81040d0:	3b01      	subs	r3, #1
 81040d2:	045b      	lsls	r3, r3, #17
 81040d4:	69ba      	ldr	r2, [r7, #24]
 81040d6:	4313      	orrs	r3, r2
 81040d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81040da:	687b      	ldr	r3, [r7, #4]
 81040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040de:	2b00      	cmp	r3, #0
 81040e0:	d009      	beq.n	81040f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81040f0:	69ba      	ldr	r2, [r7, #24]
 81040f2:	4313      	orrs	r3, r2
 81040f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	68da      	ldr	r2, [r3, #12]
 81040fc:	4b40      	ldr	r3, [pc, #256]	; (8104200 <HAL_ADC_Init+0x2fc>)
 81040fe:	4013      	ands	r3, r2
 8104100:	687a      	ldr	r2, [r7, #4]
 8104102:	6812      	ldr	r2, [r2, #0]
 8104104:	69b9      	ldr	r1, [r7, #24]
 8104106:	430b      	orrs	r3, r1
 8104108:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4618      	mov	r0, r3
 8104110:	f7ff fed1 	bl	8103eb6 <LL_ADC_REG_IsConversionOngoing>
 8104114:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104116:	687b      	ldr	r3, [r7, #4]
 8104118:	681b      	ldr	r3, [r3, #0]
 810411a:	4618      	mov	r0, r3
 810411c:	f7ff fede 	bl	8103edc <LL_ADC_INJ_IsConversionOngoing>
 8104120:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8104122:	693b      	ldr	r3, [r7, #16]
 8104124:	2b00      	cmp	r3, #0
 8104126:	d14c      	bne.n	81041c2 <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8104128:	68fb      	ldr	r3, [r7, #12]
 810412a:	2b00      	cmp	r3, #0
 810412c:	d149      	bne.n	81041c2 <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	7d1b      	ldrb	r3, [r3, #20]
 8104132:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8104138:	4313      	orrs	r3, r2
 810413a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	68db      	ldr	r3, [r3, #12]
 8104142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8104146:	f023 0303 	bic.w	r3, r3, #3
 810414a:	687a      	ldr	r2, [r7, #4]
 810414c:	6812      	ldr	r2, [r2, #0]
 810414e:	69b9      	ldr	r1, [r7, #24]
 8104150:	430b      	orrs	r3, r1
 8104152:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810415a:	2b01      	cmp	r3, #1
 810415c:	d11b      	bne.n	8104196 <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104162:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	681b      	ldr	r3, [r3, #0]
 8104168:	691a      	ldr	r2, [r3, #16]
 810416a:	4b26      	ldr	r3, [pc, #152]	; (8104204 <HAL_ADC_Init+0x300>)
 810416c:	4013      	ands	r3, r2
 810416e:	687a      	ldr	r2, [r7, #4]
 8104170:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8104172:	3a01      	subs	r2, #1
 8104174:	0411      	lsls	r1, r2, #16
 8104176:	687a      	ldr	r2, [r7, #4]
 8104178:	6c12      	ldr	r2, [r2, #64]	; 0x40
 810417a:	4311      	orrs	r1, r2
 810417c:	687a      	ldr	r2, [r7, #4]
 810417e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8104180:	4311      	orrs	r1, r2
 8104182:	687a      	ldr	r2, [r7, #4]
 8104184:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8104186:	430a      	orrs	r2, r1
 8104188:	431a      	orrs	r2, r3
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	f042 0201 	orr.w	r2, r2, #1
 8104192:	611a      	str	r2, [r3, #16]
 8104194:	e007      	b.n	81041a6 <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	681b      	ldr	r3, [r3, #0]
 810419a:	691a      	ldr	r2, [r3, #16]
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	681b      	ldr	r3, [r3, #0]
 81041a0:	f022 0201 	bic.w	r2, r2, #1
 81041a4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	681b      	ldr	r3, [r3, #0]
 81041aa:	691b      	ldr	r3, [r3, #16]
 81041ac:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	681b      	ldr	r3, [r3, #0]
 81041b8:	430a      	orrs	r2, r1
 81041ba:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81041bc:	6878      	ldr	r0, [r7, #4]
 81041be:	f000 fde9 	bl	8104d94 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81041c2:	687b      	ldr	r3, [r7, #4]
 81041c4:	68db      	ldr	r3, [r3, #12]
 81041c6:	2b01      	cmp	r3, #1
 81041c8:	d11e      	bne.n	8104208 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	681b      	ldr	r3, [r3, #0]
 81041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81041d0:	f023 010f 	bic.w	r1, r3, #15
 81041d4:	687b      	ldr	r3, [r7, #4]
 81041d6:	699b      	ldr	r3, [r3, #24]
 81041d8:	1e5a      	subs	r2, r3, #1
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	681b      	ldr	r3, [r3, #0]
 81041de:	430a      	orrs	r2, r1
 81041e0:	631a      	str	r2, [r3, #48]	; 0x30
 81041e2:	e019      	b.n	8104218 <HAL_ADC_Init+0x314>
 81041e4:	10000000 	.word	0x10000000
 81041e8:	053e2d63 	.word	0x053e2d63
 81041ec:	40022000 	.word	0x40022000
 81041f0:	40022100 	.word	0x40022100
 81041f4:	58026000 	.word	0x58026000
 81041f8:	40022300 	.word	0x40022300
 81041fc:	58026300 	.word	0x58026300
 8104200:	fff0c003 	.word	0xfff0c003
 8104204:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	f022 020f 	bic.w	r2, r2, #15
 8104216:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810421c:	f023 0303 	bic.w	r3, r3, #3
 8104220:	f043 0201 	orr.w	r2, r3, #1
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	655a      	str	r2, [r3, #84]	; 0x54
 8104228:	e007      	b.n	810423a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810422e:	f043 0210 	orr.w	r2, r3, #16
 8104232:	687b      	ldr	r3, [r7, #4]
 8104234:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8104236:	2301      	movs	r3, #1
 8104238:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 810423a:	7ffb      	ldrb	r3, [r7, #31]
}
 810423c:	4618      	mov	r0, r3
 810423e:	3724      	adds	r7, #36	; 0x24
 8104240:	46bd      	mov	sp, r7
 8104242:	bd90      	pop	{r4, r7, pc}

08104244 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8104244:	b580      	push	{r7, lr}
 8104246:	b08a      	sub	sp, #40	; 0x28
 8104248:	af00      	add	r7, sp, #0
 810424a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 810424c:	2300      	movs	r3, #0
 810424e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	681b      	ldr	r3, [r3, #0]
 810425c:	685b      	ldr	r3, [r3, #4]
 810425e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	4a87      	ldr	r2, [pc, #540]	; (8104484 <HAL_ADC_IRQHandler+0x240>)
 8104266:	4293      	cmp	r3, r2
 8104268:	d004      	beq.n	8104274 <HAL_ADC_IRQHandler+0x30>
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	4a86      	ldr	r2, [pc, #536]	; (8104488 <HAL_ADC_IRQHandler+0x244>)
 8104270:	4293      	cmp	r3, r2
 8104272:	d101      	bne.n	8104278 <HAL_ADC_IRQHandler+0x34>
 8104274:	4b85      	ldr	r3, [pc, #532]	; (810448c <HAL_ADC_IRQHandler+0x248>)
 8104276:	e000      	b.n	810427a <HAL_ADC_IRQHandler+0x36>
 8104278:	4b85      	ldr	r3, [pc, #532]	; (8104490 <HAL_ADC_IRQHandler+0x24c>)
 810427a:	4618      	mov	r0, r3
 810427c:	f7ff fd9e 	bl	8103dbc <LL_ADC_GetMultimode>
 8104280:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8104282:	69fb      	ldr	r3, [r7, #28]
 8104284:	f003 0302 	and.w	r3, r3, #2
 8104288:	2b00      	cmp	r3, #0
 810428a:	d017      	beq.n	81042bc <HAL_ADC_IRQHandler+0x78>
 810428c:	69bb      	ldr	r3, [r7, #24]
 810428e:	f003 0302 	and.w	r3, r3, #2
 8104292:	2b00      	cmp	r3, #0
 8104294:	d012      	beq.n	81042bc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810429a:	f003 0310 	and.w	r3, r3, #16
 810429e:	2b00      	cmp	r3, #0
 81042a0:	d105      	bne.n	81042ae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042a6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 81042ae:	6878      	ldr	r0, [r7, #4]
 81042b0:	f000 fec8 	bl	8105044 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	681b      	ldr	r3, [r3, #0]
 81042b8:	2202      	movs	r2, #2
 81042ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81042bc:	69fb      	ldr	r3, [r7, #28]
 81042be:	f003 0304 	and.w	r3, r3, #4
 81042c2:	2b00      	cmp	r3, #0
 81042c4:	d004      	beq.n	81042d0 <HAL_ADC_IRQHandler+0x8c>
 81042c6:	69bb      	ldr	r3, [r7, #24]
 81042c8:	f003 0304 	and.w	r3, r3, #4
 81042cc:	2b00      	cmp	r3, #0
 81042ce:	d10a      	bne.n	81042e6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 81042d0:	69fb      	ldr	r3, [r7, #28]
 81042d2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	f000 8083 	beq.w	81043e2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 81042dc:	69bb      	ldr	r3, [r7, #24]
 81042de:	f003 0308 	and.w	r3, r3, #8
 81042e2:	2b00      	cmp	r3, #0
 81042e4:	d07d      	beq.n	81043e2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042ea:	f003 0310 	and.w	r3, r3, #16
 81042ee:	2b00      	cmp	r3, #0
 81042f0:	d105      	bne.n	81042fe <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	4618      	mov	r0, r3
 8104304:	f7ff fcb8 	bl	8103c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8104308:	4603      	mov	r3, r0
 810430a:	2b00      	cmp	r3, #0
 810430c:	d062      	beq.n	81043d4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	4a5d      	ldr	r2, [pc, #372]	; (8104488 <HAL_ADC_IRQHandler+0x244>)
 8104314:	4293      	cmp	r3, r2
 8104316:	d002      	beq.n	810431e <HAL_ADC_IRQHandler+0xda>
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	e000      	b.n	8104320 <HAL_ADC_IRQHandler+0xdc>
 810431e:	4b59      	ldr	r3, [pc, #356]	; (8104484 <HAL_ADC_IRQHandler+0x240>)
 8104320:	687a      	ldr	r2, [r7, #4]
 8104322:	6812      	ldr	r2, [r2, #0]
 8104324:	4293      	cmp	r3, r2
 8104326:	d008      	beq.n	810433a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104328:	697b      	ldr	r3, [r7, #20]
 810432a:	2b00      	cmp	r3, #0
 810432c:	d005      	beq.n	810433a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810432e:	697b      	ldr	r3, [r7, #20]
 8104330:	2b05      	cmp	r3, #5
 8104332:	d002      	beq.n	810433a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104334:	697b      	ldr	r3, [r7, #20]
 8104336:	2b09      	cmp	r3, #9
 8104338:	d104      	bne.n	8104344 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 810433a:	687b      	ldr	r3, [r7, #4]
 810433c:	681b      	ldr	r3, [r3, #0]
 810433e:	68db      	ldr	r3, [r3, #12]
 8104340:	623b      	str	r3, [r7, #32]
 8104342:	e00c      	b.n	810435e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	4a4f      	ldr	r2, [pc, #316]	; (8104488 <HAL_ADC_IRQHandler+0x244>)
 810434a:	4293      	cmp	r3, r2
 810434c:	d002      	beq.n	8104354 <HAL_ADC_IRQHandler+0x110>
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	681b      	ldr	r3, [r3, #0]
 8104352:	e000      	b.n	8104356 <HAL_ADC_IRQHandler+0x112>
 8104354:	4b4b      	ldr	r3, [pc, #300]	; (8104484 <HAL_ADC_IRQHandler+0x240>)
 8104356:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8104358:	693b      	ldr	r3, [r7, #16]
 810435a:	68db      	ldr	r3, [r3, #12]
 810435c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 810435e:	6a3b      	ldr	r3, [r7, #32]
 8104360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8104364:	2b00      	cmp	r3, #0
 8104366:	d135      	bne.n	81043d4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	681b      	ldr	r3, [r3, #0]
 810436e:	f003 0308 	and.w	r3, r3, #8
 8104372:	2b08      	cmp	r3, #8
 8104374:	d12e      	bne.n	81043d4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	681b      	ldr	r3, [r3, #0]
 810437a:	4618      	mov	r0, r3
 810437c:	f7ff fd9b 	bl	8103eb6 <LL_ADC_REG_IsConversionOngoing>
 8104380:	4603      	mov	r3, r0
 8104382:	2b00      	cmp	r3, #0
 8104384:	d11a      	bne.n	81043bc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	685a      	ldr	r2, [r3, #4]
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	f022 020c 	bic.w	r2, r2, #12
 8104394:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810439a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81043aa:	2b00      	cmp	r3, #0
 81043ac:	d112      	bne.n	81043d4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043b2:	f043 0201 	orr.w	r2, r3, #1
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	655a      	str	r2, [r3, #84]	; 0x54
 81043ba:	e00b      	b.n	81043d4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043c0:	f043 0210 	orr.w	r2, r3, #16
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043cc:	f043 0201 	orr.w	r2, r3, #1
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 81043d4:	6878      	ldr	r0, [r7, #4]
 81043d6:	f000 f96f 	bl	81046b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	220c      	movs	r2, #12
 81043e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 81043e2:	69fb      	ldr	r3, [r7, #28]
 81043e4:	f003 0320 	and.w	r3, r3, #32
 81043e8:	2b00      	cmp	r3, #0
 81043ea:	d004      	beq.n	81043f6 <HAL_ADC_IRQHandler+0x1b2>
 81043ec:	69bb      	ldr	r3, [r7, #24]
 81043ee:	f003 0320 	and.w	r3, r3, #32
 81043f2:	2b00      	cmp	r3, #0
 81043f4:	d10b      	bne.n	810440e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81043f6:	69fb      	ldr	r3, [r7, #28]
 81043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 81043fc:	2b00      	cmp	r3, #0
 81043fe:	f000 80a0 	beq.w	8104542 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8104402:	69bb      	ldr	r3, [r7, #24]
 8104404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104408:	2b00      	cmp	r3, #0
 810440a:	f000 809a 	beq.w	8104542 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104412:	f003 0310 	and.w	r3, r3, #16
 8104416:	2b00      	cmp	r3, #0
 8104418:	d105      	bne.n	8104426 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810441e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	4618      	mov	r0, r3
 810442c:	f7ff fc63 	bl	8103cf6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8104430:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	681b      	ldr	r3, [r3, #0]
 8104436:	4618      	mov	r0, r3
 8104438:	f7ff fc1e 	bl	8103c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 810443c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	4a11      	ldr	r2, [pc, #68]	; (8104488 <HAL_ADC_IRQHandler+0x244>)
 8104444:	4293      	cmp	r3, r2
 8104446:	d002      	beq.n	810444e <HAL_ADC_IRQHandler+0x20a>
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	e000      	b.n	8104450 <HAL_ADC_IRQHandler+0x20c>
 810444e:	4b0d      	ldr	r3, [pc, #52]	; (8104484 <HAL_ADC_IRQHandler+0x240>)
 8104450:	687a      	ldr	r2, [r7, #4]
 8104452:	6812      	ldr	r2, [r2, #0]
 8104454:	4293      	cmp	r3, r2
 8104456:	d008      	beq.n	810446a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104458:	697b      	ldr	r3, [r7, #20]
 810445a:	2b00      	cmp	r3, #0
 810445c:	d005      	beq.n	810446a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 810445e:	697b      	ldr	r3, [r7, #20]
 8104460:	2b06      	cmp	r3, #6
 8104462:	d002      	beq.n	810446a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8104464:	697b      	ldr	r3, [r7, #20]
 8104466:	2b07      	cmp	r3, #7
 8104468:	d104      	bne.n	8104474 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 810446a:	687b      	ldr	r3, [r7, #4]
 810446c:	681b      	ldr	r3, [r3, #0]
 810446e:	68db      	ldr	r3, [r3, #12]
 8104470:	623b      	str	r3, [r7, #32]
 8104472:	e014      	b.n	810449e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	4a03      	ldr	r2, [pc, #12]	; (8104488 <HAL_ADC_IRQHandler+0x244>)
 810447a:	4293      	cmp	r3, r2
 810447c:	d00a      	beq.n	8104494 <HAL_ADC_IRQHandler+0x250>
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	e008      	b.n	8104496 <HAL_ADC_IRQHandler+0x252>
 8104484:	40022000 	.word	0x40022000
 8104488:	40022100 	.word	0x40022100
 810448c:	40022300 	.word	0x40022300
 8104490:	58026300 	.word	0x58026300
 8104494:	4b84      	ldr	r3, [pc, #528]	; (81046a8 <HAL_ADC_IRQHandler+0x464>)
 8104496:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8104498:	693b      	ldr	r3, [r7, #16]
 810449a:	68db      	ldr	r3, [r3, #12]
 810449c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 810449e:	68fb      	ldr	r3, [r7, #12]
 81044a0:	2b00      	cmp	r3, #0
 81044a2:	d10c      	bne.n	81044be <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 81044a4:	6a3b      	ldr	r3, [r7, #32]
 81044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 81044aa:	2b00      	cmp	r3, #0
 81044ac:	d142      	bne.n	8104534 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 81044ae:	68bb      	ldr	r3, [r7, #8]
 81044b0:	2b00      	cmp	r3, #0
 81044b2:	d03f      	beq.n	8104534 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 81044b4:	6a3b      	ldr	r3, [r7, #32]
 81044b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 81044ba:	2b00      	cmp	r3, #0
 81044bc:	d13a      	bne.n	8104534 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 81044be:	687b      	ldr	r3, [r7, #4]
 81044c0:	681b      	ldr	r3, [r3, #0]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81044c8:	2b40      	cmp	r3, #64	; 0x40
 81044ca:	d133      	bne.n	8104534 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 81044cc:	6a3b      	ldr	r3, [r7, #32]
 81044ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81044d2:	2b00      	cmp	r3, #0
 81044d4:	d12e      	bne.n	8104534 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	681b      	ldr	r3, [r3, #0]
 81044da:	4618      	mov	r0, r3
 81044dc:	f7ff fcfe 	bl	8103edc <LL_ADC_INJ_IsConversionOngoing>
 81044e0:	4603      	mov	r3, r0
 81044e2:	2b00      	cmp	r3, #0
 81044e4:	d11a      	bne.n	810451c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	681b      	ldr	r3, [r3, #0]
 81044ea:	685a      	ldr	r2, [r3, #4]
 81044ec:	687b      	ldr	r3, [r7, #4]
 81044ee:	681b      	ldr	r3, [r3, #0]
 81044f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 81044f4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 81044f6:	687b      	ldr	r3, [r7, #4]
 81044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81044fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810450a:	2b00      	cmp	r3, #0
 810450c:	d112      	bne.n	8104534 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104512:	f043 0201 	orr.w	r2, r3, #1
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	655a      	str	r2, [r3, #84]	; 0x54
 810451a:	e00b      	b.n	8104534 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104520:	f043 0210 	orr.w	r2, r3, #16
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810452c:	f043 0201 	orr.w	r2, r3, #1
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8104534:	6878      	ldr	r0, [r7, #4]
 8104536:	f000 fd5d 	bl	8104ff4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	2260      	movs	r2, #96	; 0x60
 8104540:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8104542:	69fb      	ldr	r3, [r7, #28]
 8104544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104548:	2b00      	cmp	r3, #0
 810454a:	d011      	beq.n	8104570 <HAL_ADC_IRQHandler+0x32c>
 810454c:	69bb      	ldr	r3, [r7, #24]
 810454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104552:	2b00      	cmp	r3, #0
 8104554:	d00c      	beq.n	8104570 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810455a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8104562:	6878      	ldr	r0, [r7, #4]
 8104564:	f000 f8b2 	bl	81046cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	2280      	movs	r2, #128	; 0x80
 810456e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8104570:	69fb      	ldr	r3, [r7, #28]
 8104572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104576:	2b00      	cmp	r3, #0
 8104578:	d012      	beq.n	81045a0 <HAL_ADC_IRQHandler+0x35c>
 810457a:	69bb      	ldr	r3, [r7, #24]
 810457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104580:	2b00      	cmp	r3, #0
 8104582:	d00d      	beq.n	81045a0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104588:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8104590:	6878      	ldr	r0, [r7, #4]
 8104592:	f000 fd43 	bl	810501c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	681b      	ldr	r3, [r3, #0]
 810459a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810459e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 81045a0:	69fb      	ldr	r3, [r7, #28]
 81045a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81045a6:	2b00      	cmp	r3, #0
 81045a8:	d012      	beq.n	81045d0 <HAL_ADC_IRQHandler+0x38c>
 81045aa:	69bb      	ldr	r3, [r7, #24]
 81045ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81045b0:	2b00      	cmp	r3, #0
 81045b2:	d00d      	beq.n	81045d0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81045b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 81045c0:	6878      	ldr	r0, [r7, #4]
 81045c2:	f000 fd35 	bl	8105030 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	681b      	ldr	r3, [r3, #0]
 81045ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 81045ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 81045d0:	69fb      	ldr	r3, [r7, #28]
 81045d2:	f003 0310 	and.w	r3, r3, #16
 81045d6:	2b00      	cmp	r3, #0
 81045d8:	d043      	beq.n	8104662 <HAL_ADC_IRQHandler+0x41e>
 81045da:	69bb      	ldr	r3, [r7, #24]
 81045dc:	f003 0310 	and.w	r3, r3, #16
 81045e0:	2b00      	cmp	r3, #0
 81045e2:	d03e      	beq.n	8104662 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81045e8:	2b00      	cmp	r3, #0
 81045ea:	d102      	bne.n	81045f2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 81045ec:	2301      	movs	r3, #1
 81045ee:	627b      	str	r3, [r7, #36]	; 0x24
 81045f0:	e021      	b.n	8104636 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 81045f2:	697b      	ldr	r3, [r7, #20]
 81045f4:	2b00      	cmp	r3, #0
 81045f6:	d015      	beq.n	8104624 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 81045f8:	687b      	ldr	r3, [r7, #4]
 81045fa:	681b      	ldr	r3, [r3, #0]
 81045fc:	4a2a      	ldr	r2, [pc, #168]	; (81046a8 <HAL_ADC_IRQHandler+0x464>)
 81045fe:	4293      	cmp	r3, r2
 8104600:	d004      	beq.n	810460c <HAL_ADC_IRQHandler+0x3c8>
 8104602:	687b      	ldr	r3, [r7, #4]
 8104604:	681b      	ldr	r3, [r3, #0]
 8104606:	4a29      	ldr	r2, [pc, #164]	; (81046ac <HAL_ADC_IRQHandler+0x468>)
 8104608:	4293      	cmp	r3, r2
 810460a:	d101      	bne.n	8104610 <HAL_ADC_IRQHandler+0x3cc>
 810460c:	4b28      	ldr	r3, [pc, #160]	; (81046b0 <HAL_ADC_IRQHandler+0x46c>)
 810460e:	e000      	b.n	8104612 <HAL_ADC_IRQHandler+0x3ce>
 8104610:	4b28      	ldr	r3, [pc, #160]	; (81046b4 <HAL_ADC_IRQHandler+0x470>)
 8104612:	4618      	mov	r0, r3
 8104614:	f7ff fbe0 	bl	8103dd8 <LL_ADC_GetMultiDMATransfer>
 8104618:	4603      	mov	r3, r0
 810461a:	2b00      	cmp	r3, #0
 810461c:	d00b      	beq.n	8104636 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 810461e:	2301      	movs	r3, #1
 8104620:	627b      	str	r3, [r7, #36]	; 0x24
 8104622:	e008      	b.n	8104636 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	68db      	ldr	r3, [r3, #12]
 810462a:	f003 0303 	and.w	r3, r3, #3
 810462e:	2b00      	cmp	r3, #0
 8104630:	d001      	beq.n	8104636 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8104632:	2301      	movs	r3, #1
 8104634:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8104636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104638:	2b01      	cmp	r3, #1
 810463a:	d10e      	bne.n	810465a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8104648:	687b      	ldr	r3, [r7, #4]
 810464a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810464c:	f043 0202 	orr.w	r2, r3, #2
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8104654:	6878      	ldr	r0, [r7, #4]
 8104656:	f000 f843 	bl	81046e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	2210      	movs	r2, #16
 8104660:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8104662:	69fb      	ldr	r3, [r7, #28]
 8104664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104668:	2b00      	cmp	r3, #0
 810466a:	d018      	beq.n	810469e <HAL_ADC_IRQHandler+0x45a>
 810466c:	69bb      	ldr	r3, [r7, #24]
 810466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104672:	2b00      	cmp	r3, #0
 8104674:	d013      	beq.n	810469e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810467a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104686:	f043 0208 	orr.w	r2, r3, #8
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	681b      	ldr	r3, [r3, #0]
 8104692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104696:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8104698:	6878      	ldr	r0, [r7, #4]
 810469a:	f000 fcb5 	bl	8105008 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 810469e:	bf00      	nop
 81046a0:	3728      	adds	r7, #40	; 0x28
 81046a2:	46bd      	mov	sp, r7
 81046a4:	bd80      	pop	{r7, pc}
 81046a6:	bf00      	nop
 81046a8:	40022000 	.word	0x40022000
 81046ac:	40022100 	.word	0x40022100
 81046b0:	40022300 	.word	0x40022300
 81046b4:	58026300 	.word	0x58026300

081046b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 81046b8:	b480      	push	{r7}
 81046ba:	b083      	sub	sp, #12
 81046bc:	af00      	add	r7, sp, #0
 81046be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 81046c0:	bf00      	nop
 81046c2:	370c      	adds	r7, #12
 81046c4:	46bd      	mov	sp, r7
 81046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046ca:	4770      	bx	lr

081046cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 81046cc:	b480      	push	{r7}
 81046ce:	b083      	sub	sp, #12
 81046d0:	af00      	add	r7, sp, #0
 81046d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 81046d4:	bf00      	nop
 81046d6:	370c      	adds	r7, #12
 81046d8:	46bd      	mov	sp, r7
 81046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046de:	4770      	bx	lr

081046e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 81046e0:	b480      	push	{r7}
 81046e2:	b083      	sub	sp, #12
 81046e4:	af00      	add	r7, sp, #0
 81046e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 81046e8:	bf00      	nop
 81046ea:	370c      	adds	r7, #12
 81046ec:	46bd      	mov	sp, r7
 81046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046f2:	4770      	bx	lr

081046f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81046f4:	b590      	push	{r4, r7, lr}
 81046f6:	b0a1      	sub	sp, #132	; 0x84
 81046f8:	af00      	add	r7, sp, #0
 81046fa:	6078      	str	r0, [r7, #4]
 81046fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81046fe:	2300      	movs	r3, #0
 8104700:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8104704:	2300      	movs	r3, #0
 8104706:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8104708:	683b      	ldr	r3, [r7, #0]
 810470a:	68db      	ldr	r3, [r3, #12]
 810470c:	4a9d      	ldr	r2, [pc, #628]	; (8104984 <HAL_ADC_ConfigChannel+0x290>)
 810470e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8104716:	2b01      	cmp	r3, #1
 8104718:	d101      	bne.n	810471e <HAL_ADC_ConfigChannel+0x2a>
 810471a:	2302      	movs	r3, #2
 810471c:	e321      	b.n	8104d62 <HAL_ADC_ConfigChannel+0x66e>
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	2201      	movs	r2, #1
 8104722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	4618      	mov	r0, r3
 810472c:	f7ff fbc3 	bl	8103eb6 <LL_ADC_REG_IsConversionOngoing>
 8104730:	4603      	mov	r3, r0
 8104732:	2b00      	cmp	r3, #0
 8104734:	f040 8306 	bne.w	8104d44 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8104738:	683b      	ldr	r3, [r7, #0]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104740:	2b00      	cmp	r3, #0
 8104742:	d108      	bne.n	8104756 <HAL_ADC_ConfigChannel+0x62>
 8104744:	683b      	ldr	r3, [r7, #0]
 8104746:	681b      	ldr	r3, [r3, #0]
 8104748:	0e9b      	lsrs	r3, r3, #26
 810474a:	f003 031f 	and.w	r3, r3, #31
 810474e:	2201      	movs	r2, #1
 8104750:	fa02 f303 	lsl.w	r3, r2, r3
 8104754:	e016      	b.n	8104784 <HAL_ADC_ConfigChannel+0x90>
 8104756:	683b      	ldr	r3, [r7, #0]
 8104758:	681b      	ldr	r3, [r3, #0]
 810475a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810475c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810475e:	fa93 f3a3 	rbit	r3, r3
 8104762:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8104764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8104766:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8104768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810476a:	2b00      	cmp	r3, #0
 810476c:	d101      	bne.n	8104772 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 810476e:	2320      	movs	r3, #32
 8104770:	e003      	b.n	810477a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8104772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104774:	fab3 f383 	clz	r3, r3
 8104778:	b2db      	uxtb	r3, r3
 810477a:	f003 031f 	and.w	r3, r3, #31
 810477e:	2201      	movs	r2, #1
 8104780:	fa02 f303 	lsl.w	r3, r2, r3
 8104784:	687a      	ldr	r2, [r7, #4]
 8104786:	6812      	ldr	r2, [r2, #0]
 8104788:	69d1      	ldr	r1, [r2, #28]
 810478a:	687a      	ldr	r2, [r7, #4]
 810478c:	6812      	ldr	r2, [r2, #0]
 810478e:	430b      	orrs	r3, r1
 8104790:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	6818      	ldr	r0, [r3, #0]
 8104796:	683b      	ldr	r3, [r7, #0]
 8104798:	6859      	ldr	r1, [r3, #4]
 810479a:	683b      	ldr	r3, [r7, #0]
 810479c:	681b      	ldr	r3, [r3, #0]
 810479e:	461a      	mov	r2, r3
 81047a0:	f7ff fa7d 	bl	8103c9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	681b      	ldr	r3, [r3, #0]
 81047a8:	4618      	mov	r0, r3
 81047aa:	f7ff fb84 	bl	8103eb6 <LL_ADC_REG_IsConversionOngoing>
 81047ae:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81047b0:	687b      	ldr	r3, [r7, #4]
 81047b2:	681b      	ldr	r3, [r3, #0]
 81047b4:	4618      	mov	r0, r3
 81047b6:	f7ff fb91 	bl	8103edc <LL_ADC_INJ_IsConversionOngoing>
 81047ba:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81047bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81047be:	2b00      	cmp	r3, #0
 81047c0:	f040 80b3 	bne.w	810492a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81047c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81047c6:	2b00      	cmp	r3, #0
 81047c8:	f040 80af 	bne.w	810492a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	6818      	ldr	r0, [r3, #0]
 81047d0:	683b      	ldr	r3, [r7, #0]
 81047d2:	6819      	ldr	r1, [r3, #0]
 81047d4:	683b      	ldr	r3, [r7, #0]
 81047d6:	689b      	ldr	r3, [r3, #8]
 81047d8:	461a      	mov	r2, r3
 81047da:	f7ff fa9f 	bl	8103d1c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81047de:	4b6a      	ldr	r3, [pc, #424]	; (8104988 <HAL_ADC_ConfigChannel+0x294>)
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 81047e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81047ea:	d10b      	bne.n	8104804 <HAL_ADC_ConfigChannel+0x110>
 81047ec:	683b      	ldr	r3, [r7, #0]
 81047ee:	695a      	ldr	r2, [r3, #20]
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	68db      	ldr	r3, [r3, #12]
 81047f6:	089b      	lsrs	r3, r3, #2
 81047f8:	f003 0307 	and.w	r3, r3, #7
 81047fc:	005b      	lsls	r3, r3, #1
 81047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8104802:	e01d      	b.n	8104840 <HAL_ADC_ConfigChannel+0x14c>
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	68db      	ldr	r3, [r3, #12]
 810480a:	f003 0310 	and.w	r3, r3, #16
 810480e:	2b00      	cmp	r3, #0
 8104810:	d10b      	bne.n	810482a <HAL_ADC_ConfigChannel+0x136>
 8104812:	683b      	ldr	r3, [r7, #0]
 8104814:	695a      	ldr	r2, [r3, #20]
 8104816:	687b      	ldr	r3, [r7, #4]
 8104818:	681b      	ldr	r3, [r3, #0]
 810481a:	68db      	ldr	r3, [r3, #12]
 810481c:	089b      	lsrs	r3, r3, #2
 810481e:	f003 0307 	and.w	r3, r3, #7
 8104822:	005b      	lsls	r3, r3, #1
 8104824:	fa02 f303 	lsl.w	r3, r2, r3
 8104828:	e00a      	b.n	8104840 <HAL_ADC_ConfigChannel+0x14c>
 810482a:	683b      	ldr	r3, [r7, #0]
 810482c:	695a      	ldr	r2, [r3, #20]
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	68db      	ldr	r3, [r3, #12]
 8104834:	089b      	lsrs	r3, r3, #2
 8104836:	f003 0304 	and.w	r3, r3, #4
 810483a:	005b      	lsls	r3, r3, #1
 810483c:	fa02 f303 	lsl.w	r3, r2, r3
 8104840:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8104842:	683b      	ldr	r3, [r7, #0]
 8104844:	691b      	ldr	r3, [r3, #16]
 8104846:	2b04      	cmp	r3, #4
 8104848:	d027      	beq.n	810489a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	6818      	ldr	r0, [r3, #0]
 810484e:	683b      	ldr	r3, [r7, #0]
 8104850:	6919      	ldr	r1, [r3, #16]
 8104852:	683b      	ldr	r3, [r7, #0]
 8104854:	681a      	ldr	r2, [r3, #0]
 8104856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104858:	f7ff f9ba 	bl	8103bd0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	6818      	ldr	r0, [r3, #0]
 8104860:	683b      	ldr	r3, [r7, #0]
 8104862:	6919      	ldr	r1, [r3, #16]
 8104864:	683b      	ldr	r3, [r7, #0]
 8104866:	7e5b      	ldrb	r3, [r3, #25]
 8104868:	2b01      	cmp	r3, #1
 810486a:	d102      	bne.n	8104872 <HAL_ADC_ConfigChannel+0x17e>
 810486c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8104870:	e000      	b.n	8104874 <HAL_ADC_ConfigChannel+0x180>
 8104872:	2300      	movs	r3, #0
 8104874:	461a      	mov	r2, r3
 8104876:	f7ff f9e4 	bl	8103c42 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	6818      	ldr	r0, [r3, #0]
 810487e:	683b      	ldr	r3, [r7, #0]
 8104880:	6919      	ldr	r1, [r3, #16]
 8104882:	683b      	ldr	r3, [r7, #0]
 8104884:	7e1b      	ldrb	r3, [r3, #24]
 8104886:	2b01      	cmp	r3, #1
 8104888:	d102      	bne.n	8104890 <HAL_ADC_ConfigChannel+0x19c>
 810488a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810488e:	e000      	b.n	8104892 <HAL_ADC_ConfigChannel+0x19e>
 8104890:	2300      	movs	r3, #0
 8104892:	461a      	mov	r2, r3
 8104894:	f7ff f9bc 	bl	8103c10 <LL_ADC_SetDataRightShift>
 8104898:	e047      	b.n	810492a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810489a:	687b      	ldr	r3, [r7, #4]
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81048a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81048a4:	683b      	ldr	r3, [r7, #0]
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	069b      	lsls	r3, r3, #26
 81048aa:	429a      	cmp	r2, r3
 81048ac:	d107      	bne.n	81048be <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81048bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81048c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81048c8:	683b      	ldr	r3, [r7, #0]
 81048ca:	681b      	ldr	r3, [r3, #0]
 81048cc:	069b      	lsls	r3, r3, #26
 81048ce:	429a      	cmp	r2, r3
 81048d0:	d107      	bne.n	81048e2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	681b      	ldr	r3, [r3, #0]
 81048dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81048e0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	681b      	ldr	r3, [r3, #0]
 81048e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81048e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81048ec:	683b      	ldr	r3, [r7, #0]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	069b      	lsls	r3, r3, #26
 81048f2:	429a      	cmp	r2, r3
 81048f4:	d107      	bne.n	8104906 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	681b      	ldr	r3, [r3, #0]
 81048fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8104904:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810490c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8104910:	683b      	ldr	r3, [r7, #0]
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	069b      	lsls	r3, r3, #26
 8104916:	429a      	cmp	r2, r3
 8104918:	d107      	bne.n	810492a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 810491a:	687b      	ldr	r3, [r7, #4]
 810491c:	681b      	ldr	r3, [r3, #0]
 810491e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	681b      	ldr	r3, [r3, #0]
 8104924:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8104928:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	681b      	ldr	r3, [r3, #0]
 810492e:	4618      	mov	r0, r3
 8104930:	f7ff faae 	bl	8103e90 <LL_ADC_IsEnabled>
 8104934:	4603      	mov	r3, r0
 8104936:	2b00      	cmp	r3, #0
 8104938:	f040 820d 	bne.w	8104d56 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	6818      	ldr	r0, [r3, #0]
 8104940:	683b      	ldr	r3, [r7, #0]
 8104942:	6819      	ldr	r1, [r3, #0]
 8104944:	683b      	ldr	r3, [r7, #0]
 8104946:	68db      	ldr	r3, [r3, #12]
 8104948:	461a      	mov	r2, r3
 810494a:	f7ff fa13 	bl	8103d74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810494e:	683b      	ldr	r3, [r7, #0]
 8104950:	68db      	ldr	r3, [r3, #12]
 8104952:	4a0c      	ldr	r2, [pc, #48]	; (8104984 <HAL_ADC_ConfigChannel+0x290>)
 8104954:	4293      	cmp	r3, r2
 8104956:	f040 8133 	bne.w	8104bc0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810495a:	687b      	ldr	r3, [r7, #4]
 810495c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810495e:	683b      	ldr	r3, [r7, #0]
 8104960:	681b      	ldr	r3, [r3, #0]
 8104962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104966:	2b00      	cmp	r3, #0
 8104968:	d110      	bne.n	810498c <HAL_ADC_ConfigChannel+0x298>
 810496a:	683b      	ldr	r3, [r7, #0]
 810496c:	681b      	ldr	r3, [r3, #0]
 810496e:	0e9b      	lsrs	r3, r3, #26
 8104970:	3301      	adds	r3, #1
 8104972:	f003 031f 	and.w	r3, r3, #31
 8104976:	2b09      	cmp	r3, #9
 8104978:	bf94      	ite	ls
 810497a:	2301      	movls	r3, #1
 810497c:	2300      	movhi	r3, #0
 810497e:	b2db      	uxtb	r3, r3
 8104980:	e01e      	b.n	81049c0 <HAL_ADC_ConfigChannel+0x2cc>
 8104982:	bf00      	nop
 8104984:	47ff0000 	.word	0x47ff0000
 8104988:	5c001000 	.word	0x5c001000
 810498c:	683b      	ldr	r3, [r7, #0]
 810498e:	681b      	ldr	r3, [r3, #0]
 8104990:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8104994:	fa93 f3a3 	rbit	r3, r3
 8104998:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 810499a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810499c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 810499e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81049a0:	2b00      	cmp	r3, #0
 81049a2:	d101      	bne.n	81049a8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 81049a4:	2320      	movs	r3, #32
 81049a6:	e003      	b.n	81049b0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 81049a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81049aa:	fab3 f383 	clz	r3, r3
 81049ae:	b2db      	uxtb	r3, r3
 81049b0:	3301      	adds	r3, #1
 81049b2:	f003 031f 	and.w	r3, r3, #31
 81049b6:	2b09      	cmp	r3, #9
 81049b8:	bf94      	ite	ls
 81049ba:	2301      	movls	r3, #1
 81049bc:	2300      	movhi	r3, #0
 81049be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81049c0:	2b00      	cmp	r3, #0
 81049c2:	d079      	beq.n	8104ab8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81049c4:	683b      	ldr	r3, [r7, #0]
 81049c6:	681b      	ldr	r3, [r3, #0]
 81049c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81049cc:	2b00      	cmp	r3, #0
 81049ce:	d107      	bne.n	81049e0 <HAL_ADC_ConfigChannel+0x2ec>
 81049d0:	683b      	ldr	r3, [r7, #0]
 81049d2:	681b      	ldr	r3, [r3, #0]
 81049d4:	0e9b      	lsrs	r3, r3, #26
 81049d6:	3301      	adds	r3, #1
 81049d8:	069b      	lsls	r3, r3, #26
 81049da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81049de:	e015      	b.n	8104a0c <HAL_ADC_ConfigChannel+0x318>
 81049e0:	683b      	ldr	r3, [r7, #0]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81049e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81049e8:	fa93 f3a3 	rbit	r3, r3
 81049ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 81049ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81049f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 81049f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81049f4:	2b00      	cmp	r3, #0
 81049f6:	d101      	bne.n	81049fc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 81049f8:	2320      	movs	r3, #32
 81049fa:	e003      	b.n	8104a04 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 81049fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81049fe:	fab3 f383 	clz	r3, r3
 8104a02:	b2db      	uxtb	r3, r3
 8104a04:	3301      	adds	r3, #1
 8104a06:	069b      	lsls	r3, r3, #26
 8104a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8104a0c:	683b      	ldr	r3, [r7, #0]
 8104a0e:	681b      	ldr	r3, [r3, #0]
 8104a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104a14:	2b00      	cmp	r3, #0
 8104a16:	d109      	bne.n	8104a2c <HAL_ADC_ConfigChannel+0x338>
 8104a18:	683b      	ldr	r3, [r7, #0]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	0e9b      	lsrs	r3, r3, #26
 8104a1e:	3301      	adds	r3, #1
 8104a20:	f003 031f 	and.w	r3, r3, #31
 8104a24:	2101      	movs	r1, #1
 8104a26:	fa01 f303 	lsl.w	r3, r1, r3
 8104a2a:	e017      	b.n	8104a5c <HAL_ADC_ConfigChannel+0x368>
 8104a2c:	683b      	ldr	r3, [r7, #0]
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8104a34:	fa93 f3a3 	rbit	r3, r3
 8104a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8104a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104a3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8104a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8104a40:	2b00      	cmp	r3, #0
 8104a42:	d101      	bne.n	8104a48 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8104a44:	2320      	movs	r3, #32
 8104a46:	e003      	b.n	8104a50 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8104a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8104a4a:	fab3 f383 	clz	r3, r3
 8104a4e:	b2db      	uxtb	r3, r3
 8104a50:	3301      	adds	r3, #1
 8104a52:	f003 031f 	and.w	r3, r3, #31
 8104a56:	2101      	movs	r1, #1
 8104a58:	fa01 f303 	lsl.w	r3, r1, r3
 8104a5c:	ea42 0103 	orr.w	r1, r2, r3
 8104a60:	683b      	ldr	r3, [r7, #0]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104a68:	2b00      	cmp	r3, #0
 8104a6a:	d10a      	bne.n	8104a82 <HAL_ADC_ConfigChannel+0x38e>
 8104a6c:	683b      	ldr	r3, [r7, #0]
 8104a6e:	681b      	ldr	r3, [r3, #0]
 8104a70:	0e9b      	lsrs	r3, r3, #26
 8104a72:	3301      	adds	r3, #1
 8104a74:	f003 021f 	and.w	r2, r3, #31
 8104a78:	4613      	mov	r3, r2
 8104a7a:	005b      	lsls	r3, r3, #1
 8104a7c:	4413      	add	r3, r2
 8104a7e:	051b      	lsls	r3, r3, #20
 8104a80:	e018      	b.n	8104ab4 <HAL_ADC_ConfigChannel+0x3c0>
 8104a82:	683b      	ldr	r3, [r7, #0]
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104a8a:	fa93 f3a3 	rbit	r3, r3
 8104a8e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8104a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a92:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8104a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104a96:	2b00      	cmp	r3, #0
 8104a98:	d101      	bne.n	8104a9e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8104a9a:	2320      	movs	r3, #32
 8104a9c:	e003      	b.n	8104aa6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8104a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104aa0:	fab3 f383 	clz	r3, r3
 8104aa4:	b2db      	uxtb	r3, r3
 8104aa6:	3301      	adds	r3, #1
 8104aa8:	f003 021f 	and.w	r2, r3, #31
 8104aac:	4613      	mov	r3, r2
 8104aae:	005b      	lsls	r3, r3, #1
 8104ab0:	4413      	add	r3, r2
 8104ab2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104ab4:	430b      	orrs	r3, r1
 8104ab6:	e07e      	b.n	8104bb6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104ab8:	683b      	ldr	r3, [r7, #0]
 8104aba:	681b      	ldr	r3, [r3, #0]
 8104abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104ac0:	2b00      	cmp	r3, #0
 8104ac2:	d107      	bne.n	8104ad4 <HAL_ADC_ConfigChannel+0x3e0>
 8104ac4:	683b      	ldr	r3, [r7, #0]
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	0e9b      	lsrs	r3, r3, #26
 8104aca:	3301      	adds	r3, #1
 8104acc:	069b      	lsls	r3, r3, #26
 8104ace:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8104ad2:	e015      	b.n	8104b00 <HAL_ADC_ConfigChannel+0x40c>
 8104ad4:	683b      	ldr	r3, [r7, #0]
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104adc:	fa93 f3a3 	rbit	r3, r3
 8104ae0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8104ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8104ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104ae8:	2b00      	cmp	r3, #0
 8104aea:	d101      	bne.n	8104af0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8104aec:	2320      	movs	r3, #32
 8104aee:	e003      	b.n	8104af8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8104af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104af2:	fab3 f383 	clz	r3, r3
 8104af6:	b2db      	uxtb	r3, r3
 8104af8:	3301      	adds	r3, #1
 8104afa:	069b      	lsls	r3, r3, #26
 8104afc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8104b00:	683b      	ldr	r3, [r7, #0]
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104b08:	2b00      	cmp	r3, #0
 8104b0a:	d109      	bne.n	8104b20 <HAL_ADC_ConfigChannel+0x42c>
 8104b0c:	683b      	ldr	r3, [r7, #0]
 8104b0e:	681b      	ldr	r3, [r3, #0]
 8104b10:	0e9b      	lsrs	r3, r3, #26
 8104b12:	3301      	adds	r3, #1
 8104b14:	f003 031f 	and.w	r3, r3, #31
 8104b18:	2101      	movs	r1, #1
 8104b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8104b1e:	e017      	b.n	8104b50 <HAL_ADC_ConfigChannel+0x45c>
 8104b20:	683b      	ldr	r3, [r7, #0]
 8104b22:	681b      	ldr	r3, [r3, #0]
 8104b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104b26:	69fb      	ldr	r3, [r7, #28]
 8104b28:	fa93 f3a3 	rbit	r3, r3
 8104b2c:	61bb      	str	r3, [r7, #24]
  return result;
 8104b2e:	69bb      	ldr	r3, [r7, #24]
 8104b30:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8104b32:	6a3b      	ldr	r3, [r7, #32]
 8104b34:	2b00      	cmp	r3, #0
 8104b36:	d101      	bne.n	8104b3c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8104b38:	2320      	movs	r3, #32
 8104b3a:	e003      	b.n	8104b44 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8104b3c:	6a3b      	ldr	r3, [r7, #32]
 8104b3e:	fab3 f383 	clz	r3, r3
 8104b42:	b2db      	uxtb	r3, r3
 8104b44:	3301      	adds	r3, #1
 8104b46:	f003 031f 	and.w	r3, r3, #31
 8104b4a:	2101      	movs	r1, #1
 8104b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8104b50:	ea42 0103 	orr.w	r1, r2, r3
 8104b54:	683b      	ldr	r3, [r7, #0]
 8104b56:	681b      	ldr	r3, [r3, #0]
 8104b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104b5c:	2b00      	cmp	r3, #0
 8104b5e:	d10d      	bne.n	8104b7c <HAL_ADC_ConfigChannel+0x488>
 8104b60:	683b      	ldr	r3, [r7, #0]
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	0e9b      	lsrs	r3, r3, #26
 8104b66:	3301      	adds	r3, #1
 8104b68:	f003 021f 	and.w	r2, r3, #31
 8104b6c:	4613      	mov	r3, r2
 8104b6e:	005b      	lsls	r3, r3, #1
 8104b70:	4413      	add	r3, r2
 8104b72:	3b1e      	subs	r3, #30
 8104b74:	051b      	lsls	r3, r3, #20
 8104b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104b7a:	e01b      	b.n	8104bb4 <HAL_ADC_ConfigChannel+0x4c0>
 8104b7c:	683b      	ldr	r3, [r7, #0]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104b82:	693b      	ldr	r3, [r7, #16]
 8104b84:	fa93 f3a3 	rbit	r3, r3
 8104b88:	60fb      	str	r3, [r7, #12]
  return result;
 8104b8a:	68fb      	ldr	r3, [r7, #12]
 8104b8c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8104b8e:	697b      	ldr	r3, [r7, #20]
 8104b90:	2b00      	cmp	r3, #0
 8104b92:	d101      	bne.n	8104b98 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8104b94:	2320      	movs	r3, #32
 8104b96:	e003      	b.n	8104ba0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8104b98:	697b      	ldr	r3, [r7, #20]
 8104b9a:	fab3 f383 	clz	r3, r3
 8104b9e:	b2db      	uxtb	r3, r3
 8104ba0:	3301      	adds	r3, #1
 8104ba2:	f003 021f 	and.w	r2, r3, #31
 8104ba6:	4613      	mov	r3, r2
 8104ba8:	005b      	lsls	r3, r3, #1
 8104baa:	4413      	add	r3, r2
 8104bac:	3b1e      	subs	r3, #30
 8104bae:	051b      	lsls	r3, r3, #20
 8104bb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104bb4:	430b      	orrs	r3, r1
 8104bb6:	683a      	ldr	r2, [r7, #0]
 8104bb8:	6892      	ldr	r2, [r2, #8]
 8104bba:	4619      	mov	r1, r3
 8104bbc:	f7ff f8ae 	bl	8103d1c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8104bc0:	683b      	ldr	r3, [r7, #0]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	2b00      	cmp	r3, #0
 8104bc6:	f280 80c6 	bge.w	8104d56 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104bca:	687b      	ldr	r3, [r7, #4]
 8104bcc:	681b      	ldr	r3, [r3, #0]
 8104bce:	4a67      	ldr	r2, [pc, #412]	; (8104d6c <HAL_ADC_ConfigChannel+0x678>)
 8104bd0:	4293      	cmp	r3, r2
 8104bd2:	d004      	beq.n	8104bde <HAL_ADC_ConfigChannel+0x4ea>
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	681b      	ldr	r3, [r3, #0]
 8104bd8:	4a65      	ldr	r2, [pc, #404]	; (8104d70 <HAL_ADC_ConfigChannel+0x67c>)
 8104bda:	4293      	cmp	r3, r2
 8104bdc:	d101      	bne.n	8104be2 <HAL_ADC_ConfigChannel+0x4ee>
 8104bde:	4b65      	ldr	r3, [pc, #404]	; (8104d74 <HAL_ADC_ConfigChannel+0x680>)
 8104be0:	e000      	b.n	8104be4 <HAL_ADC_ConfigChannel+0x4f0>
 8104be2:	4b65      	ldr	r3, [pc, #404]	; (8104d78 <HAL_ADC_ConfigChannel+0x684>)
 8104be4:	4618      	mov	r0, r3
 8104be6:	f7fe ffe5 	bl	8103bb4 <LL_ADC_GetCommonPathInternalCh>
 8104bea:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104bec:	687b      	ldr	r3, [r7, #4]
 8104bee:	681b      	ldr	r3, [r3, #0]
 8104bf0:	4a5e      	ldr	r2, [pc, #376]	; (8104d6c <HAL_ADC_ConfigChannel+0x678>)
 8104bf2:	4293      	cmp	r3, r2
 8104bf4:	d004      	beq.n	8104c00 <HAL_ADC_ConfigChannel+0x50c>
 8104bf6:	687b      	ldr	r3, [r7, #4]
 8104bf8:	681b      	ldr	r3, [r3, #0]
 8104bfa:	4a5d      	ldr	r2, [pc, #372]	; (8104d70 <HAL_ADC_ConfigChannel+0x67c>)
 8104bfc:	4293      	cmp	r3, r2
 8104bfe:	d10e      	bne.n	8104c1e <HAL_ADC_ConfigChannel+0x52a>
 8104c00:	485a      	ldr	r0, [pc, #360]	; (8104d6c <HAL_ADC_ConfigChannel+0x678>)
 8104c02:	f7ff f945 	bl	8103e90 <LL_ADC_IsEnabled>
 8104c06:	4604      	mov	r4, r0
 8104c08:	4859      	ldr	r0, [pc, #356]	; (8104d70 <HAL_ADC_ConfigChannel+0x67c>)
 8104c0a:	f7ff f941 	bl	8103e90 <LL_ADC_IsEnabled>
 8104c0e:	4603      	mov	r3, r0
 8104c10:	4323      	orrs	r3, r4
 8104c12:	2b00      	cmp	r3, #0
 8104c14:	bf0c      	ite	eq
 8104c16:	2301      	moveq	r3, #1
 8104c18:	2300      	movne	r3, #0
 8104c1a:	b2db      	uxtb	r3, r3
 8104c1c:	e008      	b.n	8104c30 <HAL_ADC_ConfigChannel+0x53c>
 8104c1e:	4857      	ldr	r0, [pc, #348]	; (8104d7c <HAL_ADC_ConfigChannel+0x688>)
 8104c20:	f7ff f936 	bl	8103e90 <LL_ADC_IsEnabled>
 8104c24:	4603      	mov	r3, r0
 8104c26:	2b00      	cmp	r3, #0
 8104c28:	bf0c      	ite	eq
 8104c2a:	2301      	moveq	r3, #1
 8104c2c:	2300      	movne	r3, #0
 8104c2e:	b2db      	uxtb	r3, r3
 8104c30:	2b00      	cmp	r3, #0
 8104c32:	d07d      	beq.n	8104d30 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8104c34:	683b      	ldr	r3, [r7, #0]
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	4a51      	ldr	r2, [pc, #324]	; (8104d80 <HAL_ADC_ConfigChannel+0x68c>)
 8104c3a:	4293      	cmp	r3, r2
 8104c3c:	d130      	bne.n	8104ca0 <HAL_ADC_ConfigChannel+0x5ac>
 8104c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104c40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104c44:	2b00      	cmp	r3, #0
 8104c46:	d12b      	bne.n	8104ca0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	681b      	ldr	r3, [r3, #0]
 8104c4c:	4a4b      	ldr	r2, [pc, #300]	; (8104d7c <HAL_ADC_ConfigChannel+0x688>)
 8104c4e:	4293      	cmp	r3, r2
 8104c50:	f040 8081 	bne.w	8104d56 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8104c54:	687b      	ldr	r3, [r7, #4]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	4a44      	ldr	r2, [pc, #272]	; (8104d6c <HAL_ADC_ConfigChannel+0x678>)
 8104c5a:	4293      	cmp	r3, r2
 8104c5c:	d004      	beq.n	8104c68 <HAL_ADC_ConfigChannel+0x574>
 8104c5e:	687b      	ldr	r3, [r7, #4]
 8104c60:	681b      	ldr	r3, [r3, #0]
 8104c62:	4a43      	ldr	r2, [pc, #268]	; (8104d70 <HAL_ADC_ConfigChannel+0x67c>)
 8104c64:	4293      	cmp	r3, r2
 8104c66:	d101      	bne.n	8104c6c <HAL_ADC_ConfigChannel+0x578>
 8104c68:	4a42      	ldr	r2, [pc, #264]	; (8104d74 <HAL_ADC_ConfigChannel+0x680>)
 8104c6a:	e000      	b.n	8104c6e <HAL_ADC_ConfigChannel+0x57a>
 8104c6c:	4a42      	ldr	r2, [pc, #264]	; (8104d78 <HAL_ADC_ConfigChannel+0x684>)
 8104c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104c70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104c74:	4619      	mov	r1, r3
 8104c76:	4610      	mov	r0, r2
 8104c78:	f7fe ff89 	bl	8103b8e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8104c7c:	4b41      	ldr	r3, [pc, #260]	; (8104d84 <HAL_ADC_ConfigChannel+0x690>)
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	099b      	lsrs	r3, r3, #6
 8104c82:	4a41      	ldr	r2, [pc, #260]	; (8104d88 <HAL_ADC_ConfigChannel+0x694>)
 8104c84:	fba2 2303 	umull	r2, r3, r2, r3
 8104c88:	099b      	lsrs	r3, r3, #6
 8104c8a:	3301      	adds	r3, #1
 8104c8c:	005b      	lsls	r3, r3, #1
 8104c8e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8104c90:	e002      	b.n	8104c98 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8104c92:	68bb      	ldr	r3, [r7, #8]
 8104c94:	3b01      	subs	r3, #1
 8104c96:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8104c98:	68bb      	ldr	r3, [r7, #8]
 8104c9a:	2b00      	cmp	r3, #0
 8104c9c:	d1f9      	bne.n	8104c92 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8104c9e:	e05a      	b.n	8104d56 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8104ca0:	683b      	ldr	r3, [r7, #0]
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	4a39      	ldr	r2, [pc, #228]	; (8104d8c <HAL_ADC_ConfigChannel+0x698>)
 8104ca6:	4293      	cmp	r3, r2
 8104ca8:	d11e      	bne.n	8104ce8 <HAL_ADC_ConfigChannel+0x5f4>
 8104caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104cb0:	2b00      	cmp	r3, #0
 8104cb2:	d119      	bne.n	8104ce8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	4a30      	ldr	r2, [pc, #192]	; (8104d7c <HAL_ADC_ConfigChannel+0x688>)
 8104cba:	4293      	cmp	r3, r2
 8104cbc:	d14b      	bne.n	8104d56 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	681b      	ldr	r3, [r3, #0]
 8104cc2:	4a2a      	ldr	r2, [pc, #168]	; (8104d6c <HAL_ADC_ConfigChannel+0x678>)
 8104cc4:	4293      	cmp	r3, r2
 8104cc6:	d004      	beq.n	8104cd2 <HAL_ADC_ConfigChannel+0x5de>
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	4a28      	ldr	r2, [pc, #160]	; (8104d70 <HAL_ADC_ConfigChannel+0x67c>)
 8104cce:	4293      	cmp	r3, r2
 8104cd0:	d101      	bne.n	8104cd6 <HAL_ADC_ConfigChannel+0x5e2>
 8104cd2:	4a28      	ldr	r2, [pc, #160]	; (8104d74 <HAL_ADC_ConfigChannel+0x680>)
 8104cd4:	e000      	b.n	8104cd8 <HAL_ADC_ConfigChannel+0x5e4>
 8104cd6:	4a28      	ldr	r2, [pc, #160]	; (8104d78 <HAL_ADC_ConfigChannel+0x684>)
 8104cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104cde:	4619      	mov	r1, r3
 8104ce0:	4610      	mov	r0, r2
 8104ce2:	f7fe ff54 	bl	8103b8e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104ce6:	e036      	b.n	8104d56 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8104ce8:	683b      	ldr	r3, [r7, #0]
 8104cea:	681b      	ldr	r3, [r3, #0]
 8104cec:	4a28      	ldr	r2, [pc, #160]	; (8104d90 <HAL_ADC_ConfigChannel+0x69c>)
 8104cee:	4293      	cmp	r3, r2
 8104cf0:	d131      	bne.n	8104d56 <HAL_ADC_ConfigChannel+0x662>
 8104cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104cf8:	2b00      	cmp	r3, #0
 8104cfa:	d12c      	bne.n	8104d56 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8104cfc:	687b      	ldr	r3, [r7, #4]
 8104cfe:	681b      	ldr	r3, [r3, #0]
 8104d00:	4a1e      	ldr	r2, [pc, #120]	; (8104d7c <HAL_ADC_ConfigChannel+0x688>)
 8104d02:	4293      	cmp	r3, r2
 8104d04:	d127      	bne.n	8104d56 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	681b      	ldr	r3, [r3, #0]
 8104d0a:	4a18      	ldr	r2, [pc, #96]	; (8104d6c <HAL_ADC_ConfigChannel+0x678>)
 8104d0c:	4293      	cmp	r3, r2
 8104d0e:	d004      	beq.n	8104d1a <HAL_ADC_ConfigChannel+0x626>
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	681b      	ldr	r3, [r3, #0]
 8104d14:	4a16      	ldr	r2, [pc, #88]	; (8104d70 <HAL_ADC_ConfigChannel+0x67c>)
 8104d16:	4293      	cmp	r3, r2
 8104d18:	d101      	bne.n	8104d1e <HAL_ADC_ConfigChannel+0x62a>
 8104d1a:	4a16      	ldr	r2, [pc, #88]	; (8104d74 <HAL_ADC_ConfigChannel+0x680>)
 8104d1c:	e000      	b.n	8104d20 <HAL_ADC_ConfigChannel+0x62c>
 8104d1e:	4a16      	ldr	r2, [pc, #88]	; (8104d78 <HAL_ADC_ConfigChannel+0x684>)
 8104d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8104d26:	4619      	mov	r1, r3
 8104d28:	4610      	mov	r0, r2
 8104d2a:	f7fe ff30 	bl	8103b8e <LL_ADC_SetCommonPathInternalCh>
 8104d2e:	e012      	b.n	8104d56 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104d30:	687b      	ldr	r3, [r7, #4]
 8104d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d34:	f043 0220 	orr.w	r2, r3, #32
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8104d3c:	2301      	movs	r3, #1
 8104d3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8104d42:	e008      	b.n	8104d56 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d48:	f043 0220 	orr.w	r2, r3, #32
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8104d50:	2301      	movs	r3, #1
 8104d52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104d56:	687b      	ldr	r3, [r7, #4]
 8104d58:	2200      	movs	r2, #0
 8104d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8104d5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8104d62:	4618      	mov	r0, r3
 8104d64:	3784      	adds	r7, #132	; 0x84
 8104d66:	46bd      	mov	sp, r7
 8104d68:	bd90      	pop	{r4, r7, pc}
 8104d6a:	bf00      	nop
 8104d6c:	40022000 	.word	0x40022000
 8104d70:	40022100 	.word	0x40022100
 8104d74:	40022300 	.word	0x40022300
 8104d78:	58026300 	.word	0x58026300
 8104d7c:	58026000 	.word	0x58026000
 8104d80:	cb840000 	.word	0xcb840000
 8104d84:	10000000 	.word	0x10000000
 8104d88:	053e2d63 	.word	0x053e2d63
 8104d8c:	c7520000 	.word	0xc7520000
 8104d90:	cfb80000 	.word	0xcfb80000

08104d94 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8104d94:	b580      	push	{r7, lr}
 8104d96:	b084      	sub	sp, #16
 8104d98:	af00      	add	r7, sp, #0
 8104d9a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	681b      	ldr	r3, [r3, #0]
 8104da0:	4a79      	ldr	r2, [pc, #484]	; (8104f88 <ADC_ConfigureBoostMode+0x1f4>)
 8104da2:	4293      	cmp	r3, r2
 8104da4:	d004      	beq.n	8104db0 <ADC_ConfigureBoostMode+0x1c>
 8104da6:	687b      	ldr	r3, [r7, #4]
 8104da8:	681b      	ldr	r3, [r3, #0]
 8104daa:	4a78      	ldr	r2, [pc, #480]	; (8104f8c <ADC_ConfigureBoostMode+0x1f8>)
 8104dac:	4293      	cmp	r3, r2
 8104dae:	d109      	bne.n	8104dc4 <ADC_ConfigureBoostMode+0x30>
 8104db0:	4b77      	ldr	r3, [pc, #476]	; (8104f90 <ADC_ConfigureBoostMode+0x1fc>)
 8104db2:	689b      	ldr	r3, [r3, #8]
 8104db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104db8:	2b00      	cmp	r3, #0
 8104dba:	bf14      	ite	ne
 8104dbc:	2301      	movne	r3, #1
 8104dbe:	2300      	moveq	r3, #0
 8104dc0:	b2db      	uxtb	r3, r3
 8104dc2:	e008      	b.n	8104dd6 <ADC_ConfigureBoostMode+0x42>
 8104dc4:	4b73      	ldr	r3, [pc, #460]	; (8104f94 <ADC_ConfigureBoostMode+0x200>)
 8104dc6:	689b      	ldr	r3, [r3, #8]
 8104dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104dcc:	2b00      	cmp	r3, #0
 8104dce:	bf14      	ite	ne
 8104dd0:	2301      	movne	r3, #1
 8104dd2:	2300      	moveq	r3, #0
 8104dd4:	b2db      	uxtb	r3, r3
 8104dd6:	2b00      	cmp	r3, #0
 8104dd8:	d01c      	beq.n	8104e14 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8104dda:	f005 f9f1 	bl	810a1c0 <HAL_RCC_GetHCLKFreq>
 8104dde:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	685b      	ldr	r3, [r3, #4]
 8104de4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104de8:	d010      	beq.n	8104e0c <ADC_ConfigureBoostMode+0x78>
 8104dea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104dee:	d871      	bhi.n	8104ed4 <ADC_ConfigureBoostMode+0x140>
 8104df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104df4:	d002      	beq.n	8104dfc <ADC_ConfigureBoostMode+0x68>
 8104df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104dfa:	d16b      	bne.n	8104ed4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	685b      	ldr	r3, [r3, #4]
 8104e00:	0c1b      	lsrs	r3, r3, #16
 8104e02:	68fa      	ldr	r2, [r7, #12]
 8104e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8104e08:	60fb      	str	r3, [r7, #12]
        break;
 8104e0a:	e066      	b.n	8104eda <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8104e0c:	68fb      	ldr	r3, [r7, #12]
 8104e0e:	089b      	lsrs	r3, r3, #2
 8104e10:	60fb      	str	r3, [r7, #12]
        break;
 8104e12:	e062      	b.n	8104eda <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8104e14:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8104e18:	f006 f970 	bl	810b0fc <HAL_RCCEx_GetPeriphCLKFreq>
 8104e1c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	685b      	ldr	r3, [r3, #4]
 8104e22:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8104e26:	d051      	beq.n	8104ecc <ADC_ConfigureBoostMode+0x138>
 8104e28:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8104e2c:	d854      	bhi.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
 8104e2e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8104e32:	d047      	beq.n	8104ec4 <ADC_ConfigureBoostMode+0x130>
 8104e34:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8104e38:	d84e      	bhi.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
 8104e3a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8104e3e:	d03d      	beq.n	8104ebc <ADC_ConfigureBoostMode+0x128>
 8104e40:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8104e44:	d848      	bhi.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
 8104e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104e4a:	d033      	beq.n	8104eb4 <ADC_ConfigureBoostMode+0x120>
 8104e4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104e50:	d842      	bhi.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
 8104e52:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8104e56:	d029      	beq.n	8104eac <ADC_ConfigureBoostMode+0x118>
 8104e58:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8104e5c:	d83c      	bhi.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
 8104e5e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8104e62:	d01a      	beq.n	8104e9a <ADC_ConfigureBoostMode+0x106>
 8104e64:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8104e68:	d836      	bhi.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
 8104e6a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8104e6e:	d014      	beq.n	8104e9a <ADC_ConfigureBoostMode+0x106>
 8104e70:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8104e74:	d830      	bhi.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
 8104e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104e7a:	d00e      	beq.n	8104e9a <ADC_ConfigureBoostMode+0x106>
 8104e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104e80:	d82a      	bhi.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
 8104e82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8104e86:	d008      	beq.n	8104e9a <ADC_ConfigureBoostMode+0x106>
 8104e88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8104e8c:	d824      	bhi.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
 8104e8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104e92:	d002      	beq.n	8104e9a <ADC_ConfigureBoostMode+0x106>
 8104e94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8104e98:	d11e      	bne.n	8104ed8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	685b      	ldr	r3, [r3, #4]
 8104e9e:	0c9b      	lsrs	r3, r3, #18
 8104ea0:	005b      	lsls	r3, r3, #1
 8104ea2:	68fa      	ldr	r2, [r7, #12]
 8104ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8104ea8:	60fb      	str	r3, [r7, #12]
        break;
 8104eaa:	e016      	b.n	8104eda <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8104eac:	68fb      	ldr	r3, [r7, #12]
 8104eae:	091b      	lsrs	r3, r3, #4
 8104eb0:	60fb      	str	r3, [r7, #12]
        break;
 8104eb2:	e012      	b.n	8104eda <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8104eb4:	68fb      	ldr	r3, [r7, #12]
 8104eb6:	095b      	lsrs	r3, r3, #5
 8104eb8:	60fb      	str	r3, [r7, #12]
        break;
 8104eba:	e00e      	b.n	8104eda <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8104ebc:	68fb      	ldr	r3, [r7, #12]
 8104ebe:	099b      	lsrs	r3, r3, #6
 8104ec0:	60fb      	str	r3, [r7, #12]
        break;
 8104ec2:	e00a      	b.n	8104eda <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8104ec4:	68fb      	ldr	r3, [r7, #12]
 8104ec6:	09db      	lsrs	r3, r3, #7
 8104ec8:	60fb      	str	r3, [r7, #12]
        break;
 8104eca:	e006      	b.n	8104eda <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8104ecc:	68fb      	ldr	r3, [r7, #12]
 8104ece:	0a1b      	lsrs	r3, r3, #8
 8104ed0:	60fb      	str	r3, [r7, #12]
        break;
 8104ed2:	e002      	b.n	8104eda <ADC_ConfigureBoostMode+0x146>
        break;
 8104ed4:	bf00      	nop
 8104ed6:	e000      	b.n	8104eda <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8104ed8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8104eda:	f7fe fe39 	bl	8103b50 <HAL_GetREVID>
 8104ede:	4603      	mov	r3, r0
 8104ee0:	f241 0203 	movw	r2, #4099	; 0x1003
 8104ee4:	4293      	cmp	r3, r2
 8104ee6:	d815      	bhi.n	8104f14 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8104ee8:	68fb      	ldr	r3, [r7, #12]
 8104eea:	4a2b      	ldr	r2, [pc, #172]	; (8104f98 <ADC_ConfigureBoostMode+0x204>)
 8104eec:	4293      	cmp	r3, r2
 8104eee:	d908      	bls.n	8104f02 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	689a      	ldr	r2, [r3, #8]
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	681b      	ldr	r3, [r3, #0]
 8104efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104efe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8104f00:	e03e      	b.n	8104f80 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	681b      	ldr	r3, [r3, #0]
 8104f06:	689a      	ldr	r2, [r3, #8]
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	681b      	ldr	r3, [r3, #0]
 8104f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104f10:	609a      	str	r2, [r3, #8]
}
 8104f12:	e035      	b.n	8104f80 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8104f14:	68fb      	ldr	r3, [r7, #12]
 8104f16:	085b      	lsrs	r3, r3, #1
 8104f18:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8104f1a:	68fb      	ldr	r3, [r7, #12]
 8104f1c:	4a1f      	ldr	r2, [pc, #124]	; (8104f9c <ADC_ConfigureBoostMode+0x208>)
 8104f1e:	4293      	cmp	r3, r2
 8104f20:	d808      	bhi.n	8104f34 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	689a      	ldr	r2, [r3, #8]
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8104f30:	609a      	str	r2, [r3, #8]
}
 8104f32:	e025      	b.n	8104f80 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8104f34:	68fb      	ldr	r3, [r7, #12]
 8104f36:	4a1a      	ldr	r2, [pc, #104]	; (8104fa0 <ADC_ConfigureBoostMode+0x20c>)
 8104f38:	4293      	cmp	r3, r2
 8104f3a:	d80a      	bhi.n	8104f52 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	681b      	ldr	r3, [r3, #0]
 8104f40:	689b      	ldr	r3, [r3, #8]
 8104f42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104f46:	687b      	ldr	r3, [r7, #4]
 8104f48:	681b      	ldr	r3, [r3, #0]
 8104f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104f4e:	609a      	str	r2, [r3, #8]
}
 8104f50:	e016      	b.n	8104f80 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8104f52:	68fb      	ldr	r3, [r7, #12]
 8104f54:	4a13      	ldr	r2, [pc, #76]	; (8104fa4 <ADC_ConfigureBoostMode+0x210>)
 8104f56:	4293      	cmp	r3, r2
 8104f58:	d80a      	bhi.n	8104f70 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	681b      	ldr	r3, [r3, #0]
 8104f5e:	689b      	ldr	r3, [r3, #8]
 8104f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104f6c:	609a      	str	r2, [r3, #8]
}
 8104f6e:	e007      	b.n	8104f80 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8104f70:	687b      	ldr	r3, [r7, #4]
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	689a      	ldr	r2, [r3, #8]
 8104f76:	687b      	ldr	r3, [r7, #4]
 8104f78:	681b      	ldr	r3, [r3, #0]
 8104f7a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8104f7e:	609a      	str	r2, [r3, #8]
}
 8104f80:	bf00      	nop
 8104f82:	3710      	adds	r7, #16
 8104f84:	46bd      	mov	sp, r7
 8104f86:	bd80      	pop	{r7, pc}
 8104f88:	40022000 	.word	0x40022000
 8104f8c:	40022100 	.word	0x40022100
 8104f90:	40022300 	.word	0x40022300
 8104f94:	58026300 	.word	0x58026300
 8104f98:	01312d00 	.word	0x01312d00
 8104f9c:	005f5e10 	.word	0x005f5e10
 8104fa0:	00bebc20 	.word	0x00bebc20
 8104fa4:	017d7840 	.word	0x017d7840

08104fa8 <LL_ADC_IsEnabled>:
{
 8104fa8:	b480      	push	{r7}
 8104faa:	b083      	sub	sp, #12
 8104fac:	af00      	add	r7, sp, #0
 8104fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	689b      	ldr	r3, [r3, #8]
 8104fb4:	f003 0301 	and.w	r3, r3, #1
 8104fb8:	2b01      	cmp	r3, #1
 8104fba:	d101      	bne.n	8104fc0 <LL_ADC_IsEnabled+0x18>
 8104fbc:	2301      	movs	r3, #1
 8104fbe:	e000      	b.n	8104fc2 <LL_ADC_IsEnabled+0x1a>
 8104fc0:	2300      	movs	r3, #0
}
 8104fc2:	4618      	mov	r0, r3
 8104fc4:	370c      	adds	r7, #12
 8104fc6:	46bd      	mov	sp, r7
 8104fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fcc:	4770      	bx	lr

08104fce <LL_ADC_REG_IsConversionOngoing>:
{
 8104fce:	b480      	push	{r7}
 8104fd0:	b083      	sub	sp, #12
 8104fd2:	af00      	add	r7, sp, #0
 8104fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8104fd6:	687b      	ldr	r3, [r7, #4]
 8104fd8:	689b      	ldr	r3, [r3, #8]
 8104fda:	f003 0304 	and.w	r3, r3, #4
 8104fde:	2b04      	cmp	r3, #4
 8104fe0:	d101      	bne.n	8104fe6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8104fe2:	2301      	movs	r3, #1
 8104fe4:	e000      	b.n	8104fe8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8104fe6:	2300      	movs	r3, #0
}
 8104fe8:	4618      	mov	r0, r3
 8104fea:	370c      	adds	r7, #12
 8104fec:	46bd      	mov	sp, r7
 8104fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ff2:	4770      	bx	lr

08104ff4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8104ff4:	b480      	push	{r7}
 8104ff6:	b083      	sub	sp, #12
 8104ff8:	af00      	add	r7, sp, #0
 8104ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8104ffc:	bf00      	nop
 8104ffe:	370c      	adds	r7, #12
 8105000:	46bd      	mov	sp, r7
 8105002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105006:	4770      	bx	lr

08105008 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8105008:	b480      	push	{r7}
 810500a:	b083      	sub	sp, #12
 810500c:	af00      	add	r7, sp, #0
 810500e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8105010:	bf00      	nop
 8105012:	370c      	adds	r7, #12
 8105014:	46bd      	mov	sp, r7
 8105016:	f85d 7b04 	ldr.w	r7, [sp], #4
 810501a:	4770      	bx	lr

0810501c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 810501c:	b480      	push	{r7}
 810501e:	b083      	sub	sp, #12
 8105020:	af00      	add	r7, sp, #0
 8105022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8105024:	bf00      	nop
 8105026:	370c      	adds	r7, #12
 8105028:	46bd      	mov	sp, r7
 810502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810502e:	4770      	bx	lr

08105030 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8105030:	b480      	push	{r7}
 8105032:	b083      	sub	sp, #12
 8105034:	af00      	add	r7, sp, #0
 8105036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8105038:	bf00      	nop
 810503a:	370c      	adds	r7, #12
 810503c:	46bd      	mov	sp, r7
 810503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105042:	4770      	bx	lr

08105044 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8105044:	b480      	push	{r7}
 8105046:	b083      	sub	sp, #12
 8105048:	af00      	add	r7, sp, #0
 810504a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 810504c:	bf00      	nop
 810504e:	370c      	adds	r7, #12
 8105050:	46bd      	mov	sp, r7
 8105052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105056:	4770      	bx	lr

08105058 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8105058:	b590      	push	{r4, r7, lr}
 810505a:	b09f      	sub	sp, #124	; 0x7c
 810505c:	af00      	add	r7, sp, #0
 810505e:	6078      	str	r0, [r7, #4]
 8105060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8105062:	2300      	movs	r3, #0
 8105064:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810506e:	2b01      	cmp	r3, #1
 8105070:	d101      	bne.n	8105076 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8105072:	2302      	movs	r3, #2
 8105074:	e0c4      	b.n	8105200 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8105076:	687b      	ldr	r3, [r7, #4]
 8105078:	2201      	movs	r2, #1
 810507a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810507e:	2300      	movs	r3, #0
 8105080:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8105082:	2300      	movs	r3, #0
 8105084:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8105086:	687b      	ldr	r3, [r7, #4]
 8105088:	681b      	ldr	r3, [r3, #0]
 810508a:	4a5f      	ldr	r2, [pc, #380]	; (8105208 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810508c:	4293      	cmp	r3, r2
 810508e:	d102      	bne.n	8105096 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8105090:	4b5e      	ldr	r3, [pc, #376]	; (810520c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105092:	60bb      	str	r3, [r7, #8]
 8105094:	e001      	b.n	810509a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8105096:	2300      	movs	r3, #0
 8105098:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810509a:	68bb      	ldr	r3, [r7, #8]
 810509c:	2b00      	cmp	r3, #0
 810509e:	d10b      	bne.n	81050b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81050a4:	f043 0220 	orr.w	r2, r3, #32
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	2200      	movs	r2, #0
 81050b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81050b4:	2301      	movs	r3, #1
 81050b6:	e0a3      	b.n	8105200 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81050b8:	68bb      	ldr	r3, [r7, #8]
 81050ba:	4618      	mov	r0, r3
 81050bc:	f7ff ff87 	bl	8104fce <LL_ADC_REG_IsConversionOngoing>
 81050c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81050c2:	687b      	ldr	r3, [r7, #4]
 81050c4:	681b      	ldr	r3, [r3, #0]
 81050c6:	4618      	mov	r0, r3
 81050c8:	f7ff ff81 	bl	8104fce <LL_ADC_REG_IsConversionOngoing>
 81050cc:	4603      	mov	r3, r0
 81050ce:	2b00      	cmp	r3, #0
 81050d0:	f040 8085 	bne.w	81051de <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81050d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81050d6:	2b00      	cmp	r3, #0
 81050d8:	f040 8081 	bne.w	81051de <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	681b      	ldr	r3, [r3, #0]
 81050e0:	4a49      	ldr	r2, [pc, #292]	; (8105208 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81050e2:	4293      	cmp	r3, r2
 81050e4:	d004      	beq.n	81050f0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	681b      	ldr	r3, [r3, #0]
 81050ea:	4a48      	ldr	r2, [pc, #288]	; (810520c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81050ec:	4293      	cmp	r3, r2
 81050ee:	d101      	bne.n	81050f4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81050f0:	4b47      	ldr	r3, [pc, #284]	; (8105210 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81050f2:	e000      	b.n	81050f6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81050f4:	4b47      	ldr	r3, [pc, #284]	; (8105214 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81050f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81050f8:	683b      	ldr	r3, [r7, #0]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	2b00      	cmp	r3, #0
 81050fe:	d03b      	beq.n	8105178 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8105100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105102:	689b      	ldr	r3, [r3, #8]
 8105104:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8105108:	683b      	ldr	r3, [r7, #0]
 810510a:	685b      	ldr	r3, [r3, #4]
 810510c:	431a      	orrs	r2, r3
 810510e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105110:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	681b      	ldr	r3, [r3, #0]
 8105116:	4a3c      	ldr	r2, [pc, #240]	; (8105208 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105118:	4293      	cmp	r3, r2
 810511a:	d004      	beq.n	8105126 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 810511c:	687b      	ldr	r3, [r7, #4]
 810511e:	681b      	ldr	r3, [r3, #0]
 8105120:	4a3a      	ldr	r2, [pc, #232]	; (810520c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105122:	4293      	cmp	r3, r2
 8105124:	d10e      	bne.n	8105144 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8105126:	4838      	ldr	r0, [pc, #224]	; (8105208 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105128:	f7ff ff3e 	bl	8104fa8 <LL_ADC_IsEnabled>
 810512c:	4604      	mov	r4, r0
 810512e:	4837      	ldr	r0, [pc, #220]	; (810520c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105130:	f7ff ff3a 	bl	8104fa8 <LL_ADC_IsEnabled>
 8105134:	4603      	mov	r3, r0
 8105136:	4323      	orrs	r3, r4
 8105138:	2b00      	cmp	r3, #0
 810513a:	bf0c      	ite	eq
 810513c:	2301      	moveq	r3, #1
 810513e:	2300      	movne	r3, #0
 8105140:	b2db      	uxtb	r3, r3
 8105142:	e008      	b.n	8105156 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8105144:	4834      	ldr	r0, [pc, #208]	; (8105218 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8105146:	f7ff ff2f 	bl	8104fa8 <LL_ADC_IsEnabled>
 810514a:	4603      	mov	r3, r0
 810514c:	2b00      	cmp	r3, #0
 810514e:	bf0c      	ite	eq
 8105150:	2301      	moveq	r3, #1
 8105152:	2300      	movne	r3, #0
 8105154:	b2db      	uxtb	r3, r3
 8105156:	2b00      	cmp	r3, #0
 8105158:	d04b      	beq.n	81051f2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810515a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810515c:	689b      	ldr	r3, [r3, #8]
 810515e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8105162:	f023 030f 	bic.w	r3, r3, #15
 8105166:	683a      	ldr	r2, [r7, #0]
 8105168:	6811      	ldr	r1, [r2, #0]
 810516a:	683a      	ldr	r2, [r7, #0]
 810516c:	6892      	ldr	r2, [r2, #8]
 810516e:	430a      	orrs	r2, r1
 8105170:	431a      	orrs	r2, r3
 8105172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105174:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105176:	e03c      	b.n	81051f2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8105178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810517a:	689b      	ldr	r3, [r3, #8]
 810517c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8105180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105182:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	681b      	ldr	r3, [r3, #0]
 8105188:	4a1f      	ldr	r2, [pc, #124]	; (8105208 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810518a:	4293      	cmp	r3, r2
 810518c:	d004      	beq.n	8105198 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	681b      	ldr	r3, [r3, #0]
 8105192:	4a1e      	ldr	r2, [pc, #120]	; (810520c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105194:	4293      	cmp	r3, r2
 8105196:	d10e      	bne.n	81051b6 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8105198:	481b      	ldr	r0, [pc, #108]	; (8105208 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810519a:	f7ff ff05 	bl	8104fa8 <LL_ADC_IsEnabled>
 810519e:	4604      	mov	r4, r0
 81051a0:	481a      	ldr	r0, [pc, #104]	; (810520c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81051a2:	f7ff ff01 	bl	8104fa8 <LL_ADC_IsEnabled>
 81051a6:	4603      	mov	r3, r0
 81051a8:	4323      	orrs	r3, r4
 81051aa:	2b00      	cmp	r3, #0
 81051ac:	bf0c      	ite	eq
 81051ae:	2301      	moveq	r3, #1
 81051b0:	2300      	movne	r3, #0
 81051b2:	b2db      	uxtb	r3, r3
 81051b4:	e008      	b.n	81051c8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81051b6:	4818      	ldr	r0, [pc, #96]	; (8105218 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81051b8:	f7ff fef6 	bl	8104fa8 <LL_ADC_IsEnabled>
 81051bc:	4603      	mov	r3, r0
 81051be:	2b00      	cmp	r3, #0
 81051c0:	bf0c      	ite	eq
 81051c2:	2301      	moveq	r3, #1
 81051c4:	2300      	movne	r3, #0
 81051c6:	b2db      	uxtb	r3, r3
 81051c8:	2b00      	cmp	r3, #0
 81051ca:	d012      	beq.n	81051f2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81051cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81051ce:	689b      	ldr	r3, [r3, #8]
 81051d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81051d4:	f023 030f 	bic.w	r3, r3, #15
 81051d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81051da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81051dc:	e009      	b.n	81051f2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81051de:	687b      	ldr	r3, [r7, #4]
 81051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051e2:	f043 0220 	orr.w	r2, r3, #32
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81051ea:	2301      	movs	r3, #1
 81051ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81051f0:	e000      	b.n	81051f4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81051f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	2200      	movs	r2, #0
 81051f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81051fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8105200:	4618      	mov	r0, r3
 8105202:	377c      	adds	r7, #124	; 0x7c
 8105204:	46bd      	mov	sp, r7
 8105206:	bd90      	pop	{r4, r7, pc}
 8105208:	40022000 	.word	0x40022000
 810520c:	40022100 	.word	0x40022100
 8105210:	40022300 	.word	0x40022300
 8105214:	58026300 	.word	0x58026300
 8105218:	58026000 	.word	0x58026000

0810521c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810521c:	b480      	push	{r7}
 810521e:	b085      	sub	sp, #20
 8105220:	af00      	add	r7, sp, #0
 8105222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8105224:	687b      	ldr	r3, [r7, #4]
 8105226:	f003 0307 	and.w	r3, r3, #7
 810522a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810522c:	4b0c      	ldr	r3, [pc, #48]	; (8105260 <__NVIC_SetPriorityGrouping+0x44>)
 810522e:	68db      	ldr	r3, [r3, #12]
 8105230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8105232:	68ba      	ldr	r2, [r7, #8]
 8105234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8105238:	4013      	ands	r3, r2
 810523a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810523c:	68fb      	ldr	r3, [r7, #12]
 810523e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8105240:	68bb      	ldr	r3, [r7, #8]
 8105242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8105244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8105248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810524c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810524e:	4a04      	ldr	r2, [pc, #16]	; (8105260 <__NVIC_SetPriorityGrouping+0x44>)
 8105250:	68bb      	ldr	r3, [r7, #8]
 8105252:	60d3      	str	r3, [r2, #12]
}
 8105254:	bf00      	nop
 8105256:	3714      	adds	r7, #20
 8105258:	46bd      	mov	sp, r7
 810525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810525e:	4770      	bx	lr
 8105260:	e000ed00 	.word	0xe000ed00

08105264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8105264:	b480      	push	{r7}
 8105266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8105268:	4b04      	ldr	r3, [pc, #16]	; (810527c <__NVIC_GetPriorityGrouping+0x18>)
 810526a:	68db      	ldr	r3, [r3, #12]
 810526c:	0a1b      	lsrs	r3, r3, #8
 810526e:	f003 0307 	and.w	r3, r3, #7
}
 8105272:	4618      	mov	r0, r3
 8105274:	46bd      	mov	sp, r7
 8105276:	f85d 7b04 	ldr.w	r7, [sp], #4
 810527a:	4770      	bx	lr
 810527c:	e000ed00 	.word	0xe000ed00

08105280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105280:	b480      	push	{r7}
 8105282:	b083      	sub	sp, #12
 8105284:	af00      	add	r7, sp, #0
 8105286:	4603      	mov	r3, r0
 8105288:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810528a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810528e:	2b00      	cmp	r3, #0
 8105290:	db0b      	blt.n	81052aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8105292:	88fb      	ldrh	r3, [r7, #6]
 8105294:	f003 021f 	and.w	r2, r3, #31
 8105298:	4907      	ldr	r1, [pc, #28]	; (81052b8 <__NVIC_EnableIRQ+0x38>)
 810529a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810529e:	095b      	lsrs	r3, r3, #5
 81052a0:	2001      	movs	r0, #1
 81052a2:	fa00 f202 	lsl.w	r2, r0, r2
 81052a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81052aa:	bf00      	nop
 81052ac:	370c      	adds	r7, #12
 81052ae:	46bd      	mov	sp, r7
 81052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052b4:	4770      	bx	lr
 81052b6:	bf00      	nop
 81052b8:	e000e100 	.word	0xe000e100

081052bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81052bc:	b480      	push	{r7}
 81052be:	b083      	sub	sp, #12
 81052c0:	af00      	add	r7, sp, #0
 81052c2:	4603      	mov	r3, r0
 81052c4:	6039      	str	r1, [r7, #0]
 81052c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81052c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81052cc:	2b00      	cmp	r3, #0
 81052ce:	db0a      	blt.n	81052e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81052d0:	683b      	ldr	r3, [r7, #0]
 81052d2:	b2da      	uxtb	r2, r3
 81052d4:	490c      	ldr	r1, [pc, #48]	; (8105308 <__NVIC_SetPriority+0x4c>)
 81052d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81052da:	0112      	lsls	r2, r2, #4
 81052dc:	b2d2      	uxtb	r2, r2
 81052de:	440b      	add	r3, r1
 81052e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81052e4:	e00a      	b.n	81052fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81052e6:	683b      	ldr	r3, [r7, #0]
 81052e8:	b2da      	uxtb	r2, r3
 81052ea:	4908      	ldr	r1, [pc, #32]	; (810530c <__NVIC_SetPriority+0x50>)
 81052ec:	88fb      	ldrh	r3, [r7, #6]
 81052ee:	f003 030f 	and.w	r3, r3, #15
 81052f2:	3b04      	subs	r3, #4
 81052f4:	0112      	lsls	r2, r2, #4
 81052f6:	b2d2      	uxtb	r2, r2
 81052f8:	440b      	add	r3, r1
 81052fa:	761a      	strb	r2, [r3, #24]
}
 81052fc:	bf00      	nop
 81052fe:	370c      	adds	r7, #12
 8105300:	46bd      	mov	sp, r7
 8105302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105306:	4770      	bx	lr
 8105308:	e000e100 	.word	0xe000e100
 810530c:	e000ed00 	.word	0xe000ed00

08105310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105310:	b480      	push	{r7}
 8105312:	b089      	sub	sp, #36	; 0x24
 8105314:	af00      	add	r7, sp, #0
 8105316:	60f8      	str	r0, [r7, #12]
 8105318:	60b9      	str	r1, [r7, #8]
 810531a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810531c:	68fb      	ldr	r3, [r7, #12]
 810531e:	f003 0307 	and.w	r3, r3, #7
 8105322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8105324:	69fb      	ldr	r3, [r7, #28]
 8105326:	f1c3 0307 	rsb	r3, r3, #7
 810532a:	2b04      	cmp	r3, #4
 810532c:	bf28      	it	cs
 810532e:	2304      	movcs	r3, #4
 8105330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8105332:	69fb      	ldr	r3, [r7, #28]
 8105334:	3304      	adds	r3, #4
 8105336:	2b06      	cmp	r3, #6
 8105338:	d902      	bls.n	8105340 <NVIC_EncodePriority+0x30>
 810533a:	69fb      	ldr	r3, [r7, #28]
 810533c:	3b03      	subs	r3, #3
 810533e:	e000      	b.n	8105342 <NVIC_EncodePriority+0x32>
 8105340:	2300      	movs	r3, #0
 8105342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105344:	f04f 32ff 	mov.w	r2, #4294967295
 8105348:	69bb      	ldr	r3, [r7, #24]
 810534a:	fa02 f303 	lsl.w	r3, r2, r3
 810534e:	43da      	mvns	r2, r3
 8105350:	68bb      	ldr	r3, [r7, #8]
 8105352:	401a      	ands	r2, r3
 8105354:	697b      	ldr	r3, [r7, #20]
 8105356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8105358:	f04f 31ff 	mov.w	r1, #4294967295
 810535c:	697b      	ldr	r3, [r7, #20]
 810535e:	fa01 f303 	lsl.w	r3, r1, r3
 8105362:	43d9      	mvns	r1, r3
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105368:	4313      	orrs	r3, r2
         );
}
 810536a:	4618      	mov	r0, r3
 810536c:	3724      	adds	r7, #36	; 0x24
 810536e:	46bd      	mov	sp, r7
 8105370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105374:	4770      	bx	lr
	...

08105378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8105378:	b580      	push	{r7, lr}
 810537a:	b082      	sub	sp, #8
 810537c:	af00      	add	r7, sp, #0
 810537e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8105380:	687b      	ldr	r3, [r7, #4]
 8105382:	3b01      	subs	r3, #1
 8105384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105388:	d301      	bcc.n	810538e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810538a:	2301      	movs	r3, #1
 810538c:	e00f      	b.n	81053ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810538e:	4a0a      	ldr	r2, [pc, #40]	; (81053b8 <SysTick_Config+0x40>)
 8105390:	687b      	ldr	r3, [r7, #4]
 8105392:	3b01      	subs	r3, #1
 8105394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8105396:	210f      	movs	r1, #15
 8105398:	f04f 30ff 	mov.w	r0, #4294967295
 810539c:	f7ff ff8e 	bl	81052bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81053a0:	4b05      	ldr	r3, [pc, #20]	; (81053b8 <SysTick_Config+0x40>)
 81053a2:	2200      	movs	r2, #0
 81053a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81053a6:	4b04      	ldr	r3, [pc, #16]	; (81053b8 <SysTick_Config+0x40>)
 81053a8:	2207      	movs	r2, #7
 81053aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81053ac:	2300      	movs	r3, #0
}
 81053ae:	4618      	mov	r0, r3
 81053b0:	3708      	adds	r7, #8
 81053b2:	46bd      	mov	sp, r7
 81053b4:	bd80      	pop	{r7, pc}
 81053b6:	bf00      	nop
 81053b8:	e000e010 	.word	0xe000e010

081053bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81053bc:	b580      	push	{r7, lr}
 81053be:	b082      	sub	sp, #8
 81053c0:	af00      	add	r7, sp, #0
 81053c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81053c4:	6878      	ldr	r0, [r7, #4]
 81053c6:	f7ff ff29 	bl	810521c <__NVIC_SetPriorityGrouping>
}
 81053ca:	bf00      	nop
 81053cc:	3708      	adds	r7, #8
 81053ce:	46bd      	mov	sp, r7
 81053d0:	bd80      	pop	{r7, pc}

081053d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81053d2:	b580      	push	{r7, lr}
 81053d4:	b086      	sub	sp, #24
 81053d6:	af00      	add	r7, sp, #0
 81053d8:	4603      	mov	r3, r0
 81053da:	60b9      	str	r1, [r7, #8]
 81053dc:	607a      	str	r2, [r7, #4]
 81053de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81053e0:	f7ff ff40 	bl	8105264 <__NVIC_GetPriorityGrouping>
 81053e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81053e6:	687a      	ldr	r2, [r7, #4]
 81053e8:	68b9      	ldr	r1, [r7, #8]
 81053ea:	6978      	ldr	r0, [r7, #20]
 81053ec:	f7ff ff90 	bl	8105310 <NVIC_EncodePriority>
 81053f0:	4602      	mov	r2, r0
 81053f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81053f6:	4611      	mov	r1, r2
 81053f8:	4618      	mov	r0, r3
 81053fa:	f7ff ff5f 	bl	81052bc <__NVIC_SetPriority>
}
 81053fe:	bf00      	nop
 8105400:	3718      	adds	r7, #24
 8105402:	46bd      	mov	sp, r7
 8105404:	bd80      	pop	{r7, pc}

08105406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105406:	b580      	push	{r7, lr}
 8105408:	b082      	sub	sp, #8
 810540a:	af00      	add	r7, sp, #0
 810540c:	4603      	mov	r3, r0
 810540e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8105410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105414:	4618      	mov	r0, r3
 8105416:	f7ff ff33 	bl	8105280 <__NVIC_EnableIRQ>
}
 810541a:	bf00      	nop
 810541c:	3708      	adds	r7, #8
 810541e:	46bd      	mov	sp, r7
 8105420:	bd80      	pop	{r7, pc}

08105422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8105422:	b580      	push	{r7, lr}
 8105424:	b082      	sub	sp, #8
 8105426:	af00      	add	r7, sp, #0
 8105428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810542a:	6878      	ldr	r0, [r7, #4]
 810542c:	f7ff ffa4 	bl	8105378 <SysTick_Config>
 8105430:	4603      	mov	r3, r0
}
 8105432:	4618      	mov	r0, r3
 8105434:	3708      	adds	r7, #8
 8105436:	46bd      	mov	sp, r7
 8105438:	bd80      	pop	{r7, pc}
	...

0810543c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 810543c:	b480      	push	{r7}
 810543e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8105440:	f3bf 8f5f 	dmb	sy
}
 8105444:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8105446:	4b07      	ldr	r3, [pc, #28]	; (8105464 <HAL_MPU_Disable+0x28>)
 8105448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810544a:	4a06      	ldr	r2, [pc, #24]	; (8105464 <HAL_MPU_Disable+0x28>)
 810544c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105450:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8105452:	4b05      	ldr	r3, [pc, #20]	; (8105468 <HAL_MPU_Disable+0x2c>)
 8105454:	2200      	movs	r2, #0
 8105456:	605a      	str	r2, [r3, #4]
}
 8105458:	bf00      	nop
 810545a:	46bd      	mov	sp, r7
 810545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105460:	4770      	bx	lr
 8105462:	bf00      	nop
 8105464:	e000ed00 	.word	0xe000ed00
 8105468:	e000ed90 	.word	0xe000ed90

0810546c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 810546c:	b480      	push	{r7}
 810546e:	b083      	sub	sp, #12
 8105470:	af00      	add	r7, sp, #0
 8105472:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8105474:	4a0b      	ldr	r2, [pc, #44]	; (81054a4 <HAL_MPU_Enable+0x38>)
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	f043 0301 	orr.w	r3, r3, #1
 810547c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 810547e:	4b0a      	ldr	r3, [pc, #40]	; (81054a8 <HAL_MPU_Enable+0x3c>)
 8105480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105482:	4a09      	ldr	r2, [pc, #36]	; (81054a8 <HAL_MPU_Enable+0x3c>)
 8105484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105488:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 810548a:	f3bf 8f4f 	dsb	sy
}
 810548e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105490:	f3bf 8f6f 	isb	sy
}
 8105494:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8105496:	bf00      	nop
 8105498:	370c      	adds	r7, #12
 810549a:	46bd      	mov	sp, r7
 810549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054a0:	4770      	bx	lr
 81054a2:	bf00      	nop
 81054a4:	e000ed90 	.word	0xe000ed90
 81054a8:	e000ed00 	.word	0xe000ed00

081054ac <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 81054ac:	b480      	push	{r7}
 81054ae:	b083      	sub	sp, #12
 81054b0:	af00      	add	r7, sp, #0
 81054b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	785a      	ldrb	r2, [r3, #1]
 81054b8:	4b1d      	ldr	r3, [pc, #116]	; (8105530 <HAL_MPU_ConfigRegion+0x84>)
 81054ba:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	781b      	ldrb	r3, [r3, #0]
 81054c0:	2b00      	cmp	r3, #0
 81054c2:	d029      	beq.n	8105518 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 81054c4:	4a1a      	ldr	r2, [pc, #104]	; (8105530 <HAL_MPU_ConfigRegion+0x84>)
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	685b      	ldr	r3, [r3, #4]
 81054ca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 81054cc:	687b      	ldr	r3, [r7, #4]
 81054ce:	7b1b      	ldrb	r3, [r3, #12]
 81054d0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	7adb      	ldrb	r3, [r3, #11]
 81054d6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 81054d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	7a9b      	ldrb	r3, [r3, #10]
 81054de:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 81054e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	7b5b      	ldrb	r3, [r3, #13]
 81054e6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 81054e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 81054ea:	687b      	ldr	r3, [r7, #4]
 81054ec:	7b9b      	ldrb	r3, [r3, #14]
 81054ee:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 81054f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	7bdb      	ldrb	r3, [r3, #15]
 81054f6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 81054f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	7a5b      	ldrb	r3, [r3, #9]
 81054fe:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8105500:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	7a1b      	ldrb	r3, [r3, #8]
 8105506:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8105508:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 810550a:	687a      	ldr	r2, [r7, #4]
 810550c:	7812      	ldrb	r2, [r2, #0]
 810550e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8105510:	4a07      	ldr	r2, [pc, #28]	; (8105530 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8105512:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8105514:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8105516:	e005      	b.n	8105524 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8105518:	4b05      	ldr	r3, [pc, #20]	; (8105530 <HAL_MPU_ConfigRegion+0x84>)
 810551a:	2200      	movs	r2, #0
 810551c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 810551e:	4b04      	ldr	r3, [pc, #16]	; (8105530 <HAL_MPU_ConfigRegion+0x84>)
 8105520:	2200      	movs	r2, #0
 8105522:	611a      	str	r2, [r3, #16]
}
 8105524:	bf00      	nop
 8105526:	370c      	adds	r7, #12
 8105528:	46bd      	mov	sp, r7
 810552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810552e:	4770      	bx	lr
 8105530:	e000ed90 	.word	0xe000ed90

08105534 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8105534:	b480      	push	{r7}
 8105536:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8105538:	4b07      	ldr	r3, [pc, #28]	; (8105558 <HAL_GetCurrentCPUID+0x24>)
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	091b      	lsrs	r3, r3, #4
 810553e:	f003 030f 	and.w	r3, r3, #15
 8105542:	2b07      	cmp	r3, #7
 8105544:	d101      	bne.n	810554a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8105546:	2303      	movs	r3, #3
 8105548:	e000      	b.n	810554c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810554a:	2301      	movs	r3, #1
  }
}
 810554c:	4618      	mov	r0, r3
 810554e:	46bd      	mov	sp, r7
 8105550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105554:	4770      	bx	lr
 8105556:	bf00      	nop
 8105558:	e000ed00 	.word	0xe000ed00

0810555c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 810555c:	b580      	push	{r7, lr}
 810555e:	b086      	sub	sp, #24
 8105560:	af00      	add	r7, sp, #0
 8105562:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8105564:	f7fe fac4 	bl	8103af0 <HAL_GetTick>
 8105568:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	2b00      	cmp	r3, #0
 810556e:	d101      	bne.n	8105574 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8105570:	2301      	movs	r3, #1
 8105572:	e314      	b.n	8105b9e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105574:	687b      	ldr	r3, [r7, #4]
 8105576:	681b      	ldr	r3, [r3, #0]
 8105578:	4a66      	ldr	r2, [pc, #408]	; (8105714 <HAL_DMA_Init+0x1b8>)
 810557a:	4293      	cmp	r3, r2
 810557c:	d04a      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	4a65      	ldr	r2, [pc, #404]	; (8105718 <HAL_DMA_Init+0x1bc>)
 8105584:	4293      	cmp	r3, r2
 8105586:	d045      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	4a63      	ldr	r2, [pc, #396]	; (810571c <HAL_DMA_Init+0x1c0>)
 810558e:	4293      	cmp	r3, r2
 8105590:	d040      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	681b      	ldr	r3, [r3, #0]
 8105596:	4a62      	ldr	r2, [pc, #392]	; (8105720 <HAL_DMA_Init+0x1c4>)
 8105598:	4293      	cmp	r3, r2
 810559a:	d03b      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 810559c:	687b      	ldr	r3, [r7, #4]
 810559e:	681b      	ldr	r3, [r3, #0]
 81055a0:	4a60      	ldr	r2, [pc, #384]	; (8105724 <HAL_DMA_Init+0x1c8>)
 81055a2:	4293      	cmp	r3, r2
 81055a4:	d036      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	681b      	ldr	r3, [r3, #0]
 81055aa:	4a5f      	ldr	r2, [pc, #380]	; (8105728 <HAL_DMA_Init+0x1cc>)
 81055ac:	4293      	cmp	r3, r2
 81055ae:	d031      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	4a5d      	ldr	r2, [pc, #372]	; (810572c <HAL_DMA_Init+0x1d0>)
 81055b6:	4293      	cmp	r3, r2
 81055b8:	d02c      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 81055ba:	687b      	ldr	r3, [r7, #4]
 81055bc:	681b      	ldr	r3, [r3, #0]
 81055be:	4a5c      	ldr	r2, [pc, #368]	; (8105730 <HAL_DMA_Init+0x1d4>)
 81055c0:	4293      	cmp	r3, r2
 81055c2:	d027      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	681b      	ldr	r3, [r3, #0]
 81055c8:	4a5a      	ldr	r2, [pc, #360]	; (8105734 <HAL_DMA_Init+0x1d8>)
 81055ca:	4293      	cmp	r3, r2
 81055cc:	d022      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	681b      	ldr	r3, [r3, #0]
 81055d2:	4a59      	ldr	r2, [pc, #356]	; (8105738 <HAL_DMA_Init+0x1dc>)
 81055d4:	4293      	cmp	r3, r2
 81055d6:	d01d      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	681b      	ldr	r3, [r3, #0]
 81055dc:	4a57      	ldr	r2, [pc, #348]	; (810573c <HAL_DMA_Init+0x1e0>)
 81055de:	4293      	cmp	r3, r2
 81055e0:	d018      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	681b      	ldr	r3, [r3, #0]
 81055e6:	4a56      	ldr	r2, [pc, #344]	; (8105740 <HAL_DMA_Init+0x1e4>)
 81055e8:	4293      	cmp	r3, r2
 81055ea:	d013      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	681b      	ldr	r3, [r3, #0]
 81055f0:	4a54      	ldr	r2, [pc, #336]	; (8105744 <HAL_DMA_Init+0x1e8>)
 81055f2:	4293      	cmp	r3, r2
 81055f4:	d00e      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 81055f6:	687b      	ldr	r3, [r7, #4]
 81055f8:	681b      	ldr	r3, [r3, #0]
 81055fa:	4a53      	ldr	r2, [pc, #332]	; (8105748 <HAL_DMA_Init+0x1ec>)
 81055fc:	4293      	cmp	r3, r2
 81055fe:	d009      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	681b      	ldr	r3, [r3, #0]
 8105604:	4a51      	ldr	r2, [pc, #324]	; (810574c <HAL_DMA_Init+0x1f0>)
 8105606:	4293      	cmp	r3, r2
 8105608:	d004      	beq.n	8105614 <HAL_DMA_Init+0xb8>
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	681b      	ldr	r3, [r3, #0]
 810560e:	4a50      	ldr	r2, [pc, #320]	; (8105750 <HAL_DMA_Init+0x1f4>)
 8105610:	4293      	cmp	r3, r2
 8105612:	d101      	bne.n	8105618 <HAL_DMA_Init+0xbc>
 8105614:	2301      	movs	r3, #1
 8105616:	e000      	b.n	810561a <HAL_DMA_Init+0xbe>
 8105618:	2300      	movs	r3, #0
 810561a:	2b00      	cmp	r3, #0
 810561c:	f000 813b 	beq.w	8105896 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	2200      	movs	r2, #0
 8105624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8105628:	687b      	ldr	r3, [r7, #4]
 810562a:	2202      	movs	r2, #2
 810562c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	681b      	ldr	r3, [r3, #0]
 8105634:	4a37      	ldr	r2, [pc, #220]	; (8105714 <HAL_DMA_Init+0x1b8>)
 8105636:	4293      	cmp	r3, r2
 8105638:	d04a      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	681b      	ldr	r3, [r3, #0]
 810563e:	4a36      	ldr	r2, [pc, #216]	; (8105718 <HAL_DMA_Init+0x1bc>)
 8105640:	4293      	cmp	r3, r2
 8105642:	d045      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	681b      	ldr	r3, [r3, #0]
 8105648:	4a34      	ldr	r2, [pc, #208]	; (810571c <HAL_DMA_Init+0x1c0>)
 810564a:	4293      	cmp	r3, r2
 810564c:	d040      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	4a33      	ldr	r2, [pc, #204]	; (8105720 <HAL_DMA_Init+0x1c4>)
 8105654:	4293      	cmp	r3, r2
 8105656:	d03b      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	4a31      	ldr	r2, [pc, #196]	; (8105724 <HAL_DMA_Init+0x1c8>)
 810565e:	4293      	cmp	r3, r2
 8105660:	d036      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	681b      	ldr	r3, [r3, #0]
 8105666:	4a30      	ldr	r2, [pc, #192]	; (8105728 <HAL_DMA_Init+0x1cc>)
 8105668:	4293      	cmp	r3, r2
 810566a:	d031      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	681b      	ldr	r3, [r3, #0]
 8105670:	4a2e      	ldr	r2, [pc, #184]	; (810572c <HAL_DMA_Init+0x1d0>)
 8105672:	4293      	cmp	r3, r2
 8105674:	d02c      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	4a2d      	ldr	r2, [pc, #180]	; (8105730 <HAL_DMA_Init+0x1d4>)
 810567c:	4293      	cmp	r3, r2
 810567e:	d027      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	4a2b      	ldr	r2, [pc, #172]	; (8105734 <HAL_DMA_Init+0x1d8>)
 8105686:	4293      	cmp	r3, r2
 8105688:	d022      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	4a2a      	ldr	r2, [pc, #168]	; (8105738 <HAL_DMA_Init+0x1dc>)
 8105690:	4293      	cmp	r3, r2
 8105692:	d01d      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	4a28      	ldr	r2, [pc, #160]	; (810573c <HAL_DMA_Init+0x1e0>)
 810569a:	4293      	cmp	r3, r2
 810569c:	d018      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	4a27      	ldr	r2, [pc, #156]	; (8105740 <HAL_DMA_Init+0x1e4>)
 81056a4:	4293      	cmp	r3, r2
 81056a6:	d013      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	4a25      	ldr	r2, [pc, #148]	; (8105744 <HAL_DMA_Init+0x1e8>)
 81056ae:	4293      	cmp	r3, r2
 81056b0:	d00e      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	4a24      	ldr	r2, [pc, #144]	; (8105748 <HAL_DMA_Init+0x1ec>)
 81056b8:	4293      	cmp	r3, r2
 81056ba:	d009      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	681b      	ldr	r3, [r3, #0]
 81056c0:	4a22      	ldr	r2, [pc, #136]	; (810574c <HAL_DMA_Init+0x1f0>)
 81056c2:	4293      	cmp	r3, r2
 81056c4:	d004      	beq.n	81056d0 <HAL_DMA_Init+0x174>
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	4a21      	ldr	r2, [pc, #132]	; (8105750 <HAL_DMA_Init+0x1f4>)
 81056cc:	4293      	cmp	r3, r2
 81056ce:	d108      	bne.n	81056e2 <HAL_DMA_Init+0x186>
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	681a      	ldr	r2, [r3, #0]
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	681b      	ldr	r3, [r3, #0]
 81056da:	f022 0201 	bic.w	r2, r2, #1
 81056de:	601a      	str	r2, [r3, #0]
 81056e0:	e007      	b.n	81056f2 <HAL_DMA_Init+0x196>
 81056e2:	687b      	ldr	r3, [r7, #4]
 81056e4:	681b      	ldr	r3, [r3, #0]
 81056e6:	681a      	ldr	r2, [r3, #0]
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	681b      	ldr	r3, [r3, #0]
 81056ec:	f022 0201 	bic.w	r2, r2, #1
 81056f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81056f2:	e02f      	b.n	8105754 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81056f4:	f7fe f9fc 	bl	8103af0 <HAL_GetTick>
 81056f8:	4602      	mov	r2, r0
 81056fa:	693b      	ldr	r3, [r7, #16]
 81056fc:	1ad3      	subs	r3, r2, r3
 81056fe:	2b05      	cmp	r3, #5
 8105700:	d928      	bls.n	8105754 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	2220      	movs	r2, #32
 8105706:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	2203      	movs	r2, #3
 810570c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8105710:	2301      	movs	r3, #1
 8105712:	e244      	b.n	8105b9e <HAL_DMA_Init+0x642>
 8105714:	40020010 	.word	0x40020010
 8105718:	40020028 	.word	0x40020028
 810571c:	40020040 	.word	0x40020040
 8105720:	40020058 	.word	0x40020058
 8105724:	40020070 	.word	0x40020070
 8105728:	40020088 	.word	0x40020088
 810572c:	400200a0 	.word	0x400200a0
 8105730:	400200b8 	.word	0x400200b8
 8105734:	40020410 	.word	0x40020410
 8105738:	40020428 	.word	0x40020428
 810573c:	40020440 	.word	0x40020440
 8105740:	40020458 	.word	0x40020458
 8105744:	40020470 	.word	0x40020470
 8105748:	40020488 	.word	0x40020488
 810574c:	400204a0 	.word	0x400204a0
 8105750:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	f003 0301 	and.w	r3, r3, #1
 810575e:	2b00      	cmp	r3, #0
 8105760:	d1c8      	bne.n	81056f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8105762:	687b      	ldr	r3, [r7, #4]
 8105764:	681b      	ldr	r3, [r3, #0]
 8105766:	681b      	ldr	r3, [r3, #0]
 8105768:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810576a:	697a      	ldr	r2, [r7, #20]
 810576c:	4b84      	ldr	r3, [pc, #528]	; (8105980 <HAL_DMA_Init+0x424>)
 810576e:	4013      	ands	r3, r2
 8105770:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810577a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	691b      	ldr	r3, [r3, #16]
 8105780:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8105786:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	699b      	ldr	r3, [r3, #24]
 810578c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8105792:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	6a1b      	ldr	r3, [r3, #32]
 8105798:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810579a:	697a      	ldr	r2, [r7, #20]
 810579c:	4313      	orrs	r3, r2
 810579e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81057a4:	2b04      	cmp	r3, #4
 81057a6:	d107      	bne.n	81057b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81057a8:	687b      	ldr	r3, [r7, #4]
 81057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057b0:	4313      	orrs	r3, r2
 81057b2:	697a      	ldr	r2, [r7, #20]
 81057b4:	4313      	orrs	r3, r2
 81057b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81057b8:	4b72      	ldr	r3, [pc, #456]	; (8105984 <HAL_DMA_Init+0x428>)
 81057ba:	681b      	ldr	r3, [r3, #0]
 81057bc:	0c1b      	lsrs	r3, r3, #16
 81057be:	041b      	lsls	r3, r3, #16
 81057c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81057c4:	d328      	bcc.n	8105818 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81057c6:	687b      	ldr	r3, [r7, #4]
 81057c8:	685b      	ldr	r3, [r3, #4]
 81057ca:	2b28      	cmp	r3, #40	; 0x28
 81057cc:	d903      	bls.n	81057d6 <HAL_DMA_Init+0x27a>
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	685b      	ldr	r3, [r3, #4]
 81057d2:	2b2e      	cmp	r3, #46	; 0x2e
 81057d4:	d917      	bls.n	8105806 <HAL_DMA_Init+0x2aa>
 81057d6:	687b      	ldr	r3, [r7, #4]
 81057d8:	685b      	ldr	r3, [r3, #4]
 81057da:	2b3e      	cmp	r3, #62	; 0x3e
 81057dc:	d903      	bls.n	81057e6 <HAL_DMA_Init+0x28a>
 81057de:	687b      	ldr	r3, [r7, #4]
 81057e0:	685b      	ldr	r3, [r3, #4]
 81057e2:	2b42      	cmp	r3, #66	; 0x42
 81057e4:	d90f      	bls.n	8105806 <HAL_DMA_Init+0x2aa>
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	685b      	ldr	r3, [r3, #4]
 81057ea:	2b46      	cmp	r3, #70	; 0x46
 81057ec:	d903      	bls.n	81057f6 <HAL_DMA_Init+0x29a>
 81057ee:	687b      	ldr	r3, [r7, #4]
 81057f0:	685b      	ldr	r3, [r3, #4]
 81057f2:	2b48      	cmp	r3, #72	; 0x48
 81057f4:	d907      	bls.n	8105806 <HAL_DMA_Init+0x2aa>
 81057f6:	687b      	ldr	r3, [r7, #4]
 81057f8:	685b      	ldr	r3, [r3, #4]
 81057fa:	2b4e      	cmp	r3, #78	; 0x4e
 81057fc:	d905      	bls.n	810580a <HAL_DMA_Init+0x2ae>
 81057fe:	687b      	ldr	r3, [r7, #4]
 8105800:	685b      	ldr	r3, [r3, #4]
 8105802:	2b52      	cmp	r3, #82	; 0x52
 8105804:	d801      	bhi.n	810580a <HAL_DMA_Init+0x2ae>
 8105806:	2301      	movs	r3, #1
 8105808:	e000      	b.n	810580c <HAL_DMA_Init+0x2b0>
 810580a:	2300      	movs	r3, #0
 810580c:	2b00      	cmp	r3, #0
 810580e:	d003      	beq.n	8105818 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8105810:	697b      	ldr	r3, [r7, #20]
 8105812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105816:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	681b      	ldr	r3, [r3, #0]
 810581c:	697a      	ldr	r2, [r7, #20]
 810581e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	681b      	ldr	r3, [r3, #0]
 8105824:	695b      	ldr	r3, [r3, #20]
 8105826:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8105828:	697b      	ldr	r3, [r7, #20]
 810582a:	f023 0307 	bic.w	r3, r3, #7
 810582e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105834:	697a      	ldr	r2, [r7, #20]
 8105836:	4313      	orrs	r3, r2
 8105838:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810583e:	2b04      	cmp	r3, #4
 8105840:	d117      	bne.n	8105872 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105846:	697a      	ldr	r2, [r7, #20]
 8105848:	4313      	orrs	r3, r2
 810584a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105850:	2b00      	cmp	r3, #0
 8105852:	d00e      	beq.n	8105872 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8105854:	6878      	ldr	r0, [r7, #4]
 8105856:	f002 fb49 	bl	8107eec <DMA_CheckFifoParam>
 810585a:	4603      	mov	r3, r0
 810585c:	2b00      	cmp	r3, #0
 810585e:	d008      	beq.n	8105872 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	2240      	movs	r2, #64	; 0x40
 8105864:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105866:	687b      	ldr	r3, [r7, #4]
 8105868:	2201      	movs	r2, #1
 810586a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 810586e:	2301      	movs	r3, #1
 8105870:	e195      	b.n	8105b9e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8105872:	687b      	ldr	r3, [r7, #4]
 8105874:	681b      	ldr	r3, [r3, #0]
 8105876:	697a      	ldr	r2, [r7, #20]
 8105878:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810587a:	6878      	ldr	r0, [r7, #4]
 810587c:	f002 fa84 	bl	8107d88 <DMA_CalcBaseAndBitshift>
 8105880:	4603      	mov	r3, r0
 8105882:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105884:	687b      	ldr	r3, [r7, #4]
 8105886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105888:	f003 031f 	and.w	r3, r3, #31
 810588c:	223f      	movs	r2, #63	; 0x3f
 810588e:	409a      	lsls	r2, r3
 8105890:	68bb      	ldr	r3, [r7, #8]
 8105892:	609a      	str	r2, [r3, #8]
 8105894:	e0cb      	b.n	8105a2e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8105896:	687b      	ldr	r3, [r7, #4]
 8105898:	681b      	ldr	r3, [r3, #0]
 810589a:	4a3b      	ldr	r2, [pc, #236]	; (8105988 <HAL_DMA_Init+0x42c>)
 810589c:	4293      	cmp	r3, r2
 810589e:	d022      	beq.n	81058e6 <HAL_DMA_Init+0x38a>
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	4a39      	ldr	r2, [pc, #228]	; (810598c <HAL_DMA_Init+0x430>)
 81058a6:	4293      	cmp	r3, r2
 81058a8:	d01d      	beq.n	81058e6 <HAL_DMA_Init+0x38a>
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	4a38      	ldr	r2, [pc, #224]	; (8105990 <HAL_DMA_Init+0x434>)
 81058b0:	4293      	cmp	r3, r2
 81058b2:	d018      	beq.n	81058e6 <HAL_DMA_Init+0x38a>
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	681b      	ldr	r3, [r3, #0]
 81058b8:	4a36      	ldr	r2, [pc, #216]	; (8105994 <HAL_DMA_Init+0x438>)
 81058ba:	4293      	cmp	r3, r2
 81058bc:	d013      	beq.n	81058e6 <HAL_DMA_Init+0x38a>
 81058be:	687b      	ldr	r3, [r7, #4]
 81058c0:	681b      	ldr	r3, [r3, #0]
 81058c2:	4a35      	ldr	r2, [pc, #212]	; (8105998 <HAL_DMA_Init+0x43c>)
 81058c4:	4293      	cmp	r3, r2
 81058c6:	d00e      	beq.n	81058e6 <HAL_DMA_Init+0x38a>
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	681b      	ldr	r3, [r3, #0]
 81058cc:	4a33      	ldr	r2, [pc, #204]	; (810599c <HAL_DMA_Init+0x440>)
 81058ce:	4293      	cmp	r3, r2
 81058d0:	d009      	beq.n	81058e6 <HAL_DMA_Init+0x38a>
 81058d2:	687b      	ldr	r3, [r7, #4]
 81058d4:	681b      	ldr	r3, [r3, #0]
 81058d6:	4a32      	ldr	r2, [pc, #200]	; (81059a0 <HAL_DMA_Init+0x444>)
 81058d8:	4293      	cmp	r3, r2
 81058da:	d004      	beq.n	81058e6 <HAL_DMA_Init+0x38a>
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	681b      	ldr	r3, [r3, #0]
 81058e0:	4a30      	ldr	r2, [pc, #192]	; (81059a4 <HAL_DMA_Init+0x448>)
 81058e2:	4293      	cmp	r3, r2
 81058e4:	d101      	bne.n	81058ea <HAL_DMA_Init+0x38e>
 81058e6:	2301      	movs	r3, #1
 81058e8:	e000      	b.n	81058ec <HAL_DMA_Init+0x390>
 81058ea:	2300      	movs	r3, #0
 81058ec:	2b00      	cmp	r3, #0
 81058ee:	f000 8095 	beq.w	8105a1c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81058f2:	687b      	ldr	r3, [r7, #4]
 81058f4:	681b      	ldr	r3, [r3, #0]
 81058f6:	4a24      	ldr	r2, [pc, #144]	; (8105988 <HAL_DMA_Init+0x42c>)
 81058f8:	4293      	cmp	r3, r2
 81058fa:	d021      	beq.n	8105940 <HAL_DMA_Init+0x3e4>
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	4a22      	ldr	r2, [pc, #136]	; (810598c <HAL_DMA_Init+0x430>)
 8105902:	4293      	cmp	r3, r2
 8105904:	d01c      	beq.n	8105940 <HAL_DMA_Init+0x3e4>
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	681b      	ldr	r3, [r3, #0]
 810590a:	4a21      	ldr	r2, [pc, #132]	; (8105990 <HAL_DMA_Init+0x434>)
 810590c:	4293      	cmp	r3, r2
 810590e:	d017      	beq.n	8105940 <HAL_DMA_Init+0x3e4>
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	4a1f      	ldr	r2, [pc, #124]	; (8105994 <HAL_DMA_Init+0x438>)
 8105916:	4293      	cmp	r3, r2
 8105918:	d012      	beq.n	8105940 <HAL_DMA_Init+0x3e4>
 810591a:	687b      	ldr	r3, [r7, #4]
 810591c:	681b      	ldr	r3, [r3, #0]
 810591e:	4a1e      	ldr	r2, [pc, #120]	; (8105998 <HAL_DMA_Init+0x43c>)
 8105920:	4293      	cmp	r3, r2
 8105922:	d00d      	beq.n	8105940 <HAL_DMA_Init+0x3e4>
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	681b      	ldr	r3, [r3, #0]
 8105928:	4a1c      	ldr	r2, [pc, #112]	; (810599c <HAL_DMA_Init+0x440>)
 810592a:	4293      	cmp	r3, r2
 810592c:	d008      	beq.n	8105940 <HAL_DMA_Init+0x3e4>
 810592e:	687b      	ldr	r3, [r7, #4]
 8105930:	681b      	ldr	r3, [r3, #0]
 8105932:	4a1b      	ldr	r2, [pc, #108]	; (81059a0 <HAL_DMA_Init+0x444>)
 8105934:	4293      	cmp	r3, r2
 8105936:	d003      	beq.n	8105940 <HAL_DMA_Init+0x3e4>
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	681b      	ldr	r3, [r3, #0]
 810593c:	4a19      	ldr	r2, [pc, #100]	; (81059a4 <HAL_DMA_Init+0x448>)
 810593e:	4293      	cmp	r3, r2
 8105940:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8105942:	687b      	ldr	r3, [r7, #4]
 8105944:	2200      	movs	r2, #0
 8105946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810594a:	687b      	ldr	r3, [r7, #4]
 810594c:	2202      	movs	r2, #2
 810594e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8105952:	687b      	ldr	r3, [r7, #4]
 8105954:	681b      	ldr	r3, [r3, #0]
 8105956:	681b      	ldr	r3, [r3, #0]
 8105958:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810595a:	697b      	ldr	r3, [r7, #20]
 810595c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8105960:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8105964:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8105966:	687b      	ldr	r3, [r7, #4]
 8105968:	689b      	ldr	r3, [r3, #8]
 810596a:	2b40      	cmp	r3, #64	; 0x40
 810596c:	d01c      	beq.n	81059a8 <HAL_DMA_Init+0x44c>
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	689b      	ldr	r3, [r3, #8]
 8105972:	2b80      	cmp	r3, #128	; 0x80
 8105974:	d102      	bne.n	810597c <HAL_DMA_Init+0x420>
 8105976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810597a:	e016      	b.n	81059aa <HAL_DMA_Init+0x44e>
 810597c:	2300      	movs	r3, #0
 810597e:	e014      	b.n	81059aa <HAL_DMA_Init+0x44e>
 8105980:	fe10803f 	.word	0xfe10803f
 8105984:	5c001000 	.word	0x5c001000
 8105988:	58025408 	.word	0x58025408
 810598c:	5802541c 	.word	0x5802541c
 8105990:	58025430 	.word	0x58025430
 8105994:	58025444 	.word	0x58025444
 8105998:	58025458 	.word	0x58025458
 810599c:	5802546c 	.word	0x5802546c
 81059a0:	58025480 	.word	0x58025480
 81059a4:	58025494 	.word	0x58025494
 81059a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81059aa:	687a      	ldr	r2, [r7, #4]
 81059ac:	68d2      	ldr	r2, [r2, #12]
 81059ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81059b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	691b      	ldr	r3, [r3, #16]
 81059b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81059b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81059ba:	687b      	ldr	r3, [r7, #4]
 81059bc:	695b      	ldr	r3, [r3, #20]
 81059be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81059c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	699b      	ldr	r3, [r3, #24]
 81059c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81059c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	69db      	ldr	r3, [r3, #28]
 81059ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81059d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	6a1b      	ldr	r3, [r3, #32]
 81059d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81059d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81059da:	697a      	ldr	r2, [r7, #20]
 81059dc:	4313      	orrs	r3, r2
 81059de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81059e0:	687b      	ldr	r3, [r7, #4]
 81059e2:	681b      	ldr	r3, [r3, #0]
 81059e4:	697a      	ldr	r2, [r7, #20]
 81059e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	461a      	mov	r2, r3
 81059ee:	4b6e      	ldr	r3, [pc, #440]	; (8105ba8 <HAL_DMA_Init+0x64c>)
 81059f0:	4413      	add	r3, r2
 81059f2:	4a6e      	ldr	r2, [pc, #440]	; (8105bac <HAL_DMA_Init+0x650>)
 81059f4:	fba2 2303 	umull	r2, r3, r2, r3
 81059f8:	091b      	lsrs	r3, r3, #4
 81059fa:	009a      	lsls	r2, r3, #2
 81059fc:	687b      	ldr	r3, [r7, #4]
 81059fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8105a00:	6878      	ldr	r0, [r7, #4]
 8105a02:	f002 f9c1 	bl	8107d88 <DMA_CalcBaseAndBitshift>
 8105a06:	4603      	mov	r3, r0
 8105a08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105a0a:	687b      	ldr	r3, [r7, #4]
 8105a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a0e:	f003 031f 	and.w	r3, r3, #31
 8105a12:	2201      	movs	r2, #1
 8105a14:	409a      	lsls	r2, r3
 8105a16:	68fb      	ldr	r3, [r7, #12]
 8105a18:	605a      	str	r2, [r3, #4]
 8105a1a:	e008      	b.n	8105a2e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	2240      	movs	r2, #64	; 0x40
 8105a20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	2203      	movs	r2, #3
 8105a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8105a2a:	2301      	movs	r3, #1
 8105a2c:	e0b7      	b.n	8105b9e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105a2e:	687b      	ldr	r3, [r7, #4]
 8105a30:	681b      	ldr	r3, [r3, #0]
 8105a32:	4a5f      	ldr	r2, [pc, #380]	; (8105bb0 <HAL_DMA_Init+0x654>)
 8105a34:	4293      	cmp	r3, r2
 8105a36:	d072      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	681b      	ldr	r3, [r3, #0]
 8105a3c:	4a5d      	ldr	r2, [pc, #372]	; (8105bb4 <HAL_DMA_Init+0x658>)
 8105a3e:	4293      	cmp	r3, r2
 8105a40:	d06d      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	4a5c      	ldr	r2, [pc, #368]	; (8105bb8 <HAL_DMA_Init+0x65c>)
 8105a48:	4293      	cmp	r3, r2
 8105a4a:	d068      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	681b      	ldr	r3, [r3, #0]
 8105a50:	4a5a      	ldr	r2, [pc, #360]	; (8105bbc <HAL_DMA_Init+0x660>)
 8105a52:	4293      	cmp	r3, r2
 8105a54:	d063      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	4a59      	ldr	r2, [pc, #356]	; (8105bc0 <HAL_DMA_Init+0x664>)
 8105a5c:	4293      	cmp	r3, r2
 8105a5e:	d05e      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	681b      	ldr	r3, [r3, #0]
 8105a64:	4a57      	ldr	r2, [pc, #348]	; (8105bc4 <HAL_DMA_Init+0x668>)
 8105a66:	4293      	cmp	r3, r2
 8105a68:	d059      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a6a:	687b      	ldr	r3, [r7, #4]
 8105a6c:	681b      	ldr	r3, [r3, #0]
 8105a6e:	4a56      	ldr	r2, [pc, #344]	; (8105bc8 <HAL_DMA_Init+0x66c>)
 8105a70:	4293      	cmp	r3, r2
 8105a72:	d054      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	681b      	ldr	r3, [r3, #0]
 8105a78:	4a54      	ldr	r2, [pc, #336]	; (8105bcc <HAL_DMA_Init+0x670>)
 8105a7a:	4293      	cmp	r3, r2
 8105a7c:	d04f      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	681b      	ldr	r3, [r3, #0]
 8105a82:	4a53      	ldr	r2, [pc, #332]	; (8105bd0 <HAL_DMA_Init+0x674>)
 8105a84:	4293      	cmp	r3, r2
 8105a86:	d04a      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	4a51      	ldr	r2, [pc, #324]	; (8105bd4 <HAL_DMA_Init+0x678>)
 8105a8e:	4293      	cmp	r3, r2
 8105a90:	d045      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	681b      	ldr	r3, [r3, #0]
 8105a96:	4a50      	ldr	r2, [pc, #320]	; (8105bd8 <HAL_DMA_Init+0x67c>)
 8105a98:	4293      	cmp	r3, r2
 8105a9a:	d040      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	681b      	ldr	r3, [r3, #0]
 8105aa0:	4a4e      	ldr	r2, [pc, #312]	; (8105bdc <HAL_DMA_Init+0x680>)
 8105aa2:	4293      	cmp	r3, r2
 8105aa4:	d03b      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	4a4d      	ldr	r2, [pc, #308]	; (8105be0 <HAL_DMA_Init+0x684>)
 8105aac:	4293      	cmp	r3, r2
 8105aae:	d036      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	681b      	ldr	r3, [r3, #0]
 8105ab4:	4a4b      	ldr	r2, [pc, #300]	; (8105be4 <HAL_DMA_Init+0x688>)
 8105ab6:	4293      	cmp	r3, r2
 8105ab8:	d031      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	4a4a      	ldr	r2, [pc, #296]	; (8105be8 <HAL_DMA_Init+0x68c>)
 8105ac0:	4293      	cmp	r3, r2
 8105ac2:	d02c      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	681b      	ldr	r3, [r3, #0]
 8105ac8:	4a48      	ldr	r2, [pc, #288]	; (8105bec <HAL_DMA_Init+0x690>)
 8105aca:	4293      	cmp	r3, r2
 8105acc:	d027      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105ace:	687b      	ldr	r3, [r7, #4]
 8105ad0:	681b      	ldr	r3, [r3, #0]
 8105ad2:	4a47      	ldr	r2, [pc, #284]	; (8105bf0 <HAL_DMA_Init+0x694>)
 8105ad4:	4293      	cmp	r3, r2
 8105ad6:	d022      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	681b      	ldr	r3, [r3, #0]
 8105adc:	4a45      	ldr	r2, [pc, #276]	; (8105bf4 <HAL_DMA_Init+0x698>)
 8105ade:	4293      	cmp	r3, r2
 8105ae0:	d01d      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105ae2:	687b      	ldr	r3, [r7, #4]
 8105ae4:	681b      	ldr	r3, [r3, #0]
 8105ae6:	4a44      	ldr	r2, [pc, #272]	; (8105bf8 <HAL_DMA_Init+0x69c>)
 8105ae8:	4293      	cmp	r3, r2
 8105aea:	d018      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	4a42      	ldr	r2, [pc, #264]	; (8105bfc <HAL_DMA_Init+0x6a0>)
 8105af2:	4293      	cmp	r3, r2
 8105af4:	d013      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	4a41      	ldr	r2, [pc, #260]	; (8105c00 <HAL_DMA_Init+0x6a4>)
 8105afc:	4293      	cmp	r3, r2
 8105afe:	d00e      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	4a3f      	ldr	r2, [pc, #252]	; (8105c04 <HAL_DMA_Init+0x6a8>)
 8105b06:	4293      	cmp	r3, r2
 8105b08:	d009      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	4a3e      	ldr	r2, [pc, #248]	; (8105c08 <HAL_DMA_Init+0x6ac>)
 8105b10:	4293      	cmp	r3, r2
 8105b12:	d004      	beq.n	8105b1e <HAL_DMA_Init+0x5c2>
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	681b      	ldr	r3, [r3, #0]
 8105b18:	4a3c      	ldr	r2, [pc, #240]	; (8105c0c <HAL_DMA_Init+0x6b0>)
 8105b1a:	4293      	cmp	r3, r2
 8105b1c:	d101      	bne.n	8105b22 <HAL_DMA_Init+0x5c6>
 8105b1e:	2301      	movs	r3, #1
 8105b20:	e000      	b.n	8105b24 <HAL_DMA_Init+0x5c8>
 8105b22:	2300      	movs	r3, #0
 8105b24:	2b00      	cmp	r3, #0
 8105b26:	d032      	beq.n	8105b8e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8105b28:	6878      	ldr	r0, [r7, #4]
 8105b2a:	f002 fa5b 	bl	8107fe4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8105b2e:	687b      	ldr	r3, [r7, #4]
 8105b30:	689b      	ldr	r3, [r3, #8]
 8105b32:	2b80      	cmp	r3, #128	; 0x80
 8105b34:	d102      	bne.n	8105b3c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	2200      	movs	r2, #0
 8105b3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8105b3c:	687b      	ldr	r3, [r7, #4]
 8105b3e:	685a      	ldr	r2, [r3, #4]
 8105b40:	687b      	ldr	r3, [r7, #4]
 8105b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105b44:	b2d2      	uxtb	r2, r2
 8105b46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105b4c:	687a      	ldr	r2, [r7, #4]
 8105b4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105b50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8105b52:	687b      	ldr	r3, [r7, #4]
 8105b54:	685b      	ldr	r3, [r3, #4]
 8105b56:	2b00      	cmp	r3, #0
 8105b58:	d010      	beq.n	8105b7c <HAL_DMA_Init+0x620>
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	685b      	ldr	r3, [r3, #4]
 8105b5e:	2b08      	cmp	r3, #8
 8105b60:	d80c      	bhi.n	8105b7c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8105b62:	6878      	ldr	r0, [r7, #4]
 8105b64:	f002 fad8 	bl	8108118 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105b6c:	2200      	movs	r2, #0
 8105b6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105b70:	687b      	ldr	r3, [r7, #4]
 8105b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105b74:	687a      	ldr	r2, [r7, #4]
 8105b76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105b78:	605a      	str	r2, [r3, #4]
 8105b7a:	e008      	b.n	8105b8e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	2200      	movs	r2, #0
 8105b80:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	2200      	movs	r2, #0
 8105b86:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	2200      	movs	r2, #0
 8105b8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8105b8e:	687b      	ldr	r3, [r7, #4]
 8105b90:	2200      	movs	r2, #0
 8105b92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8105b94:	687b      	ldr	r3, [r7, #4]
 8105b96:	2201      	movs	r2, #1
 8105b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8105b9c:	2300      	movs	r3, #0
}
 8105b9e:	4618      	mov	r0, r3
 8105ba0:	3718      	adds	r7, #24
 8105ba2:	46bd      	mov	sp, r7
 8105ba4:	bd80      	pop	{r7, pc}
 8105ba6:	bf00      	nop
 8105ba8:	a7fdabf8 	.word	0xa7fdabf8
 8105bac:	cccccccd 	.word	0xcccccccd
 8105bb0:	40020010 	.word	0x40020010
 8105bb4:	40020028 	.word	0x40020028
 8105bb8:	40020040 	.word	0x40020040
 8105bbc:	40020058 	.word	0x40020058
 8105bc0:	40020070 	.word	0x40020070
 8105bc4:	40020088 	.word	0x40020088
 8105bc8:	400200a0 	.word	0x400200a0
 8105bcc:	400200b8 	.word	0x400200b8
 8105bd0:	40020410 	.word	0x40020410
 8105bd4:	40020428 	.word	0x40020428
 8105bd8:	40020440 	.word	0x40020440
 8105bdc:	40020458 	.word	0x40020458
 8105be0:	40020470 	.word	0x40020470
 8105be4:	40020488 	.word	0x40020488
 8105be8:	400204a0 	.word	0x400204a0
 8105bec:	400204b8 	.word	0x400204b8
 8105bf0:	58025408 	.word	0x58025408
 8105bf4:	5802541c 	.word	0x5802541c
 8105bf8:	58025430 	.word	0x58025430
 8105bfc:	58025444 	.word	0x58025444
 8105c00:	58025458 	.word	0x58025458
 8105c04:	5802546c 	.word	0x5802546c
 8105c08:	58025480 	.word	0x58025480
 8105c0c:	58025494 	.word	0x58025494

08105c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8105c10:	b580      	push	{r7, lr}
 8105c12:	b086      	sub	sp, #24
 8105c14:	af00      	add	r7, sp, #0
 8105c16:	60f8      	str	r0, [r7, #12]
 8105c18:	60b9      	str	r1, [r7, #8]
 8105c1a:	607a      	str	r2, [r7, #4]
 8105c1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8105c1e:	2300      	movs	r3, #0
 8105c20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105c22:	68fb      	ldr	r3, [r7, #12]
 8105c24:	2b00      	cmp	r3, #0
 8105c26:	d101      	bne.n	8105c2c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8105c28:	2301      	movs	r3, #1
 8105c2a:	e226      	b.n	810607a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8105c2c:	68fb      	ldr	r3, [r7, #12]
 8105c2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8105c32:	2b01      	cmp	r3, #1
 8105c34:	d101      	bne.n	8105c3a <HAL_DMA_Start_IT+0x2a>
 8105c36:	2302      	movs	r3, #2
 8105c38:	e21f      	b.n	810607a <HAL_DMA_Start_IT+0x46a>
 8105c3a:	68fb      	ldr	r3, [r7, #12]
 8105c3c:	2201      	movs	r2, #1
 8105c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8105c42:	68fb      	ldr	r3, [r7, #12]
 8105c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105c48:	b2db      	uxtb	r3, r3
 8105c4a:	2b01      	cmp	r3, #1
 8105c4c:	f040 820a 	bne.w	8106064 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8105c50:	68fb      	ldr	r3, [r7, #12]
 8105c52:	2202      	movs	r2, #2
 8105c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8105c58:	68fb      	ldr	r3, [r7, #12]
 8105c5a:	2200      	movs	r2, #0
 8105c5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8105c5e:	68fb      	ldr	r3, [r7, #12]
 8105c60:	681b      	ldr	r3, [r3, #0]
 8105c62:	4a68      	ldr	r2, [pc, #416]	; (8105e04 <HAL_DMA_Start_IT+0x1f4>)
 8105c64:	4293      	cmp	r3, r2
 8105c66:	d04a      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105c68:	68fb      	ldr	r3, [r7, #12]
 8105c6a:	681b      	ldr	r3, [r3, #0]
 8105c6c:	4a66      	ldr	r2, [pc, #408]	; (8105e08 <HAL_DMA_Start_IT+0x1f8>)
 8105c6e:	4293      	cmp	r3, r2
 8105c70:	d045      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105c72:	68fb      	ldr	r3, [r7, #12]
 8105c74:	681b      	ldr	r3, [r3, #0]
 8105c76:	4a65      	ldr	r2, [pc, #404]	; (8105e0c <HAL_DMA_Start_IT+0x1fc>)
 8105c78:	4293      	cmp	r3, r2
 8105c7a:	d040      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105c7c:	68fb      	ldr	r3, [r7, #12]
 8105c7e:	681b      	ldr	r3, [r3, #0]
 8105c80:	4a63      	ldr	r2, [pc, #396]	; (8105e10 <HAL_DMA_Start_IT+0x200>)
 8105c82:	4293      	cmp	r3, r2
 8105c84:	d03b      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105c86:	68fb      	ldr	r3, [r7, #12]
 8105c88:	681b      	ldr	r3, [r3, #0]
 8105c8a:	4a62      	ldr	r2, [pc, #392]	; (8105e14 <HAL_DMA_Start_IT+0x204>)
 8105c8c:	4293      	cmp	r3, r2
 8105c8e:	d036      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105c90:	68fb      	ldr	r3, [r7, #12]
 8105c92:	681b      	ldr	r3, [r3, #0]
 8105c94:	4a60      	ldr	r2, [pc, #384]	; (8105e18 <HAL_DMA_Start_IT+0x208>)
 8105c96:	4293      	cmp	r3, r2
 8105c98:	d031      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105c9a:	68fb      	ldr	r3, [r7, #12]
 8105c9c:	681b      	ldr	r3, [r3, #0]
 8105c9e:	4a5f      	ldr	r2, [pc, #380]	; (8105e1c <HAL_DMA_Start_IT+0x20c>)
 8105ca0:	4293      	cmp	r3, r2
 8105ca2:	d02c      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105ca4:	68fb      	ldr	r3, [r7, #12]
 8105ca6:	681b      	ldr	r3, [r3, #0]
 8105ca8:	4a5d      	ldr	r2, [pc, #372]	; (8105e20 <HAL_DMA_Start_IT+0x210>)
 8105caa:	4293      	cmp	r3, r2
 8105cac:	d027      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105cae:	68fb      	ldr	r3, [r7, #12]
 8105cb0:	681b      	ldr	r3, [r3, #0]
 8105cb2:	4a5c      	ldr	r2, [pc, #368]	; (8105e24 <HAL_DMA_Start_IT+0x214>)
 8105cb4:	4293      	cmp	r3, r2
 8105cb6:	d022      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105cb8:	68fb      	ldr	r3, [r7, #12]
 8105cba:	681b      	ldr	r3, [r3, #0]
 8105cbc:	4a5a      	ldr	r2, [pc, #360]	; (8105e28 <HAL_DMA_Start_IT+0x218>)
 8105cbe:	4293      	cmp	r3, r2
 8105cc0:	d01d      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105cc2:	68fb      	ldr	r3, [r7, #12]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	4a59      	ldr	r2, [pc, #356]	; (8105e2c <HAL_DMA_Start_IT+0x21c>)
 8105cc8:	4293      	cmp	r3, r2
 8105cca:	d018      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105ccc:	68fb      	ldr	r3, [r7, #12]
 8105cce:	681b      	ldr	r3, [r3, #0]
 8105cd0:	4a57      	ldr	r2, [pc, #348]	; (8105e30 <HAL_DMA_Start_IT+0x220>)
 8105cd2:	4293      	cmp	r3, r2
 8105cd4:	d013      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105cd6:	68fb      	ldr	r3, [r7, #12]
 8105cd8:	681b      	ldr	r3, [r3, #0]
 8105cda:	4a56      	ldr	r2, [pc, #344]	; (8105e34 <HAL_DMA_Start_IT+0x224>)
 8105cdc:	4293      	cmp	r3, r2
 8105cde:	d00e      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105ce0:	68fb      	ldr	r3, [r7, #12]
 8105ce2:	681b      	ldr	r3, [r3, #0]
 8105ce4:	4a54      	ldr	r2, [pc, #336]	; (8105e38 <HAL_DMA_Start_IT+0x228>)
 8105ce6:	4293      	cmp	r3, r2
 8105ce8:	d009      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105cea:	68fb      	ldr	r3, [r7, #12]
 8105cec:	681b      	ldr	r3, [r3, #0]
 8105cee:	4a53      	ldr	r2, [pc, #332]	; (8105e3c <HAL_DMA_Start_IT+0x22c>)
 8105cf0:	4293      	cmp	r3, r2
 8105cf2:	d004      	beq.n	8105cfe <HAL_DMA_Start_IT+0xee>
 8105cf4:	68fb      	ldr	r3, [r7, #12]
 8105cf6:	681b      	ldr	r3, [r3, #0]
 8105cf8:	4a51      	ldr	r2, [pc, #324]	; (8105e40 <HAL_DMA_Start_IT+0x230>)
 8105cfa:	4293      	cmp	r3, r2
 8105cfc:	d108      	bne.n	8105d10 <HAL_DMA_Start_IT+0x100>
 8105cfe:	68fb      	ldr	r3, [r7, #12]
 8105d00:	681b      	ldr	r3, [r3, #0]
 8105d02:	681a      	ldr	r2, [r3, #0]
 8105d04:	68fb      	ldr	r3, [r7, #12]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	f022 0201 	bic.w	r2, r2, #1
 8105d0c:	601a      	str	r2, [r3, #0]
 8105d0e:	e007      	b.n	8105d20 <HAL_DMA_Start_IT+0x110>
 8105d10:	68fb      	ldr	r3, [r7, #12]
 8105d12:	681b      	ldr	r3, [r3, #0]
 8105d14:	681a      	ldr	r2, [r3, #0]
 8105d16:	68fb      	ldr	r3, [r7, #12]
 8105d18:	681b      	ldr	r3, [r3, #0]
 8105d1a:	f022 0201 	bic.w	r2, r2, #1
 8105d1e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8105d20:	683b      	ldr	r3, [r7, #0]
 8105d22:	687a      	ldr	r2, [r7, #4]
 8105d24:	68b9      	ldr	r1, [r7, #8]
 8105d26:	68f8      	ldr	r0, [r7, #12]
 8105d28:	f001 fe82 	bl	8107a30 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105d2c:	68fb      	ldr	r3, [r7, #12]
 8105d2e:	681b      	ldr	r3, [r3, #0]
 8105d30:	4a34      	ldr	r2, [pc, #208]	; (8105e04 <HAL_DMA_Start_IT+0x1f4>)
 8105d32:	4293      	cmp	r3, r2
 8105d34:	d04a      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d36:	68fb      	ldr	r3, [r7, #12]
 8105d38:	681b      	ldr	r3, [r3, #0]
 8105d3a:	4a33      	ldr	r2, [pc, #204]	; (8105e08 <HAL_DMA_Start_IT+0x1f8>)
 8105d3c:	4293      	cmp	r3, r2
 8105d3e:	d045      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d40:	68fb      	ldr	r3, [r7, #12]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	4a31      	ldr	r2, [pc, #196]	; (8105e0c <HAL_DMA_Start_IT+0x1fc>)
 8105d46:	4293      	cmp	r3, r2
 8105d48:	d040      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d4a:	68fb      	ldr	r3, [r7, #12]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	4a30      	ldr	r2, [pc, #192]	; (8105e10 <HAL_DMA_Start_IT+0x200>)
 8105d50:	4293      	cmp	r3, r2
 8105d52:	d03b      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d54:	68fb      	ldr	r3, [r7, #12]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	4a2e      	ldr	r2, [pc, #184]	; (8105e14 <HAL_DMA_Start_IT+0x204>)
 8105d5a:	4293      	cmp	r3, r2
 8105d5c:	d036      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d5e:	68fb      	ldr	r3, [r7, #12]
 8105d60:	681b      	ldr	r3, [r3, #0]
 8105d62:	4a2d      	ldr	r2, [pc, #180]	; (8105e18 <HAL_DMA_Start_IT+0x208>)
 8105d64:	4293      	cmp	r3, r2
 8105d66:	d031      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d68:	68fb      	ldr	r3, [r7, #12]
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	4a2b      	ldr	r2, [pc, #172]	; (8105e1c <HAL_DMA_Start_IT+0x20c>)
 8105d6e:	4293      	cmp	r3, r2
 8105d70:	d02c      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d72:	68fb      	ldr	r3, [r7, #12]
 8105d74:	681b      	ldr	r3, [r3, #0]
 8105d76:	4a2a      	ldr	r2, [pc, #168]	; (8105e20 <HAL_DMA_Start_IT+0x210>)
 8105d78:	4293      	cmp	r3, r2
 8105d7a:	d027      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d7c:	68fb      	ldr	r3, [r7, #12]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	4a28      	ldr	r2, [pc, #160]	; (8105e24 <HAL_DMA_Start_IT+0x214>)
 8105d82:	4293      	cmp	r3, r2
 8105d84:	d022      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d86:	68fb      	ldr	r3, [r7, #12]
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	4a27      	ldr	r2, [pc, #156]	; (8105e28 <HAL_DMA_Start_IT+0x218>)
 8105d8c:	4293      	cmp	r3, r2
 8105d8e:	d01d      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d90:	68fb      	ldr	r3, [r7, #12]
 8105d92:	681b      	ldr	r3, [r3, #0]
 8105d94:	4a25      	ldr	r2, [pc, #148]	; (8105e2c <HAL_DMA_Start_IT+0x21c>)
 8105d96:	4293      	cmp	r3, r2
 8105d98:	d018      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105d9a:	68fb      	ldr	r3, [r7, #12]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	4a24      	ldr	r2, [pc, #144]	; (8105e30 <HAL_DMA_Start_IT+0x220>)
 8105da0:	4293      	cmp	r3, r2
 8105da2:	d013      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105da4:	68fb      	ldr	r3, [r7, #12]
 8105da6:	681b      	ldr	r3, [r3, #0]
 8105da8:	4a22      	ldr	r2, [pc, #136]	; (8105e34 <HAL_DMA_Start_IT+0x224>)
 8105daa:	4293      	cmp	r3, r2
 8105dac:	d00e      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105dae:	68fb      	ldr	r3, [r7, #12]
 8105db0:	681b      	ldr	r3, [r3, #0]
 8105db2:	4a21      	ldr	r2, [pc, #132]	; (8105e38 <HAL_DMA_Start_IT+0x228>)
 8105db4:	4293      	cmp	r3, r2
 8105db6:	d009      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105db8:	68fb      	ldr	r3, [r7, #12]
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	4a1f      	ldr	r2, [pc, #124]	; (8105e3c <HAL_DMA_Start_IT+0x22c>)
 8105dbe:	4293      	cmp	r3, r2
 8105dc0:	d004      	beq.n	8105dcc <HAL_DMA_Start_IT+0x1bc>
 8105dc2:	68fb      	ldr	r3, [r7, #12]
 8105dc4:	681b      	ldr	r3, [r3, #0]
 8105dc6:	4a1e      	ldr	r2, [pc, #120]	; (8105e40 <HAL_DMA_Start_IT+0x230>)
 8105dc8:	4293      	cmp	r3, r2
 8105dca:	d101      	bne.n	8105dd0 <HAL_DMA_Start_IT+0x1c0>
 8105dcc:	2301      	movs	r3, #1
 8105dce:	e000      	b.n	8105dd2 <HAL_DMA_Start_IT+0x1c2>
 8105dd0:	2300      	movs	r3, #0
 8105dd2:	2b00      	cmp	r3, #0
 8105dd4:	d036      	beq.n	8105e44 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8105dd6:	68fb      	ldr	r3, [r7, #12]
 8105dd8:	681b      	ldr	r3, [r3, #0]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	f023 021e 	bic.w	r2, r3, #30
 8105de0:	68fb      	ldr	r3, [r7, #12]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	f042 0216 	orr.w	r2, r2, #22
 8105de8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8105dea:	68fb      	ldr	r3, [r7, #12]
 8105dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105dee:	2b00      	cmp	r3, #0
 8105df0:	d03e      	beq.n	8105e70 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8105df2:	68fb      	ldr	r3, [r7, #12]
 8105df4:	681b      	ldr	r3, [r3, #0]
 8105df6:	681a      	ldr	r2, [r3, #0]
 8105df8:	68fb      	ldr	r3, [r7, #12]
 8105dfa:	681b      	ldr	r3, [r3, #0]
 8105dfc:	f042 0208 	orr.w	r2, r2, #8
 8105e00:	601a      	str	r2, [r3, #0]
 8105e02:	e035      	b.n	8105e70 <HAL_DMA_Start_IT+0x260>
 8105e04:	40020010 	.word	0x40020010
 8105e08:	40020028 	.word	0x40020028
 8105e0c:	40020040 	.word	0x40020040
 8105e10:	40020058 	.word	0x40020058
 8105e14:	40020070 	.word	0x40020070
 8105e18:	40020088 	.word	0x40020088
 8105e1c:	400200a0 	.word	0x400200a0
 8105e20:	400200b8 	.word	0x400200b8
 8105e24:	40020410 	.word	0x40020410
 8105e28:	40020428 	.word	0x40020428
 8105e2c:	40020440 	.word	0x40020440
 8105e30:	40020458 	.word	0x40020458
 8105e34:	40020470 	.word	0x40020470
 8105e38:	40020488 	.word	0x40020488
 8105e3c:	400204a0 	.word	0x400204a0
 8105e40:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8105e44:	68fb      	ldr	r3, [r7, #12]
 8105e46:	681b      	ldr	r3, [r3, #0]
 8105e48:	681b      	ldr	r3, [r3, #0]
 8105e4a:	f023 020e 	bic.w	r2, r3, #14
 8105e4e:	68fb      	ldr	r3, [r7, #12]
 8105e50:	681b      	ldr	r3, [r3, #0]
 8105e52:	f042 020a 	orr.w	r2, r2, #10
 8105e56:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8105e58:	68fb      	ldr	r3, [r7, #12]
 8105e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e5c:	2b00      	cmp	r3, #0
 8105e5e:	d007      	beq.n	8105e70 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8105e60:	68fb      	ldr	r3, [r7, #12]
 8105e62:	681b      	ldr	r3, [r3, #0]
 8105e64:	681a      	ldr	r2, [r3, #0]
 8105e66:	68fb      	ldr	r3, [r7, #12]
 8105e68:	681b      	ldr	r3, [r3, #0]
 8105e6a:	f042 0204 	orr.w	r2, r2, #4
 8105e6e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105e70:	68fb      	ldr	r3, [r7, #12]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	4a83      	ldr	r2, [pc, #524]	; (8106084 <HAL_DMA_Start_IT+0x474>)
 8105e76:	4293      	cmp	r3, r2
 8105e78:	d072      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105e7a:	68fb      	ldr	r3, [r7, #12]
 8105e7c:	681b      	ldr	r3, [r3, #0]
 8105e7e:	4a82      	ldr	r2, [pc, #520]	; (8106088 <HAL_DMA_Start_IT+0x478>)
 8105e80:	4293      	cmp	r3, r2
 8105e82:	d06d      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105e84:	68fb      	ldr	r3, [r7, #12]
 8105e86:	681b      	ldr	r3, [r3, #0]
 8105e88:	4a80      	ldr	r2, [pc, #512]	; (810608c <HAL_DMA_Start_IT+0x47c>)
 8105e8a:	4293      	cmp	r3, r2
 8105e8c:	d068      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105e8e:	68fb      	ldr	r3, [r7, #12]
 8105e90:	681b      	ldr	r3, [r3, #0]
 8105e92:	4a7f      	ldr	r2, [pc, #508]	; (8106090 <HAL_DMA_Start_IT+0x480>)
 8105e94:	4293      	cmp	r3, r2
 8105e96:	d063      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105e98:	68fb      	ldr	r3, [r7, #12]
 8105e9a:	681b      	ldr	r3, [r3, #0]
 8105e9c:	4a7d      	ldr	r2, [pc, #500]	; (8106094 <HAL_DMA_Start_IT+0x484>)
 8105e9e:	4293      	cmp	r3, r2
 8105ea0:	d05e      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105ea2:	68fb      	ldr	r3, [r7, #12]
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	4a7c      	ldr	r2, [pc, #496]	; (8106098 <HAL_DMA_Start_IT+0x488>)
 8105ea8:	4293      	cmp	r3, r2
 8105eaa:	d059      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105eac:	68fb      	ldr	r3, [r7, #12]
 8105eae:	681b      	ldr	r3, [r3, #0]
 8105eb0:	4a7a      	ldr	r2, [pc, #488]	; (810609c <HAL_DMA_Start_IT+0x48c>)
 8105eb2:	4293      	cmp	r3, r2
 8105eb4:	d054      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105eb6:	68fb      	ldr	r3, [r7, #12]
 8105eb8:	681b      	ldr	r3, [r3, #0]
 8105eba:	4a79      	ldr	r2, [pc, #484]	; (81060a0 <HAL_DMA_Start_IT+0x490>)
 8105ebc:	4293      	cmp	r3, r2
 8105ebe:	d04f      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105ec0:	68fb      	ldr	r3, [r7, #12]
 8105ec2:	681b      	ldr	r3, [r3, #0]
 8105ec4:	4a77      	ldr	r2, [pc, #476]	; (81060a4 <HAL_DMA_Start_IT+0x494>)
 8105ec6:	4293      	cmp	r3, r2
 8105ec8:	d04a      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105eca:	68fb      	ldr	r3, [r7, #12]
 8105ecc:	681b      	ldr	r3, [r3, #0]
 8105ece:	4a76      	ldr	r2, [pc, #472]	; (81060a8 <HAL_DMA_Start_IT+0x498>)
 8105ed0:	4293      	cmp	r3, r2
 8105ed2:	d045      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105ed4:	68fb      	ldr	r3, [r7, #12]
 8105ed6:	681b      	ldr	r3, [r3, #0]
 8105ed8:	4a74      	ldr	r2, [pc, #464]	; (81060ac <HAL_DMA_Start_IT+0x49c>)
 8105eda:	4293      	cmp	r3, r2
 8105edc:	d040      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105ede:	68fb      	ldr	r3, [r7, #12]
 8105ee0:	681b      	ldr	r3, [r3, #0]
 8105ee2:	4a73      	ldr	r2, [pc, #460]	; (81060b0 <HAL_DMA_Start_IT+0x4a0>)
 8105ee4:	4293      	cmp	r3, r2
 8105ee6:	d03b      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105ee8:	68fb      	ldr	r3, [r7, #12]
 8105eea:	681b      	ldr	r3, [r3, #0]
 8105eec:	4a71      	ldr	r2, [pc, #452]	; (81060b4 <HAL_DMA_Start_IT+0x4a4>)
 8105eee:	4293      	cmp	r3, r2
 8105ef0:	d036      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105ef2:	68fb      	ldr	r3, [r7, #12]
 8105ef4:	681b      	ldr	r3, [r3, #0]
 8105ef6:	4a70      	ldr	r2, [pc, #448]	; (81060b8 <HAL_DMA_Start_IT+0x4a8>)
 8105ef8:	4293      	cmp	r3, r2
 8105efa:	d031      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105efc:	68fb      	ldr	r3, [r7, #12]
 8105efe:	681b      	ldr	r3, [r3, #0]
 8105f00:	4a6e      	ldr	r2, [pc, #440]	; (81060bc <HAL_DMA_Start_IT+0x4ac>)
 8105f02:	4293      	cmp	r3, r2
 8105f04:	d02c      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105f06:	68fb      	ldr	r3, [r7, #12]
 8105f08:	681b      	ldr	r3, [r3, #0]
 8105f0a:	4a6d      	ldr	r2, [pc, #436]	; (81060c0 <HAL_DMA_Start_IT+0x4b0>)
 8105f0c:	4293      	cmp	r3, r2
 8105f0e:	d027      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105f10:	68fb      	ldr	r3, [r7, #12]
 8105f12:	681b      	ldr	r3, [r3, #0]
 8105f14:	4a6b      	ldr	r2, [pc, #428]	; (81060c4 <HAL_DMA_Start_IT+0x4b4>)
 8105f16:	4293      	cmp	r3, r2
 8105f18:	d022      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105f1a:	68fb      	ldr	r3, [r7, #12]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	4a6a      	ldr	r2, [pc, #424]	; (81060c8 <HAL_DMA_Start_IT+0x4b8>)
 8105f20:	4293      	cmp	r3, r2
 8105f22:	d01d      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105f24:	68fb      	ldr	r3, [r7, #12]
 8105f26:	681b      	ldr	r3, [r3, #0]
 8105f28:	4a68      	ldr	r2, [pc, #416]	; (81060cc <HAL_DMA_Start_IT+0x4bc>)
 8105f2a:	4293      	cmp	r3, r2
 8105f2c:	d018      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105f2e:	68fb      	ldr	r3, [r7, #12]
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	4a67      	ldr	r2, [pc, #412]	; (81060d0 <HAL_DMA_Start_IT+0x4c0>)
 8105f34:	4293      	cmp	r3, r2
 8105f36:	d013      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105f38:	68fb      	ldr	r3, [r7, #12]
 8105f3a:	681b      	ldr	r3, [r3, #0]
 8105f3c:	4a65      	ldr	r2, [pc, #404]	; (81060d4 <HAL_DMA_Start_IT+0x4c4>)
 8105f3e:	4293      	cmp	r3, r2
 8105f40:	d00e      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105f42:	68fb      	ldr	r3, [r7, #12]
 8105f44:	681b      	ldr	r3, [r3, #0]
 8105f46:	4a64      	ldr	r2, [pc, #400]	; (81060d8 <HAL_DMA_Start_IT+0x4c8>)
 8105f48:	4293      	cmp	r3, r2
 8105f4a:	d009      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105f4c:	68fb      	ldr	r3, [r7, #12]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	4a62      	ldr	r2, [pc, #392]	; (81060dc <HAL_DMA_Start_IT+0x4cc>)
 8105f52:	4293      	cmp	r3, r2
 8105f54:	d004      	beq.n	8105f60 <HAL_DMA_Start_IT+0x350>
 8105f56:	68fb      	ldr	r3, [r7, #12]
 8105f58:	681b      	ldr	r3, [r3, #0]
 8105f5a:	4a61      	ldr	r2, [pc, #388]	; (81060e0 <HAL_DMA_Start_IT+0x4d0>)
 8105f5c:	4293      	cmp	r3, r2
 8105f5e:	d101      	bne.n	8105f64 <HAL_DMA_Start_IT+0x354>
 8105f60:	2301      	movs	r3, #1
 8105f62:	e000      	b.n	8105f66 <HAL_DMA_Start_IT+0x356>
 8105f64:	2300      	movs	r3, #0
 8105f66:	2b00      	cmp	r3, #0
 8105f68:	d01a      	beq.n	8105fa0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8105f6a:	68fb      	ldr	r3, [r7, #12]
 8105f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105f74:	2b00      	cmp	r3, #0
 8105f76:	d007      	beq.n	8105f88 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8105f78:	68fb      	ldr	r3, [r7, #12]
 8105f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f7c:	681a      	ldr	r2, [r3, #0]
 8105f7e:	68fb      	ldr	r3, [r7, #12]
 8105f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8105f86:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8105f88:	68fb      	ldr	r3, [r7, #12]
 8105f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105f8c:	2b00      	cmp	r3, #0
 8105f8e:	d007      	beq.n	8105fa0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8105f90:	68fb      	ldr	r3, [r7, #12]
 8105f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105f94:	681a      	ldr	r2, [r3, #0]
 8105f96:	68fb      	ldr	r3, [r7, #12]
 8105f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8105f9e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8105fa0:	68fb      	ldr	r3, [r7, #12]
 8105fa2:	681b      	ldr	r3, [r3, #0]
 8105fa4:	4a37      	ldr	r2, [pc, #220]	; (8106084 <HAL_DMA_Start_IT+0x474>)
 8105fa6:	4293      	cmp	r3, r2
 8105fa8:	d04a      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8105faa:	68fb      	ldr	r3, [r7, #12]
 8105fac:	681b      	ldr	r3, [r3, #0]
 8105fae:	4a36      	ldr	r2, [pc, #216]	; (8106088 <HAL_DMA_Start_IT+0x478>)
 8105fb0:	4293      	cmp	r3, r2
 8105fb2:	d045      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8105fb4:	68fb      	ldr	r3, [r7, #12]
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	4a34      	ldr	r2, [pc, #208]	; (810608c <HAL_DMA_Start_IT+0x47c>)
 8105fba:	4293      	cmp	r3, r2
 8105fbc:	d040      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8105fbe:	68fb      	ldr	r3, [r7, #12]
 8105fc0:	681b      	ldr	r3, [r3, #0]
 8105fc2:	4a33      	ldr	r2, [pc, #204]	; (8106090 <HAL_DMA_Start_IT+0x480>)
 8105fc4:	4293      	cmp	r3, r2
 8105fc6:	d03b      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8105fc8:	68fb      	ldr	r3, [r7, #12]
 8105fca:	681b      	ldr	r3, [r3, #0]
 8105fcc:	4a31      	ldr	r2, [pc, #196]	; (8106094 <HAL_DMA_Start_IT+0x484>)
 8105fce:	4293      	cmp	r3, r2
 8105fd0:	d036      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8105fd2:	68fb      	ldr	r3, [r7, #12]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	4a30      	ldr	r2, [pc, #192]	; (8106098 <HAL_DMA_Start_IT+0x488>)
 8105fd8:	4293      	cmp	r3, r2
 8105fda:	d031      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8105fdc:	68fb      	ldr	r3, [r7, #12]
 8105fde:	681b      	ldr	r3, [r3, #0]
 8105fe0:	4a2e      	ldr	r2, [pc, #184]	; (810609c <HAL_DMA_Start_IT+0x48c>)
 8105fe2:	4293      	cmp	r3, r2
 8105fe4:	d02c      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8105fe6:	68fb      	ldr	r3, [r7, #12]
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	4a2d      	ldr	r2, [pc, #180]	; (81060a0 <HAL_DMA_Start_IT+0x490>)
 8105fec:	4293      	cmp	r3, r2
 8105fee:	d027      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8105ff0:	68fb      	ldr	r3, [r7, #12]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	4a2b      	ldr	r2, [pc, #172]	; (81060a4 <HAL_DMA_Start_IT+0x494>)
 8105ff6:	4293      	cmp	r3, r2
 8105ff8:	d022      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8105ffa:	68fb      	ldr	r3, [r7, #12]
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	4a2a      	ldr	r2, [pc, #168]	; (81060a8 <HAL_DMA_Start_IT+0x498>)
 8106000:	4293      	cmp	r3, r2
 8106002:	d01d      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8106004:	68fb      	ldr	r3, [r7, #12]
 8106006:	681b      	ldr	r3, [r3, #0]
 8106008:	4a28      	ldr	r2, [pc, #160]	; (81060ac <HAL_DMA_Start_IT+0x49c>)
 810600a:	4293      	cmp	r3, r2
 810600c:	d018      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 810600e:	68fb      	ldr	r3, [r7, #12]
 8106010:	681b      	ldr	r3, [r3, #0]
 8106012:	4a27      	ldr	r2, [pc, #156]	; (81060b0 <HAL_DMA_Start_IT+0x4a0>)
 8106014:	4293      	cmp	r3, r2
 8106016:	d013      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8106018:	68fb      	ldr	r3, [r7, #12]
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	4a25      	ldr	r2, [pc, #148]	; (81060b4 <HAL_DMA_Start_IT+0x4a4>)
 810601e:	4293      	cmp	r3, r2
 8106020:	d00e      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8106022:	68fb      	ldr	r3, [r7, #12]
 8106024:	681b      	ldr	r3, [r3, #0]
 8106026:	4a24      	ldr	r2, [pc, #144]	; (81060b8 <HAL_DMA_Start_IT+0x4a8>)
 8106028:	4293      	cmp	r3, r2
 810602a:	d009      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 810602c:	68fb      	ldr	r3, [r7, #12]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	4a22      	ldr	r2, [pc, #136]	; (81060bc <HAL_DMA_Start_IT+0x4ac>)
 8106032:	4293      	cmp	r3, r2
 8106034:	d004      	beq.n	8106040 <HAL_DMA_Start_IT+0x430>
 8106036:	68fb      	ldr	r3, [r7, #12]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	4a21      	ldr	r2, [pc, #132]	; (81060c0 <HAL_DMA_Start_IT+0x4b0>)
 810603c:	4293      	cmp	r3, r2
 810603e:	d108      	bne.n	8106052 <HAL_DMA_Start_IT+0x442>
 8106040:	68fb      	ldr	r3, [r7, #12]
 8106042:	681b      	ldr	r3, [r3, #0]
 8106044:	681a      	ldr	r2, [r3, #0]
 8106046:	68fb      	ldr	r3, [r7, #12]
 8106048:	681b      	ldr	r3, [r3, #0]
 810604a:	f042 0201 	orr.w	r2, r2, #1
 810604e:	601a      	str	r2, [r3, #0]
 8106050:	e012      	b.n	8106078 <HAL_DMA_Start_IT+0x468>
 8106052:	68fb      	ldr	r3, [r7, #12]
 8106054:	681b      	ldr	r3, [r3, #0]
 8106056:	681a      	ldr	r2, [r3, #0]
 8106058:	68fb      	ldr	r3, [r7, #12]
 810605a:	681b      	ldr	r3, [r3, #0]
 810605c:	f042 0201 	orr.w	r2, r2, #1
 8106060:	601a      	str	r2, [r3, #0]
 8106062:	e009      	b.n	8106078 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8106064:	68fb      	ldr	r3, [r7, #12]
 8106066:	2200      	movs	r2, #0
 8106068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 810606c:	68fb      	ldr	r3, [r7, #12]
 810606e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106072:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8106074:	2301      	movs	r3, #1
 8106076:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8106078:	7dfb      	ldrb	r3, [r7, #23]
}
 810607a:	4618      	mov	r0, r3
 810607c:	3718      	adds	r7, #24
 810607e:	46bd      	mov	sp, r7
 8106080:	bd80      	pop	{r7, pc}
 8106082:	bf00      	nop
 8106084:	40020010 	.word	0x40020010
 8106088:	40020028 	.word	0x40020028
 810608c:	40020040 	.word	0x40020040
 8106090:	40020058 	.word	0x40020058
 8106094:	40020070 	.word	0x40020070
 8106098:	40020088 	.word	0x40020088
 810609c:	400200a0 	.word	0x400200a0
 81060a0:	400200b8 	.word	0x400200b8
 81060a4:	40020410 	.word	0x40020410
 81060a8:	40020428 	.word	0x40020428
 81060ac:	40020440 	.word	0x40020440
 81060b0:	40020458 	.word	0x40020458
 81060b4:	40020470 	.word	0x40020470
 81060b8:	40020488 	.word	0x40020488
 81060bc:	400204a0 	.word	0x400204a0
 81060c0:	400204b8 	.word	0x400204b8
 81060c4:	58025408 	.word	0x58025408
 81060c8:	5802541c 	.word	0x5802541c
 81060cc:	58025430 	.word	0x58025430
 81060d0:	58025444 	.word	0x58025444
 81060d4:	58025458 	.word	0x58025458
 81060d8:	5802546c 	.word	0x5802546c
 81060dc:	58025480 	.word	0x58025480
 81060e0:	58025494 	.word	0x58025494

081060e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81060e4:	b580      	push	{r7, lr}
 81060e6:	b086      	sub	sp, #24
 81060e8:	af00      	add	r7, sp, #0
 81060ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81060ec:	f7fd fd00 	bl	8103af0 <HAL_GetTick>
 81060f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	2b00      	cmp	r3, #0
 81060f6:	d101      	bne.n	81060fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81060f8:	2301      	movs	r3, #1
 81060fa:	e2dc      	b.n	81066b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8106102:	b2db      	uxtb	r3, r3
 8106104:	2b02      	cmp	r3, #2
 8106106:	d008      	beq.n	810611a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	2280      	movs	r2, #128	; 0x80
 810610c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	2200      	movs	r2, #0
 8106112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8106116:	2301      	movs	r3, #1
 8106118:	e2cd      	b.n	81066b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	681b      	ldr	r3, [r3, #0]
 810611e:	4a76      	ldr	r2, [pc, #472]	; (81062f8 <HAL_DMA_Abort+0x214>)
 8106120:	4293      	cmp	r3, r2
 8106122:	d04a      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	4a74      	ldr	r2, [pc, #464]	; (81062fc <HAL_DMA_Abort+0x218>)
 810612a:	4293      	cmp	r3, r2
 810612c:	d045      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	681b      	ldr	r3, [r3, #0]
 8106132:	4a73      	ldr	r2, [pc, #460]	; (8106300 <HAL_DMA_Abort+0x21c>)
 8106134:	4293      	cmp	r3, r2
 8106136:	d040      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	681b      	ldr	r3, [r3, #0]
 810613c:	4a71      	ldr	r2, [pc, #452]	; (8106304 <HAL_DMA_Abort+0x220>)
 810613e:	4293      	cmp	r3, r2
 8106140:	d03b      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	681b      	ldr	r3, [r3, #0]
 8106146:	4a70      	ldr	r2, [pc, #448]	; (8106308 <HAL_DMA_Abort+0x224>)
 8106148:	4293      	cmp	r3, r2
 810614a:	d036      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	681b      	ldr	r3, [r3, #0]
 8106150:	4a6e      	ldr	r2, [pc, #440]	; (810630c <HAL_DMA_Abort+0x228>)
 8106152:	4293      	cmp	r3, r2
 8106154:	d031      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 8106156:	687b      	ldr	r3, [r7, #4]
 8106158:	681b      	ldr	r3, [r3, #0]
 810615a:	4a6d      	ldr	r2, [pc, #436]	; (8106310 <HAL_DMA_Abort+0x22c>)
 810615c:	4293      	cmp	r3, r2
 810615e:	d02c      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	681b      	ldr	r3, [r3, #0]
 8106164:	4a6b      	ldr	r2, [pc, #428]	; (8106314 <HAL_DMA_Abort+0x230>)
 8106166:	4293      	cmp	r3, r2
 8106168:	d027      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	4a6a      	ldr	r2, [pc, #424]	; (8106318 <HAL_DMA_Abort+0x234>)
 8106170:	4293      	cmp	r3, r2
 8106172:	d022      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	681b      	ldr	r3, [r3, #0]
 8106178:	4a68      	ldr	r2, [pc, #416]	; (810631c <HAL_DMA_Abort+0x238>)
 810617a:	4293      	cmp	r3, r2
 810617c:	d01d      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	4a67      	ldr	r2, [pc, #412]	; (8106320 <HAL_DMA_Abort+0x23c>)
 8106184:	4293      	cmp	r3, r2
 8106186:	d018      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	681b      	ldr	r3, [r3, #0]
 810618c:	4a65      	ldr	r2, [pc, #404]	; (8106324 <HAL_DMA_Abort+0x240>)
 810618e:	4293      	cmp	r3, r2
 8106190:	d013      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	4a64      	ldr	r2, [pc, #400]	; (8106328 <HAL_DMA_Abort+0x244>)
 8106198:	4293      	cmp	r3, r2
 810619a:	d00e      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	4a62      	ldr	r2, [pc, #392]	; (810632c <HAL_DMA_Abort+0x248>)
 81061a2:	4293      	cmp	r3, r2
 81061a4:	d009      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	4a61      	ldr	r2, [pc, #388]	; (8106330 <HAL_DMA_Abort+0x24c>)
 81061ac:	4293      	cmp	r3, r2
 81061ae:	d004      	beq.n	81061ba <HAL_DMA_Abort+0xd6>
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	4a5f      	ldr	r2, [pc, #380]	; (8106334 <HAL_DMA_Abort+0x250>)
 81061b6:	4293      	cmp	r3, r2
 81061b8:	d101      	bne.n	81061be <HAL_DMA_Abort+0xda>
 81061ba:	2301      	movs	r3, #1
 81061bc:	e000      	b.n	81061c0 <HAL_DMA_Abort+0xdc>
 81061be:	2300      	movs	r3, #0
 81061c0:	2b00      	cmp	r3, #0
 81061c2:	d013      	beq.n	81061ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	681a      	ldr	r2, [r3, #0]
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	681b      	ldr	r3, [r3, #0]
 81061ce:	f022 021e 	bic.w	r2, r2, #30
 81061d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	695a      	ldr	r2, [r3, #20]
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	681b      	ldr	r3, [r3, #0]
 81061de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81061e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	681b      	ldr	r3, [r3, #0]
 81061e8:	617b      	str	r3, [r7, #20]
 81061ea:	e00a      	b.n	8106202 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	681a      	ldr	r2, [r3, #0]
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	f022 020e 	bic.w	r2, r2, #14
 81061fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8106202:	687b      	ldr	r3, [r7, #4]
 8106204:	681b      	ldr	r3, [r3, #0]
 8106206:	4a3c      	ldr	r2, [pc, #240]	; (81062f8 <HAL_DMA_Abort+0x214>)
 8106208:	4293      	cmp	r3, r2
 810620a:	d072      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	4a3a      	ldr	r2, [pc, #232]	; (81062fc <HAL_DMA_Abort+0x218>)
 8106212:	4293      	cmp	r3, r2
 8106214:	d06d      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	681b      	ldr	r3, [r3, #0]
 810621a:	4a39      	ldr	r2, [pc, #228]	; (8106300 <HAL_DMA_Abort+0x21c>)
 810621c:	4293      	cmp	r3, r2
 810621e:	d068      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 8106220:	687b      	ldr	r3, [r7, #4]
 8106222:	681b      	ldr	r3, [r3, #0]
 8106224:	4a37      	ldr	r2, [pc, #220]	; (8106304 <HAL_DMA_Abort+0x220>)
 8106226:	4293      	cmp	r3, r2
 8106228:	d063      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	681b      	ldr	r3, [r3, #0]
 810622e:	4a36      	ldr	r2, [pc, #216]	; (8106308 <HAL_DMA_Abort+0x224>)
 8106230:	4293      	cmp	r3, r2
 8106232:	d05e      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 8106234:	687b      	ldr	r3, [r7, #4]
 8106236:	681b      	ldr	r3, [r3, #0]
 8106238:	4a34      	ldr	r2, [pc, #208]	; (810630c <HAL_DMA_Abort+0x228>)
 810623a:	4293      	cmp	r3, r2
 810623c:	d059      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	4a33      	ldr	r2, [pc, #204]	; (8106310 <HAL_DMA_Abort+0x22c>)
 8106244:	4293      	cmp	r3, r2
 8106246:	d054      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	681b      	ldr	r3, [r3, #0]
 810624c:	4a31      	ldr	r2, [pc, #196]	; (8106314 <HAL_DMA_Abort+0x230>)
 810624e:	4293      	cmp	r3, r2
 8106250:	d04f      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 8106252:	687b      	ldr	r3, [r7, #4]
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	4a30      	ldr	r2, [pc, #192]	; (8106318 <HAL_DMA_Abort+0x234>)
 8106258:	4293      	cmp	r3, r2
 810625a:	d04a      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	681b      	ldr	r3, [r3, #0]
 8106260:	4a2e      	ldr	r2, [pc, #184]	; (810631c <HAL_DMA_Abort+0x238>)
 8106262:	4293      	cmp	r3, r2
 8106264:	d045      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	4a2d      	ldr	r2, [pc, #180]	; (8106320 <HAL_DMA_Abort+0x23c>)
 810626c:	4293      	cmp	r3, r2
 810626e:	d040      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	681b      	ldr	r3, [r3, #0]
 8106274:	4a2b      	ldr	r2, [pc, #172]	; (8106324 <HAL_DMA_Abort+0x240>)
 8106276:	4293      	cmp	r3, r2
 8106278:	d03b      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	681b      	ldr	r3, [r3, #0]
 810627e:	4a2a      	ldr	r2, [pc, #168]	; (8106328 <HAL_DMA_Abort+0x244>)
 8106280:	4293      	cmp	r3, r2
 8106282:	d036      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	4a28      	ldr	r2, [pc, #160]	; (810632c <HAL_DMA_Abort+0x248>)
 810628a:	4293      	cmp	r3, r2
 810628c:	d031      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	681b      	ldr	r3, [r3, #0]
 8106292:	4a27      	ldr	r2, [pc, #156]	; (8106330 <HAL_DMA_Abort+0x24c>)
 8106294:	4293      	cmp	r3, r2
 8106296:	d02c      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 8106298:	687b      	ldr	r3, [r7, #4]
 810629a:	681b      	ldr	r3, [r3, #0]
 810629c:	4a25      	ldr	r2, [pc, #148]	; (8106334 <HAL_DMA_Abort+0x250>)
 810629e:	4293      	cmp	r3, r2
 81062a0:	d027      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	681b      	ldr	r3, [r3, #0]
 81062a6:	4a24      	ldr	r2, [pc, #144]	; (8106338 <HAL_DMA_Abort+0x254>)
 81062a8:	4293      	cmp	r3, r2
 81062aa:	d022      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	4a22      	ldr	r2, [pc, #136]	; (810633c <HAL_DMA_Abort+0x258>)
 81062b2:	4293      	cmp	r3, r2
 81062b4:	d01d      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	681b      	ldr	r3, [r3, #0]
 81062ba:	4a21      	ldr	r2, [pc, #132]	; (8106340 <HAL_DMA_Abort+0x25c>)
 81062bc:	4293      	cmp	r3, r2
 81062be:	d018      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	681b      	ldr	r3, [r3, #0]
 81062c4:	4a1f      	ldr	r2, [pc, #124]	; (8106344 <HAL_DMA_Abort+0x260>)
 81062c6:	4293      	cmp	r3, r2
 81062c8:	d013      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	681b      	ldr	r3, [r3, #0]
 81062ce:	4a1e      	ldr	r2, [pc, #120]	; (8106348 <HAL_DMA_Abort+0x264>)
 81062d0:	4293      	cmp	r3, r2
 81062d2:	d00e      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	681b      	ldr	r3, [r3, #0]
 81062d8:	4a1c      	ldr	r2, [pc, #112]	; (810634c <HAL_DMA_Abort+0x268>)
 81062da:	4293      	cmp	r3, r2
 81062dc:	d009      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	681b      	ldr	r3, [r3, #0]
 81062e2:	4a1b      	ldr	r2, [pc, #108]	; (8106350 <HAL_DMA_Abort+0x26c>)
 81062e4:	4293      	cmp	r3, r2
 81062e6:	d004      	beq.n	81062f2 <HAL_DMA_Abort+0x20e>
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	4a19      	ldr	r2, [pc, #100]	; (8106354 <HAL_DMA_Abort+0x270>)
 81062ee:	4293      	cmp	r3, r2
 81062f0:	d132      	bne.n	8106358 <HAL_DMA_Abort+0x274>
 81062f2:	2301      	movs	r3, #1
 81062f4:	e031      	b.n	810635a <HAL_DMA_Abort+0x276>
 81062f6:	bf00      	nop
 81062f8:	40020010 	.word	0x40020010
 81062fc:	40020028 	.word	0x40020028
 8106300:	40020040 	.word	0x40020040
 8106304:	40020058 	.word	0x40020058
 8106308:	40020070 	.word	0x40020070
 810630c:	40020088 	.word	0x40020088
 8106310:	400200a0 	.word	0x400200a0
 8106314:	400200b8 	.word	0x400200b8
 8106318:	40020410 	.word	0x40020410
 810631c:	40020428 	.word	0x40020428
 8106320:	40020440 	.word	0x40020440
 8106324:	40020458 	.word	0x40020458
 8106328:	40020470 	.word	0x40020470
 810632c:	40020488 	.word	0x40020488
 8106330:	400204a0 	.word	0x400204a0
 8106334:	400204b8 	.word	0x400204b8
 8106338:	58025408 	.word	0x58025408
 810633c:	5802541c 	.word	0x5802541c
 8106340:	58025430 	.word	0x58025430
 8106344:	58025444 	.word	0x58025444
 8106348:	58025458 	.word	0x58025458
 810634c:	5802546c 	.word	0x5802546c
 8106350:	58025480 	.word	0x58025480
 8106354:	58025494 	.word	0x58025494
 8106358:	2300      	movs	r3, #0
 810635a:	2b00      	cmp	r3, #0
 810635c:	d007      	beq.n	810636e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106362:	681a      	ldr	r2, [r3, #0]
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810636c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	4a6d      	ldr	r2, [pc, #436]	; (8106528 <HAL_DMA_Abort+0x444>)
 8106374:	4293      	cmp	r3, r2
 8106376:	d04a      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	4a6b      	ldr	r2, [pc, #428]	; (810652c <HAL_DMA_Abort+0x448>)
 810637e:	4293      	cmp	r3, r2
 8106380:	d045      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	681b      	ldr	r3, [r3, #0]
 8106386:	4a6a      	ldr	r2, [pc, #424]	; (8106530 <HAL_DMA_Abort+0x44c>)
 8106388:	4293      	cmp	r3, r2
 810638a:	d040      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	681b      	ldr	r3, [r3, #0]
 8106390:	4a68      	ldr	r2, [pc, #416]	; (8106534 <HAL_DMA_Abort+0x450>)
 8106392:	4293      	cmp	r3, r2
 8106394:	d03b      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 8106396:	687b      	ldr	r3, [r7, #4]
 8106398:	681b      	ldr	r3, [r3, #0]
 810639a:	4a67      	ldr	r2, [pc, #412]	; (8106538 <HAL_DMA_Abort+0x454>)
 810639c:	4293      	cmp	r3, r2
 810639e:	d036      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	681b      	ldr	r3, [r3, #0]
 81063a4:	4a65      	ldr	r2, [pc, #404]	; (810653c <HAL_DMA_Abort+0x458>)
 81063a6:	4293      	cmp	r3, r2
 81063a8:	d031      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	681b      	ldr	r3, [r3, #0]
 81063ae:	4a64      	ldr	r2, [pc, #400]	; (8106540 <HAL_DMA_Abort+0x45c>)
 81063b0:	4293      	cmp	r3, r2
 81063b2:	d02c      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	4a62      	ldr	r2, [pc, #392]	; (8106544 <HAL_DMA_Abort+0x460>)
 81063ba:	4293      	cmp	r3, r2
 81063bc:	d027      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	681b      	ldr	r3, [r3, #0]
 81063c2:	4a61      	ldr	r2, [pc, #388]	; (8106548 <HAL_DMA_Abort+0x464>)
 81063c4:	4293      	cmp	r3, r2
 81063c6:	d022      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	681b      	ldr	r3, [r3, #0]
 81063cc:	4a5f      	ldr	r2, [pc, #380]	; (810654c <HAL_DMA_Abort+0x468>)
 81063ce:	4293      	cmp	r3, r2
 81063d0:	d01d      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	681b      	ldr	r3, [r3, #0]
 81063d6:	4a5e      	ldr	r2, [pc, #376]	; (8106550 <HAL_DMA_Abort+0x46c>)
 81063d8:	4293      	cmp	r3, r2
 81063da:	d018      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	681b      	ldr	r3, [r3, #0]
 81063e0:	4a5c      	ldr	r2, [pc, #368]	; (8106554 <HAL_DMA_Abort+0x470>)
 81063e2:	4293      	cmp	r3, r2
 81063e4:	d013      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	681b      	ldr	r3, [r3, #0]
 81063ea:	4a5b      	ldr	r2, [pc, #364]	; (8106558 <HAL_DMA_Abort+0x474>)
 81063ec:	4293      	cmp	r3, r2
 81063ee:	d00e      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063f0:	687b      	ldr	r3, [r7, #4]
 81063f2:	681b      	ldr	r3, [r3, #0]
 81063f4:	4a59      	ldr	r2, [pc, #356]	; (810655c <HAL_DMA_Abort+0x478>)
 81063f6:	4293      	cmp	r3, r2
 81063f8:	d009      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	681b      	ldr	r3, [r3, #0]
 81063fe:	4a58      	ldr	r2, [pc, #352]	; (8106560 <HAL_DMA_Abort+0x47c>)
 8106400:	4293      	cmp	r3, r2
 8106402:	d004      	beq.n	810640e <HAL_DMA_Abort+0x32a>
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	681b      	ldr	r3, [r3, #0]
 8106408:	4a56      	ldr	r2, [pc, #344]	; (8106564 <HAL_DMA_Abort+0x480>)
 810640a:	4293      	cmp	r3, r2
 810640c:	d108      	bne.n	8106420 <HAL_DMA_Abort+0x33c>
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	681b      	ldr	r3, [r3, #0]
 8106412:	681a      	ldr	r2, [r3, #0]
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	681b      	ldr	r3, [r3, #0]
 8106418:	f022 0201 	bic.w	r2, r2, #1
 810641c:	601a      	str	r2, [r3, #0]
 810641e:	e007      	b.n	8106430 <HAL_DMA_Abort+0x34c>
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	681a      	ldr	r2, [r3, #0]
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	681b      	ldr	r3, [r3, #0]
 810642a:	f022 0201 	bic.w	r2, r2, #1
 810642e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8106430:	e013      	b.n	810645a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8106432:	f7fd fb5d 	bl	8103af0 <HAL_GetTick>
 8106436:	4602      	mov	r2, r0
 8106438:	693b      	ldr	r3, [r7, #16]
 810643a:	1ad3      	subs	r3, r2, r3
 810643c:	2b05      	cmp	r3, #5
 810643e:	d90c      	bls.n	810645a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8106440:	687b      	ldr	r3, [r7, #4]
 8106442:	2220      	movs	r2, #32
 8106444:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8106446:	687b      	ldr	r3, [r7, #4]
 8106448:	2200      	movs	r2, #0
 810644a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	2203      	movs	r2, #3
 8106452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8106456:	2301      	movs	r3, #1
 8106458:	e12d      	b.n	81066b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810645a:	697b      	ldr	r3, [r7, #20]
 810645c:	681b      	ldr	r3, [r3, #0]
 810645e:	f003 0301 	and.w	r3, r3, #1
 8106462:	2b00      	cmp	r3, #0
 8106464:	d1e5      	bne.n	8106432 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	681b      	ldr	r3, [r3, #0]
 810646a:	4a2f      	ldr	r2, [pc, #188]	; (8106528 <HAL_DMA_Abort+0x444>)
 810646c:	4293      	cmp	r3, r2
 810646e:	d04a      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	4a2d      	ldr	r2, [pc, #180]	; (810652c <HAL_DMA_Abort+0x448>)
 8106476:	4293      	cmp	r3, r2
 8106478:	d045      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	681b      	ldr	r3, [r3, #0]
 810647e:	4a2c      	ldr	r2, [pc, #176]	; (8106530 <HAL_DMA_Abort+0x44c>)
 8106480:	4293      	cmp	r3, r2
 8106482:	d040      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 8106484:	687b      	ldr	r3, [r7, #4]
 8106486:	681b      	ldr	r3, [r3, #0]
 8106488:	4a2a      	ldr	r2, [pc, #168]	; (8106534 <HAL_DMA_Abort+0x450>)
 810648a:	4293      	cmp	r3, r2
 810648c:	d03b      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 810648e:	687b      	ldr	r3, [r7, #4]
 8106490:	681b      	ldr	r3, [r3, #0]
 8106492:	4a29      	ldr	r2, [pc, #164]	; (8106538 <HAL_DMA_Abort+0x454>)
 8106494:	4293      	cmp	r3, r2
 8106496:	d036      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	681b      	ldr	r3, [r3, #0]
 810649c:	4a27      	ldr	r2, [pc, #156]	; (810653c <HAL_DMA_Abort+0x458>)
 810649e:	4293      	cmp	r3, r2
 81064a0:	d031      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	681b      	ldr	r3, [r3, #0]
 81064a6:	4a26      	ldr	r2, [pc, #152]	; (8106540 <HAL_DMA_Abort+0x45c>)
 81064a8:	4293      	cmp	r3, r2
 81064aa:	d02c      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	4a24      	ldr	r2, [pc, #144]	; (8106544 <HAL_DMA_Abort+0x460>)
 81064b2:	4293      	cmp	r3, r2
 81064b4:	d027      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	681b      	ldr	r3, [r3, #0]
 81064ba:	4a23      	ldr	r2, [pc, #140]	; (8106548 <HAL_DMA_Abort+0x464>)
 81064bc:	4293      	cmp	r3, r2
 81064be:	d022      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	4a21      	ldr	r2, [pc, #132]	; (810654c <HAL_DMA_Abort+0x468>)
 81064c6:	4293      	cmp	r3, r2
 81064c8:	d01d      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064ca:	687b      	ldr	r3, [r7, #4]
 81064cc:	681b      	ldr	r3, [r3, #0]
 81064ce:	4a20      	ldr	r2, [pc, #128]	; (8106550 <HAL_DMA_Abort+0x46c>)
 81064d0:	4293      	cmp	r3, r2
 81064d2:	d018      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	681b      	ldr	r3, [r3, #0]
 81064d8:	4a1e      	ldr	r2, [pc, #120]	; (8106554 <HAL_DMA_Abort+0x470>)
 81064da:	4293      	cmp	r3, r2
 81064dc:	d013      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	4a1d      	ldr	r2, [pc, #116]	; (8106558 <HAL_DMA_Abort+0x474>)
 81064e4:	4293      	cmp	r3, r2
 81064e6:	d00e      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	681b      	ldr	r3, [r3, #0]
 81064ec:	4a1b      	ldr	r2, [pc, #108]	; (810655c <HAL_DMA_Abort+0x478>)
 81064ee:	4293      	cmp	r3, r2
 81064f0:	d009      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	681b      	ldr	r3, [r3, #0]
 81064f6:	4a1a      	ldr	r2, [pc, #104]	; (8106560 <HAL_DMA_Abort+0x47c>)
 81064f8:	4293      	cmp	r3, r2
 81064fa:	d004      	beq.n	8106506 <HAL_DMA_Abort+0x422>
 81064fc:	687b      	ldr	r3, [r7, #4]
 81064fe:	681b      	ldr	r3, [r3, #0]
 8106500:	4a18      	ldr	r2, [pc, #96]	; (8106564 <HAL_DMA_Abort+0x480>)
 8106502:	4293      	cmp	r3, r2
 8106504:	d101      	bne.n	810650a <HAL_DMA_Abort+0x426>
 8106506:	2301      	movs	r3, #1
 8106508:	e000      	b.n	810650c <HAL_DMA_Abort+0x428>
 810650a:	2300      	movs	r3, #0
 810650c:	2b00      	cmp	r3, #0
 810650e:	d02b      	beq.n	8106568 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8106510:	687b      	ldr	r3, [r7, #4]
 8106512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106514:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810651a:	f003 031f 	and.w	r3, r3, #31
 810651e:	223f      	movs	r2, #63	; 0x3f
 8106520:	409a      	lsls	r2, r3
 8106522:	68bb      	ldr	r3, [r7, #8]
 8106524:	609a      	str	r2, [r3, #8]
 8106526:	e02a      	b.n	810657e <HAL_DMA_Abort+0x49a>
 8106528:	40020010 	.word	0x40020010
 810652c:	40020028 	.word	0x40020028
 8106530:	40020040 	.word	0x40020040
 8106534:	40020058 	.word	0x40020058
 8106538:	40020070 	.word	0x40020070
 810653c:	40020088 	.word	0x40020088
 8106540:	400200a0 	.word	0x400200a0
 8106544:	400200b8 	.word	0x400200b8
 8106548:	40020410 	.word	0x40020410
 810654c:	40020428 	.word	0x40020428
 8106550:	40020440 	.word	0x40020440
 8106554:	40020458 	.word	0x40020458
 8106558:	40020470 	.word	0x40020470
 810655c:	40020488 	.word	0x40020488
 8106560:	400204a0 	.word	0x400204a0
 8106564:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810656c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106572:	f003 031f 	and.w	r3, r3, #31
 8106576:	2201      	movs	r2, #1
 8106578:	409a      	lsls	r2, r3
 810657a:	68fb      	ldr	r3, [r7, #12]
 810657c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	681b      	ldr	r3, [r3, #0]
 8106582:	4a4f      	ldr	r2, [pc, #316]	; (81066c0 <HAL_DMA_Abort+0x5dc>)
 8106584:	4293      	cmp	r3, r2
 8106586:	d072      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	681b      	ldr	r3, [r3, #0]
 810658c:	4a4d      	ldr	r2, [pc, #308]	; (81066c4 <HAL_DMA_Abort+0x5e0>)
 810658e:	4293      	cmp	r3, r2
 8106590:	d06d      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	681b      	ldr	r3, [r3, #0]
 8106596:	4a4c      	ldr	r2, [pc, #304]	; (81066c8 <HAL_DMA_Abort+0x5e4>)
 8106598:	4293      	cmp	r3, r2
 810659a:	d068      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 810659c:	687b      	ldr	r3, [r7, #4]
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	4a4a      	ldr	r2, [pc, #296]	; (81066cc <HAL_DMA_Abort+0x5e8>)
 81065a2:	4293      	cmp	r3, r2
 81065a4:	d063      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	4a49      	ldr	r2, [pc, #292]	; (81066d0 <HAL_DMA_Abort+0x5ec>)
 81065ac:	4293      	cmp	r3, r2
 81065ae:	d05e      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	681b      	ldr	r3, [r3, #0]
 81065b4:	4a47      	ldr	r2, [pc, #284]	; (81066d4 <HAL_DMA_Abort+0x5f0>)
 81065b6:	4293      	cmp	r3, r2
 81065b8:	d059      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	4a46      	ldr	r2, [pc, #280]	; (81066d8 <HAL_DMA_Abort+0x5f4>)
 81065c0:	4293      	cmp	r3, r2
 81065c2:	d054      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	681b      	ldr	r3, [r3, #0]
 81065c8:	4a44      	ldr	r2, [pc, #272]	; (81066dc <HAL_DMA_Abort+0x5f8>)
 81065ca:	4293      	cmp	r3, r2
 81065cc:	d04f      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	681b      	ldr	r3, [r3, #0]
 81065d2:	4a43      	ldr	r2, [pc, #268]	; (81066e0 <HAL_DMA_Abort+0x5fc>)
 81065d4:	4293      	cmp	r3, r2
 81065d6:	d04a      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 81065d8:	687b      	ldr	r3, [r7, #4]
 81065da:	681b      	ldr	r3, [r3, #0]
 81065dc:	4a41      	ldr	r2, [pc, #260]	; (81066e4 <HAL_DMA_Abort+0x600>)
 81065de:	4293      	cmp	r3, r2
 81065e0:	d045      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	681b      	ldr	r3, [r3, #0]
 81065e6:	4a40      	ldr	r2, [pc, #256]	; (81066e8 <HAL_DMA_Abort+0x604>)
 81065e8:	4293      	cmp	r3, r2
 81065ea:	d040      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	681b      	ldr	r3, [r3, #0]
 81065f0:	4a3e      	ldr	r2, [pc, #248]	; (81066ec <HAL_DMA_Abort+0x608>)
 81065f2:	4293      	cmp	r3, r2
 81065f4:	d03b      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	681b      	ldr	r3, [r3, #0]
 81065fa:	4a3d      	ldr	r2, [pc, #244]	; (81066f0 <HAL_DMA_Abort+0x60c>)
 81065fc:	4293      	cmp	r3, r2
 81065fe:	d036      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	681b      	ldr	r3, [r3, #0]
 8106604:	4a3b      	ldr	r2, [pc, #236]	; (81066f4 <HAL_DMA_Abort+0x610>)
 8106606:	4293      	cmp	r3, r2
 8106608:	d031      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	4a3a      	ldr	r2, [pc, #232]	; (81066f8 <HAL_DMA_Abort+0x614>)
 8106610:	4293      	cmp	r3, r2
 8106612:	d02c      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 8106614:	687b      	ldr	r3, [r7, #4]
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	4a38      	ldr	r2, [pc, #224]	; (81066fc <HAL_DMA_Abort+0x618>)
 810661a:	4293      	cmp	r3, r2
 810661c:	d027      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	4a37      	ldr	r2, [pc, #220]	; (8106700 <HAL_DMA_Abort+0x61c>)
 8106624:	4293      	cmp	r3, r2
 8106626:	d022      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	4a35      	ldr	r2, [pc, #212]	; (8106704 <HAL_DMA_Abort+0x620>)
 810662e:	4293      	cmp	r3, r2
 8106630:	d01d      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	4a34      	ldr	r2, [pc, #208]	; (8106708 <HAL_DMA_Abort+0x624>)
 8106638:	4293      	cmp	r3, r2
 810663a:	d018      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	4a32      	ldr	r2, [pc, #200]	; (810670c <HAL_DMA_Abort+0x628>)
 8106642:	4293      	cmp	r3, r2
 8106644:	d013      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	681b      	ldr	r3, [r3, #0]
 810664a:	4a31      	ldr	r2, [pc, #196]	; (8106710 <HAL_DMA_Abort+0x62c>)
 810664c:	4293      	cmp	r3, r2
 810664e:	d00e      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	4a2f      	ldr	r2, [pc, #188]	; (8106714 <HAL_DMA_Abort+0x630>)
 8106656:	4293      	cmp	r3, r2
 8106658:	d009      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	681b      	ldr	r3, [r3, #0]
 810665e:	4a2e      	ldr	r2, [pc, #184]	; (8106718 <HAL_DMA_Abort+0x634>)
 8106660:	4293      	cmp	r3, r2
 8106662:	d004      	beq.n	810666e <HAL_DMA_Abort+0x58a>
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	681b      	ldr	r3, [r3, #0]
 8106668:	4a2c      	ldr	r2, [pc, #176]	; (810671c <HAL_DMA_Abort+0x638>)
 810666a:	4293      	cmp	r3, r2
 810666c:	d101      	bne.n	8106672 <HAL_DMA_Abort+0x58e>
 810666e:	2301      	movs	r3, #1
 8106670:	e000      	b.n	8106674 <HAL_DMA_Abort+0x590>
 8106672:	2300      	movs	r3, #0
 8106674:	2b00      	cmp	r3, #0
 8106676:	d015      	beq.n	81066a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810667c:	687a      	ldr	r2, [r7, #4]
 810667e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8106680:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106686:	2b00      	cmp	r3, #0
 8106688:	d00c      	beq.n	81066a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810668a:	687b      	ldr	r3, [r7, #4]
 810668c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810668e:	681a      	ldr	r2, [r3, #0]
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8106698:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810669a:	687b      	ldr	r3, [r7, #4]
 810669c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810669e:	687a      	ldr	r2, [r7, #4]
 81066a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81066a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	2200      	movs	r2, #0
 81066a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	2201      	movs	r2, #1
 81066b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 81066b4:	2300      	movs	r3, #0
}
 81066b6:	4618      	mov	r0, r3
 81066b8:	3718      	adds	r7, #24
 81066ba:	46bd      	mov	sp, r7
 81066bc:	bd80      	pop	{r7, pc}
 81066be:	bf00      	nop
 81066c0:	40020010 	.word	0x40020010
 81066c4:	40020028 	.word	0x40020028
 81066c8:	40020040 	.word	0x40020040
 81066cc:	40020058 	.word	0x40020058
 81066d0:	40020070 	.word	0x40020070
 81066d4:	40020088 	.word	0x40020088
 81066d8:	400200a0 	.word	0x400200a0
 81066dc:	400200b8 	.word	0x400200b8
 81066e0:	40020410 	.word	0x40020410
 81066e4:	40020428 	.word	0x40020428
 81066e8:	40020440 	.word	0x40020440
 81066ec:	40020458 	.word	0x40020458
 81066f0:	40020470 	.word	0x40020470
 81066f4:	40020488 	.word	0x40020488
 81066f8:	400204a0 	.word	0x400204a0
 81066fc:	400204b8 	.word	0x400204b8
 8106700:	58025408 	.word	0x58025408
 8106704:	5802541c 	.word	0x5802541c
 8106708:	58025430 	.word	0x58025430
 810670c:	58025444 	.word	0x58025444
 8106710:	58025458 	.word	0x58025458
 8106714:	5802546c 	.word	0x5802546c
 8106718:	58025480 	.word	0x58025480
 810671c:	58025494 	.word	0x58025494

08106720 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8106720:	b580      	push	{r7, lr}
 8106722:	b084      	sub	sp, #16
 8106724:	af00      	add	r7, sp, #0
 8106726:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8106728:	687b      	ldr	r3, [r7, #4]
 810672a:	2b00      	cmp	r3, #0
 810672c:	d101      	bne.n	8106732 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810672e:	2301      	movs	r3, #1
 8106730:	e205      	b.n	8106b3e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8106732:	687b      	ldr	r3, [r7, #4]
 8106734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8106738:	b2db      	uxtb	r3, r3
 810673a:	2b02      	cmp	r3, #2
 810673c:	d004      	beq.n	8106748 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810673e:	687b      	ldr	r3, [r7, #4]
 8106740:	2280      	movs	r2, #128	; 0x80
 8106742:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8106744:	2301      	movs	r3, #1
 8106746:	e1fa      	b.n	8106b3e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	681b      	ldr	r3, [r3, #0]
 810674c:	4a8c      	ldr	r2, [pc, #560]	; (8106980 <HAL_DMA_Abort_IT+0x260>)
 810674e:	4293      	cmp	r3, r2
 8106750:	d04a      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	681b      	ldr	r3, [r3, #0]
 8106756:	4a8b      	ldr	r2, [pc, #556]	; (8106984 <HAL_DMA_Abort_IT+0x264>)
 8106758:	4293      	cmp	r3, r2
 810675a:	d045      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 810675c:	687b      	ldr	r3, [r7, #4]
 810675e:	681b      	ldr	r3, [r3, #0]
 8106760:	4a89      	ldr	r2, [pc, #548]	; (8106988 <HAL_DMA_Abort_IT+0x268>)
 8106762:	4293      	cmp	r3, r2
 8106764:	d040      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	681b      	ldr	r3, [r3, #0]
 810676a:	4a88      	ldr	r2, [pc, #544]	; (810698c <HAL_DMA_Abort_IT+0x26c>)
 810676c:	4293      	cmp	r3, r2
 810676e:	d03b      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	681b      	ldr	r3, [r3, #0]
 8106774:	4a86      	ldr	r2, [pc, #536]	; (8106990 <HAL_DMA_Abort_IT+0x270>)
 8106776:	4293      	cmp	r3, r2
 8106778:	d036      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 810677a:	687b      	ldr	r3, [r7, #4]
 810677c:	681b      	ldr	r3, [r3, #0]
 810677e:	4a85      	ldr	r2, [pc, #532]	; (8106994 <HAL_DMA_Abort_IT+0x274>)
 8106780:	4293      	cmp	r3, r2
 8106782:	d031      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 8106784:	687b      	ldr	r3, [r7, #4]
 8106786:	681b      	ldr	r3, [r3, #0]
 8106788:	4a83      	ldr	r2, [pc, #524]	; (8106998 <HAL_DMA_Abort_IT+0x278>)
 810678a:	4293      	cmp	r3, r2
 810678c:	d02c      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	681b      	ldr	r3, [r3, #0]
 8106792:	4a82      	ldr	r2, [pc, #520]	; (810699c <HAL_DMA_Abort_IT+0x27c>)
 8106794:	4293      	cmp	r3, r2
 8106796:	d027      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 8106798:	687b      	ldr	r3, [r7, #4]
 810679a:	681b      	ldr	r3, [r3, #0]
 810679c:	4a80      	ldr	r2, [pc, #512]	; (81069a0 <HAL_DMA_Abort_IT+0x280>)
 810679e:	4293      	cmp	r3, r2
 81067a0:	d022      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	681b      	ldr	r3, [r3, #0]
 81067a6:	4a7f      	ldr	r2, [pc, #508]	; (81069a4 <HAL_DMA_Abort_IT+0x284>)
 81067a8:	4293      	cmp	r3, r2
 81067aa:	d01d      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	681b      	ldr	r3, [r3, #0]
 81067b0:	4a7d      	ldr	r2, [pc, #500]	; (81069a8 <HAL_DMA_Abort_IT+0x288>)
 81067b2:	4293      	cmp	r3, r2
 81067b4:	d018      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 81067b6:	687b      	ldr	r3, [r7, #4]
 81067b8:	681b      	ldr	r3, [r3, #0]
 81067ba:	4a7c      	ldr	r2, [pc, #496]	; (81069ac <HAL_DMA_Abort_IT+0x28c>)
 81067bc:	4293      	cmp	r3, r2
 81067be:	d013      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	681b      	ldr	r3, [r3, #0]
 81067c4:	4a7a      	ldr	r2, [pc, #488]	; (81069b0 <HAL_DMA_Abort_IT+0x290>)
 81067c6:	4293      	cmp	r3, r2
 81067c8:	d00e      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 81067ca:	687b      	ldr	r3, [r7, #4]
 81067cc:	681b      	ldr	r3, [r3, #0]
 81067ce:	4a79      	ldr	r2, [pc, #484]	; (81069b4 <HAL_DMA_Abort_IT+0x294>)
 81067d0:	4293      	cmp	r3, r2
 81067d2:	d009      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	681b      	ldr	r3, [r3, #0]
 81067d8:	4a77      	ldr	r2, [pc, #476]	; (81069b8 <HAL_DMA_Abort_IT+0x298>)
 81067da:	4293      	cmp	r3, r2
 81067dc:	d004      	beq.n	81067e8 <HAL_DMA_Abort_IT+0xc8>
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	681b      	ldr	r3, [r3, #0]
 81067e2:	4a76      	ldr	r2, [pc, #472]	; (81069bc <HAL_DMA_Abort_IT+0x29c>)
 81067e4:	4293      	cmp	r3, r2
 81067e6:	d101      	bne.n	81067ec <HAL_DMA_Abort_IT+0xcc>
 81067e8:	2301      	movs	r3, #1
 81067ea:	e000      	b.n	81067ee <HAL_DMA_Abort_IT+0xce>
 81067ec:	2300      	movs	r3, #0
 81067ee:	2b00      	cmp	r3, #0
 81067f0:	d065      	beq.n	81068be <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81067f2:	687b      	ldr	r3, [r7, #4]
 81067f4:	2204      	movs	r2, #4
 81067f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	681b      	ldr	r3, [r3, #0]
 81067fe:	4a60      	ldr	r2, [pc, #384]	; (8106980 <HAL_DMA_Abort_IT+0x260>)
 8106800:	4293      	cmp	r3, r2
 8106802:	d04a      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106804:	687b      	ldr	r3, [r7, #4]
 8106806:	681b      	ldr	r3, [r3, #0]
 8106808:	4a5e      	ldr	r2, [pc, #376]	; (8106984 <HAL_DMA_Abort_IT+0x264>)
 810680a:	4293      	cmp	r3, r2
 810680c:	d045      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	681b      	ldr	r3, [r3, #0]
 8106812:	4a5d      	ldr	r2, [pc, #372]	; (8106988 <HAL_DMA_Abort_IT+0x268>)
 8106814:	4293      	cmp	r3, r2
 8106816:	d040      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	4a5b      	ldr	r2, [pc, #364]	; (810698c <HAL_DMA_Abort_IT+0x26c>)
 810681e:	4293      	cmp	r3, r2
 8106820:	d03b      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106822:	687b      	ldr	r3, [r7, #4]
 8106824:	681b      	ldr	r3, [r3, #0]
 8106826:	4a5a      	ldr	r2, [pc, #360]	; (8106990 <HAL_DMA_Abort_IT+0x270>)
 8106828:	4293      	cmp	r3, r2
 810682a:	d036      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	681b      	ldr	r3, [r3, #0]
 8106830:	4a58      	ldr	r2, [pc, #352]	; (8106994 <HAL_DMA_Abort_IT+0x274>)
 8106832:	4293      	cmp	r3, r2
 8106834:	d031      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	4a57      	ldr	r2, [pc, #348]	; (8106998 <HAL_DMA_Abort_IT+0x278>)
 810683c:	4293      	cmp	r3, r2
 810683e:	d02c      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	681b      	ldr	r3, [r3, #0]
 8106844:	4a55      	ldr	r2, [pc, #340]	; (810699c <HAL_DMA_Abort_IT+0x27c>)
 8106846:	4293      	cmp	r3, r2
 8106848:	d027      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	681b      	ldr	r3, [r3, #0]
 810684e:	4a54      	ldr	r2, [pc, #336]	; (81069a0 <HAL_DMA_Abort_IT+0x280>)
 8106850:	4293      	cmp	r3, r2
 8106852:	d022      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106854:	687b      	ldr	r3, [r7, #4]
 8106856:	681b      	ldr	r3, [r3, #0]
 8106858:	4a52      	ldr	r2, [pc, #328]	; (81069a4 <HAL_DMA_Abort_IT+0x284>)
 810685a:	4293      	cmp	r3, r2
 810685c:	d01d      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 810685e:	687b      	ldr	r3, [r7, #4]
 8106860:	681b      	ldr	r3, [r3, #0]
 8106862:	4a51      	ldr	r2, [pc, #324]	; (81069a8 <HAL_DMA_Abort_IT+0x288>)
 8106864:	4293      	cmp	r3, r2
 8106866:	d018      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	681b      	ldr	r3, [r3, #0]
 810686c:	4a4f      	ldr	r2, [pc, #316]	; (81069ac <HAL_DMA_Abort_IT+0x28c>)
 810686e:	4293      	cmp	r3, r2
 8106870:	d013      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	681b      	ldr	r3, [r3, #0]
 8106876:	4a4e      	ldr	r2, [pc, #312]	; (81069b0 <HAL_DMA_Abort_IT+0x290>)
 8106878:	4293      	cmp	r3, r2
 810687a:	d00e      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	681b      	ldr	r3, [r3, #0]
 8106880:	4a4c      	ldr	r2, [pc, #304]	; (81069b4 <HAL_DMA_Abort_IT+0x294>)
 8106882:	4293      	cmp	r3, r2
 8106884:	d009      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106886:	687b      	ldr	r3, [r7, #4]
 8106888:	681b      	ldr	r3, [r3, #0]
 810688a:	4a4b      	ldr	r2, [pc, #300]	; (81069b8 <HAL_DMA_Abort_IT+0x298>)
 810688c:	4293      	cmp	r3, r2
 810688e:	d004      	beq.n	810689a <HAL_DMA_Abort_IT+0x17a>
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	681b      	ldr	r3, [r3, #0]
 8106894:	4a49      	ldr	r2, [pc, #292]	; (81069bc <HAL_DMA_Abort_IT+0x29c>)
 8106896:	4293      	cmp	r3, r2
 8106898:	d108      	bne.n	81068ac <HAL_DMA_Abort_IT+0x18c>
 810689a:	687b      	ldr	r3, [r7, #4]
 810689c:	681b      	ldr	r3, [r3, #0]
 810689e:	681a      	ldr	r2, [r3, #0]
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	681b      	ldr	r3, [r3, #0]
 81068a4:	f022 0201 	bic.w	r2, r2, #1
 81068a8:	601a      	str	r2, [r3, #0]
 81068aa:	e147      	b.n	8106b3c <HAL_DMA_Abort_IT+0x41c>
 81068ac:	687b      	ldr	r3, [r7, #4]
 81068ae:	681b      	ldr	r3, [r3, #0]
 81068b0:	681a      	ldr	r2, [r3, #0]
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	681b      	ldr	r3, [r3, #0]
 81068b6:	f022 0201 	bic.w	r2, r2, #1
 81068ba:	601a      	str	r2, [r3, #0]
 81068bc:	e13e      	b.n	8106b3c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81068be:	687b      	ldr	r3, [r7, #4]
 81068c0:	681b      	ldr	r3, [r3, #0]
 81068c2:	681a      	ldr	r2, [r3, #0]
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	681b      	ldr	r3, [r3, #0]
 81068c8:	f022 020e 	bic.w	r2, r2, #14
 81068cc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81068ce:	687b      	ldr	r3, [r7, #4]
 81068d0:	681b      	ldr	r3, [r3, #0]
 81068d2:	4a2b      	ldr	r2, [pc, #172]	; (8106980 <HAL_DMA_Abort_IT+0x260>)
 81068d4:	4293      	cmp	r3, r2
 81068d6:	d04a      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	681b      	ldr	r3, [r3, #0]
 81068dc:	4a29      	ldr	r2, [pc, #164]	; (8106984 <HAL_DMA_Abort_IT+0x264>)
 81068de:	4293      	cmp	r3, r2
 81068e0:	d045      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 81068e2:	687b      	ldr	r3, [r7, #4]
 81068e4:	681b      	ldr	r3, [r3, #0]
 81068e6:	4a28      	ldr	r2, [pc, #160]	; (8106988 <HAL_DMA_Abort_IT+0x268>)
 81068e8:	4293      	cmp	r3, r2
 81068ea:	d040      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	681b      	ldr	r3, [r3, #0]
 81068f0:	4a26      	ldr	r2, [pc, #152]	; (810698c <HAL_DMA_Abort_IT+0x26c>)
 81068f2:	4293      	cmp	r3, r2
 81068f4:	d03b      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	681b      	ldr	r3, [r3, #0]
 81068fa:	4a25      	ldr	r2, [pc, #148]	; (8106990 <HAL_DMA_Abort_IT+0x270>)
 81068fc:	4293      	cmp	r3, r2
 81068fe:	d036      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	681b      	ldr	r3, [r3, #0]
 8106904:	4a23      	ldr	r2, [pc, #140]	; (8106994 <HAL_DMA_Abort_IT+0x274>)
 8106906:	4293      	cmp	r3, r2
 8106908:	d031      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 810690a:	687b      	ldr	r3, [r7, #4]
 810690c:	681b      	ldr	r3, [r3, #0]
 810690e:	4a22      	ldr	r2, [pc, #136]	; (8106998 <HAL_DMA_Abort_IT+0x278>)
 8106910:	4293      	cmp	r3, r2
 8106912:	d02c      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	681b      	ldr	r3, [r3, #0]
 8106918:	4a20      	ldr	r2, [pc, #128]	; (810699c <HAL_DMA_Abort_IT+0x27c>)
 810691a:	4293      	cmp	r3, r2
 810691c:	d027      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	681b      	ldr	r3, [r3, #0]
 8106922:	4a1f      	ldr	r2, [pc, #124]	; (81069a0 <HAL_DMA_Abort_IT+0x280>)
 8106924:	4293      	cmp	r3, r2
 8106926:	d022      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	681b      	ldr	r3, [r3, #0]
 810692c:	4a1d      	ldr	r2, [pc, #116]	; (81069a4 <HAL_DMA_Abort_IT+0x284>)
 810692e:	4293      	cmp	r3, r2
 8106930:	d01d      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 8106932:	687b      	ldr	r3, [r7, #4]
 8106934:	681b      	ldr	r3, [r3, #0]
 8106936:	4a1c      	ldr	r2, [pc, #112]	; (81069a8 <HAL_DMA_Abort_IT+0x288>)
 8106938:	4293      	cmp	r3, r2
 810693a:	d018      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	681b      	ldr	r3, [r3, #0]
 8106940:	4a1a      	ldr	r2, [pc, #104]	; (81069ac <HAL_DMA_Abort_IT+0x28c>)
 8106942:	4293      	cmp	r3, r2
 8106944:	d013      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	681b      	ldr	r3, [r3, #0]
 810694a:	4a19      	ldr	r2, [pc, #100]	; (81069b0 <HAL_DMA_Abort_IT+0x290>)
 810694c:	4293      	cmp	r3, r2
 810694e:	d00e      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 8106950:	687b      	ldr	r3, [r7, #4]
 8106952:	681b      	ldr	r3, [r3, #0]
 8106954:	4a17      	ldr	r2, [pc, #92]	; (81069b4 <HAL_DMA_Abort_IT+0x294>)
 8106956:	4293      	cmp	r3, r2
 8106958:	d009      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	681b      	ldr	r3, [r3, #0]
 810695e:	4a16      	ldr	r2, [pc, #88]	; (81069b8 <HAL_DMA_Abort_IT+0x298>)
 8106960:	4293      	cmp	r3, r2
 8106962:	d004      	beq.n	810696e <HAL_DMA_Abort_IT+0x24e>
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	681b      	ldr	r3, [r3, #0]
 8106968:	4a14      	ldr	r2, [pc, #80]	; (81069bc <HAL_DMA_Abort_IT+0x29c>)
 810696a:	4293      	cmp	r3, r2
 810696c:	d128      	bne.n	81069c0 <HAL_DMA_Abort_IT+0x2a0>
 810696e:	687b      	ldr	r3, [r7, #4]
 8106970:	681b      	ldr	r3, [r3, #0]
 8106972:	681a      	ldr	r2, [r3, #0]
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	681b      	ldr	r3, [r3, #0]
 8106978:	f022 0201 	bic.w	r2, r2, #1
 810697c:	601a      	str	r2, [r3, #0]
 810697e:	e027      	b.n	81069d0 <HAL_DMA_Abort_IT+0x2b0>
 8106980:	40020010 	.word	0x40020010
 8106984:	40020028 	.word	0x40020028
 8106988:	40020040 	.word	0x40020040
 810698c:	40020058 	.word	0x40020058
 8106990:	40020070 	.word	0x40020070
 8106994:	40020088 	.word	0x40020088
 8106998:	400200a0 	.word	0x400200a0
 810699c:	400200b8 	.word	0x400200b8
 81069a0:	40020410 	.word	0x40020410
 81069a4:	40020428 	.word	0x40020428
 81069a8:	40020440 	.word	0x40020440
 81069ac:	40020458 	.word	0x40020458
 81069b0:	40020470 	.word	0x40020470
 81069b4:	40020488 	.word	0x40020488
 81069b8:	400204a0 	.word	0x400204a0
 81069bc:	400204b8 	.word	0x400204b8
 81069c0:	687b      	ldr	r3, [r7, #4]
 81069c2:	681b      	ldr	r3, [r3, #0]
 81069c4:	681a      	ldr	r2, [r3, #0]
 81069c6:	687b      	ldr	r3, [r7, #4]
 81069c8:	681b      	ldr	r3, [r3, #0]
 81069ca:	f022 0201 	bic.w	r2, r2, #1
 81069ce:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	681b      	ldr	r3, [r3, #0]
 81069d4:	4a5c      	ldr	r2, [pc, #368]	; (8106b48 <HAL_DMA_Abort_IT+0x428>)
 81069d6:	4293      	cmp	r3, r2
 81069d8:	d072      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	681b      	ldr	r3, [r3, #0]
 81069de:	4a5b      	ldr	r2, [pc, #364]	; (8106b4c <HAL_DMA_Abort_IT+0x42c>)
 81069e0:	4293      	cmp	r3, r2
 81069e2:	d06d      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	681b      	ldr	r3, [r3, #0]
 81069e8:	4a59      	ldr	r2, [pc, #356]	; (8106b50 <HAL_DMA_Abort_IT+0x430>)
 81069ea:	4293      	cmp	r3, r2
 81069ec:	d068      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	681b      	ldr	r3, [r3, #0]
 81069f2:	4a58      	ldr	r2, [pc, #352]	; (8106b54 <HAL_DMA_Abort_IT+0x434>)
 81069f4:	4293      	cmp	r3, r2
 81069f6:	d063      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	681b      	ldr	r3, [r3, #0]
 81069fc:	4a56      	ldr	r2, [pc, #344]	; (8106b58 <HAL_DMA_Abort_IT+0x438>)
 81069fe:	4293      	cmp	r3, r2
 8106a00:	d05e      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a02:	687b      	ldr	r3, [r7, #4]
 8106a04:	681b      	ldr	r3, [r3, #0]
 8106a06:	4a55      	ldr	r2, [pc, #340]	; (8106b5c <HAL_DMA_Abort_IT+0x43c>)
 8106a08:	4293      	cmp	r3, r2
 8106a0a:	d059      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	681b      	ldr	r3, [r3, #0]
 8106a10:	4a53      	ldr	r2, [pc, #332]	; (8106b60 <HAL_DMA_Abort_IT+0x440>)
 8106a12:	4293      	cmp	r3, r2
 8106a14:	d054      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a16:	687b      	ldr	r3, [r7, #4]
 8106a18:	681b      	ldr	r3, [r3, #0]
 8106a1a:	4a52      	ldr	r2, [pc, #328]	; (8106b64 <HAL_DMA_Abort_IT+0x444>)
 8106a1c:	4293      	cmp	r3, r2
 8106a1e:	d04f      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	4a50      	ldr	r2, [pc, #320]	; (8106b68 <HAL_DMA_Abort_IT+0x448>)
 8106a26:	4293      	cmp	r3, r2
 8106a28:	d04a      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a2a:	687b      	ldr	r3, [r7, #4]
 8106a2c:	681b      	ldr	r3, [r3, #0]
 8106a2e:	4a4f      	ldr	r2, [pc, #316]	; (8106b6c <HAL_DMA_Abort_IT+0x44c>)
 8106a30:	4293      	cmp	r3, r2
 8106a32:	d045      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a34:	687b      	ldr	r3, [r7, #4]
 8106a36:	681b      	ldr	r3, [r3, #0]
 8106a38:	4a4d      	ldr	r2, [pc, #308]	; (8106b70 <HAL_DMA_Abort_IT+0x450>)
 8106a3a:	4293      	cmp	r3, r2
 8106a3c:	d040      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	681b      	ldr	r3, [r3, #0]
 8106a42:	4a4c      	ldr	r2, [pc, #304]	; (8106b74 <HAL_DMA_Abort_IT+0x454>)
 8106a44:	4293      	cmp	r3, r2
 8106a46:	d03b      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	681b      	ldr	r3, [r3, #0]
 8106a4c:	4a4a      	ldr	r2, [pc, #296]	; (8106b78 <HAL_DMA_Abort_IT+0x458>)
 8106a4e:	4293      	cmp	r3, r2
 8106a50:	d036      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a52:	687b      	ldr	r3, [r7, #4]
 8106a54:	681b      	ldr	r3, [r3, #0]
 8106a56:	4a49      	ldr	r2, [pc, #292]	; (8106b7c <HAL_DMA_Abort_IT+0x45c>)
 8106a58:	4293      	cmp	r3, r2
 8106a5a:	d031      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	681b      	ldr	r3, [r3, #0]
 8106a60:	4a47      	ldr	r2, [pc, #284]	; (8106b80 <HAL_DMA_Abort_IT+0x460>)
 8106a62:	4293      	cmp	r3, r2
 8106a64:	d02c      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	4a46      	ldr	r2, [pc, #280]	; (8106b84 <HAL_DMA_Abort_IT+0x464>)
 8106a6c:	4293      	cmp	r3, r2
 8106a6e:	d027      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	681b      	ldr	r3, [r3, #0]
 8106a74:	4a44      	ldr	r2, [pc, #272]	; (8106b88 <HAL_DMA_Abort_IT+0x468>)
 8106a76:	4293      	cmp	r3, r2
 8106a78:	d022      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	681b      	ldr	r3, [r3, #0]
 8106a7e:	4a43      	ldr	r2, [pc, #268]	; (8106b8c <HAL_DMA_Abort_IT+0x46c>)
 8106a80:	4293      	cmp	r3, r2
 8106a82:	d01d      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a84:	687b      	ldr	r3, [r7, #4]
 8106a86:	681b      	ldr	r3, [r3, #0]
 8106a88:	4a41      	ldr	r2, [pc, #260]	; (8106b90 <HAL_DMA_Abort_IT+0x470>)
 8106a8a:	4293      	cmp	r3, r2
 8106a8c:	d018      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a8e:	687b      	ldr	r3, [r7, #4]
 8106a90:	681b      	ldr	r3, [r3, #0]
 8106a92:	4a40      	ldr	r2, [pc, #256]	; (8106b94 <HAL_DMA_Abort_IT+0x474>)
 8106a94:	4293      	cmp	r3, r2
 8106a96:	d013      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106a98:	687b      	ldr	r3, [r7, #4]
 8106a9a:	681b      	ldr	r3, [r3, #0]
 8106a9c:	4a3e      	ldr	r2, [pc, #248]	; (8106b98 <HAL_DMA_Abort_IT+0x478>)
 8106a9e:	4293      	cmp	r3, r2
 8106aa0:	d00e      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106aa2:	687b      	ldr	r3, [r7, #4]
 8106aa4:	681b      	ldr	r3, [r3, #0]
 8106aa6:	4a3d      	ldr	r2, [pc, #244]	; (8106b9c <HAL_DMA_Abort_IT+0x47c>)
 8106aa8:	4293      	cmp	r3, r2
 8106aaa:	d009      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	681b      	ldr	r3, [r3, #0]
 8106ab0:	4a3b      	ldr	r2, [pc, #236]	; (8106ba0 <HAL_DMA_Abort_IT+0x480>)
 8106ab2:	4293      	cmp	r3, r2
 8106ab4:	d004      	beq.n	8106ac0 <HAL_DMA_Abort_IT+0x3a0>
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	681b      	ldr	r3, [r3, #0]
 8106aba:	4a3a      	ldr	r2, [pc, #232]	; (8106ba4 <HAL_DMA_Abort_IT+0x484>)
 8106abc:	4293      	cmp	r3, r2
 8106abe:	d101      	bne.n	8106ac4 <HAL_DMA_Abort_IT+0x3a4>
 8106ac0:	2301      	movs	r3, #1
 8106ac2:	e000      	b.n	8106ac6 <HAL_DMA_Abort_IT+0x3a6>
 8106ac4:	2300      	movs	r3, #0
 8106ac6:	2b00      	cmp	r3, #0
 8106ac8:	d028      	beq.n	8106b1c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8106aca:	687b      	ldr	r3, [r7, #4]
 8106acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106ace:	681a      	ldr	r2, [r3, #0]
 8106ad0:	687b      	ldr	r3, [r7, #4]
 8106ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8106ad8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106ade:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8106ae0:	687b      	ldr	r3, [r7, #4]
 8106ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ae4:	f003 031f 	and.w	r3, r3, #31
 8106ae8:	2201      	movs	r2, #1
 8106aea:	409a      	lsls	r2, r3
 8106aec:	68fb      	ldr	r3, [r7, #12]
 8106aee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106af0:	687b      	ldr	r3, [r7, #4]
 8106af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106af4:	687a      	ldr	r2, [r7, #4]
 8106af6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8106af8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8106afa:	687b      	ldr	r3, [r7, #4]
 8106afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	d00c      	beq.n	8106b1c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106b02:	687b      	ldr	r3, [r7, #4]
 8106b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106b06:	681a      	ldr	r2, [r3, #0]
 8106b08:	687b      	ldr	r3, [r7, #4]
 8106b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8106b10:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106b16:	687a      	ldr	r2, [r7, #4]
 8106b18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8106b1a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	2200      	movs	r2, #0
 8106b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106b24:	687b      	ldr	r3, [r7, #4]
 8106b26:	2201      	movs	r2, #1
 8106b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106b30:	2b00      	cmp	r3, #0
 8106b32:	d003      	beq.n	8106b3c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106b38:	6878      	ldr	r0, [r7, #4]
 8106b3a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8106b3c:	2300      	movs	r3, #0
}
 8106b3e:	4618      	mov	r0, r3
 8106b40:	3710      	adds	r7, #16
 8106b42:	46bd      	mov	sp, r7
 8106b44:	bd80      	pop	{r7, pc}
 8106b46:	bf00      	nop
 8106b48:	40020010 	.word	0x40020010
 8106b4c:	40020028 	.word	0x40020028
 8106b50:	40020040 	.word	0x40020040
 8106b54:	40020058 	.word	0x40020058
 8106b58:	40020070 	.word	0x40020070
 8106b5c:	40020088 	.word	0x40020088
 8106b60:	400200a0 	.word	0x400200a0
 8106b64:	400200b8 	.word	0x400200b8
 8106b68:	40020410 	.word	0x40020410
 8106b6c:	40020428 	.word	0x40020428
 8106b70:	40020440 	.word	0x40020440
 8106b74:	40020458 	.word	0x40020458
 8106b78:	40020470 	.word	0x40020470
 8106b7c:	40020488 	.word	0x40020488
 8106b80:	400204a0 	.word	0x400204a0
 8106b84:	400204b8 	.word	0x400204b8
 8106b88:	58025408 	.word	0x58025408
 8106b8c:	5802541c 	.word	0x5802541c
 8106b90:	58025430 	.word	0x58025430
 8106b94:	58025444 	.word	0x58025444
 8106b98:	58025458 	.word	0x58025458
 8106b9c:	5802546c 	.word	0x5802546c
 8106ba0:	58025480 	.word	0x58025480
 8106ba4:	58025494 	.word	0x58025494

08106ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8106ba8:	b580      	push	{r7, lr}
 8106baa:	b08a      	sub	sp, #40	; 0x28
 8106bac:	af00      	add	r7, sp, #0
 8106bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8106bb0:	2300      	movs	r3, #0
 8106bb2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8106bb4:	4b67      	ldr	r3, [pc, #412]	; (8106d54 <HAL_DMA_IRQHandler+0x1ac>)
 8106bb6:	681b      	ldr	r3, [r3, #0]
 8106bb8:	4a67      	ldr	r2, [pc, #412]	; (8106d58 <HAL_DMA_IRQHandler+0x1b0>)
 8106bba:	fba2 2303 	umull	r2, r3, r2, r3
 8106bbe:	0a9b      	lsrs	r3, r3, #10
 8106bc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106bc6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106bcc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8106bce:	6a3b      	ldr	r3, [r7, #32]
 8106bd0:	681b      	ldr	r3, [r3, #0]
 8106bd2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8106bd4:	69fb      	ldr	r3, [r7, #28]
 8106bd6:	681b      	ldr	r3, [r3, #0]
 8106bd8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	681b      	ldr	r3, [r3, #0]
 8106bde:	4a5f      	ldr	r2, [pc, #380]	; (8106d5c <HAL_DMA_IRQHandler+0x1b4>)
 8106be0:	4293      	cmp	r3, r2
 8106be2:	d04a      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	4a5d      	ldr	r2, [pc, #372]	; (8106d60 <HAL_DMA_IRQHandler+0x1b8>)
 8106bea:	4293      	cmp	r3, r2
 8106bec:	d045      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	681b      	ldr	r3, [r3, #0]
 8106bf2:	4a5c      	ldr	r2, [pc, #368]	; (8106d64 <HAL_DMA_IRQHandler+0x1bc>)
 8106bf4:	4293      	cmp	r3, r2
 8106bf6:	d040      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	681b      	ldr	r3, [r3, #0]
 8106bfc:	4a5a      	ldr	r2, [pc, #360]	; (8106d68 <HAL_DMA_IRQHandler+0x1c0>)
 8106bfe:	4293      	cmp	r3, r2
 8106c00:	d03b      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	681b      	ldr	r3, [r3, #0]
 8106c06:	4a59      	ldr	r2, [pc, #356]	; (8106d6c <HAL_DMA_IRQHandler+0x1c4>)
 8106c08:	4293      	cmp	r3, r2
 8106c0a:	d036      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	681b      	ldr	r3, [r3, #0]
 8106c10:	4a57      	ldr	r2, [pc, #348]	; (8106d70 <HAL_DMA_IRQHandler+0x1c8>)
 8106c12:	4293      	cmp	r3, r2
 8106c14:	d031      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	681b      	ldr	r3, [r3, #0]
 8106c1a:	4a56      	ldr	r2, [pc, #344]	; (8106d74 <HAL_DMA_IRQHandler+0x1cc>)
 8106c1c:	4293      	cmp	r3, r2
 8106c1e:	d02c      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	681b      	ldr	r3, [r3, #0]
 8106c24:	4a54      	ldr	r2, [pc, #336]	; (8106d78 <HAL_DMA_IRQHandler+0x1d0>)
 8106c26:	4293      	cmp	r3, r2
 8106c28:	d027      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	681b      	ldr	r3, [r3, #0]
 8106c2e:	4a53      	ldr	r2, [pc, #332]	; (8106d7c <HAL_DMA_IRQHandler+0x1d4>)
 8106c30:	4293      	cmp	r3, r2
 8106c32:	d022      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	681b      	ldr	r3, [r3, #0]
 8106c38:	4a51      	ldr	r2, [pc, #324]	; (8106d80 <HAL_DMA_IRQHandler+0x1d8>)
 8106c3a:	4293      	cmp	r3, r2
 8106c3c:	d01d      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	681b      	ldr	r3, [r3, #0]
 8106c42:	4a50      	ldr	r2, [pc, #320]	; (8106d84 <HAL_DMA_IRQHandler+0x1dc>)
 8106c44:	4293      	cmp	r3, r2
 8106c46:	d018      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	681b      	ldr	r3, [r3, #0]
 8106c4c:	4a4e      	ldr	r2, [pc, #312]	; (8106d88 <HAL_DMA_IRQHandler+0x1e0>)
 8106c4e:	4293      	cmp	r3, r2
 8106c50:	d013      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	4a4d      	ldr	r2, [pc, #308]	; (8106d8c <HAL_DMA_IRQHandler+0x1e4>)
 8106c58:	4293      	cmp	r3, r2
 8106c5a:	d00e      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c5c:	687b      	ldr	r3, [r7, #4]
 8106c5e:	681b      	ldr	r3, [r3, #0]
 8106c60:	4a4b      	ldr	r2, [pc, #300]	; (8106d90 <HAL_DMA_IRQHandler+0x1e8>)
 8106c62:	4293      	cmp	r3, r2
 8106c64:	d009      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c66:	687b      	ldr	r3, [r7, #4]
 8106c68:	681b      	ldr	r3, [r3, #0]
 8106c6a:	4a4a      	ldr	r2, [pc, #296]	; (8106d94 <HAL_DMA_IRQHandler+0x1ec>)
 8106c6c:	4293      	cmp	r3, r2
 8106c6e:	d004      	beq.n	8106c7a <HAL_DMA_IRQHandler+0xd2>
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	681b      	ldr	r3, [r3, #0]
 8106c74:	4a48      	ldr	r2, [pc, #288]	; (8106d98 <HAL_DMA_IRQHandler+0x1f0>)
 8106c76:	4293      	cmp	r3, r2
 8106c78:	d101      	bne.n	8106c7e <HAL_DMA_IRQHandler+0xd6>
 8106c7a:	2301      	movs	r3, #1
 8106c7c:	e000      	b.n	8106c80 <HAL_DMA_IRQHandler+0xd8>
 8106c7e:	2300      	movs	r3, #0
 8106c80:	2b00      	cmp	r3, #0
 8106c82:	f000 842b 	beq.w	81074dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106c8a:	f003 031f 	and.w	r3, r3, #31
 8106c8e:	2208      	movs	r2, #8
 8106c90:	409a      	lsls	r2, r3
 8106c92:	69bb      	ldr	r3, [r7, #24]
 8106c94:	4013      	ands	r3, r2
 8106c96:	2b00      	cmp	r3, #0
 8106c98:	f000 80a2 	beq.w	8106de0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	681b      	ldr	r3, [r3, #0]
 8106ca0:	4a2e      	ldr	r2, [pc, #184]	; (8106d5c <HAL_DMA_IRQHandler+0x1b4>)
 8106ca2:	4293      	cmp	r3, r2
 8106ca4:	d04a      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	681b      	ldr	r3, [r3, #0]
 8106caa:	4a2d      	ldr	r2, [pc, #180]	; (8106d60 <HAL_DMA_IRQHandler+0x1b8>)
 8106cac:	4293      	cmp	r3, r2
 8106cae:	d045      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	681b      	ldr	r3, [r3, #0]
 8106cb4:	4a2b      	ldr	r2, [pc, #172]	; (8106d64 <HAL_DMA_IRQHandler+0x1bc>)
 8106cb6:	4293      	cmp	r3, r2
 8106cb8:	d040      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106cba:	687b      	ldr	r3, [r7, #4]
 8106cbc:	681b      	ldr	r3, [r3, #0]
 8106cbe:	4a2a      	ldr	r2, [pc, #168]	; (8106d68 <HAL_DMA_IRQHandler+0x1c0>)
 8106cc0:	4293      	cmp	r3, r2
 8106cc2:	d03b      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	681b      	ldr	r3, [r3, #0]
 8106cc8:	4a28      	ldr	r2, [pc, #160]	; (8106d6c <HAL_DMA_IRQHandler+0x1c4>)
 8106cca:	4293      	cmp	r3, r2
 8106ccc:	d036      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	681b      	ldr	r3, [r3, #0]
 8106cd2:	4a27      	ldr	r2, [pc, #156]	; (8106d70 <HAL_DMA_IRQHandler+0x1c8>)
 8106cd4:	4293      	cmp	r3, r2
 8106cd6:	d031      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106cd8:	687b      	ldr	r3, [r7, #4]
 8106cda:	681b      	ldr	r3, [r3, #0]
 8106cdc:	4a25      	ldr	r2, [pc, #148]	; (8106d74 <HAL_DMA_IRQHandler+0x1cc>)
 8106cde:	4293      	cmp	r3, r2
 8106ce0:	d02c      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	681b      	ldr	r3, [r3, #0]
 8106ce6:	4a24      	ldr	r2, [pc, #144]	; (8106d78 <HAL_DMA_IRQHandler+0x1d0>)
 8106ce8:	4293      	cmp	r3, r2
 8106cea:	d027      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	681b      	ldr	r3, [r3, #0]
 8106cf0:	4a22      	ldr	r2, [pc, #136]	; (8106d7c <HAL_DMA_IRQHandler+0x1d4>)
 8106cf2:	4293      	cmp	r3, r2
 8106cf4:	d022      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	681b      	ldr	r3, [r3, #0]
 8106cfa:	4a21      	ldr	r2, [pc, #132]	; (8106d80 <HAL_DMA_IRQHandler+0x1d8>)
 8106cfc:	4293      	cmp	r3, r2
 8106cfe:	d01d      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	681b      	ldr	r3, [r3, #0]
 8106d04:	4a1f      	ldr	r2, [pc, #124]	; (8106d84 <HAL_DMA_IRQHandler+0x1dc>)
 8106d06:	4293      	cmp	r3, r2
 8106d08:	d018      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	681b      	ldr	r3, [r3, #0]
 8106d0e:	4a1e      	ldr	r2, [pc, #120]	; (8106d88 <HAL_DMA_IRQHandler+0x1e0>)
 8106d10:	4293      	cmp	r3, r2
 8106d12:	d013      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	681b      	ldr	r3, [r3, #0]
 8106d18:	4a1c      	ldr	r2, [pc, #112]	; (8106d8c <HAL_DMA_IRQHandler+0x1e4>)
 8106d1a:	4293      	cmp	r3, r2
 8106d1c:	d00e      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106d1e:	687b      	ldr	r3, [r7, #4]
 8106d20:	681b      	ldr	r3, [r3, #0]
 8106d22:	4a1b      	ldr	r2, [pc, #108]	; (8106d90 <HAL_DMA_IRQHandler+0x1e8>)
 8106d24:	4293      	cmp	r3, r2
 8106d26:	d009      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106d28:	687b      	ldr	r3, [r7, #4]
 8106d2a:	681b      	ldr	r3, [r3, #0]
 8106d2c:	4a19      	ldr	r2, [pc, #100]	; (8106d94 <HAL_DMA_IRQHandler+0x1ec>)
 8106d2e:	4293      	cmp	r3, r2
 8106d30:	d004      	beq.n	8106d3c <HAL_DMA_IRQHandler+0x194>
 8106d32:	687b      	ldr	r3, [r7, #4]
 8106d34:	681b      	ldr	r3, [r3, #0]
 8106d36:	4a18      	ldr	r2, [pc, #96]	; (8106d98 <HAL_DMA_IRQHandler+0x1f0>)
 8106d38:	4293      	cmp	r3, r2
 8106d3a:	d12f      	bne.n	8106d9c <HAL_DMA_IRQHandler+0x1f4>
 8106d3c:	687b      	ldr	r3, [r7, #4]
 8106d3e:	681b      	ldr	r3, [r3, #0]
 8106d40:	681b      	ldr	r3, [r3, #0]
 8106d42:	f003 0304 	and.w	r3, r3, #4
 8106d46:	2b00      	cmp	r3, #0
 8106d48:	bf14      	ite	ne
 8106d4a:	2301      	movne	r3, #1
 8106d4c:	2300      	moveq	r3, #0
 8106d4e:	b2db      	uxtb	r3, r3
 8106d50:	e02e      	b.n	8106db0 <HAL_DMA_IRQHandler+0x208>
 8106d52:	bf00      	nop
 8106d54:	10000000 	.word	0x10000000
 8106d58:	1b4e81b5 	.word	0x1b4e81b5
 8106d5c:	40020010 	.word	0x40020010
 8106d60:	40020028 	.word	0x40020028
 8106d64:	40020040 	.word	0x40020040
 8106d68:	40020058 	.word	0x40020058
 8106d6c:	40020070 	.word	0x40020070
 8106d70:	40020088 	.word	0x40020088
 8106d74:	400200a0 	.word	0x400200a0
 8106d78:	400200b8 	.word	0x400200b8
 8106d7c:	40020410 	.word	0x40020410
 8106d80:	40020428 	.word	0x40020428
 8106d84:	40020440 	.word	0x40020440
 8106d88:	40020458 	.word	0x40020458
 8106d8c:	40020470 	.word	0x40020470
 8106d90:	40020488 	.word	0x40020488
 8106d94:	400204a0 	.word	0x400204a0
 8106d98:	400204b8 	.word	0x400204b8
 8106d9c:	687b      	ldr	r3, [r7, #4]
 8106d9e:	681b      	ldr	r3, [r3, #0]
 8106da0:	681b      	ldr	r3, [r3, #0]
 8106da2:	f003 0308 	and.w	r3, r3, #8
 8106da6:	2b00      	cmp	r3, #0
 8106da8:	bf14      	ite	ne
 8106daa:	2301      	movne	r3, #1
 8106dac:	2300      	moveq	r3, #0
 8106dae:	b2db      	uxtb	r3, r3
 8106db0:	2b00      	cmp	r3, #0
 8106db2:	d015      	beq.n	8106de0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8106db4:	687b      	ldr	r3, [r7, #4]
 8106db6:	681b      	ldr	r3, [r3, #0]
 8106db8:	681a      	ldr	r2, [r3, #0]
 8106dba:	687b      	ldr	r3, [r7, #4]
 8106dbc:	681b      	ldr	r3, [r3, #0]
 8106dbe:	f022 0204 	bic.w	r2, r2, #4
 8106dc2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106dc8:	f003 031f 	and.w	r3, r3, #31
 8106dcc:	2208      	movs	r2, #8
 8106dce:	409a      	lsls	r2, r3
 8106dd0:	6a3b      	ldr	r3, [r7, #32]
 8106dd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8106dd4:	687b      	ldr	r3, [r7, #4]
 8106dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106dd8:	f043 0201 	orr.w	r2, r3, #1
 8106ddc:	687b      	ldr	r3, [r7, #4]
 8106dde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106de4:	f003 031f 	and.w	r3, r3, #31
 8106de8:	69ba      	ldr	r2, [r7, #24]
 8106dea:	fa22 f303 	lsr.w	r3, r2, r3
 8106dee:	f003 0301 	and.w	r3, r3, #1
 8106df2:	2b00      	cmp	r3, #0
 8106df4:	d06e      	beq.n	8106ed4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8106df6:	687b      	ldr	r3, [r7, #4]
 8106df8:	681b      	ldr	r3, [r3, #0]
 8106dfa:	4a69      	ldr	r2, [pc, #420]	; (8106fa0 <HAL_DMA_IRQHandler+0x3f8>)
 8106dfc:	4293      	cmp	r3, r2
 8106dfe:	d04a      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	681b      	ldr	r3, [r3, #0]
 8106e04:	4a67      	ldr	r2, [pc, #412]	; (8106fa4 <HAL_DMA_IRQHandler+0x3fc>)
 8106e06:	4293      	cmp	r3, r2
 8106e08:	d045      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e0a:	687b      	ldr	r3, [r7, #4]
 8106e0c:	681b      	ldr	r3, [r3, #0]
 8106e0e:	4a66      	ldr	r2, [pc, #408]	; (8106fa8 <HAL_DMA_IRQHandler+0x400>)
 8106e10:	4293      	cmp	r3, r2
 8106e12:	d040      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	681b      	ldr	r3, [r3, #0]
 8106e18:	4a64      	ldr	r2, [pc, #400]	; (8106fac <HAL_DMA_IRQHandler+0x404>)
 8106e1a:	4293      	cmp	r3, r2
 8106e1c:	d03b      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e1e:	687b      	ldr	r3, [r7, #4]
 8106e20:	681b      	ldr	r3, [r3, #0]
 8106e22:	4a63      	ldr	r2, [pc, #396]	; (8106fb0 <HAL_DMA_IRQHandler+0x408>)
 8106e24:	4293      	cmp	r3, r2
 8106e26:	d036      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	4a61      	ldr	r2, [pc, #388]	; (8106fb4 <HAL_DMA_IRQHandler+0x40c>)
 8106e2e:	4293      	cmp	r3, r2
 8106e30:	d031      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e32:	687b      	ldr	r3, [r7, #4]
 8106e34:	681b      	ldr	r3, [r3, #0]
 8106e36:	4a60      	ldr	r2, [pc, #384]	; (8106fb8 <HAL_DMA_IRQHandler+0x410>)
 8106e38:	4293      	cmp	r3, r2
 8106e3a:	d02c      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e3c:	687b      	ldr	r3, [r7, #4]
 8106e3e:	681b      	ldr	r3, [r3, #0]
 8106e40:	4a5e      	ldr	r2, [pc, #376]	; (8106fbc <HAL_DMA_IRQHandler+0x414>)
 8106e42:	4293      	cmp	r3, r2
 8106e44:	d027      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e46:	687b      	ldr	r3, [r7, #4]
 8106e48:	681b      	ldr	r3, [r3, #0]
 8106e4a:	4a5d      	ldr	r2, [pc, #372]	; (8106fc0 <HAL_DMA_IRQHandler+0x418>)
 8106e4c:	4293      	cmp	r3, r2
 8106e4e:	d022      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e50:	687b      	ldr	r3, [r7, #4]
 8106e52:	681b      	ldr	r3, [r3, #0]
 8106e54:	4a5b      	ldr	r2, [pc, #364]	; (8106fc4 <HAL_DMA_IRQHandler+0x41c>)
 8106e56:	4293      	cmp	r3, r2
 8106e58:	d01d      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e5a:	687b      	ldr	r3, [r7, #4]
 8106e5c:	681b      	ldr	r3, [r3, #0]
 8106e5e:	4a5a      	ldr	r2, [pc, #360]	; (8106fc8 <HAL_DMA_IRQHandler+0x420>)
 8106e60:	4293      	cmp	r3, r2
 8106e62:	d018      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e64:	687b      	ldr	r3, [r7, #4]
 8106e66:	681b      	ldr	r3, [r3, #0]
 8106e68:	4a58      	ldr	r2, [pc, #352]	; (8106fcc <HAL_DMA_IRQHandler+0x424>)
 8106e6a:	4293      	cmp	r3, r2
 8106e6c:	d013      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e6e:	687b      	ldr	r3, [r7, #4]
 8106e70:	681b      	ldr	r3, [r3, #0]
 8106e72:	4a57      	ldr	r2, [pc, #348]	; (8106fd0 <HAL_DMA_IRQHandler+0x428>)
 8106e74:	4293      	cmp	r3, r2
 8106e76:	d00e      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	681b      	ldr	r3, [r3, #0]
 8106e7c:	4a55      	ldr	r2, [pc, #340]	; (8106fd4 <HAL_DMA_IRQHandler+0x42c>)
 8106e7e:	4293      	cmp	r3, r2
 8106e80:	d009      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e82:	687b      	ldr	r3, [r7, #4]
 8106e84:	681b      	ldr	r3, [r3, #0]
 8106e86:	4a54      	ldr	r2, [pc, #336]	; (8106fd8 <HAL_DMA_IRQHandler+0x430>)
 8106e88:	4293      	cmp	r3, r2
 8106e8a:	d004      	beq.n	8106e96 <HAL_DMA_IRQHandler+0x2ee>
 8106e8c:	687b      	ldr	r3, [r7, #4]
 8106e8e:	681b      	ldr	r3, [r3, #0]
 8106e90:	4a52      	ldr	r2, [pc, #328]	; (8106fdc <HAL_DMA_IRQHandler+0x434>)
 8106e92:	4293      	cmp	r3, r2
 8106e94:	d10a      	bne.n	8106eac <HAL_DMA_IRQHandler+0x304>
 8106e96:	687b      	ldr	r3, [r7, #4]
 8106e98:	681b      	ldr	r3, [r3, #0]
 8106e9a:	695b      	ldr	r3, [r3, #20]
 8106e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106ea0:	2b00      	cmp	r3, #0
 8106ea2:	bf14      	ite	ne
 8106ea4:	2301      	movne	r3, #1
 8106ea6:	2300      	moveq	r3, #0
 8106ea8:	b2db      	uxtb	r3, r3
 8106eaa:	e003      	b.n	8106eb4 <HAL_DMA_IRQHandler+0x30c>
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	681b      	ldr	r3, [r3, #0]
 8106eb0:	681b      	ldr	r3, [r3, #0]
 8106eb2:	2300      	movs	r3, #0
 8106eb4:	2b00      	cmp	r3, #0
 8106eb6:	d00d      	beq.n	8106ed4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ebc:	f003 031f 	and.w	r3, r3, #31
 8106ec0:	2201      	movs	r2, #1
 8106ec2:	409a      	lsls	r2, r3
 8106ec4:	6a3b      	ldr	r3, [r7, #32]
 8106ec6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8106ec8:	687b      	ldr	r3, [r7, #4]
 8106eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ecc:	f043 0202 	orr.w	r2, r3, #2
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106ed4:	687b      	ldr	r3, [r7, #4]
 8106ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ed8:	f003 031f 	and.w	r3, r3, #31
 8106edc:	2204      	movs	r2, #4
 8106ede:	409a      	lsls	r2, r3
 8106ee0:	69bb      	ldr	r3, [r7, #24]
 8106ee2:	4013      	ands	r3, r2
 8106ee4:	2b00      	cmp	r3, #0
 8106ee6:	f000 808f 	beq.w	8107008 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	681b      	ldr	r3, [r3, #0]
 8106eee:	4a2c      	ldr	r2, [pc, #176]	; (8106fa0 <HAL_DMA_IRQHandler+0x3f8>)
 8106ef0:	4293      	cmp	r3, r2
 8106ef2:	d04a      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	4a2a      	ldr	r2, [pc, #168]	; (8106fa4 <HAL_DMA_IRQHandler+0x3fc>)
 8106efa:	4293      	cmp	r3, r2
 8106efc:	d045      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106efe:	687b      	ldr	r3, [r7, #4]
 8106f00:	681b      	ldr	r3, [r3, #0]
 8106f02:	4a29      	ldr	r2, [pc, #164]	; (8106fa8 <HAL_DMA_IRQHandler+0x400>)
 8106f04:	4293      	cmp	r3, r2
 8106f06:	d040      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	681b      	ldr	r3, [r3, #0]
 8106f0c:	4a27      	ldr	r2, [pc, #156]	; (8106fac <HAL_DMA_IRQHandler+0x404>)
 8106f0e:	4293      	cmp	r3, r2
 8106f10:	d03b      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f12:	687b      	ldr	r3, [r7, #4]
 8106f14:	681b      	ldr	r3, [r3, #0]
 8106f16:	4a26      	ldr	r2, [pc, #152]	; (8106fb0 <HAL_DMA_IRQHandler+0x408>)
 8106f18:	4293      	cmp	r3, r2
 8106f1a:	d036      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f1c:	687b      	ldr	r3, [r7, #4]
 8106f1e:	681b      	ldr	r3, [r3, #0]
 8106f20:	4a24      	ldr	r2, [pc, #144]	; (8106fb4 <HAL_DMA_IRQHandler+0x40c>)
 8106f22:	4293      	cmp	r3, r2
 8106f24:	d031      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	4a23      	ldr	r2, [pc, #140]	; (8106fb8 <HAL_DMA_IRQHandler+0x410>)
 8106f2c:	4293      	cmp	r3, r2
 8106f2e:	d02c      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	681b      	ldr	r3, [r3, #0]
 8106f34:	4a21      	ldr	r2, [pc, #132]	; (8106fbc <HAL_DMA_IRQHandler+0x414>)
 8106f36:	4293      	cmp	r3, r2
 8106f38:	d027      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	681b      	ldr	r3, [r3, #0]
 8106f3e:	4a20      	ldr	r2, [pc, #128]	; (8106fc0 <HAL_DMA_IRQHandler+0x418>)
 8106f40:	4293      	cmp	r3, r2
 8106f42:	d022      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	681b      	ldr	r3, [r3, #0]
 8106f48:	4a1e      	ldr	r2, [pc, #120]	; (8106fc4 <HAL_DMA_IRQHandler+0x41c>)
 8106f4a:	4293      	cmp	r3, r2
 8106f4c:	d01d      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f4e:	687b      	ldr	r3, [r7, #4]
 8106f50:	681b      	ldr	r3, [r3, #0]
 8106f52:	4a1d      	ldr	r2, [pc, #116]	; (8106fc8 <HAL_DMA_IRQHandler+0x420>)
 8106f54:	4293      	cmp	r3, r2
 8106f56:	d018      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	4a1b      	ldr	r2, [pc, #108]	; (8106fcc <HAL_DMA_IRQHandler+0x424>)
 8106f5e:	4293      	cmp	r3, r2
 8106f60:	d013      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f62:	687b      	ldr	r3, [r7, #4]
 8106f64:	681b      	ldr	r3, [r3, #0]
 8106f66:	4a1a      	ldr	r2, [pc, #104]	; (8106fd0 <HAL_DMA_IRQHandler+0x428>)
 8106f68:	4293      	cmp	r3, r2
 8106f6a:	d00e      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	681b      	ldr	r3, [r3, #0]
 8106f70:	4a18      	ldr	r2, [pc, #96]	; (8106fd4 <HAL_DMA_IRQHandler+0x42c>)
 8106f72:	4293      	cmp	r3, r2
 8106f74:	d009      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f76:	687b      	ldr	r3, [r7, #4]
 8106f78:	681b      	ldr	r3, [r3, #0]
 8106f7a:	4a17      	ldr	r2, [pc, #92]	; (8106fd8 <HAL_DMA_IRQHandler+0x430>)
 8106f7c:	4293      	cmp	r3, r2
 8106f7e:	d004      	beq.n	8106f8a <HAL_DMA_IRQHandler+0x3e2>
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	681b      	ldr	r3, [r3, #0]
 8106f84:	4a15      	ldr	r2, [pc, #84]	; (8106fdc <HAL_DMA_IRQHandler+0x434>)
 8106f86:	4293      	cmp	r3, r2
 8106f88:	d12a      	bne.n	8106fe0 <HAL_DMA_IRQHandler+0x438>
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	681b      	ldr	r3, [r3, #0]
 8106f8e:	681b      	ldr	r3, [r3, #0]
 8106f90:	f003 0302 	and.w	r3, r3, #2
 8106f94:	2b00      	cmp	r3, #0
 8106f96:	bf14      	ite	ne
 8106f98:	2301      	movne	r3, #1
 8106f9a:	2300      	moveq	r3, #0
 8106f9c:	b2db      	uxtb	r3, r3
 8106f9e:	e023      	b.n	8106fe8 <HAL_DMA_IRQHandler+0x440>
 8106fa0:	40020010 	.word	0x40020010
 8106fa4:	40020028 	.word	0x40020028
 8106fa8:	40020040 	.word	0x40020040
 8106fac:	40020058 	.word	0x40020058
 8106fb0:	40020070 	.word	0x40020070
 8106fb4:	40020088 	.word	0x40020088
 8106fb8:	400200a0 	.word	0x400200a0
 8106fbc:	400200b8 	.word	0x400200b8
 8106fc0:	40020410 	.word	0x40020410
 8106fc4:	40020428 	.word	0x40020428
 8106fc8:	40020440 	.word	0x40020440
 8106fcc:	40020458 	.word	0x40020458
 8106fd0:	40020470 	.word	0x40020470
 8106fd4:	40020488 	.word	0x40020488
 8106fd8:	400204a0 	.word	0x400204a0
 8106fdc:	400204b8 	.word	0x400204b8
 8106fe0:	687b      	ldr	r3, [r7, #4]
 8106fe2:	681b      	ldr	r3, [r3, #0]
 8106fe4:	681b      	ldr	r3, [r3, #0]
 8106fe6:	2300      	movs	r3, #0
 8106fe8:	2b00      	cmp	r3, #0
 8106fea:	d00d      	beq.n	8107008 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ff0:	f003 031f 	and.w	r3, r3, #31
 8106ff4:	2204      	movs	r2, #4
 8106ff6:	409a      	lsls	r2, r3
 8106ff8:	6a3b      	ldr	r3, [r7, #32]
 8106ffa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8106ffc:	687b      	ldr	r3, [r7, #4]
 8106ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107000:	f043 0204 	orr.w	r2, r3, #4
 8107004:	687b      	ldr	r3, [r7, #4]
 8107006:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8107008:	687b      	ldr	r3, [r7, #4]
 810700a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810700c:	f003 031f 	and.w	r3, r3, #31
 8107010:	2210      	movs	r2, #16
 8107012:	409a      	lsls	r2, r3
 8107014:	69bb      	ldr	r3, [r7, #24]
 8107016:	4013      	ands	r3, r2
 8107018:	2b00      	cmp	r3, #0
 810701a:	f000 80a6 	beq.w	810716a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810701e:	687b      	ldr	r3, [r7, #4]
 8107020:	681b      	ldr	r3, [r3, #0]
 8107022:	4a85      	ldr	r2, [pc, #532]	; (8107238 <HAL_DMA_IRQHandler+0x690>)
 8107024:	4293      	cmp	r3, r2
 8107026:	d04a      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	681b      	ldr	r3, [r3, #0]
 810702c:	4a83      	ldr	r2, [pc, #524]	; (810723c <HAL_DMA_IRQHandler+0x694>)
 810702e:	4293      	cmp	r3, r2
 8107030:	d045      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 8107032:	687b      	ldr	r3, [r7, #4]
 8107034:	681b      	ldr	r3, [r3, #0]
 8107036:	4a82      	ldr	r2, [pc, #520]	; (8107240 <HAL_DMA_IRQHandler+0x698>)
 8107038:	4293      	cmp	r3, r2
 810703a:	d040      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	681b      	ldr	r3, [r3, #0]
 8107040:	4a80      	ldr	r2, [pc, #512]	; (8107244 <HAL_DMA_IRQHandler+0x69c>)
 8107042:	4293      	cmp	r3, r2
 8107044:	d03b      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 8107046:	687b      	ldr	r3, [r7, #4]
 8107048:	681b      	ldr	r3, [r3, #0]
 810704a:	4a7f      	ldr	r2, [pc, #508]	; (8107248 <HAL_DMA_IRQHandler+0x6a0>)
 810704c:	4293      	cmp	r3, r2
 810704e:	d036      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	681b      	ldr	r3, [r3, #0]
 8107054:	4a7d      	ldr	r2, [pc, #500]	; (810724c <HAL_DMA_IRQHandler+0x6a4>)
 8107056:	4293      	cmp	r3, r2
 8107058:	d031      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 810705a:	687b      	ldr	r3, [r7, #4]
 810705c:	681b      	ldr	r3, [r3, #0]
 810705e:	4a7c      	ldr	r2, [pc, #496]	; (8107250 <HAL_DMA_IRQHandler+0x6a8>)
 8107060:	4293      	cmp	r3, r2
 8107062:	d02c      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 8107064:	687b      	ldr	r3, [r7, #4]
 8107066:	681b      	ldr	r3, [r3, #0]
 8107068:	4a7a      	ldr	r2, [pc, #488]	; (8107254 <HAL_DMA_IRQHandler+0x6ac>)
 810706a:	4293      	cmp	r3, r2
 810706c:	d027      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 810706e:	687b      	ldr	r3, [r7, #4]
 8107070:	681b      	ldr	r3, [r3, #0]
 8107072:	4a79      	ldr	r2, [pc, #484]	; (8107258 <HAL_DMA_IRQHandler+0x6b0>)
 8107074:	4293      	cmp	r3, r2
 8107076:	d022      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 8107078:	687b      	ldr	r3, [r7, #4]
 810707a:	681b      	ldr	r3, [r3, #0]
 810707c:	4a77      	ldr	r2, [pc, #476]	; (810725c <HAL_DMA_IRQHandler+0x6b4>)
 810707e:	4293      	cmp	r3, r2
 8107080:	d01d      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 8107082:	687b      	ldr	r3, [r7, #4]
 8107084:	681b      	ldr	r3, [r3, #0]
 8107086:	4a76      	ldr	r2, [pc, #472]	; (8107260 <HAL_DMA_IRQHandler+0x6b8>)
 8107088:	4293      	cmp	r3, r2
 810708a:	d018      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 810708c:	687b      	ldr	r3, [r7, #4]
 810708e:	681b      	ldr	r3, [r3, #0]
 8107090:	4a74      	ldr	r2, [pc, #464]	; (8107264 <HAL_DMA_IRQHandler+0x6bc>)
 8107092:	4293      	cmp	r3, r2
 8107094:	d013      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 8107096:	687b      	ldr	r3, [r7, #4]
 8107098:	681b      	ldr	r3, [r3, #0]
 810709a:	4a73      	ldr	r2, [pc, #460]	; (8107268 <HAL_DMA_IRQHandler+0x6c0>)
 810709c:	4293      	cmp	r3, r2
 810709e:	d00e      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 81070a0:	687b      	ldr	r3, [r7, #4]
 81070a2:	681b      	ldr	r3, [r3, #0]
 81070a4:	4a71      	ldr	r2, [pc, #452]	; (810726c <HAL_DMA_IRQHandler+0x6c4>)
 81070a6:	4293      	cmp	r3, r2
 81070a8:	d009      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 81070aa:	687b      	ldr	r3, [r7, #4]
 81070ac:	681b      	ldr	r3, [r3, #0]
 81070ae:	4a70      	ldr	r2, [pc, #448]	; (8107270 <HAL_DMA_IRQHandler+0x6c8>)
 81070b0:	4293      	cmp	r3, r2
 81070b2:	d004      	beq.n	81070be <HAL_DMA_IRQHandler+0x516>
 81070b4:	687b      	ldr	r3, [r7, #4]
 81070b6:	681b      	ldr	r3, [r3, #0]
 81070b8:	4a6e      	ldr	r2, [pc, #440]	; (8107274 <HAL_DMA_IRQHandler+0x6cc>)
 81070ba:	4293      	cmp	r3, r2
 81070bc:	d10a      	bne.n	81070d4 <HAL_DMA_IRQHandler+0x52c>
 81070be:	687b      	ldr	r3, [r7, #4]
 81070c0:	681b      	ldr	r3, [r3, #0]
 81070c2:	681b      	ldr	r3, [r3, #0]
 81070c4:	f003 0308 	and.w	r3, r3, #8
 81070c8:	2b00      	cmp	r3, #0
 81070ca:	bf14      	ite	ne
 81070cc:	2301      	movne	r3, #1
 81070ce:	2300      	moveq	r3, #0
 81070d0:	b2db      	uxtb	r3, r3
 81070d2:	e009      	b.n	81070e8 <HAL_DMA_IRQHandler+0x540>
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	681b      	ldr	r3, [r3, #0]
 81070d8:	681b      	ldr	r3, [r3, #0]
 81070da:	f003 0304 	and.w	r3, r3, #4
 81070de:	2b00      	cmp	r3, #0
 81070e0:	bf14      	ite	ne
 81070e2:	2301      	movne	r3, #1
 81070e4:	2300      	moveq	r3, #0
 81070e6:	b2db      	uxtb	r3, r3
 81070e8:	2b00      	cmp	r3, #0
 81070ea:	d03e      	beq.n	810716a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81070ec:	687b      	ldr	r3, [r7, #4]
 81070ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81070f0:	f003 031f 	and.w	r3, r3, #31
 81070f4:	2210      	movs	r2, #16
 81070f6:	409a      	lsls	r2, r3
 81070f8:	6a3b      	ldr	r3, [r7, #32]
 81070fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	681b      	ldr	r3, [r3, #0]
 8107100:	681b      	ldr	r3, [r3, #0]
 8107102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8107106:	2b00      	cmp	r3, #0
 8107108:	d018      	beq.n	810713c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810710a:	687b      	ldr	r3, [r7, #4]
 810710c:	681b      	ldr	r3, [r3, #0]
 810710e:	681b      	ldr	r3, [r3, #0]
 8107110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8107114:	2b00      	cmp	r3, #0
 8107116:	d108      	bne.n	810712a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810711c:	2b00      	cmp	r3, #0
 810711e:	d024      	beq.n	810716a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107124:	6878      	ldr	r0, [r7, #4]
 8107126:	4798      	blx	r3
 8107128:	e01f      	b.n	810716a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810712a:	687b      	ldr	r3, [r7, #4]
 810712c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810712e:	2b00      	cmp	r3, #0
 8107130:	d01b      	beq.n	810716a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107136:	6878      	ldr	r0, [r7, #4]
 8107138:	4798      	blx	r3
 810713a:	e016      	b.n	810716a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	681b      	ldr	r3, [r3, #0]
 8107140:	681b      	ldr	r3, [r3, #0]
 8107142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107146:	2b00      	cmp	r3, #0
 8107148:	d107      	bne.n	810715a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	681b      	ldr	r3, [r3, #0]
 810714e:	681a      	ldr	r2, [r3, #0]
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	681b      	ldr	r3, [r3, #0]
 8107154:	f022 0208 	bic.w	r2, r2, #8
 8107158:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 810715a:	687b      	ldr	r3, [r7, #4]
 810715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810715e:	2b00      	cmp	r3, #0
 8107160:	d003      	beq.n	810716a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8107162:	687b      	ldr	r3, [r7, #4]
 8107164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107166:	6878      	ldr	r0, [r7, #4]
 8107168:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810716e:	f003 031f 	and.w	r3, r3, #31
 8107172:	2220      	movs	r2, #32
 8107174:	409a      	lsls	r2, r3
 8107176:	69bb      	ldr	r3, [r7, #24]
 8107178:	4013      	ands	r3, r2
 810717a:	2b00      	cmp	r3, #0
 810717c:	f000 8110 	beq.w	81073a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8107180:	687b      	ldr	r3, [r7, #4]
 8107182:	681b      	ldr	r3, [r3, #0]
 8107184:	4a2c      	ldr	r2, [pc, #176]	; (8107238 <HAL_DMA_IRQHandler+0x690>)
 8107186:	4293      	cmp	r3, r2
 8107188:	d04a      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	681b      	ldr	r3, [r3, #0]
 810718e:	4a2b      	ldr	r2, [pc, #172]	; (810723c <HAL_DMA_IRQHandler+0x694>)
 8107190:	4293      	cmp	r3, r2
 8107192:	d045      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 8107194:	687b      	ldr	r3, [r7, #4]
 8107196:	681b      	ldr	r3, [r3, #0]
 8107198:	4a29      	ldr	r2, [pc, #164]	; (8107240 <HAL_DMA_IRQHandler+0x698>)
 810719a:	4293      	cmp	r3, r2
 810719c:	d040      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 810719e:	687b      	ldr	r3, [r7, #4]
 81071a0:	681b      	ldr	r3, [r3, #0]
 81071a2:	4a28      	ldr	r2, [pc, #160]	; (8107244 <HAL_DMA_IRQHandler+0x69c>)
 81071a4:	4293      	cmp	r3, r2
 81071a6:	d03b      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 81071a8:	687b      	ldr	r3, [r7, #4]
 81071aa:	681b      	ldr	r3, [r3, #0]
 81071ac:	4a26      	ldr	r2, [pc, #152]	; (8107248 <HAL_DMA_IRQHandler+0x6a0>)
 81071ae:	4293      	cmp	r3, r2
 81071b0:	d036      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	681b      	ldr	r3, [r3, #0]
 81071b6:	4a25      	ldr	r2, [pc, #148]	; (810724c <HAL_DMA_IRQHandler+0x6a4>)
 81071b8:	4293      	cmp	r3, r2
 81071ba:	d031      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 81071bc:	687b      	ldr	r3, [r7, #4]
 81071be:	681b      	ldr	r3, [r3, #0]
 81071c0:	4a23      	ldr	r2, [pc, #140]	; (8107250 <HAL_DMA_IRQHandler+0x6a8>)
 81071c2:	4293      	cmp	r3, r2
 81071c4:	d02c      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 81071c6:	687b      	ldr	r3, [r7, #4]
 81071c8:	681b      	ldr	r3, [r3, #0]
 81071ca:	4a22      	ldr	r2, [pc, #136]	; (8107254 <HAL_DMA_IRQHandler+0x6ac>)
 81071cc:	4293      	cmp	r3, r2
 81071ce:	d027      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	681b      	ldr	r3, [r3, #0]
 81071d4:	4a20      	ldr	r2, [pc, #128]	; (8107258 <HAL_DMA_IRQHandler+0x6b0>)
 81071d6:	4293      	cmp	r3, r2
 81071d8:	d022      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 81071da:	687b      	ldr	r3, [r7, #4]
 81071dc:	681b      	ldr	r3, [r3, #0]
 81071de:	4a1f      	ldr	r2, [pc, #124]	; (810725c <HAL_DMA_IRQHandler+0x6b4>)
 81071e0:	4293      	cmp	r3, r2
 81071e2:	d01d      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	681b      	ldr	r3, [r3, #0]
 81071e8:	4a1d      	ldr	r2, [pc, #116]	; (8107260 <HAL_DMA_IRQHandler+0x6b8>)
 81071ea:	4293      	cmp	r3, r2
 81071ec:	d018      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 81071ee:	687b      	ldr	r3, [r7, #4]
 81071f0:	681b      	ldr	r3, [r3, #0]
 81071f2:	4a1c      	ldr	r2, [pc, #112]	; (8107264 <HAL_DMA_IRQHandler+0x6bc>)
 81071f4:	4293      	cmp	r3, r2
 81071f6:	d013      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 81071f8:	687b      	ldr	r3, [r7, #4]
 81071fa:	681b      	ldr	r3, [r3, #0]
 81071fc:	4a1a      	ldr	r2, [pc, #104]	; (8107268 <HAL_DMA_IRQHandler+0x6c0>)
 81071fe:	4293      	cmp	r3, r2
 8107200:	d00e      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 8107202:	687b      	ldr	r3, [r7, #4]
 8107204:	681b      	ldr	r3, [r3, #0]
 8107206:	4a19      	ldr	r2, [pc, #100]	; (810726c <HAL_DMA_IRQHandler+0x6c4>)
 8107208:	4293      	cmp	r3, r2
 810720a:	d009      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	681b      	ldr	r3, [r3, #0]
 8107210:	4a17      	ldr	r2, [pc, #92]	; (8107270 <HAL_DMA_IRQHandler+0x6c8>)
 8107212:	4293      	cmp	r3, r2
 8107214:	d004      	beq.n	8107220 <HAL_DMA_IRQHandler+0x678>
 8107216:	687b      	ldr	r3, [r7, #4]
 8107218:	681b      	ldr	r3, [r3, #0]
 810721a:	4a16      	ldr	r2, [pc, #88]	; (8107274 <HAL_DMA_IRQHandler+0x6cc>)
 810721c:	4293      	cmp	r3, r2
 810721e:	d12b      	bne.n	8107278 <HAL_DMA_IRQHandler+0x6d0>
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	681b      	ldr	r3, [r3, #0]
 8107224:	681b      	ldr	r3, [r3, #0]
 8107226:	f003 0310 	and.w	r3, r3, #16
 810722a:	2b00      	cmp	r3, #0
 810722c:	bf14      	ite	ne
 810722e:	2301      	movne	r3, #1
 8107230:	2300      	moveq	r3, #0
 8107232:	b2db      	uxtb	r3, r3
 8107234:	e02a      	b.n	810728c <HAL_DMA_IRQHandler+0x6e4>
 8107236:	bf00      	nop
 8107238:	40020010 	.word	0x40020010
 810723c:	40020028 	.word	0x40020028
 8107240:	40020040 	.word	0x40020040
 8107244:	40020058 	.word	0x40020058
 8107248:	40020070 	.word	0x40020070
 810724c:	40020088 	.word	0x40020088
 8107250:	400200a0 	.word	0x400200a0
 8107254:	400200b8 	.word	0x400200b8
 8107258:	40020410 	.word	0x40020410
 810725c:	40020428 	.word	0x40020428
 8107260:	40020440 	.word	0x40020440
 8107264:	40020458 	.word	0x40020458
 8107268:	40020470 	.word	0x40020470
 810726c:	40020488 	.word	0x40020488
 8107270:	400204a0 	.word	0x400204a0
 8107274:	400204b8 	.word	0x400204b8
 8107278:	687b      	ldr	r3, [r7, #4]
 810727a:	681b      	ldr	r3, [r3, #0]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	f003 0302 	and.w	r3, r3, #2
 8107282:	2b00      	cmp	r3, #0
 8107284:	bf14      	ite	ne
 8107286:	2301      	movne	r3, #1
 8107288:	2300      	moveq	r3, #0
 810728a:	b2db      	uxtb	r3, r3
 810728c:	2b00      	cmp	r3, #0
 810728e:	f000 8087 	beq.w	81073a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107296:	f003 031f 	and.w	r3, r3, #31
 810729a:	2220      	movs	r2, #32
 810729c:	409a      	lsls	r2, r3
 810729e:	6a3b      	ldr	r3, [r7, #32]
 81072a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81072a2:	687b      	ldr	r3, [r7, #4]
 81072a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81072a8:	b2db      	uxtb	r3, r3
 81072aa:	2b04      	cmp	r3, #4
 81072ac:	d139      	bne.n	8107322 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81072ae:	687b      	ldr	r3, [r7, #4]
 81072b0:	681b      	ldr	r3, [r3, #0]
 81072b2:	681a      	ldr	r2, [r3, #0]
 81072b4:	687b      	ldr	r3, [r7, #4]
 81072b6:	681b      	ldr	r3, [r3, #0]
 81072b8:	f022 0216 	bic.w	r2, r2, #22
 81072bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81072be:	687b      	ldr	r3, [r7, #4]
 81072c0:	681b      	ldr	r3, [r3, #0]
 81072c2:	695a      	ldr	r2, [r3, #20]
 81072c4:	687b      	ldr	r3, [r7, #4]
 81072c6:	681b      	ldr	r3, [r3, #0]
 81072c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81072cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81072ce:	687b      	ldr	r3, [r7, #4]
 81072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81072d2:	2b00      	cmp	r3, #0
 81072d4:	d103      	bne.n	81072de <HAL_DMA_IRQHandler+0x736>
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81072da:	2b00      	cmp	r3, #0
 81072dc:	d007      	beq.n	81072ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	681b      	ldr	r3, [r3, #0]
 81072e2:	681a      	ldr	r2, [r3, #0]
 81072e4:	687b      	ldr	r3, [r7, #4]
 81072e6:	681b      	ldr	r3, [r3, #0]
 81072e8:	f022 0208 	bic.w	r2, r2, #8
 81072ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81072ee:	687b      	ldr	r3, [r7, #4]
 81072f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81072f2:	f003 031f 	and.w	r3, r3, #31
 81072f6:	223f      	movs	r2, #63	; 0x3f
 81072f8:	409a      	lsls	r2, r3
 81072fa:	6a3b      	ldr	r3, [r7, #32]
 81072fc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81072fe:	687b      	ldr	r3, [r7, #4]
 8107300:	2200      	movs	r2, #0
 8107302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	2201      	movs	r2, #1
 810730a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107312:	2b00      	cmp	r3, #0
 8107314:	f000 834a 	beq.w	81079ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810731c:	6878      	ldr	r0, [r7, #4]
 810731e:	4798      	blx	r3
          }
          return;
 8107320:	e344      	b.n	81079ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8107322:	687b      	ldr	r3, [r7, #4]
 8107324:	681b      	ldr	r3, [r3, #0]
 8107326:	681b      	ldr	r3, [r3, #0]
 8107328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810732c:	2b00      	cmp	r3, #0
 810732e:	d018      	beq.n	8107362 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	681b      	ldr	r3, [r3, #0]
 8107334:	681b      	ldr	r3, [r3, #0]
 8107336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810733a:	2b00      	cmp	r3, #0
 810733c:	d108      	bne.n	8107350 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 810733e:	687b      	ldr	r3, [r7, #4]
 8107340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107342:	2b00      	cmp	r3, #0
 8107344:	d02c      	beq.n	81073a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810734a:	6878      	ldr	r0, [r7, #4]
 810734c:	4798      	blx	r3
 810734e:	e027      	b.n	81073a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107354:	2b00      	cmp	r3, #0
 8107356:	d023      	beq.n	81073a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8107358:	687b      	ldr	r3, [r7, #4]
 810735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810735c:	6878      	ldr	r0, [r7, #4]
 810735e:	4798      	blx	r3
 8107360:	e01e      	b.n	81073a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8107362:	687b      	ldr	r3, [r7, #4]
 8107364:	681b      	ldr	r3, [r3, #0]
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810736c:	2b00      	cmp	r3, #0
 810736e:	d10f      	bne.n	8107390 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8107370:	687b      	ldr	r3, [r7, #4]
 8107372:	681b      	ldr	r3, [r3, #0]
 8107374:	681a      	ldr	r2, [r3, #0]
 8107376:	687b      	ldr	r3, [r7, #4]
 8107378:	681b      	ldr	r3, [r3, #0]
 810737a:	f022 0210 	bic.w	r2, r2, #16
 810737e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	2200      	movs	r2, #0
 8107384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8107388:	687b      	ldr	r3, [r7, #4]
 810738a:	2201      	movs	r2, #1
 810738c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8107390:	687b      	ldr	r3, [r7, #4]
 8107392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107394:	2b00      	cmp	r3, #0
 8107396:	d003      	beq.n	81073a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8107398:	687b      	ldr	r3, [r7, #4]
 810739a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810739c:	6878      	ldr	r0, [r7, #4]
 810739e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81073a0:	687b      	ldr	r3, [r7, #4]
 81073a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81073a4:	2b00      	cmp	r3, #0
 81073a6:	f000 8306 	beq.w	81079b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81073aa:	687b      	ldr	r3, [r7, #4]
 81073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81073ae:	f003 0301 	and.w	r3, r3, #1
 81073b2:	2b00      	cmp	r3, #0
 81073b4:	f000 8088 	beq.w	81074c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81073b8:	687b      	ldr	r3, [r7, #4]
 81073ba:	2204      	movs	r2, #4
 81073bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81073c0:	687b      	ldr	r3, [r7, #4]
 81073c2:	681b      	ldr	r3, [r3, #0]
 81073c4:	4a7a      	ldr	r2, [pc, #488]	; (81075b0 <HAL_DMA_IRQHandler+0xa08>)
 81073c6:	4293      	cmp	r3, r2
 81073c8:	d04a      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 81073ca:	687b      	ldr	r3, [r7, #4]
 81073cc:	681b      	ldr	r3, [r3, #0]
 81073ce:	4a79      	ldr	r2, [pc, #484]	; (81075b4 <HAL_DMA_IRQHandler+0xa0c>)
 81073d0:	4293      	cmp	r3, r2
 81073d2:	d045      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	681b      	ldr	r3, [r3, #0]
 81073d8:	4a77      	ldr	r2, [pc, #476]	; (81075b8 <HAL_DMA_IRQHandler+0xa10>)
 81073da:	4293      	cmp	r3, r2
 81073dc:	d040      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 81073de:	687b      	ldr	r3, [r7, #4]
 81073e0:	681b      	ldr	r3, [r3, #0]
 81073e2:	4a76      	ldr	r2, [pc, #472]	; (81075bc <HAL_DMA_IRQHandler+0xa14>)
 81073e4:	4293      	cmp	r3, r2
 81073e6:	d03b      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	681b      	ldr	r3, [r3, #0]
 81073ec:	4a74      	ldr	r2, [pc, #464]	; (81075c0 <HAL_DMA_IRQHandler+0xa18>)
 81073ee:	4293      	cmp	r3, r2
 81073f0:	d036      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	681b      	ldr	r3, [r3, #0]
 81073f6:	4a73      	ldr	r2, [pc, #460]	; (81075c4 <HAL_DMA_IRQHandler+0xa1c>)
 81073f8:	4293      	cmp	r3, r2
 81073fa:	d031      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	4a71      	ldr	r2, [pc, #452]	; (81075c8 <HAL_DMA_IRQHandler+0xa20>)
 8107402:	4293      	cmp	r3, r2
 8107404:	d02c      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 8107406:	687b      	ldr	r3, [r7, #4]
 8107408:	681b      	ldr	r3, [r3, #0]
 810740a:	4a70      	ldr	r2, [pc, #448]	; (81075cc <HAL_DMA_IRQHandler+0xa24>)
 810740c:	4293      	cmp	r3, r2
 810740e:	d027      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	681b      	ldr	r3, [r3, #0]
 8107414:	4a6e      	ldr	r2, [pc, #440]	; (81075d0 <HAL_DMA_IRQHandler+0xa28>)
 8107416:	4293      	cmp	r3, r2
 8107418:	d022      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 810741a:	687b      	ldr	r3, [r7, #4]
 810741c:	681b      	ldr	r3, [r3, #0]
 810741e:	4a6d      	ldr	r2, [pc, #436]	; (81075d4 <HAL_DMA_IRQHandler+0xa2c>)
 8107420:	4293      	cmp	r3, r2
 8107422:	d01d      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 8107424:	687b      	ldr	r3, [r7, #4]
 8107426:	681b      	ldr	r3, [r3, #0]
 8107428:	4a6b      	ldr	r2, [pc, #428]	; (81075d8 <HAL_DMA_IRQHandler+0xa30>)
 810742a:	4293      	cmp	r3, r2
 810742c:	d018      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 810742e:	687b      	ldr	r3, [r7, #4]
 8107430:	681b      	ldr	r3, [r3, #0]
 8107432:	4a6a      	ldr	r2, [pc, #424]	; (81075dc <HAL_DMA_IRQHandler+0xa34>)
 8107434:	4293      	cmp	r3, r2
 8107436:	d013      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 8107438:	687b      	ldr	r3, [r7, #4]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	4a68      	ldr	r2, [pc, #416]	; (81075e0 <HAL_DMA_IRQHandler+0xa38>)
 810743e:	4293      	cmp	r3, r2
 8107440:	d00e      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	681b      	ldr	r3, [r3, #0]
 8107446:	4a67      	ldr	r2, [pc, #412]	; (81075e4 <HAL_DMA_IRQHandler+0xa3c>)
 8107448:	4293      	cmp	r3, r2
 810744a:	d009      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 810744c:	687b      	ldr	r3, [r7, #4]
 810744e:	681b      	ldr	r3, [r3, #0]
 8107450:	4a65      	ldr	r2, [pc, #404]	; (81075e8 <HAL_DMA_IRQHandler+0xa40>)
 8107452:	4293      	cmp	r3, r2
 8107454:	d004      	beq.n	8107460 <HAL_DMA_IRQHandler+0x8b8>
 8107456:	687b      	ldr	r3, [r7, #4]
 8107458:	681b      	ldr	r3, [r3, #0]
 810745a:	4a64      	ldr	r2, [pc, #400]	; (81075ec <HAL_DMA_IRQHandler+0xa44>)
 810745c:	4293      	cmp	r3, r2
 810745e:	d108      	bne.n	8107472 <HAL_DMA_IRQHandler+0x8ca>
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	681b      	ldr	r3, [r3, #0]
 8107464:	681a      	ldr	r2, [r3, #0]
 8107466:	687b      	ldr	r3, [r7, #4]
 8107468:	681b      	ldr	r3, [r3, #0]
 810746a:	f022 0201 	bic.w	r2, r2, #1
 810746e:	601a      	str	r2, [r3, #0]
 8107470:	e007      	b.n	8107482 <HAL_DMA_IRQHandler+0x8da>
 8107472:	687b      	ldr	r3, [r7, #4]
 8107474:	681b      	ldr	r3, [r3, #0]
 8107476:	681a      	ldr	r2, [r3, #0]
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	681b      	ldr	r3, [r3, #0]
 810747c:	f022 0201 	bic.w	r2, r2, #1
 8107480:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8107482:	68fb      	ldr	r3, [r7, #12]
 8107484:	3301      	adds	r3, #1
 8107486:	60fb      	str	r3, [r7, #12]
 8107488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810748a:	429a      	cmp	r2, r3
 810748c:	d307      	bcc.n	810749e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810748e:	687b      	ldr	r3, [r7, #4]
 8107490:	681b      	ldr	r3, [r3, #0]
 8107492:	681b      	ldr	r3, [r3, #0]
 8107494:	f003 0301 	and.w	r3, r3, #1
 8107498:	2b00      	cmp	r3, #0
 810749a:	d1f2      	bne.n	8107482 <HAL_DMA_IRQHandler+0x8da>
 810749c:	e000      	b.n	81074a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 810749e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	2200      	movs	r2, #0
 81074a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	681b      	ldr	r3, [r3, #0]
 81074ac:	681b      	ldr	r3, [r3, #0]
 81074ae:	f003 0301 	and.w	r3, r3, #1
 81074b2:	2b00      	cmp	r3, #0
 81074b4:	d004      	beq.n	81074c0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81074b6:	687b      	ldr	r3, [r7, #4]
 81074b8:	2203      	movs	r2, #3
 81074ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81074be:	e003      	b.n	81074c8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	2201      	movs	r2, #1
 81074c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81074cc:	2b00      	cmp	r3, #0
 81074ce:	f000 8272 	beq.w	81079b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81074d2:	687b      	ldr	r3, [r7, #4]
 81074d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81074d6:	6878      	ldr	r0, [r7, #4]
 81074d8:	4798      	blx	r3
 81074da:	e26c      	b.n	81079b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	4a43      	ldr	r2, [pc, #268]	; (81075f0 <HAL_DMA_IRQHandler+0xa48>)
 81074e2:	4293      	cmp	r3, r2
 81074e4:	d022      	beq.n	810752c <HAL_DMA_IRQHandler+0x984>
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	681b      	ldr	r3, [r3, #0]
 81074ea:	4a42      	ldr	r2, [pc, #264]	; (81075f4 <HAL_DMA_IRQHandler+0xa4c>)
 81074ec:	4293      	cmp	r3, r2
 81074ee:	d01d      	beq.n	810752c <HAL_DMA_IRQHandler+0x984>
 81074f0:	687b      	ldr	r3, [r7, #4]
 81074f2:	681b      	ldr	r3, [r3, #0]
 81074f4:	4a40      	ldr	r2, [pc, #256]	; (81075f8 <HAL_DMA_IRQHandler+0xa50>)
 81074f6:	4293      	cmp	r3, r2
 81074f8:	d018      	beq.n	810752c <HAL_DMA_IRQHandler+0x984>
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	681b      	ldr	r3, [r3, #0]
 81074fe:	4a3f      	ldr	r2, [pc, #252]	; (81075fc <HAL_DMA_IRQHandler+0xa54>)
 8107500:	4293      	cmp	r3, r2
 8107502:	d013      	beq.n	810752c <HAL_DMA_IRQHandler+0x984>
 8107504:	687b      	ldr	r3, [r7, #4]
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	4a3d      	ldr	r2, [pc, #244]	; (8107600 <HAL_DMA_IRQHandler+0xa58>)
 810750a:	4293      	cmp	r3, r2
 810750c:	d00e      	beq.n	810752c <HAL_DMA_IRQHandler+0x984>
 810750e:	687b      	ldr	r3, [r7, #4]
 8107510:	681b      	ldr	r3, [r3, #0]
 8107512:	4a3c      	ldr	r2, [pc, #240]	; (8107604 <HAL_DMA_IRQHandler+0xa5c>)
 8107514:	4293      	cmp	r3, r2
 8107516:	d009      	beq.n	810752c <HAL_DMA_IRQHandler+0x984>
 8107518:	687b      	ldr	r3, [r7, #4]
 810751a:	681b      	ldr	r3, [r3, #0]
 810751c:	4a3a      	ldr	r2, [pc, #232]	; (8107608 <HAL_DMA_IRQHandler+0xa60>)
 810751e:	4293      	cmp	r3, r2
 8107520:	d004      	beq.n	810752c <HAL_DMA_IRQHandler+0x984>
 8107522:	687b      	ldr	r3, [r7, #4]
 8107524:	681b      	ldr	r3, [r3, #0]
 8107526:	4a39      	ldr	r2, [pc, #228]	; (810760c <HAL_DMA_IRQHandler+0xa64>)
 8107528:	4293      	cmp	r3, r2
 810752a:	d101      	bne.n	8107530 <HAL_DMA_IRQHandler+0x988>
 810752c:	2301      	movs	r3, #1
 810752e:	e000      	b.n	8107532 <HAL_DMA_IRQHandler+0x98a>
 8107530:	2300      	movs	r3, #0
 8107532:	2b00      	cmp	r3, #0
 8107534:	f000 823f 	beq.w	81079b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	681b      	ldr	r3, [r3, #0]
 810753c:	681b      	ldr	r3, [r3, #0]
 810753e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8107540:	687b      	ldr	r3, [r7, #4]
 8107542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107544:	f003 031f 	and.w	r3, r3, #31
 8107548:	2204      	movs	r2, #4
 810754a:	409a      	lsls	r2, r3
 810754c:	697b      	ldr	r3, [r7, #20]
 810754e:	4013      	ands	r3, r2
 8107550:	2b00      	cmp	r3, #0
 8107552:	f000 80cd 	beq.w	81076f0 <HAL_DMA_IRQHandler+0xb48>
 8107556:	693b      	ldr	r3, [r7, #16]
 8107558:	f003 0304 	and.w	r3, r3, #4
 810755c:	2b00      	cmp	r3, #0
 810755e:	f000 80c7 	beq.w	81076f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8107562:	687b      	ldr	r3, [r7, #4]
 8107564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107566:	f003 031f 	and.w	r3, r3, #31
 810756a:	2204      	movs	r2, #4
 810756c:	409a      	lsls	r2, r3
 810756e:	69fb      	ldr	r3, [r7, #28]
 8107570:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8107572:	693b      	ldr	r3, [r7, #16]
 8107574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8107578:	2b00      	cmp	r3, #0
 810757a:	d049      	beq.n	8107610 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810757c:	693b      	ldr	r3, [r7, #16]
 810757e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107582:	2b00      	cmp	r3, #0
 8107584:	d109      	bne.n	810759a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810758a:	2b00      	cmp	r3, #0
 810758c:	f000 8210 	beq.w	81079b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8107590:	687b      	ldr	r3, [r7, #4]
 8107592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107594:	6878      	ldr	r0, [r7, #4]
 8107596:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8107598:	e20a      	b.n	81079b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810759e:	2b00      	cmp	r3, #0
 81075a0:	f000 8206 	beq.w	81079b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81075a4:	687b      	ldr	r3, [r7, #4]
 81075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81075a8:	6878      	ldr	r0, [r7, #4]
 81075aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81075ac:	e200      	b.n	81079b0 <HAL_DMA_IRQHandler+0xe08>
 81075ae:	bf00      	nop
 81075b0:	40020010 	.word	0x40020010
 81075b4:	40020028 	.word	0x40020028
 81075b8:	40020040 	.word	0x40020040
 81075bc:	40020058 	.word	0x40020058
 81075c0:	40020070 	.word	0x40020070
 81075c4:	40020088 	.word	0x40020088
 81075c8:	400200a0 	.word	0x400200a0
 81075cc:	400200b8 	.word	0x400200b8
 81075d0:	40020410 	.word	0x40020410
 81075d4:	40020428 	.word	0x40020428
 81075d8:	40020440 	.word	0x40020440
 81075dc:	40020458 	.word	0x40020458
 81075e0:	40020470 	.word	0x40020470
 81075e4:	40020488 	.word	0x40020488
 81075e8:	400204a0 	.word	0x400204a0
 81075ec:	400204b8 	.word	0x400204b8
 81075f0:	58025408 	.word	0x58025408
 81075f4:	5802541c 	.word	0x5802541c
 81075f8:	58025430 	.word	0x58025430
 81075fc:	58025444 	.word	0x58025444
 8107600:	58025458 	.word	0x58025458
 8107604:	5802546c 	.word	0x5802546c
 8107608:	58025480 	.word	0x58025480
 810760c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8107610:	693b      	ldr	r3, [r7, #16]
 8107612:	f003 0320 	and.w	r3, r3, #32
 8107616:	2b00      	cmp	r3, #0
 8107618:	d160      	bne.n	81076dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810761a:	687b      	ldr	r3, [r7, #4]
 810761c:	681b      	ldr	r3, [r3, #0]
 810761e:	4a8c      	ldr	r2, [pc, #560]	; (8107850 <HAL_DMA_IRQHandler+0xca8>)
 8107620:	4293      	cmp	r3, r2
 8107622:	d04a      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	681b      	ldr	r3, [r3, #0]
 8107628:	4a8a      	ldr	r2, [pc, #552]	; (8107854 <HAL_DMA_IRQHandler+0xcac>)
 810762a:	4293      	cmp	r3, r2
 810762c:	d045      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	681b      	ldr	r3, [r3, #0]
 8107632:	4a89      	ldr	r2, [pc, #548]	; (8107858 <HAL_DMA_IRQHandler+0xcb0>)
 8107634:	4293      	cmp	r3, r2
 8107636:	d040      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 8107638:	687b      	ldr	r3, [r7, #4]
 810763a:	681b      	ldr	r3, [r3, #0]
 810763c:	4a87      	ldr	r2, [pc, #540]	; (810785c <HAL_DMA_IRQHandler+0xcb4>)
 810763e:	4293      	cmp	r3, r2
 8107640:	d03b      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 8107642:	687b      	ldr	r3, [r7, #4]
 8107644:	681b      	ldr	r3, [r3, #0]
 8107646:	4a86      	ldr	r2, [pc, #536]	; (8107860 <HAL_DMA_IRQHandler+0xcb8>)
 8107648:	4293      	cmp	r3, r2
 810764a:	d036      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 810764c:	687b      	ldr	r3, [r7, #4]
 810764e:	681b      	ldr	r3, [r3, #0]
 8107650:	4a84      	ldr	r2, [pc, #528]	; (8107864 <HAL_DMA_IRQHandler+0xcbc>)
 8107652:	4293      	cmp	r3, r2
 8107654:	d031      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 8107656:	687b      	ldr	r3, [r7, #4]
 8107658:	681b      	ldr	r3, [r3, #0]
 810765a:	4a83      	ldr	r2, [pc, #524]	; (8107868 <HAL_DMA_IRQHandler+0xcc0>)
 810765c:	4293      	cmp	r3, r2
 810765e:	d02c      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 8107660:	687b      	ldr	r3, [r7, #4]
 8107662:	681b      	ldr	r3, [r3, #0]
 8107664:	4a81      	ldr	r2, [pc, #516]	; (810786c <HAL_DMA_IRQHandler+0xcc4>)
 8107666:	4293      	cmp	r3, r2
 8107668:	d027      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 810766a:	687b      	ldr	r3, [r7, #4]
 810766c:	681b      	ldr	r3, [r3, #0]
 810766e:	4a80      	ldr	r2, [pc, #512]	; (8107870 <HAL_DMA_IRQHandler+0xcc8>)
 8107670:	4293      	cmp	r3, r2
 8107672:	d022      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 8107674:	687b      	ldr	r3, [r7, #4]
 8107676:	681b      	ldr	r3, [r3, #0]
 8107678:	4a7e      	ldr	r2, [pc, #504]	; (8107874 <HAL_DMA_IRQHandler+0xccc>)
 810767a:	4293      	cmp	r3, r2
 810767c:	d01d      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	681b      	ldr	r3, [r3, #0]
 8107682:	4a7d      	ldr	r2, [pc, #500]	; (8107878 <HAL_DMA_IRQHandler+0xcd0>)
 8107684:	4293      	cmp	r3, r2
 8107686:	d018      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	681b      	ldr	r3, [r3, #0]
 810768c:	4a7b      	ldr	r2, [pc, #492]	; (810787c <HAL_DMA_IRQHandler+0xcd4>)
 810768e:	4293      	cmp	r3, r2
 8107690:	d013      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 8107692:	687b      	ldr	r3, [r7, #4]
 8107694:	681b      	ldr	r3, [r3, #0]
 8107696:	4a7a      	ldr	r2, [pc, #488]	; (8107880 <HAL_DMA_IRQHandler+0xcd8>)
 8107698:	4293      	cmp	r3, r2
 810769a:	d00e      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	681b      	ldr	r3, [r3, #0]
 81076a0:	4a78      	ldr	r2, [pc, #480]	; (8107884 <HAL_DMA_IRQHandler+0xcdc>)
 81076a2:	4293      	cmp	r3, r2
 81076a4:	d009      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	681b      	ldr	r3, [r3, #0]
 81076aa:	4a77      	ldr	r2, [pc, #476]	; (8107888 <HAL_DMA_IRQHandler+0xce0>)
 81076ac:	4293      	cmp	r3, r2
 81076ae:	d004      	beq.n	81076ba <HAL_DMA_IRQHandler+0xb12>
 81076b0:	687b      	ldr	r3, [r7, #4]
 81076b2:	681b      	ldr	r3, [r3, #0]
 81076b4:	4a75      	ldr	r2, [pc, #468]	; (810788c <HAL_DMA_IRQHandler+0xce4>)
 81076b6:	4293      	cmp	r3, r2
 81076b8:	d108      	bne.n	81076cc <HAL_DMA_IRQHandler+0xb24>
 81076ba:	687b      	ldr	r3, [r7, #4]
 81076bc:	681b      	ldr	r3, [r3, #0]
 81076be:	681a      	ldr	r2, [r3, #0]
 81076c0:	687b      	ldr	r3, [r7, #4]
 81076c2:	681b      	ldr	r3, [r3, #0]
 81076c4:	f022 0208 	bic.w	r2, r2, #8
 81076c8:	601a      	str	r2, [r3, #0]
 81076ca:	e007      	b.n	81076dc <HAL_DMA_IRQHandler+0xb34>
 81076cc:	687b      	ldr	r3, [r7, #4]
 81076ce:	681b      	ldr	r3, [r3, #0]
 81076d0:	681a      	ldr	r2, [r3, #0]
 81076d2:	687b      	ldr	r3, [r7, #4]
 81076d4:	681b      	ldr	r3, [r3, #0]
 81076d6:	f022 0204 	bic.w	r2, r2, #4
 81076da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 81076dc:	687b      	ldr	r3, [r7, #4]
 81076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81076e0:	2b00      	cmp	r3, #0
 81076e2:	f000 8165 	beq.w	81079b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81076e6:	687b      	ldr	r3, [r7, #4]
 81076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81076ea:	6878      	ldr	r0, [r7, #4]
 81076ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81076ee:	e15f      	b.n	81079b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81076f0:	687b      	ldr	r3, [r7, #4]
 81076f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81076f4:	f003 031f 	and.w	r3, r3, #31
 81076f8:	2202      	movs	r2, #2
 81076fa:	409a      	lsls	r2, r3
 81076fc:	697b      	ldr	r3, [r7, #20]
 81076fe:	4013      	ands	r3, r2
 8107700:	2b00      	cmp	r3, #0
 8107702:	f000 80c5 	beq.w	8107890 <HAL_DMA_IRQHandler+0xce8>
 8107706:	693b      	ldr	r3, [r7, #16]
 8107708:	f003 0302 	and.w	r3, r3, #2
 810770c:	2b00      	cmp	r3, #0
 810770e:	f000 80bf 	beq.w	8107890 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8107712:	687b      	ldr	r3, [r7, #4]
 8107714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107716:	f003 031f 	and.w	r3, r3, #31
 810771a:	2202      	movs	r2, #2
 810771c:	409a      	lsls	r2, r3
 810771e:	69fb      	ldr	r3, [r7, #28]
 8107720:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8107722:	693b      	ldr	r3, [r7, #16]
 8107724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8107728:	2b00      	cmp	r3, #0
 810772a:	d018      	beq.n	810775e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810772c:	693b      	ldr	r3, [r7, #16]
 810772e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107732:	2b00      	cmp	r3, #0
 8107734:	d109      	bne.n	810774a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8107736:	687b      	ldr	r3, [r7, #4]
 8107738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810773a:	2b00      	cmp	r3, #0
 810773c:	f000 813a 	beq.w	81079b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8107740:	687b      	ldr	r3, [r7, #4]
 8107742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107744:	6878      	ldr	r0, [r7, #4]
 8107746:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8107748:	e134      	b.n	81079b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810774a:	687b      	ldr	r3, [r7, #4]
 810774c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810774e:	2b00      	cmp	r3, #0
 8107750:	f000 8130 	beq.w	81079b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8107754:	687b      	ldr	r3, [r7, #4]
 8107756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107758:	6878      	ldr	r0, [r7, #4]
 810775a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810775c:	e12a      	b.n	81079b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810775e:	693b      	ldr	r3, [r7, #16]
 8107760:	f003 0320 	and.w	r3, r3, #32
 8107764:	2b00      	cmp	r3, #0
 8107766:	d168      	bne.n	810783a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8107768:	687b      	ldr	r3, [r7, #4]
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	4a38      	ldr	r2, [pc, #224]	; (8107850 <HAL_DMA_IRQHandler+0xca8>)
 810776e:	4293      	cmp	r3, r2
 8107770:	d04a      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 8107772:	687b      	ldr	r3, [r7, #4]
 8107774:	681b      	ldr	r3, [r3, #0]
 8107776:	4a37      	ldr	r2, [pc, #220]	; (8107854 <HAL_DMA_IRQHandler+0xcac>)
 8107778:	4293      	cmp	r3, r2
 810777a:	d045      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 810777c:	687b      	ldr	r3, [r7, #4]
 810777e:	681b      	ldr	r3, [r3, #0]
 8107780:	4a35      	ldr	r2, [pc, #212]	; (8107858 <HAL_DMA_IRQHandler+0xcb0>)
 8107782:	4293      	cmp	r3, r2
 8107784:	d040      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 8107786:	687b      	ldr	r3, [r7, #4]
 8107788:	681b      	ldr	r3, [r3, #0]
 810778a:	4a34      	ldr	r2, [pc, #208]	; (810785c <HAL_DMA_IRQHandler+0xcb4>)
 810778c:	4293      	cmp	r3, r2
 810778e:	d03b      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 8107790:	687b      	ldr	r3, [r7, #4]
 8107792:	681b      	ldr	r3, [r3, #0]
 8107794:	4a32      	ldr	r2, [pc, #200]	; (8107860 <HAL_DMA_IRQHandler+0xcb8>)
 8107796:	4293      	cmp	r3, r2
 8107798:	d036      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	681b      	ldr	r3, [r3, #0]
 810779e:	4a31      	ldr	r2, [pc, #196]	; (8107864 <HAL_DMA_IRQHandler+0xcbc>)
 81077a0:	4293      	cmp	r3, r2
 81077a2:	d031      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077a4:	687b      	ldr	r3, [r7, #4]
 81077a6:	681b      	ldr	r3, [r3, #0]
 81077a8:	4a2f      	ldr	r2, [pc, #188]	; (8107868 <HAL_DMA_IRQHandler+0xcc0>)
 81077aa:	4293      	cmp	r3, r2
 81077ac:	d02c      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077ae:	687b      	ldr	r3, [r7, #4]
 81077b0:	681b      	ldr	r3, [r3, #0]
 81077b2:	4a2e      	ldr	r2, [pc, #184]	; (810786c <HAL_DMA_IRQHandler+0xcc4>)
 81077b4:	4293      	cmp	r3, r2
 81077b6:	d027      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077b8:	687b      	ldr	r3, [r7, #4]
 81077ba:	681b      	ldr	r3, [r3, #0]
 81077bc:	4a2c      	ldr	r2, [pc, #176]	; (8107870 <HAL_DMA_IRQHandler+0xcc8>)
 81077be:	4293      	cmp	r3, r2
 81077c0:	d022      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	681b      	ldr	r3, [r3, #0]
 81077c6:	4a2b      	ldr	r2, [pc, #172]	; (8107874 <HAL_DMA_IRQHandler+0xccc>)
 81077c8:	4293      	cmp	r3, r2
 81077ca:	d01d      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077cc:	687b      	ldr	r3, [r7, #4]
 81077ce:	681b      	ldr	r3, [r3, #0]
 81077d0:	4a29      	ldr	r2, [pc, #164]	; (8107878 <HAL_DMA_IRQHandler+0xcd0>)
 81077d2:	4293      	cmp	r3, r2
 81077d4:	d018      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077d6:	687b      	ldr	r3, [r7, #4]
 81077d8:	681b      	ldr	r3, [r3, #0]
 81077da:	4a28      	ldr	r2, [pc, #160]	; (810787c <HAL_DMA_IRQHandler+0xcd4>)
 81077dc:	4293      	cmp	r3, r2
 81077de:	d013      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	681b      	ldr	r3, [r3, #0]
 81077e4:	4a26      	ldr	r2, [pc, #152]	; (8107880 <HAL_DMA_IRQHandler+0xcd8>)
 81077e6:	4293      	cmp	r3, r2
 81077e8:	d00e      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	681b      	ldr	r3, [r3, #0]
 81077ee:	4a25      	ldr	r2, [pc, #148]	; (8107884 <HAL_DMA_IRQHandler+0xcdc>)
 81077f0:	4293      	cmp	r3, r2
 81077f2:	d009      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077f4:	687b      	ldr	r3, [r7, #4]
 81077f6:	681b      	ldr	r3, [r3, #0]
 81077f8:	4a23      	ldr	r2, [pc, #140]	; (8107888 <HAL_DMA_IRQHandler+0xce0>)
 81077fa:	4293      	cmp	r3, r2
 81077fc:	d004      	beq.n	8107808 <HAL_DMA_IRQHandler+0xc60>
 81077fe:	687b      	ldr	r3, [r7, #4]
 8107800:	681b      	ldr	r3, [r3, #0]
 8107802:	4a22      	ldr	r2, [pc, #136]	; (810788c <HAL_DMA_IRQHandler+0xce4>)
 8107804:	4293      	cmp	r3, r2
 8107806:	d108      	bne.n	810781a <HAL_DMA_IRQHandler+0xc72>
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	681b      	ldr	r3, [r3, #0]
 810780c:	681a      	ldr	r2, [r3, #0]
 810780e:	687b      	ldr	r3, [r7, #4]
 8107810:	681b      	ldr	r3, [r3, #0]
 8107812:	f022 0214 	bic.w	r2, r2, #20
 8107816:	601a      	str	r2, [r3, #0]
 8107818:	e007      	b.n	810782a <HAL_DMA_IRQHandler+0xc82>
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	681b      	ldr	r3, [r3, #0]
 810781e:	681a      	ldr	r2, [r3, #0]
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	681b      	ldr	r3, [r3, #0]
 8107824:	f022 020a 	bic.w	r2, r2, #10
 8107828:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810782a:	687b      	ldr	r3, [r7, #4]
 810782c:	2200      	movs	r2, #0
 810782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8107832:	687b      	ldr	r3, [r7, #4]
 8107834:	2201      	movs	r2, #1
 8107836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 810783a:	687b      	ldr	r3, [r7, #4]
 810783c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810783e:	2b00      	cmp	r3, #0
 8107840:	f000 80b8 	beq.w	81079b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107848:	6878      	ldr	r0, [r7, #4]
 810784a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810784c:	e0b2      	b.n	81079b4 <HAL_DMA_IRQHandler+0xe0c>
 810784e:	bf00      	nop
 8107850:	40020010 	.word	0x40020010
 8107854:	40020028 	.word	0x40020028
 8107858:	40020040 	.word	0x40020040
 810785c:	40020058 	.word	0x40020058
 8107860:	40020070 	.word	0x40020070
 8107864:	40020088 	.word	0x40020088
 8107868:	400200a0 	.word	0x400200a0
 810786c:	400200b8 	.word	0x400200b8
 8107870:	40020410 	.word	0x40020410
 8107874:	40020428 	.word	0x40020428
 8107878:	40020440 	.word	0x40020440
 810787c:	40020458 	.word	0x40020458
 8107880:	40020470 	.word	0x40020470
 8107884:	40020488 	.word	0x40020488
 8107888:	400204a0 	.word	0x400204a0
 810788c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8107890:	687b      	ldr	r3, [r7, #4]
 8107892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107894:	f003 031f 	and.w	r3, r3, #31
 8107898:	2208      	movs	r2, #8
 810789a:	409a      	lsls	r2, r3
 810789c:	697b      	ldr	r3, [r7, #20]
 810789e:	4013      	ands	r3, r2
 81078a0:	2b00      	cmp	r3, #0
 81078a2:	f000 8088 	beq.w	81079b6 <HAL_DMA_IRQHandler+0xe0e>
 81078a6:	693b      	ldr	r3, [r7, #16]
 81078a8:	f003 0308 	and.w	r3, r3, #8
 81078ac:	2b00      	cmp	r3, #0
 81078ae:	f000 8082 	beq.w	81079b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	681b      	ldr	r3, [r3, #0]
 81078b6:	4a41      	ldr	r2, [pc, #260]	; (81079bc <HAL_DMA_IRQHandler+0xe14>)
 81078b8:	4293      	cmp	r3, r2
 81078ba:	d04a      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	681b      	ldr	r3, [r3, #0]
 81078c0:	4a3f      	ldr	r2, [pc, #252]	; (81079c0 <HAL_DMA_IRQHandler+0xe18>)
 81078c2:	4293      	cmp	r3, r2
 81078c4:	d045      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 81078c6:	687b      	ldr	r3, [r7, #4]
 81078c8:	681b      	ldr	r3, [r3, #0]
 81078ca:	4a3e      	ldr	r2, [pc, #248]	; (81079c4 <HAL_DMA_IRQHandler+0xe1c>)
 81078cc:	4293      	cmp	r3, r2
 81078ce:	d040      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 81078d0:	687b      	ldr	r3, [r7, #4]
 81078d2:	681b      	ldr	r3, [r3, #0]
 81078d4:	4a3c      	ldr	r2, [pc, #240]	; (81079c8 <HAL_DMA_IRQHandler+0xe20>)
 81078d6:	4293      	cmp	r3, r2
 81078d8:	d03b      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	681b      	ldr	r3, [r3, #0]
 81078de:	4a3b      	ldr	r2, [pc, #236]	; (81079cc <HAL_DMA_IRQHandler+0xe24>)
 81078e0:	4293      	cmp	r3, r2
 81078e2:	d036      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 81078e4:	687b      	ldr	r3, [r7, #4]
 81078e6:	681b      	ldr	r3, [r3, #0]
 81078e8:	4a39      	ldr	r2, [pc, #228]	; (81079d0 <HAL_DMA_IRQHandler+0xe28>)
 81078ea:	4293      	cmp	r3, r2
 81078ec:	d031      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 81078ee:	687b      	ldr	r3, [r7, #4]
 81078f0:	681b      	ldr	r3, [r3, #0]
 81078f2:	4a38      	ldr	r2, [pc, #224]	; (81079d4 <HAL_DMA_IRQHandler+0xe2c>)
 81078f4:	4293      	cmp	r3, r2
 81078f6:	d02c      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 81078f8:	687b      	ldr	r3, [r7, #4]
 81078fa:	681b      	ldr	r3, [r3, #0]
 81078fc:	4a36      	ldr	r2, [pc, #216]	; (81079d8 <HAL_DMA_IRQHandler+0xe30>)
 81078fe:	4293      	cmp	r3, r2
 8107900:	d027      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	681b      	ldr	r3, [r3, #0]
 8107906:	4a35      	ldr	r2, [pc, #212]	; (81079dc <HAL_DMA_IRQHandler+0xe34>)
 8107908:	4293      	cmp	r3, r2
 810790a:	d022      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 810790c:	687b      	ldr	r3, [r7, #4]
 810790e:	681b      	ldr	r3, [r3, #0]
 8107910:	4a33      	ldr	r2, [pc, #204]	; (81079e0 <HAL_DMA_IRQHandler+0xe38>)
 8107912:	4293      	cmp	r3, r2
 8107914:	d01d      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 8107916:	687b      	ldr	r3, [r7, #4]
 8107918:	681b      	ldr	r3, [r3, #0]
 810791a:	4a32      	ldr	r2, [pc, #200]	; (81079e4 <HAL_DMA_IRQHandler+0xe3c>)
 810791c:	4293      	cmp	r3, r2
 810791e:	d018      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	681b      	ldr	r3, [r3, #0]
 8107924:	4a30      	ldr	r2, [pc, #192]	; (81079e8 <HAL_DMA_IRQHandler+0xe40>)
 8107926:	4293      	cmp	r3, r2
 8107928:	d013      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	681b      	ldr	r3, [r3, #0]
 810792e:	4a2f      	ldr	r2, [pc, #188]	; (81079ec <HAL_DMA_IRQHandler+0xe44>)
 8107930:	4293      	cmp	r3, r2
 8107932:	d00e      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 8107934:	687b      	ldr	r3, [r7, #4]
 8107936:	681b      	ldr	r3, [r3, #0]
 8107938:	4a2d      	ldr	r2, [pc, #180]	; (81079f0 <HAL_DMA_IRQHandler+0xe48>)
 810793a:	4293      	cmp	r3, r2
 810793c:	d009      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 810793e:	687b      	ldr	r3, [r7, #4]
 8107940:	681b      	ldr	r3, [r3, #0]
 8107942:	4a2c      	ldr	r2, [pc, #176]	; (81079f4 <HAL_DMA_IRQHandler+0xe4c>)
 8107944:	4293      	cmp	r3, r2
 8107946:	d004      	beq.n	8107952 <HAL_DMA_IRQHandler+0xdaa>
 8107948:	687b      	ldr	r3, [r7, #4]
 810794a:	681b      	ldr	r3, [r3, #0]
 810794c:	4a2a      	ldr	r2, [pc, #168]	; (81079f8 <HAL_DMA_IRQHandler+0xe50>)
 810794e:	4293      	cmp	r3, r2
 8107950:	d108      	bne.n	8107964 <HAL_DMA_IRQHandler+0xdbc>
 8107952:	687b      	ldr	r3, [r7, #4]
 8107954:	681b      	ldr	r3, [r3, #0]
 8107956:	681a      	ldr	r2, [r3, #0]
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	681b      	ldr	r3, [r3, #0]
 810795c:	f022 021c 	bic.w	r2, r2, #28
 8107960:	601a      	str	r2, [r3, #0]
 8107962:	e007      	b.n	8107974 <HAL_DMA_IRQHandler+0xdcc>
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	681b      	ldr	r3, [r3, #0]
 8107968:	681a      	ldr	r2, [r3, #0]
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	681b      	ldr	r3, [r3, #0]
 810796e:	f022 020e 	bic.w	r2, r2, #14
 8107972:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8107974:	687b      	ldr	r3, [r7, #4]
 8107976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107978:	f003 031f 	and.w	r3, r3, #31
 810797c:	2201      	movs	r2, #1
 810797e:	409a      	lsls	r2, r3
 8107980:	69fb      	ldr	r3, [r7, #28]
 8107982:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8107984:	687b      	ldr	r3, [r7, #4]
 8107986:	2201      	movs	r2, #1
 8107988:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810798a:	687b      	ldr	r3, [r7, #4]
 810798c:	2200      	movs	r2, #0
 810798e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	2201      	movs	r2, #1
 8107996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 810799a:	687b      	ldr	r3, [r7, #4]
 810799c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810799e:	2b00      	cmp	r3, #0
 81079a0:	d009      	beq.n	81079b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81079a6:	6878      	ldr	r0, [r7, #4]
 81079a8:	4798      	blx	r3
 81079aa:	e004      	b.n	81079b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 81079ac:	bf00      	nop
 81079ae:	e002      	b.n	81079b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81079b0:	bf00      	nop
 81079b2:	e000      	b.n	81079b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81079b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81079b6:	3728      	adds	r7, #40	; 0x28
 81079b8:	46bd      	mov	sp, r7
 81079ba:	bd80      	pop	{r7, pc}
 81079bc:	40020010 	.word	0x40020010
 81079c0:	40020028 	.word	0x40020028
 81079c4:	40020040 	.word	0x40020040
 81079c8:	40020058 	.word	0x40020058
 81079cc:	40020070 	.word	0x40020070
 81079d0:	40020088 	.word	0x40020088
 81079d4:	400200a0 	.word	0x400200a0
 81079d8:	400200b8 	.word	0x400200b8
 81079dc:	40020410 	.word	0x40020410
 81079e0:	40020428 	.word	0x40020428
 81079e4:	40020440 	.word	0x40020440
 81079e8:	40020458 	.word	0x40020458
 81079ec:	40020470 	.word	0x40020470
 81079f0:	40020488 	.word	0x40020488
 81079f4:	400204a0 	.word	0x400204a0
 81079f8:	400204b8 	.word	0x400204b8

081079fc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 81079fc:	b480      	push	{r7}
 81079fe:	b083      	sub	sp, #12
 8107a00:	af00      	add	r7, sp, #0
 8107a02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8107a04:	687b      	ldr	r3, [r7, #4]
 8107a06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8107a0a:	b2db      	uxtb	r3, r3
}
 8107a0c:	4618      	mov	r0, r3
 8107a0e:	370c      	adds	r7, #12
 8107a10:	46bd      	mov	sp, r7
 8107a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a16:	4770      	bx	lr

08107a18 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8107a18:	b480      	push	{r7}
 8107a1a:	b083      	sub	sp, #12
 8107a1c:	af00      	add	r7, sp, #0
 8107a1e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8107a24:	4618      	mov	r0, r3
 8107a26:	370c      	adds	r7, #12
 8107a28:	46bd      	mov	sp, r7
 8107a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a2e:	4770      	bx	lr

08107a30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8107a30:	b480      	push	{r7}
 8107a32:	b087      	sub	sp, #28
 8107a34:	af00      	add	r7, sp, #0
 8107a36:	60f8      	str	r0, [r7, #12]
 8107a38:	60b9      	str	r1, [r7, #8]
 8107a3a:	607a      	str	r2, [r7, #4]
 8107a3c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8107a3e:	68fb      	ldr	r3, [r7, #12]
 8107a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107a42:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8107a44:	68fb      	ldr	r3, [r7, #12]
 8107a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107a48:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8107a4a:	68fb      	ldr	r3, [r7, #12]
 8107a4c:	681b      	ldr	r3, [r3, #0]
 8107a4e:	4a84      	ldr	r2, [pc, #528]	; (8107c60 <DMA_SetConfig+0x230>)
 8107a50:	4293      	cmp	r3, r2
 8107a52:	d072      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107a54:	68fb      	ldr	r3, [r7, #12]
 8107a56:	681b      	ldr	r3, [r3, #0]
 8107a58:	4a82      	ldr	r2, [pc, #520]	; (8107c64 <DMA_SetConfig+0x234>)
 8107a5a:	4293      	cmp	r3, r2
 8107a5c:	d06d      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107a5e:	68fb      	ldr	r3, [r7, #12]
 8107a60:	681b      	ldr	r3, [r3, #0]
 8107a62:	4a81      	ldr	r2, [pc, #516]	; (8107c68 <DMA_SetConfig+0x238>)
 8107a64:	4293      	cmp	r3, r2
 8107a66:	d068      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107a68:	68fb      	ldr	r3, [r7, #12]
 8107a6a:	681b      	ldr	r3, [r3, #0]
 8107a6c:	4a7f      	ldr	r2, [pc, #508]	; (8107c6c <DMA_SetConfig+0x23c>)
 8107a6e:	4293      	cmp	r3, r2
 8107a70:	d063      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107a72:	68fb      	ldr	r3, [r7, #12]
 8107a74:	681b      	ldr	r3, [r3, #0]
 8107a76:	4a7e      	ldr	r2, [pc, #504]	; (8107c70 <DMA_SetConfig+0x240>)
 8107a78:	4293      	cmp	r3, r2
 8107a7a:	d05e      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107a7c:	68fb      	ldr	r3, [r7, #12]
 8107a7e:	681b      	ldr	r3, [r3, #0]
 8107a80:	4a7c      	ldr	r2, [pc, #496]	; (8107c74 <DMA_SetConfig+0x244>)
 8107a82:	4293      	cmp	r3, r2
 8107a84:	d059      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107a86:	68fb      	ldr	r3, [r7, #12]
 8107a88:	681b      	ldr	r3, [r3, #0]
 8107a8a:	4a7b      	ldr	r2, [pc, #492]	; (8107c78 <DMA_SetConfig+0x248>)
 8107a8c:	4293      	cmp	r3, r2
 8107a8e:	d054      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107a90:	68fb      	ldr	r3, [r7, #12]
 8107a92:	681b      	ldr	r3, [r3, #0]
 8107a94:	4a79      	ldr	r2, [pc, #484]	; (8107c7c <DMA_SetConfig+0x24c>)
 8107a96:	4293      	cmp	r3, r2
 8107a98:	d04f      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107a9a:	68fb      	ldr	r3, [r7, #12]
 8107a9c:	681b      	ldr	r3, [r3, #0]
 8107a9e:	4a78      	ldr	r2, [pc, #480]	; (8107c80 <DMA_SetConfig+0x250>)
 8107aa0:	4293      	cmp	r3, r2
 8107aa2:	d04a      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107aa4:	68fb      	ldr	r3, [r7, #12]
 8107aa6:	681b      	ldr	r3, [r3, #0]
 8107aa8:	4a76      	ldr	r2, [pc, #472]	; (8107c84 <DMA_SetConfig+0x254>)
 8107aaa:	4293      	cmp	r3, r2
 8107aac:	d045      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107aae:	68fb      	ldr	r3, [r7, #12]
 8107ab0:	681b      	ldr	r3, [r3, #0]
 8107ab2:	4a75      	ldr	r2, [pc, #468]	; (8107c88 <DMA_SetConfig+0x258>)
 8107ab4:	4293      	cmp	r3, r2
 8107ab6:	d040      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107ab8:	68fb      	ldr	r3, [r7, #12]
 8107aba:	681b      	ldr	r3, [r3, #0]
 8107abc:	4a73      	ldr	r2, [pc, #460]	; (8107c8c <DMA_SetConfig+0x25c>)
 8107abe:	4293      	cmp	r3, r2
 8107ac0:	d03b      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107ac2:	68fb      	ldr	r3, [r7, #12]
 8107ac4:	681b      	ldr	r3, [r3, #0]
 8107ac6:	4a72      	ldr	r2, [pc, #456]	; (8107c90 <DMA_SetConfig+0x260>)
 8107ac8:	4293      	cmp	r3, r2
 8107aca:	d036      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107acc:	68fb      	ldr	r3, [r7, #12]
 8107ace:	681b      	ldr	r3, [r3, #0]
 8107ad0:	4a70      	ldr	r2, [pc, #448]	; (8107c94 <DMA_SetConfig+0x264>)
 8107ad2:	4293      	cmp	r3, r2
 8107ad4:	d031      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107ad6:	68fb      	ldr	r3, [r7, #12]
 8107ad8:	681b      	ldr	r3, [r3, #0]
 8107ada:	4a6f      	ldr	r2, [pc, #444]	; (8107c98 <DMA_SetConfig+0x268>)
 8107adc:	4293      	cmp	r3, r2
 8107ade:	d02c      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107ae0:	68fb      	ldr	r3, [r7, #12]
 8107ae2:	681b      	ldr	r3, [r3, #0]
 8107ae4:	4a6d      	ldr	r2, [pc, #436]	; (8107c9c <DMA_SetConfig+0x26c>)
 8107ae6:	4293      	cmp	r3, r2
 8107ae8:	d027      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107aea:	68fb      	ldr	r3, [r7, #12]
 8107aec:	681b      	ldr	r3, [r3, #0]
 8107aee:	4a6c      	ldr	r2, [pc, #432]	; (8107ca0 <DMA_SetConfig+0x270>)
 8107af0:	4293      	cmp	r3, r2
 8107af2:	d022      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107af4:	68fb      	ldr	r3, [r7, #12]
 8107af6:	681b      	ldr	r3, [r3, #0]
 8107af8:	4a6a      	ldr	r2, [pc, #424]	; (8107ca4 <DMA_SetConfig+0x274>)
 8107afa:	4293      	cmp	r3, r2
 8107afc:	d01d      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107afe:	68fb      	ldr	r3, [r7, #12]
 8107b00:	681b      	ldr	r3, [r3, #0]
 8107b02:	4a69      	ldr	r2, [pc, #420]	; (8107ca8 <DMA_SetConfig+0x278>)
 8107b04:	4293      	cmp	r3, r2
 8107b06:	d018      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107b08:	68fb      	ldr	r3, [r7, #12]
 8107b0a:	681b      	ldr	r3, [r3, #0]
 8107b0c:	4a67      	ldr	r2, [pc, #412]	; (8107cac <DMA_SetConfig+0x27c>)
 8107b0e:	4293      	cmp	r3, r2
 8107b10:	d013      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107b12:	68fb      	ldr	r3, [r7, #12]
 8107b14:	681b      	ldr	r3, [r3, #0]
 8107b16:	4a66      	ldr	r2, [pc, #408]	; (8107cb0 <DMA_SetConfig+0x280>)
 8107b18:	4293      	cmp	r3, r2
 8107b1a:	d00e      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107b1c:	68fb      	ldr	r3, [r7, #12]
 8107b1e:	681b      	ldr	r3, [r3, #0]
 8107b20:	4a64      	ldr	r2, [pc, #400]	; (8107cb4 <DMA_SetConfig+0x284>)
 8107b22:	4293      	cmp	r3, r2
 8107b24:	d009      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107b26:	68fb      	ldr	r3, [r7, #12]
 8107b28:	681b      	ldr	r3, [r3, #0]
 8107b2a:	4a63      	ldr	r2, [pc, #396]	; (8107cb8 <DMA_SetConfig+0x288>)
 8107b2c:	4293      	cmp	r3, r2
 8107b2e:	d004      	beq.n	8107b3a <DMA_SetConfig+0x10a>
 8107b30:	68fb      	ldr	r3, [r7, #12]
 8107b32:	681b      	ldr	r3, [r3, #0]
 8107b34:	4a61      	ldr	r2, [pc, #388]	; (8107cbc <DMA_SetConfig+0x28c>)
 8107b36:	4293      	cmp	r3, r2
 8107b38:	d101      	bne.n	8107b3e <DMA_SetConfig+0x10e>
 8107b3a:	2301      	movs	r3, #1
 8107b3c:	e000      	b.n	8107b40 <DMA_SetConfig+0x110>
 8107b3e:	2300      	movs	r3, #0
 8107b40:	2b00      	cmp	r3, #0
 8107b42:	d00d      	beq.n	8107b60 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8107b44:	68fb      	ldr	r3, [r7, #12]
 8107b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107b48:	68fa      	ldr	r2, [r7, #12]
 8107b4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8107b4c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8107b4e:	68fb      	ldr	r3, [r7, #12]
 8107b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107b52:	2b00      	cmp	r3, #0
 8107b54:	d004      	beq.n	8107b60 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8107b56:	68fb      	ldr	r3, [r7, #12]
 8107b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107b5a:	68fa      	ldr	r2, [r7, #12]
 8107b5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8107b5e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8107b60:	68fb      	ldr	r3, [r7, #12]
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	4a3e      	ldr	r2, [pc, #248]	; (8107c60 <DMA_SetConfig+0x230>)
 8107b66:	4293      	cmp	r3, r2
 8107b68:	d04a      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107b6a:	68fb      	ldr	r3, [r7, #12]
 8107b6c:	681b      	ldr	r3, [r3, #0]
 8107b6e:	4a3d      	ldr	r2, [pc, #244]	; (8107c64 <DMA_SetConfig+0x234>)
 8107b70:	4293      	cmp	r3, r2
 8107b72:	d045      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107b74:	68fb      	ldr	r3, [r7, #12]
 8107b76:	681b      	ldr	r3, [r3, #0]
 8107b78:	4a3b      	ldr	r2, [pc, #236]	; (8107c68 <DMA_SetConfig+0x238>)
 8107b7a:	4293      	cmp	r3, r2
 8107b7c:	d040      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107b7e:	68fb      	ldr	r3, [r7, #12]
 8107b80:	681b      	ldr	r3, [r3, #0]
 8107b82:	4a3a      	ldr	r2, [pc, #232]	; (8107c6c <DMA_SetConfig+0x23c>)
 8107b84:	4293      	cmp	r3, r2
 8107b86:	d03b      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107b88:	68fb      	ldr	r3, [r7, #12]
 8107b8a:	681b      	ldr	r3, [r3, #0]
 8107b8c:	4a38      	ldr	r2, [pc, #224]	; (8107c70 <DMA_SetConfig+0x240>)
 8107b8e:	4293      	cmp	r3, r2
 8107b90:	d036      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107b92:	68fb      	ldr	r3, [r7, #12]
 8107b94:	681b      	ldr	r3, [r3, #0]
 8107b96:	4a37      	ldr	r2, [pc, #220]	; (8107c74 <DMA_SetConfig+0x244>)
 8107b98:	4293      	cmp	r3, r2
 8107b9a:	d031      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107b9c:	68fb      	ldr	r3, [r7, #12]
 8107b9e:	681b      	ldr	r3, [r3, #0]
 8107ba0:	4a35      	ldr	r2, [pc, #212]	; (8107c78 <DMA_SetConfig+0x248>)
 8107ba2:	4293      	cmp	r3, r2
 8107ba4:	d02c      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107ba6:	68fb      	ldr	r3, [r7, #12]
 8107ba8:	681b      	ldr	r3, [r3, #0]
 8107baa:	4a34      	ldr	r2, [pc, #208]	; (8107c7c <DMA_SetConfig+0x24c>)
 8107bac:	4293      	cmp	r3, r2
 8107bae:	d027      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107bb0:	68fb      	ldr	r3, [r7, #12]
 8107bb2:	681b      	ldr	r3, [r3, #0]
 8107bb4:	4a32      	ldr	r2, [pc, #200]	; (8107c80 <DMA_SetConfig+0x250>)
 8107bb6:	4293      	cmp	r3, r2
 8107bb8:	d022      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107bba:	68fb      	ldr	r3, [r7, #12]
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	4a31      	ldr	r2, [pc, #196]	; (8107c84 <DMA_SetConfig+0x254>)
 8107bc0:	4293      	cmp	r3, r2
 8107bc2:	d01d      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107bc4:	68fb      	ldr	r3, [r7, #12]
 8107bc6:	681b      	ldr	r3, [r3, #0]
 8107bc8:	4a2f      	ldr	r2, [pc, #188]	; (8107c88 <DMA_SetConfig+0x258>)
 8107bca:	4293      	cmp	r3, r2
 8107bcc:	d018      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107bce:	68fb      	ldr	r3, [r7, #12]
 8107bd0:	681b      	ldr	r3, [r3, #0]
 8107bd2:	4a2e      	ldr	r2, [pc, #184]	; (8107c8c <DMA_SetConfig+0x25c>)
 8107bd4:	4293      	cmp	r3, r2
 8107bd6:	d013      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107bd8:	68fb      	ldr	r3, [r7, #12]
 8107bda:	681b      	ldr	r3, [r3, #0]
 8107bdc:	4a2c      	ldr	r2, [pc, #176]	; (8107c90 <DMA_SetConfig+0x260>)
 8107bde:	4293      	cmp	r3, r2
 8107be0:	d00e      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107be2:	68fb      	ldr	r3, [r7, #12]
 8107be4:	681b      	ldr	r3, [r3, #0]
 8107be6:	4a2b      	ldr	r2, [pc, #172]	; (8107c94 <DMA_SetConfig+0x264>)
 8107be8:	4293      	cmp	r3, r2
 8107bea:	d009      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107bec:	68fb      	ldr	r3, [r7, #12]
 8107bee:	681b      	ldr	r3, [r3, #0]
 8107bf0:	4a29      	ldr	r2, [pc, #164]	; (8107c98 <DMA_SetConfig+0x268>)
 8107bf2:	4293      	cmp	r3, r2
 8107bf4:	d004      	beq.n	8107c00 <DMA_SetConfig+0x1d0>
 8107bf6:	68fb      	ldr	r3, [r7, #12]
 8107bf8:	681b      	ldr	r3, [r3, #0]
 8107bfa:	4a28      	ldr	r2, [pc, #160]	; (8107c9c <DMA_SetConfig+0x26c>)
 8107bfc:	4293      	cmp	r3, r2
 8107bfe:	d101      	bne.n	8107c04 <DMA_SetConfig+0x1d4>
 8107c00:	2301      	movs	r3, #1
 8107c02:	e000      	b.n	8107c06 <DMA_SetConfig+0x1d6>
 8107c04:	2300      	movs	r3, #0
 8107c06:	2b00      	cmp	r3, #0
 8107c08:	d05a      	beq.n	8107cc0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8107c0a:	68fb      	ldr	r3, [r7, #12]
 8107c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107c0e:	f003 031f 	and.w	r3, r3, #31
 8107c12:	223f      	movs	r2, #63	; 0x3f
 8107c14:	409a      	lsls	r2, r3
 8107c16:	697b      	ldr	r3, [r7, #20]
 8107c18:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8107c1a:	68fb      	ldr	r3, [r7, #12]
 8107c1c:	681b      	ldr	r3, [r3, #0]
 8107c1e:	681a      	ldr	r2, [r3, #0]
 8107c20:	68fb      	ldr	r3, [r7, #12]
 8107c22:	681b      	ldr	r3, [r3, #0]
 8107c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8107c28:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8107c2a:	68fb      	ldr	r3, [r7, #12]
 8107c2c:	681b      	ldr	r3, [r3, #0]
 8107c2e:	683a      	ldr	r2, [r7, #0]
 8107c30:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8107c32:	68fb      	ldr	r3, [r7, #12]
 8107c34:	689b      	ldr	r3, [r3, #8]
 8107c36:	2b40      	cmp	r3, #64	; 0x40
 8107c38:	d108      	bne.n	8107c4c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8107c3a:	68fb      	ldr	r3, [r7, #12]
 8107c3c:	681b      	ldr	r3, [r3, #0]
 8107c3e:	687a      	ldr	r2, [r7, #4]
 8107c40:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8107c42:	68fb      	ldr	r3, [r7, #12]
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	68ba      	ldr	r2, [r7, #8]
 8107c48:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8107c4a:	e087      	b.n	8107d5c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8107c4c:	68fb      	ldr	r3, [r7, #12]
 8107c4e:	681b      	ldr	r3, [r3, #0]
 8107c50:	68ba      	ldr	r2, [r7, #8]
 8107c52:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8107c54:	68fb      	ldr	r3, [r7, #12]
 8107c56:	681b      	ldr	r3, [r3, #0]
 8107c58:	687a      	ldr	r2, [r7, #4]
 8107c5a:	60da      	str	r2, [r3, #12]
}
 8107c5c:	e07e      	b.n	8107d5c <DMA_SetConfig+0x32c>
 8107c5e:	bf00      	nop
 8107c60:	40020010 	.word	0x40020010
 8107c64:	40020028 	.word	0x40020028
 8107c68:	40020040 	.word	0x40020040
 8107c6c:	40020058 	.word	0x40020058
 8107c70:	40020070 	.word	0x40020070
 8107c74:	40020088 	.word	0x40020088
 8107c78:	400200a0 	.word	0x400200a0
 8107c7c:	400200b8 	.word	0x400200b8
 8107c80:	40020410 	.word	0x40020410
 8107c84:	40020428 	.word	0x40020428
 8107c88:	40020440 	.word	0x40020440
 8107c8c:	40020458 	.word	0x40020458
 8107c90:	40020470 	.word	0x40020470
 8107c94:	40020488 	.word	0x40020488
 8107c98:	400204a0 	.word	0x400204a0
 8107c9c:	400204b8 	.word	0x400204b8
 8107ca0:	58025408 	.word	0x58025408
 8107ca4:	5802541c 	.word	0x5802541c
 8107ca8:	58025430 	.word	0x58025430
 8107cac:	58025444 	.word	0x58025444
 8107cb0:	58025458 	.word	0x58025458
 8107cb4:	5802546c 	.word	0x5802546c
 8107cb8:	58025480 	.word	0x58025480
 8107cbc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8107cc0:	68fb      	ldr	r3, [r7, #12]
 8107cc2:	681b      	ldr	r3, [r3, #0]
 8107cc4:	4a28      	ldr	r2, [pc, #160]	; (8107d68 <DMA_SetConfig+0x338>)
 8107cc6:	4293      	cmp	r3, r2
 8107cc8:	d022      	beq.n	8107d10 <DMA_SetConfig+0x2e0>
 8107cca:	68fb      	ldr	r3, [r7, #12]
 8107ccc:	681b      	ldr	r3, [r3, #0]
 8107cce:	4a27      	ldr	r2, [pc, #156]	; (8107d6c <DMA_SetConfig+0x33c>)
 8107cd0:	4293      	cmp	r3, r2
 8107cd2:	d01d      	beq.n	8107d10 <DMA_SetConfig+0x2e0>
 8107cd4:	68fb      	ldr	r3, [r7, #12]
 8107cd6:	681b      	ldr	r3, [r3, #0]
 8107cd8:	4a25      	ldr	r2, [pc, #148]	; (8107d70 <DMA_SetConfig+0x340>)
 8107cda:	4293      	cmp	r3, r2
 8107cdc:	d018      	beq.n	8107d10 <DMA_SetConfig+0x2e0>
 8107cde:	68fb      	ldr	r3, [r7, #12]
 8107ce0:	681b      	ldr	r3, [r3, #0]
 8107ce2:	4a24      	ldr	r2, [pc, #144]	; (8107d74 <DMA_SetConfig+0x344>)
 8107ce4:	4293      	cmp	r3, r2
 8107ce6:	d013      	beq.n	8107d10 <DMA_SetConfig+0x2e0>
 8107ce8:	68fb      	ldr	r3, [r7, #12]
 8107cea:	681b      	ldr	r3, [r3, #0]
 8107cec:	4a22      	ldr	r2, [pc, #136]	; (8107d78 <DMA_SetConfig+0x348>)
 8107cee:	4293      	cmp	r3, r2
 8107cf0:	d00e      	beq.n	8107d10 <DMA_SetConfig+0x2e0>
 8107cf2:	68fb      	ldr	r3, [r7, #12]
 8107cf4:	681b      	ldr	r3, [r3, #0]
 8107cf6:	4a21      	ldr	r2, [pc, #132]	; (8107d7c <DMA_SetConfig+0x34c>)
 8107cf8:	4293      	cmp	r3, r2
 8107cfa:	d009      	beq.n	8107d10 <DMA_SetConfig+0x2e0>
 8107cfc:	68fb      	ldr	r3, [r7, #12]
 8107cfe:	681b      	ldr	r3, [r3, #0]
 8107d00:	4a1f      	ldr	r2, [pc, #124]	; (8107d80 <DMA_SetConfig+0x350>)
 8107d02:	4293      	cmp	r3, r2
 8107d04:	d004      	beq.n	8107d10 <DMA_SetConfig+0x2e0>
 8107d06:	68fb      	ldr	r3, [r7, #12]
 8107d08:	681b      	ldr	r3, [r3, #0]
 8107d0a:	4a1e      	ldr	r2, [pc, #120]	; (8107d84 <DMA_SetConfig+0x354>)
 8107d0c:	4293      	cmp	r3, r2
 8107d0e:	d101      	bne.n	8107d14 <DMA_SetConfig+0x2e4>
 8107d10:	2301      	movs	r3, #1
 8107d12:	e000      	b.n	8107d16 <DMA_SetConfig+0x2e6>
 8107d14:	2300      	movs	r3, #0
 8107d16:	2b00      	cmp	r3, #0
 8107d18:	d020      	beq.n	8107d5c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8107d1a:	68fb      	ldr	r3, [r7, #12]
 8107d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107d1e:	f003 031f 	and.w	r3, r3, #31
 8107d22:	2201      	movs	r2, #1
 8107d24:	409a      	lsls	r2, r3
 8107d26:	693b      	ldr	r3, [r7, #16]
 8107d28:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8107d2a:	68fb      	ldr	r3, [r7, #12]
 8107d2c:	681b      	ldr	r3, [r3, #0]
 8107d2e:	683a      	ldr	r2, [r7, #0]
 8107d30:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8107d32:	68fb      	ldr	r3, [r7, #12]
 8107d34:	689b      	ldr	r3, [r3, #8]
 8107d36:	2b40      	cmp	r3, #64	; 0x40
 8107d38:	d108      	bne.n	8107d4c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8107d3a:	68fb      	ldr	r3, [r7, #12]
 8107d3c:	681b      	ldr	r3, [r3, #0]
 8107d3e:	687a      	ldr	r2, [r7, #4]
 8107d40:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8107d42:	68fb      	ldr	r3, [r7, #12]
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	68ba      	ldr	r2, [r7, #8]
 8107d48:	60da      	str	r2, [r3, #12]
}
 8107d4a:	e007      	b.n	8107d5c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8107d4c:	68fb      	ldr	r3, [r7, #12]
 8107d4e:	681b      	ldr	r3, [r3, #0]
 8107d50:	68ba      	ldr	r2, [r7, #8]
 8107d52:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8107d54:	68fb      	ldr	r3, [r7, #12]
 8107d56:	681b      	ldr	r3, [r3, #0]
 8107d58:	687a      	ldr	r2, [r7, #4]
 8107d5a:	60da      	str	r2, [r3, #12]
}
 8107d5c:	bf00      	nop
 8107d5e:	371c      	adds	r7, #28
 8107d60:	46bd      	mov	sp, r7
 8107d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d66:	4770      	bx	lr
 8107d68:	58025408 	.word	0x58025408
 8107d6c:	5802541c 	.word	0x5802541c
 8107d70:	58025430 	.word	0x58025430
 8107d74:	58025444 	.word	0x58025444
 8107d78:	58025458 	.word	0x58025458
 8107d7c:	5802546c 	.word	0x5802546c
 8107d80:	58025480 	.word	0x58025480
 8107d84:	58025494 	.word	0x58025494

08107d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8107d88:	b480      	push	{r7}
 8107d8a:	b085      	sub	sp, #20
 8107d8c:	af00      	add	r7, sp, #0
 8107d8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8107d90:	687b      	ldr	r3, [r7, #4]
 8107d92:	681b      	ldr	r3, [r3, #0]
 8107d94:	4a43      	ldr	r2, [pc, #268]	; (8107ea4 <DMA_CalcBaseAndBitshift+0x11c>)
 8107d96:	4293      	cmp	r3, r2
 8107d98:	d04a      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107d9a:	687b      	ldr	r3, [r7, #4]
 8107d9c:	681b      	ldr	r3, [r3, #0]
 8107d9e:	4a42      	ldr	r2, [pc, #264]	; (8107ea8 <DMA_CalcBaseAndBitshift+0x120>)
 8107da0:	4293      	cmp	r3, r2
 8107da2:	d045      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	681b      	ldr	r3, [r3, #0]
 8107da8:	4a40      	ldr	r2, [pc, #256]	; (8107eac <DMA_CalcBaseAndBitshift+0x124>)
 8107daa:	4293      	cmp	r3, r2
 8107dac:	d040      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107dae:	687b      	ldr	r3, [r7, #4]
 8107db0:	681b      	ldr	r3, [r3, #0]
 8107db2:	4a3f      	ldr	r2, [pc, #252]	; (8107eb0 <DMA_CalcBaseAndBitshift+0x128>)
 8107db4:	4293      	cmp	r3, r2
 8107db6:	d03b      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107db8:	687b      	ldr	r3, [r7, #4]
 8107dba:	681b      	ldr	r3, [r3, #0]
 8107dbc:	4a3d      	ldr	r2, [pc, #244]	; (8107eb4 <DMA_CalcBaseAndBitshift+0x12c>)
 8107dbe:	4293      	cmp	r3, r2
 8107dc0:	d036      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107dc2:	687b      	ldr	r3, [r7, #4]
 8107dc4:	681b      	ldr	r3, [r3, #0]
 8107dc6:	4a3c      	ldr	r2, [pc, #240]	; (8107eb8 <DMA_CalcBaseAndBitshift+0x130>)
 8107dc8:	4293      	cmp	r3, r2
 8107dca:	d031      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	681b      	ldr	r3, [r3, #0]
 8107dd0:	4a3a      	ldr	r2, [pc, #232]	; (8107ebc <DMA_CalcBaseAndBitshift+0x134>)
 8107dd2:	4293      	cmp	r3, r2
 8107dd4:	d02c      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107dd6:	687b      	ldr	r3, [r7, #4]
 8107dd8:	681b      	ldr	r3, [r3, #0]
 8107dda:	4a39      	ldr	r2, [pc, #228]	; (8107ec0 <DMA_CalcBaseAndBitshift+0x138>)
 8107ddc:	4293      	cmp	r3, r2
 8107dde:	d027      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107de0:	687b      	ldr	r3, [r7, #4]
 8107de2:	681b      	ldr	r3, [r3, #0]
 8107de4:	4a37      	ldr	r2, [pc, #220]	; (8107ec4 <DMA_CalcBaseAndBitshift+0x13c>)
 8107de6:	4293      	cmp	r3, r2
 8107de8:	d022      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	681b      	ldr	r3, [r3, #0]
 8107dee:	4a36      	ldr	r2, [pc, #216]	; (8107ec8 <DMA_CalcBaseAndBitshift+0x140>)
 8107df0:	4293      	cmp	r3, r2
 8107df2:	d01d      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	681b      	ldr	r3, [r3, #0]
 8107df8:	4a34      	ldr	r2, [pc, #208]	; (8107ecc <DMA_CalcBaseAndBitshift+0x144>)
 8107dfa:	4293      	cmp	r3, r2
 8107dfc:	d018      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	681b      	ldr	r3, [r3, #0]
 8107e02:	4a33      	ldr	r2, [pc, #204]	; (8107ed0 <DMA_CalcBaseAndBitshift+0x148>)
 8107e04:	4293      	cmp	r3, r2
 8107e06:	d013      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	681b      	ldr	r3, [r3, #0]
 8107e0c:	4a31      	ldr	r2, [pc, #196]	; (8107ed4 <DMA_CalcBaseAndBitshift+0x14c>)
 8107e0e:	4293      	cmp	r3, r2
 8107e10:	d00e      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	4a30      	ldr	r2, [pc, #192]	; (8107ed8 <DMA_CalcBaseAndBitshift+0x150>)
 8107e18:	4293      	cmp	r3, r2
 8107e1a:	d009      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	681b      	ldr	r3, [r3, #0]
 8107e20:	4a2e      	ldr	r2, [pc, #184]	; (8107edc <DMA_CalcBaseAndBitshift+0x154>)
 8107e22:	4293      	cmp	r3, r2
 8107e24:	d004      	beq.n	8107e30 <DMA_CalcBaseAndBitshift+0xa8>
 8107e26:	687b      	ldr	r3, [r7, #4]
 8107e28:	681b      	ldr	r3, [r3, #0]
 8107e2a:	4a2d      	ldr	r2, [pc, #180]	; (8107ee0 <DMA_CalcBaseAndBitshift+0x158>)
 8107e2c:	4293      	cmp	r3, r2
 8107e2e:	d101      	bne.n	8107e34 <DMA_CalcBaseAndBitshift+0xac>
 8107e30:	2301      	movs	r3, #1
 8107e32:	e000      	b.n	8107e36 <DMA_CalcBaseAndBitshift+0xae>
 8107e34:	2300      	movs	r3, #0
 8107e36:	2b00      	cmp	r3, #0
 8107e38:	d026      	beq.n	8107e88 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8107e3a:	687b      	ldr	r3, [r7, #4]
 8107e3c:	681b      	ldr	r3, [r3, #0]
 8107e3e:	b2db      	uxtb	r3, r3
 8107e40:	3b10      	subs	r3, #16
 8107e42:	4a28      	ldr	r2, [pc, #160]	; (8107ee4 <DMA_CalcBaseAndBitshift+0x15c>)
 8107e44:	fba2 2303 	umull	r2, r3, r2, r3
 8107e48:	091b      	lsrs	r3, r3, #4
 8107e4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8107e4c:	68fb      	ldr	r3, [r7, #12]
 8107e4e:	f003 0307 	and.w	r3, r3, #7
 8107e52:	4a25      	ldr	r2, [pc, #148]	; (8107ee8 <DMA_CalcBaseAndBitshift+0x160>)
 8107e54:	5cd3      	ldrb	r3, [r2, r3]
 8107e56:	461a      	mov	r2, r3
 8107e58:	687b      	ldr	r3, [r7, #4]
 8107e5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8107e5c:	68fb      	ldr	r3, [r7, #12]
 8107e5e:	2b03      	cmp	r3, #3
 8107e60:	d909      	bls.n	8107e76 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	681b      	ldr	r3, [r3, #0]
 8107e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8107e6a:	f023 0303 	bic.w	r3, r3, #3
 8107e6e:	1d1a      	adds	r2, r3, #4
 8107e70:	687b      	ldr	r3, [r7, #4]
 8107e72:	659a      	str	r2, [r3, #88]	; 0x58
 8107e74:	e00e      	b.n	8107e94 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	681b      	ldr	r3, [r3, #0]
 8107e7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8107e7e:	f023 0303 	bic.w	r3, r3, #3
 8107e82:	687a      	ldr	r2, [r7, #4]
 8107e84:	6593      	str	r3, [r2, #88]	; 0x58
 8107e86:	e005      	b.n	8107e94 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8107e88:	687b      	ldr	r3, [r7, #4]
 8107e8a:	681b      	ldr	r3, [r3, #0]
 8107e8c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8107e94:	687b      	ldr	r3, [r7, #4]
 8107e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8107e98:	4618      	mov	r0, r3
 8107e9a:	3714      	adds	r7, #20
 8107e9c:	46bd      	mov	sp, r7
 8107e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ea2:	4770      	bx	lr
 8107ea4:	40020010 	.word	0x40020010
 8107ea8:	40020028 	.word	0x40020028
 8107eac:	40020040 	.word	0x40020040
 8107eb0:	40020058 	.word	0x40020058
 8107eb4:	40020070 	.word	0x40020070
 8107eb8:	40020088 	.word	0x40020088
 8107ebc:	400200a0 	.word	0x400200a0
 8107ec0:	400200b8 	.word	0x400200b8
 8107ec4:	40020410 	.word	0x40020410
 8107ec8:	40020428 	.word	0x40020428
 8107ecc:	40020440 	.word	0x40020440
 8107ed0:	40020458 	.word	0x40020458
 8107ed4:	40020470 	.word	0x40020470
 8107ed8:	40020488 	.word	0x40020488
 8107edc:	400204a0 	.word	0x400204a0
 8107ee0:	400204b8 	.word	0x400204b8
 8107ee4:	aaaaaaab 	.word	0xaaaaaaab
 8107ee8:	0810fdec 	.word	0x0810fdec

08107eec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8107eec:	b480      	push	{r7}
 8107eee:	b085      	sub	sp, #20
 8107ef0:	af00      	add	r7, sp, #0
 8107ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107ef4:	2300      	movs	r3, #0
 8107ef6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	699b      	ldr	r3, [r3, #24]
 8107efc:	2b00      	cmp	r3, #0
 8107efe:	d120      	bne.n	8107f42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f04:	2b03      	cmp	r3, #3
 8107f06:	d858      	bhi.n	8107fba <DMA_CheckFifoParam+0xce>
 8107f08:	a201      	add	r2, pc, #4	; (adr r2, 8107f10 <DMA_CheckFifoParam+0x24>)
 8107f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f0e:	bf00      	nop
 8107f10:	08107f21 	.word	0x08107f21
 8107f14:	08107f33 	.word	0x08107f33
 8107f18:	08107f21 	.word	0x08107f21
 8107f1c:	08107fbb 	.word	0x08107fbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8107f20:	687b      	ldr	r3, [r7, #4]
 8107f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8107f28:	2b00      	cmp	r3, #0
 8107f2a:	d048      	beq.n	8107fbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8107f2c:	2301      	movs	r3, #1
 8107f2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8107f30:	e045      	b.n	8107fbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8107f32:	687b      	ldr	r3, [r7, #4]
 8107f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8107f3a:	d142      	bne.n	8107fc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8107f3c:	2301      	movs	r3, #1
 8107f3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8107f40:	e03f      	b.n	8107fc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8107f42:	687b      	ldr	r3, [r7, #4]
 8107f44:	699b      	ldr	r3, [r3, #24]
 8107f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107f4a:	d123      	bne.n	8107f94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8107f4c:	687b      	ldr	r3, [r7, #4]
 8107f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f50:	2b03      	cmp	r3, #3
 8107f52:	d838      	bhi.n	8107fc6 <DMA_CheckFifoParam+0xda>
 8107f54:	a201      	add	r2, pc, #4	; (adr r2, 8107f5c <DMA_CheckFifoParam+0x70>)
 8107f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f5a:	bf00      	nop
 8107f5c:	08107f6d 	.word	0x08107f6d
 8107f60:	08107f73 	.word	0x08107f73
 8107f64:	08107f6d 	.word	0x08107f6d
 8107f68:	08107f85 	.word	0x08107f85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8107f6c:	2301      	movs	r3, #1
 8107f6e:	73fb      	strb	r3, [r7, #15]
        break;
 8107f70:	e030      	b.n	8107fd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8107f72:	687b      	ldr	r3, [r7, #4]
 8107f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8107f7a:	2b00      	cmp	r3, #0
 8107f7c:	d025      	beq.n	8107fca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8107f7e:	2301      	movs	r3, #1
 8107f80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8107f82:	e022      	b.n	8107fca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8107f8c:	d11f      	bne.n	8107fce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8107f8e:	2301      	movs	r3, #1
 8107f90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8107f92:	e01c      	b.n	8107fce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8107f94:	687b      	ldr	r3, [r7, #4]
 8107f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f98:	2b02      	cmp	r3, #2
 8107f9a:	d902      	bls.n	8107fa2 <DMA_CheckFifoParam+0xb6>
 8107f9c:	2b03      	cmp	r3, #3
 8107f9e:	d003      	beq.n	8107fa8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8107fa0:	e018      	b.n	8107fd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8107fa2:	2301      	movs	r3, #1
 8107fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8107fa6:	e015      	b.n	8107fd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8107fb0:	2b00      	cmp	r3, #0
 8107fb2:	d00e      	beq.n	8107fd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8107fb4:	2301      	movs	r3, #1
 8107fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8107fb8:	e00b      	b.n	8107fd2 <DMA_CheckFifoParam+0xe6>
        break;
 8107fba:	bf00      	nop
 8107fbc:	e00a      	b.n	8107fd4 <DMA_CheckFifoParam+0xe8>
        break;
 8107fbe:	bf00      	nop
 8107fc0:	e008      	b.n	8107fd4 <DMA_CheckFifoParam+0xe8>
        break;
 8107fc2:	bf00      	nop
 8107fc4:	e006      	b.n	8107fd4 <DMA_CheckFifoParam+0xe8>
        break;
 8107fc6:	bf00      	nop
 8107fc8:	e004      	b.n	8107fd4 <DMA_CheckFifoParam+0xe8>
        break;
 8107fca:	bf00      	nop
 8107fcc:	e002      	b.n	8107fd4 <DMA_CheckFifoParam+0xe8>
        break;
 8107fce:	bf00      	nop
 8107fd0:	e000      	b.n	8107fd4 <DMA_CheckFifoParam+0xe8>
    break;
 8107fd2:	bf00      	nop
    }
  }

  return status;
 8107fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8107fd6:	4618      	mov	r0, r3
 8107fd8:	3714      	adds	r7, #20
 8107fda:	46bd      	mov	sp, r7
 8107fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fe0:	4770      	bx	lr
 8107fe2:	bf00      	nop

08107fe4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8107fe4:	b480      	push	{r7}
 8107fe6:	b085      	sub	sp, #20
 8107fe8:	af00      	add	r7, sp, #0
 8107fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8107fec:	687b      	ldr	r3, [r7, #4]
 8107fee:	681b      	ldr	r3, [r3, #0]
 8107ff0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8107ff2:	687b      	ldr	r3, [r7, #4]
 8107ff4:	681b      	ldr	r3, [r3, #0]
 8107ff6:	4a3a      	ldr	r2, [pc, #232]	; (81080e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8107ff8:	4293      	cmp	r3, r2
 8107ffa:	d022      	beq.n	8108042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	681b      	ldr	r3, [r3, #0]
 8108000:	4a38      	ldr	r2, [pc, #224]	; (81080e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8108002:	4293      	cmp	r3, r2
 8108004:	d01d      	beq.n	8108042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108006:	687b      	ldr	r3, [r7, #4]
 8108008:	681b      	ldr	r3, [r3, #0]
 810800a:	4a37      	ldr	r2, [pc, #220]	; (81080e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810800c:	4293      	cmp	r3, r2
 810800e:	d018      	beq.n	8108042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108010:	687b      	ldr	r3, [r7, #4]
 8108012:	681b      	ldr	r3, [r3, #0]
 8108014:	4a35      	ldr	r2, [pc, #212]	; (81080ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8108016:	4293      	cmp	r3, r2
 8108018:	d013      	beq.n	8108042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	681b      	ldr	r3, [r3, #0]
 810801e:	4a34      	ldr	r2, [pc, #208]	; (81080f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8108020:	4293      	cmp	r3, r2
 8108022:	d00e      	beq.n	8108042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108024:	687b      	ldr	r3, [r7, #4]
 8108026:	681b      	ldr	r3, [r3, #0]
 8108028:	4a32      	ldr	r2, [pc, #200]	; (81080f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810802a:	4293      	cmp	r3, r2
 810802c:	d009      	beq.n	8108042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810802e:	687b      	ldr	r3, [r7, #4]
 8108030:	681b      	ldr	r3, [r3, #0]
 8108032:	4a31      	ldr	r2, [pc, #196]	; (81080f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8108034:	4293      	cmp	r3, r2
 8108036:	d004      	beq.n	8108042 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108038:	687b      	ldr	r3, [r7, #4]
 810803a:	681b      	ldr	r3, [r3, #0]
 810803c:	4a2f      	ldr	r2, [pc, #188]	; (81080fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810803e:	4293      	cmp	r3, r2
 8108040:	d101      	bne.n	8108046 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8108042:	2301      	movs	r3, #1
 8108044:	e000      	b.n	8108048 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8108046:	2300      	movs	r3, #0
 8108048:	2b00      	cmp	r3, #0
 810804a:	d01c      	beq.n	8108086 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810804c:	687b      	ldr	r3, [r7, #4]
 810804e:	681b      	ldr	r3, [r3, #0]
 8108050:	b2db      	uxtb	r3, r3
 8108052:	3b08      	subs	r3, #8
 8108054:	4a2a      	ldr	r2, [pc, #168]	; (8108100 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8108056:	fba2 2303 	umull	r2, r3, r2, r3
 810805a:	091b      	lsrs	r3, r3, #4
 810805c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810805e:	68fb      	ldr	r3, [r7, #12]
 8108060:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8108064:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8108068:	009b      	lsls	r3, r3, #2
 810806a:	461a      	mov	r2, r3
 810806c:	687b      	ldr	r3, [r7, #4]
 810806e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	4a24      	ldr	r2, [pc, #144]	; (8108104 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8108074:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8108076:	68fb      	ldr	r3, [r7, #12]
 8108078:	f003 031f 	and.w	r3, r3, #31
 810807c:	2201      	movs	r2, #1
 810807e:	409a      	lsls	r2, r3
 8108080:	687b      	ldr	r3, [r7, #4]
 8108082:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8108084:	e026      	b.n	81080d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8108086:	687b      	ldr	r3, [r7, #4]
 8108088:	681b      	ldr	r3, [r3, #0]
 810808a:	b2db      	uxtb	r3, r3
 810808c:	3b10      	subs	r3, #16
 810808e:	4a1e      	ldr	r2, [pc, #120]	; (8108108 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8108090:	fba2 2303 	umull	r2, r3, r2, r3
 8108094:	091b      	lsrs	r3, r3, #4
 8108096:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8108098:	68bb      	ldr	r3, [r7, #8]
 810809a:	4a1c      	ldr	r2, [pc, #112]	; (810810c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810809c:	4293      	cmp	r3, r2
 810809e:	d806      	bhi.n	81080ae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81080a0:	68bb      	ldr	r3, [r7, #8]
 81080a2:	4a1b      	ldr	r2, [pc, #108]	; (8108110 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81080a4:	4293      	cmp	r3, r2
 81080a6:	d902      	bls.n	81080ae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81080a8:	68fb      	ldr	r3, [r7, #12]
 81080aa:	3308      	adds	r3, #8
 81080ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81080ae:	68fb      	ldr	r3, [r7, #12]
 81080b0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81080b4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81080b8:	009b      	lsls	r3, r3, #2
 81080ba:	461a      	mov	r2, r3
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81080c0:	687b      	ldr	r3, [r7, #4]
 81080c2:	4a14      	ldr	r2, [pc, #80]	; (8108114 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81080c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81080c6:	68fb      	ldr	r3, [r7, #12]
 81080c8:	f003 031f 	and.w	r3, r3, #31
 81080cc:	2201      	movs	r2, #1
 81080ce:	409a      	lsls	r2, r3
 81080d0:	687b      	ldr	r3, [r7, #4]
 81080d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 81080d4:	bf00      	nop
 81080d6:	3714      	adds	r7, #20
 81080d8:	46bd      	mov	sp, r7
 81080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080de:	4770      	bx	lr
 81080e0:	58025408 	.word	0x58025408
 81080e4:	5802541c 	.word	0x5802541c
 81080e8:	58025430 	.word	0x58025430
 81080ec:	58025444 	.word	0x58025444
 81080f0:	58025458 	.word	0x58025458
 81080f4:	5802546c 	.word	0x5802546c
 81080f8:	58025480 	.word	0x58025480
 81080fc:	58025494 	.word	0x58025494
 8108100:	cccccccd 	.word	0xcccccccd
 8108104:	58025880 	.word	0x58025880
 8108108:	aaaaaaab 	.word	0xaaaaaaab
 810810c:	400204b8 	.word	0x400204b8
 8108110:	4002040f 	.word	0x4002040f
 8108114:	40020880 	.word	0x40020880

08108118 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8108118:	b480      	push	{r7}
 810811a:	b085      	sub	sp, #20
 810811c:	af00      	add	r7, sp, #0
 810811e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	685b      	ldr	r3, [r3, #4]
 8108124:	b2db      	uxtb	r3, r3
 8108126:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8108128:	68fb      	ldr	r3, [r7, #12]
 810812a:	2b00      	cmp	r3, #0
 810812c:	d04a      	beq.n	81081c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810812e:	68fb      	ldr	r3, [r7, #12]
 8108130:	2b08      	cmp	r3, #8
 8108132:	d847      	bhi.n	81081c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8108134:	687b      	ldr	r3, [r7, #4]
 8108136:	681b      	ldr	r3, [r3, #0]
 8108138:	4a25      	ldr	r2, [pc, #148]	; (81081d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810813a:	4293      	cmp	r3, r2
 810813c:	d022      	beq.n	8108184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810813e:	687b      	ldr	r3, [r7, #4]
 8108140:	681b      	ldr	r3, [r3, #0]
 8108142:	4a24      	ldr	r2, [pc, #144]	; (81081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8108144:	4293      	cmp	r3, r2
 8108146:	d01d      	beq.n	8108184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108148:	687b      	ldr	r3, [r7, #4]
 810814a:	681b      	ldr	r3, [r3, #0]
 810814c:	4a22      	ldr	r2, [pc, #136]	; (81081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810814e:	4293      	cmp	r3, r2
 8108150:	d018      	beq.n	8108184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108152:	687b      	ldr	r3, [r7, #4]
 8108154:	681b      	ldr	r3, [r3, #0]
 8108156:	4a21      	ldr	r2, [pc, #132]	; (81081dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8108158:	4293      	cmp	r3, r2
 810815a:	d013      	beq.n	8108184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	681b      	ldr	r3, [r3, #0]
 8108160:	4a1f      	ldr	r2, [pc, #124]	; (81081e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8108162:	4293      	cmp	r3, r2
 8108164:	d00e      	beq.n	8108184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108166:	687b      	ldr	r3, [r7, #4]
 8108168:	681b      	ldr	r3, [r3, #0]
 810816a:	4a1e      	ldr	r2, [pc, #120]	; (81081e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 810816c:	4293      	cmp	r3, r2
 810816e:	d009      	beq.n	8108184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	681b      	ldr	r3, [r3, #0]
 8108174:	4a1c      	ldr	r2, [pc, #112]	; (81081e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8108176:	4293      	cmp	r3, r2
 8108178:	d004      	beq.n	8108184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810817a:	687b      	ldr	r3, [r7, #4]
 810817c:	681b      	ldr	r3, [r3, #0]
 810817e:	4a1b      	ldr	r2, [pc, #108]	; (81081ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8108180:	4293      	cmp	r3, r2
 8108182:	d101      	bne.n	8108188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8108184:	2301      	movs	r3, #1
 8108186:	e000      	b.n	810818a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8108188:	2300      	movs	r3, #0
 810818a:	2b00      	cmp	r3, #0
 810818c:	d00a      	beq.n	81081a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810818e:	68fa      	ldr	r2, [r7, #12]
 8108190:	4b17      	ldr	r3, [pc, #92]	; (81081f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8108192:	4413      	add	r3, r2
 8108194:	009b      	lsls	r3, r3, #2
 8108196:	461a      	mov	r2, r3
 8108198:	687b      	ldr	r3, [r7, #4]
 810819a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	4a15      	ldr	r2, [pc, #84]	; (81081f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81081a0:	671a      	str	r2, [r3, #112]	; 0x70
 81081a2:	e009      	b.n	81081b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81081a4:	68fa      	ldr	r2, [r7, #12]
 81081a6:	4b14      	ldr	r3, [pc, #80]	; (81081f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81081a8:	4413      	add	r3, r2
 81081aa:	009b      	lsls	r3, r3, #2
 81081ac:	461a      	mov	r2, r3
 81081ae:	687b      	ldr	r3, [r7, #4]
 81081b0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	4a11      	ldr	r2, [pc, #68]	; (81081fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81081b6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81081b8:	68fb      	ldr	r3, [r7, #12]
 81081ba:	3b01      	subs	r3, #1
 81081bc:	2201      	movs	r2, #1
 81081be:	409a      	lsls	r2, r3
 81081c0:	687b      	ldr	r3, [r7, #4]
 81081c2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81081c4:	bf00      	nop
 81081c6:	3714      	adds	r7, #20
 81081c8:	46bd      	mov	sp, r7
 81081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081ce:	4770      	bx	lr
 81081d0:	58025408 	.word	0x58025408
 81081d4:	5802541c 	.word	0x5802541c
 81081d8:	58025430 	.word	0x58025430
 81081dc:	58025444 	.word	0x58025444
 81081e0:	58025458 	.word	0x58025458
 81081e4:	5802546c 	.word	0x5802546c
 81081e8:	58025480 	.word	0x58025480
 81081ec:	58025494 	.word	0x58025494
 81081f0:	1600963f 	.word	0x1600963f
 81081f4:	58025940 	.word	0x58025940
 81081f8:	1000823f 	.word	0x1000823f
 81081fc:	40020940 	.word	0x40020940

08108200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8108200:	b480      	push	{r7}
 8108202:	b089      	sub	sp, #36	; 0x24
 8108204:	af00      	add	r7, sp, #0
 8108206:	6078      	str	r0, [r7, #4]
 8108208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810820a:	2300      	movs	r3, #0
 810820c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810820e:	4b89      	ldr	r3, [pc, #548]	; (8108434 <HAL_GPIO_Init+0x234>)
 8108210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8108212:	e194      	b.n	810853e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8108214:	683b      	ldr	r3, [r7, #0]
 8108216:	681a      	ldr	r2, [r3, #0]
 8108218:	2101      	movs	r1, #1
 810821a:	69fb      	ldr	r3, [r7, #28]
 810821c:	fa01 f303 	lsl.w	r3, r1, r3
 8108220:	4013      	ands	r3, r2
 8108222:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8108224:	693b      	ldr	r3, [r7, #16]
 8108226:	2b00      	cmp	r3, #0
 8108228:	f000 8186 	beq.w	8108538 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810822c:	683b      	ldr	r3, [r7, #0]
 810822e:	685b      	ldr	r3, [r3, #4]
 8108230:	2b01      	cmp	r3, #1
 8108232:	d00b      	beq.n	810824c <HAL_GPIO_Init+0x4c>
 8108234:	683b      	ldr	r3, [r7, #0]
 8108236:	685b      	ldr	r3, [r3, #4]
 8108238:	2b02      	cmp	r3, #2
 810823a:	d007      	beq.n	810824c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810823c:	683b      	ldr	r3, [r7, #0]
 810823e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8108240:	2b11      	cmp	r3, #17
 8108242:	d003      	beq.n	810824c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8108244:	683b      	ldr	r3, [r7, #0]
 8108246:	685b      	ldr	r3, [r3, #4]
 8108248:	2b12      	cmp	r3, #18
 810824a:	d130      	bne.n	81082ae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810824c:	687b      	ldr	r3, [r7, #4]
 810824e:	689b      	ldr	r3, [r3, #8]
 8108250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8108252:	69fb      	ldr	r3, [r7, #28]
 8108254:	005b      	lsls	r3, r3, #1
 8108256:	2203      	movs	r2, #3
 8108258:	fa02 f303 	lsl.w	r3, r2, r3
 810825c:	43db      	mvns	r3, r3
 810825e:	69ba      	ldr	r2, [r7, #24]
 8108260:	4013      	ands	r3, r2
 8108262:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8108264:	683b      	ldr	r3, [r7, #0]
 8108266:	68da      	ldr	r2, [r3, #12]
 8108268:	69fb      	ldr	r3, [r7, #28]
 810826a:	005b      	lsls	r3, r3, #1
 810826c:	fa02 f303 	lsl.w	r3, r2, r3
 8108270:	69ba      	ldr	r2, [r7, #24]
 8108272:	4313      	orrs	r3, r2
 8108274:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8108276:	687b      	ldr	r3, [r7, #4]
 8108278:	69ba      	ldr	r2, [r7, #24]
 810827a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810827c:	687b      	ldr	r3, [r7, #4]
 810827e:	685b      	ldr	r3, [r3, #4]
 8108280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8108282:	2201      	movs	r2, #1
 8108284:	69fb      	ldr	r3, [r7, #28]
 8108286:	fa02 f303 	lsl.w	r3, r2, r3
 810828a:	43db      	mvns	r3, r3
 810828c:	69ba      	ldr	r2, [r7, #24]
 810828e:	4013      	ands	r3, r2
 8108290:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8108292:	683b      	ldr	r3, [r7, #0]
 8108294:	685b      	ldr	r3, [r3, #4]
 8108296:	091b      	lsrs	r3, r3, #4
 8108298:	f003 0201 	and.w	r2, r3, #1
 810829c:	69fb      	ldr	r3, [r7, #28]
 810829e:	fa02 f303 	lsl.w	r3, r2, r3
 81082a2:	69ba      	ldr	r2, [r7, #24]
 81082a4:	4313      	orrs	r3, r2
 81082a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81082a8:	687b      	ldr	r3, [r7, #4]
 81082aa:	69ba      	ldr	r2, [r7, #24]
 81082ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81082ae:	687b      	ldr	r3, [r7, #4]
 81082b0:	68db      	ldr	r3, [r3, #12]
 81082b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81082b4:	69fb      	ldr	r3, [r7, #28]
 81082b6:	005b      	lsls	r3, r3, #1
 81082b8:	2203      	movs	r2, #3
 81082ba:	fa02 f303 	lsl.w	r3, r2, r3
 81082be:	43db      	mvns	r3, r3
 81082c0:	69ba      	ldr	r2, [r7, #24]
 81082c2:	4013      	ands	r3, r2
 81082c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81082c6:	683b      	ldr	r3, [r7, #0]
 81082c8:	689a      	ldr	r2, [r3, #8]
 81082ca:	69fb      	ldr	r3, [r7, #28]
 81082cc:	005b      	lsls	r3, r3, #1
 81082ce:	fa02 f303 	lsl.w	r3, r2, r3
 81082d2:	69ba      	ldr	r2, [r7, #24]
 81082d4:	4313      	orrs	r3, r2
 81082d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	69ba      	ldr	r2, [r7, #24]
 81082dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81082de:	683b      	ldr	r3, [r7, #0]
 81082e0:	685b      	ldr	r3, [r3, #4]
 81082e2:	2b02      	cmp	r3, #2
 81082e4:	d003      	beq.n	81082ee <HAL_GPIO_Init+0xee>
 81082e6:	683b      	ldr	r3, [r7, #0]
 81082e8:	685b      	ldr	r3, [r3, #4]
 81082ea:	2b12      	cmp	r3, #18
 81082ec:	d123      	bne.n	8108336 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81082ee:	69fb      	ldr	r3, [r7, #28]
 81082f0:	08da      	lsrs	r2, r3, #3
 81082f2:	687b      	ldr	r3, [r7, #4]
 81082f4:	3208      	adds	r2, #8
 81082f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81082fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81082fc:	69fb      	ldr	r3, [r7, #28]
 81082fe:	f003 0307 	and.w	r3, r3, #7
 8108302:	009b      	lsls	r3, r3, #2
 8108304:	220f      	movs	r2, #15
 8108306:	fa02 f303 	lsl.w	r3, r2, r3
 810830a:	43db      	mvns	r3, r3
 810830c:	69ba      	ldr	r2, [r7, #24]
 810830e:	4013      	ands	r3, r2
 8108310:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8108312:	683b      	ldr	r3, [r7, #0]
 8108314:	691a      	ldr	r2, [r3, #16]
 8108316:	69fb      	ldr	r3, [r7, #28]
 8108318:	f003 0307 	and.w	r3, r3, #7
 810831c:	009b      	lsls	r3, r3, #2
 810831e:	fa02 f303 	lsl.w	r3, r2, r3
 8108322:	69ba      	ldr	r2, [r7, #24]
 8108324:	4313      	orrs	r3, r2
 8108326:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8108328:	69fb      	ldr	r3, [r7, #28]
 810832a:	08da      	lsrs	r2, r3, #3
 810832c:	687b      	ldr	r3, [r7, #4]
 810832e:	3208      	adds	r2, #8
 8108330:	69b9      	ldr	r1, [r7, #24]
 8108332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8108336:	687b      	ldr	r3, [r7, #4]
 8108338:	681b      	ldr	r3, [r3, #0]
 810833a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810833c:	69fb      	ldr	r3, [r7, #28]
 810833e:	005b      	lsls	r3, r3, #1
 8108340:	2203      	movs	r2, #3
 8108342:	fa02 f303 	lsl.w	r3, r2, r3
 8108346:	43db      	mvns	r3, r3
 8108348:	69ba      	ldr	r2, [r7, #24]
 810834a:	4013      	ands	r3, r2
 810834c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810834e:	683b      	ldr	r3, [r7, #0]
 8108350:	685b      	ldr	r3, [r3, #4]
 8108352:	f003 0203 	and.w	r2, r3, #3
 8108356:	69fb      	ldr	r3, [r7, #28]
 8108358:	005b      	lsls	r3, r3, #1
 810835a:	fa02 f303 	lsl.w	r3, r2, r3
 810835e:	69ba      	ldr	r2, [r7, #24]
 8108360:	4313      	orrs	r3, r2
 8108362:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8108364:	687b      	ldr	r3, [r7, #4]
 8108366:	69ba      	ldr	r2, [r7, #24]
 8108368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810836a:	683b      	ldr	r3, [r7, #0]
 810836c:	685b      	ldr	r3, [r3, #4]
 810836e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8108372:	2b00      	cmp	r3, #0
 8108374:	f000 80e0 	beq.w	8108538 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8108378:	4b2f      	ldr	r3, [pc, #188]	; (8108438 <HAL_GPIO_Init+0x238>)
 810837a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810837e:	4a2e      	ldr	r2, [pc, #184]	; (8108438 <HAL_GPIO_Init+0x238>)
 8108380:	f043 0302 	orr.w	r3, r3, #2
 8108384:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8108388:	4b2b      	ldr	r3, [pc, #172]	; (8108438 <HAL_GPIO_Init+0x238>)
 810838a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810838e:	f003 0302 	and.w	r3, r3, #2
 8108392:	60fb      	str	r3, [r7, #12]
 8108394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8108396:	4a29      	ldr	r2, [pc, #164]	; (810843c <HAL_GPIO_Init+0x23c>)
 8108398:	69fb      	ldr	r3, [r7, #28]
 810839a:	089b      	lsrs	r3, r3, #2
 810839c:	3302      	adds	r3, #2
 810839e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81083a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81083a4:	69fb      	ldr	r3, [r7, #28]
 81083a6:	f003 0303 	and.w	r3, r3, #3
 81083aa:	009b      	lsls	r3, r3, #2
 81083ac:	220f      	movs	r2, #15
 81083ae:	fa02 f303 	lsl.w	r3, r2, r3
 81083b2:	43db      	mvns	r3, r3
 81083b4:	69ba      	ldr	r2, [r7, #24]
 81083b6:	4013      	ands	r3, r2
 81083b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81083ba:	687b      	ldr	r3, [r7, #4]
 81083bc:	4a20      	ldr	r2, [pc, #128]	; (8108440 <HAL_GPIO_Init+0x240>)
 81083be:	4293      	cmp	r3, r2
 81083c0:	d052      	beq.n	8108468 <HAL_GPIO_Init+0x268>
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	4a1f      	ldr	r2, [pc, #124]	; (8108444 <HAL_GPIO_Init+0x244>)
 81083c6:	4293      	cmp	r3, r2
 81083c8:	d031      	beq.n	810842e <HAL_GPIO_Init+0x22e>
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	4a1e      	ldr	r2, [pc, #120]	; (8108448 <HAL_GPIO_Init+0x248>)
 81083ce:	4293      	cmp	r3, r2
 81083d0:	d02b      	beq.n	810842a <HAL_GPIO_Init+0x22a>
 81083d2:	687b      	ldr	r3, [r7, #4]
 81083d4:	4a1d      	ldr	r2, [pc, #116]	; (810844c <HAL_GPIO_Init+0x24c>)
 81083d6:	4293      	cmp	r3, r2
 81083d8:	d025      	beq.n	8108426 <HAL_GPIO_Init+0x226>
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	4a1c      	ldr	r2, [pc, #112]	; (8108450 <HAL_GPIO_Init+0x250>)
 81083de:	4293      	cmp	r3, r2
 81083e0:	d01f      	beq.n	8108422 <HAL_GPIO_Init+0x222>
 81083e2:	687b      	ldr	r3, [r7, #4]
 81083e4:	4a1b      	ldr	r2, [pc, #108]	; (8108454 <HAL_GPIO_Init+0x254>)
 81083e6:	4293      	cmp	r3, r2
 81083e8:	d019      	beq.n	810841e <HAL_GPIO_Init+0x21e>
 81083ea:	687b      	ldr	r3, [r7, #4]
 81083ec:	4a1a      	ldr	r2, [pc, #104]	; (8108458 <HAL_GPIO_Init+0x258>)
 81083ee:	4293      	cmp	r3, r2
 81083f0:	d013      	beq.n	810841a <HAL_GPIO_Init+0x21a>
 81083f2:	687b      	ldr	r3, [r7, #4]
 81083f4:	4a19      	ldr	r2, [pc, #100]	; (810845c <HAL_GPIO_Init+0x25c>)
 81083f6:	4293      	cmp	r3, r2
 81083f8:	d00d      	beq.n	8108416 <HAL_GPIO_Init+0x216>
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	4a18      	ldr	r2, [pc, #96]	; (8108460 <HAL_GPIO_Init+0x260>)
 81083fe:	4293      	cmp	r3, r2
 8108400:	d007      	beq.n	8108412 <HAL_GPIO_Init+0x212>
 8108402:	687b      	ldr	r3, [r7, #4]
 8108404:	4a17      	ldr	r2, [pc, #92]	; (8108464 <HAL_GPIO_Init+0x264>)
 8108406:	4293      	cmp	r3, r2
 8108408:	d101      	bne.n	810840e <HAL_GPIO_Init+0x20e>
 810840a:	2309      	movs	r3, #9
 810840c:	e02d      	b.n	810846a <HAL_GPIO_Init+0x26a>
 810840e:	230a      	movs	r3, #10
 8108410:	e02b      	b.n	810846a <HAL_GPIO_Init+0x26a>
 8108412:	2308      	movs	r3, #8
 8108414:	e029      	b.n	810846a <HAL_GPIO_Init+0x26a>
 8108416:	2307      	movs	r3, #7
 8108418:	e027      	b.n	810846a <HAL_GPIO_Init+0x26a>
 810841a:	2306      	movs	r3, #6
 810841c:	e025      	b.n	810846a <HAL_GPIO_Init+0x26a>
 810841e:	2305      	movs	r3, #5
 8108420:	e023      	b.n	810846a <HAL_GPIO_Init+0x26a>
 8108422:	2304      	movs	r3, #4
 8108424:	e021      	b.n	810846a <HAL_GPIO_Init+0x26a>
 8108426:	2303      	movs	r3, #3
 8108428:	e01f      	b.n	810846a <HAL_GPIO_Init+0x26a>
 810842a:	2302      	movs	r3, #2
 810842c:	e01d      	b.n	810846a <HAL_GPIO_Init+0x26a>
 810842e:	2301      	movs	r3, #1
 8108430:	e01b      	b.n	810846a <HAL_GPIO_Init+0x26a>
 8108432:	bf00      	nop
 8108434:	580000c0 	.word	0x580000c0
 8108438:	58024400 	.word	0x58024400
 810843c:	58000400 	.word	0x58000400
 8108440:	58020000 	.word	0x58020000
 8108444:	58020400 	.word	0x58020400
 8108448:	58020800 	.word	0x58020800
 810844c:	58020c00 	.word	0x58020c00
 8108450:	58021000 	.word	0x58021000
 8108454:	58021400 	.word	0x58021400
 8108458:	58021800 	.word	0x58021800
 810845c:	58021c00 	.word	0x58021c00
 8108460:	58022000 	.word	0x58022000
 8108464:	58022400 	.word	0x58022400
 8108468:	2300      	movs	r3, #0
 810846a:	69fa      	ldr	r2, [r7, #28]
 810846c:	f002 0203 	and.w	r2, r2, #3
 8108470:	0092      	lsls	r2, r2, #2
 8108472:	4093      	lsls	r3, r2
 8108474:	69ba      	ldr	r2, [r7, #24]
 8108476:	4313      	orrs	r3, r2
 8108478:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810847a:	4938      	ldr	r1, [pc, #224]	; (810855c <HAL_GPIO_Init+0x35c>)
 810847c:	69fb      	ldr	r3, [r7, #28]
 810847e:	089b      	lsrs	r3, r3, #2
 8108480:	3302      	adds	r3, #2
 8108482:	69ba      	ldr	r2, [r7, #24]
 8108484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8108488:	697b      	ldr	r3, [r7, #20]
 810848a:	681b      	ldr	r3, [r3, #0]
 810848c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810848e:	693b      	ldr	r3, [r7, #16]
 8108490:	43db      	mvns	r3, r3
 8108492:	69ba      	ldr	r2, [r7, #24]
 8108494:	4013      	ands	r3, r2
 8108496:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8108498:	683b      	ldr	r3, [r7, #0]
 810849a:	685b      	ldr	r3, [r3, #4]
 810849c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81084a0:	2b00      	cmp	r3, #0
 81084a2:	d003      	beq.n	81084ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81084a4:	69ba      	ldr	r2, [r7, #24]
 81084a6:	693b      	ldr	r3, [r7, #16]
 81084a8:	4313      	orrs	r3, r2
 81084aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81084ac:	697b      	ldr	r3, [r7, #20]
 81084ae:	69ba      	ldr	r2, [r7, #24]
 81084b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81084b2:	697b      	ldr	r3, [r7, #20]
 81084b4:	685b      	ldr	r3, [r3, #4]
 81084b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81084b8:	693b      	ldr	r3, [r7, #16]
 81084ba:	43db      	mvns	r3, r3
 81084bc:	69ba      	ldr	r2, [r7, #24]
 81084be:	4013      	ands	r3, r2
 81084c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81084c2:	683b      	ldr	r3, [r7, #0]
 81084c4:	685b      	ldr	r3, [r3, #4]
 81084c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81084ca:	2b00      	cmp	r3, #0
 81084cc:	d003      	beq.n	81084d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81084ce:	69ba      	ldr	r2, [r7, #24]
 81084d0:	693b      	ldr	r3, [r7, #16]
 81084d2:	4313      	orrs	r3, r2
 81084d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81084d6:	697b      	ldr	r3, [r7, #20]
 81084d8:	69ba      	ldr	r2, [r7, #24]
 81084da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81084dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81084e0:	681b      	ldr	r3, [r3, #0]
 81084e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81084e4:	693b      	ldr	r3, [r7, #16]
 81084e6:	43db      	mvns	r3, r3
 81084e8:	69ba      	ldr	r2, [r7, #24]
 81084ea:	4013      	ands	r3, r2
 81084ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81084ee:	683b      	ldr	r3, [r7, #0]
 81084f0:	685b      	ldr	r3, [r3, #4]
 81084f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81084f6:	2b00      	cmp	r3, #0
 81084f8:	d003      	beq.n	8108502 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81084fa:	69ba      	ldr	r2, [r7, #24]
 81084fc:	693b      	ldr	r3, [r7, #16]
 81084fe:	4313      	orrs	r3, r2
 8108500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8108502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8108506:	69bb      	ldr	r3, [r7, #24]
 8108508:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810850a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810850e:	685b      	ldr	r3, [r3, #4]
 8108510:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8108512:	693b      	ldr	r3, [r7, #16]
 8108514:	43db      	mvns	r3, r3
 8108516:	69ba      	ldr	r2, [r7, #24]
 8108518:	4013      	ands	r3, r2
 810851a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810851c:	683b      	ldr	r3, [r7, #0]
 810851e:	685b      	ldr	r3, [r3, #4]
 8108520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8108524:	2b00      	cmp	r3, #0
 8108526:	d003      	beq.n	8108530 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8108528:	69ba      	ldr	r2, [r7, #24]
 810852a:	693b      	ldr	r3, [r7, #16]
 810852c:	4313      	orrs	r3, r2
 810852e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8108530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8108534:	69bb      	ldr	r3, [r7, #24]
 8108536:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8108538:	69fb      	ldr	r3, [r7, #28]
 810853a:	3301      	adds	r3, #1
 810853c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810853e:	683b      	ldr	r3, [r7, #0]
 8108540:	681a      	ldr	r2, [r3, #0]
 8108542:	69fb      	ldr	r3, [r7, #28]
 8108544:	fa22 f303 	lsr.w	r3, r2, r3
 8108548:	2b00      	cmp	r3, #0
 810854a:	f47f ae63 	bne.w	8108214 <HAL_GPIO_Init+0x14>
  }
}
 810854e:	bf00      	nop
 8108550:	bf00      	nop
 8108552:	3724      	adds	r7, #36	; 0x24
 8108554:	46bd      	mov	sp, r7
 8108556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810855a:	4770      	bx	lr
 810855c:	58000400 	.word	0x58000400

08108560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8108560:	b480      	push	{r7}
 8108562:	b083      	sub	sp, #12
 8108564:	af00      	add	r7, sp, #0
 8108566:	6078      	str	r0, [r7, #4]
 8108568:	460b      	mov	r3, r1
 810856a:	807b      	strh	r3, [r7, #2]
 810856c:	4613      	mov	r3, r2
 810856e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8108570:	787b      	ldrb	r3, [r7, #1]
 8108572:	2b00      	cmp	r3, #0
 8108574:	d003      	beq.n	810857e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8108576:	887a      	ldrh	r2, [r7, #2]
 8108578:	687b      	ldr	r3, [r7, #4]
 810857a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810857c:	e003      	b.n	8108586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810857e:	887b      	ldrh	r3, [r7, #2]
 8108580:	041a      	lsls	r2, r3, #16
 8108582:	687b      	ldr	r3, [r7, #4]
 8108584:	619a      	str	r2, [r3, #24]
}
 8108586:	bf00      	nop
 8108588:	370c      	adds	r7, #12
 810858a:	46bd      	mov	sp, r7
 810858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108590:	4770      	bx	lr
	...

08108594 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8108594:	b480      	push	{r7}
 8108596:	b083      	sub	sp, #12
 8108598:	af00      	add	r7, sp, #0
 810859a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 810859c:	4a08      	ldr	r2, [pc, #32]	; (81085c0 <HAL_HSEM_FastTake+0x2c>)
 810859e:	687b      	ldr	r3, [r7, #4]
 81085a0:	3320      	adds	r3, #32
 81085a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81085a6:	4a07      	ldr	r2, [pc, #28]	; (81085c4 <HAL_HSEM_FastTake+0x30>)
 81085a8:	4293      	cmp	r3, r2
 81085aa:	d101      	bne.n	81085b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81085ac:	2300      	movs	r3, #0
 81085ae:	e000      	b.n	81085b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81085b0:	2301      	movs	r3, #1
}
 81085b2:	4618      	mov	r0, r3
 81085b4:	370c      	adds	r7, #12
 81085b6:	46bd      	mov	sp, r7
 81085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085bc:	4770      	bx	lr
 81085be:	bf00      	nop
 81085c0:	58026400 	.word	0x58026400
 81085c4:	80000100 	.word	0x80000100

081085c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81085c8:	b480      	push	{r7}
 81085ca:	b083      	sub	sp, #12
 81085cc:	af00      	add	r7, sp, #0
 81085ce:	6078      	str	r0, [r7, #4]
 81085d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81085d2:	4906      	ldr	r1, [pc, #24]	; (81085ec <HAL_HSEM_Release+0x24>)
 81085d4:	683b      	ldr	r3, [r7, #0]
 81085d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81085da:	687b      	ldr	r3, [r7, #4]
 81085dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81085e0:	bf00      	nop
 81085e2:	370c      	adds	r7, #12
 81085e4:	46bd      	mov	sp, r7
 81085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085ea:	4770      	bx	lr
 81085ec:	58026400 	.word	0x58026400

081085f0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81085f0:	b480      	push	{r7}
 81085f2:	b083      	sub	sp, #12
 81085f4:	af00      	add	r7, sp, #0
 81085f6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81085f8:	4b05      	ldr	r3, [pc, #20]	; (8108610 <HAL_HSEM_ActivateNotification+0x20>)
 81085fa:	681a      	ldr	r2, [r3, #0]
 81085fc:	4904      	ldr	r1, [pc, #16]	; (8108610 <HAL_HSEM_ActivateNotification+0x20>)
 81085fe:	687b      	ldr	r3, [r7, #4]
 8108600:	4313      	orrs	r3, r2
 8108602:	600b      	str	r3, [r1, #0]
#endif
}
 8108604:	bf00      	nop
 8108606:	370c      	adds	r7, #12
 8108608:	46bd      	mov	sp, r7
 810860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810860e:	4770      	bx	lr
 8108610:	58026510 	.word	0x58026510

08108614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8108614:	b580      	push	{r7, lr}
 8108616:	b082      	sub	sp, #8
 8108618:	af00      	add	r7, sp, #0
 810861a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810861c:	687b      	ldr	r3, [r7, #4]
 810861e:	2b00      	cmp	r3, #0
 8108620:	d101      	bne.n	8108626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8108622:	2301      	movs	r3, #1
 8108624:	e081      	b.n	810872a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8108626:	687b      	ldr	r3, [r7, #4]
 8108628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810862c:	b2db      	uxtb	r3, r3
 810862e:	2b00      	cmp	r3, #0
 8108630:	d106      	bne.n	8108640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8108632:	687b      	ldr	r3, [r7, #4]
 8108634:	2200      	movs	r2, #0
 8108636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810863a:	6878      	ldr	r0, [r7, #4]
 810863c:	f7f9 fc98 	bl	8101f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8108640:	687b      	ldr	r3, [r7, #4]
 8108642:	2224      	movs	r2, #36	; 0x24
 8108644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8108648:	687b      	ldr	r3, [r7, #4]
 810864a:	681b      	ldr	r3, [r3, #0]
 810864c:	681a      	ldr	r2, [r3, #0]
 810864e:	687b      	ldr	r3, [r7, #4]
 8108650:	681b      	ldr	r3, [r3, #0]
 8108652:	f022 0201 	bic.w	r2, r2, #1
 8108656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	685a      	ldr	r2, [r3, #4]
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	681b      	ldr	r3, [r3, #0]
 8108660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8108664:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	681b      	ldr	r3, [r3, #0]
 810866a:	689a      	ldr	r2, [r3, #8]
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	681b      	ldr	r3, [r3, #0]
 8108670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8108674:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8108676:	687b      	ldr	r3, [r7, #4]
 8108678:	68db      	ldr	r3, [r3, #12]
 810867a:	2b01      	cmp	r3, #1
 810867c:	d107      	bne.n	810868e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810867e:	687b      	ldr	r3, [r7, #4]
 8108680:	689a      	ldr	r2, [r3, #8]
 8108682:	687b      	ldr	r3, [r7, #4]
 8108684:	681b      	ldr	r3, [r3, #0]
 8108686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810868a:	609a      	str	r2, [r3, #8]
 810868c:	e006      	b.n	810869c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810868e:	687b      	ldr	r3, [r7, #4]
 8108690:	689a      	ldr	r2, [r3, #8]
 8108692:	687b      	ldr	r3, [r7, #4]
 8108694:	681b      	ldr	r3, [r3, #0]
 8108696:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810869a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810869c:	687b      	ldr	r3, [r7, #4]
 810869e:	68db      	ldr	r3, [r3, #12]
 81086a0:	2b02      	cmp	r3, #2
 81086a2:	d104      	bne.n	81086ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81086a4:	687b      	ldr	r3, [r7, #4]
 81086a6:	681b      	ldr	r3, [r3, #0]
 81086a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81086ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81086ae:	687b      	ldr	r3, [r7, #4]
 81086b0:	681b      	ldr	r3, [r3, #0]
 81086b2:	685b      	ldr	r3, [r3, #4]
 81086b4:	687a      	ldr	r2, [r7, #4]
 81086b6:	6812      	ldr	r2, [r2, #0]
 81086b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81086bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81086c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81086c2:	687b      	ldr	r3, [r7, #4]
 81086c4:	681b      	ldr	r3, [r3, #0]
 81086c6:	68da      	ldr	r2, [r3, #12]
 81086c8:	687b      	ldr	r3, [r7, #4]
 81086ca:	681b      	ldr	r3, [r3, #0]
 81086cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81086d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81086d2:	687b      	ldr	r3, [r7, #4]
 81086d4:	691a      	ldr	r2, [r3, #16]
 81086d6:	687b      	ldr	r3, [r7, #4]
 81086d8:	695b      	ldr	r3, [r3, #20]
 81086da:	ea42 0103 	orr.w	r1, r2, r3
 81086de:	687b      	ldr	r3, [r7, #4]
 81086e0:	699b      	ldr	r3, [r3, #24]
 81086e2:	021a      	lsls	r2, r3, #8
 81086e4:	687b      	ldr	r3, [r7, #4]
 81086e6:	681b      	ldr	r3, [r3, #0]
 81086e8:	430a      	orrs	r2, r1
 81086ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81086ec:	687b      	ldr	r3, [r7, #4]
 81086ee:	69d9      	ldr	r1, [r3, #28]
 81086f0:	687b      	ldr	r3, [r7, #4]
 81086f2:	6a1a      	ldr	r2, [r3, #32]
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	681b      	ldr	r3, [r3, #0]
 81086f8:	430a      	orrs	r2, r1
 81086fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	681b      	ldr	r3, [r3, #0]
 8108700:	681a      	ldr	r2, [r3, #0]
 8108702:	687b      	ldr	r3, [r7, #4]
 8108704:	681b      	ldr	r3, [r3, #0]
 8108706:	f042 0201 	orr.w	r2, r2, #1
 810870a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810870c:	687b      	ldr	r3, [r7, #4]
 810870e:	2200      	movs	r2, #0
 8108710:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8108712:	687b      	ldr	r3, [r7, #4]
 8108714:	2220      	movs	r2, #32
 8108716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810871a:	687b      	ldr	r3, [r7, #4]
 810871c:	2200      	movs	r2, #0
 810871e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8108720:	687b      	ldr	r3, [r7, #4]
 8108722:	2200      	movs	r2, #0
 8108724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8108728:	2300      	movs	r3, #0
}
 810872a:	4618      	mov	r0, r3
 810872c:	3708      	adds	r7, #8
 810872e:	46bd      	mov	sp, r7
 8108730:	bd80      	pop	{r7, pc}
	...

08108734 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8108734:	b580      	push	{r7, lr}
 8108736:	b088      	sub	sp, #32
 8108738:	af02      	add	r7, sp, #8
 810873a:	60f8      	str	r0, [r7, #12]
 810873c:	4608      	mov	r0, r1
 810873e:	4611      	mov	r1, r2
 8108740:	461a      	mov	r2, r3
 8108742:	4603      	mov	r3, r0
 8108744:	817b      	strh	r3, [r7, #10]
 8108746:	460b      	mov	r3, r1
 8108748:	813b      	strh	r3, [r7, #8]
 810874a:	4613      	mov	r3, r2
 810874c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810874e:	68fb      	ldr	r3, [r7, #12]
 8108750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108754:	b2db      	uxtb	r3, r3
 8108756:	2b20      	cmp	r3, #32
 8108758:	f040 80f9 	bne.w	810894e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 810875c:	6a3b      	ldr	r3, [r7, #32]
 810875e:	2b00      	cmp	r3, #0
 8108760:	d002      	beq.n	8108768 <HAL_I2C_Mem_Write+0x34>
 8108762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8108764:	2b00      	cmp	r3, #0
 8108766:	d105      	bne.n	8108774 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8108768:	68fb      	ldr	r3, [r7, #12]
 810876a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810876e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8108770:	2301      	movs	r3, #1
 8108772:	e0ed      	b.n	8108950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108774:	68fb      	ldr	r3, [r7, #12]
 8108776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810877a:	2b01      	cmp	r3, #1
 810877c:	d101      	bne.n	8108782 <HAL_I2C_Mem_Write+0x4e>
 810877e:	2302      	movs	r3, #2
 8108780:	e0e6      	b.n	8108950 <HAL_I2C_Mem_Write+0x21c>
 8108782:	68fb      	ldr	r3, [r7, #12]
 8108784:	2201      	movs	r2, #1
 8108786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810878a:	f7fb f9b1 	bl	8103af0 <HAL_GetTick>
 810878e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8108790:	697b      	ldr	r3, [r7, #20]
 8108792:	9300      	str	r3, [sp, #0]
 8108794:	2319      	movs	r3, #25
 8108796:	2201      	movs	r2, #1
 8108798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810879c:	68f8      	ldr	r0, [r7, #12]
 810879e:	f001 f8c6 	bl	810992e <I2C_WaitOnFlagUntilTimeout>
 81087a2:	4603      	mov	r3, r0
 81087a4:	2b00      	cmp	r3, #0
 81087a6:	d001      	beq.n	81087ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81087a8:	2301      	movs	r3, #1
 81087aa:	e0d1      	b.n	8108950 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81087ac:	68fb      	ldr	r3, [r7, #12]
 81087ae:	2221      	movs	r2, #33	; 0x21
 81087b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81087b4:	68fb      	ldr	r3, [r7, #12]
 81087b6:	2240      	movs	r2, #64	; 0x40
 81087b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81087bc:	68fb      	ldr	r3, [r7, #12]
 81087be:	2200      	movs	r2, #0
 81087c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81087c2:	68fb      	ldr	r3, [r7, #12]
 81087c4:	6a3a      	ldr	r2, [r7, #32]
 81087c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81087c8:	68fb      	ldr	r3, [r7, #12]
 81087ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81087cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81087ce:	68fb      	ldr	r3, [r7, #12]
 81087d0:	2200      	movs	r2, #0
 81087d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81087d4:	88f8      	ldrh	r0, [r7, #6]
 81087d6:	893a      	ldrh	r2, [r7, #8]
 81087d8:	8979      	ldrh	r1, [r7, #10]
 81087da:	697b      	ldr	r3, [r7, #20]
 81087dc:	9301      	str	r3, [sp, #4]
 81087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81087e0:	9300      	str	r3, [sp, #0]
 81087e2:	4603      	mov	r3, r0
 81087e4:	68f8      	ldr	r0, [r7, #12]
 81087e6:	f000 fb91 	bl	8108f0c <I2C_RequestMemoryWrite>
 81087ea:	4603      	mov	r3, r0
 81087ec:	2b00      	cmp	r3, #0
 81087ee:	d005      	beq.n	81087fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81087f0:	68fb      	ldr	r3, [r7, #12]
 81087f2:	2200      	movs	r2, #0
 81087f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81087f8:	2301      	movs	r3, #1
 81087fa:	e0a9      	b.n	8108950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81087fc:	68fb      	ldr	r3, [r7, #12]
 81087fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108800:	b29b      	uxth	r3, r3
 8108802:	2bff      	cmp	r3, #255	; 0xff
 8108804:	d90e      	bls.n	8108824 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8108806:	68fb      	ldr	r3, [r7, #12]
 8108808:	22ff      	movs	r2, #255	; 0xff
 810880a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810880c:	68fb      	ldr	r3, [r7, #12]
 810880e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108810:	b2da      	uxtb	r2, r3
 8108812:	8979      	ldrh	r1, [r7, #10]
 8108814:	2300      	movs	r3, #0
 8108816:	9300      	str	r3, [sp, #0]
 8108818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810881c:	68f8      	ldr	r0, [r7, #12]
 810881e:	f001 f9a9 	bl	8109b74 <I2C_TransferConfig>
 8108822:	e00f      	b.n	8108844 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8108824:	68fb      	ldr	r3, [r7, #12]
 8108826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108828:	b29a      	uxth	r2, r3
 810882a:	68fb      	ldr	r3, [r7, #12]
 810882c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810882e:	68fb      	ldr	r3, [r7, #12]
 8108830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108832:	b2da      	uxtb	r2, r3
 8108834:	8979      	ldrh	r1, [r7, #10]
 8108836:	2300      	movs	r3, #0
 8108838:	9300      	str	r3, [sp, #0]
 810883a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810883e:	68f8      	ldr	r0, [r7, #12]
 8108840:	f001 f998 	bl	8109b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8108844:	697a      	ldr	r2, [r7, #20]
 8108846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108848:	68f8      	ldr	r0, [r7, #12]
 810884a:	f001 f8b0 	bl	81099ae <I2C_WaitOnTXISFlagUntilTimeout>
 810884e:	4603      	mov	r3, r0
 8108850:	2b00      	cmp	r3, #0
 8108852:	d001      	beq.n	8108858 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8108854:	2301      	movs	r3, #1
 8108856:	e07b      	b.n	8108950 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8108858:	68fb      	ldr	r3, [r7, #12]
 810885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810885c:	781a      	ldrb	r2, [r3, #0]
 810885e:	68fb      	ldr	r3, [r7, #12]
 8108860:	681b      	ldr	r3, [r3, #0]
 8108862:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8108864:	68fb      	ldr	r3, [r7, #12]
 8108866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108868:	1c5a      	adds	r2, r3, #1
 810886a:	68fb      	ldr	r3, [r7, #12]
 810886c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810886e:	68fb      	ldr	r3, [r7, #12]
 8108870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108872:	b29b      	uxth	r3, r3
 8108874:	3b01      	subs	r3, #1
 8108876:	b29a      	uxth	r2, r3
 8108878:	68fb      	ldr	r3, [r7, #12]
 810887a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 810887c:	68fb      	ldr	r3, [r7, #12]
 810887e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108880:	3b01      	subs	r3, #1
 8108882:	b29a      	uxth	r2, r3
 8108884:	68fb      	ldr	r3, [r7, #12]
 8108886:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8108888:	68fb      	ldr	r3, [r7, #12]
 810888a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810888c:	b29b      	uxth	r3, r3
 810888e:	2b00      	cmp	r3, #0
 8108890:	d034      	beq.n	81088fc <HAL_I2C_Mem_Write+0x1c8>
 8108892:	68fb      	ldr	r3, [r7, #12]
 8108894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108896:	2b00      	cmp	r3, #0
 8108898:	d130      	bne.n	81088fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810889a:	697b      	ldr	r3, [r7, #20]
 810889c:	9300      	str	r3, [sp, #0]
 810889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088a0:	2200      	movs	r2, #0
 81088a2:	2180      	movs	r1, #128	; 0x80
 81088a4:	68f8      	ldr	r0, [r7, #12]
 81088a6:	f001 f842 	bl	810992e <I2C_WaitOnFlagUntilTimeout>
 81088aa:	4603      	mov	r3, r0
 81088ac:	2b00      	cmp	r3, #0
 81088ae:	d001      	beq.n	81088b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81088b0:	2301      	movs	r3, #1
 81088b2:	e04d      	b.n	8108950 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81088b4:	68fb      	ldr	r3, [r7, #12]
 81088b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81088b8:	b29b      	uxth	r3, r3
 81088ba:	2bff      	cmp	r3, #255	; 0xff
 81088bc:	d90e      	bls.n	81088dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81088be:	68fb      	ldr	r3, [r7, #12]
 81088c0:	22ff      	movs	r2, #255	; 0xff
 81088c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81088c4:	68fb      	ldr	r3, [r7, #12]
 81088c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81088c8:	b2da      	uxtb	r2, r3
 81088ca:	8979      	ldrh	r1, [r7, #10]
 81088cc:	2300      	movs	r3, #0
 81088ce:	9300      	str	r3, [sp, #0]
 81088d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81088d4:	68f8      	ldr	r0, [r7, #12]
 81088d6:	f001 f94d 	bl	8109b74 <I2C_TransferConfig>
 81088da:	e00f      	b.n	81088fc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81088dc:	68fb      	ldr	r3, [r7, #12]
 81088de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81088e0:	b29a      	uxth	r2, r3
 81088e2:	68fb      	ldr	r3, [r7, #12]
 81088e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81088e6:	68fb      	ldr	r3, [r7, #12]
 81088e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81088ea:	b2da      	uxtb	r2, r3
 81088ec:	8979      	ldrh	r1, [r7, #10]
 81088ee:	2300      	movs	r3, #0
 81088f0:	9300      	str	r3, [sp, #0]
 81088f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81088f6:	68f8      	ldr	r0, [r7, #12]
 81088f8:	f001 f93c 	bl	8109b74 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 81088fc:	68fb      	ldr	r3, [r7, #12]
 81088fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108900:	b29b      	uxth	r3, r3
 8108902:	2b00      	cmp	r3, #0
 8108904:	d19e      	bne.n	8108844 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8108906:	697a      	ldr	r2, [r7, #20]
 8108908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810890a:	68f8      	ldr	r0, [r7, #12]
 810890c:	f001 f88f 	bl	8109a2e <I2C_WaitOnSTOPFlagUntilTimeout>
 8108910:	4603      	mov	r3, r0
 8108912:	2b00      	cmp	r3, #0
 8108914:	d001      	beq.n	810891a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8108916:	2301      	movs	r3, #1
 8108918:	e01a      	b.n	8108950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810891a:	68fb      	ldr	r3, [r7, #12]
 810891c:	681b      	ldr	r3, [r3, #0]
 810891e:	2220      	movs	r2, #32
 8108920:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8108922:	68fb      	ldr	r3, [r7, #12]
 8108924:	681b      	ldr	r3, [r3, #0]
 8108926:	6859      	ldr	r1, [r3, #4]
 8108928:	68fb      	ldr	r3, [r7, #12]
 810892a:	681a      	ldr	r2, [r3, #0]
 810892c:	4b0a      	ldr	r3, [pc, #40]	; (8108958 <HAL_I2C_Mem_Write+0x224>)
 810892e:	400b      	ands	r3, r1
 8108930:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8108932:	68fb      	ldr	r3, [r7, #12]
 8108934:	2220      	movs	r2, #32
 8108936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810893a:	68fb      	ldr	r3, [r7, #12]
 810893c:	2200      	movs	r2, #0
 810893e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108942:	68fb      	ldr	r3, [r7, #12]
 8108944:	2200      	movs	r2, #0
 8108946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810894a:	2300      	movs	r3, #0
 810894c:	e000      	b.n	8108950 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 810894e:	2302      	movs	r3, #2
  }
}
 8108950:	4618      	mov	r0, r3
 8108952:	3718      	adds	r7, #24
 8108954:	46bd      	mov	sp, r7
 8108956:	bd80      	pop	{r7, pc}
 8108958:	fe00e800 	.word	0xfe00e800

0810895c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810895c:	b580      	push	{r7, lr}
 810895e:	b088      	sub	sp, #32
 8108960:	af02      	add	r7, sp, #8
 8108962:	60f8      	str	r0, [r7, #12]
 8108964:	4608      	mov	r0, r1
 8108966:	4611      	mov	r1, r2
 8108968:	461a      	mov	r2, r3
 810896a:	4603      	mov	r3, r0
 810896c:	817b      	strh	r3, [r7, #10]
 810896e:	460b      	mov	r3, r1
 8108970:	813b      	strh	r3, [r7, #8]
 8108972:	4613      	mov	r3, r2
 8108974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108976:	68fb      	ldr	r3, [r7, #12]
 8108978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810897c:	b2db      	uxtb	r3, r3
 810897e:	2b20      	cmp	r3, #32
 8108980:	f040 80fd 	bne.w	8108b7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8108984:	6a3b      	ldr	r3, [r7, #32]
 8108986:	2b00      	cmp	r3, #0
 8108988:	d002      	beq.n	8108990 <HAL_I2C_Mem_Read+0x34>
 810898a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810898c:	2b00      	cmp	r3, #0
 810898e:	d105      	bne.n	810899c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8108990:	68fb      	ldr	r3, [r7, #12]
 8108992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8108996:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8108998:	2301      	movs	r3, #1
 810899a:	e0f1      	b.n	8108b80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810899c:	68fb      	ldr	r3, [r7, #12]
 810899e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81089a2:	2b01      	cmp	r3, #1
 81089a4:	d101      	bne.n	81089aa <HAL_I2C_Mem_Read+0x4e>
 81089a6:	2302      	movs	r3, #2
 81089a8:	e0ea      	b.n	8108b80 <HAL_I2C_Mem_Read+0x224>
 81089aa:	68fb      	ldr	r3, [r7, #12]
 81089ac:	2201      	movs	r2, #1
 81089ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81089b2:	f7fb f89d 	bl	8103af0 <HAL_GetTick>
 81089b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81089b8:	697b      	ldr	r3, [r7, #20]
 81089ba:	9300      	str	r3, [sp, #0]
 81089bc:	2319      	movs	r3, #25
 81089be:	2201      	movs	r2, #1
 81089c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81089c4:	68f8      	ldr	r0, [r7, #12]
 81089c6:	f000 ffb2 	bl	810992e <I2C_WaitOnFlagUntilTimeout>
 81089ca:	4603      	mov	r3, r0
 81089cc:	2b00      	cmp	r3, #0
 81089ce:	d001      	beq.n	81089d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81089d0:	2301      	movs	r3, #1
 81089d2:	e0d5      	b.n	8108b80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81089d4:	68fb      	ldr	r3, [r7, #12]
 81089d6:	2222      	movs	r2, #34	; 0x22
 81089d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81089dc:	68fb      	ldr	r3, [r7, #12]
 81089de:	2240      	movs	r2, #64	; 0x40
 81089e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81089e4:	68fb      	ldr	r3, [r7, #12]
 81089e6:	2200      	movs	r2, #0
 81089e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81089ea:	68fb      	ldr	r3, [r7, #12]
 81089ec:	6a3a      	ldr	r2, [r7, #32]
 81089ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81089f0:	68fb      	ldr	r3, [r7, #12]
 81089f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81089f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81089f6:	68fb      	ldr	r3, [r7, #12]
 81089f8:	2200      	movs	r2, #0
 81089fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81089fc:	88f8      	ldrh	r0, [r7, #6]
 81089fe:	893a      	ldrh	r2, [r7, #8]
 8108a00:	8979      	ldrh	r1, [r7, #10]
 8108a02:	697b      	ldr	r3, [r7, #20]
 8108a04:	9301      	str	r3, [sp, #4]
 8108a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a08:	9300      	str	r3, [sp, #0]
 8108a0a:	4603      	mov	r3, r0
 8108a0c:	68f8      	ldr	r0, [r7, #12]
 8108a0e:	f000 fad1 	bl	8108fb4 <I2C_RequestMemoryRead>
 8108a12:	4603      	mov	r3, r0
 8108a14:	2b00      	cmp	r3, #0
 8108a16:	d005      	beq.n	8108a24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8108a18:	68fb      	ldr	r3, [r7, #12]
 8108a1a:	2200      	movs	r2, #0
 8108a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8108a20:	2301      	movs	r3, #1
 8108a22:	e0ad      	b.n	8108b80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8108a24:	68fb      	ldr	r3, [r7, #12]
 8108a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108a28:	b29b      	uxth	r3, r3
 8108a2a:	2bff      	cmp	r3, #255	; 0xff
 8108a2c:	d90e      	bls.n	8108a4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8108a2e:	68fb      	ldr	r3, [r7, #12]
 8108a30:	22ff      	movs	r2, #255	; 0xff
 8108a32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8108a34:	68fb      	ldr	r3, [r7, #12]
 8108a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108a38:	b2da      	uxtb	r2, r3
 8108a3a:	8979      	ldrh	r1, [r7, #10]
 8108a3c:	4b52      	ldr	r3, [pc, #328]	; (8108b88 <HAL_I2C_Mem_Read+0x22c>)
 8108a3e:	9300      	str	r3, [sp, #0]
 8108a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8108a44:	68f8      	ldr	r0, [r7, #12]
 8108a46:	f001 f895 	bl	8109b74 <I2C_TransferConfig>
 8108a4a:	e00f      	b.n	8108a6c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8108a4c:	68fb      	ldr	r3, [r7, #12]
 8108a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108a50:	b29a      	uxth	r2, r3
 8108a52:	68fb      	ldr	r3, [r7, #12]
 8108a54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8108a56:	68fb      	ldr	r3, [r7, #12]
 8108a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108a5a:	b2da      	uxtb	r2, r3
 8108a5c:	8979      	ldrh	r1, [r7, #10]
 8108a5e:	4b4a      	ldr	r3, [pc, #296]	; (8108b88 <HAL_I2C_Mem_Read+0x22c>)
 8108a60:	9300      	str	r3, [sp, #0]
 8108a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8108a66:	68f8      	ldr	r0, [r7, #12]
 8108a68:	f001 f884 	bl	8109b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8108a6c:	697b      	ldr	r3, [r7, #20]
 8108a6e:	9300      	str	r3, [sp, #0]
 8108a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a72:	2200      	movs	r2, #0
 8108a74:	2104      	movs	r1, #4
 8108a76:	68f8      	ldr	r0, [r7, #12]
 8108a78:	f000 ff59 	bl	810992e <I2C_WaitOnFlagUntilTimeout>
 8108a7c:	4603      	mov	r3, r0
 8108a7e:	2b00      	cmp	r3, #0
 8108a80:	d001      	beq.n	8108a86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8108a82:	2301      	movs	r3, #1
 8108a84:	e07c      	b.n	8108b80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8108a86:	68fb      	ldr	r3, [r7, #12]
 8108a88:	681b      	ldr	r3, [r3, #0]
 8108a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108a8c:	68fb      	ldr	r3, [r7, #12]
 8108a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a90:	b2d2      	uxtb	r2, r2
 8108a92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8108a94:	68fb      	ldr	r3, [r7, #12]
 8108a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a98:	1c5a      	adds	r2, r3, #1
 8108a9a:	68fb      	ldr	r3, [r7, #12]
 8108a9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8108a9e:	68fb      	ldr	r3, [r7, #12]
 8108aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108aa2:	3b01      	subs	r3, #1
 8108aa4:	b29a      	uxth	r2, r3
 8108aa6:	68fb      	ldr	r3, [r7, #12]
 8108aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8108aaa:	68fb      	ldr	r3, [r7, #12]
 8108aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108aae:	b29b      	uxth	r3, r3
 8108ab0:	3b01      	subs	r3, #1
 8108ab2:	b29a      	uxth	r2, r3
 8108ab4:	68fb      	ldr	r3, [r7, #12]
 8108ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8108ab8:	68fb      	ldr	r3, [r7, #12]
 8108aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108abc:	b29b      	uxth	r3, r3
 8108abe:	2b00      	cmp	r3, #0
 8108ac0:	d034      	beq.n	8108b2c <HAL_I2C_Mem_Read+0x1d0>
 8108ac2:	68fb      	ldr	r3, [r7, #12]
 8108ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108ac6:	2b00      	cmp	r3, #0
 8108ac8:	d130      	bne.n	8108b2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8108aca:	697b      	ldr	r3, [r7, #20]
 8108acc:	9300      	str	r3, [sp, #0]
 8108ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ad0:	2200      	movs	r2, #0
 8108ad2:	2180      	movs	r1, #128	; 0x80
 8108ad4:	68f8      	ldr	r0, [r7, #12]
 8108ad6:	f000 ff2a 	bl	810992e <I2C_WaitOnFlagUntilTimeout>
 8108ada:	4603      	mov	r3, r0
 8108adc:	2b00      	cmp	r3, #0
 8108ade:	d001      	beq.n	8108ae4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8108ae0:	2301      	movs	r3, #1
 8108ae2:	e04d      	b.n	8108b80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8108ae4:	68fb      	ldr	r3, [r7, #12]
 8108ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108ae8:	b29b      	uxth	r3, r3
 8108aea:	2bff      	cmp	r3, #255	; 0xff
 8108aec:	d90e      	bls.n	8108b0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8108aee:	68fb      	ldr	r3, [r7, #12]
 8108af0:	22ff      	movs	r2, #255	; 0xff
 8108af2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8108af4:	68fb      	ldr	r3, [r7, #12]
 8108af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108af8:	b2da      	uxtb	r2, r3
 8108afa:	8979      	ldrh	r1, [r7, #10]
 8108afc:	2300      	movs	r3, #0
 8108afe:	9300      	str	r3, [sp, #0]
 8108b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8108b04:	68f8      	ldr	r0, [r7, #12]
 8108b06:	f001 f835 	bl	8109b74 <I2C_TransferConfig>
 8108b0a:	e00f      	b.n	8108b2c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8108b0c:	68fb      	ldr	r3, [r7, #12]
 8108b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108b10:	b29a      	uxth	r2, r3
 8108b12:	68fb      	ldr	r3, [r7, #12]
 8108b14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8108b16:	68fb      	ldr	r3, [r7, #12]
 8108b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108b1a:	b2da      	uxtb	r2, r3
 8108b1c:	8979      	ldrh	r1, [r7, #10]
 8108b1e:	2300      	movs	r3, #0
 8108b20:	9300      	str	r3, [sp, #0]
 8108b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8108b26:	68f8      	ldr	r0, [r7, #12]
 8108b28:	f001 f824 	bl	8109b74 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8108b2c:	68fb      	ldr	r3, [r7, #12]
 8108b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108b30:	b29b      	uxth	r3, r3
 8108b32:	2b00      	cmp	r3, #0
 8108b34:	d19a      	bne.n	8108a6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8108b36:	697a      	ldr	r2, [r7, #20]
 8108b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108b3a:	68f8      	ldr	r0, [r7, #12]
 8108b3c:	f000 ff77 	bl	8109a2e <I2C_WaitOnSTOPFlagUntilTimeout>
 8108b40:	4603      	mov	r3, r0
 8108b42:	2b00      	cmp	r3, #0
 8108b44:	d001      	beq.n	8108b4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8108b46:	2301      	movs	r3, #1
 8108b48:	e01a      	b.n	8108b80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8108b4a:	68fb      	ldr	r3, [r7, #12]
 8108b4c:	681b      	ldr	r3, [r3, #0]
 8108b4e:	2220      	movs	r2, #32
 8108b50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8108b52:	68fb      	ldr	r3, [r7, #12]
 8108b54:	681b      	ldr	r3, [r3, #0]
 8108b56:	6859      	ldr	r1, [r3, #4]
 8108b58:	68fb      	ldr	r3, [r7, #12]
 8108b5a:	681a      	ldr	r2, [r3, #0]
 8108b5c:	4b0b      	ldr	r3, [pc, #44]	; (8108b8c <HAL_I2C_Mem_Read+0x230>)
 8108b5e:	400b      	ands	r3, r1
 8108b60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8108b62:	68fb      	ldr	r3, [r7, #12]
 8108b64:	2220      	movs	r2, #32
 8108b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8108b6a:	68fb      	ldr	r3, [r7, #12]
 8108b6c:	2200      	movs	r2, #0
 8108b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108b72:	68fb      	ldr	r3, [r7, #12]
 8108b74:	2200      	movs	r2, #0
 8108b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108b7a:	2300      	movs	r3, #0
 8108b7c:	e000      	b.n	8108b80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8108b7e:	2302      	movs	r3, #2
  }
}
 8108b80:	4618      	mov	r0, r3
 8108b82:	3718      	adds	r7, #24
 8108b84:	46bd      	mov	sp, r7
 8108b86:	bd80      	pop	{r7, pc}
 8108b88:	80002400 	.word	0x80002400
 8108b8c:	fe00e800 	.word	0xfe00e800

08108b90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8108b90:	b580      	push	{r7, lr}
 8108b92:	b084      	sub	sp, #16
 8108b94:	af00      	add	r7, sp, #0
 8108b96:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8108b98:	687b      	ldr	r3, [r7, #4]
 8108b9a:	681b      	ldr	r3, [r3, #0]
 8108b9c:	699b      	ldr	r3, [r3, #24]
 8108b9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	681b      	ldr	r3, [r3, #0]
 8108ba4:	681b      	ldr	r3, [r3, #0]
 8108ba6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8108ba8:	687b      	ldr	r3, [r7, #4]
 8108baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108bac:	2b00      	cmp	r3, #0
 8108bae:	d005      	beq.n	8108bbc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8108bb0:	687b      	ldr	r3, [r7, #4]
 8108bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108bb4:	68ba      	ldr	r2, [r7, #8]
 8108bb6:	68f9      	ldr	r1, [r7, #12]
 8108bb8:	6878      	ldr	r0, [r7, #4]
 8108bba:	4798      	blx	r3
  }
}
 8108bbc:	bf00      	nop
 8108bbe:	3710      	adds	r7, #16
 8108bc0:	46bd      	mov	sp, r7
 8108bc2:	bd80      	pop	{r7, pc}

08108bc4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8108bc4:	b580      	push	{r7, lr}
 8108bc6:	b086      	sub	sp, #24
 8108bc8:	af00      	add	r7, sp, #0
 8108bca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8108bcc:	687b      	ldr	r3, [r7, #4]
 8108bce:	681b      	ldr	r3, [r3, #0]
 8108bd0:	699b      	ldr	r3, [r3, #24]
 8108bd2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8108bd4:	687b      	ldr	r3, [r7, #4]
 8108bd6:	681b      	ldr	r3, [r3, #0]
 8108bd8:	681b      	ldr	r3, [r3, #0]
 8108bda:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8108bdc:	697b      	ldr	r3, [r7, #20]
 8108bde:	0a1b      	lsrs	r3, r3, #8
 8108be0:	f003 0301 	and.w	r3, r3, #1
 8108be4:	2b00      	cmp	r3, #0
 8108be6:	d010      	beq.n	8108c0a <HAL_I2C_ER_IRQHandler+0x46>
 8108be8:	693b      	ldr	r3, [r7, #16]
 8108bea:	09db      	lsrs	r3, r3, #7
 8108bec:	f003 0301 	and.w	r3, r3, #1
 8108bf0:	2b00      	cmp	r3, #0
 8108bf2:	d00a      	beq.n	8108c0a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8108bf4:	687b      	ldr	r3, [r7, #4]
 8108bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108bf8:	f043 0201 	orr.w	r2, r3, #1
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8108c00:	687b      	ldr	r3, [r7, #4]
 8108c02:	681b      	ldr	r3, [r3, #0]
 8108c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8108c08:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8108c0a:	697b      	ldr	r3, [r7, #20]
 8108c0c:	0a9b      	lsrs	r3, r3, #10
 8108c0e:	f003 0301 	and.w	r3, r3, #1
 8108c12:	2b00      	cmp	r3, #0
 8108c14:	d010      	beq.n	8108c38 <HAL_I2C_ER_IRQHandler+0x74>
 8108c16:	693b      	ldr	r3, [r7, #16]
 8108c18:	09db      	lsrs	r3, r3, #7
 8108c1a:	f003 0301 	and.w	r3, r3, #1
 8108c1e:	2b00      	cmp	r3, #0
 8108c20:	d00a      	beq.n	8108c38 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8108c22:	687b      	ldr	r3, [r7, #4]
 8108c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c26:	f043 0208 	orr.w	r2, r3, #8
 8108c2a:	687b      	ldr	r3, [r7, #4]
 8108c2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8108c2e:	687b      	ldr	r3, [r7, #4]
 8108c30:	681b      	ldr	r3, [r3, #0]
 8108c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8108c36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8108c38:	697b      	ldr	r3, [r7, #20]
 8108c3a:	0a5b      	lsrs	r3, r3, #9
 8108c3c:	f003 0301 	and.w	r3, r3, #1
 8108c40:	2b00      	cmp	r3, #0
 8108c42:	d010      	beq.n	8108c66 <HAL_I2C_ER_IRQHandler+0xa2>
 8108c44:	693b      	ldr	r3, [r7, #16]
 8108c46:	09db      	lsrs	r3, r3, #7
 8108c48:	f003 0301 	and.w	r3, r3, #1
 8108c4c:	2b00      	cmp	r3, #0
 8108c4e:	d00a      	beq.n	8108c66 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8108c50:	687b      	ldr	r3, [r7, #4]
 8108c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c54:	f043 0202 	orr.w	r2, r3, #2
 8108c58:	687b      	ldr	r3, [r7, #4]
 8108c5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8108c5c:	687b      	ldr	r3, [r7, #4]
 8108c5e:	681b      	ldr	r3, [r3, #0]
 8108c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8108c64:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8108c66:	687b      	ldr	r3, [r7, #4]
 8108c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c6a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8108c6c:	68fb      	ldr	r3, [r7, #12]
 8108c6e:	f003 030b 	and.w	r3, r3, #11
 8108c72:	2b00      	cmp	r3, #0
 8108c74:	d003      	beq.n	8108c7e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8108c76:	68f9      	ldr	r1, [r7, #12]
 8108c78:	6878      	ldr	r0, [r7, #4]
 8108c7a:	f000 fd1f 	bl	81096bc <I2C_ITError>
  }
}
 8108c7e:	bf00      	nop
 8108c80:	3718      	adds	r7, #24
 8108c82:	46bd      	mov	sp, r7
 8108c84:	bd80      	pop	{r7, pc}

08108c86 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8108c86:	b480      	push	{r7}
 8108c88:	b083      	sub	sp, #12
 8108c8a:	af00      	add	r7, sp, #0
 8108c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8108c8e:	bf00      	nop
 8108c90:	370c      	adds	r7, #12
 8108c92:	46bd      	mov	sp, r7
 8108c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c98:	4770      	bx	lr

08108c9a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8108c9a:	b480      	push	{r7}
 8108c9c:	b083      	sub	sp, #12
 8108c9e:	af00      	add	r7, sp, #0
 8108ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8108ca2:	bf00      	nop
 8108ca4:	370c      	adds	r7, #12
 8108ca6:	46bd      	mov	sp, r7
 8108ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cac:	4770      	bx	lr

08108cae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8108cae:	b480      	push	{r7}
 8108cb0:	b083      	sub	sp, #12
 8108cb2:	af00      	add	r7, sp, #0
 8108cb4:	6078      	str	r0, [r7, #4]
 8108cb6:	460b      	mov	r3, r1
 8108cb8:	70fb      	strb	r3, [r7, #3]
 8108cba:	4613      	mov	r3, r2
 8108cbc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8108cbe:	bf00      	nop
 8108cc0:	370c      	adds	r7, #12
 8108cc2:	46bd      	mov	sp, r7
 8108cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cc8:	4770      	bx	lr

08108cca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8108cca:	b480      	push	{r7}
 8108ccc:	b083      	sub	sp, #12
 8108cce:	af00      	add	r7, sp, #0
 8108cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8108cd2:	bf00      	nop
 8108cd4:	370c      	adds	r7, #12
 8108cd6:	46bd      	mov	sp, r7
 8108cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cdc:	4770      	bx	lr

08108cde <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8108cde:	b480      	push	{r7}
 8108ce0:	b083      	sub	sp, #12
 8108ce2:	af00      	add	r7, sp, #0
 8108ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8108ce6:	bf00      	nop
 8108ce8:	370c      	adds	r7, #12
 8108cea:	46bd      	mov	sp, r7
 8108cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cf0:	4770      	bx	lr

08108cf2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8108cf2:	b480      	push	{r7}
 8108cf4:	b083      	sub	sp, #12
 8108cf6:	af00      	add	r7, sp, #0
 8108cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8108cfa:	bf00      	nop
 8108cfc:	370c      	adds	r7, #12
 8108cfe:	46bd      	mov	sp, r7
 8108d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d04:	4770      	bx	lr

08108d06 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8108d06:	b580      	push	{r7, lr}
 8108d08:	b086      	sub	sp, #24
 8108d0a:	af00      	add	r7, sp, #0
 8108d0c:	60f8      	str	r0, [r7, #12]
 8108d0e:	60b9      	str	r1, [r7, #8]
 8108d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8108d12:	68fb      	ldr	r3, [r7, #12]
 8108d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108d16:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8108d18:	68bb      	ldr	r3, [r7, #8]
 8108d1a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8108d1c:	68fb      	ldr	r3, [r7, #12]
 8108d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108d22:	2b01      	cmp	r3, #1
 8108d24:	d101      	bne.n	8108d2a <I2C_Slave_ISR_IT+0x24>
 8108d26:	2302      	movs	r3, #2
 8108d28:	e0ec      	b.n	8108f04 <I2C_Slave_ISR_IT+0x1fe>
 8108d2a:	68fb      	ldr	r3, [r7, #12]
 8108d2c:	2201      	movs	r2, #1
 8108d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8108d32:	693b      	ldr	r3, [r7, #16]
 8108d34:	095b      	lsrs	r3, r3, #5
 8108d36:	f003 0301 	and.w	r3, r3, #1
 8108d3a:	2b00      	cmp	r3, #0
 8108d3c:	d009      	beq.n	8108d52 <I2C_Slave_ISR_IT+0x4c>
 8108d3e:	687b      	ldr	r3, [r7, #4]
 8108d40:	095b      	lsrs	r3, r3, #5
 8108d42:	f003 0301 	and.w	r3, r3, #1
 8108d46:	2b00      	cmp	r3, #0
 8108d48:	d003      	beq.n	8108d52 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8108d4a:	6939      	ldr	r1, [r7, #16]
 8108d4c:	68f8      	ldr	r0, [r7, #12]
 8108d4e:	f000 fa67 	bl	8109220 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8108d52:	693b      	ldr	r3, [r7, #16]
 8108d54:	091b      	lsrs	r3, r3, #4
 8108d56:	f003 0301 	and.w	r3, r3, #1
 8108d5a:	2b00      	cmp	r3, #0
 8108d5c:	d04d      	beq.n	8108dfa <I2C_Slave_ISR_IT+0xf4>
 8108d5e:	687b      	ldr	r3, [r7, #4]
 8108d60:	091b      	lsrs	r3, r3, #4
 8108d62:	f003 0301 	and.w	r3, r3, #1
 8108d66:	2b00      	cmp	r3, #0
 8108d68:	d047      	beq.n	8108dfa <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8108d6a:	68fb      	ldr	r3, [r7, #12]
 8108d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108d6e:	b29b      	uxth	r3, r3
 8108d70:	2b00      	cmp	r3, #0
 8108d72:	d128      	bne.n	8108dc6 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8108d74:	68fb      	ldr	r3, [r7, #12]
 8108d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108d7a:	b2db      	uxtb	r3, r3
 8108d7c:	2b28      	cmp	r3, #40	; 0x28
 8108d7e:	d108      	bne.n	8108d92 <I2C_Slave_ISR_IT+0x8c>
 8108d80:	697b      	ldr	r3, [r7, #20]
 8108d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108d86:	d104      	bne.n	8108d92 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8108d88:	6939      	ldr	r1, [r7, #16]
 8108d8a:	68f8      	ldr	r0, [r7, #12]
 8108d8c:	f000 fc40 	bl	8109610 <I2C_ITListenCplt>
 8108d90:	e032      	b.n	8108df8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8108d92:	68fb      	ldr	r3, [r7, #12]
 8108d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108d98:	b2db      	uxtb	r3, r3
 8108d9a:	2b29      	cmp	r3, #41	; 0x29
 8108d9c:	d10e      	bne.n	8108dbc <I2C_Slave_ISR_IT+0xb6>
 8108d9e:	697b      	ldr	r3, [r7, #20]
 8108da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8108da4:	d00a      	beq.n	8108dbc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108da6:	68fb      	ldr	r3, [r7, #12]
 8108da8:	681b      	ldr	r3, [r3, #0]
 8108daa:	2210      	movs	r2, #16
 8108dac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8108dae:	68f8      	ldr	r0, [r7, #12]
 8108db0:	f000 fd7b 	bl	81098aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8108db4:	68f8      	ldr	r0, [r7, #12]
 8108db6:	f000 f9d5 	bl	8109164 <I2C_ITSlaveSeqCplt>
 8108dba:	e01d      	b.n	8108df8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108dbc:	68fb      	ldr	r3, [r7, #12]
 8108dbe:	681b      	ldr	r3, [r3, #0]
 8108dc0:	2210      	movs	r2, #16
 8108dc2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8108dc4:	e096      	b.n	8108ef4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108dc6:	68fb      	ldr	r3, [r7, #12]
 8108dc8:	681b      	ldr	r3, [r3, #0]
 8108dca:	2210      	movs	r2, #16
 8108dcc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8108dce:	68fb      	ldr	r3, [r7, #12]
 8108dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108dd2:	f043 0204 	orr.w	r2, r3, #4
 8108dd6:	68fb      	ldr	r3, [r7, #12]
 8108dd8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8108dda:	697b      	ldr	r3, [r7, #20]
 8108ddc:	2b00      	cmp	r3, #0
 8108dde:	d004      	beq.n	8108dea <I2C_Slave_ISR_IT+0xe4>
 8108de0:	697b      	ldr	r3, [r7, #20]
 8108de2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8108de6:	f040 8085 	bne.w	8108ef4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8108dea:	68fb      	ldr	r3, [r7, #12]
 8108dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108dee:	4619      	mov	r1, r3
 8108df0:	68f8      	ldr	r0, [r7, #12]
 8108df2:	f000 fc63 	bl	81096bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8108df6:	e07d      	b.n	8108ef4 <I2C_Slave_ISR_IT+0x1ee>
 8108df8:	e07c      	b.n	8108ef4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8108dfa:	693b      	ldr	r3, [r7, #16]
 8108dfc:	089b      	lsrs	r3, r3, #2
 8108dfe:	f003 0301 	and.w	r3, r3, #1
 8108e02:	2b00      	cmp	r3, #0
 8108e04:	d030      	beq.n	8108e68 <I2C_Slave_ISR_IT+0x162>
 8108e06:	687b      	ldr	r3, [r7, #4]
 8108e08:	089b      	lsrs	r3, r3, #2
 8108e0a:	f003 0301 	and.w	r3, r3, #1
 8108e0e:	2b00      	cmp	r3, #0
 8108e10:	d02a      	beq.n	8108e68 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8108e12:	68fb      	ldr	r3, [r7, #12]
 8108e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108e16:	b29b      	uxth	r3, r3
 8108e18:	2b00      	cmp	r3, #0
 8108e1a:	d018      	beq.n	8108e4e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8108e1c:	68fb      	ldr	r3, [r7, #12]
 8108e1e:	681b      	ldr	r3, [r3, #0]
 8108e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108e22:	68fb      	ldr	r3, [r7, #12]
 8108e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e26:	b2d2      	uxtb	r2, r2
 8108e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8108e2a:	68fb      	ldr	r3, [r7, #12]
 8108e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e2e:	1c5a      	adds	r2, r3, #1
 8108e30:	68fb      	ldr	r3, [r7, #12]
 8108e32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8108e34:	68fb      	ldr	r3, [r7, #12]
 8108e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108e38:	3b01      	subs	r3, #1
 8108e3a:	b29a      	uxth	r2, r3
 8108e3c:	68fb      	ldr	r3, [r7, #12]
 8108e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8108e40:	68fb      	ldr	r3, [r7, #12]
 8108e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108e44:	b29b      	uxth	r3, r3
 8108e46:	3b01      	subs	r3, #1
 8108e48:	b29a      	uxth	r2, r3
 8108e4a:	68fb      	ldr	r3, [r7, #12]
 8108e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8108e4e:	68fb      	ldr	r3, [r7, #12]
 8108e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108e52:	b29b      	uxth	r3, r3
 8108e54:	2b00      	cmp	r3, #0
 8108e56:	d14f      	bne.n	8108ef8 <I2C_Slave_ISR_IT+0x1f2>
 8108e58:	697b      	ldr	r3, [r7, #20]
 8108e5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8108e5e:	d04b      	beq.n	8108ef8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8108e60:	68f8      	ldr	r0, [r7, #12]
 8108e62:	f000 f97f 	bl	8109164 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8108e66:	e047      	b.n	8108ef8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8108e68:	693b      	ldr	r3, [r7, #16]
 8108e6a:	08db      	lsrs	r3, r3, #3
 8108e6c:	f003 0301 	and.w	r3, r3, #1
 8108e70:	2b00      	cmp	r3, #0
 8108e72:	d00a      	beq.n	8108e8a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8108e74:	687b      	ldr	r3, [r7, #4]
 8108e76:	08db      	lsrs	r3, r3, #3
 8108e78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8108e7c:	2b00      	cmp	r3, #0
 8108e7e:	d004      	beq.n	8108e8a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8108e80:	6939      	ldr	r1, [r7, #16]
 8108e82:	68f8      	ldr	r0, [r7, #12]
 8108e84:	f000 f8ea 	bl	810905c <I2C_ITAddrCplt>
 8108e88:	e037      	b.n	8108efa <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8108e8a:	693b      	ldr	r3, [r7, #16]
 8108e8c:	085b      	lsrs	r3, r3, #1
 8108e8e:	f003 0301 	and.w	r3, r3, #1
 8108e92:	2b00      	cmp	r3, #0
 8108e94:	d031      	beq.n	8108efa <I2C_Slave_ISR_IT+0x1f4>
 8108e96:	687b      	ldr	r3, [r7, #4]
 8108e98:	085b      	lsrs	r3, r3, #1
 8108e9a:	f003 0301 	and.w	r3, r3, #1
 8108e9e:	2b00      	cmp	r3, #0
 8108ea0:	d02b      	beq.n	8108efa <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8108ea2:	68fb      	ldr	r3, [r7, #12]
 8108ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108ea6:	b29b      	uxth	r3, r3
 8108ea8:	2b00      	cmp	r3, #0
 8108eaa:	d018      	beq.n	8108ede <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8108eac:	68fb      	ldr	r3, [r7, #12]
 8108eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108eb0:	781a      	ldrb	r2, [r3, #0]
 8108eb2:	68fb      	ldr	r3, [r7, #12]
 8108eb4:	681b      	ldr	r3, [r3, #0]
 8108eb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8108eb8:	68fb      	ldr	r3, [r7, #12]
 8108eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108ebc:	1c5a      	adds	r2, r3, #1
 8108ebe:	68fb      	ldr	r3, [r7, #12]
 8108ec0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8108ec2:	68fb      	ldr	r3, [r7, #12]
 8108ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108ec6:	b29b      	uxth	r3, r3
 8108ec8:	3b01      	subs	r3, #1
 8108eca:	b29a      	uxth	r2, r3
 8108ecc:	68fb      	ldr	r3, [r7, #12]
 8108ece:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8108ed0:	68fb      	ldr	r3, [r7, #12]
 8108ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108ed4:	3b01      	subs	r3, #1
 8108ed6:	b29a      	uxth	r2, r3
 8108ed8:	68fb      	ldr	r3, [r7, #12]
 8108eda:	851a      	strh	r2, [r3, #40]	; 0x28
 8108edc:	e00d      	b.n	8108efa <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8108ede:	697b      	ldr	r3, [r7, #20]
 8108ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8108ee4:	d002      	beq.n	8108eec <I2C_Slave_ISR_IT+0x1e6>
 8108ee6:	697b      	ldr	r3, [r7, #20]
 8108ee8:	2b00      	cmp	r3, #0
 8108eea:	d106      	bne.n	8108efa <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8108eec:	68f8      	ldr	r0, [r7, #12]
 8108eee:	f000 f939 	bl	8109164 <I2C_ITSlaveSeqCplt>
 8108ef2:	e002      	b.n	8108efa <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8108ef4:	bf00      	nop
 8108ef6:	e000      	b.n	8108efa <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8108ef8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8108efa:	68fb      	ldr	r3, [r7, #12]
 8108efc:	2200      	movs	r2, #0
 8108efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8108f02:	2300      	movs	r3, #0
}
 8108f04:	4618      	mov	r0, r3
 8108f06:	3718      	adds	r7, #24
 8108f08:	46bd      	mov	sp, r7
 8108f0a:	bd80      	pop	{r7, pc}

08108f0c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8108f0c:	b580      	push	{r7, lr}
 8108f0e:	b086      	sub	sp, #24
 8108f10:	af02      	add	r7, sp, #8
 8108f12:	60f8      	str	r0, [r7, #12]
 8108f14:	4608      	mov	r0, r1
 8108f16:	4611      	mov	r1, r2
 8108f18:	461a      	mov	r2, r3
 8108f1a:	4603      	mov	r3, r0
 8108f1c:	817b      	strh	r3, [r7, #10]
 8108f1e:	460b      	mov	r3, r1
 8108f20:	813b      	strh	r3, [r7, #8]
 8108f22:	4613      	mov	r3, r2
 8108f24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8108f26:	88fb      	ldrh	r3, [r7, #6]
 8108f28:	b2da      	uxtb	r2, r3
 8108f2a:	8979      	ldrh	r1, [r7, #10]
 8108f2c:	4b20      	ldr	r3, [pc, #128]	; (8108fb0 <I2C_RequestMemoryWrite+0xa4>)
 8108f2e:	9300      	str	r3, [sp, #0]
 8108f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8108f34:	68f8      	ldr	r0, [r7, #12]
 8108f36:	f000 fe1d 	bl	8109b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8108f3a:	69fa      	ldr	r2, [r7, #28]
 8108f3c:	69b9      	ldr	r1, [r7, #24]
 8108f3e:	68f8      	ldr	r0, [r7, #12]
 8108f40:	f000 fd35 	bl	81099ae <I2C_WaitOnTXISFlagUntilTimeout>
 8108f44:	4603      	mov	r3, r0
 8108f46:	2b00      	cmp	r3, #0
 8108f48:	d001      	beq.n	8108f4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8108f4a:	2301      	movs	r3, #1
 8108f4c:	e02c      	b.n	8108fa8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8108f4e:	88fb      	ldrh	r3, [r7, #6]
 8108f50:	2b01      	cmp	r3, #1
 8108f52:	d105      	bne.n	8108f60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8108f54:	893b      	ldrh	r3, [r7, #8]
 8108f56:	b2da      	uxtb	r2, r3
 8108f58:	68fb      	ldr	r3, [r7, #12]
 8108f5a:	681b      	ldr	r3, [r3, #0]
 8108f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8108f5e:	e015      	b.n	8108f8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8108f60:	893b      	ldrh	r3, [r7, #8]
 8108f62:	0a1b      	lsrs	r3, r3, #8
 8108f64:	b29b      	uxth	r3, r3
 8108f66:	b2da      	uxtb	r2, r3
 8108f68:	68fb      	ldr	r3, [r7, #12]
 8108f6a:	681b      	ldr	r3, [r3, #0]
 8108f6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8108f6e:	69fa      	ldr	r2, [r7, #28]
 8108f70:	69b9      	ldr	r1, [r7, #24]
 8108f72:	68f8      	ldr	r0, [r7, #12]
 8108f74:	f000 fd1b 	bl	81099ae <I2C_WaitOnTXISFlagUntilTimeout>
 8108f78:	4603      	mov	r3, r0
 8108f7a:	2b00      	cmp	r3, #0
 8108f7c:	d001      	beq.n	8108f82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8108f7e:	2301      	movs	r3, #1
 8108f80:	e012      	b.n	8108fa8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8108f82:	893b      	ldrh	r3, [r7, #8]
 8108f84:	b2da      	uxtb	r2, r3
 8108f86:	68fb      	ldr	r3, [r7, #12]
 8108f88:	681b      	ldr	r3, [r3, #0]
 8108f8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8108f8c:	69fb      	ldr	r3, [r7, #28]
 8108f8e:	9300      	str	r3, [sp, #0]
 8108f90:	69bb      	ldr	r3, [r7, #24]
 8108f92:	2200      	movs	r2, #0
 8108f94:	2180      	movs	r1, #128	; 0x80
 8108f96:	68f8      	ldr	r0, [r7, #12]
 8108f98:	f000 fcc9 	bl	810992e <I2C_WaitOnFlagUntilTimeout>
 8108f9c:	4603      	mov	r3, r0
 8108f9e:	2b00      	cmp	r3, #0
 8108fa0:	d001      	beq.n	8108fa6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8108fa2:	2301      	movs	r3, #1
 8108fa4:	e000      	b.n	8108fa8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8108fa6:	2300      	movs	r3, #0
}
 8108fa8:	4618      	mov	r0, r3
 8108faa:	3710      	adds	r7, #16
 8108fac:	46bd      	mov	sp, r7
 8108fae:	bd80      	pop	{r7, pc}
 8108fb0:	80002000 	.word	0x80002000

08108fb4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8108fb4:	b580      	push	{r7, lr}
 8108fb6:	b086      	sub	sp, #24
 8108fb8:	af02      	add	r7, sp, #8
 8108fba:	60f8      	str	r0, [r7, #12]
 8108fbc:	4608      	mov	r0, r1
 8108fbe:	4611      	mov	r1, r2
 8108fc0:	461a      	mov	r2, r3
 8108fc2:	4603      	mov	r3, r0
 8108fc4:	817b      	strh	r3, [r7, #10]
 8108fc6:	460b      	mov	r3, r1
 8108fc8:	813b      	strh	r3, [r7, #8]
 8108fca:	4613      	mov	r3, r2
 8108fcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8108fce:	88fb      	ldrh	r3, [r7, #6]
 8108fd0:	b2da      	uxtb	r2, r3
 8108fd2:	8979      	ldrh	r1, [r7, #10]
 8108fd4:	4b20      	ldr	r3, [pc, #128]	; (8109058 <I2C_RequestMemoryRead+0xa4>)
 8108fd6:	9300      	str	r3, [sp, #0]
 8108fd8:	2300      	movs	r3, #0
 8108fda:	68f8      	ldr	r0, [r7, #12]
 8108fdc:	f000 fdca 	bl	8109b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8108fe0:	69fa      	ldr	r2, [r7, #28]
 8108fe2:	69b9      	ldr	r1, [r7, #24]
 8108fe4:	68f8      	ldr	r0, [r7, #12]
 8108fe6:	f000 fce2 	bl	81099ae <I2C_WaitOnTXISFlagUntilTimeout>
 8108fea:	4603      	mov	r3, r0
 8108fec:	2b00      	cmp	r3, #0
 8108fee:	d001      	beq.n	8108ff4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8108ff0:	2301      	movs	r3, #1
 8108ff2:	e02c      	b.n	810904e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8108ff4:	88fb      	ldrh	r3, [r7, #6]
 8108ff6:	2b01      	cmp	r3, #1
 8108ff8:	d105      	bne.n	8109006 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8108ffa:	893b      	ldrh	r3, [r7, #8]
 8108ffc:	b2da      	uxtb	r2, r3
 8108ffe:	68fb      	ldr	r3, [r7, #12]
 8109000:	681b      	ldr	r3, [r3, #0]
 8109002:	629a      	str	r2, [r3, #40]	; 0x28
 8109004:	e015      	b.n	8109032 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8109006:	893b      	ldrh	r3, [r7, #8]
 8109008:	0a1b      	lsrs	r3, r3, #8
 810900a:	b29b      	uxth	r3, r3
 810900c:	b2da      	uxtb	r2, r3
 810900e:	68fb      	ldr	r3, [r7, #12]
 8109010:	681b      	ldr	r3, [r3, #0]
 8109012:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8109014:	69fa      	ldr	r2, [r7, #28]
 8109016:	69b9      	ldr	r1, [r7, #24]
 8109018:	68f8      	ldr	r0, [r7, #12]
 810901a:	f000 fcc8 	bl	81099ae <I2C_WaitOnTXISFlagUntilTimeout>
 810901e:	4603      	mov	r3, r0
 8109020:	2b00      	cmp	r3, #0
 8109022:	d001      	beq.n	8109028 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8109024:	2301      	movs	r3, #1
 8109026:	e012      	b.n	810904e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8109028:	893b      	ldrh	r3, [r7, #8]
 810902a:	b2da      	uxtb	r2, r3
 810902c:	68fb      	ldr	r3, [r7, #12]
 810902e:	681b      	ldr	r3, [r3, #0]
 8109030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8109032:	69fb      	ldr	r3, [r7, #28]
 8109034:	9300      	str	r3, [sp, #0]
 8109036:	69bb      	ldr	r3, [r7, #24]
 8109038:	2200      	movs	r2, #0
 810903a:	2140      	movs	r1, #64	; 0x40
 810903c:	68f8      	ldr	r0, [r7, #12]
 810903e:	f000 fc76 	bl	810992e <I2C_WaitOnFlagUntilTimeout>
 8109042:	4603      	mov	r3, r0
 8109044:	2b00      	cmp	r3, #0
 8109046:	d001      	beq.n	810904c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8109048:	2301      	movs	r3, #1
 810904a:	e000      	b.n	810904e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 810904c:	2300      	movs	r3, #0
}
 810904e:	4618      	mov	r0, r3
 8109050:	3710      	adds	r7, #16
 8109052:	46bd      	mov	sp, r7
 8109054:	bd80      	pop	{r7, pc}
 8109056:	bf00      	nop
 8109058:	80002000 	.word	0x80002000

0810905c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 810905c:	b580      	push	{r7, lr}
 810905e:	b084      	sub	sp, #16
 8109060:	af00      	add	r7, sp, #0
 8109062:	6078      	str	r0, [r7, #4]
 8109064:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8109066:	687b      	ldr	r3, [r7, #4]
 8109068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810906c:	b2db      	uxtb	r3, r3
 810906e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8109072:	2b28      	cmp	r3, #40	; 0x28
 8109074:	d16a      	bne.n	810914c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8109076:	687b      	ldr	r3, [r7, #4]
 8109078:	681b      	ldr	r3, [r3, #0]
 810907a:	699b      	ldr	r3, [r3, #24]
 810907c:	0c1b      	lsrs	r3, r3, #16
 810907e:	b2db      	uxtb	r3, r3
 8109080:	f003 0301 	and.w	r3, r3, #1
 8109084:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8109086:	687b      	ldr	r3, [r7, #4]
 8109088:	681b      	ldr	r3, [r3, #0]
 810908a:	699b      	ldr	r3, [r3, #24]
 810908c:	0c1b      	lsrs	r3, r3, #16
 810908e:	b29b      	uxth	r3, r3
 8109090:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8109094:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	681b      	ldr	r3, [r3, #0]
 810909a:	689b      	ldr	r3, [r3, #8]
 810909c:	b29b      	uxth	r3, r3
 810909e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81090a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 81090a4:	687b      	ldr	r3, [r7, #4]
 81090a6:	681b      	ldr	r3, [r3, #0]
 81090a8:	68db      	ldr	r3, [r3, #12]
 81090aa:	b29b      	uxth	r3, r3
 81090ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81090b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81090b2:	687b      	ldr	r3, [r7, #4]
 81090b4:	68db      	ldr	r3, [r3, #12]
 81090b6:	2b02      	cmp	r3, #2
 81090b8:	d138      	bne.n	810912c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 81090ba:	897b      	ldrh	r3, [r7, #10]
 81090bc:	09db      	lsrs	r3, r3, #7
 81090be:	b29a      	uxth	r2, r3
 81090c0:	89bb      	ldrh	r3, [r7, #12]
 81090c2:	4053      	eors	r3, r2
 81090c4:	b29b      	uxth	r3, r3
 81090c6:	f003 0306 	and.w	r3, r3, #6
 81090ca:	2b00      	cmp	r3, #0
 81090cc:	d11c      	bne.n	8109108 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 81090ce:	897b      	ldrh	r3, [r7, #10]
 81090d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 81090d2:	687b      	ldr	r3, [r7, #4]
 81090d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81090d6:	1c5a      	adds	r2, r3, #1
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 81090dc:	687b      	ldr	r3, [r7, #4]
 81090de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81090e0:	2b02      	cmp	r3, #2
 81090e2:	d13b      	bne.n	810915c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 81090e4:	687b      	ldr	r3, [r7, #4]
 81090e6:	2200      	movs	r2, #0
 81090e8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 81090ea:	687b      	ldr	r3, [r7, #4]
 81090ec:	681b      	ldr	r3, [r3, #0]
 81090ee:	2208      	movs	r2, #8
 81090f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81090f2:	687b      	ldr	r3, [r7, #4]
 81090f4:	2200      	movs	r2, #0
 81090f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 81090fa:	89ba      	ldrh	r2, [r7, #12]
 81090fc:	7bfb      	ldrb	r3, [r7, #15]
 81090fe:	4619      	mov	r1, r3
 8109100:	6878      	ldr	r0, [r7, #4]
 8109102:	f7ff fdd4 	bl	8108cae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8109106:	e029      	b.n	810915c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8109108:	893b      	ldrh	r3, [r7, #8]
 810910a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 810910c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8109110:	6878      	ldr	r0, [r7, #4]
 8109112:	f000 fd5d 	bl	8109bd0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8109116:	687b      	ldr	r3, [r7, #4]
 8109118:	2200      	movs	r2, #0
 810911a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810911e:	89ba      	ldrh	r2, [r7, #12]
 8109120:	7bfb      	ldrb	r3, [r7, #15]
 8109122:	4619      	mov	r1, r3
 8109124:	6878      	ldr	r0, [r7, #4]
 8109126:	f7ff fdc2 	bl	8108cae <HAL_I2C_AddrCallback>
}
 810912a:	e017      	b.n	810915c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 810912c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8109130:	6878      	ldr	r0, [r7, #4]
 8109132:	f000 fd4d 	bl	8109bd0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8109136:	687b      	ldr	r3, [r7, #4]
 8109138:	2200      	movs	r2, #0
 810913a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810913e:	89ba      	ldrh	r2, [r7, #12]
 8109140:	7bfb      	ldrb	r3, [r7, #15]
 8109142:	4619      	mov	r1, r3
 8109144:	6878      	ldr	r0, [r7, #4]
 8109146:	f7ff fdb2 	bl	8108cae <HAL_I2C_AddrCallback>
}
 810914a:	e007      	b.n	810915c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 810914c:	687b      	ldr	r3, [r7, #4]
 810914e:	681b      	ldr	r3, [r3, #0]
 8109150:	2208      	movs	r2, #8
 8109152:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8109154:	687b      	ldr	r3, [r7, #4]
 8109156:	2200      	movs	r2, #0
 8109158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 810915c:	bf00      	nop
 810915e:	3710      	adds	r7, #16
 8109160:	46bd      	mov	sp, r7
 8109162:	bd80      	pop	{r7, pc}

08109164 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8109164:	b580      	push	{r7, lr}
 8109166:	b084      	sub	sp, #16
 8109168:	af00      	add	r7, sp, #0
 810916a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 810916c:	687b      	ldr	r3, [r7, #4]
 810916e:	681b      	ldr	r3, [r3, #0]
 8109170:	681b      	ldr	r3, [r3, #0]
 8109172:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8109174:	687b      	ldr	r3, [r7, #4]
 8109176:	2200      	movs	r2, #0
 8109178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 810917c:	68fb      	ldr	r3, [r7, #12]
 810917e:	0b9b      	lsrs	r3, r3, #14
 8109180:	f003 0301 	and.w	r3, r3, #1
 8109184:	2b00      	cmp	r3, #0
 8109186:	d008      	beq.n	810919a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8109188:	687b      	ldr	r3, [r7, #4]
 810918a:	681b      	ldr	r3, [r3, #0]
 810918c:	681a      	ldr	r2, [r3, #0]
 810918e:	687b      	ldr	r3, [r7, #4]
 8109190:	681b      	ldr	r3, [r3, #0]
 8109192:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8109196:	601a      	str	r2, [r3, #0]
 8109198:	e00d      	b.n	81091b6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 810919a:	68fb      	ldr	r3, [r7, #12]
 810919c:	0bdb      	lsrs	r3, r3, #15
 810919e:	f003 0301 	and.w	r3, r3, #1
 81091a2:	2b00      	cmp	r3, #0
 81091a4:	d007      	beq.n	81091b6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81091a6:	687b      	ldr	r3, [r7, #4]
 81091a8:	681b      	ldr	r3, [r3, #0]
 81091aa:	681a      	ldr	r2, [r3, #0]
 81091ac:	687b      	ldr	r3, [r7, #4]
 81091ae:	681b      	ldr	r3, [r3, #0]
 81091b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81091b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 81091b6:	687b      	ldr	r3, [r7, #4]
 81091b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81091bc:	b2db      	uxtb	r3, r3
 81091be:	2b29      	cmp	r3, #41	; 0x29
 81091c0:	d112      	bne.n	81091e8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81091c2:	687b      	ldr	r3, [r7, #4]
 81091c4:	2228      	movs	r2, #40	; 0x28
 81091c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 81091ca:	687b      	ldr	r3, [r7, #4]
 81091cc:	2221      	movs	r2, #33	; 0x21
 81091ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81091d0:	2101      	movs	r1, #1
 81091d2:	6878      	ldr	r0, [r7, #4]
 81091d4:	f000 fcfc 	bl	8109bd0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81091d8:	687b      	ldr	r3, [r7, #4]
 81091da:	2200      	movs	r2, #0
 81091dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 81091e0:	6878      	ldr	r0, [r7, #4]
 81091e2:	f7ff fd50 	bl	8108c86 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 81091e6:	e017      	b.n	8109218 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 81091e8:	687b      	ldr	r3, [r7, #4]
 81091ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81091ee:	b2db      	uxtb	r3, r3
 81091f0:	2b2a      	cmp	r3, #42	; 0x2a
 81091f2:	d111      	bne.n	8109218 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81091f4:	687b      	ldr	r3, [r7, #4]
 81091f6:	2228      	movs	r2, #40	; 0x28
 81091f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 81091fc:	687b      	ldr	r3, [r7, #4]
 81091fe:	2222      	movs	r2, #34	; 0x22
 8109200:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8109202:	2102      	movs	r1, #2
 8109204:	6878      	ldr	r0, [r7, #4]
 8109206:	f000 fce3 	bl	8109bd0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	2200      	movs	r2, #0
 810920e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8109212:	6878      	ldr	r0, [r7, #4]
 8109214:	f7ff fd41 	bl	8108c9a <HAL_I2C_SlaveRxCpltCallback>
}
 8109218:	bf00      	nop
 810921a:	3710      	adds	r7, #16
 810921c:	46bd      	mov	sp, r7
 810921e:	bd80      	pop	{r7, pc}

08109220 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8109220:	b580      	push	{r7, lr}
 8109222:	b086      	sub	sp, #24
 8109224:	af00      	add	r7, sp, #0
 8109226:	6078      	str	r0, [r7, #4]
 8109228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 810922a:	687b      	ldr	r3, [r7, #4]
 810922c:	681b      	ldr	r3, [r3, #0]
 810922e:	681b      	ldr	r3, [r3, #0]
 8109230:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8109232:	683b      	ldr	r3, [r7, #0]
 8109234:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8109236:	687b      	ldr	r3, [r7, #4]
 8109238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810923c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810923e:	687b      	ldr	r3, [r7, #4]
 8109240:	681b      	ldr	r3, [r3, #0]
 8109242:	2220      	movs	r2, #32
 8109244:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8109246:	7bfb      	ldrb	r3, [r7, #15]
 8109248:	2b21      	cmp	r3, #33	; 0x21
 810924a:	d002      	beq.n	8109252 <I2C_ITSlaveCplt+0x32>
 810924c:	7bfb      	ldrb	r3, [r7, #15]
 810924e:	2b29      	cmp	r3, #41	; 0x29
 8109250:	d108      	bne.n	8109264 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8109252:	f248 0101 	movw	r1, #32769	; 0x8001
 8109256:	6878      	ldr	r0, [r7, #4]
 8109258:	f000 fcba 	bl	8109bd0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	2221      	movs	r2, #33	; 0x21
 8109260:	631a      	str	r2, [r3, #48]	; 0x30
 8109262:	e00d      	b.n	8109280 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8109264:	7bfb      	ldrb	r3, [r7, #15]
 8109266:	2b22      	cmp	r3, #34	; 0x22
 8109268:	d002      	beq.n	8109270 <I2C_ITSlaveCplt+0x50>
 810926a:	7bfb      	ldrb	r3, [r7, #15]
 810926c:	2b2a      	cmp	r3, #42	; 0x2a
 810926e:	d107      	bne.n	8109280 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8109270:	f248 0102 	movw	r1, #32770	; 0x8002
 8109274:	6878      	ldr	r0, [r7, #4]
 8109276:	f000 fcab 	bl	8109bd0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 810927a:	687b      	ldr	r3, [r7, #4]
 810927c:	2222      	movs	r2, #34	; 0x22
 810927e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	681b      	ldr	r3, [r3, #0]
 8109284:	685a      	ldr	r2, [r3, #4]
 8109286:	687b      	ldr	r3, [r7, #4]
 8109288:	681b      	ldr	r3, [r3, #0]
 810928a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810928e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	681b      	ldr	r3, [r3, #0]
 8109294:	6859      	ldr	r1, [r3, #4]
 8109296:	687b      	ldr	r3, [r7, #4]
 8109298:	681a      	ldr	r2, [r3, #0]
 810929a:	4b80      	ldr	r3, [pc, #512]	; (810949c <I2C_ITSlaveCplt+0x27c>)
 810929c:	400b      	ands	r3, r1
 810929e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 81092a0:	6878      	ldr	r0, [r7, #4]
 81092a2:	f000 fb02 	bl	81098aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 81092a6:	693b      	ldr	r3, [r7, #16]
 81092a8:	0b9b      	lsrs	r3, r3, #14
 81092aa:	f003 0301 	and.w	r3, r3, #1
 81092ae:	2b00      	cmp	r3, #0
 81092b0:	d07a      	beq.n	81093a8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	681b      	ldr	r3, [r3, #0]
 81092b6:	681a      	ldr	r2, [r3, #0]
 81092b8:	687b      	ldr	r3, [r7, #4]
 81092ba:	681b      	ldr	r3, [r3, #0]
 81092bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81092c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 81092c2:	687b      	ldr	r3, [r7, #4]
 81092c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092c6:	2b00      	cmp	r3, #0
 81092c8:	f000 8111 	beq.w	81094ee <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 81092cc:	687b      	ldr	r3, [r7, #4]
 81092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092d0:	681b      	ldr	r3, [r3, #0]
 81092d2:	4a73      	ldr	r2, [pc, #460]	; (81094a0 <I2C_ITSlaveCplt+0x280>)
 81092d4:	4293      	cmp	r3, r2
 81092d6:	d059      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092dc:	681b      	ldr	r3, [r3, #0]
 81092de:	4a71      	ldr	r2, [pc, #452]	; (81094a4 <I2C_ITSlaveCplt+0x284>)
 81092e0:	4293      	cmp	r3, r2
 81092e2:	d053      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 81092e4:	687b      	ldr	r3, [r7, #4]
 81092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092e8:	681b      	ldr	r3, [r3, #0]
 81092ea:	4a6f      	ldr	r2, [pc, #444]	; (81094a8 <I2C_ITSlaveCplt+0x288>)
 81092ec:	4293      	cmp	r3, r2
 81092ee:	d04d      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 81092f0:	687b      	ldr	r3, [r7, #4]
 81092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092f4:	681b      	ldr	r3, [r3, #0]
 81092f6:	4a6d      	ldr	r2, [pc, #436]	; (81094ac <I2C_ITSlaveCplt+0x28c>)
 81092f8:	4293      	cmp	r3, r2
 81092fa:	d047      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 81092fc:	687b      	ldr	r3, [r7, #4]
 81092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109300:	681b      	ldr	r3, [r3, #0]
 8109302:	4a6b      	ldr	r2, [pc, #428]	; (81094b0 <I2C_ITSlaveCplt+0x290>)
 8109304:	4293      	cmp	r3, r2
 8109306:	d041      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 8109308:	687b      	ldr	r3, [r7, #4]
 810930a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810930c:	681b      	ldr	r3, [r3, #0]
 810930e:	4a69      	ldr	r2, [pc, #420]	; (81094b4 <I2C_ITSlaveCplt+0x294>)
 8109310:	4293      	cmp	r3, r2
 8109312:	d03b      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 8109314:	687b      	ldr	r3, [r7, #4]
 8109316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109318:	681b      	ldr	r3, [r3, #0]
 810931a:	4a67      	ldr	r2, [pc, #412]	; (81094b8 <I2C_ITSlaveCplt+0x298>)
 810931c:	4293      	cmp	r3, r2
 810931e:	d035      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 8109320:	687b      	ldr	r3, [r7, #4]
 8109322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109324:	681b      	ldr	r3, [r3, #0]
 8109326:	4a65      	ldr	r2, [pc, #404]	; (81094bc <I2C_ITSlaveCplt+0x29c>)
 8109328:	4293      	cmp	r3, r2
 810932a:	d02f      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 810932c:	687b      	ldr	r3, [r7, #4]
 810932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109330:	681b      	ldr	r3, [r3, #0]
 8109332:	4a63      	ldr	r2, [pc, #396]	; (81094c0 <I2C_ITSlaveCplt+0x2a0>)
 8109334:	4293      	cmp	r3, r2
 8109336:	d029      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 8109338:	687b      	ldr	r3, [r7, #4]
 810933a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810933c:	681b      	ldr	r3, [r3, #0]
 810933e:	4a61      	ldr	r2, [pc, #388]	; (81094c4 <I2C_ITSlaveCplt+0x2a4>)
 8109340:	4293      	cmp	r3, r2
 8109342:	d023      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 8109344:	687b      	ldr	r3, [r7, #4]
 8109346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109348:	681b      	ldr	r3, [r3, #0]
 810934a:	4a5f      	ldr	r2, [pc, #380]	; (81094c8 <I2C_ITSlaveCplt+0x2a8>)
 810934c:	4293      	cmp	r3, r2
 810934e:	d01d      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 8109350:	687b      	ldr	r3, [r7, #4]
 8109352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109354:	681b      	ldr	r3, [r3, #0]
 8109356:	4a5d      	ldr	r2, [pc, #372]	; (81094cc <I2C_ITSlaveCplt+0x2ac>)
 8109358:	4293      	cmp	r3, r2
 810935a:	d017      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 810935c:	687b      	ldr	r3, [r7, #4]
 810935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109360:	681b      	ldr	r3, [r3, #0]
 8109362:	4a5b      	ldr	r2, [pc, #364]	; (81094d0 <I2C_ITSlaveCplt+0x2b0>)
 8109364:	4293      	cmp	r3, r2
 8109366:	d011      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 8109368:	687b      	ldr	r3, [r7, #4]
 810936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810936c:	681b      	ldr	r3, [r3, #0]
 810936e:	4a59      	ldr	r2, [pc, #356]	; (81094d4 <I2C_ITSlaveCplt+0x2b4>)
 8109370:	4293      	cmp	r3, r2
 8109372:	d00b      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 8109374:	687b      	ldr	r3, [r7, #4]
 8109376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109378:	681b      	ldr	r3, [r3, #0]
 810937a:	4a57      	ldr	r2, [pc, #348]	; (81094d8 <I2C_ITSlaveCplt+0x2b8>)
 810937c:	4293      	cmp	r3, r2
 810937e:	d005      	beq.n	810938c <I2C_ITSlaveCplt+0x16c>
 8109380:	687b      	ldr	r3, [r7, #4]
 8109382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109384:	681b      	ldr	r3, [r3, #0]
 8109386:	4a55      	ldr	r2, [pc, #340]	; (81094dc <I2C_ITSlaveCplt+0x2bc>)
 8109388:	4293      	cmp	r3, r2
 810938a:	d105      	bne.n	8109398 <I2C_ITSlaveCplt+0x178>
 810938c:	687b      	ldr	r3, [r7, #4]
 810938e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109390:	681b      	ldr	r3, [r3, #0]
 8109392:	685b      	ldr	r3, [r3, #4]
 8109394:	b29b      	uxth	r3, r3
 8109396:	e004      	b.n	81093a2 <I2C_ITSlaveCplt+0x182>
 8109398:	687b      	ldr	r3, [r7, #4]
 810939a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810939c:	681b      	ldr	r3, [r3, #0]
 810939e:	685b      	ldr	r3, [r3, #4]
 81093a0:	b29b      	uxth	r3, r3
 81093a2:	687a      	ldr	r2, [r7, #4]
 81093a4:	8553      	strh	r3, [r2, #42]	; 0x2a
 81093a6:	e0a2      	b.n	81094ee <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81093a8:	693b      	ldr	r3, [r7, #16]
 81093aa:	0bdb      	lsrs	r3, r3, #15
 81093ac:	f003 0301 	and.w	r3, r3, #1
 81093b0:	2b00      	cmp	r3, #0
 81093b2:	f000 809c 	beq.w	81094ee <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81093b6:	687b      	ldr	r3, [r7, #4]
 81093b8:	681b      	ldr	r3, [r3, #0]
 81093ba:	681a      	ldr	r2, [r3, #0]
 81093bc:	687b      	ldr	r3, [r7, #4]
 81093be:	681b      	ldr	r3, [r3, #0]
 81093c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81093c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 81093c6:	687b      	ldr	r3, [r7, #4]
 81093c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81093ca:	2b00      	cmp	r3, #0
 81093cc:	f000 808f 	beq.w	81094ee <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 81093d0:	687b      	ldr	r3, [r7, #4]
 81093d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81093d4:	681b      	ldr	r3, [r3, #0]
 81093d6:	4a32      	ldr	r2, [pc, #200]	; (81094a0 <I2C_ITSlaveCplt+0x280>)
 81093d8:	4293      	cmp	r3, r2
 81093da:	d059      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 81093dc:	687b      	ldr	r3, [r7, #4]
 81093de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81093e0:	681b      	ldr	r3, [r3, #0]
 81093e2:	4a30      	ldr	r2, [pc, #192]	; (81094a4 <I2C_ITSlaveCplt+0x284>)
 81093e4:	4293      	cmp	r3, r2
 81093e6:	d053      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 81093e8:	687b      	ldr	r3, [r7, #4]
 81093ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81093ec:	681b      	ldr	r3, [r3, #0]
 81093ee:	4a2e      	ldr	r2, [pc, #184]	; (81094a8 <I2C_ITSlaveCplt+0x288>)
 81093f0:	4293      	cmp	r3, r2
 81093f2:	d04d      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81093f8:	681b      	ldr	r3, [r3, #0]
 81093fa:	4a2c      	ldr	r2, [pc, #176]	; (81094ac <I2C_ITSlaveCplt+0x28c>)
 81093fc:	4293      	cmp	r3, r2
 81093fe:	d047      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 8109400:	687b      	ldr	r3, [r7, #4]
 8109402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109404:	681b      	ldr	r3, [r3, #0]
 8109406:	4a2a      	ldr	r2, [pc, #168]	; (81094b0 <I2C_ITSlaveCplt+0x290>)
 8109408:	4293      	cmp	r3, r2
 810940a:	d041      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109410:	681b      	ldr	r3, [r3, #0]
 8109412:	4a28      	ldr	r2, [pc, #160]	; (81094b4 <I2C_ITSlaveCplt+0x294>)
 8109414:	4293      	cmp	r3, r2
 8109416:	d03b      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 8109418:	687b      	ldr	r3, [r7, #4]
 810941a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810941c:	681b      	ldr	r3, [r3, #0]
 810941e:	4a26      	ldr	r2, [pc, #152]	; (81094b8 <I2C_ITSlaveCplt+0x298>)
 8109420:	4293      	cmp	r3, r2
 8109422:	d035      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 8109424:	687b      	ldr	r3, [r7, #4]
 8109426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109428:	681b      	ldr	r3, [r3, #0]
 810942a:	4a24      	ldr	r2, [pc, #144]	; (81094bc <I2C_ITSlaveCplt+0x29c>)
 810942c:	4293      	cmp	r3, r2
 810942e:	d02f      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 8109430:	687b      	ldr	r3, [r7, #4]
 8109432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109434:	681b      	ldr	r3, [r3, #0]
 8109436:	4a22      	ldr	r2, [pc, #136]	; (81094c0 <I2C_ITSlaveCplt+0x2a0>)
 8109438:	4293      	cmp	r3, r2
 810943a:	d029      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109440:	681b      	ldr	r3, [r3, #0]
 8109442:	4a20      	ldr	r2, [pc, #128]	; (81094c4 <I2C_ITSlaveCplt+0x2a4>)
 8109444:	4293      	cmp	r3, r2
 8109446:	d023      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 8109448:	687b      	ldr	r3, [r7, #4]
 810944a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810944c:	681b      	ldr	r3, [r3, #0]
 810944e:	4a1e      	ldr	r2, [pc, #120]	; (81094c8 <I2C_ITSlaveCplt+0x2a8>)
 8109450:	4293      	cmp	r3, r2
 8109452:	d01d      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 8109454:	687b      	ldr	r3, [r7, #4]
 8109456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109458:	681b      	ldr	r3, [r3, #0]
 810945a:	4a1c      	ldr	r2, [pc, #112]	; (81094cc <I2C_ITSlaveCplt+0x2ac>)
 810945c:	4293      	cmp	r3, r2
 810945e:	d017      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109464:	681b      	ldr	r3, [r3, #0]
 8109466:	4a1a      	ldr	r2, [pc, #104]	; (81094d0 <I2C_ITSlaveCplt+0x2b0>)
 8109468:	4293      	cmp	r3, r2
 810946a:	d011      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 810946c:	687b      	ldr	r3, [r7, #4]
 810946e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109470:	681b      	ldr	r3, [r3, #0]
 8109472:	4a18      	ldr	r2, [pc, #96]	; (81094d4 <I2C_ITSlaveCplt+0x2b4>)
 8109474:	4293      	cmp	r3, r2
 8109476:	d00b      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 8109478:	687b      	ldr	r3, [r7, #4]
 810947a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810947c:	681b      	ldr	r3, [r3, #0]
 810947e:	4a16      	ldr	r2, [pc, #88]	; (81094d8 <I2C_ITSlaveCplt+0x2b8>)
 8109480:	4293      	cmp	r3, r2
 8109482:	d005      	beq.n	8109490 <I2C_ITSlaveCplt+0x270>
 8109484:	687b      	ldr	r3, [r7, #4]
 8109486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109488:	681b      	ldr	r3, [r3, #0]
 810948a:	4a14      	ldr	r2, [pc, #80]	; (81094dc <I2C_ITSlaveCplt+0x2bc>)
 810948c:	4293      	cmp	r3, r2
 810948e:	d127      	bne.n	81094e0 <I2C_ITSlaveCplt+0x2c0>
 8109490:	687b      	ldr	r3, [r7, #4]
 8109492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109494:	681b      	ldr	r3, [r3, #0]
 8109496:	685b      	ldr	r3, [r3, #4]
 8109498:	b29b      	uxth	r3, r3
 810949a:	e026      	b.n	81094ea <I2C_ITSlaveCplt+0x2ca>
 810949c:	fe00e800 	.word	0xfe00e800
 81094a0:	40020010 	.word	0x40020010
 81094a4:	40020028 	.word	0x40020028
 81094a8:	40020040 	.word	0x40020040
 81094ac:	40020058 	.word	0x40020058
 81094b0:	40020070 	.word	0x40020070
 81094b4:	40020088 	.word	0x40020088
 81094b8:	400200a0 	.word	0x400200a0
 81094bc:	400200b8 	.word	0x400200b8
 81094c0:	40020410 	.word	0x40020410
 81094c4:	40020428 	.word	0x40020428
 81094c8:	40020440 	.word	0x40020440
 81094cc:	40020458 	.word	0x40020458
 81094d0:	40020470 	.word	0x40020470
 81094d4:	40020488 	.word	0x40020488
 81094d8:	400204a0 	.word	0x400204a0
 81094dc:	400204b8 	.word	0x400204b8
 81094e0:	687b      	ldr	r3, [r7, #4]
 81094e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81094e4:	681b      	ldr	r3, [r3, #0]
 81094e6:	685b      	ldr	r3, [r3, #4]
 81094e8:	b29b      	uxth	r3, r3
 81094ea:	687a      	ldr	r2, [r7, #4]
 81094ec:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 81094ee:	697b      	ldr	r3, [r7, #20]
 81094f0:	089b      	lsrs	r3, r3, #2
 81094f2:	f003 0301 	and.w	r3, r3, #1
 81094f6:	2b00      	cmp	r3, #0
 81094f8:	d020      	beq.n	810953c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 81094fa:	697b      	ldr	r3, [r7, #20]
 81094fc:	f023 0304 	bic.w	r3, r3, #4
 8109500:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8109502:	687b      	ldr	r3, [r7, #4]
 8109504:	681b      	ldr	r3, [r3, #0]
 8109506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810950c:	b2d2      	uxtb	r2, r2
 810950e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8109510:	687b      	ldr	r3, [r7, #4]
 8109512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109514:	1c5a      	adds	r2, r3, #1
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 810951a:	687b      	ldr	r3, [r7, #4]
 810951c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810951e:	2b00      	cmp	r3, #0
 8109520:	d00c      	beq.n	810953c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8109522:	687b      	ldr	r3, [r7, #4]
 8109524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8109526:	3b01      	subs	r3, #1
 8109528:	b29a      	uxth	r2, r3
 810952a:	687b      	ldr	r3, [r7, #4]
 810952c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810952e:	687b      	ldr	r3, [r7, #4]
 8109530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8109532:	b29b      	uxth	r3, r3
 8109534:	3b01      	subs	r3, #1
 8109536:	b29a      	uxth	r2, r3
 8109538:	687b      	ldr	r3, [r7, #4]
 810953a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 810953c:	687b      	ldr	r3, [r7, #4]
 810953e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8109540:	b29b      	uxth	r3, r3
 8109542:	2b00      	cmp	r3, #0
 8109544:	d005      	beq.n	8109552 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8109546:	687b      	ldr	r3, [r7, #4]
 8109548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810954a:	f043 0204 	orr.w	r2, r3, #4
 810954e:	687b      	ldr	r3, [r7, #4]
 8109550:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	2200      	movs	r2, #0
 8109556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	2200      	movs	r2, #0
 810955e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8109560:	687b      	ldr	r3, [r7, #4]
 8109562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109564:	2b00      	cmp	r3, #0
 8109566:	d010      	beq.n	810958a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8109568:	687b      	ldr	r3, [r7, #4]
 810956a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810956c:	4619      	mov	r1, r3
 810956e:	6878      	ldr	r0, [r7, #4]
 8109570:	f000 f8a4 	bl	81096bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8109574:	687b      	ldr	r3, [r7, #4]
 8109576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810957a:	b2db      	uxtb	r3, r3
 810957c:	2b28      	cmp	r3, #40	; 0x28
 810957e:	d141      	bne.n	8109604 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8109580:	6979      	ldr	r1, [r7, #20]
 8109582:	6878      	ldr	r0, [r7, #4]
 8109584:	f000 f844 	bl	8109610 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8109588:	e03c      	b.n	8109604 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 810958a:	687b      	ldr	r3, [r7, #4]
 810958c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810958e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8109592:	d014      	beq.n	81095be <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8109594:	6878      	ldr	r0, [r7, #4]
 8109596:	f7ff fde5 	bl	8109164 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810959a:	687b      	ldr	r3, [r7, #4]
 810959c:	4a1b      	ldr	r2, [pc, #108]	; (810960c <I2C_ITSlaveCplt+0x3ec>)
 810959e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 81095a0:	687b      	ldr	r3, [r7, #4]
 81095a2:	2220      	movs	r2, #32
 81095a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81095a8:	687b      	ldr	r3, [r7, #4]
 81095aa:	2200      	movs	r2, #0
 81095ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	2200      	movs	r2, #0
 81095b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 81095b6:	6878      	ldr	r0, [r7, #4]
 81095b8:	f7ff fb87 	bl	8108cca <HAL_I2C_ListenCpltCallback>
}
 81095bc:	e022      	b.n	8109604 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81095c4:	b2db      	uxtb	r3, r3
 81095c6:	2b22      	cmp	r3, #34	; 0x22
 81095c8:	d10e      	bne.n	81095e8 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 81095ca:	687b      	ldr	r3, [r7, #4]
 81095cc:	2220      	movs	r2, #32
 81095ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81095d2:	687b      	ldr	r3, [r7, #4]
 81095d4:	2200      	movs	r2, #0
 81095d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81095d8:	687b      	ldr	r3, [r7, #4]
 81095da:	2200      	movs	r2, #0
 81095dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81095e0:	6878      	ldr	r0, [r7, #4]
 81095e2:	f7ff fb5a 	bl	8108c9a <HAL_I2C_SlaveRxCpltCallback>
}
 81095e6:	e00d      	b.n	8109604 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	2220      	movs	r2, #32
 81095ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81095f0:	687b      	ldr	r3, [r7, #4]
 81095f2:	2200      	movs	r2, #0
 81095f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81095f6:	687b      	ldr	r3, [r7, #4]
 81095f8:	2200      	movs	r2, #0
 81095fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 81095fe:	6878      	ldr	r0, [r7, #4]
 8109600:	f7ff fb41 	bl	8108c86 <HAL_I2C_SlaveTxCpltCallback>
}
 8109604:	bf00      	nop
 8109606:	3718      	adds	r7, #24
 8109608:	46bd      	mov	sp, r7
 810960a:	bd80      	pop	{r7, pc}
 810960c:	ffff0000 	.word	0xffff0000

08109610 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8109610:	b580      	push	{r7, lr}
 8109612:	b082      	sub	sp, #8
 8109614:	af00      	add	r7, sp, #0
 8109616:	6078      	str	r0, [r7, #4]
 8109618:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810961a:	687b      	ldr	r3, [r7, #4]
 810961c:	4a26      	ldr	r2, [pc, #152]	; (81096b8 <I2C_ITListenCplt+0xa8>)
 810961e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8109620:	687b      	ldr	r3, [r7, #4]
 8109622:	2200      	movs	r2, #0
 8109624:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8109626:	687b      	ldr	r3, [r7, #4]
 8109628:	2220      	movs	r2, #32
 810962a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810962e:	687b      	ldr	r3, [r7, #4]
 8109630:	2200      	movs	r2, #0
 8109632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	2200      	movs	r2, #0
 810963a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 810963c:	683b      	ldr	r3, [r7, #0]
 810963e:	089b      	lsrs	r3, r3, #2
 8109640:	f003 0301 	and.w	r3, r3, #1
 8109644:	2b00      	cmp	r3, #0
 8109646:	d022      	beq.n	810968e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8109648:	687b      	ldr	r3, [r7, #4]
 810964a:	681b      	ldr	r3, [r3, #0]
 810964c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810964e:	687b      	ldr	r3, [r7, #4]
 8109650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109652:	b2d2      	uxtb	r2, r2
 8109654:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810965a:	1c5a      	adds	r2, r3, #1
 810965c:	687b      	ldr	r3, [r7, #4]
 810965e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8109664:	2b00      	cmp	r3, #0
 8109666:	d012      	beq.n	810968e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810966c:	3b01      	subs	r3, #1
 810966e:	b29a      	uxth	r2, r3
 8109670:	687b      	ldr	r3, [r7, #4]
 8109672:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8109674:	687b      	ldr	r3, [r7, #4]
 8109676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8109678:	b29b      	uxth	r3, r3
 810967a:	3b01      	subs	r3, #1
 810967c:	b29a      	uxth	r2, r3
 810967e:	687b      	ldr	r3, [r7, #4]
 8109680:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109686:	f043 0204 	orr.w	r2, r3, #4
 810968a:	687b      	ldr	r3, [r7, #4]
 810968c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 810968e:	f248 0103 	movw	r1, #32771	; 0x8003
 8109692:	6878      	ldr	r0, [r7, #4]
 8109694:	f000 fa9c 	bl	8109bd0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8109698:	687b      	ldr	r3, [r7, #4]
 810969a:	681b      	ldr	r3, [r3, #0]
 810969c:	2210      	movs	r2, #16
 810969e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 81096a0:	687b      	ldr	r3, [r7, #4]
 81096a2:	2200      	movs	r2, #0
 81096a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 81096a8:	6878      	ldr	r0, [r7, #4]
 81096aa:	f7ff fb0e 	bl	8108cca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 81096ae:	bf00      	nop
 81096b0:	3708      	adds	r7, #8
 81096b2:	46bd      	mov	sp, r7
 81096b4:	bd80      	pop	{r7, pc}
 81096b6:	bf00      	nop
 81096b8:	ffff0000 	.word	0xffff0000

081096bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 81096bc:	b580      	push	{r7, lr}
 81096be:	b084      	sub	sp, #16
 81096c0:	af00      	add	r7, sp, #0
 81096c2:	6078      	str	r0, [r7, #4]
 81096c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 81096c6:	687b      	ldr	r3, [r7, #4]
 81096c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81096cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 81096ce:	687b      	ldr	r3, [r7, #4]
 81096d0:	2200      	movs	r2, #0
 81096d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 81096d6:	687b      	ldr	r3, [r7, #4]
 81096d8:	4a5d      	ldr	r2, [pc, #372]	; (8109850 <I2C_ITError+0x194>)
 81096da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	2200      	movs	r2, #0
 81096e0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 81096e2:	687b      	ldr	r3, [r7, #4]
 81096e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81096e6:	683b      	ldr	r3, [r7, #0]
 81096e8:	431a      	orrs	r2, r3
 81096ea:	687b      	ldr	r3, [r7, #4]
 81096ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 81096ee:	7bfb      	ldrb	r3, [r7, #15]
 81096f0:	2b28      	cmp	r3, #40	; 0x28
 81096f2:	d005      	beq.n	8109700 <I2C_ITError+0x44>
 81096f4:	7bfb      	ldrb	r3, [r7, #15]
 81096f6:	2b29      	cmp	r3, #41	; 0x29
 81096f8:	d002      	beq.n	8109700 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 81096fa:	7bfb      	ldrb	r3, [r7, #15]
 81096fc:	2b2a      	cmp	r3, #42	; 0x2a
 81096fe:	d10b      	bne.n	8109718 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8109700:	2103      	movs	r1, #3
 8109702:	6878      	ldr	r0, [r7, #4]
 8109704:	f000 fa64 	bl	8109bd0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8109708:	687b      	ldr	r3, [r7, #4]
 810970a:	2228      	movs	r2, #40	; 0x28
 810970c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8109710:	687b      	ldr	r3, [r7, #4]
 8109712:	4a50      	ldr	r2, [pc, #320]	; (8109854 <I2C_ITError+0x198>)
 8109714:	635a      	str	r2, [r3, #52]	; 0x34
 8109716:	e011      	b.n	810973c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8109718:	f248 0103 	movw	r1, #32771	; 0x8003
 810971c:	6878      	ldr	r0, [r7, #4]
 810971e:	f000 fa57 	bl	8109bd0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8109722:	687b      	ldr	r3, [r7, #4]
 8109724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8109728:	b2db      	uxtb	r3, r3
 810972a:	2b60      	cmp	r3, #96	; 0x60
 810972c:	d003      	beq.n	8109736 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 810972e:	687b      	ldr	r3, [r7, #4]
 8109730:	2220      	movs	r2, #32
 8109732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8109736:	687b      	ldr	r3, [r7, #4]
 8109738:	2200      	movs	r2, #0
 810973a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 810973c:	687b      	ldr	r3, [r7, #4]
 810973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109740:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109746:	2b00      	cmp	r3, #0
 8109748:	d039      	beq.n	81097be <I2C_ITError+0x102>
 810974a:	68bb      	ldr	r3, [r7, #8]
 810974c:	2b11      	cmp	r3, #17
 810974e:	d002      	beq.n	8109756 <I2C_ITError+0x9a>
 8109750:	68bb      	ldr	r3, [r7, #8]
 8109752:	2b21      	cmp	r3, #33	; 0x21
 8109754:	d133      	bne.n	81097be <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8109756:	687b      	ldr	r3, [r7, #4]
 8109758:	681b      	ldr	r3, [r3, #0]
 810975a:	681b      	ldr	r3, [r3, #0]
 810975c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8109760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109764:	d107      	bne.n	8109776 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8109766:	687b      	ldr	r3, [r7, #4]
 8109768:	681b      	ldr	r3, [r3, #0]
 810976a:	681a      	ldr	r2, [r3, #0]
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	681b      	ldr	r3, [r3, #0]
 8109770:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8109774:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8109776:	687b      	ldr	r3, [r7, #4]
 8109778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810977a:	4618      	mov	r0, r3
 810977c:	f7fe f93e 	bl	81079fc <HAL_DMA_GetState>
 8109780:	4603      	mov	r3, r0
 8109782:	2b01      	cmp	r3, #1
 8109784:	d017      	beq.n	81097b6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8109786:	687b      	ldr	r3, [r7, #4]
 8109788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810978a:	4a33      	ldr	r2, [pc, #204]	; (8109858 <I2C_ITError+0x19c>)
 810978c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810978e:	687b      	ldr	r3, [r7, #4]
 8109790:	2200      	movs	r2, #0
 8109792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8109796:	687b      	ldr	r3, [r7, #4]
 8109798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810979a:	4618      	mov	r0, r3
 810979c:	f7fc ffc0 	bl	8106720 <HAL_DMA_Abort_IT>
 81097a0:	4603      	mov	r3, r0
 81097a2:	2b00      	cmp	r3, #0
 81097a4:	d04d      	beq.n	8109842 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 81097a6:	687b      	ldr	r3, [r7, #4]
 81097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81097aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81097ac:	687a      	ldr	r2, [r7, #4]
 81097ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 81097b0:	4610      	mov	r0, r2
 81097b2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81097b4:	e045      	b.n	8109842 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81097b6:	6878      	ldr	r0, [r7, #4]
 81097b8:	f000 f850 	bl	810985c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81097bc:	e041      	b.n	8109842 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 81097be:	687b      	ldr	r3, [r7, #4]
 81097c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81097c2:	2b00      	cmp	r3, #0
 81097c4:	d039      	beq.n	810983a <I2C_ITError+0x17e>
 81097c6:	68bb      	ldr	r3, [r7, #8]
 81097c8:	2b12      	cmp	r3, #18
 81097ca:	d002      	beq.n	81097d2 <I2C_ITError+0x116>
 81097cc:	68bb      	ldr	r3, [r7, #8]
 81097ce:	2b22      	cmp	r3, #34	; 0x22
 81097d0:	d133      	bne.n	810983a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 81097d2:	687b      	ldr	r3, [r7, #4]
 81097d4:	681b      	ldr	r3, [r3, #0]
 81097d6:	681b      	ldr	r3, [r3, #0]
 81097d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81097dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81097e0:	d107      	bne.n	81097f2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81097e2:	687b      	ldr	r3, [r7, #4]
 81097e4:	681b      	ldr	r3, [r3, #0]
 81097e6:	681a      	ldr	r2, [r3, #0]
 81097e8:	687b      	ldr	r3, [r7, #4]
 81097ea:	681b      	ldr	r3, [r3, #0]
 81097ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81097f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81097f2:	687b      	ldr	r3, [r7, #4]
 81097f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81097f6:	4618      	mov	r0, r3
 81097f8:	f7fe f900 	bl	81079fc <HAL_DMA_GetState>
 81097fc:	4603      	mov	r3, r0
 81097fe:	2b01      	cmp	r3, #1
 8109800:	d017      	beq.n	8109832 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8109802:	687b      	ldr	r3, [r7, #4]
 8109804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109806:	4a14      	ldr	r2, [pc, #80]	; (8109858 <I2C_ITError+0x19c>)
 8109808:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810980a:	687b      	ldr	r3, [r7, #4]
 810980c:	2200      	movs	r2, #0
 810980e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8109812:	687b      	ldr	r3, [r7, #4]
 8109814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109816:	4618      	mov	r0, r3
 8109818:	f7fc ff82 	bl	8106720 <HAL_DMA_Abort_IT>
 810981c:	4603      	mov	r3, r0
 810981e:	2b00      	cmp	r3, #0
 8109820:	d011      	beq.n	8109846 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8109822:	687b      	ldr	r3, [r7, #4]
 8109824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109828:	687a      	ldr	r2, [r7, #4]
 810982a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810982c:	4610      	mov	r0, r2
 810982e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8109830:	e009      	b.n	8109846 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8109832:	6878      	ldr	r0, [r7, #4]
 8109834:	f000 f812 	bl	810985c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8109838:	e005      	b.n	8109846 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 810983a:	6878      	ldr	r0, [r7, #4]
 810983c:	f000 f80e 	bl	810985c <I2C_TreatErrorCallback>
  }
}
 8109840:	e002      	b.n	8109848 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8109842:	bf00      	nop
 8109844:	e000      	b.n	8109848 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8109846:	bf00      	nop
}
 8109848:	bf00      	nop
 810984a:	3710      	adds	r7, #16
 810984c:	46bd      	mov	sp, r7
 810984e:	bd80      	pop	{r7, pc}
 8109850:	ffff0000 	.word	0xffff0000
 8109854:	08108d07 	.word	0x08108d07
 8109858:	081098f3 	.word	0x081098f3

0810985c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 810985c:	b580      	push	{r7, lr}
 810985e:	b082      	sub	sp, #8
 8109860:	af00      	add	r7, sp, #0
 8109862:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8109864:	687b      	ldr	r3, [r7, #4]
 8109866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810986a:	b2db      	uxtb	r3, r3
 810986c:	2b60      	cmp	r3, #96	; 0x60
 810986e:	d10e      	bne.n	810988e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8109870:	687b      	ldr	r3, [r7, #4]
 8109872:	2220      	movs	r2, #32
 8109874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8109878:	687b      	ldr	r3, [r7, #4]
 810987a:	2200      	movs	r2, #0
 810987c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810987e:	687b      	ldr	r3, [r7, #4]
 8109880:	2200      	movs	r2, #0
 8109882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8109886:	6878      	ldr	r0, [r7, #4]
 8109888:	f7ff fa33 	bl	8108cf2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 810988c:	e009      	b.n	81098a2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 810988e:	687b      	ldr	r3, [r7, #4]
 8109890:	2200      	movs	r2, #0
 8109892:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8109894:	687b      	ldr	r3, [r7, #4]
 8109896:	2200      	movs	r2, #0
 8109898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 810989c:	6878      	ldr	r0, [r7, #4]
 810989e:	f7ff fa1e 	bl	8108cde <HAL_I2C_ErrorCallback>
}
 81098a2:	bf00      	nop
 81098a4:	3708      	adds	r7, #8
 81098a6:	46bd      	mov	sp, r7
 81098a8:	bd80      	pop	{r7, pc}

081098aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81098aa:	b480      	push	{r7}
 81098ac:	b083      	sub	sp, #12
 81098ae:	af00      	add	r7, sp, #0
 81098b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81098b2:	687b      	ldr	r3, [r7, #4]
 81098b4:	681b      	ldr	r3, [r3, #0]
 81098b6:	699b      	ldr	r3, [r3, #24]
 81098b8:	f003 0302 	and.w	r3, r3, #2
 81098bc:	2b02      	cmp	r3, #2
 81098be:	d103      	bne.n	81098c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81098c0:	687b      	ldr	r3, [r7, #4]
 81098c2:	681b      	ldr	r3, [r3, #0]
 81098c4:	2200      	movs	r2, #0
 81098c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81098c8:	687b      	ldr	r3, [r7, #4]
 81098ca:	681b      	ldr	r3, [r3, #0]
 81098cc:	699b      	ldr	r3, [r3, #24]
 81098ce:	f003 0301 	and.w	r3, r3, #1
 81098d2:	2b01      	cmp	r3, #1
 81098d4:	d007      	beq.n	81098e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81098d6:	687b      	ldr	r3, [r7, #4]
 81098d8:	681b      	ldr	r3, [r3, #0]
 81098da:	699a      	ldr	r2, [r3, #24]
 81098dc:	687b      	ldr	r3, [r7, #4]
 81098de:	681b      	ldr	r3, [r3, #0]
 81098e0:	f042 0201 	orr.w	r2, r2, #1
 81098e4:	619a      	str	r2, [r3, #24]
  }
}
 81098e6:	bf00      	nop
 81098e8:	370c      	adds	r7, #12
 81098ea:	46bd      	mov	sp, r7
 81098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098f0:	4770      	bx	lr

081098f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 81098f2:	b580      	push	{r7, lr}
 81098f4:	b084      	sub	sp, #16
 81098f6:	af00      	add	r7, sp, #0
 81098f8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 81098fa:	687b      	ldr	r3, [r7, #4]
 81098fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81098fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8109900:	68fb      	ldr	r3, [r7, #12]
 8109902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109904:	2b00      	cmp	r3, #0
 8109906:	d003      	beq.n	8109910 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8109908:	68fb      	ldr	r3, [r7, #12]
 810990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810990c:	2200      	movs	r2, #0
 810990e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8109910:	68fb      	ldr	r3, [r7, #12]
 8109912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109914:	2b00      	cmp	r3, #0
 8109916:	d003      	beq.n	8109920 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8109918:	68fb      	ldr	r3, [r7, #12]
 810991a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810991c:	2200      	movs	r2, #0
 810991e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8109920:	68f8      	ldr	r0, [r7, #12]
 8109922:	f7ff ff9b 	bl	810985c <I2C_TreatErrorCallback>
}
 8109926:	bf00      	nop
 8109928:	3710      	adds	r7, #16
 810992a:	46bd      	mov	sp, r7
 810992c:	bd80      	pop	{r7, pc}

0810992e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 810992e:	b580      	push	{r7, lr}
 8109930:	b084      	sub	sp, #16
 8109932:	af00      	add	r7, sp, #0
 8109934:	60f8      	str	r0, [r7, #12]
 8109936:	60b9      	str	r1, [r7, #8]
 8109938:	603b      	str	r3, [r7, #0]
 810993a:	4613      	mov	r3, r2
 810993c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810993e:	e022      	b.n	8109986 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109940:	683b      	ldr	r3, [r7, #0]
 8109942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109946:	d01e      	beq.n	8109986 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109948:	f7fa f8d2 	bl	8103af0 <HAL_GetTick>
 810994c:	4602      	mov	r2, r0
 810994e:	69bb      	ldr	r3, [r7, #24]
 8109950:	1ad3      	subs	r3, r2, r3
 8109952:	683a      	ldr	r2, [r7, #0]
 8109954:	429a      	cmp	r2, r3
 8109956:	d302      	bcc.n	810995e <I2C_WaitOnFlagUntilTimeout+0x30>
 8109958:	683b      	ldr	r3, [r7, #0]
 810995a:	2b00      	cmp	r3, #0
 810995c:	d113      	bne.n	8109986 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810995e:	68fb      	ldr	r3, [r7, #12]
 8109960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109962:	f043 0220 	orr.w	r2, r3, #32
 8109966:	68fb      	ldr	r3, [r7, #12]
 8109968:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810996a:	68fb      	ldr	r3, [r7, #12]
 810996c:	2220      	movs	r2, #32
 810996e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8109972:	68fb      	ldr	r3, [r7, #12]
 8109974:	2200      	movs	r2, #0
 8109976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810997a:	68fb      	ldr	r3, [r7, #12]
 810997c:	2200      	movs	r2, #0
 810997e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8109982:	2301      	movs	r3, #1
 8109984:	e00f      	b.n	81099a6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8109986:	68fb      	ldr	r3, [r7, #12]
 8109988:	681b      	ldr	r3, [r3, #0]
 810998a:	699a      	ldr	r2, [r3, #24]
 810998c:	68bb      	ldr	r3, [r7, #8]
 810998e:	4013      	ands	r3, r2
 8109990:	68ba      	ldr	r2, [r7, #8]
 8109992:	429a      	cmp	r2, r3
 8109994:	bf0c      	ite	eq
 8109996:	2301      	moveq	r3, #1
 8109998:	2300      	movne	r3, #0
 810999a:	b2db      	uxtb	r3, r3
 810999c:	461a      	mov	r2, r3
 810999e:	79fb      	ldrb	r3, [r7, #7]
 81099a0:	429a      	cmp	r2, r3
 81099a2:	d0cd      	beq.n	8109940 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81099a4:	2300      	movs	r3, #0
}
 81099a6:	4618      	mov	r0, r3
 81099a8:	3710      	adds	r7, #16
 81099aa:	46bd      	mov	sp, r7
 81099ac:	bd80      	pop	{r7, pc}

081099ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81099ae:	b580      	push	{r7, lr}
 81099b0:	b084      	sub	sp, #16
 81099b2:	af00      	add	r7, sp, #0
 81099b4:	60f8      	str	r0, [r7, #12]
 81099b6:	60b9      	str	r1, [r7, #8]
 81099b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81099ba:	e02c      	b.n	8109a16 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81099bc:	687a      	ldr	r2, [r7, #4]
 81099be:	68b9      	ldr	r1, [r7, #8]
 81099c0:	68f8      	ldr	r0, [r7, #12]
 81099c2:	f000 f871 	bl	8109aa8 <I2C_IsAcknowledgeFailed>
 81099c6:	4603      	mov	r3, r0
 81099c8:	2b00      	cmp	r3, #0
 81099ca:	d001      	beq.n	81099d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81099cc:	2301      	movs	r3, #1
 81099ce:	e02a      	b.n	8109a26 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81099d0:	68bb      	ldr	r3, [r7, #8]
 81099d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81099d6:	d01e      	beq.n	8109a16 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81099d8:	f7fa f88a 	bl	8103af0 <HAL_GetTick>
 81099dc:	4602      	mov	r2, r0
 81099de:	687b      	ldr	r3, [r7, #4]
 81099e0:	1ad3      	subs	r3, r2, r3
 81099e2:	68ba      	ldr	r2, [r7, #8]
 81099e4:	429a      	cmp	r2, r3
 81099e6:	d302      	bcc.n	81099ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81099e8:	68bb      	ldr	r3, [r7, #8]
 81099ea:	2b00      	cmp	r3, #0
 81099ec:	d113      	bne.n	8109a16 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81099ee:	68fb      	ldr	r3, [r7, #12]
 81099f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81099f2:	f043 0220 	orr.w	r2, r3, #32
 81099f6:	68fb      	ldr	r3, [r7, #12]
 81099f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81099fa:	68fb      	ldr	r3, [r7, #12]
 81099fc:	2220      	movs	r2, #32
 81099fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8109a02:	68fb      	ldr	r3, [r7, #12]
 8109a04:	2200      	movs	r2, #0
 8109a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8109a0a:	68fb      	ldr	r3, [r7, #12]
 8109a0c:	2200      	movs	r2, #0
 8109a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8109a12:	2301      	movs	r3, #1
 8109a14:	e007      	b.n	8109a26 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8109a16:	68fb      	ldr	r3, [r7, #12]
 8109a18:	681b      	ldr	r3, [r3, #0]
 8109a1a:	699b      	ldr	r3, [r3, #24]
 8109a1c:	f003 0302 	and.w	r3, r3, #2
 8109a20:	2b02      	cmp	r3, #2
 8109a22:	d1cb      	bne.n	81099bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8109a24:	2300      	movs	r3, #0
}
 8109a26:	4618      	mov	r0, r3
 8109a28:	3710      	adds	r7, #16
 8109a2a:	46bd      	mov	sp, r7
 8109a2c:	bd80      	pop	{r7, pc}

08109a2e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8109a2e:	b580      	push	{r7, lr}
 8109a30:	b084      	sub	sp, #16
 8109a32:	af00      	add	r7, sp, #0
 8109a34:	60f8      	str	r0, [r7, #12]
 8109a36:	60b9      	str	r1, [r7, #8]
 8109a38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109a3a:	e028      	b.n	8109a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8109a3c:	687a      	ldr	r2, [r7, #4]
 8109a3e:	68b9      	ldr	r1, [r7, #8]
 8109a40:	68f8      	ldr	r0, [r7, #12]
 8109a42:	f000 f831 	bl	8109aa8 <I2C_IsAcknowledgeFailed>
 8109a46:	4603      	mov	r3, r0
 8109a48:	2b00      	cmp	r3, #0
 8109a4a:	d001      	beq.n	8109a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8109a4c:	2301      	movs	r3, #1
 8109a4e:	e026      	b.n	8109a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109a50:	f7fa f84e 	bl	8103af0 <HAL_GetTick>
 8109a54:	4602      	mov	r2, r0
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	1ad3      	subs	r3, r2, r3
 8109a5a:	68ba      	ldr	r2, [r7, #8]
 8109a5c:	429a      	cmp	r2, r3
 8109a5e:	d302      	bcc.n	8109a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8109a60:	68bb      	ldr	r3, [r7, #8]
 8109a62:	2b00      	cmp	r3, #0
 8109a64:	d113      	bne.n	8109a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109a66:	68fb      	ldr	r3, [r7, #12]
 8109a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109a6a:	f043 0220 	orr.w	r2, r3, #32
 8109a6e:	68fb      	ldr	r3, [r7, #12]
 8109a70:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8109a72:	68fb      	ldr	r3, [r7, #12]
 8109a74:	2220      	movs	r2, #32
 8109a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8109a7a:	68fb      	ldr	r3, [r7, #12]
 8109a7c:	2200      	movs	r2, #0
 8109a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8109a82:	68fb      	ldr	r3, [r7, #12]
 8109a84:	2200      	movs	r2, #0
 8109a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8109a8a:	2301      	movs	r3, #1
 8109a8c:	e007      	b.n	8109a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109a8e:	68fb      	ldr	r3, [r7, #12]
 8109a90:	681b      	ldr	r3, [r3, #0]
 8109a92:	699b      	ldr	r3, [r3, #24]
 8109a94:	f003 0320 	and.w	r3, r3, #32
 8109a98:	2b20      	cmp	r3, #32
 8109a9a:	d1cf      	bne.n	8109a3c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8109a9c:	2300      	movs	r3, #0
}
 8109a9e:	4618      	mov	r0, r3
 8109aa0:	3710      	adds	r7, #16
 8109aa2:	46bd      	mov	sp, r7
 8109aa4:	bd80      	pop	{r7, pc}
	...

08109aa8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8109aa8:	b580      	push	{r7, lr}
 8109aaa:	b084      	sub	sp, #16
 8109aac:	af00      	add	r7, sp, #0
 8109aae:	60f8      	str	r0, [r7, #12]
 8109ab0:	60b9      	str	r1, [r7, #8]
 8109ab2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8109ab4:	68fb      	ldr	r3, [r7, #12]
 8109ab6:	681b      	ldr	r3, [r3, #0]
 8109ab8:	699b      	ldr	r3, [r3, #24]
 8109aba:	f003 0310 	and.w	r3, r3, #16
 8109abe:	2b10      	cmp	r3, #16
 8109ac0:	d151      	bne.n	8109b66 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109ac2:	e022      	b.n	8109b0a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8109ac4:	68bb      	ldr	r3, [r7, #8]
 8109ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109aca:	d01e      	beq.n	8109b0a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109acc:	f7fa f810 	bl	8103af0 <HAL_GetTick>
 8109ad0:	4602      	mov	r2, r0
 8109ad2:	687b      	ldr	r3, [r7, #4]
 8109ad4:	1ad3      	subs	r3, r2, r3
 8109ad6:	68ba      	ldr	r2, [r7, #8]
 8109ad8:	429a      	cmp	r2, r3
 8109ada:	d302      	bcc.n	8109ae2 <I2C_IsAcknowledgeFailed+0x3a>
 8109adc:	68bb      	ldr	r3, [r7, #8]
 8109ade:	2b00      	cmp	r3, #0
 8109ae0:	d113      	bne.n	8109b0a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109ae2:	68fb      	ldr	r3, [r7, #12]
 8109ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109ae6:	f043 0220 	orr.w	r2, r3, #32
 8109aea:	68fb      	ldr	r3, [r7, #12]
 8109aec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8109aee:	68fb      	ldr	r3, [r7, #12]
 8109af0:	2220      	movs	r2, #32
 8109af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8109af6:	68fb      	ldr	r3, [r7, #12]
 8109af8:	2200      	movs	r2, #0
 8109afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8109afe:	68fb      	ldr	r3, [r7, #12]
 8109b00:	2200      	movs	r2, #0
 8109b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8109b06:	2301      	movs	r3, #1
 8109b08:	e02e      	b.n	8109b68 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109b0a:	68fb      	ldr	r3, [r7, #12]
 8109b0c:	681b      	ldr	r3, [r3, #0]
 8109b0e:	699b      	ldr	r3, [r3, #24]
 8109b10:	f003 0320 	and.w	r3, r3, #32
 8109b14:	2b20      	cmp	r3, #32
 8109b16:	d1d5      	bne.n	8109ac4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8109b18:	68fb      	ldr	r3, [r7, #12]
 8109b1a:	681b      	ldr	r3, [r3, #0]
 8109b1c:	2210      	movs	r2, #16
 8109b1e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8109b20:	68fb      	ldr	r3, [r7, #12]
 8109b22:	681b      	ldr	r3, [r3, #0]
 8109b24:	2220      	movs	r2, #32
 8109b26:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8109b28:	68f8      	ldr	r0, [r7, #12]
 8109b2a:	f7ff febe 	bl	81098aa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8109b2e:	68fb      	ldr	r3, [r7, #12]
 8109b30:	681b      	ldr	r3, [r3, #0]
 8109b32:	6859      	ldr	r1, [r3, #4]
 8109b34:	68fb      	ldr	r3, [r7, #12]
 8109b36:	681a      	ldr	r2, [r3, #0]
 8109b38:	4b0d      	ldr	r3, [pc, #52]	; (8109b70 <I2C_IsAcknowledgeFailed+0xc8>)
 8109b3a:	400b      	ands	r3, r1
 8109b3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8109b3e:	68fb      	ldr	r3, [r7, #12]
 8109b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109b42:	f043 0204 	orr.w	r2, r3, #4
 8109b46:	68fb      	ldr	r3, [r7, #12]
 8109b48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8109b4a:	68fb      	ldr	r3, [r7, #12]
 8109b4c:	2220      	movs	r2, #32
 8109b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8109b52:	68fb      	ldr	r3, [r7, #12]
 8109b54:	2200      	movs	r2, #0
 8109b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109b5a:	68fb      	ldr	r3, [r7, #12]
 8109b5c:	2200      	movs	r2, #0
 8109b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8109b62:	2301      	movs	r3, #1
 8109b64:	e000      	b.n	8109b68 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8109b66:	2300      	movs	r3, #0
}
 8109b68:	4618      	mov	r0, r3
 8109b6a:	3710      	adds	r7, #16
 8109b6c:	46bd      	mov	sp, r7
 8109b6e:	bd80      	pop	{r7, pc}
 8109b70:	fe00e800 	.word	0xfe00e800

08109b74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8109b74:	b480      	push	{r7}
 8109b76:	b085      	sub	sp, #20
 8109b78:	af00      	add	r7, sp, #0
 8109b7a:	60f8      	str	r0, [r7, #12]
 8109b7c:	607b      	str	r3, [r7, #4]
 8109b7e:	460b      	mov	r3, r1
 8109b80:	817b      	strh	r3, [r7, #10]
 8109b82:	4613      	mov	r3, r2
 8109b84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8109b86:	68fb      	ldr	r3, [r7, #12]
 8109b88:	681b      	ldr	r3, [r3, #0]
 8109b8a:	685a      	ldr	r2, [r3, #4]
 8109b8c:	69bb      	ldr	r3, [r7, #24]
 8109b8e:	0d5b      	lsrs	r3, r3, #21
 8109b90:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8109b94:	4b0d      	ldr	r3, [pc, #52]	; (8109bcc <I2C_TransferConfig+0x58>)
 8109b96:	430b      	orrs	r3, r1
 8109b98:	43db      	mvns	r3, r3
 8109b9a:	ea02 0103 	and.w	r1, r2, r3
 8109b9e:	897b      	ldrh	r3, [r7, #10]
 8109ba0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8109ba4:	7a7b      	ldrb	r3, [r7, #9]
 8109ba6:	041b      	lsls	r3, r3, #16
 8109ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8109bac:	431a      	orrs	r2, r3
 8109bae:	687b      	ldr	r3, [r7, #4]
 8109bb0:	431a      	orrs	r2, r3
 8109bb2:	69bb      	ldr	r3, [r7, #24]
 8109bb4:	431a      	orrs	r2, r3
 8109bb6:	68fb      	ldr	r3, [r7, #12]
 8109bb8:	681b      	ldr	r3, [r3, #0]
 8109bba:	430a      	orrs	r2, r1
 8109bbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8109bbe:	bf00      	nop
 8109bc0:	3714      	adds	r7, #20
 8109bc2:	46bd      	mov	sp, r7
 8109bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bc8:	4770      	bx	lr
 8109bca:	bf00      	nop
 8109bcc:	03ff63ff 	.word	0x03ff63ff

08109bd0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8109bd0:	b480      	push	{r7}
 8109bd2:	b085      	sub	sp, #20
 8109bd4:	af00      	add	r7, sp, #0
 8109bd6:	6078      	str	r0, [r7, #4]
 8109bd8:	460b      	mov	r3, r1
 8109bda:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8109bdc:	2300      	movs	r3, #0
 8109bde:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8109be0:	887b      	ldrh	r3, [r7, #2]
 8109be2:	f003 0301 	and.w	r3, r3, #1
 8109be6:	2b00      	cmp	r3, #0
 8109be8:	d00f      	beq.n	8109c0a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8109bea:	68fb      	ldr	r3, [r7, #12]
 8109bec:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8109bf0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8109bf2:	687b      	ldr	r3, [r7, #4]
 8109bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8109bf8:	b2db      	uxtb	r3, r3
 8109bfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8109bfe:	2b28      	cmp	r3, #40	; 0x28
 8109c00:	d003      	beq.n	8109c0a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8109c02:	68fb      	ldr	r3, [r7, #12]
 8109c04:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8109c08:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8109c0a:	887b      	ldrh	r3, [r7, #2]
 8109c0c:	f003 0302 	and.w	r3, r3, #2
 8109c10:	2b00      	cmp	r3, #0
 8109c12:	d00f      	beq.n	8109c34 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8109c14:	68fb      	ldr	r3, [r7, #12]
 8109c16:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8109c1a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8109c1c:	687b      	ldr	r3, [r7, #4]
 8109c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8109c22:	b2db      	uxtb	r3, r3
 8109c24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8109c28:	2b28      	cmp	r3, #40	; 0x28
 8109c2a:	d003      	beq.n	8109c34 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8109c2c:	68fb      	ldr	r3, [r7, #12]
 8109c2e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8109c32:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8109c34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8109c38:	2b00      	cmp	r3, #0
 8109c3a:	da03      	bge.n	8109c44 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8109c3c:	68fb      	ldr	r3, [r7, #12]
 8109c3e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8109c42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8109c44:	887b      	ldrh	r3, [r7, #2]
 8109c46:	2b10      	cmp	r3, #16
 8109c48:	d103      	bne.n	8109c52 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8109c4a:	68fb      	ldr	r3, [r7, #12]
 8109c4c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8109c50:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8109c52:	887b      	ldrh	r3, [r7, #2]
 8109c54:	2b20      	cmp	r3, #32
 8109c56:	d103      	bne.n	8109c60 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8109c58:	68fb      	ldr	r3, [r7, #12]
 8109c5a:	f043 0320 	orr.w	r3, r3, #32
 8109c5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8109c60:	887b      	ldrh	r3, [r7, #2]
 8109c62:	2b40      	cmp	r3, #64	; 0x40
 8109c64:	d103      	bne.n	8109c6e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8109c66:	68fb      	ldr	r3, [r7, #12]
 8109c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8109c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8109c6e:	687b      	ldr	r3, [r7, #4]
 8109c70:	681b      	ldr	r3, [r3, #0]
 8109c72:	6819      	ldr	r1, [r3, #0]
 8109c74:	68fb      	ldr	r3, [r7, #12]
 8109c76:	43da      	mvns	r2, r3
 8109c78:	687b      	ldr	r3, [r7, #4]
 8109c7a:	681b      	ldr	r3, [r3, #0]
 8109c7c:	400a      	ands	r2, r1
 8109c7e:	601a      	str	r2, [r3, #0]
}
 8109c80:	bf00      	nop
 8109c82:	3714      	adds	r7, #20
 8109c84:	46bd      	mov	sp, r7
 8109c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c8a:	4770      	bx	lr

08109c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8109c8c:	b480      	push	{r7}
 8109c8e:	b083      	sub	sp, #12
 8109c90:	af00      	add	r7, sp, #0
 8109c92:	6078      	str	r0, [r7, #4]
 8109c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109c96:	687b      	ldr	r3, [r7, #4]
 8109c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8109c9c:	b2db      	uxtb	r3, r3
 8109c9e:	2b20      	cmp	r3, #32
 8109ca0:	d138      	bne.n	8109d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109ca2:	687b      	ldr	r3, [r7, #4]
 8109ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8109ca8:	2b01      	cmp	r3, #1
 8109caa:	d101      	bne.n	8109cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8109cac:	2302      	movs	r3, #2
 8109cae:	e032      	b.n	8109d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8109cb0:	687b      	ldr	r3, [r7, #4]
 8109cb2:	2201      	movs	r2, #1
 8109cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109cb8:	687b      	ldr	r3, [r7, #4]
 8109cba:	2224      	movs	r2, #36	; 0x24
 8109cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109cc0:	687b      	ldr	r3, [r7, #4]
 8109cc2:	681b      	ldr	r3, [r3, #0]
 8109cc4:	681a      	ldr	r2, [r3, #0]
 8109cc6:	687b      	ldr	r3, [r7, #4]
 8109cc8:	681b      	ldr	r3, [r3, #0]
 8109cca:	f022 0201 	bic.w	r2, r2, #1
 8109cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8109cd0:	687b      	ldr	r3, [r7, #4]
 8109cd2:	681b      	ldr	r3, [r3, #0]
 8109cd4:	681a      	ldr	r2, [r3, #0]
 8109cd6:	687b      	ldr	r3, [r7, #4]
 8109cd8:	681b      	ldr	r3, [r3, #0]
 8109cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8109cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8109ce0:	687b      	ldr	r3, [r7, #4]
 8109ce2:	681b      	ldr	r3, [r3, #0]
 8109ce4:	6819      	ldr	r1, [r3, #0]
 8109ce6:	687b      	ldr	r3, [r7, #4]
 8109ce8:	681b      	ldr	r3, [r3, #0]
 8109cea:	683a      	ldr	r2, [r7, #0]
 8109cec:	430a      	orrs	r2, r1
 8109cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109cf0:	687b      	ldr	r3, [r7, #4]
 8109cf2:	681b      	ldr	r3, [r3, #0]
 8109cf4:	681a      	ldr	r2, [r3, #0]
 8109cf6:	687b      	ldr	r3, [r7, #4]
 8109cf8:	681b      	ldr	r3, [r3, #0]
 8109cfa:	f042 0201 	orr.w	r2, r2, #1
 8109cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109d00:	687b      	ldr	r3, [r7, #4]
 8109d02:	2220      	movs	r2, #32
 8109d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109d08:	687b      	ldr	r3, [r7, #4]
 8109d0a:	2200      	movs	r2, #0
 8109d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8109d10:	2300      	movs	r3, #0
 8109d12:	e000      	b.n	8109d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8109d14:	2302      	movs	r3, #2
  }
}
 8109d16:	4618      	mov	r0, r3
 8109d18:	370c      	adds	r7, #12
 8109d1a:	46bd      	mov	sp, r7
 8109d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d20:	4770      	bx	lr

08109d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8109d22:	b480      	push	{r7}
 8109d24:	b085      	sub	sp, #20
 8109d26:	af00      	add	r7, sp, #0
 8109d28:	6078      	str	r0, [r7, #4]
 8109d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109d2c:	687b      	ldr	r3, [r7, #4]
 8109d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8109d32:	b2db      	uxtb	r3, r3
 8109d34:	2b20      	cmp	r3, #32
 8109d36:	d139      	bne.n	8109dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109d38:	687b      	ldr	r3, [r7, #4]
 8109d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8109d3e:	2b01      	cmp	r3, #1
 8109d40:	d101      	bne.n	8109d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8109d42:	2302      	movs	r3, #2
 8109d44:	e033      	b.n	8109dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8109d46:	687b      	ldr	r3, [r7, #4]
 8109d48:	2201      	movs	r2, #1
 8109d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109d4e:	687b      	ldr	r3, [r7, #4]
 8109d50:	2224      	movs	r2, #36	; 0x24
 8109d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109d56:	687b      	ldr	r3, [r7, #4]
 8109d58:	681b      	ldr	r3, [r3, #0]
 8109d5a:	681a      	ldr	r2, [r3, #0]
 8109d5c:	687b      	ldr	r3, [r7, #4]
 8109d5e:	681b      	ldr	r3, [r3, #0]
 8109d60:	f022 0201 	bic.w	r2, r2, #1
 8109d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8109d66:	687b      	ldr	r3, [r7, #4]
 8109d68:	681b      	ldr	r3, [r3, #0]
 8109d6a:	681b      	ldr	r3, [r3, #0]
 8109d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8109d6e:	68fb      	ldr	r3, [r7, #12]
 8109d70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8109d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8109d76:	683b      	ldr	r3, [r7, #0]
 8109d78:	021b      	lsls	r3, r3, #8
 8109d7a:	68fa      	ldr	r2, [r7, #12]
 8109d7c:	4313      	orrs	r3, r2
 8109d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8109d80:	687b      	ldr	r3, [r7, #4]
 8109d82:	681b      	ldr	r3, [r3, #0]
 8109d84:	68fa      	ldr	r2, [r7, #12]
 8109d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109d88:	687b      	ldr	r3, [r7, #4]
 8109d8a:	681b      	ldr	r3, [r3, #0]
 8109d8c:	681a      	ldr	r2, [r3, #0]
 8109d8e:	687b      	ldr	r3, [r7, #4]
 8109d90:	681b      	ldr	r3, [r3, #0]
 8109d92:	f042 0201 	orr.w	r2, r2, #1
 8109d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109d98:	687b      	ldr	r3, [r7, #4]
 8109d9a:	2220      	movs	r2, #32
 8109d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109da0:	687b      	ldr	r3, [r7, #4]
 8109da2:	2200      	movs	r2, #0
 8109da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8109da8:	2300      	movs	r3, #0
 8109daa:	e000      	b.n	8109dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8109dac:	2302      	movs	r3, #2
  }
}
 8109dae:	4618      	mov	r0, r3
 8109db0:	3714      	adds	r7, #20
 8109db2:	46bd      	mov	sp, r7
 8109db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109db8:	4770      	bx	lr
	...

08109dbc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8109dbc:	b580      	push	{r7, lr}
 8109dbe:	b084      	sub	sp, #16
 8109dc0:	af00      	add	r7, sp, #0
 8109dc2:	60f8      	str	r0, [r7, #12]
 8109dc4:	460b      	mov	r3, r1
 8109dc6:	607a      	str	r2, [r7, #4]
 8109dc8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8109dca:	4b37      	ldr	r3, [pc, #220]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109dcc:	681b      	ldr	r3, [r3, #0]
 8109dce:	f023 0201 	bic.w	r2, r3, #1
 8109dd2:	4935      	ldr	r1, [pc, #212]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109dd4:	68fb      	ldr	r3, [r7, #12]
 8109dd6:	4313      	orrs	r3, r2
 8109dd8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8109dda:	687b      	ldr	r3, [r7, #4]
 8109ddc:	2b00      	cmp	r3, #0
 8109dde:	d123      	bne.n	8109e28 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8109de0:	f7fb fba8 	bl	8105534 <HAL_GetCurrentCPUID>
 8109de4:	4603      	mov	r3, r0
 8109de6:	2b03      	cmp	r3, #3
 8109de8:	d158      	bne.n	8109e9c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8109dea:	4b2f      	ldr	r3, [pc, #188]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109dec:	691b      	ldr	r3, [r3, #16]
 8109dee:	4a2e      	ldr	r2, [pc, #184]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109df0:	f023 0301 	bic.w	r3, r3, #1
 8109df4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109df6:	4b2d      	ldr	r3, [pc, #180]	; (8109eac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109df8:	691b      	ldr	r3, [r3, #16]
 8109dfa:	4a2c      	ldr	r2, [pc, #176]	; (8109eac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109dfc:	f043 0304 	orr.w	r3, r3, #4
 8109e00:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109e02:	f3bf 8f4f 	dsb	sy
}
 8109e06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109e08:	f3bf 8f6f 	isb	sy
}
 8109e0c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109e0e:	7afb      	ldrb	r3, [r7, #11]
 8109e10:	2b01      	cmp	r3, #1
 8109e12:	d101      	bne.n	8109e18 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109e14:	bf30      	wfi
 8109e16:	e000      	b.n	8109e1a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109e18:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e1a:	4b24      	ldr	r3, [pc, #144]	; (8109eac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e1c:	691b      	ldr	r3, [r3, #16]
 8109e1e:	4a23      	ldr	r2, [pc, #140]	; (8109eac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e20:	f023 0304 	bic.w	r3, r3, #4
 8109e24:	6113      	str	r3, [r2, #16]
 8109e26:	e03c      	b.n	8109ea2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8109e28:	687b      	ldr	r3, [r7, #4]
 8109e2a:	2b01      	cmp	r3, #1
 8109e2c:	d123      	bne.n	8109e76 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8109e2e:	f7fb fb81 	bl	8105534 <HAL_GetCurrentCPUID>
 8109e32:	4603      	mov	r3, r0
 8109e34:	2b01      	cmp	r3, #1
 8109e36:	d133      	bne.n	8109ea0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8109e38:	4b1b      	ldr	r3, [pc, #108]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e3a:	695b      	ldr	r3, [r3, #20]
 8109e3c:	4a1a      	ldr	r2, [pc, #104]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e3e:	f023 0302 	bic.w	r3, r3, #2
 8109e42:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e44:	4b19      	ldr	r3, [pc, #100]	; (8109eac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e46:	691b      	ldr	r3, [r3, #16]
 8109e48:	4a18      	ldr	r2, [pc, #96]	; (8109eac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e4a:	f043 0304 	orr.w	r3, r3, #4
 8109e4e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109e50:	f3bf 8f4f 	dsb	sy
}
 8109e54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109e56:	f3bf 8f6f 	isb	sy
}
 8109e5a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109e5c:	7afb      	ldrb	r3, [r7, #11]
 8109e5e:	2b01      	cmp	r3, #1
 8109e60:	d101      	bne.n	8109e66 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109e62:	bf30      	wfi
 8109e64:	e000      	b.n	8109e68 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109e66:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e68:	4b10      	ldr	r3, [pc, #64]	; (8109eac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e6a:	691b      	ldr	r3, [r3, #16]
 8109e6c:	4a0f      	ldr	r2, [pc, #60]	; (8109eac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e6e:	f023 0304 	bic.w	r3, r3, #4
 8109e72:	6113      	str	r3, [r2, #16]
 8109e74:	e015      	b.n	8109ea2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109e76:	f7fb fb5d 	bl	8105534 <HAL_GetCurrentCPUID>
 8109e7a:	4603      	mov	r3, r0
 8109e7c:	2b03      	cmp	r3, #3
 8109e7e:	d106      	bne.n	8109e8e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8109e80:	4b09      	ldr	r3, [pc, #36]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e82:	691b      	ldr	r3, [r3, #16]
 8109e84:	4a08      	ldr	r2, [pc, #32]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e86:	f023 0304 	bic.w	r3, r3, #4
 8109e8a:	6113      	str	r3, [r2, #16]
 8109e8c:	e009      	b.n	8109ea2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8109e8e:	4b06      	ldr	r3, [pc, #24]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e90:	695b      	ldr	r3, [r3, #20]
 8109e92:	4a05      	ldr	r2, [pc, #20]	; (8109ea8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e94:	f023 0304 	bic.w	r3, r3, #4
 8109e98:	6153      	str	r3, [r2, #20]
 8109e9a:	e002      	b.n	8109ea2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109e9c:	bf00      	nop
 8109e9e:	e000      	b.n	8109ea2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109ea0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8109ea2:	3710      	adds	r7, #16
 8109ea4:	46bd      	mov	sp, r7
 8109ea6:	bd80      	pop	{r7, pc}
 8109ea8:	58024800 	.word	0x58024800
 8109eac:	e000ed00 	.word	0xe000ed00

08109eb0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8109eb0:	b580      	push	{r7, lr}
 8109eb2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109eb4:	f7fb fb3e 	bl	8105534 <HAL_GetCurrentCPUID>
 8109eb8:	4603      	mov	r3, r0
 8109eba:	2b03      	cmp	r3, #3
 8109ebc:	d101      	bne.n	8109ec2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8109ebe:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8109ec0:	e001      	b.n	8109ec6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8109ec2:	bf40      	sev
    __WFE ();
 8109ec4:	bf20      	wfe
}
 8109ec6:	bf00      	nop
 8109ec8:	bd80      	pop	{r7, pc}
	...

08109ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8109ecc:	b480      	push	{r7}
 8109ece:	b089      	sub	sp, #36	; 0x24
 8109ed0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8109ed2:	4bb3      	ldr	r3, [pc, #716]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ed4:	691b      	ldr	r3, [r3, #16]
 8109ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109eda:	2b18      	cmp	r3, #24
 8109edc:	f200 8155 	bhi.w	810a18a <HAL_RCC_GetSysClockFreq+0x2be>
 8109ee0:	a201      	add	r2, pc, #4	; (adr r2, 8109ee8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8109ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ee6:	bf00      	nop
 8109ee8:	08109f4d 	.word	0x08109f4d
 8109eec:	0810a18b 	.word	0x0810a18b
 8109ef0:	0810a18b 	.word	0x0810a18b
 8109ef4:	0810a18b 	.word	0x0810a18b
 8109ef8:	0810a18b 	.word	0x0810a18b
 8109efc:	0810a18b 	.word	0x0810a18b
 8109f00:	0810a18b 	.word	0x0810a18b
 8109f04:	0810a18b 	.word	0x0810a18b
 8109f08:	08109f73 	.word	0x08109f73
 8109f0c:	0810a18b 	.word	0x0810a18b
 8109f10:	0810a18b 	.word	0x0810a18b
 8109f14:	0810a18b 	.word	0x0810a18b
 8109f18:	0810a18b 	.word	0x0810a18b
 8109f1c:	0810a18b 	.word	0x0810a18b
 8109f20:	0810a18b 	.word	0x0810a18b
 8109f24:	0810a18b 	.word	0x0810a18b
 8109f28:	08109f79 	.word	0x08109f79
 8109f2c:	0810a18b 	.word	0x0810a18b
 8109f30:	0810a18b 	.word	0x0810a18b
 8109f34:	0810a18b 	.word	0x0810a18b
 8109f38:	0810a18b 	.word	0x0810a18b
 8109f3c:	0810a18b 	.word	0x0810a18b
 8109f40:	0810a18b 	.word	0x0810a18b
 8109f44:	0810a18b 	.word	0x0810a18b
 8109f48:	08109f7f 	.word	0x08109f7f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109f4c:	4b94      	ldr	r3, [pc, #592]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f4e:	681b      	ldr	r3, [r3, #0]
 8109f50:	f003 0320 	and.w	r3, r3, #32
 8109f54:	2b00      	cmp	r3, #0
 8109f56:	d009      	beq.n	8109f6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109f58:	4b91      	ldr	r3, [pc, #580]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f5a:	681b      	ldr	r3, [r3, #0]
 8109f5c:	08db      	lsrs	r3, r3, #3
 8109f5e:	f003 0303 	and.w	r3, r3, #3
 8109f62:	4a90      	ldr	r2, [pc, #576]	; (810a1a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109f64:	fa22 f303 	lsr.w	r3, r2, r3
 8109f68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8109f6a:	e111      	b.n	810a190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8109f6c:	4b8d      	ldr	r3, [pc, #564]	; (810a1a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109f6e:	61bb      	str	r3, [r7, #24]
    break;
 8109f70:	e10e      	b.n	810a190 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8109f72:	4b8d      	ldr	r3, [pc, #564]	; (810a1a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109f74:	61bb      	str	r3, [r7, #24]
    break;
 8109f76:	e10b      	b.n	810a190 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8109f78:	4b8c      	ldr	r3, [pc, #560]	; (810a1ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8109f7a:	61bb      	str	r3, [r7, #24]
    break;
 8109f7c:	e108      	b.n	810a190 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109f7e:	4b88      	ldr	r3, [pc, #544]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f82:	f003 0303 	and.w	r3, r3, #3
 8109f86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8109f88:	4b85      	ldr	r3, [pc, #532]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f8c:	091b      	lsrs	r3, r3, #4
 8109f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109f92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8109f94:	4b82      	ldr	r3, [pc, #520]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f98:	f003 0301 	and.w	r3, r3, #1
 8109f9c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8109f9e:	4b80      	ldr	r3, [pc, #512]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109fa2:	08db      	lsrs	r3, r3, #3
 8109fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109fa8:	68fa      	ldr	r2, [r7, #12]
 8109faa:	fb02 f303 	mul.w	r3, r2, r3
 8109fae:	ee07 3a90 	vmov	s15, r3
 8109fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109fb6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8109fba:	693b      	ldr	r3, [r7, #16]
 8109fbc:	2b00      	cmp	r3, #0
 8109fbe:	f000 80e1 	beq.w	810a184 <HAL_RCC_GetSysClockFreq+0x2b8>
 8109fc2:	697b      	ldr	r3, [r7, #20]
 8109fc4:	2b02      	cmp	r3, #2
 8109fc6:	f000 8083 	beq.w	810a0d0 <HAL_RCC_GetSysClockFreq+0x204>
 8109fca:	697b      	ldr	r3, [r7, #20]
 8109fcc:	2b02      	cmp	r3, #2
 8109fce:	f200 80a1 	bhi.w	810a114 <HAL_RCC_GetSysClockFreq+0x248>
 8109fd2:	697b      	ldr	r3, [r7, #20]
 8109fd4:	2b00      	cmp	r3, #0
 8109fd6:	d003      	beq.n	8109fe0 <HAL_RCC_GetSysClockFreq+0x114>
 8109fd8:	697b      	ldr	r3, [r7, #20]
 8109fda:	2b01      	cmp	r3, #1
 8109fdc:	d056      	beq.n	810a08c <HAL_RCC_GetSysClockFreq+0x1c0>
 8109fde:	e099      	b.n	810a114 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109fe0:	4b6f      	ldr	r3, [pc, #444]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fe2:	681b      	ldr	r3, [r3, #0]
 8109fe4:	f003 0320 	and.w	r3, r3, #32
 8109fe8:	2b00      	cmp	r3, #0
 8109fea:	d02d      	beq.n	810a048 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109fec:	4b6c      	ldr	r3, [pc, #432]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fee:	681b      	ldr	r3, [r3, #0]
 8109ff0:	08db      	lsrs	r3, r3, #3
 8109ff2:	f003 0303 	and.w	r3, r3, #3
 8109ff6:	4a6b      	ldr	r2, [pc, #428]	; (810a1a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8109ffc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109ffe:	687b      	ldr	r3, [r7, #4]
 810a000:	ee07 3a90 	vmov	s15, r3
 810a004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a008:	693b      	ldr	r3, [r7, #16]
 810a00a:	ee07 3a90 	vmov	s15, r3
 810a00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a016:	4b62      	ldr	r3, [pc, #392]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a01e:	ee07 3a90 	vmov	s15, r3
 810a022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a026:	ed97 6a02 	vldr	s12, [r7, #8]
 810a02a:	eddf 5a61 	vldr	s11, [pc, #388]	; 810a1b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810a046:	e087      	b.n	810a158 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810a048:	693b      	ldr	r3, [r7, #16]
 810a04a:	ee07 3a90 	vmov	s15, r3
 810a04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a052:	eddf 6a58 	vldr	s13, [pc, #352]	; 810a1b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 810a056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a05a:	4b51      	ldr	r3, [pc, #324]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a062:	ee07 3a90 	vmov	s15, r3
 810a066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a06a:	ed97 6a02 	vldr	s12, [r7, #8]
 810a06e:	eddf 5a50 	vldr	s11, [pc, #320]	; 810a1b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a07a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a082:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a08a:	e065      	b.n	810a158 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810a08c:	693b      	ldr	r3, [r7, #16]
 810a08e:	ee07 3a90 	vmov	s15, r3
 810a092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a096:	eddf 6a48 	vldr	s13, [pc, #288]	; 810a1b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 810a09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a09e:	4b40      	ldr	r3, [pc, #256]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a0a6:	ee07 3a90 	vmov	s15, r3
 810a0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a0ae:	ed97 6a02 	vldr	s12, [r7, #8]
 810a0b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810a1b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a0ce:	e043      	b.n	810a158 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810a0d0:	693b      	ldr	r3, [r7, #16]
 810a0d2:	ee07 3a90 	vmov	s15, r3
 810a0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a0da:	eddf 6a38 	vldr	s13, [pc, #224]	; 810a1bc <HAL_RCC_GetSysClockFreq+0x2f0>
 810a0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a0e2:	4b2f      	ldr	r3, [pc, #188]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a0ea:	ee07 3a90 	vmov	s15, r3
 810a0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a0f2:	ed97 6a02 	vldr	s12, [r7, #8]
 810a0f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810a1b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a10e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a112:	e021      	b.n	810a158 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810a114:	693b      	ldr	r3, [r7, #16]
 810a116:	ee07 3a90 	vmov	s15, r3
 810a11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a11e:	eddf 6a26 	vldr	s13, [pc, #152]	; 810a1b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 810a122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a126:	4b1e      	ldr	r3, [pc, #120]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a12e:	ee07 3a90 	vmov	s15, r3
 810a132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a136:	ed97 6a02 	vldr	s12, [r7, #8]
 810a13a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810a1b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a156:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810a158:	4b11      	ldr	r3, [pc, #68]	; (810a1a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a15c:	0a5b      	lsrs	r3, r3, #9
 810a15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a162:	3301      	adds	r3, #1
 810a164:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810a166:	683b      	ldr	r3, [r7, #0]
 810a168:	ee07 3a90 	vmov	s15, r3
 810a16c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810a170:	edd7 6a07 	vldr	s13, [r7, #28]
 810a174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a17c:	ee17 3a90 	vmov	r3, s15
 810a180:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810a182:	e005      	b.n	810a190 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810a184:	2300      	movs	r3, #0
 810a186:	61bb      	str	r3, [r7, #24]
    break;
 810a188:	e002      	b.n	810a190 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810a18a:	4b07      	ldr	r3, [pc, #28]	; (810a1a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810a18c:	61bb      	str	r3, [r7, #24]
    break;
 810a18e:	bf00      	nop
  }

  return sysclockfreq;
 810a190:	69bb      	ldr	r3, [r7, #24]
}
 810a192:	4618      	mov	r0, r3
 810a194:	3724      	adds	r7, #36	; 0x24
 810a196:	46bd      	mov	sp, r7
 810a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a19c:	4770      	bx	lr
 810a19e:	bf00      	nop
 810a1a0:	58024400 	.word	0x58024400
 810a1a4:	03d09000 	.word	0x03d09000
 810a1a8:	003d0900 	.word	0x003d0900
 810a1ac:	00f42400 	.word	0x00f42400
 810a1b0:	46000000 	.word	0x46000000
 810a1b4:	4c742400 	.word	0x4c742400
 810a1b8:	4a742400 	.word	0x4a742400
 810a1bc:	4b742400 	.word	0x4b742400

0810a1c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810a1c0:	b580      	push	{r7, lr}
 810a1c2:	b082      	sub	sp, #8
 810a1c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810a1c6:	f7ff fe81 	bl	8109ecc <HAL_RCC_GetSysClockFreq>
 810a1ca:	4602      	mov	r2, r0
 810a1cc:	4b11      	ldr	r3, [pc, #68]	; (810a214 <HAL_RCC_GetHCLKFreq+0x54>)
 810a1ce:	699b      	ldr	r3, [r3, #24]
 810a1d0:	0a1b      	lsrs	r3, r3, #8
 810a1d2:	f003 030f 	and.w	r3, r3, #15
 810a1d6:	4910      	ldr	r1, [pc, #64]	; (810a218 <HAL_RCC_GetHCLKFreq+0x58>)
 810a1d8:	5ccb      	ldrb	r3, [r1, r3]
 810a1da:	f003 031f 	and.w	r3, r3, #31
 810a1de:	fa22 f303 	lsr.w	r3, r2, r3
 810a1e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810a1e4:	4b0b      	ldr	r3, [pc, #44]	; (810a214 <HAL_RCC_GetHCLKFreq+0x54>)
 810a1e6:	699b      	ldr	r3, [r3, #24]
 810a1e8:	f003 030f 	and.w	r3, r3, #15
 810a1ec:	4a0a      	ldr	r2, [pc, #40]	; (810a218 <HAL_RCC_GetHCLKFreq+0x58>)
 810a1ee:	5cd3      	ldrb	r3, [r2, r3]
 810a1f0:	f003 031f 	and.w	r3, r3, #31
 810a1f4:	687a      	ldr	r2, [r7, #4]
 810a1f6:	fa22 f303 	lsr.w	r3, r2, r3
 810a1fa:	4a08      	ldr	r2, [pc, #32]	; (810a21c <HAL_RCC_GetHCLKFreq+0x5c>)
 810a1fc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810a1fe:	4b07      	ldr	r3, [pc, #28]	; (810a21c <HAL_RCC_GetHCLKFreq+0x5c>)
 810a200:	681b      	ldr	r3, [r3, #0]
 810a202:	4a07      	ldr	r2, [pc, #28]	; (810a220 <HAL_RCC_GetHCLKFreq+0x60>)
 810a204:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810a206:	4b05      	ldr	r3, [pc, #20]	; (810a21c <HAL_RCC_GetHCLKFreq+0x5c>)
 810a208:	681b      	ldr	r3, [r3, #0]
}
 810a20a:	4618      	mov	r0, r3
 810a20c:	3708      	adds	r7, #8
 810a20e:	46bd      	mov	sp, r7
 810a210:	bd80      	pop	{r7, pc}
 810a212:	bf00      	nop
 810a214:	58024400 	.word	0x58024400
 810a218:	0810fddc 	.word	0x0810fddc
 810a21c:	10000004 	.word	0x10000004
 810a220:	10000000 	.word	0x10000000

0810a224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810a224:	b580      	push	{r7, lr}
 810a226:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810a228:	f7ff ffca 	bl	810a1c0 <HAL_RCC_GetHCLKFreq>
 810a22c:	4602      	mov	r2, r0
 810a22e:	4b06      	ldr	r3, [pc, #24]	; (810a248 <HAL_RCC_GetPCLK1Freq+0x24>)
 810a230:	69db      	ldr	r3, [r3, #28]
 810a232:	091b      	lsrs	r3, r3, #4
 810a234:	f003 0307 	and.w	r3, r3, #7
 810a238:	4904      	ldr	r1, [pc, #16]	; (810a24c <HAL_RCC_GetPCLK1Freq+0x28>)
 810a23a:	5ccb      	ldrb	r3, [r1, r3]
 810a23c:	f003 031f 	and.w	r3, r3, #31
 810a240:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810a244:	4618      	mov	r0, r3
 810a246:	bd80      	pop	{r7, pc}
 810a248:	58024400 	.word	0x58024400
 810a24c:	0810fddc 	.word	0x0810fddc

0810a250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810a250:	b580      	push	{r7, lr}
 810a252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810a254:	f7ff ffb4 	bl	810a1c0 <HAL_RCC_GetHCLKFreq>
 810a258:	4602      	mov	r2, r0
 810a25a:	4b06      	ldr	r3, [pc, #24]	; (810a274 <HAL_RCC_GetPCLK2Freq+0x24>)
 810a25c:	69db      	ldr	r3, [r3, #28]
 810a25e:	0a1b      	lsrs	r3, r3, #8
 810a260:	f003 0307 	and.w	r3, r3, #7
 810a264:	4904      	ldr	r1, [pc, #16]	; (810a278 <HAL_RCC_GetPCLK2Freq+0x28>)
 810a266:	5ccb      	ldrb	r3, [r1, r3]
 810a268:	f003 031f 	and.w	r3, r3, #31
 810a26c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810a270:	4618      	mov	r0, r3
 810a272:	bd80      	pop	{r7, pc}
 810a274:	58024400 	.word	0x58024400
 810a278:	0810fddc 	.word	0x0810fddc

0810a27c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810a27c:	b580      	push	{r7, lr}
 810a27e:	b086      	sub	sp, #24
 810a280:	af00      	add	r7, sp, #0
 810a282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810a284:	2300      	movs	r3, #0
 810a286:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810a288:	2300      	movs	r3, #0
 810a28a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810a28c:	687b      	ldr	r3, [r7, #4]
 810a28e:	681b      	ldr	r3, [r3, #0]
 810a290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a294:	2b00      	cmp	r3, #0
 810a296:	d03f      	beq.n	810a318 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810a298:	687b      	ldr	r3, [r7, #4]
 810a29a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a29c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a2a0:	d02a      	beq.n	810a2f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810a2a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a2a6:	d824      	bhi.n	810a2f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810a2a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a2ac:	d018      	beq.n	810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810a2ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a2b2:	d81e      	bhi.n	810a2f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810a2b4:	2b00      	cmp	r3, #0
 810a2b6:	d003      	beq.n	810a2c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810a2b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a2bc:	d007      	beq.n	810a2ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 810a2be:	e018      	b.n	810a2f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a2c0:	4bab      	ldr	r3, [pc, #684]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2c4:	4aaa      	ldr	r2, [pc, #680]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a2c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a2ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810a2cc:	e015      	b.n	810a2fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810a2ce:	687b      	ldr	r3, [r7, #4]
 810a2d0:	3304      	adds	r3, #4
 810a2d2:	2102      	movs	r1, #2
 810a2d4:	4618      	mov	r0, r3
 810a2d6:	f001 fff3 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a2da:	4603      	mov	r3, r0
 810a2dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810a2de:	e00c      	b.n	810a2fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a2e0:	687b      	ldr	r3, [r7, #4]
 810a2e2:	3324      	adds	r3, #36	; 0x24
 810a2e4:	2102      	movs	r1, #2
 810a2e6:	4618      	mov	r0, r3
 810a2e8:	f002 f89c 	bl	810c424 <RCCEx_PLL3_Config>
 810a2ec:	4603      	mov	r3, r0
 810a2ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810a2f0:	e003      	b.n	810a2fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a2f2:	2301      	movs	r3, #1
 810a2f4:	75fb      	strb	r3, [r7, #23]
      break;
 810a2f6:	e000      	b.n	810a2fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 810a2f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a2fa:	7dfb      	ldrb	r3, [r7, #23]
 810a2fc:	2b00      	cmp	r3, #0
 810a2fe:	d109      	bne.n	810a314 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810a300:	4b9b      	ldr	r3, [pc, #620]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a304:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810a308:	687b      	ldr	r3, [r7, #4]
 810a30a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a30c:	4998      	ldr	r1, [pc, #608]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a30e:	4313      	orrs	r3, r2
 810a310:	650b      	str	r3, [r1, #80]	; 0x50
 810a312:	e001      	b.n	810a318 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a314:	7dfb      	ldrb	r3, [r7, #23]
 810a316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810a318:	687b      	ldr	r3, [r7, #4]
 810a31a:	681b      	ldr	r3, [r3, #0]
 810a31c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a320:	2b00      	cmp	r3, #0
 810a322:	d03d      	beq.n	810a3a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 810a324:	687b      	ldr	r3, [r7, #4]
 810a326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a328:	2b04      	cmp	r3, #4
 810a32a:	d826      	bhi.n	810a37a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 810a32c:	a201      	add	r2, pc, #4	; (adr r2, 810a334 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810a32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a332:	bf00      	nop
 810a334:	0810a349 	.word	0x0810a349
 810a338:	0810a357 	.word	0x0810a357
 810a33c:	0810a369 	.word	0x0810a369
 810a340:	0810a381 	.word	0x0810a381
 810a344:	0810a381 	.word	0x0810a381
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a348:	4b89      	ldr	r3, [pc, #548]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a34c:	4a88      	ldr	r2, [pc, #544]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810a354:	e015      	b.n	810a382 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a356:	687b      	ldr	r3, [r7, #4]
 810a358:	3304      	adds	r3, #4
 810a35a:	2100      	movs	r1, #0
 810a35c:	4618      	mov	r0, r3
 810a35e:	f001 ffaf 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a362:	4603      	mov	r3, r0
 810a364:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810a366:	e00c      	b.n	810a382 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810a368:	687b      	ldr	r3, [r7, #4]
 810a36a:	3324      	adds	r3, #36	; 0x24
 810a36c:	2100      	movs	r1, #0
 810a36e:	4618      	mov	r0, r3
 810a370:	f002 f858 	bl	810c424 <RCCEx_PLL3_Config>
 810a374:	4603      	mov	r3, r0
 810a376:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810a378:	e003      	b.n	810a382 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a37a:	2301      	movs	r3, #1
 810a37c:	75fb      	strb	r3, [r7, #23]
      break;
 810a37e:	e000      	b.n	810a382 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 810a380:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a382:	7dfb      	ldrb	r3, [r7, #23]
 810a384:	2b00      	cmp	r3, #0
 810a386:	d109      	bne.n	810a39c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810a388:	4b79      	ldr	r3, [pc, #484]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a38c:	f023 0207 	bic.w	r2, r3, #7
 810a390:	687b      	ldr	r3, [r7, #4]
 810a392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a394:	4976      	ldr	r1, [pc, #472]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a396:	4313      	orrs	r3, r2
 810a398:	650b      	str	r3, [r1, #80]	; 0x50
 810a39a:	e001      	b.n	810a3a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a39c:	7dfb      	ldrb	r3, [r7, #23]
 810a39e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810a3a0:	687b      	ldr	r3, [r7, #4]
 810a3a2:	681b      	ldr	r3, [r3, #0]
 810a3a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810a3a8:	2b00      	cmp	r3, #0
 810a3aa:	d042      	beq.n	810a432 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810a3ac:	687b      	ldr	r3, [r7, #4]
 810a3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a3b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a3b4:	d02b      	beq.n	810a40e <HAL_RCCEx_PeriphCLKConfig+0x192>
 810a3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a3ba:	d825      	bhi.n	810a408 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810a3bc:	2bc0      	cmp	r3, #192	; 0xc0
 810a3be:	d028      	beq.n	810a412 <HAL_RCCEx_PeriphCLKConfig+0x196>
 810a3c0:	2bc0      	cmp	r3, #192	; 0xc0
 810a3c2:	d821      	bhi.n	810a408 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810a3c4:	2b80      	cmp	r3, #128	; 0x80
 810a3c6:	d016      	beq.n	810a3f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 810a3c8:	2b80      	cmp	r3, #128	; 0x80
 810a3ca:	d81d      	bhi.n	810a408 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810a3cc:	2b00      	cmp	r3, #0
 810a3ce:	d002      	beq.n	810a3d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 810a3d0:	2b40      	cmp	r3, #64	; 0x40
 810a3d2:	d007      	beq.n	810a3e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 810a3d4:	e018      	b.n	810a408 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a3d6:	4b66      	ldr	r3, [pc, #408]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a3da:	4a65      	ldr	r2, [pc, #404]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a3dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810a3e2:	e017      	b.n	810a414 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a3e4:	687b      	ldr	r3, [r7, #4]
 810a3e6:	3304      	adds	r3, #4
 810a3e8:	2100      	movs	r1, #0
 810a3ea:	4618      	mov	r0, r3
 810a3ec:	f001 ff68 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a3f0:	4603      	mov	r3, r0
 810a3f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810a3f4:	e00e      	b.n	810a414 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810a3f6:	687b      	ldr	r3, [r7, #4]
 810a3f8:	3324      	adds	r3, #36	; 0x24
 810a3fa:	2100      	movs	r1, #0
 810a3fc:	4618      	mov	r0, r3
 810a3fe:	f002 f811 	bl	810c424 <RCCEx_PLL3_Config>
 810a402:	4603      	mov	r3, r0
 810a404:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810a406:	e005      	b.n	810a414 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a408:	2301      	movs	r3, #1
 810a40a:	75fb      	strb	r3, [r7, #23]
      break;
 810a40c:	e002      	b.n	810a414 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810a40e:	bf00      	nop
 810a410:	e000      	b.n	810a414 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810a412:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a414:	7dfb      	ldrb	r3, [r7, #23]
 810a416:	2b00      	cmp	r3, #0
 810a418:	d109      	bne.n	810a42e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810a41a:	4b55      	ldr	r3, [pc, #340]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a41e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810a422:	687b      	ldr	r3, [r7, #4]
 810a424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a426:	4952      	ldr	r1, [pc, #328]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a428:	4313      	orrs	r3, r2
 810a42a:	650b      	str	r3, [r1, #80]	; 0x50
 810a42c:	e001      	b.n	810a432 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a42e:	7dfb      	ldrb	r3, [r7, #23]
 810a430:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810a432:	687b      	ldr	r3, [r7, #4]
 810a434:	681b      	ldr	r3, [r3, #0]
 810a436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810a43a:	2b00      	cmp	r3, #0
 810a43c:	d049      	beq.n	810a4d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810a43e:	687b      	ldr	r3, [r7, #4]
 810a440:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810a444:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810a448:	d030      	beq.n	810a4ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 810a44a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810a44e:	d82a      	bhi.n	810a4a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810a450:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810a454:	d02c      	beq.n	810a4b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810a456:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810a45a:	d824      	bhi.n	810a4a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810a45c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a460:	d018      	beq.n	810a494 <HAL_RCCEx_PeriphCLKConfig+0x218>
 810a462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a466:	d81e      	bhi.n	810a4a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810a468:	2b00      	cmp	r3, #0
 810a46a:	d003      	beq.n	810a474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810a46c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a470:	d007      	beq.n	810a482 <HAL_RCCEx_PeriphCLKConfig+0x206>
 810a472:	e018      	b.n	810a4a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a474:	4b3e      	ldr	r3, [pc, #248]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a478:	4a3d      	ldr	r2, [pc, #244]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a47a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a47e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810a480:	e017      	b.n	810a4b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a482:	687b      	ldr	r3, [r7, #4]
 810a484:	3304      	adds	r3, #4
 810a486:	2100      	movs	r1, #0
 810a488:	4618      	mov	r0, r3
 810a48a:	f001 ff19 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a48e:	4603      	mov	r3, r0
 810a490:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810a492:	e00e      	b.n	810a4b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810a494:	687b      	ldr	r3, [r7, #4]
 810a496:	3324      	adds	r3, #36	; 0x24
 810a498:	2100      	movs	r1, #0
 810a49a:	4618      	mov	r0, r3
 810a49c:	f001 ffc2 	bl	810c424 <RCCEx_PLL3_Config>
 810a4a0:	4603      	mov	r3, r0
 810a4a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810a4a4:	e005      	b.n	810a4b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810a4a6:	2301      	movs	r3, #1
 810a4a8:	75fb      	strb	r3, [r7, #23]
      break;
 810a4aa:	e002      	b.n	810a4b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810a4ac:	bf00      	nop
 810a4ae:	e000      	b.n	810a4b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810a4b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a4b2:	7dfb      	ldrb	r3, [r7, #23]
 810a4b4:	2b00      	cmp	r3, #0
 810a4b6:	d10a      	bne.n	810a4ce <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810a4b8:	4b2d      	ldr	r3, [pc, #180]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a4bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 810a4c0:	687b      	ldr	r3, [r7, #4]
 810a4c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810a4c6:	492a      	ldr	r1, [pc, #168]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a4c8:	4313      	orrs	r3, r2
 810a4ca:	658b      	str	r3, [r1, #88]	; 0x58
 810a4cc:	e001      	b.n	810a4d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a4ce:	7dfb      	ldrb	r3, [r7, #23]
 810a4d0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810a4d2:	687b      	ldr	r3, [r7, #4]
 810a4d4:	681b      	ldr	r3, [r3, #0]
 810a4d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a4da:	2b00      	cmp	r3, #0
 810a4dc:	d04c      	beq.n	810a578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810a4de:	687b      	ldr	r3, [r7, #4]
 810a4e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810a4e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810a4e8:	d030      	beq.n	810a54c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810a4ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810a4ee:	d82a      	bhi.n	810a546 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810a4f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810a4f4:	d02c      	beq.n	810a550 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 810a4f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810a4fa:	d824      	bhi.n	810a546 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810a4fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810a500:	d018      	beq.n	810a534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810a502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810a506:	d81e      	bhi.n	810a546 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810a508:	2b00      	cmp	r3, #0
 810a50a:	d003      	beq.n	810a514 <HAL_RCCEx_PeriphCLKConfig+0x298>
 810a50c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810a510:	d007      	beq.n	810a522 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810a512:	e018      	b.n	810a546 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a514:	4b16      	ldr	r3, [pc, #88]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a518:	4a15      	ldr	r2, [pc, #84]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a51a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a51e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810a520:	e017      	b.n	810a552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a522:	687b      	ldr	r3, [r7, #4]
 810a524:	3304      	adds	r3, #4
 810a526:	2100      	movs	r1, #0
 810a528:	4618      	mov	r0, r3
 810a52a:	f001 fec9 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a52e:	4603      	mov	r3, r0
 810a530:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810a532:	e00e      	b.n	810a552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a534:	687b      	ldr	r3, [r7, #4]
 810a536:	3324      	adds	r3, #36	; 0x24
 810a538:	2100      	movs	r1, #0
 810a53a:	4618      	mov	r0, r3
 810a53c:	f001 ff72 	bl	810c424 <RCCEx_PLL3_Config>
 810a540:	4603      	mov	r3, r0
 810a542:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810a544:	e005      	b.n	810a552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810a546:	2301      	movs	r3, #1
 810a548:	75fb      	strb	r3, [r7, #23]
      break;
 810a54a:	e002      	b.n	810a552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810a54c:	bf00      	nop
 810a54e:	e000      	b.n	810a552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810a550:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a552:	7dfb      	ldrb	r3, [r7, #23]
 810a554:	2b00      	cmp	r3, #0
 810a556:	d10d      	bne.n	810a574 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810a558:	4b05      	ldr	r3, [pc, #20]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a55a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a55c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 810a560:	687b      	ldr	r3, [r7, #4]
 810a562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810a566:	4902      	ldr	r1, [pc, #8]	; (810a570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810a568:	4313      	orrs	r3, r2
 810a56a:	658b      	str	r3, [r1, #88]	; 0x58
 810a56c:	e004      	b.n	810a578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810a56e:	bf00      	nop
 810a570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a574:	7dfb      	ldrb	r3, [r7, #23]
 810a576:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810a578:	687b      	ldr	r3, [r7, #4]
 810a57a:	681b      	ldr	r3, [r3, #0]
 810a57c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810a580:	2b00      	cmp	r3, #0
 810a582:	d032      	beq.n	810a5ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a588:	2b30      	cmp	r3, #48	; 0x30
 810a58a:	d01c      	beq.n	810a5c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810a58c:	2b30      	cmp	r3, #48	; 0x30
 810a58e:	d817      	bhi.n	810a5c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 810a590:	2b20      	cmp	r3, #32
 810a592:	d00c      	beq.n	810a5ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 810a594:	2b20      	cmp	r3, #32
 810a596:	d813      	bhi.n	810a5c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 810a598:	2b00      	cmp	r3, #0
 810a59a:	d016      	beq.n	810a5ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 810a59c:	2b10      	cmp	r3, #16
 810a59e:	d10f      	bne.n	810a5c0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a5a0:	4baf      	ldr	r3, [pc, #700]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a5a4:	4aae      	ldr	r2, [pc, #696]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a5a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a5aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810a5ac:	e00e      	b.n	810a5cc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810a5ae:	687b      	ldr	r3, [r7, #4]
 810a5b0:	3304      	adds	r3, #4
 810a5b2:	2102      	movs	r1, #2
 810a5b4:	4618      	mov	r0, r3
 810a5b6:	f001 fe83 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a5ba:	4603      	mov	r3, r0
 810a5bc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810a5be:	e005      	b.n	810a5cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810a5c0:	2301      	movs	r3, #1
 810a5c2:	75fb      	strb	r3, [r7, #23]
      break;
 810a5c4:	e002      	b.n	810a5cc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810a5c6:	bf00      	nop
 810a5c8:	e000      	b.n	810a5cc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810a5ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a5cc:	7dfb      	ldrb	r3, [r7, #23]
 810a5ce:	2b00      	cmp	r3, #0
 810a5d0:	d109      	bne.n	810a5e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810a5d2:	4ba3      	ldr	r3, [pc, #652]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a5d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810a5da:	687b      	ldr	r3, [r7, #4]
 810a5dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a5de:	49a0      	ldr	r1, [pc, #640]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a5e0:	4313      	orrs	r3, r2
 810a5e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 810a5e4:	e001      	b.n	810a5ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a5e6:	7dfb      	ldrb	r3, [r7, #23]
 810a5e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810a5f2:	2b00      	cmp	r3, #0
 810a5f4:	d047      	beq.n	810a686 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810a5f6:	687b      	ldr	r3, [r7, #4]
 810a5f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a5fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a5fe:	d030      	beq.n	810a662 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 810a600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a604:	d82a      	bhi.n	810a65c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810a606:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810a60a:	d02c      	beq.n	810a666 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 810a60c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810a610:	d824      	bhi.n	810a65c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810a612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a616:	d018      	beq.n	810a64a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 810a618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a61c:	d81e      	bhi.n	810a65c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810a61e:	2b00      	cmp	r3, #0
 810a620:	d003      	beq.n	810a62a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810a622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a626:	d007      	beq.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 810a628:	e018      	b.n	810a65c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a62a:	4b8d      	ldr	r3, [pc, #564]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a62e:	4a8c      	ldr	r2, [pc, #560]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810a636:	e017      	b.n	810a668 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a638:	687b      	ldr	r3, [r7, #4]
 810a63a:	3304      	adds	r3, #4
 810a63c:	2100      	movs	r1, #0
 810a63e:	4618      	mov	r0, r3
 810a640:	f001 fe3e 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a644:	4603      	mov	r3, r0
 810a646:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810a648:	e00e      	b.n	810a668 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810a64a:	687b      	ldr	r3, [r7, #4]
 810a64c:	3324      	adds	r3, #36	; 0x24
 810a64e:	2100      	movs	r1, #0
 810a650:	4618      	mov	r0, r3
 810a652:	f001 fee7 	bl	810c424 <RCCEx_PLL3_Config>
 810a656:	4603      	mov	r3, r0
 810a658:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810a65a:	e005      	b.n	810a668 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a65c:	2301      	movs	r3, #1
 810a65e:	75fb      	strb	r3, [r7, #23]
      break;
 810a660:	e002      	b.n	810a668 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810a662:	bf00      	nop
 810a664:	e000      	b.n	810a668 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810a666:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a668:	7dfb      	ldrb	r3, [r7, #23]
 810a66a:	2b00      	cmp	r3, #0
 810a66c:	d109      	bne.n	810a682 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810a66e:	4b7c      	ldr	r3, [pc, #496]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a672:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810a676:	687b      	ldr	r3, [r7, #4]
 810a678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a67a:	4979      	ldr	r1, [pc, #484]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a67c:	4313      	orrs	r3, r2
 810a67e:	650b      	str	r3, [r1, #80]	; 0x50
 810a680:	e001      	b.n	810a686 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a682:	7dfb      	ldrb	r3, [r7, #23]
 810a684:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810a686:	687b      	ldr	r3, [r7, #4]
 810a688:	681b      	ldr	r3, [r3, #0]
 810a68a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810a68e:	2b00      	cmp	r3, #0
 810a690:	d049      	beq.n	810a726 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810a692:	687b      	ldr	r3, [r7, #4]
 810a694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810a696:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810a69a:	d02e      	beq.n	810a6fa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 810a69c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810a6a0:	d828      	bhi.n	810a6f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a6a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810a6a6:	d02a      	beq.n	810a6fe <HAL_RCCEx_PeriphCLKConfig+0x482>
 810a6a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810a6ac:	d822      	bhi.n	810a6f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a6ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810a6b2:	d026      	beq.n	810a702 <HAL_RCCEx_PeriphCLKConfig+0x486>
 810a6b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810a6b8:	d81c      	bhi.n	810a6f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a6ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a6be:	d010      	beq.n	810a6e2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 810a6c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a6c4:	d816      	bhi.n	810a6f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a6c6:	2b00      	cmp	r3, #0
 810a6c8:	d01d      	beq.n	810a706 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810a6ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a6ce:	d111      	bne.n	810a6f4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a6d0:	687b      	ldr	r3, [r7, #4]
 810a6d2:	3304      	adds	r3, #4
 810a6d4:	2101      	movs	r1, #1
 810a6d6:	4618      	mov	r0, r3
 810a6d8:	f001 fdf2 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a6dc:	4603      	mov	r3, r0
 810a6de:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810a6e0:	e012      	b.n	810a708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a6e2:	687b      	ldr	r3, [r7, #4]
 810a6e4:	3324      	adds	r3, #36	; 0x24
 810a6e6:	2101      	movs	r1, #1
 810a6e8:	4618      	mov	r0, r3
 810a6ea:	f001 fe9b 	bl	810c424 <RCCEx_PLL3_Config>
 810a6ee:	4603      	mov	r3, r0
 810a6f0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810a6f2:	e009      	b.n	810a708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a6f4:	2301      	movs	r3, #1
 810a6f6:	75fb      	strb	r3, [r7, #23]
      break;
 810a6f8:	e006      	b.n	810a708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a6fa:	bf00      	nop
 810a6fc:	e004      	b.n	810a708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a6fe:	bf00      	nop
 810a700:	e002      	b.n	810a708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a702:	bf00      	nop
 810a704:	e000      	b.n	810a708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a706:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a708:	7dfb      	ldrb	r3, [r7, #23]
 810a70a:	2b00      	cmp	r3, #0
 810a70c:	d109      	bne.n	810a722 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810a70e:	4b54      	ldr	r3, [pc, #336]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a712:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810a716:	687b      	ldr	r3, [r7, #4]
 810a718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810a71a:	4951      	ldr	r1, [pc, #324]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a71c:	4313      	orrs	r3, r2
 810a71e:	650b      	str	r3, [r1, #80]	; 0x50
 810a720:	e001      	b.n	810a726 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a722:	7dfb      	ldrb	r3, [r7, #23]
 810a724:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810a726:	687b      	ldr	r3, [r7, #4]
 810a728:	681b      	ldr	r3, [r3, #0]
 810a72a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810a72e:	2b00      	cmp	r3, #0
 810a730:	d04b      	beq.n	810a7ca <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810a732:	687b      	ldr	r3, [r7, #4]
 810a734:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810a738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a73c:	d02e      	beq.n	810a79c <HAL_RCCEx_PeriphCLKConfig+0x520>
 810a73e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a742:	d828      	bhi.n	810a796 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a748:	d02a      	beq.n	810a7a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810a74a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a74e:	d822      	bhi.n	810a796 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a750:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a754:	d026      	beq.n	810a7a4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 810a756:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a75a:	d81c      	bhi.n	810a796 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a75c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a760:	d010      	beq.n	810a784 <HAL_RCCEx_PeriphCLKConfig+0x508>
 810a762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a766:	d816      	bhi.n	810a796 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a768:	2b00      	cmp	r3, #0
 810a76a:	d01d      	beq.n	810a7a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810a76c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a770:	d111      	bne.n	810a796 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a772:	687b      	ldr	r3, [r7, #4]
 810a774:	3304      	adds	r3, #4
 810a776:	2101      	movs	r1, #1
 810a778:	4618      	mov	r0, r3
 810a77a:	f001 fda1 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a77e:	4603      	mov	r3, r0
 810a780:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810a782:	e012      	b.n	810a7aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a784:	687b      	ldr	r3, [r7, #4]
 810a786:	3324      	adds	r3, #36	; 0x24
 810a788:	2101      	movs	r1, #1
 810a78a:	4618      	mov	r0, r3
 810a78c:	f001 fe4a 	bl	810c424 <RCCEx_PLL3_Config>
 810a790:	4603      	mov	r3, r0
 810a792:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810a794:	e009      	b.n	810a7aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810a796:	2301      	movs	r3, #1
 810a798:	75fb      	strb	r3, [r7, #23]
      break;
 810a79a:	e006      	b.n	810a7aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a79c:	bf00      	nop
 810a79e:	e004      	b.n	810a7aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a7a0:	bf00      	nop
 810a7a2:	e002      	b.n	810a7aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a7a4:	bf00      	nop
 810a7a6:	e000      	b.n	810a7aa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a7a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a7aa:	7dfb      	ldrb	r3, [r7, #23]
 810a7ac:	2b00      	cmp	r3, #0
 810a7ae:	d10a      	bne.n	810a7c6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810a7b0:	4b2b      	ldr	r3, [pc, #172]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a7b4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810a7b8:	687b      	ldr	r3, [r7, #4]
 810a7ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810a7be:	4928      	ldr	r1, [pc, #160]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a7c0:	4313      	orrs	r3, r2
 810a7c2:	658b      	str	r3, [r1, #88]	; 0x58
 810a7c4:	e001      	b.n	810a7ca <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a7c6:	7dfb      	ldrb	r3, [r7, #23]
 810a7c8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810a7ca:	687b      	ldr	r3, [r7, #4]
 810a7cc:	681b      	ldr	r3, [r3, #0]
 810a7ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810a7d2:	2b00      	cmp	r3, #0
 810a7d4:	d02f      	beq.n	810a836 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810a7d6:	687b      	ldr	r3, [r7, #4]
 810a7d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a7da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a7de:	d00e      	beq.n	810a7fe <HAL_RCCEx_PeriphCLKConfig+0x582>
 810a7e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a7e4:	d814      	bhi.n	810a810 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810a7e6:	2b00      	cmp	r3, #0
 810a7e8:	d015      	beq.n	810a816 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810a7ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a7ee:	d10f      	bne.n	810a810 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a7f0:	4b1b      	ldr	r3, [pc, #108]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a7f4:	4a1a      	ldr	r2, [pc, #104]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a7f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a7fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810a7fc:	e00c      	b.n	810a818 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a7fe:	687b      	ldr	r3, [r7, #4]
 810a800:	3304      	adds	r3, #4
 810a802:	2101      	movs	r1, #1
 810a804:	4618      	mov	r0, r3
 810a806:	f001 fd5b 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a80a:	4603      	mov	r3, r0
 810a80c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810a80e:	e003      	b.n	810a818 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a810:	2301      	movs	r3, #1
 810a812:	75fb      	strb	r3, [r7, #23]
      break;
 810a814:	e000      	b.n	810a818 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810a816:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a818:	7dfb      	ldrb	r3, [r7, #23]
 810a81a:	2b00      	cmp	r3, #0
 810a81c:	d109      	bne.n	810a832 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810a81e:	4b10      	ldr	r3, [pc, #64]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a822:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810a826:	687b      	ldr	r3, [r7, #4]
 810a828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a82a:	490d      	ldr	r1, [pc, #52]	; (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a82c:	4313      	orrs	r3, r2
 810a82e:	650b      	str	r3, [r1, #80]	; 0x50
 810a830:	e001      	b.n	810a836 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a832:	7dfb      	ldrb	r3, [r7, #23]
 810a834:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810a836:	687b      	ldr	r3, [r7, #4]
 810a838:	681b      	ldr	r3, [r3, #0]
 810a83a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810a83e:	2b00      	cmp	r3, #0
 810a840:	d033      	beq.n	810a8aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810a842:	687b      	ldr	r3, [r7, #4]
 810a844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a846:	2b03      	cmp	r3, #3
 810a848:	d81c      	bhi.n	810a884 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810a84a:	a201      	add	r2, pc, #4	; (adr r2, 810a850 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a850:	0810a88b 	.word	0x0810a88b
 810a854:	0810a865 	.word	0x0810a865
 810a858:	0810a873 	.word	0x0810a873
 810a85c:	0810a88b 	.word	0x0810a88b
 810a860:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a864:	4bb9      	ldr	r3, [pc, #740]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a868:	4ab8      	ldr	r2, [pc, #736]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a86a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a86e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 810a870:	e00c      	b.n	810a88c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810a872:	687b      	ldr	r3, [r7, #4]
 810a874:	3304      	adds	r3, #4
 810a876:	2102      	movs	r1, #2
 810a878:	4618      	mov	r0, r3
 810a87a:	f001 fd21 	bl	810c2c0 <RCCEx_PLL2_Config>
 810a87e:	4603      	mov	r3, r0
 810a880:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810a882:	e003      	b.n	810a88c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810a884:	2301      	movs	r3, #1
 810a886:	75fb      	strb	r3, [r7, #23]
      break;
 810a888:	e000      	b.n	810a88c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810a88a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a88c:	7dfb      	ldrb	r3, [r7, #23]
 810a88e:	2b00      	cmp	r3, #0
 810a890:	d109      	bne.n	810a8a6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810a892:	4bae      	ldr	r3, [pc, #696]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a896:	f023 0203 	bic.w	r2, r3, #3
 810a89a:	687b      	ldr	r3, [r7, #4]
 810a89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a89e:	49ab      	ldr	r1, [pc, #684]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a8a0:	4313      	orrs	r3, r2
 810a8a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 810a8a4:	e001      	b.n	810a8aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a8a6:	7dfb      	ldrb	r3, [r7, #23]
 810a8a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810a8aa:	687b      	ldr	r3, [r7, #4]
 810a8ac:	681b      	ldr	r3, [r3, #0]
 810a8ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a8b2:	2b00      	cmp	r3, #0
 810a8b4:	f000 8088 	beq.w	810a9c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810a8b8:	4ba5      	ldr	r3, [pc, #660]	; (810ab50 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810a8ba:	681b      	ldr	r3, [r3, #0]
 810a8bc:	4aa4      	ldr	r2, [pc, #656]	; (810ab50 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810a8be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810a8c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810a8c4:	f7f9 f914 	bl	8103af0 <HAL_GetTick>
 810a8c8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810a8ca:	e009      	b.n	810a8e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810a8cc:	f7f9 f910 	bl	8103af0 <HAL_GetTick>
 810a8d0:	4602      	mov	r2, r0
 810a8d2:	693b      	ldr	r3, [r7, #16]
 810a8d4:	1ad3      	subs	r3, r2, r3
 810a8d6:	2b64      	cmp	r3, #100	; 0x64
 810a8d8:	d902      	bls.n	810a8e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810a8da:	2303      	movs	r3, #3
 810a8dc:	75fb      	strb	r3, [r7, #23]
        break;
 810a8de:	e005      	b.n	810a8ec <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810a8e0:	4b9b      	ldr	r3, [pc, #620]	; (810ab50 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810a8e2:	681b      	ldr	r3, [r3, #0]
 810a8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a8e8:	2b00      	cmp	r3, #0
 810a8ea:	d0ef      	beq.n	810a8cc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810a8ec:	7dfb      	ldrb	r3, [r7, #23]
 810a8ee:	2b00      	cmp	r3, #0
 810a8f0:	d168      	bne.n	810a9c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810a8f2:	4b96      	ldr	r3, [pc, #600]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a8f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810a8f6:	687b      	ldr	r3, [r7, #4]
 810a8f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a8fc:	4053      	eors	r3, r2
 810a8fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810a902:	2b00      	cmp	r3, #0
 810a904:	d013      	beq.n	810a92e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810a906:	4b91      	ldr	r3, [pc, #580]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a90a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a90e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810a910:	4b8e      	ldr	r3, [pc, #568]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a914:	4a8d      	ldr	r2, [pc, #564]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810a91a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810a91c:	4b8b      	ldr	r3, [pc, #556]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a920:	4a8a      	ldr	r2, [pc, #552]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a926:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810a928:	4a88      	ldr	r2, [pc, #544]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a92a:	68fb      	ldr	r3, [r7, #12]
 810a92c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810a92e:	687b      	ldr	r3, [r7, #4]
 810a930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a938:	d115      	bne.n	810a966 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810a93a:	f7f9 f8d9 	bl	8103af0 <HAL_GetTick>
 810a93e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810a940:	e00b      	b.n	810a95a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810a942:	f7f9 f8d5 	bl	8103af0 <HAL_GetTick>
 810a946:	4602      	mov	r2, r0
 810a948:	693b      	ldr	r3, [r7, #16]
 810a94a:	1ad3      	subs	r3, r2, r3
 810a94c:	f241 3288 	movw	r2, #5000	; 0x1388
 810a950:	4293      	cmp	r3, r2
 810a952:	d902      	bls.n	810a95a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810a954:	2303      	movs	r3, #3
 810a956:	75fb      	strb	r3, [r7, #23]
            break;
 810a958:	e005      	b.n	810a966 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810a95a:	4b7c      	ldr	r3, [pc, #496]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a95e:	f003 0302 	and.w	r3, r3, #2
 810a962:	2b00      	cmp	r3, #0
 810a964:	d0ed      	beq.n	810a942 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810a966:	7dfb      	ldrb	r3, [r7, #23]
 810a968:	2b00      	cmp	r3, #0
 810a96a:	d128      	bne.n	810a9be <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810a96c:	687b      	ldr	r3, [r7, #4]
 810a96e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810a976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a97a:	d10f      	bne.n	810a99c <HAL_RCCEx_PeriphCLKConfig+0x720>
 810a97c:	4b73      	ldr	r3, [pc, #460]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a97e:	691b      	ldr	r3, [r3, #16]
 810a980:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810a984:	687b      	ldr	r3, [r7, #4]
 810a986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a98a:	091b      	lsrs	r3, r3, #4
 810a98c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810a990:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810a994:	496d      	ldr	r1, [pc, #436]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a996:	4313      	orrs	r3, r2
 810a998:	610b      	str	r3, [r1, #16]
 810a99a:	e005      	b.n	810a9a8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 810a99c:	4b6b      	ldr	r3, [pc, #428]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a99e:	691b      	ldr	r3, [r3, #16]
 810a9a0:	4a6a      	ldr	r2, [pc, #424]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a9a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810a9a6:	6113      	str	r3, [r2, #16]
 810a9a8:	4b68      	ldr	r3, [pc, #416]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a9aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810a9ac:	687b      	ldr	r3, [r7, #4]
 810a9ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a9b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810a9b6:	4965      	ldr	r1, [pc, #404]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a9b8:	4313      	orrs	r3, r2
 810a9ba:	670b      	str	r3, [r1, #112]	; 0x70
 810a9bc:	e004      	b.n	810a9c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810a9be:	7dfb      	ldrb	r3, [r7, #23]
 810a9c0:	75bb      	strb	r3, [r7, #22]
 810a9c2:	e001      	b.n	810a9c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a9c4:	7dfb      	ldrb	r3, [r7, #23]
 810a9c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810a9c8:	687b      	ldr	r3, [r7, #4]
 810a9ca:	681b      	ldr	r3, [r3, #0]
 810a9cc:	f003 0301 	and.w	r3, r3, #1
 810a9d0:	2b00      	cmp	r3, #0
 810a9d2:	d07e      	beq.n	810aad2 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810a9d4:	687b      	ldr	r3, [r7, #4]
 810a9d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a9d8:	2b28      	cmp	r3, #40	; 0x28
 810a9da:	d867      	bhi.n	810aaac <HAL_RCCEx_PeriphCLKConfig+0x830>
 810a9dc:	a201      	add	r2, pc, #4	; (adr r2, 810a9e4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a9e2:	bf00      	nop
 810a9e4:	0810aab3 	.word	0x0810aab3
 810a9e8:	0810aaad 	.word	0x0810aaad
 810a9ec:	0810aaad 	.word	0x0810aaad
 810a9f0:	0810aaad 	.word	0x0810aaad
 810a9f4:	0810aaad 	.word	0x0810aaad
 810a9f8:	0810aaad 	.word	0x0810aaad
 810a9fc:	0810aaad 	.word	0x0810aaad
 810aa00:	0810aaad 	.word	0x0810aaad
 810aa04:	0810aa89 	.word	0x0810aa89
 810aa08:	0810aaad 	.word	0x0810aaad
 810aa0c:	0810aaad 	.word	0x0810aaad
 810aa10:	0810aaad 	.word	0x0810aaad
 810aa14:	0810aaad 	.word	0x0810aaad
 810aa18:	0810aaad 	.word	0x0810aaad
 810aa1c:	0810aaad 	.word	0x0810aaad
 810aa20:	0810aaad 	.word	0x0810aaad
 810aa24:	0810aa9b 	.word	0x0810aa9b
 810aa28:	0810aaad 	.word	0x0810aaad
 810aa2c:	0810aaad 	.word	0x0810aaad
 810aa30:	0810aaad 	.word	0x0810aaad
 810aa34:	0810aaad 	.word	0x0810aaad
 810aa38:	0810aaad 	.word	0x0810aaad
 810aa3c:	0810aaad 	.word	0x0810aaad
 810aa40:	0810aaad 	.word	0x0810aaad
 810aa44:	0810aab3 	.word	0x0810aab3
 810aa48:	0810aaad 	.word	0x0810aaad
 810aa4c:	0810aaad 	.word	0x0810aaad
 810aa50:	0810aaad 	.word	0x0810aaad
 810aa54:	0810aaad 	.word	0x0810aaad
 810aa58:	0810aaad 	.word	0x0810aaad
 810aa5c:	0810aaad 	.word	0x0810aaad
 810aa60:	0810aaad 	.word	0x0810aaad
 810aa64:	0810aab3 	.word	0x0810aab3
 810aa68:	0810aaad 	.word	0x0810aaad
 810aa6c:	0810aaad 	.word	0x0810aaad
 810aa70:	0810aaad 	.word	0x0810aaad
 810aa74:	0810aaad 	.word	0x0810aaad
 810aa78:	0810aaad 	.word	0x0810aaad
 810aa7c:	0810aaad 	.word	0x0810aaad
 810aa80:	0810aaad 	.word	0x0810aaad
 810aa84:	0810aab3 	.word	0x0810aab3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810aa88:	687b      	ldr	r3, [r7, #4]
 810aa8a:	3304      	adds	r3, #4
 810aa8c:	2101      	movs	r1, #1
 810aa8e:	4618      	mov	r0, r3
 810aa90:	f001 fc16 	bl	810c2c0 <RCCEx_PLL2_Config>
 810aa94:	4603      	mov	r3, r0
 810aa96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810aa98:	e00c      	b.n	810aab4 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810aa9a:	687b      	ldr	r3, [r7, #4]
 810aa9c:	3324      	adds	r3, #36	; 0x24
 810aa9e:	2101      	movs	r1, #1
 810aaa0:	4618      	mov	r0, r3
 810aaa2:	f001 fcbf 	bl	810c424 <RCCEx_PLL3_Config>
 810aaa6:	4603      	mov	r3, r0
 810aaa8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810aaaa:	e003      	b.n	810aab4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810aaac:	2301      	movs	r3, #1
 810aaae:	75fb      	strb	r3, [r7, #23]
      break;
 810aab0:	e000      	b.n	810aab4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810aab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 810aab4:	7dfb      	ldrb	r3, [r7, #23]
 810aab6:	2b00      	cmp	r3, #0
 810aab8:	d109      	bne.n	810aace <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810aaba:	4b24      	ldr	r3, [pc, #144]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810aabc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810aabe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810aac2:	687b      	ldr	r3, [r7, #4]
 810aac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aac6:	4921      	ldr	r1, [pc, #132]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810aac8:	4313      	orrs	r3, r2
 810aaca:	654b      	str	r3, [r1, #84]	; 0x54
 810aacc:	e001      	b.n	810aad2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aace:	7dfb      	ldrb	r3, [r7, #23]
 810aad0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810aad2:	687b      	ldr	r3, [r7, #4]
 810aad4:	681b      	ldr	r3, [r3, #0]
 810aad6:	f003 0302 	and.w	r3, r3, #2
 810aada:	2b00      	cmp	r3, #0
 810aadc:	d03c      	beq.n	810ab58 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810aade:	687b      	ldr	r3, [r7, #4]
 810aae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810aae2:	2b05      	cmp	r3, #5
 810aae4:	d820      	bhi.n	810ab28 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810aae6:	a201      	add	r2, pc, #4	; (adr r2, 810aaec <HAL_RCCEx_PeriphCLKConfig+0x870>)
 810aae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aaec:	0810ab2f 	.word	0x0810ab2f
 810aaf0:	0810ab05 	.word	0x0810ab05
 810aaf4:	0810ab17 	.word	0x0810ab17
 810aaf8:	0810ab2f 	.word	0x0810ab2f
 810aafc:	0810ab2f 	.word	0x0810ab2f
 810ab00:	0810ab2f 	.word	0x0810ab2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810ab04:	687b      	ldr	r3, [r7, #4]
 810ab06:	3304      	adds	r3, #4
 810ab08:	2101      	movs	r1, #1
 810ab0a:	4618      	mov	r0, r3
 810ab0c:	f001 fbd8 	bl	810c2c0 <RCCEx_PLL2_Config>
 810ab10:	4603      	mov	r3, r0
 810ab12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810ab14:	e00c      	b.n	810ab30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810ab16:	687b      	ldr	r3, [r7, #4]
 810ab18:	3324      	adds	r3, #36	; 0x24
 810ab1a:	2101      	movs	r1, #1
 810ab1c:	4618      	mov	r0, r3
 810ab1e:	f001 fc81 	bl	810c424 <RCCEx_PLL3_Config>
 810ab22:	4603      	mov	r3, r0
 810ab24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810ab26:	e003      	b.n	810ab30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810ab28:	2301      	movs	r3, #1
 810ab2a:	75fb      	strb	r3, [r7, #23]
      break;
 810ab2c:	e000      	b.n	810ab30 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810ab2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 810ab30:	7dfb      	ldrb	r3, [r7, #23]
 810ab32:	2b00      	cmp	r3, #0
 810ab34:	d10e      	bne.n	810ab54 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810ab36:	4b05      	ldr	r3, [pc, #20]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810ab38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ab3a:	f023 0207 	bic.w	r2, r3, #7
 810ab3e:	687b      	ldr	r3, [r7, #4]
 810ab40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810ab42:	4902      	ldr	r1, [pc, #8]	; (810ab4c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810ab44:	4313      	orrs	r3, r2
 810ab46:	654b      	str	r3, [r1, #84]	; 0x54
 810ab48:	e006      	b.n	810ab58 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810ab4a:	bf00      	nop
 810ab4c:	58024400 	.word	0x58024400
 810ab50:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ab54:	7dfb      	ldrb	r3, [r7, #23]
 810ab56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810ab58:	687b      	ldr	r3, [r7, #4]
 810ab5a:	681b      	ldr	r3, [r3, #0]
 810ab5c:	f003 0304 	and.w	r3, r3, #4
 810ab60:	2b00      	cmp	r3, #0
 810ab62:	d039      	beq.n	810abd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810ab64:	687b      	ldr	r3, [r7, #4]
 810ab66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810ab6a:	2b05      	cmp	r3, #5
 810ab6c:	d820      	bhi.n	810abb0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 810ab6e:	a201      	add	r2, pc, #4	; (adr r2, 810ab74 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 810ab70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab74:	0810abb7 	.word	0x0810abb7
 810ab78:	0810ab8d 	.word	0x0810ab8d
 810ab7c:	0810ab9f 	.word	0x0810ab9f
 810ab80:	0810abb7 	.word	0x0810abb7
 810ab84:	0810abb7 	.word	0x0810abb7
 810ab88:	0810abb7 	.word	0x0810abb7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810ab8c:	687b      	ldr	r3, [r7, #4]
 810ab8e:	3304      	adds	r3, #4
 810ab90:	2101      	movs	r1, #1
 810ab92:	4618      	mov	r0, r3
 810ab94:	f001 fb94 	bl	810c2c0 <RCCEx_PLL2_Config>
 810ab98:	4603      	mov	r3, r0
 810ab9a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810ab9c:	e00c      	b.n	810abb8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810ab9e:	687b      	ldr	r3, [r7, #4]
 810aba0:	3324      	adds	r3, #36	; 0x24
 810aba2:	2101      	movs	r1, #1
 810aba4:	4618      	mov	r0, r3
 810aba6:	f001 fc3d 	bl	810c424 <RCCEx_PLL3_Config>
 810abaa:	4603      	mov	r3, r0
 810abac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810abae:	e003      	b.n	810abb8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810abb0:	2301      	movs	r3, #1
 810abb2:	75fb      	strb	r3, [r7, #23]
      break;
 810abb4:	e000      	b.n	810abb8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810abb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 810abb8:	7dfb      	ldrb	r3, [r7, #23]
 810abba:	2b00      	cmp	r3, #0
 810abbc:	d10a      	bne.n	810abd4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810abbe:	4bb7      	ldr	r3, [pc, #732]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810abc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810abc2:	f023 0207 	bic.w	r2, r3, #7
 810abc6:	687b      	ldr	r3, [r7, #4]
 810abc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810abcc:	49b3      	ldr	r1, [pc, #716]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810abce:	4313      	orrs	r3, r2
 810abd0:	658b      	str	r3, [r1, #88]	; 0x58
 810abd2:	e001      	b.n	810abd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810abd4:	7dfb      	ldrb	r3, [r7, #23]
 810abd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810abd8:	687b      	ldr	r3, [r7, #4]
 810abda:	681b      	ldr	r3, [r3, #0]
 810abdc:	f003 0320 	and.w	r3, r3, #32
 810abe0:	2b00      	cmp	r3, #0
 810abe2:	d04b      	beq.n	810ac7c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810abe4:	687b      	ldr	r3, [r7, #4]
 810abe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810abea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810abee:	d02e      	beq.n	810ac4e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 810abf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810abf4:	d828      	bhi.n	810ac48 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810abf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810abfa:	d02a      	beq.n	810ac52 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810abfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ac00:	d822      	bhi.n	810ac48 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810ac02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810ac06:	d026      	beq.n	810ac56 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810ac08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810ac0c:	d81c      	bhi.n	810ac48 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810ac0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ac12:	d010      	beq.n	810ac36 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810ac14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ac18:	d816      	bhi.n	810ac48 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810ac1a:	2b00      	cmp	r3, #0
 810ac1c:	d01d      	beq.n	810ac5a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810ac1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ac22:	d111      	bne.n	810ac48 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810ac24:	687b      	ldr	r3, [r7, #4]
 810ac26:	3304      	adds	r3, #4
 810ac28:	2100      	movs	r1, #0
 810ac2a:	4618      	mov	r0, r3
 810ac2c:	f001 fb48 	bl	810c2c0 <RCCEx_PLL2_Config>
 810ac30:	4603      	mov	r3, r0
 810ac32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810ac34:	e012      	b.n	810ac5c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810ac36:	687b      	ldr	r3, [r7, #4]
 810ac38:	3324      	adds	r3, #36	; 0x24
 810ac3a:	2102      	movs	r1, #2
 810ac3c:	4618      	mov	r0, r3
 810ac3e:	f001 fbf1 	bl	810c424 <RCCEx_PLL3_Config>
 810ac42:	4603      	mov	r3, r0
 810ac44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810ac46:	e009      	b.n	810ac5c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810ac48:	2301      	movs	r3, #1
 810ac4a:	75fb      	strb	r3, [r7, #23]
      break;
 810ac4c:	e006      	b.n	810ac5c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810ac4e:	bf00      	nop
 810ac50:	e004      	b.n	810ac5c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810ac52:	bf00      	nop
 810ac54:	e002      	b.n	810ac5c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810ac56:	bf00      	nop
 810ac58:	e000      	b.n	810ac5c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810ac5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810ac5c:	7dfb      	ldrb	r3, [r7, #23]
 810ac5e:	2b00      	cmp	r3, #0
 810ac60:	d10a      	bne.n	810ac78 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810ac62:	4b8e      	ldr	r3, [pc, #568]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810ac64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ac66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810ac6a:	687b      	ldr	r3, [r7, #4]
 810ac6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ac70:	498a      	ldr	r1, [pc, #552]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810ac72:	4313      	orrs	r3, r2
 810ac74:	654b      	str	r3, [r1, #84]	; 0x54
 810ac76:	e001      	b.n	810ac7c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ac78:	7dfb      	ldrb	r3, [r7, #23]
 810ac7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810ac7c:	687b      	ldr	r3, [r7, #4]
 810ac7e:	681b      	ldr	r3, [r3, #0]
 810ac80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ac84:	2b00      	cmp	r3, #0
 810ac86:	d04b      	beq.n	810ad20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 810ac88:	687b      	ldr	r3, [r7, #4]
 810ac8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810ac8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810ac92:	d02e      	beq.n	810acf2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810ac94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810ac98:	d828      	bhi.n	810acec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810ac9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810ac9e:	d02a      	beq.n	810acf6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810aca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810aca4:	d822      	bhi.n	810acec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810aca6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810acaa:	d026      	beq.n	810acfa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810acac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810acb0:	d81c      	bhi.n	810acec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810acb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810acb6:	d010      	beq.n	810acda <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 810acb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810acbc:	d816      	bhi.n	810acec <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810acbe:	2b00      	cmp	r3, #0
 810acc0:	d01d      	beq.n	810acfe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810acc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810acc6:	d111      	bne.n	810acec <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810acc8:	687b      	ldr	r3, [r7, #4]
 810acca:	3304      	adds	r3, #4
 810accc:	2100      	movs	r1, #0
 810acce:	4618      	mov	r0, r3
 810acd0:	f001 faf6 	bl	810c2c0 <RCCEx_PLL2_Config>
 810acd4:	4603      	mov	r3, r0
 810acd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810acd8:	e012      	b.n	810ad00 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810acda:	687b      	ldr	r3, [r7, #4]
 810acdc:	3324      	adds	r3, #36	; 0x24
 810acde:	2102      	movs	r1, #2
 810ace0:	4618      	mov	r0, r3
 810ace2:	f001 fb9f 	bl	810c424 <RCCEx_PLL3_Config>
 810ace6:	4603      	mov	r3, r0
 810ace8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810acea:	e009      	b.n	810ad00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810acec:	2301      	movs	r3, #1
 810acee:	75fb      	strb	r3, [r7, #23]
      break;
 810acf0:	e006      	b.n	810ad00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810acf2:	bf00      	nop
 810acf4:	e004      	b.n	810ad00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810acf6:	bf00      	nop
 810acf8:	e002      	b.n	810ad00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810acfa:	bf00      	nop
 810acfc:	e000      	b.n	810ad00 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810acfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 810ad00:	7dfb      	ldrb	r3, [r7, #23]
 810ad02:	2b00      	cmp	r3, #0
 810ad04:	d10a      	bne.n	810ad1c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810ad06:	4b65      	ldr	r3, [pc, #404]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810ad08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810ad0a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810ad0e:	687b      	ldr	r3, [r7, #4]
 810ad10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810ad14:	4961      	ldr	r1, [pc, #388]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810ad16:	4313      	orrs	r3, r2
 810ad18:	658b      	str	r3, [r1, #88]	; 0x58
 810ad1a:	e001      	b.n	810ad20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ad1c:	7dfb      	ldrb	r3, [r7, #23]
 810ad1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810ad20:	687b      	ldr	r3, [r7, #4]
 810ad22:	681b      	ldr	r3, [r3, #0]
 810ad24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ad28:	2b00      	cmp	r3, #0
 810ad2a:	d04b      	beq.n	810adc4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810ad2c:	687b      	ldr	r3, [r7, #4]
 810ad2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810ad32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810ad36:	d02e      	beq.n	810ad96 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 810ad38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810ad3c:	d828      	bhi.n	810ad90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810ad3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810ad42:	d02a      	beq.n	810ad9a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810ad44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810ad48:	d822      	bhi.n	810ad90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810ad4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810ad4e:	d026      	beq.n	810ad9e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810ad50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810ad54:	d81c      	bhi.n	810ad90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810ad56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810ad5a:	d010      	beq.n	810ad7e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 810ad5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810ad60:	d816      	bhi.n	810ad90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810ad62:	2b00      	cmp	r3, #0
 810ad64:	d01d      	beq.n	810ada2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810ad66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810ad6a:	d111      	bne.n	810ad90 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	3304      	adds	r3, #4
 810ad70:	2100      	movs	r1, #0
 810ad72:	4618      	mov	r0, r3
 810ad74:	f001 faa4 	bl	810c2c0 <RCCEx_PLL2_Config>
 810ad78:	4603      	mov	r3, r0
 810ad7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810ad7c:	e012      	b.n	810ada4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810ad7e:	687b      	ldr	r3, [r7, #4]
 810ad80:	3324      	adds	r3, #36	; 0x24
 810ad82:	2102      	movs	r1, #2
 810ad84:	4618      	mov	r0, r3
 810ad86:	f001 fb4d 	bl	810c424 <RCCEx_PLL3_Config>
 810ad8a:	4603      	mov	r3, r0
 810ad8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810ad8e:	e009      	b.n	810ada4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810ad90:	2301      	movs	r3, #1
 810ad92:	75fb      	strb	r3, [r7, #23]
      break;
 810ad94:	e006      	b.n	810ada4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810ad96:	bf00      	nop
 810ad98:	e004      	b.n	810ada4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810ad9a:	bf00      	nop
 810ad9c:	e002      	b.n	810ada4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810ad9e:	bf00      	nop
 810ada0:	e000      	b.n	810ada4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810ada2:	bf00      	nop
    }

    if(ret == HAL_OK)
 810ada4:	7dfb      	ldrb	r3, [r7, #23]
 810ada6:	2b00      	cmp	r3, #0
 810ada8:	d10a      	bne.n	810adc0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810adaa:	4b3c      	ldr	r3, [pc, #240]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810adac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810adae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810adb2:	687b      	ldr	r3, [r7, #4]
 810adb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810adb8:	4938      	ldr	r1, [pc, #224]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810adba:	4313      	orrs	r3, r2
 810adbc:	658b      	str	r3, [r1, #88]	; 0x58
 810adbe:	e001      	b.n	810adc4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810adc0:	7dfb      	ldrb	r3, [r7, #23]
 810adc2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810adc4:	687b      	ldr	r3, [r7, #4]
 810adc6:	681b      	ldr	r3, [r3, #0]
 810adc8:	f003 0308 	and.w	r3, r3, #8
 810adcc:	2b00      	cmp	r3, #0
 810adce:	d01a      	beq.n	810ae06 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810add0:	687b      	ldr	r3, [r7, #4]
 810add2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810add6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810adda:	d10a      	bne.n	810adf2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810addc:	687b      	ldr	r3, [r7, #4]
 810adde:	3324      	adds	r3, #36	; 0x24
 810ade0:	2102      	movs	r1, #2
 810ade2:	4618      	mov	r0, r3
 810ade4:	f001 fb1e 	bl	810c424 <RCCEx_PLL3_Config>
 810ade8:	4603      	mov	r3, r0
 810adea:	2b00      	cmp	r3, #0
 810adec:	d001      	beq.n	810adf2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810adee:	2301      	movs	r3, #1
 810adf0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810adf2:	4b2a      	ldr	r3, [pc, #168]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810adf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810adf6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810adfa:	687b      	ldr	r3, [r7, #4]
 810adfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810ae00:	4926      	ldr	r1, [pc, #152]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810ae02:	4313      	orrs	r3, r2
 810ae04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810ae06:	687b      	ldr	r3, [r7, #4]
 810ae08:	681b      	ldr	r3, [r3, #0]
 810ae0a:	f003 0310 	and.w	r3, r3, #16
 810ae0e:	2b00      	cmp	r3, #0
 810ae10:	d01a      	beq.n	810ae48 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810ae12:	687b      	ldr	r3, [r7, #4]
 810ae14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810ae18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ae1c:	d10a      	bne.n	810ae34 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810ae1e:	687b      	ldr	r3, [r7, #4]
 810ae20:	3324      	adds	r3, #36	; 0x24
 810ae22:	2102      	movs	r1, #2
 810ae24:	4618      	mov	r0, r3
 810ae26:	f001 fafd 	bl	810c424 <RCCEx_PLL3_Config>
 810ae2a:	4603      	mov	r3, r0
 810ae2c:	2b00      	cmp	r3, #0
 810ae2e:	d001      	beq.n	810ae34 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 810ae30:	2301      	movs	r3, #1
 810ae32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810ae34:	4b19      	ldr	r3, [pc, #100]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810ae36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810ae38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810ae3c:	687b      	ldr	r3, [r7, #4]
 810ae3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810ae42:	4916      	ldr	r1, [pc, #88]	; (810ae9c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810ae44:	4313      	orrs	r3, r2
 810ae46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810ae48:	687b      	ldr	r3, [r7, #4]
 810ae4a:	681b      	ldr	r3, [r3, #0]
 810ae4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810ae50:	2b00      	cmp	r3, #0
 810ae52:	d036      	beq.n	810aec2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810ae54:	687b      	ldr	r3, [r7, #4]
 810ae56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810ae5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ae5e:	d01f      	beq.n	810aea0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 810ae60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ae64:	d817      	bhi.n	810ae96 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810ae66:	2b00      	cmp	r3, #0
 810ae68:	d003      	beq.n	810ae72 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810ae6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810ae6e:	d009      	beq.n	810ae84 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 810ae70:	e011      	b.n	810ae96 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810ae72:	687b      	ldr	r3, [r7, #4]
 810ae74:	3304      	adds	r3, #4
 810ae76:	2100      	movs	r1, #0
 810ae78:	4618      	mov	r0, r3
 810ae7a:	f001 fa21 	bl	810c2c0 <RCCEx_PLL2_Config>
 810ae7e:	4603      	mov	r3, r0
 810ae80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810ae82:	e00e      	b.n	810aea2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810ae84:	687b      	ldr	r3, [r7, #4]
 810ae86:	3324      	adds	r3, #36	; 0x24
 810ae88:	2102      	movs	r1, #2
 810ae8a:	4618      	mov	r0, r3
 810ae8c:	f001 faca 	bl	810c424 <RCCEx_PLL3_Config>
 810ae90:	4603      	mov	r3, r0
 810ae92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810ae94:	e005      	b.n	810aea2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810ae96:	2301      	movs	r3, #1
 810ae98:	75fb      	strb	r3, [r7, #23]
      break;
 810ae9a:	e002      	b.n	810aea2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 810ae9c:	58024400 	.word	0x58024400
      break;
 810aea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 810aea2:	7dfb      	ldrb	r3, [r7, #23]
 810aea4:	2b00      	cmp	r3, #0
 810aea6:	d10a      	bne.n	810aebe <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810aea8:	4b93      	ldr	r3, [pc, #588]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aeaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810aeac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810aeb0:	687b      	ldr	r3, [r7, #4]
 810aeb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810aeb6:	4990      	ldr	r1, [pc, #576]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aeb8:	4313      	orrs	r3, r2
 810aeba:	658b      	str	r3, [r1, #88]	; 0x58
 810aebc:	e001      	b.n	810aec2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aebe:	7dfb      	ldrb	r3, [r7, #23]
 810aec0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810aec2:	687b      	ldr	r3, [r7, #4]
 810aec4:	681b      	ldr	r3, [r3, #0]
 810aec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810aeca:	2b00      	cmp	r3, #0
 810aecc:	d033      	beq.n	810af36 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810aece:	687b      	ldr	r3, [r7, #4]
 810aed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aed4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810aed8:	d01c      	beq.n	810af14 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810aeda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810aede:	d816      	bhi.n	810af0e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 810aee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810aee4:	d003      	beq.n	810aeee <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810aee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810aeea:	d007      	beq.n	810aefc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 810aeec:	e00f      	b.n	810af0e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810aeee:	4b82      	ldr	r3, [pc, #520]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aef2:	4a81      	ldr	r2, [pc, #516]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810aef8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810aefa:	e00c      	b.n	810af16 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810aefc:	687b      	ldr	r3, [r7, #4]
 810aefe:	3324      	adds	r3, #36	; 0x24
 810af00:	2101      	movs	r1, #1
 810af02:	4618      	mov	r0, r3
 810af04:	f001 fa8e 	bl	810c424 <RCCEx_PLL3_Config>
 810af08:	4603      	mov	r3, r0
 810af0a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810af0c:	e003      	b.n	810af16 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810af0e:	2301      	movs	r3, #1
 810af10:	75fb      	strb	r3, [r7, #23]
      break;
 810af12:	e000      	b.n	810af16 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810af14:	bf00      	nop
    }

    if(ret == HAL_OK)
 810af16:	7dfb      	ldrb	r3, [r7, #23]
 810af18:	2b00      	cmp	r3, #0
 810af1a:	d10a      	bne.n	810af32 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810af1c:	4b76      	ldr	r3, [pc, #472]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810af1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810af20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810af24:	687b      	ldr	r3, [r7, #4]
 810af26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810af2a:	4973      	ldr	r1, [pc, #460]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810af2c:	4313      	orrs	r3, r2
 810af2e:	654b      	str	r3, [r1, #84]	; 0x54
 810af30:	e001      	b.n	810af36 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810af32:	7dfb      	ldrb	r3, [r7, #23]
 810af34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810af36:	687b      	ldr	r3, [r7, #4]
 810af38:	681b      	ldr	r3, [r3, #0]
 810af3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810af3e:	2b00      	cmp	r3, #0
 810af40:	d029      	beq.n	810af96 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810af42:	687b      	ldr	r3, [r7, #4]
 810af44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810af46:	2b00      	cmp	r3, #0
 810af48:	d003      	beq.n	810af52 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810af4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810af4e:	d007      	beq.n	810af60 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810af50:	e00f      	b.n	810af72 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810af52:	4b69      	ldr	r3, [pc, #420]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810af56:	4a68      	ldr	r2, [pc, #416]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810af58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810af5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810af5e:	e00b      	b.n	810af78 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810af60:	687b      	ldr	r3, [r7, #4]
 810af62:	3304      	adds	r3, #4
 810af64:	2102      	movs	r1, #2
 810af66:	4618      	mov	r0, r3
 810af68:	f001 f9aa 	bl	810c2c0 <RCCEx_PLL2_Config>
 810af6c:	4603      	mov	r3, r0
 810af6e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810af70:	e002      	b.n	810af78 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810af72:	2301      	movs	r3, #1
 810af74:	75fb      	strb	r3, [r7, #23]
      break;
 810af76:	bf00      	nop
    }

    if(ret == HAL_OK)
 810af78:	7dfb      	ldrb	r3, [r7, #23]
 810af7a:	2b00      	cmp	r3, #0
 810af7c:	d109      	bne.n	810af92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810af7e:	4b5e      	ldr	r3, [pc, #376]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810af80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810af82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810af86:	687b      	ldr	r3, [r7, #4]
 810af88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810af8a:	495b      	ldr	r1, [pc, #364]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810af8c:	4313      	orrs	r3, r2
 810af8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 810af90:	e001      	b.n	810af96 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810af92:	7dfb      	ldrb	r3, [r7, #23]
 810af94:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810af96:	687b      	ldr	r3, [r7, #4]
 810af98:	681b      	ldr	r3, [r3, #0]
 810af9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810af9e:	2b00      	cmp	r3, #0
 810afa0:	d00a      	beq.n	810afb8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810afa2:	687b      	ldr	r3, [r7, #4]
 810afa4:	3324      	adds	r3, #36	; 0x24
 810afa6:	2102      	movs	r1, #2
 810afa8:	4618      	mov	r0, r3
 810afaa:	f001 fa3b 	bl	810c424 <RCCEx_PLL3_Config>
 810afae:	4603      	mov	r3, r0
 810afb0:	2b00      	cmp	r3, #0
 810afb2:	d001      	beq.n	810afb8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 810afb4:	2301      	movs	r3, #1
 810afb6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810afb8:	687b      	ldr	r3, [r7, #4]
 810afba:	681b      	ldr	r3, [r3, #0]
 810afbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810afc0:	2b00      	cmp	r3, #0
 810afc2:	d030      	beq.n	810b026 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810afc4:	687b      	ldr	r3, [r7, #4]
 810afc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810afc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810afcc:	d017      	beq.n	810affe <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810afce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810afd2:	d811      	bhi.n	810aff8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810afd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810afd8:	d013      	beq.n	810b002 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810afda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810afde:	d80b      	bhi.n	810aff8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810afe0:	2b00      	cmp	r3, #0
 810afe2:	d010      	beq.n	810b006 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810afe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810afe8:	d106      	bne.n	810aff8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810afea:	4b43      	ldr	r3, [pc, #268]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810afec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810afee:	4a42      	ldr	r2, [pc, #264]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810aff4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810aff6:	e007      	b.n	810b008 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810aff8:	2301      	movs	r3, #1
 810affa:	75fb      	strb	r3, [r7, #23]
      break;
 810affc:	e004      	b.n	810b008 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810affe:	bf00      	nop
 810b000:	e002      	b.n	810b008 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810b002:	bf00      	nop
 810b004:	e000      	b.n	810b008 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810b006:	bf00      	nop
    }

    if(ret == HAL_OK)
 810b008:	7dfb      	ldrb	r3, [r7, #23]
 810b00a:	2b00      	cmp	r3, #0
 810b00c:	d109      	bne.n	810b022 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810b00e:	4b3a      	ldr	r3, [pc, #232]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b012:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810b016:	687b      	ldr	r3, [r7, #4]
 810b018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b01a:	4937      	ldr	r1, [pc, #220]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b01c:	4313      	orrs	r3, r2
 810b01e:	654b      	str	r3, [r1, #84]	; 0x54
 810b020:	e001      	b.n	810b026 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b022:	7dfb      	ldrb	r3, [r7, #23]
 810b024:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810b026:	687b      	ldr	r3, [r7, #4]
 810b028:	681b      	ldr	r3, [r3, #0]
 810b02a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810b02e:	2b00      	cmp	r3, #0
 810b030:	d008      	beq.n	810b044 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810b032:	4b31      	ldr	r3, [pc, #196]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b036:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810b03a:	687b      	ldr	r3, [r7, #4]
 810b03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b03e:	492e      	ldr	r1, [pc, #184]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b040:	4313      	orrs	r3, r2
 810b042:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810b044:	687b      	ldr	r3, [r7, #4]
 810b046:	681b      	ldr	r3, [r3, #0]
 810b048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810b04c:	2b00      	cmp	r3, #0
 810b04e:	d009      	beq.n	810b064 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810b050:	4b29      	ldr	r3, [pc, #164]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b052:	691b      	ldr	r3, [r3, #16]
 810b054:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810b058:	687b      	ldr	r3, [r7, #4]
 810b05a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810b05e:	4926      	ldr	r1, [pc, #152]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b060:	4313      	orrs	r3, r2
 810b062:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810b064:	687b      	ldr	r3, [r7, #4]
 810b066:	681b      	ldr	r3, [r3, #0]
 810b068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810b06c:	2b00      	cmp	r3, #0
 810b06e:	d008      	beq.n	810b082 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810b070:	4b21      	ldr	r3, [pc, #132]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b074:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810b078:	687b      	ldr	r3, [r7, #4]
 810b07a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810b07c:	491e      	ldr	r1, [pc, #120]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b07e:	4313      	orrs	r3, r2
 810b080:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810b082:	687b      	ldr	r3, [r7, #4]
 810b084:	681b      	ldr	r3, [r3, #0]
 810b086:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810b08a:	2b00      	cmp	r3, #0
 810b08c:	d00d      	beq.n	810b0aa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810b08e:	4b1a      	ldr	r3, [pc, #104]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b090:	691b      	ldr	r3, [r3, #16]
 810b092:	4a19      	ldr	r2, [pc, #100]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b094:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810b098:	6113      	str	r3, [r2, #16]
 810b09a:	4b17      	ldr	r3, [pc, #92]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b09c:	691a      	ldr	r2, [r3, #16]
 810b09e:	687b      	ldr	r3, [r7, #4]
 810b0a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810b0a4:	4914      	ldr	r1, [pc, #80]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b0a6:	4313      	orrs	r3, r2
 810b0a8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810b0aa:	687b      	ldr	r3, [r7, #4]
 810b0ac:	681b      	ldr	r3, [r3, #0]
 810b0ae:	2b00      	cmp	r3, #0
 810b0b0:	da08      	bge.n	810b0c4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810b0b2:	4b11      	ldr	r3, [pc, #68]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b0b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b0b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810b0ba:	687b      	ldr	r3, [r7, #4]
 810b0bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b0be:	490e      	ldr	r1, [pc, #56]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b0c0:	4313      	orrs	r3, r2
 810b0c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810b0c4:	687b      	ldr	r3, [r7, #4]
 810b0c6:	681b      	ldr	r3, [r3, #0]
 810b0c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b0cc:	2b00      	cmp	r3, #0
 810b0ce:	d009      	beq.n	810b0e4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810b0d0:	4b09      	ldr	r3, [pc, #36]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b0d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810b0d8:	687b      	ldr	r3, [r7, #4]
 810b0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b0de:	4906      	ldr	r1, [pc, #24]	; (810b0f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810b0e0:	4313      	orrs	r3, r2
 810b0e2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810b0e4:	7dbb      	ldrb	r3, [r7, #22]
 810b0e6:	2b00      	cmp	r3, #0
 810b0e8:	d101      	bne.n	810b0ee <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810b0ea:	2300      	movs	r3, #0
 810b0ec:	e000      	b.n	810b0f0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810b0ee:	2301      	movs	r3, #1
}
 810b0f0:	4618      	mov	r0, r3
 810b0f2:	3718      	adds	r7, #24
 810b0f4:	46bd      	mov	sp, r7
 810b0f6:	bd80      	pop	{r7, pc}
 810b0f8:	58024400 	.word	0x58024400

0810b0fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 810b0fc:	b580      	push	{r7, lr}
 810b0fe:	b090      	sub	sp, #64	; 0x40
 810b100:	af00      	add	r7, sp, #0
 810b102:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810b104:	687b      	ldr	r3, [r7, #4]
 810b106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b10a:	f040 8095 	bne.w	810b238 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 810b10e:	4bae      	ldr	r3, [pc, #696]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b112:	f003 0307 	and.w	r3, r3, #7
 810b116:	633b      	str	r3, [r7, #48]	; 0x30
 810b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b11a:	2b04      	cmp	r3, #4
 810b11c:	f200 8088 	bhi.w	810b230 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 810b120:	a201      	add	r2, pc, #4	; (adr r2, 810b128 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 810b122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b126:	bf00      	nop
 810b128:	0810b13d 	.word	0x0810b13d
 810b12c:	0810b165 	.word	0x0810b165
 810b130:	0810b18d 	.word	0x0810b18d
 810b134:	0810b229 	.word	0x0810b229
 810b138:	0810b1b5 	.word	0x0810b1b5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b13c:	4ba2      	ldr	r3, [pc, #648]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b13e:	681b      	ldr	r3, [r3, #0]
 810b140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b148:	d108      	bne.n	810b15c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b14a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b14e:	4618      	mov	r0, r3
 810b150:	f000 ff64 	bl	810c01c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 810b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b156:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b158:	f000 bc95 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b15c:	2300      	movs	r3, #0
 810b15e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b160:	f000 bc91 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b164:	4b98      	ldr	r3, [pc, #608]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b166:	681b      	ldr	r3, [r3, #0]
 810b168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b16c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b170:	d108      	bne.n	810b184 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b172:	f107 0318 	add.w	r3, r7, #24
 810b176:	4618      	mov	r0, r3
 810b178:	f000 fca8 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b17c:	69bb      	ldr	r3, [r7, #24]
 810b17e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b180:	f000 bc81 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b184:	2300      	movs	r3, #0
 810b186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b188:	f000 bc7d 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b18c:	4b8e      	ldr	r3, [pc, #568]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b18e:	681b      	ldr	r3, [r3, #0]
 810b190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b198:	d108      	bne.n	810b1ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b19a:	f107 030c 	add.w	r3, r7, #12
 810b19e:	4618      	mov	r0, r3
 810b1a0:	f000 fde8 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b1a4:	68fb      	ldr	r3, [r7, #12]
 810b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b1a8:	f000 bc6d 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b1ac:	2300      	movs	r3, #0
 810b1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b1b0:	f000 bc69 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b1b4:	4b84      	ldr	r3, [pc, #528]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b1b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b1b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b1bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b1be:	4b82      	ldr	r3, [pc, #520]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b1c0:	681b      	ldr	r3, [r3, #0]
 810b1c2:	f003 0304 	and.w	r3, r3, #4
 810b1c6:	2b04      	cmp	r3, #4
 810b1c8:	d10c      	bne.n	810b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 810b1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b1cc:	2b00      	cmp	r3, #0
 810b1ce:	d109      	bne.n	810b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b1d0:	4b7d      	ldr	r3, [pc, #500]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b1d2:	681b      	ldr	r3, [r3, #0]
 810b1d4:	08db      	lsrs	r3, r3, #3
 810b1d6:	f003 0303 	and.w	r3, r3, #3
 810b1da:	4a7c      	ldr	r2, [pc, #496]	; (810b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 810b1dc:	fa22 f303 	lsr.w	r3, r2, r3
 810b1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b1e2:	e01f      	b.n	810b224 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b1e4:	4b78      	ldr	r3, [pc, #480]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b1e6:	681b      	ldr	r3, [r3, #0]
 810b1e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b1f0:	d106      	bne.n	810b200 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 810b1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b1f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b1f8:	d102      	bne.n	810b200 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b1fa:	4b75      	ldr	r3, [pc, #468]	; (810b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 810b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b1fe:	e011      	b.n	810b224 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b200:	4b71      	ldr	r3, [pc, #452]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b202:	681b      	ldr	r3, [r3, #0]
 810b204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b20c:	d106      	bne.n	810b21c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 810b20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b214:	d102      	bne.n	810b21c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b216:	4b6f      	ldr	r3, [pc, #444]	; (810b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810b218:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b21a:	e003      	b.n	810b224 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b21c:	2300      	movs	r3, #0
 810b21e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b220:	f000 bc31 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b224:	f000 bc2f 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810b228:	4b6b      	ldr	r3, [pc, #428]	; (810b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b22c:	f000 bc2b 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810b230:	2300      	movs	r3, #0
 810b232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b234:	f000 bc27 	b.w	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810b238:	687b      	ldr	r3, [r7, #4]
 810b23a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b23e:	f040 8095 	bne.w	810b36c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 810b242:	4b61      	ldr	r3, [pc, #388]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b246:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810b24a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b252:	d04d      	beq.n	810b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 810b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b25a:	f200 8084 	bhi.w	810b366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b260:	2bc0      	cmp	r3, #192	; 0xc0
 810b262:	d07d      	beq.n	810b360 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 810b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b266:	2bc0      	cmp	r3, #192	; 0xc0
 810b268:	d87d      	bhi.n	810b366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b26c:	2b80      	cmp	r3, #128	; 0x80
 810b26e:	d02d      	beq.n	810b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 810b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b272:	2b80      	cmp	r3, #128	; 0x80
 810b274:	d877      	bhi.n	810b366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b278:	2b00      	cmp	r3, #0
 810b27a:	d003      	beq.n	810b284 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 810b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b27e:	2b40      	cmp	r3, #64	; 0x40
 810b280:	d012      	beq.n	810b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 810b282:	e070      	b.n	810b366 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b284:	4b50      	ldr	r3, [pc, #320]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b286:	681b      	ldr	r3, [r3, #0]
 810b288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b28c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b290:	d107      	bne.n	810b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b296:	4618      	mov	r0, r3
 810b298:	f000 fec0 	bl	810c01c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b29e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b2a0:	e3f1      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b2a2:	2300      	movs	r3, #0
 810b2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b2a6:	e3ee      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b2a8:	4b47      	ldr	r3, [pc, #284]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b2aa:	681b      	ldr	r3, [r3, #0]
 810b2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b2b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b2b4:	d107      	bne.n	810b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b2b6:	f107 0318 	add.w	r3, r7, #24
 810b2ba:	4618      	mov	r0, r3
 810b2bc:	f000 fc06 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b2c0:	69bb      	ldr	r3, [r7, #24]
 810b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b2c4:	e3df      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b2c6:	2300      	movs	r3, #0
 810b2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b2ca:	e3dc      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b2cc:	4b3e      	ldr	r3, [pc, #248]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b2ce:	681b      	ldr	r3, [r3, #0]
 810b2d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b2d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b2d8:	d107      	bne.n	810b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b2da:	f107 030c 	add.w	r3, r7, #12
 810b2de:	4618      	mov	r0, r3
 810b2e0:	f000 fd48 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b2e4:	68fb      	ldr	r3, [r7, #12]
 810b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b2e8:	e3cd      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b2ea:	2300      	movs	r3, #0
 810b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b2ee:	e3ca      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b2f0:	4b35      	ldr	r3, [pc, #212]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b2f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b2f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b2f8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b2fa:	4b33      	ldr	r3, [pc, #204]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b2fc:	681b      	ldr	r3, [r3, #0]
 810b2fe:	f003 0304 	and.w	r3, r3, #4
 810b302:	2b04      	cmp	r3, #4
 810b304:	d10c      	bne.n	810b320 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 810b306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b308:	2b00      	cmp	r3, #0
 810b30a:	d109      	bne.n	810b320 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b30c:	4b2e      	ldr	r3, [pc, #184]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b30e:	681b      	ldr	r3, [r3, #0]
 810b310:	08db      	lsrs	r3, r3, #3
 810b312:	f003 0303 	and.w	r3, r3, #3
 810b316:	4a2d      	ldr	r2, [pc, #180]	; (810b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 810b318:	fa22 f303 	lsr.w	r3, r2, r3
 810b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b31e:	e01e      	b.n	810b35e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b320:	4b29      	ldr	r3, [pc, #164]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b322:	681b      	ldr	r3, [r3, #0]
 810b324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b32c:	d106      	bne.n	810b33c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 810b32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b334:	d102      	bne.n	810b33c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b336:	4b26      	ldr	r3, [pc, #152]	; (810b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 810b338:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b33a:	e010      	b.n	810b35e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b33c:	4b22      	ldr	r3, [pc, #136]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b33e:	681b      	ldr	r3, [r3, #0]
 810b340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b348:	d106      	bne.n	810b358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 810b34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b34c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b350:	d102      	bne.n	810b358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b352:	4b20      	ldr	r3, [pc, #128]	; (810b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810b354:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b356:	e002      	b.n	810b35e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b358:	2300      	movs	r3, #0
 810b35a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b35c:	e393      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b35e:	e392      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810b360:	4b1d      	ldr	r3, [pc, #116]	; (810b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810b362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b364:	e38f      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810b366:	2300      	movs	r3, #0
 810b368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b36a:	e38c      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810b36c:	687b      	ldr	r3, [r7, #4]
 810b36e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810b372:	f040 80a7 	bne.w	810b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 810b376:	4b14      	ldr	r3, [pc, #80]	; (810b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810b378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b37a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810b37e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b382:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810b386:	d05f      	beq.n	810b448 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 810b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b38a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810b38e:	f200 8096 	bhi.w	810b4be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b394:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810b398:	f000 808e 	beq.w	810b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 810b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b39e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810b3a2:	f200 808c 	bhi.w	810b4be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b3a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b3ac:	d03a      	beq.n	810b424 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 810b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b3b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b3b4:	f200 8083 	bhi.w	810b4be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b3ba:	2b00      	cmp	r3, #0
 810b3bc:	d00e      	beq.n	810b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 810b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b3c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810b3c4:	d01c      	beq.n	810b400 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 810b3c6:	e07a      	b.n	810b4be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810b3c8:	58024400 	.word	0x58024400
 810b3cc:	03d09000 	.word	0x03d09000
 810b3d0:	003d0900 	.word	0x003d0900
 810b3d4:	00f42400 	.word	0x00f42400
 810b3d8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b3dc:	4baa      	ldr	r3, [pc, #680]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b3de:	681b      	ldr	r3, [r3, #0]
 810b3e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b3e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b3e8:	d107      	bne.n	810b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b3ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b3ee:	4618      	mov	r0, r3
 810b3f0:	f000 fe14 	bl	810c01c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b3f8:	e345      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b3fa:	2300      	movs	r3, #0
 810b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b3fe:	e342      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b400:	4ba1      	ldr	r3, [pc, #644]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b402:	681b      	ldr	r3, [r3, #0]
 810b404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b40c:	d107      	bne.n	810b41e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b40e:	f107 0318 	add.w	r3, r7, #24
 810b412:	4618      	mov	r0, r3
 810b414:	f000 fb5a 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b418:	69bb      	ldr	r3, [r7, #24]
 810b41a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b41c:	e333      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b41e:	2300      	movs	r3, #0
 810b420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b422:	e330      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b424:	4b98      	ldr	r3, [pc, #608]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b426:	681b      	ldr	r3, [r3, #0]
 810b428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b42c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b430:	d107      	bne.n	810b442 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b432:	f107 030c 	add.w	r3, r7, #12
 810b436:	4618      	mov	r0, r3
 810b438:	f000 fc9c 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b43c:	68fb      	ldr	r3, [r7, #12]
 810b43e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b440:	e321      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b442:	2300      	movs	r3, #0
 810b444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b446:	e31e      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b448:	4b8f      	ldr	r3, [pc, #572]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b44a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b44c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b450:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b452:	4b8d      	ldr	r3, [pc, #564]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b454:	681b      	ldr	r3, [r3, #0]
 810b456:	f003 0304 	and.w	r3, r3, #4
 810b45a:	2b04      	cmp	r3, #4
 810b45c:	d10c      	bne.n	810b478 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 810b45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b460:	2b00      	cmp	r3, #0
 810b462:	d109      	bne.n	810b478 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b464:	4b88      	ldr	r3, [pc, #544]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b466:	681b      	ldr	r3, [r3, #0]
 810b468:	08db      	lsrs	r3, r3, #3
 810b46a:	f003 0303 	and.w	r3, r3, #3
 810b46e:	4a87      	ldr	r2, [pc, #540]	; (810b68c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 810b470:	fa22 f303 	lsr.w	r3, r2, r3
 810b474:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b476:	e01e      	b.n	810b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b478:	4b83      	ldr	r3, [pc, #524]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b47a:	681b      	ldr	r3, [r3, #0]
 810b47c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b484:	d106      	bne.n	810b494 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 810b486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b48c:	d102      	bne.n	810b494 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b48e:	4b80      	ldr	r3, [pc, #512]	; (810b690 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810b490:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b492:	e010      	b.n	810b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b494:	4b7c      	ldr	r3, [pc, #496]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b496:	681b      	ldr	r3, [r3, #0]
 810b498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b49c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b4a0:	d106      	bne.n	810b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 810b4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b4a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b4a8:	d102      	bne.n	810b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b4aa:	4b7a      	ldr	r3, [pc, #488]	; (810b694 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 810b4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b4ae:	e002      	b.n	810b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b4b0:	2300      	movs	r3, #0
 810b4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b4b4:	e2e7      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b4b6:	e2e6      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810b4b8:	4b77      	ldr	r3, [pc, #476]	; (810b698 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 810b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b4bc:	e2e3      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810b4be:	2300      	movs	r3, #0
 810b4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b4c2:	e2e0      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810b4c4:	687b      	ldr	r3, [r7, #4]
 810b4c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810b4ca:	f040 809c 	bne.w	810b606 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 810b4ce:	4b6e      	ldr	r3, [pc, #440]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b4d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b4d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 810b4d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b4da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810b4de:	d054      	beq.n	810b58a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 810b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b4e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810b4e6:	f200 808b 	bhi.w	810b600 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b4ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810b4f0:	f000 8083 	beq.w	810b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 810b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b4f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810b4fa:	f200 8081 	bhi.w	810b600 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b504:	d02f      	beq.n	810b566 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 810b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b50c:	d878      	bhi.n	810b600 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b510:	2b00      	cmp	r3, #0
 810b512:	d004      	beq.n	810b51e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 810b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810b51a:	d012      	beq.n	810b542 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 810b51c:	e070      	b.n	810b600 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b51e:	4b5a      	ldr	r3, [pc, #360]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b520:	681b      	ldr	r3, [r3, #0]
 810b522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b52a:	d107      	bne.n	810b53c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b52c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b530:	4618      	mov	r0, r3
 810b532:	f000 fd73 	bl	810c01c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b538:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b53a:	e2a4      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b53c:	2300      	movs	r3, #0
 810b53e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b540:	e2a1      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b542:	4b51      	ldr	r3, [pc, #324]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b544:	681b      	ldr	r3, [r3, #0]
 810b546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b54a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b54e:	d107      	bne.n	810b560 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b550:	f107 0318 	add.w	r3, r7, #24
 810b554:	4618      	mov	r0, r3
 810b556:	f000 fab9 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b55a:	69bb      	ldr	r3, [r7, #24]
 810b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 810b55e:	e292      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b560:	2300      	movs	r3, #0
 810b562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b564:	e28f      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b566:	4b48      	ldr	r3, [pc, #288]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b568:	681b      	ldr	r3, [r3, #0]
 810b56a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b56e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b572:	d107      	bne.n	810b584 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b574:	f107 030c 	add.w	r3, r7, #12
 810b578:	4618      	mov	r0, r3
 810b57a:	f000 fbfb 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b57e:	68fb      	ldr	r3, [r7, #12]
 810b580:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b582:	e280      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b584:	2300      	movs	r3, #0
 810b586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b588:	e27d      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b58a:	4b3f      	ldr	r3, [pc, #252]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b58c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b58e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b592:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b594:	4b3c      	ldr	r3, [pc, #240]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b596:	681b      	ldr	r3, [r3, #0]
 810b598:	f003 0304 	and.w	r3, r3, #4
 810b59c:	2b04      	cmp	r3, #4
 810b59e:	d10c      	bne.n	810b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 810b5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b5a2:	2b00      	cmp	r3, #0
 810b5a4:	d109      	bne.n	810b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b5a6:	4b38      	ldr	r3, [pc, #224]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b5a8:	681b      	ldr	r3, [r3, #0]
 810b5aa:	08db      	lsrs	r3, r3, #3
 810b5ac:	f003 0303 	and.w	r3, r3, #3
 810b5b0:	4a36      	ldr	r2, [pc, #216]	; (810b68c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 810b5b2:	fa22 f303 	lsr.w	r3, r2, r3
 810b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b5b8:	e01e      	b.n	810b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b5ba:	4b33      	ldr	r3, [pc, #204]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b5bc:	681b      	ldr	r3, [r3, #0]
 810b5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b5c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b5c6:	d106      	bne.n	810b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 810b5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b5ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b5ce:	d102      	bne.n	810b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b5d0:	4b2f      	ldr	r3, [pc, #188]	; (810b690 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810b5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b5d4:	e010      	b.n	810b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b5d6:	4b2c      	ldr	r3, [pc, #176]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b5d8:	681b      	ldr	r3, [r3, #0]
 810b5da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b5de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b5e2:	d106      	bne.n	810b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 810b5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b5e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b5ea:	d102      	bne.n	810b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b5ec:	4b29      	ldr	r3, [pc, #164]	; (810b694 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 810b5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b5f0:	e002      	b.n	810b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b5f2:	2300      	movs	r3, #0
 810b5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b5f6:	e246      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b5f8:	e245      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810b5fa:	4b27      	ldr	r3, [pc, #156]	; (810b698 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 810b5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b5fe:	e242      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810b600:	2300      	movs	r3, #0
 810b602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b604:	e23f      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810b606:	687b      	ldr	r3, [r7, #4]
 810b608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b60c:	f040 80a8 	bne.w	810b760 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 810b610:	4b1d      	ldr	r3, [pc, #116]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b614:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810b618:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b61c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810b620:	d060      	beq.n	810b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 810b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810b628:	f200 8097 	bhi.w	810b75a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810b62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b62e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810b632:	f000 808f 	beq.w	810b754 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 810b636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b638:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810b63c:	f200 808d 	bhi.w	810b75a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b646:	d03b      	beq.n	810b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 810b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b64a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b64e:	f200 8084 	bhi.w	810b75a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b654:	2b00      	cmp	r3, #0
 810b656:	d004      	beq.n	810b662 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 810b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b65a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b65e:	d01d      	beq.n	810b69c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 810b660:	e07b      	b.n	810b75a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b662:	4b09      	ldr	r3, [pc, #36]	; (810b688 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b664:	681b      	ldr	r3, [r3, #0]
 810b666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b66a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b66e:	d107      	bne.n	810b680 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b674:	4618      	mov	r0, r3
 810b676:	f000 fcd1 	bl	810c01c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b67c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b67e:	e202      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b680:	2300      	movs	r3, #0
 810b682:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b684:	e1ff      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b686:	bf00      	nop
 810b688:	58024400 	.word	0x58024400
 810b68c:	03d09000 	.word	0x03d09000
 810b690:	003d0900 	.word	0x003d0900
 810b694:	00f42400 	.word	0x00f42400
 810b698:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b69c:	4ba3      	ldr	r3, [pc, #652]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b69e:	681b      	ldr	r3, [r3, #0]
 810b6a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b6a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b6a8:	d107      	bne.n	810b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b6aa:	f107 0318 	add.w	r3, r7, #24
 810b6ae:	4618      	mov	r0, r3
 810b6b0:	f000 fa0c 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b6b4:	69bb      	ldr	r3, [r7, #24]
 810b6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b6b8:	e1e5      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b6ba:	2300      	movs	r3, #0
 810b6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b6be:	e1e2      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b6c0:	4b9a      	ldr	r3, [pc, #616]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b6c2:	681b      	ldr	r3, [r3, #0]
 810b6c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b6c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b6cc:	d107      	bne.n	810b6de <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b6ce:	f107 030c 	add.w	r3, r7, #12
 810b6d2:	4618      	mov	r0, r3
 810b6d4:	f000 fb4e 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b6d8:	68fb      	ldr	r3, [r7, #12]
 810b6da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b6dc:	e1d3      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b6de:	2300      	movs	r3, #0
 810b6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b6e2:	e1d0      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b6e4:	4b91      	ldr	r3, [pc, #580]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b6e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b6e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b6ec:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b6ee:	4b8f      	ldr	r3, [pc, #572]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b6f0:	681b      	ldr	r3, [r3, #0]
 810b6f2:	f003 0304 	and.w	r3, r3, #4
 810b6f6:	2b04      	cmp	r3, #4
 810b6f8:	d10c      	bne.n	810b714 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 810b6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b6fc:	2b00      	cmp	r3, #0
 810b6fe:	d109      	bne.n	810b714 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b700:	4b8a      	ldr	r3, [pc, #552]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b702:	681b      	ldr	r3, [r3, #0]
 810b704:	08db      	lsrs	r3, r3, #3
 810b706:	f003 0303 	and.w	r3, r3, #3
 810b70a:	4a89      	ldr	r2, [pc, #548]	; (810b930 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810b70c:	fa22 f303 	lsr.w	r3, r2, r3
 810b710:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b712:	e01e      	b.n	810b752 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b714:	4b85      	ldr	r3, [pc, #532]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b716:	681b      	ldr	r3, [r3, #0]
 810b718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b71c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b720:	d106      	bne.n	810b730 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 810b722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b728:	d102      	bne.n	810b730 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b72a:	4b82      	ldr	r3, [pc, #520]	; (810b934 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810b72c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b72e:	e010      	b.n	810b752 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b730:	4b7e      	ldr	r3, [pc, #504]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b732:	681b      	ldr	r3, [r3, #0]
 810b734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b73c:	d106      	bne.n	810b74c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 810b73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b744:	d102      	bne.n	810b74c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b746:	4b7c      	ldr	r3, [pc, #496]	; (810b938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 810b748:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b74a:	e002      	b.n	810b752 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b74c:	2300      	movs	r3, #0
 810b74e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b750:	e199      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b752:	e198      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810b754:	4b79      	ldr	r3, [pc, #484]	; (810b93c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 810b756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b758:	e195      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810b75a:	2300      	movs	r3, #0
 810b75c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b75e:	e192      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810b760:	687b      	ldr	r3, [r7, #4]
 810b762:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810b766:	d173      	bne.n	810b850 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 810b768:	4b70      	ldr	r3, [pc, #448]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b76a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b76c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810b770:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b778:	d02f      	beq.n	810b7da <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 810b77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b77c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b780:	d863      	bhi.n	810b84a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 810b782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b784:	2b00      	cmp	r3, #0
 810b786:	d004      	beq.n	810b792 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 810b788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b78a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b78e:	d012      	beq.n	810b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 810b790:	e05b      	b.n	810b84a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b792:	4b66      	ldr	r3, [pc, #408]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b794:	681b      	ldr	r3, [r3, #0]
 810b796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b79a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b79e:	d107      	bne.n	810b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b7a0:	f107 0318 	add.w	r3, r7, #24
 810b7a4:	4618      	mov	r0, r3
 810b7a6:	f000 f991 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b7aa:	69bb      	ldr	r3, [r7, #24]
 810b7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b7ae:	e16a      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b7b0:	2300      	movs	r3, #0
 810b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b7b4:	e167      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b7b6:	4b5d      	ldr	r3, [pc, #372]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b7b8:	681b      	ldr	r3, [r3, #0]
 810b7ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b7be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b7c2:	d107      	bne.n	810b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b7c4:	f107 030c 	add.w	r3, r7, #12
 810b7c8:	4618      	mov	r0, r3
 810b7ca:	f000 fad3 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810b7ce:	697b      	ldr	r3, [r7, #20]
 810b7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b7d2:	e158      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b7d4:	2300      	movs	r3, #0
 810b7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b7d8:	e155      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b7da:	4b54      	ldr	r3, [pc, #336]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b7de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b7e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b7e4:	4b51      	ldr	r3, [pc, #324]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b7e6:	681b      	ldr	r3, [r3, #0]
 810b7e8:	f003 0304 	and.w	r3, r3, #4
 810b7ec:	2b04      	cmp	r3, #4
 810b7ee:	d10c      	bne.n	810b80a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 810b7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b7f2:	2b00      	cmp	r3, #0
 810b7f4:	d109      	bne.n	810b80a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b7f6:	4b4d      	ldr	r3, [pc, #308]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b7f8:	681b      	ldr	r3, [r3, #0]
 810b7fa:	08db      	lsrs	r3, r3, #3
 810b7fc:	f003 0303 	and.w	r3, r3, #3
 810b800:	4a4b      	ldr	r2, [pc, #300]	; (810b930 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810b802:	fa22 f303 	lsr.w	r3, r2, r3
 810b806:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b808:	e01e      	b.n	810b848 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b80a:	4b48      	ldr	r3, [pc, #288]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b80c:	681b      	ldr	r3, [r3, #0]
 810b80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b816:	d106      	bne.n	810b826 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 810b818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b81a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b81e:	d102      	bne.n	810b826 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b820:	4b44      	ldr	r3, [pc, #272]	; (810b934 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810b822:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b824:	e010      	b.n	810b848 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b826:	4b41      	ldr	r3, [pc, #260]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b828:	681b      	ldr	r3, [r3, #0]
 810b82a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b82e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b832:	d106      	bne.n	810b842 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 810b834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b83a:	d102      	bne.n	810b842 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b83c:	4b3e      	ldr	r3, [pc, #248]	; (810b938 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 810b83e:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b840:	e002      	b.n	810b848 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b842:	2300      	movs	r3, #0
 810b844:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b846:	e11e      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b848:	e11d      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810b84a:	2300      	movs	r3, #0
 810b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b84e:	e11a      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810b850:	687b      	ldr	r3, [r7, #4]
 810b852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b856:	d133      	bne.n	810b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 810b858:	4b34      	ldr	r3, [pc, #208]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b85c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810b860:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b864:	2b00      	cmp	r3, #0
 810b866:	d004      	beq.n	810b872 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 810b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b86e:	d012      	beq.n	810b896 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 810b870:	e023      	b.n	810b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b872:	4b2e      	ldr	r3, [pc, #184]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b874:	681b      	ldr	r3, [r3, #0]
 810b876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b87a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b87e:	d107      	bne.n	810b890 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b884:	4618      	mov	r0, r3
 810b886:	f000 fbc9 	bl	810c01c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b88e:	e0fa      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b890:	2300      	movs	r3, #0
 810b892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b894:	e0f7      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b896:	4b25      	ldr	r3, [pc, #148]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b898:	681b      	ldr	r3, [r3, #0]
 810b89a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b89e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b8a2:	d107      	bne.n	810b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b8a4:	f107 0318 	add.w	r3, r7, #24
 810b8a8:	4618      	mov	r0, r3
 810b8aa:	f000 f90f 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810b8ae:	6a3b      	ldr	r3, [r7, #32]
 810b8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b8b2:	e0e8      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b8b4:	2300      	movs	r3, #0
 810b8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b8b8:	e0e5      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810b8ba:	2300      	movs	r3, #0
 810b8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b8be:	e0e2      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810b8c0:	687b      	ldr	r3, [r7, #4]
 810b8c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810b8c6:	f040 808f 	bne.w	810b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 810b8ca:	4b18      	ldr	r3, [pc, #96]	; (810b92c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b8cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b8ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810b8d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b8d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810b8da:	d075      	beq.n	810b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 810b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b8de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810b8e2:	d87e      	bhi.n	810b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b8ea:	d060      	beq.n	810b9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 810b8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b8f2:	d876      	bhi.n	810b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b8f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810b8fa:	d045      	beq.n	810b988 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 810b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b8fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810b902:	d86e      	bhi.n	810b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b90a:	d02b      	beq.n	810b964 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 810b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b90e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b912:	d866      	bhi.n	810b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b916:	2b00      	cmp	r3, #0
 810b918:	d004      	beq.n	810b924 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 810b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b91c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b920:	d00e      	beq.n	810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 810b922:	e05e      	b.n	810b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810b924:	f000 f8bc 	bl	810baa0 <HAL_RCCEx_GetD3PCLK1Freq>
 810b928:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 810b92a:	e0ac      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b92c:	58024400 	.word	0x58024400
 810b930:	03d09000 	.word	0x03d09000
 810b934:	003d0900 	.word	0x003d0900
 810b938:	00f42400 	.word	0x00f42400
 810b93c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b940:	4b53      	ldr	r3, [pc, #332]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b942:	681b      	ldr	r3, [r3, #0]
 810b944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b94c:	d107      	bne.n	810b95e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b94e:	f107 0318 	add.w	r3, r7, #24
 810b952:	4618      	mov	r0, r3
 810b954:	f000 f8ba 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810b958:	69fb      	ldr	r3, [r7, #28]
 810b95a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b95c:	e093      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b95e:	2300      	movs	r3, #0
 810b960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b962:	e090      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b964:	4b4a      	ldr	r3, [pc, #296]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b966:	681b      	ldr	r3, [r3, #0]
 810b968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b96c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b970:	d107      	bne.n	810b982 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b972:	f107 030c 	add.w	r3, r7, #12
 810b976:	4618      	mov	r0, r3
 810b978:	f000 f9fc 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810b97c:	693b      	ldr	r3, [r7, #16]
 810b97e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b980:	e081      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b982:	2300      	movs	r3, #0
 810b984:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b986:	e07e      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810b988:	4b41      	ldr	r3, [pc, #260]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b98a:	681b      	ldr	r3, [r3, #0]
 810b98c:	f003 0304 	and.w	r3, r3, #4
 810b990:	2b04      	cmp	r3, #4
 810b992:	d109      	bne.n	810b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b994:	4b3e      	ldr	r3, [pc, #248]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b996:	681b      	ldr	r3, [r3, #0]
 810b998:	08db      	lsrs	r3, r3, #3
 810b99a:	f003 0303 	and.w	r3, r3, #3
 810b99e:	4a3d      	ldr	r2, [pc, #244]	; (810ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 810b9a0:	fa22 f303 	lsr.w	r3, r2, r3
 810b9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b9a6:	e06e      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b9a8:	2300      	movs	r3, #0
 810b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b9ac:	e06b      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810b9ae:	4b38      	ldr	r3, [pc, #224]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b9b0:	681b      	ldr	r3, [r3, #0]
 810b9b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b9ba:	d102      	bne.n	810b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 810b9bc:	4b36      	ldr	r3, [pc, #216]	; (810ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 810b9be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b9c0:	e061      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b9c2:	2300      	movs	r3, #0
 810b9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b9c6:	e05e      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810b9c8:	4b31      	ldr	r3, [pc, #196]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b9ca:	681b      	ldr	r3, [r3, #0]
 810b9cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b9d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b9d4:	d102      	bne.n	810b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 810b9d6:	4b31      	ldr	r3, [pc, #196]	; (810ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810b9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b9da:	e054      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b9dc:	2300      	movs	r3, #0
 810b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b9e0:	e051      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 810b9e2:	2300      	movs	r3, #0
 810b9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b9e6:	e04e      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810b9e8:	687b      	ldr	r3, [r7, #4]
 810b9ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810b9ee:	d148      	bne.n	810ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 810b9f0:	4b27      	ldr	r3, [pc, #156]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b9f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b9f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b9fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ba00:	d02a      	beq.n	810ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 810ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ba04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ba08:	d838      	bhi.n	810ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 810ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ba0c:	2b00      	cmp	r3, #0
 810ba0e:	d004      	beq.n	810ba1a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 810ba10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ba12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ba16:	d00d      	beq.n	810ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 810ba18:	e030      	b.n	810ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810ba1a:	4b1d      	ldr	r3, [pc, #116]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810ba1c:	681b      	ldr	r3, [r3, #0]
 810ba1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810ba22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ba26:	d102      	bne.n	810ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 810ba28:	4b1c      	ldr	r3, [pc, #112]	; (810ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810ba2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810ba2c:	e02b      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810ba2e:	2300      	movs	r3, #0
 810ba30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ba32:	e028      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810ba34:	4b16      	ldr	r3, [pc, #88]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810ba36:	681b      	ldr	r3, [r3, #0]
 810ba38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810ba3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810ba40:	d107      	bne.n	810ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810ba42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810ba46:	4618      	mov	r0, r3
 810ba48:	f000 fae8 	bl	810c01c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ba4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810ba50:	e019      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810ba52:	2300      	movs	r3, #0
 810ba54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ba56:	e016      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ba58:	4b0d      	ldr	r3, [pc, #52]	; (810ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810ba5a:	681b      	ldr	r3, [r3, #0]
 810ba5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810ba60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810ba64:	d107      	bne.n	810ba76 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ba66:	f107 0318 	add.w	r3, r7, #24
 810ba6a:	4618      	mov	r0, r3
 810ba6c:	f000 f82e 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810ba70:	69fb      	ldr	r3, [r7, #28]
 810ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810ba74:	e007      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810ba76:	2300      	movs	r3, #0
 810ba78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ba7a:	e004      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810ba7c:	2300      	movs	r3, #0
 810ba7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ba80:	e001      	b.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 810ba82:	2300      	movs	r3, #0
 810ba84:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 810ba86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810ba88:	4618      	mov	r0, r3
 810ba8a:	3740      	adds	r7, #64	; 0x40
 810ba8c:	46bd      	mov	sp, r7
 810ba8e:	bd80      	pop	{r7, pc}
 810ba90:	58024400 	.word	0x58024400
 810ba94:	03d09000 	.word	0x03d09000
 810ba98:	003d0900 	.word	0x003d0900
 810ba9c:	00f42400 	.word	0x00f42400

0810baa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810baa0:	b580      	push	{r7, lr}
 810baa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810baa4:	f7fe fb8c 	bl	810a1c0 <HAL_RCC_GetHCLKFreq>
 810baa8:	4602      	mov	r2, r0
 810baaa:	4b06      	ldr	r3, [pc, #24]	; (810bac4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810baac:	6a1b      	ldr	r3, [r3, #32]
 810baae:	091b      	lsrs	r3, r3, #4
 810bab0:	f003 0307 	and.w	r3, r3, #7
 810bab4:	4904      	ldr	r1, [pc, #16]	; (810bac8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810bab6:	5ccb      	ldrb	r3, [r1, r3]
 810bab8:	f003 031f 	and.w	r3, r3, #31
 810babc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810bac0:	4618      	mov	r0, r3
 810bac2:	bd80      	pop	{r7, pc}
 810bac4:	58024400 	.word	0x58024400
 810bac8:	0810fddc 	.word	0x0810fddc

0810bacc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810bacc:	b480      	push	{r7}
 810bace:	b089      	sub	sp, #36	; 0x24
 810bad0:	af00      	add	r7, sp, #0
 810bad2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810bad4:	4ba1      	ldr	r3, [pc, #644]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bad8:	f003 0303 	and.w	r3, r3, #3
 810badc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810bade:	4b9f      	ldr	r3, [pc, #636]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bae2:	0b1b      	lsrs	r3, r3, #12
 810bae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810bae8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810baea:	4b9c      	ldr	r3, [pc, #624]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810baec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810baee:	091b      	lsrs	r3, r3, #4
 810baf0:	f003 0301 	and.w	r3, r3, #1
 810baf4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810baf6:	4b99      	ldr	r3, [pc, #612]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810baf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bafa:	08db      	lsrs	r3, r3, #3
 810bafc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810bb00:	693a      	ldr	r2, [r7, #16]
 810bb02:	fb02 f303 	mul.w	r3, r2, r3
 810bb06:	ee07 3a90 	vmov	s15, r3
 810bb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bb0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810bb12:	697b      	ldr	r3, [r7, #20]
 810bb14:	2b00      	cmp	r3, #0
 810bb16:	f000 8111 	beq.w	810bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810bb1a:	69bb      	ldr	r3, [r7, #24]
 810bb1c:	2b02      	cmp	r3, #2
 810bb1e:	f000 8083 	beq.w	810bc28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810bb22:	69bb      	ldr	r3, [r7, #24]
 810bb24:	2b02      	cmp	r3, #2
 810bb26:	f200 80a1 	bhi.w	810bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810bb2a:	69bb      	ldr	r3, [r7, #24]
 810bb2c:	2b00      	cmp	r3, #0
 810bb2e:	d003      	beq.n	810bb38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810bb30:	69bb      	ldr	r3, [r7, #24]
 810bb32:	2b01      	cmp	r3, #1
 810bb34:	d056      	beq.n	810bbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810bb36:	e099      	b.n	810bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bb38:	4b88      	ldr	r3, [pc, #544]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bb3a:	681b      	ldr	r3, [r3, #0]
 810bb3c:	f003 0320 	and.w	r3, r3, #32
 810bb40:	2b00      	cmp	r3, #0
 810bb42:	d02d      	beq.n	810bba0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810bb44:	4b85      	ldr	r3, [pc, #532]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bb46:	681b      	ldr	r3, [r3, #0]
 810bb48:	08db      	lsrs	r3, r3, #3
 810bb4a:	f003 0303 	and.w	r3, r3, #3
 810bb4e:	4a84      	ldr	r2, [pc, #528]	; (810bd60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810bb50:	fa22 f303 	lsr.w	r3, r2, r3
 810bb54:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810bb56:	68bb      	ldr	r3, [r7, #8]
 810bb58:	ee07 3a90 	vmov	s15, r3
 810bb5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bb60:	697b      	ldr	r3, [r7, #20]
 810bb62:	ee07 3a90 	vmov	s15, r3
 810bb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bb6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bb6e:	4b7b      	ldr	r3, [pc, #492]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bb76:	ee07 3a90 	vmov	s15, r3
 810bb7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bb7e:	ed97 6a03 	vldr	s12, [r7, #12]
 810bb82:	eddf 5a78 	vldr	s11, [pc, #480]	; 810bd64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810bb86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bb8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bb8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bb92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bb96:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bb9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810bb9e:	e087      	b.n	810bcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810bba0:	697b      	ldr	r3, [r7, #20]
 810bba2:	ee07 3a90 	vmov	s15, r3
 810bba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bbaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810bd68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810bbae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bbb2:	4b6a      	ldr	r3, [pc, #424]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bbb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bbba:	ee07 3a90 	vmov	s15, r3
 810bbbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bbc2:	ed97 6a03 	vldr	s12, [r7, #12]
 810bbc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 810bd64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810bbca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bbce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bbd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bbd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bbda:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bbde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bbe2:	e065      	b.n	810bcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810bbe4:	697b      	ldr	r3, [r7, #20]
 810bbe6:	ee07 3a90 	vmov	s15, r3
 810bbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bbee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810bd6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810bbf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bbf6:	4b59      	ldr	r3, [pc, #356]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bbfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bbfe:	ee07 3a90 	vmov	s15, r3
 810bc02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bc06:	ed97 6a03 	vldr	s12, [r7, #12]
 810bc0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 810bd64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810bc0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bc12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bc16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bc1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bc1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bc22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bc26:	e043      	b.n	810bcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810bc28:	697b      	ldr	r3, [r7, #20]
 810bc2a:	ee07 3a90 	vmov	s15, r3
 810bc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bc32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810bd70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810bc36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bc3a:	4b48      	ldr	r3, [pc, #288]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bc3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bc42:	ee07 3a90 	vmov	s15, r3
 810bc46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bc4a:	ed97 6a03 	vldr	s12, [r7, #12]
 810bc4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 810bd64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810bc52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bc56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bc5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bc5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bc62:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bc66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bc6a:	e021      	b.n	810bcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810bc6c:	697b      	ldr	r3, [r7, #20]
 810bc6e:	ee07 3a90 	vmov	s15, r3
 810bc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bc76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810bd6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810bc7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bc7e:	4b37      	ldr	r3, [pc, #220]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bc82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bc86:	ee07 3a90 	vmov	s15, r3
 810bc8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bc8e:	ed97 6a03 	vldr	s12, [r7, #12]
 810bc92:	eddf 5a34 	vldr	s11, [pc, #208]	; 810bd64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810bc96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bc9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bc9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bcaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bcae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810bcb0:	4b2a      	ldr	r3, [pc, #168]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bcb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bcb4:	0a5b      	lsrs	r3, r3, #9
 810bcb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bcba:	ee07 3a90 	vmov	s15, r3
 810bcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bcc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bcc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bcca:	edd7 6a07 	vldr	s13, [r7, #28]
 810bcce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bcd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bcd6:	ee17 2a90 	vmov	r2, s15
 810bcda:	687b      	ldr	r3, [r7, #4]
 810bcdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810bcde:	4b1f      	ldr	r3, [pc, #124]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bce2:	0c1b      	lsrs	r3, r3, #16
 810bce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bce8:	ee07 3a90 	vmov	s15, r3
 810bcec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bcf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bcf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bcf8:	edd7 6a07 	vldr	s13, [r7, #28]
 810bcfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bd00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bd04:	ee17 2a90 	vmov	r2, s15
 810bd08:	687b      	ldr	r3, [r7, #4]
 810bd0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810bd0c:	4b13      	ldr	r3, [pc, #76]	; (810bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810bd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bd10:	0e1b      	lsrs	r3, r3, #24
 810bd12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bd16:	ee07 3a90 	vmov	s15, r3
 810bd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bd1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bd22:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bd26:	edd7 6a07 	vldr	s13, [r7, #28]
 810bd2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bd2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bd32:	ee17 2a90 	vmov	r2, s15
 810bd36:	687b      	ldr	r3, [r7, #4]
 810bd38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810bd3a:	e008      	b.n	810bd4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810bd3c:	687b      	ldr	r3, [r7, #4]
 810bd3e:	2200      	movs	r2, #0
 810bd40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810bd42:	687b      	ldr	r3, [r7, #4]
 810bd44:	2200      	movs	r2, #0
 810bd46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810bd48:	687b      	ldr	r3, [r7, #4]
 810bd4a:	2200      	movs	r2, #0
 810bd4c:	609a      	str	r2, [r3, #8]
}
 810bd4e:	bf00      	nop
 810bd50:	3724      	adds	r7, #36	; 0x24
 810bd52:	46bd      	mov	sp, r7
 810bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd58:	4770      	bx	lr
 810bd5a:	bf00      	nop
 810bd5c:	58024400 	.word	0x58024400
 810bd60:	03d09000 	.word	0x03d09000
 810bd64:	46000000 	.word	0x46000000
 810bd68:	4c742400 	.word	0x4c742400
 810bd6c:	4a742400 	.word	0x4a742400
 810bd70:	4b742400 	.word	0x4b742400

0810bd74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810bd74:	b480      	push	{r7}
 810bd76:	b089      	sub	sp, #36	; 0x24
 810bd78:	af00      	add	r7, sp, #0
 810bd7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810bd7c:	4ba1      	ldr	r3, [pc, #644]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bd80:	f003 0303 	and.w	r3, r3, #3
 810bd84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810bd86:	4b9f      	ldr	r3, [pc, #636]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bd8a:	0d1b      	lsrs	r3, r3, #20
 810bd8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810bd90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810bd92:	4b9c      	ldr	r3, [pc, #624]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bd96:	0a1b      	lsrs	r3, r3, #8
 810bd98:	f003 0301 	and.w	r3, r3, #1
 810bd9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810bd9e:	4b99      	ldr	r3, [pc, #612]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bda0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810bda2:	08db      	lsrs	r3, r3, #3
 810bda4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810bda8:	693a      	ldr	r2, [r7, #16]
 810bdaa:	fb02 f303 	mul.w	r3, r2, r3
 810bdae:	ee07 3a90 	vmov	s15, r3
 810bdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bdb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810bdba:	697b      	ldr	r3, [r7, #20]
 810bdbc:	2b00      	cmp	r3, #0
 810bdbe:	f000 8111 	beq.w	810bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810bdc2:	69bb      	ldr	r3, [r7, #24]
 810bdc4:	2b02      	cmp	r3, #2
 810bdc6:	f000 8083 	beq.w	810bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810bdca:	69bb      	ldr	r3, [r7, #24]
 810bdcc:	2b02      	cmp	r3, #2
 810bdce:	f200 80a1 	bhi.w	810bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810bdd2:	69bb      	ldr	r3, [r7, #24]
 810bdd4:	2b00      	cmp	r3, #0
 810bdd6:	d003      	beq.n	810bde0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810bdd8:	69bb      	ldr	r3, [r7, #24]
 810bdda:	2b01      	cmp	r3, #1
 810bddc:	d056      	beq.n	810be8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810bdde:	e099      	b.n	810bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bde0:	4b88      	ldr	r3, [pc, #544]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bde2:	681b      	ldr	r3, [r3, #0]
 810bde4:	f003 0320 	and.w	r3, r3, #32
 810bde8:	2b00      	cmp	r3, #0
 810bdea:	d02d      	beq.n	810be48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810bdec:	4b85      	ldr	r3, [pc, #532]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bdee:	681b      	ldr	r3, [r3, #0]
 810bdf0:	08db      	lsrs	r3, r3, #3
 810bdf2:	f003 0303 	and.w	r3, r3, #3
 810bdf6:	4a84      	ldr	r2, [pc, #528]	; (810c008 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810bdf8:	fa22 f303 	lsr.w	r3, r2, r3
 810bdfc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810bdfe:	68bb      	ldr	r3, [r7, #8]
 810be00:	ee07 3a90 	vmov	s15, r3
 810be04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810be08:	697b      	ldr	r3, [r7, #20]
 810be0a:	ee07 3a90 	vmov	s15, r3
 810be0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810be12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810be16:	4b7b      	ldr	r3, [pc, #492]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810be18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810be1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810be1e:	ee07 3a90 	vmov	s15, r3
 810be22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810be26:	ed97 6a03 	vldr	s12, [r7, #12]
 810be2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810c00c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810be2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810be32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810be36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810be3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810be3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810be42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810be46:	e087      	b.n	810bf58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810be48:	697b      	ldr	r3, [r7, #20]
 810be4a:	ee07 3a90 	vmov	s15, r3
 810be4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810be52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810c010 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810be56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810be5a:	4b6a      	ldr	r3, [pc, #424]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810be5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810be5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810be62:	ee07 3a90 	vmov	s15, r3
 810be66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810be6a:	ed97 6a03 	vldr	s12, [r7, #12]
 810be6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 810c00c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810be72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810be76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810be7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810be7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810be82:	ee67 7a27 	vmul.f32	s15, s14, s15
 810be86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810be8a:	e065      	b.n	810bf58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810be8c:	697b      	ldr	r3, [r7, #20]
 810be8e:	ee07 3a90 	vmov	s15, r3
 810be92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810be96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810c014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810be9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810be9e:	4b59      	ldr	r3, [pc, #356]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810bea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bea6:	ee07 3a90 	vmov	s15, r3
 810beaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810beae:	ed97 6a03 	vldr	s12, [r7, #12]
 810beb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 810c00c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810beb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810beba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810beca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bece:	e043      	b.n	810bf58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810bed0:	697b      	ldr	r3, [r7, #20]
 810bed2:	ee07 3a90 	vmov	s15, r3
 810bed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810beda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810c018 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810bede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bee2:	4b48      	ldr	r3, [pc, #288]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810bee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810beea:	ee07 3a90 	vmov	s15, r3
 810beee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bef2:	ed97 6a03 	vldr	s12, [r7, #12]
 810bef6:	eddf 5a45 	vldr	s11, [pc, #276]	; 810c00c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810befa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810befe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bf02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bf06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bf0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bf0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bf12:	e021      	b.n	810bf58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810bf14:	697b      	ldr	r3, [r7, #20]
 810bf16:	ee07 3a90 	vmov	s15, r3
 810bf1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bf1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810c014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810bf22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bf26:	4b37      	ldr	r3, [pc, #220]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bf28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810bf2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bf2e:	ee07 3a90 	vmov	s15, r3
 810bf32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bf36:	ed97 6a03 	vldr	s12, [r7, #12]
 810bf3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810c00c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810bf3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bf42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bf46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bf4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bf4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bf52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bf56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810bf58:	4b2a      	ldr	r3, [pc, #168]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810bf5c:	0a5b      	lsrs	r3, r3, #9
 810bf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bf62:	ee07 3a90 	vmov	s15, r3
 810bf66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bf6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bf6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bf72:	edd7 6a07 	vldr	s13, [r7, #28]
 810bf76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bf7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bf7e:	ee17 2a90 	vmov	r2, s15
 810bf82:	687b      	ldr	r3, [r7, #4]
 810bf84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810bf86:	4b1f      	ldr	r3, [pc, #124]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bf88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810bf8a:	0c1b      	lsrs	r3, r3, #16
 810bf8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bf90:	ee07 3a90 	vmov	s15, r3
 810bf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bf98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bf9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bfa0:	edd7 6a07 	vldr	s13, [r7, #28]
 810bfa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bfa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bfac:	ee17 2a90 	vmov	r2, s15
 810bfb0:	687b      	ldr	r3, [r7, #4]
 810bfb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810bfb4:	4b13      	ldr	r3, [pc, #76]	; (810c004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810bfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810bfb8:	0e1b      	lsrs	r3, r3, #24
 810bfba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bfbe:	ee07 3a90 	vmov	s15, r3
 810bfc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bfc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bfca:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bfce:	edd7 6a07 	vldr	s13, [r7, #28]
 810bfd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bfd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bfda:	ee17 2a90 	vmov	r2, s15
 810bfde:	687b      	ldr	r3, [r7, #4]
 810bfe0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810bfe2:	e008      	b.n	810bff6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810bfe4:	687b      	ldr	r3, [r7, #4]
 810bfe6:	2200      	movs	r2, #0
 810bfe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810bfea:	687b      	ldr	r3, [r7, #4]
 810bfec:	2200      	movs	r2, #0
 810bfee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810bff0:	687b      	ldr	r3, [r7, #4]
 810bff2:	2200      	movs	r2, #0
 810bff4:	609a      	str	r2, [r3, #8]
}
 810bff6:	bf00      	nop
 810bff8:	3724      	adds	r7, #36	; 0x24
 810bffa:	46bd      	mov	sp, r7
 810bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c000:	4770      	bx	lr
 810c002:	bf00      	nop
 810c004:	58024400 	.word	0x58024400
 810c008:	03d09000 	.word	0x03d09000
 810c00c:	46000000 	.word	0x46000000
 810c010:	4c742400 	.word	0x4c742400
 810c014:	4a742400 	.word	0x4a742400
 810c018:	4b742400 	.word	0x4b742400

0810c01c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 810c01c:	b480      	push	{r7}
 810c01e:	b089      	sub	sp, #36	; 0x24
 810c020:	af00      	add	r7, sp, #0
 810c022:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c024:	4ba0      	ldr	r3, [pc, #640]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c028:	f003 0303 	and.w	r3, r3, #3
 810c02c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 810c02e:	4b9e      	ldr	r3, [pc, #632]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c032:	091b      	lsrs	r3, r3, #4
 810c034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c038:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810c03a:	4b9b      	ldr	r3, [pc, #620]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c03e:	f003 0301 	and.w	r3, r3, #1
 810c042:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810c044:	4b98      	ldr	r3, [pc, #608]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c048:	08db      	lsrs	r3, r3, #3
 810c04a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c04e:	693a      	ldr	r2, [r7, #16]
 810c050:	fb02 f303 	mul.w	r3, r2, r3
 810c054:	ee07 3a90 	vmov	s15, r3
 810c058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c05c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810c060:	697b      	ldr	r3, [r7, #20]
 810c062:	2b00      	cmp	r3, #0
 810c064:	f000 8111 	beq.w	810c28a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810c068:	69bb      	ldr	r3, [r7, #24]
 810c06a:	2b02      	cmp	r3, #2
 810c06c:	f000 8083 	beq.w	810c176 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810c070:	69bb      	ldr	r3, [r7, #24]
 810c072:	2b02      	cmp	r3, #2
 810c074:	f200 80a1 	bhi.w	810c1ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810c078:	69bb      	ldr	r3, [r7, #24]
 810c07a:	2b00      	cmp	r3, #0
 810c07c:	d003      	beq.n	810c086 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810c07e:	69bb      	ldr	r3, [r7, #24]
 810c080:	2b01      	cmp	r3, #1
 810c082:	d056      	beq.n	810c132 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810c084:	e099      	b.n	810c1ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c086:	4b88      	ldr	r3, [pc, #544]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c088:	681b      	ldr	r3, [r3, #0]
 810c08a:	f003 0320 	and.w	r3, r3, #32
 810c08e:	2b00      	cmp	r3, #0
 810c090:	d02d      	beq.n	810c0ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810c092:	4b85      	ldr	r3, [pc, #532]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c094:	681b      	ldr	r3, [r3, #0]
 810c096:	08db      	lsrs	r3, r3, #3
 810c098:	f003 0303 	and.w	r3, r3, #3
 810c09c:	4a83      	ldr	r2, [pc, #524]	; (810c2ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810c09e:	fa22 f303 	lsr.w	r3, r2, r3
 810c0a2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810c0a4:	68bb      	ldr	r3, [r7, #8]
 810c0a6:	ee07 3a90 	vmov	s15, r3
 810c0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c0ae:	697b      	ldr	r3, [r7, #20]
 810c0b0:	ee07 3a90 	vmov	s15, r3
 810c0b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c0bc:	4b7a      	ldr	r3, [pc, #488]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c0c4:	ee07 3a90 	vmov	s15, r3
 810c0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 810c0d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 810c2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c0dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c0e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810c0ec:	e087      	b.n	810c1fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810c0ee:	697b      	ldr	r3, [r7, #20]
 810c0f0:	ee07 3a90 	vmov	s15, r3
 810c0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c0f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 810c2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c100:	4b69      	ldr	r3, [pc, #420]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c108:	ee07 3a90 	vmov	s15, r3
 810c10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c110:	ed97 6a03 	vldr	s12, [r7, #12]
 810c114:	eddf 5a66 	vldr	s11, [pc, #408]	; 810c2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c128:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c12c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810c130:	e065      	b.n	810c1fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810c132:	697b      	ldr	r3, [r7, #20]
 810c134:	ee07 3a90 	vmov	s15, r3
 810c138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c13c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810c2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810c140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c144:	4b58      	ldr	r3, [pc, #352]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c14c:	ee07 3a90 	vmov	s15, r3
 810c150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c154:	ed97 6a03 	vldr	s12, [r7, #12]
 810c158:	eddf 5a55 	vldr	s11, [pc, #340]	; 810c2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c15c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c164:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c170:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810c174:	e043      	b.n	810c1fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810c176:	697b      	ldr	r3, [r7, #20]
 810c178:	ee07 3a90 	vmov	s15, r3
 810c17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c180:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810c2bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810c184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c188:	4b47      	ldr	r3, [pc, #284]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c190:	ee07 3a90 	vmov	s15, r3
 810c194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c198:	ed97 6a03 	vldr	s12, [r7, #12]
 810c19c:	eddf 5a44 	vldr	s11, [pc, #272]	; 810c2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c1a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c1a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c1a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c1ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c1b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c1b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810c1b8:	e021      	b.n	810c1fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810c1ba:	697b      	ldr	r3, [r7, #20]
 810c1bc:	ee07 3a90 	vmov	s15, r3
 810c1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c1c4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810c2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c1c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c1cc:	4b36      	ldr	r3, [pc, #216]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c1d4:	ee07 3a90 	vmov	s15, r3
 810c1d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c1dc:	ed97 6a03 	vldr	s12, [r7, #12]
 810c1e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 810c2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c1e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c1e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c1ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c1f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c1f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810c1fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 810c1fe:	4b2a      	ldr	r3, [pc, #168]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c202:	0a5b      	lsrs	r3, r3, #9
 810c204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c208:	ee07 3a90 	vmov	s15, r3
 810c20c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c214:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c218:	edd7 6a07 	vldr	s13, [r7, #28]
 810c21c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c224:	ee17 2a90 	vmov	r2, s15
 810c228:	687b      	ldr	r3, [r7, #4]
 810c22a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 810c22c:	4b1e      	ldr	r3, [pc, #120]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c230:	0c1b      	lsrs	r3, r3, #16
 810c232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c236:	ee07 3a90 	vmov	s15, r3
 810c23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c23e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c242:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c246:	edd7 6a07 	vldr	s13, [r7, #28]
 810c24a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c24e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c252:	ee17 2a90 	vmov	r2, s15
 810c256:	687b      	ldr	r3, [r7, #4]
 810c258:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 810c25a:	4b13      	ldr	r3, [pc, #76]	; (810c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c25e:	0e1b      	lsrs	r3, r3, #24
 810c260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c264:	ee07 3a90 	vmov	s15, r3
 810c268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c26c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c270:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c274:	edd7 6a07 	vldr	s13, [r7, #28]
 810c278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c27c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c280:	ee17 2a90 	vmov	r2, s15
 810c284:	687b      	ldr	r3, [r7, #4]
 810c286:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810c288:	e008      	b.n	810c29c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810c28a:	687b      	ldr	r3, [r7, #4]
 810c28c:	2200      	movs	r2, #0
 810c28e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810c290:	687b      	ldr	r3, [r7, #4]
 810c292:	2200      	movs	r2, #0
 810c294:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810c296:	687b      	ldr	r3, [r7, #4]
 810c298:	2200      	movs	r2, #0
 810c29a:	609a      	str	r2, [r3, #8]
}
 810c29c:	bf00      	nop
 810c29e:	3724      	adds	r7, #36	; 0x24
 810c2a0:	46bd      	mov	sp, r7
 810c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2a6:	4770      	bx	lr
 810c2a8:	58024400 	.word	0x58024400
 810c2ac:	03d09000 	.word	0x03d09000
 810c2b0:	46000000 	.word	0x46000000
 810c2b4:	4c742400 	.word	0x4c742400
 810c2b8:	4a742400 	.word	0x4a742400
 810c2bc:	4b742400 	.word	0x4b742400

0810c2c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810c2c0:	b580      	push	{r7, lr}
 810c2c2:	b084      	sub	sp, #16
 810c2c4:	af00      	add	r7, sp, #0
 810c2c6:	6078      	str	r0, [r7, #4]
 810c2c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810c2ca:	2300      	movs	r3, #0
 810c2cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810c2ce:	4b54      	ldr	r3, [pc, #336]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c2d2:	f003 0303 	and.w	r3, r3, #3
 810c2d6:	2b03      	cmp	r3, #3
 810c2d8:	d101      	bne.n	810c2de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810c2da:	2301      	movs	r3, #1
 810c2dc:	e09b      	b.n	810c416 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810c2de:	4b50      	ldr	r3, [pc, #320]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c2e0:	681b      	ldr	r3, [r3, #0]
 810c2e2:	4a4f      	ldr	r2, [pc, #316]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c2e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810c2e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c2ea:	f7f7 fc01 	bl	8103af0 <HAL_GetTick>
 810c2ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810c2f0:	e008      	b.n	810c304 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810c2f2:	f7f7 fbfd 	bl	8103af0 <HAL_GetTick>
 810c2f6:	4602      	mov	r2, r0
 810c2f8:	68bb      	ldr	r3, [r7, #8]
 810c2fa:	1ad3      	subs	r3, r2, r3
 810c2fc:	2b02      	cmp	r3, #2
 810c2fe:	d901      	bls.n	810c304 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810c300:	2303      	movs	r3, #3
 810c302:	e088      	b.n	810c416 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810c304:	4b46      	ldr	r3, [pc, #280]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c306:	681b      	ldr	r3, [r3, #0]
 810c308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810c30c:	2b00      	cmp	r3, #0
 810c30e:	d1f0      	bne.n	810c2f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810c310:	4b43      	ldr	r3, [pc, #268]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c314:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810c318:	687b      	ldr	r3, [r7, #4]
 810c31a:	681b      	ldr	r3, [r3, #0]
 810c31c:	031b      	lsls	r3, r3, #12
 810c31e:	4940      	ldr	r1, [pc, #256]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c320:	4313      	orrs	r3, r2
 810c322:	628b      	str	r3, [r1, #40]	; 0x28
 810c324:	687b      	ldr	r3, [r7, #4]
 810c326:	685b      	ldr	r3, [r3, #4]
 810c328:	3b01      	subs	r3, #1
 810c32a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810c32e:	687b      	ldr	r3, [r7, #4]
 810c330:	689b      	ldr	r3, [r3, #8]
 810c332:	3b01      	subs	r3, #1
 810c334:	025b      	lsls	r3, r3, #9
 810c336:	b29b      	uxth	r3, r3
 810c338:	431a      	orrs	r2, r3
 810c33a:	687b      	ldr	r3, [r7, #4]
 810c33c:	68db      	ldr	r3, [r3, #12]
 810c33e:	3b01      	subs	r3, #1
 810c340:	041b      	lsls	r3, r3, #16
 810c342:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810c346:	431a      	orrs	r2, r3
 810c348:	687b      	ldr	r3, [r7, #4]
 810c34a:	691b      	ldr	r3, [r3, #16]
 810c34c:	3b01      	subs	r3, #1
 810c34e:	061b      	lsls	r3, r3, #24
 810c350:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810c354:	4932      	ldr	r1, [pc, #200]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c356:	4313      	orrs	r3, r2
 810c358:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810c35a:	4b31      	ldr	r3, [pc, #196]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c35e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810c362:	687b      	ldr	r3, [r7, #4]
 810c364:	695b      	ldr	r3, [r3, #20]
 810c366:	492e      	ldr	r1, [pc, #184]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c368:	4313      	orrs	r3, r2
 810c36a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810c36c:	4b2c      	ldr	r3, [pc, #176]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c370:	f023 0220 	bic.w	r2, r3, #32
 810c374:	687b      	ldr	r3, [r7, #4]
 810c376:	699b      	ldr	r3, [r3, #24]
 810c378:	4929      	ldr	r1, [pc, #164]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c37a:	4313      	orrs	r3, r2
 810c37c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810c37e:	4b28      	ldr	r3, [pc, #160]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c382:	4a27      	ldr	r2, [pc, #156]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c384:	f023 0310 	bic.w	r3, r3, #16
 810c388:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810c38a:	4b25      	ldr	r3, [pc, #148]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c38e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810c392:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810c396:	687a      	ldr	r2, [r7, #4]
 810c398:	69d2      	ldr	r2, [r2, #28]
 810c39a:	00d2      	lsls	r2, r2, #3
 810c39c:	4920      	ldr	r1, [pc, #128]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c39e:	4313      	orrs	r3, r2
 810c3a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810c3a2:	4b1f      	ldr	r3, [pc, #124]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c3a6:	4a1e      	ldr	r2, [pc, #120]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3a8:	f043 0310 	orr.w	r3, r3, #16
 810c3ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810c3ae:	683b      	ldr	r3, [r7, #0]
 810c3b0:	2b00      	cmp	r3, #0
 810c3b2:	d106      	bne.n	810c3c2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810c3b4:	4b1a      	ldr	r3, [pc, #104]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c3b8:	4a19      	ldr	r2, [pc, #100]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810c3be:	62d3      	str	r3, [r2, #44]	; 0x2c
 810c3c0:	e00f      	b.n	810c3e2 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810c3c2:	683b      	ldr	r3, [r7, #0]
 810c3c4:	2b01      	cmp	r3, #1
 810c3c6:	d106      	bne.n	810c3d6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810c3c8:	4b15      	ldr	r3, [pc, #84]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c3cc:	4a14      	ldr	r2, [pc, #80]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c3d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 810c3d4:	e005      	b.n	810c3e2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810c3d6:	4b12      	ldr	r3, [pc, #72]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c3da:	4a11      	ldr	r2, [pc, #68]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810c3e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810c3e2:	4b0f      	ldr	r3, [pc, #60]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3e4:	681b      	ldr	r3, [r3, #0]
 810c3e6:	4a0e      	ldr	r2, [pc, #56]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c3e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810c3ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c3ee:	f7f7 fb7f 	bl	8103af0 <HAL_GetTick>
 810c3f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810c3f4:	e008      	b.n	810c408 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810c3f6:	f7f7 fb7b 	bl	8103af0 <HAL_GetTick>
 810c3fa:	4602      	mov	r2, r0
 810c3fc:	68bb      	ldr	r3, [r7, #8]
 810c3fe:	1ad3      	subs	r3, r2, r3
 810c400:	2b02      	cmp	r3, #2
 810c402:	d901      	bls.n	810c408 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810c404:	2303      	movs	r3, #3
 810c406:	e006      	b.n	810c416 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810c408:	4b05      	ldr	r3, [pc, #20]	; (810c420 <RCCEx_PLL2_Config+0x160>)
 810c40a:	681b      	ldr	r3, [r3, #0]
 810c40c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810c410:	2b00      	cmp	r3, #0
 810c412:	d0f0      	beq.n	810c3f6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810c414:	7bfb      	ldrb	r3, [r7, #15]
}
 810c416:	4618      	mov	r0, r3
 810c418:	3710      	adds	r7, #16
 810c41a:	46bd      	mov	sp, r7
 810c41c:	bd80      	pop	{r7, pc}
 810c41e:	bf00      	nop
 810c420:	58024400 	.word	0x58024400

0810c424 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810c424:	b580      	push	{r7, lr}
 810c426:	b084      	sub	sp, #16
 810c428:	af00      	add	r7, sp, #0
 810c42a:	6078      	str	r0, [r7, #4]
 810c42c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810c42e:	2300      	movs	r3, #0
 810c430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810c432:	4b54      	ldr	r3, [pc, #336]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c436:	f003 0303 	and.w	r3, r3, #3
 810c43a:	2b03      	cmp	r3, #3
 810c43c:	d101      	bne.n	810c442 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810c43e:	2301      	movs	r3, #1
 810c440:	e09b      	b.n	810c57a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810c442:	4b50      	ldr	r3, [pc, #320]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c444:	681b      	ldr	r3, [r3, #0]
 810c446:	4a4f      	ldr	r2, [pc, #316]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810c44c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c44e:	f7f7 fb4f 	bl	8103af0 <HAL_GetTick>
 810c452:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810c454:	e008      	b.n	810c468 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810c456:	f7f7 fb4b 	bl	8103af0 <HAL_GetTick>
 810c45a:	4602      	mov	r2, r0
 810c45c:	68bb      	ldr	r3, [r7, #8]
 810c45e:	1ad3      	subs	r3, r2, r3
 810c460:	2b02      	cmp	r3, #2
 810c462:	d901      	bls.n	810c468 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810c464:	2303      	movs	r3, #3
 810c466:	e088      	b.n	810c57a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810c468:	4b46      	ldr	r3, [pc, #280]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c46a:	681b      	ldr	r3, [r3, #0]
 810c46c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810c470:	2b00      	cmp	r3, #0
 810c472:	d1f0      	bne.n	810c456 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810c474:	4b43      	ldr	r3, [pc, #268]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c478:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810c47c:	687b      	ldr	r3, [r7, #4]
 810c47e:	681b      	ldr	r3, [r3, #0]
 810c480:	051b      	lsls	r3, r3, #20
 810c482:	4940      	ldr	r1, [pc, #256]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c484:	4313      	orrs	r3, r2
 810c486:	628b      	str	r3, [r1, #40]	; 0x28
 810c488:	687b      	ldr	r3, [r7, #4]
 810c48a:	685b      	ldr	r3, [r3, #4]
 810c48c:	3b01      	subs	r3, #1
 810c48e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810c492:	687b      	ldr	r3, [r7, #4]
 810c494:	689b      	ldr	r3, [r3, #8]
 810c496:	3b01      	subs	r3, #1
 810c498:	025b      	lsls	r3, r3, #9
 810c49a:	b29b      	uxth	r3, r3
 810c49c:	431a      	orrs	r2, r3
 810c49e:	687b      	ldr	r3, [r7, #4]
 810c4a0:	68db      	ldr	r3, [r3, #12]
 810c4a2:	3b01      	subs	r3, #1
 810c4a4:	041b      	lsls	r3, r3, #16
 810c4a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810c4aa:	431a      	orrs	r2, r3
 810c4ac:	687b      	ldr	r3, [r7, #4]
 810c4ae:	691b      	ldr	r3, [r3, #16]
 810c4b0:	3b01      	subs	r3, #1
 810c4b2:	061b      	lsls	r3, r3, #24
 810c4b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810c4b8:	4932      	ldr	r1, [pc, #200]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c4ba:	4313      	orrs	r3, r2
 810c4bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810c4be:	4b31      	ldr	r3, [pc, #196]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c4c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810c4c6:	687b      	ldr	r3, [r7, #4]
 810c4c8:	695b      	ldr	r3, [r3, #20]
 810c4ca:	492e      	ldr	r1, [pc, #184]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c4cc:	4313      	orrs	r3, r2
 810c4ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810c4d0:	4b2c      	ldr	r3, [pc, #176]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c4d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810c4d8:	687b      	ldr	r3, [r7, #4]
 810c4da:	699b      	ldr	r3, [r3, #24]
 810c4dc:	4929      	ldr	r1, [pc, #164]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c4de:	4313      	orrs	r3, r2
 810c4e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810c4e2:	4b28      	ldr	r3, [pc, #160]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c4e6:	4a27      	ldr	r2, [pc, #156]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c4e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810c4ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810c4ee:	4b25      	ldr	r3, [pc, #148]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810c4f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810c4f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810c4fa:	687a      	ldr	r2, [r7, #4]
 810c4fc:	69d2      	ldr	r2, [r2, #28]
 810c4fe:	00d2      	lsls	r2, r2, #3
 810c500:	4920      	ldr	r1, [pc, #128]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c502:	4313      	orrs	r3, r2
 810c504:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810c506:	4b1f      	ldr	r3, [pc, #124]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c50a:	4a1e      	ldr	r2, [pc, #120]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c50c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810c510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810c512:	683b      	ldr	r3, [r7, #0]
 810c514:	2b00      	cmp	r3, #0
 810c516:	d106      	bne.n	810c526 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810c518:	4b1a      	ldr	r3, [pc, #104]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c51c:	4a19      	ldr	r2, [pc, #100]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c51e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810c522:	62d3      	str	r3, [r2, #44]	; 0x2c
 810c524:	e00f      	b.n	810c546 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810c526:	683b      	ldr	r3, [r7, #0]
 810c528:	2b01      	cmp	r3, #1
 810c52a:	d106      	bne.n	810c53a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810c52c:	4b15      	ldr	r3, [pc, #84]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c530:	4a14      	ldr	r2, [pc, #80]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810c536:	62d3      	str	r3, [r2, #44]	; 0x2c
 810c538:	e005      	b.n	810c546 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810c53a:	4b12      	ldr	r3, [pc, #72]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c53e:	4a11      	ldr	r2, [pc, #68]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810c544:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810c546:	4b0f      	ldr	r3, [pc, #60]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c548:	681b      	ldr	r3, [r3, #0]
 810c54a:	4a0e      	ldr	r2, [pc, #56]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c54c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810c550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c552:	f7f7 facd 	bl	8103af0 <HAL_GetTick>
 810c556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810c558:	e008      	b.n	810c56c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810c55a:	f7f7 fac9 	bl	8103af0 <HAL_GetTick>
 810c55e:	4602      	mov	r2, r0
 810c560:	68bb      	ldr	r3, [r7, #8]
 810c562:	1ad3      	subs	r3, r2, r3
 810c564:	2b02      	cmp	r3, #2
 810c566:	d901      	bls.n	810c56c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810c568:	2303      	movs	r3, #3
 810c56a:	e006      	b.n	810c57a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810c56c:	4b05      	ldr	r3, [pc, #20]	; (810c584 <RCCEx_PLL3_Config+0x160>)
 810c56e:	681b      	ldr	r3, [r3, #0]
 810c570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810c574:	2b00      	cmp	r3, #0
 810c576:	d0f0      	beq.n	810c55a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810c578:	7bfb      	ldrb	r3, [r7, #15]
}
 810c57a:	4618      	mov	r0, r3
 810c57c:	3710      	adds	r7, #16
 810c57e:	46bd      	mov	sp, r7
 810c580:	bd80      	pop	{r7, pc}
 810c582:	bf00      	nop
 810c584:	58024400 	.word	0x58024400

0810c588 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810c588:	b580      	push	{r7, lr}
 810c58a:	b084      	sub	sp, #16
 810c58c:	af00      	add	r7, sp, #0
 810c58e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810c590:	2300      	movs	r3, #0
 810c592:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810c594:	687b      	ldr	r3, [r7, #4]
 810c596:	2b00      	cmp	r3, #0
 810c598:	d101      	bne.n	810c59e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810c59a:	2301      	movs	r3, #1
 810c59c:	e0eb      	b.n	810c776 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810c59e:	687b      	ldr	r3, [r7, #4]
 810c5a0:	2200      	movs	r2, #0
 810c5a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810c5a4:	687b      	ldr	r3, [r7, #4]
 810c5a6:	681b      	ldr	r3, [r3, #0]
 810c5a8:	4a75      	ldr	r2, [pc, #468]	; (810c780 <HAL_SPI_Init+0x1f8>)
 810c5aa:	4293      	cmp	r3, r2
 810c5ac:	d00f      	beq.n	810c5ce <HAL_SPI_Init+0x46>
 810c5ae:	687b      	ldr	r3, [r7, #4]
 810c5b0:	681b      	ldr	r3, [r3, #0]
 810c5b2:	4a74      	ldr	r2, [pc, #464]	; (810c784 <HAL_SPI_Init+0x1fc>)
 810c5b4:	4293      	cmp	r3, r2
 810c5b6:	d00a      	beq.n	810c5ce <HAL_SPI_Init+0x46>
 810c5b8:	687b      	ldr	r3, [r7, #4]
 810c5ba:	681b      	ldr	r3, [r3, #0]
 810c5bc:	4a72      	ldr	r2, [pc, #456]	; (810c788 <HAL_SPI_Init+0x200>)
 810c5be:	4293      	cmp	r3, r2
 810c5c0:	d005      	beq.n	810c5ce <HAL_SPI_Init+0x46>
 810c5c2:	687b      	ldr	r3, [r7, #4]
 810c5c4:	68db      	ldr	r3, [r3, #12]
 810c5c6:	2b0f      	cmp	r3, #15
 810c5c8:	d901      	bls.n	810c5ce <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810c5ca:	2301      	movs	r3, #1
 810c5cc:	e0d3      	b.n	810c776 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810c5ce:	6878      	ldr	r0, [r7, #4]
 810c5d0:	f000 fdf9 	bl	810d1c6 <SPI_GetPacketSize>
 810c5d4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810c5d6:	687b      	ldr	r3, [r7, #4]
 810c5d8:	681b      	ldr	r3, [r3, #0]
 810c5da:	4a69      	ldr	r2, [pc, #420]	; (810c780 <HAL_SPI_Init+0x1f8>)
 810c5dc:	4293      	cmp	r3, r2
 810c5de:	d00c      	beq.n	810c5fa <HAL_SPI_Init+0x72>
 810c5e0:	687b      	ldr	r3, [r7, #4]
 810c5e2:	681b      	ldr	r3, [r3, #0]
 810c5e4:	4a67      	ldr	r2, [pc, #412]	; (810c784 <HAL_SPI_Init+0x1fc>)
 810c5e6:	4293      	cmp	r3, r2
 810c5e8:	d007      	beq.n	810c5fa <HAL_SPI_Init+0x72>
 810c5ea:	687b      	ldr	r3, [r7, #4]
 810c5ec:	681b      	ldr	r3, [r3, #0]
 810c5ee:	4a66      	ldr	r2, [pc, #408]	; (810c788 <HAL_SPI_Init+0x200>)
 810c5f0:	4293      	cmp	r3, r2
 810c5f2:	d002      	beq.n	810c5fa <HAL_SPI_Init+0x72>
 810c5f4:	68bb      	ldr	r3, [r7, #8]
 810c5f6:	2b08      	cmp	r3, #8
 810c5f8:	d811      	bhi.n	810c61e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810c5fa:	687b      	ldr	r3, [r7, #4]
 810c5fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810c5fe:	4a60      	ldr	r2, [pc, #384]	; (810c780 <HAL_SPI_Init+0x1f8>)
 810c600:	4293      	cmp	r3, r2
 810c602:	d009      	beq.n	810c618 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810c604:	687b      	ldr	r3, [r7, #4]
 810c606:	681b      	ldr	r3, [r3, #0]
 810c608:	4a5e      	ldr	r2, [pc, #376]	; (810c784 <HAL_SPI_Init+0x1fc>)
 810c60a:	4293      	cmp	r3, r2
 810c60c:	d004      	beq.n	810c618 <HAL_SPI_Init+0x90>
 810c60e:	687b      	ldr	r3, [r7, #4]
 810c610:	681b      	ldr	r3, [r3, #0]
 810c612:	4a5d      	ldr	r2, [pc, #372]	; (810c788 <HAL_SPI_Init+0x200>)
 810c614:	4293      	cmp	r3, r2
 810c616:	d104      	bne.n	810c622 <HAL_SPI_Init+0x9a>
 810c618:	68bb      	ldr	r3, [r7, #8]
 810c61a:	2b10      	cmp	r3, #16
 810c61c:	d901      	bls.n	810c622 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810c61e:	2301      	movs	r3, #1
 810c620:	e0a9      	b.n	810c776 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810c622:	687b      	ldr	r3, [r7, #4]
 810c624:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810c628:	b2db      	uxtb	r3, r3
 810c62a:	2b00      	cmp	r3, #0
 810c62c:	d106      	bne.n	810c63c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810c62e:	687b      	ldr	r3, [r7, #4]
 810c630:	2200      	movs	r2, #0
 810c632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810c636:	6878      	ldr	r0, [r7, #4]
 810c638:	f7f6 fd10 	bl	810305c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810c63c:	687b      	ldr	r3, [r7, #4]
 810c63e:	2202      	movs	r2, #2
 810c640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810c644:	687b      	ldr	r3, [r7, #4]
 810c646:	681b      	ldr	r3, [r3, #0]
 810c648:	681a      	ldr	r2, [r3, #0]
 810c64a:	687b      	ldr	r3, [r7, #4]
 810c64c:	681b      	ldr	r3, [r3, #0]
 810c64e:	f022 0201 	bic.w	r2, r2, #1
 810c652:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810c654:	687b      	ldr	r3, [r7, #4]
 810c656:	699b      	ldr	r3, [r3, #24]
 810c658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810c65c:	d119      	bne.n	810c692 <HAL_SPI_Init+0x10a>
 810c65e:	687b      	ldr	r3, [r7, #4]
 810c660:	685b      	ldr	r3, [r3, #4]
 810c662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810c666:	d103      	bne.n	810c670 <HAL_SPI_Init+0xe8>
 810c668:	687b      	ldr	r3, [r7, #4]
 810c66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c66c:	2b00      	cmp	r3, #0
 810c66e:	d008      	beq.n	810c682 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810c670:	687b      	ldr	r3, [r7, #4]
 810c672:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810c674:	2b00      	cmp	r3, #0
 810c676:	d10c      	bne.n	810c692 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810c678:	687b      	ldr	r3, [r7, #4]
 810c67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c67c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810c680:	d107      	bne.n	810c692 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810c682:	687b      	ldr	r3, [r7, #4]
 810c684:	681b      	ldr	r3, [r3, #0]
 810c686:	681a      	ldr	r2, [r3, #0]
 810c688:	687b      	ldr	r3, [r7, #4]
 810c68a:	681b      	ldr	r3, [r3, #0]
 810c68c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810c690:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810c692:	687b      	ldr	r3, [r7, #4]
 810c694:	69da      	ldr	r2, [r3, #28]
 810c696:	687b      	ldr	r3, [r7, #4]
 810c698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c69a:	431a      	orrs	r2, r3
 810c69c:	68fb      	ldr	r3, [r7, #12]
 810c69e:	431a      	orrs	r2, r3
 810c6a0:	687b      	ldr	r3, [r7, #4]
 810c6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c6a4:	ea42 0103 	orr.w	r1, r2, r3
 810c6a8:	687b      	ldr	r3, [r7, #4]
 810c6aa:	68da      	ldr	r2, [r3, #12]
 810c6ac:	687b      	ldr	r3, [r7, #4]
 810c6ae:	681b      	ldr	r3, [r3, #0]
 810c6b0:	430a      	orrs	r2, r1
 810c6b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810c6b4:	687b      	ldr	r3, [r7, #4]
 810c6b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810c6b8:	687b      	ldr	r3, [r7, #4]
 810c6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c6bc:	431a      	orrs	r2, r3
 810c6be:	687b      	ldr	r3, [r7, #4]
 810c6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c6c2:	431a      	orrs	r2, r3
 810c6c4:	687b      	ldr	r3, [r7, #4]
 810c6c6:	699b      	ldr	r3, [r3, #24]
 810c6c8:	431a      	orrs	r2, r3
 810c6ca:	687b      	ldr	r3, [r7, #4]
 810c6cc:	691b      	ldr	r3, [r3, #16]
 810c6ce:	431a      	orrs	r2, r3
 810c6d0:	687b      	ldr	r3, [r7, #4]
 810c6d2:	695b      	ldr	r3, [r3, #20]
 810c6d4:	431a      	orrs	r2, r3
 810c6d6:	687b      	ldr	r3, [r7, #4]
 810c6d8:	6a1b      	ldr	r3, [r3, #32]
 810c6da:	431a      	orrs	r2, r3
 810c6dc:	687b      	ldr	r3, [r7, #4]
 810c6de:	685b      	ldr	r3, [r3, #4]
 810c6e0:	431a      	orrs	r2, r3
 810c6e2:	687b      	ldr	r3, [r7, #4]
 810c6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810c6e6:	431a      	orrs	r2, r3
 810c6e8:	687b      	ldr	r3, [r7, #4]
 810c6ea:	689b      	ldr	r3, [r3, #8]
 810c6ec:	431a      	orrs	r2, r3
 810c6ee:	687b      	ldr	r3, [r7, #4]
 810c6f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810c6f2:	ea42 0103 	orr.w	r1, r2, r3
 810c6f6:	687b      	ldr	r3, [r7, #4]
 810c6f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810c6fa:	687b      	ldr	r3, [r7, #4]
 810c6fc:	681b      	ldr	r3, [r3, #0]
 810c6fe:	430a      	orrs	r2, r1
 810c700:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810c702:	687b      	ldr	r3, [r7, #4]
 810c704:	685b      	ldr	r3, [r3, #4]
 810c706:	2b00      	cmp	r3, #0
 810c708:	d113      	bne.n	810c732 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810c70a:	687b      	ldr	r3, [r7, #4]
 810c70c:	681b      	ldr	r3, [r3, #0]
 810c70e:	689b      	ldr	r3, [r3, #8]
 810c710:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810c714:	687b      	ldr	r3, [r7, #4]
 810c716:	681b      	ldr	r3, [r3, #0]
 810c718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810c71c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810c71e:	687b      	ldr	r3, [r7, #4]
 810c720:	681b      	ldr	r3, [r3, #0]
 810c722:	689b      	ldr	r3, [r3, #8]
 810c724:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810c728:	687b      	ldr	r3, [r7, #4]
 810c72a:	681b      	ldr	r3, [r3, #0]
 810c72c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810c730:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810c732:	687b      	ldr	r3, [r7, #4]
 810c734:	681b      	ldr	r3, [r3, #0]
 810c736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810c738:	687b      	ldr	r3, [r7, #4]
 810c73a:	681b      	ldr	r3, [r3, #0]
 810c73c:	f022 0201 	bic.w	r2, r2, #1
 810c740:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810c742:	687b      	ldr	r3, [r7, #4]
 810c744:	685b      	ldr	r3, [r3, #4]
 810c746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810c74a:	2b00      	cmp	r3, #0
 810c74c:	d00a      	beq.n	810c764 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810c74e:	687b      	ldr	r3, [r7, #4]
 810c750:	681b      	ldr	r3, [r3, #0]
 810c752:	68db      	ldr	r3, [r3, #12]
 810c754:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810c758:	687b      	ldr	r3, [r7, #4]
 810c75a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810c75c:	687b      	ldr	r3, [r7, #4]
 810c75e:	681b      	ldr	r3, [r3, #0]
 810c760:	430a      	orrs	r2, r1
 810c762:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810c764:	687b      	ldr	r3, [r7, #4]
 810c766:	2200      	movs	r2, #0
 810c768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810c76c:	687b      	ldr	r3, [r7, #4]
 810c76e:	2201      	movs	r2, #1
 810c770:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810c774:	2300      	movs	r3, #0
}
 810c776:	4618      	mov	r0, r3
 810c778:	3710      	adds	r7, #16
 810c77a:	46bd      	mov	sp, r7
 810c77c:	bd80      	pop	{r7, pc}
 810c77e:	bf00      	nop
 810c780:	40013000 	.word	0x40013000
 810c784:	40003800 	.word	0x40003800
 810c788:	40003c00 	.word	0x40003c00

0810c78c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 810c78c:	b580      	push	{r7, lr}
 810c78e:	b086      	sub	sp, #24
 810c790:	af00      	add	r7, sp, #0
 810c792:	60f8      	str	r0, [r7, #12]
 810c794:	60b9      	str	r1, [r7, #8]
 810c796:	607a      	str	r2, [r7, #4]
 810c798:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810c79a:	2300      	movs	r3, #0
 810c79c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 810c79e:	68fb      	ldr	r3, [r7, #12]
 810c7a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c7a4:	2b01      	cmp	r3, #1
 810c7a6:	d101      	bne.n	810c7ac <HAL_SPI_TransmitReceive_DMA+0x20>
 810c7a8:	2302      	movs	r3, #2
 810c7aa:	e1ac      	b.n	810cb06 <HAL_SPI_TransmitReceive_DMA+0x37a>
 810c7ac:	68fb      	ldr	r3, [r7, #12]
 810c7ae:	2201      	movs	r2, #1
 810c7b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 810c7b4:	68fb      	ldr	r3, [r7, #12]
 810c7b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810c7ba:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 810c7bc:	68fb      	ldr	r3, [r7, #12]
 810c7be:	685b      	ldr	r3, [r3, #4]
 810c7c0:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 810c7c2:	693b      	ldr	r3, [r7, #16]
 810c7c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810c7c8:	d106      	bne.n	810c7d8 <HAL_SPI_TransmitReceive_DMA+0x4c>
 810c7ca:	68fb      	ldr	r3, [r7, #12]
 810c7cc:	689b      	ldr	r3, [r3, #8]
 810c7ce:	2b00      	cmp	r3, #0
 810c7d0:	d102      	bne.n	810c7d8 <HAL_SPI_TransmitReceive_DMA+0x4c>
 810c7d2:	7dbb      	ldrb	r3, [r7, #22]
 810c7d4:	2b04      	cmp	r3, #4
 810c7d6:	d00a      	beq.n	810c7ee <HAL_SPI_TransmitReceive_DMA+0x62>
 810c7d8:	7dbb      	ldrb	r3, [r7, #22]
 810c7da:	2b01      	cmp	r3, #1
 810c7dc:	d007      	beq.n	810c7ee <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 810c7de:	2302      	movs	r3, #2
 810c7e0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810c7e2:	68fb      	ldr	r3, [r7, #12]
 810c7e4:	2200      	movs	r2, #0
 810c7e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810c7ea:	7dfb      	ldrb	r3, [r7, #23]
 810c7ec:	e18b      	b.n	810cb06 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810c7ee:	68bb      	ldr	r3, [r7, #8]
 810c7f0:	2b00      	cmp	r3, #0
 810c7f2:	d005      	beq.n	810c800 <HAL_SPI_TransmitReceive_DMA+0x74>
 810c7f4:	687b      	ldr	r3, [r7, #4]
 810c7f6:	2b00      	cmp	r3, #0
 810c7f8:	d002      	beq.n	810c800 <HAL_SPI_TransmitReceive_DMA+0x74>
 810c7fa:	887b      	ldrh	r3, [r7, #2]
 810c7fc:	2b00      	cmp	r3, #0
 810c7fe:	d107      	bne.n	810c810 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 810c800:	2301      	movs	r3, #1
 810c802:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810c804:	68fb      	ldr	r3, [r7, #12]
 810c806:	2200      	movs	r2, #0
 810c808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810c80c:	7dfb      	ldrb	r3, [r7, #23]
 810c80e:	e17a      	b.n	810cb06 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810c810:	68fb      	ldr	r3, [r7, #12]
 810c812:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810c816:	b2db      	uxtb	r3, r3
 810c818:	2b04      	cmp	r3, #4
 810c81a:	d003      	beq.n	810c824 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 810c81c:	68fb      	ldr	r3, [r7, #12]
 810c81e:	2205      	movs	r2, #5
 810c820:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810c824:	68fb      	ldr	r3, [r7, #12]
 810c826:	2200      	movs	r2, #0
 810c828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810c82c:	68fb      	ldr	r3, [r7, #12]
 810c82e:	68ba      	ldr	r2, [r7, #8]
 810c830:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810c832:	68fb      	ldr	r3, [r7, #12]
 810c834:	887a      	ldrh	r2, [r7, #2]
 810c836:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810c83a:	68fb      	ldr	r3, [r7, #12]
 810c83c:	887a      	ldrh	r2, [r7, #2]
 810c83e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810c842:	68fb      	ldr	r3, [r7, #12]
 810c844:	687a      	ldr	r2, [r7, #4]
 810c846:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 810c848:	68fb      	ldr	r3, [r7, #12]
 810c84a:	887a      	ldrh	r2, [r7, #2]
 810c84c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810c850:	68fb      	ldr	r3, [r7, #12]
 810c852:	887a      	ldrh	r2, [r7, #2]
 810c854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810c858:	68fb      	ldr	r3, [r7, #12]
 810c85a:	2200      	movs	r2, #0
 810c85c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810c85e:	68fb      	ldr	r3, [r7, #12]
 810c860:	2200      	movs	r2, #0
 810c862:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810c864:	68fb      	ldr	r3, [r7, #12]
 810c866:	681b      	ldr	r3, [r3, #0]
 810c868:	689a      	ldr	r2, [r3, #8]
 810c86a:	68fb      	ldr	r3, [r7, #12]
 810c86c:	681b      	ldr	r3, [r3, #0]
 810c86e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810c872:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810c874:	68fb      	ldr	r3, [r7, #12]
 810c876:	68db      	ldr	r3, [r3, #12]
 810c878:	2b0f      	cmp	r3, #15
 810c87a:	d905      	bls.n	810c888 <HAL_SPI_TransmitReceive_DMA+0xfc>
 810c87c:	68fb      	ldr	r3, [r7, #12]
 810c87e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c880:	699b      	ldr	r3, [r3, #24]
 810c882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810c886:	d10f      	bne.n	810c8a8 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810c888:	68fb      	ldr	r3, [r7, #12]
 810c88a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810c88c:	2b07      	cmp	r3, #7
 810c88e:	d913      	bls.n	810c8b8 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810c890:	68fb      	ldr	r3, [r7, #12]
 810c892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c894:	699b      	ldr	r3, [r3, #24]
 810c896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810c89a:	d00d      	beq.n	810c8b8 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 810c89c:	68fb      	ldr	r3, [r7, #12]
 810c89e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c8a0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810c8a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810c8a6:	d007      	beq.n	810c8b8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 810c8a8:	2301      	movs	r3, #1
 810c8aa:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 810c8ac:	68fb      	ldr	r3, [r7, #12]
 810c8ae:	2200      	movs	r2, #0
 810c8b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810c8b4:	7dfb      	ldrb	r3, [r7, #23]
 810c8b6:	e126      	b.n	810cb06 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 810c8b8:	68fb      	ldr	r3, [r7, #12]
 810c8ba:	68db      	ldr	r3, [r3, #12]
 810c8bc:	2b07      	cmp	r3, #7
 810c8be:	d840      	bhi.n	810c942 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810c8c0:	68fb      	ldr	r3, [r7, #12]
 810c8c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c8c4:	699b      	ldr	r3, [r3, #24]
 810c8c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810c8ca:	d109      	bne.n	810c8e0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810c8cc:	68fb      	ldr	r3, [r7, #12]
 810c8ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810c8d2:	b29b      	uxth	r3, r3
 810c8d4:	3301      	adds	r3, #1
 810c8d6:	105b      	asrs	r3, r3, #1
 810c8d8:	b29a      	uxth	r2, r3
 810c8da:	68fb      	ldr	r3, [r7, #12]
 810c8dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810c8e0:	68fb      	ldr	r3, [r7, #12]
 810c8e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c8e4:	699b      	ldr	r3, [r3, #24]
 810c8e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810c8ea:	d109      	bne.n	810c900 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 810c8ec:	68fb      	ldr	r3, [r7, #12]
 810c8ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810c8f2:	b29b      	uxth	r3, r3
 810c8f4:	3303      	adds	r3, #3
 810c8f6:	109b      	asrs	r3, r3, #2
 810c8f8:	b29a      	uxth	r2, r3
 810c8fa:	68fb      	ldr	r3, [r7, #12]
 810c8fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810c900:	68fb      	ldr	r3, [r7, #12]
 810c902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c904:	699b      	ldr	r3, [r3, #24]
 810c906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810c90a:	d109      	bne.n	810c920 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810c90c:	68fb      	ldr	r3, [r7, #12]
 810c90e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810c912:	b29b      	uxth	r3, r3
 810c914:	3301      	adds	r3, #1
 810c916:	105b      	asrs	r3, r3, #1
 810c918:	b29a      	uxth	r2, r3
 810c91a:	68fb      	ldr	r3, [r7, #12]
 810c91c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810c920:	68fb      	ldr	r3, [r7, #12]
 810c922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c924:	699b      	ldr	r3, [r3, #24]
 810c926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810c92a:	d12e      	bne.n	810c98a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 810c92c:	68fb      	ldr	r3, [r7, #12]
 810c92e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810c932:	b29b      	uxth	r3, r3
 810c934:	3303      	adds	r3, #3
 810c936:	109b      	asrs	r3, r3, #2
 810c938:	b29a      	uxth	r2, r3
 810c93a:	68fb      	ldr	r3, [r7, #12]
 810c93c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810c940:	e023      	b.n	810c98a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 810c942:	68fb      	ldr	r3, [r7, #12]
 810c944:	68db      	ldr	r3, [r3, #12]
 810c946:	2b0f      	cmp	r3, #15
 810c948:	d81f      	bhi.n	810c98a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810c94a:	68fb      	ldr	r3, [r7, #12]
 810c94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c94e:	699b      	ldr	r3, [r3, #24]
 810c950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810c954:	d109      	bne.n	810c96a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810c956:	68fb      	ldr	r3, [r7, #12]
 810c958:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810c95c:	b29b      	uxth	r3, r3
 810c95e:	3301      	adds	r3, #1
 810c960:	105b      	asrs	r3, r3, #1
 810c962:	b29a      	uxth	r2, r3
 810c964:	68fb      	ldr	r3, [r7, #12]
 810c966:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810c96a:	68fb      	ldr	r3, [r7, #12]
 810c96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c96e:	699b      	ldr	r3, [r3, #24]
 810c970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810c974:	d109      	bne.n	810c98a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810c976:	68fb      	ldr	r3, [r7, #12]
 810c978:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810c97c:	b29b      	uxth	r3, r3
 810c97e:	3301      	adds	r3, #1
 810c980:	105b      	asrs	r3, r3, #1
 810c982:	b29a      	uxth	r2, r3
 810c984:	68fb      	ldr	r3, [r7, #12]
 810c986:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 810c98a:	68fb      	ldr	r3, [r7, #12]
 810c98c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810c990:	b2db      	uxtb	r3, r3
 810c992:	2b04      	cmp	r3, #4
 810c994:	d108      	bne.n	810c9a8 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 810c996:	68fb      	ldr	r3, [r7, #12]
 810c998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c99a:	4a5d      	ldr	r2, [pc, #372]	; (810cb10 <HAL_SPI_TransmitReceive_DMA+0x384>)
 810c99c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 810c99e:	68fb      	ldr	r3, [r7, #12]
 810c9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c9a2:	4a5c      	ldr	r2, [pc, #368]	; (810cb14 <HAL_SPI_TransmitReceive_DMA+0x388>)
 810c9a4:	63da      	str	r2, [r3, #60]	; 0x3c
 810c9a6:	e007      	b.n	810c9b8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 810c9a8:	68fb      	ldr	r3, [r7, #12]
 810c9aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c9ac:	4a5a      	ldr	r2, [pc, #360]	; (810cb18 <HAL_SPI_TransmitReceive_DMA+0x38c>)
 810c9ae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 810c9b0:	68fb      	ldr	r3, [r7, #12]
 810c9b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c9b4:	4a59      	ldr	r2, [pc, #356]	; (810cb1c <HAL_SPI_TransmitReceive_DMA+0x390>)
 810c9b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 810c9b8:	68fb      	ldr	r3, [r7, #12]
 810c9ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c9bc:	4a58      	ldr	r2, [pc, #352]	; (810cb20 <HAL_SPI_TransmitReceive_DMA+0x394>)
 810c9be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 810c9c0:	68fb      	ldr	r3, [r7, #12]
 810c9c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c9c4:	2200      	movs	r2, #0
 810c9c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 810c9c8:	68fb      	ldr	r3, [r7, #12]
 810c9ca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810c9cc:	68fb      	ldr	r3, [r7, #12]
 810c9ce:	681b      	ldr	r3, [r3, #0]
 810c9d0:	3330      	adds	r3, #48	; 0x30
 810c9d2:	4619      	mov	r1, r3
 810c9d4:	68fb      	ldr	r3, [r7, #12]
 810c9d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c9d8:	461a      	mov	r2, r3
 810c9da:	68fb      	ldr	r3, [r7, #12]
 810c9dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810c9e0:	b29b      	uxth	r3, r3
 810c9e2:	f7f9 f915 	bl	8105c10 <HAL_DMA_Start_IT>
 810c9e6:	4603      	mov	r3, r0
 810c9e8:	2b00      	cmp	r3, #0
 810c9ea:	d00f      	beq.n	810ca0c <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810c9ec:	68fb      	ldr	r3, [r7, #12]
 810c9ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810c9f2:	f043 0210 	orr.w	r2, r3, #16
 810c9f6:	68fb      	ldr	r3, [r7, #12]
 810c9f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810c9fc:	2301      	movs	r3, #1
 810c9fe:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810ca00:	68fb      	ldr	r3, [r7, #12]
 810ca02:	2201      	movs	r2, #1
 810ca04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810ca08:	7dfb      	ldrb	r3, [r7, #23]
 810ca0a:	e07c      	b.n	810cb06 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 810ca0c:	68fb      	ldr	r3, [r7, #12]
 810ca0e:	681b      	ldr	r3, [r3, #0]
 810ca10:	689a      	ldr	r2, [r3, #8]
 810ca12:	68fb      	ldr	r3, [r7, #12]
 810ca14:	681b      	ldr	r3, [r3, #0]
 810ca16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810ca1a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 810ca1c:	68fb      	ldr	r3, [r7, #12]
 810ca1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ca20:	2200      	movs	r2, #0
 810ca22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 810ca24:	68fb      	ldr	r3, [r7, #12]
 810ca26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ca28:	2200      	movs	r2, #0
 810ca2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 810ca2c:	68fb      	ldr	r3, [r7, #12]
 810ca2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ca30:	2200      	movs	r2, #0
 810ca32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 810ca34:	68fb      	ldr	r3, [r7, #12]
 810ca36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ca38:	2200      	movs	r2, #0
 810ca3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 810ca3c:	68fb      	ldr	r3, [r7, #12]
 810ca3e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810ca40:	68fb      	ldr	r3, [r7, #12]
 810ca42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ca44:	4619      	mov	r1, r3
 810ca46:	68fb      	ldr	r3, [r7, #12]
 810ca48:	681b      	ldr	r3, [r3, #0]
 810ca4a:	3320      	adds	r3, #32
 810ca4c:	461a      	mov	r2, r3
 810ca4e:	68fb      	ldr	r3, [r7, #12]
 810ca50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ca54:	b29b      	uxth	r3, r3
 810ca56:	f7f9 f8db 	bl	8105c10 <HAL_DMA_Start_IT>
 810ca5a:	4603      	mov	r3, r0
 810ca5c:	2b00      	cmp	r3, #0
 810ca5e:	d00f      	beq.n	810ca80 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810ca60:	68fb      	ldr	r3, [r7, #12]
 810ca62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ca66:	f043 0210 	orr.w	r2, r3, #16
 810ca6a:	68fb      	ldr	r3, [r7, #12]
 810ca6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810ca70:	2301      	movs	r3, #1
 810ca72:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810ca74:	68fb      	ldr	r3, [r7, #12]
 810ca76:	2201      	movs	r2, #1
 810ca78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810ca7c:	7dfb      	ldrb	r3, [r7, #23]
 810ca7e:	e042      	b.n	810cb06 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810ca80:	68fb      	ldr	r3, [r7, #12]
 810ca82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ca84:	69db      	ldr	r3, [r3, #28]
 810ca86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ca8a:	d108      	bne.n	810ca9e <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 810ca8c:	68fb      	ldr	r3, [r7, #12]
 810ca8e:	681b      	ldr	r3, [r3, #0]
 810ca90:	685b      	ldr	r3, [r3, #4]
 810ca92:	68fa      	ldr	r2, [r7, #12]
 810ca94:	6812      	ldr	r2, [r2, #0]
 810ca96:	0c1b      	lsrs	r3, r3, #16
 810ca98:	041b      	lsls	r3, r3, #16
 810ca9a:	6053      	str	r3, [r2, #4]
 810ca9c:	e009      	b.n	810cab2 <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810ca9e:	68fb      	ldr	r3, [r7, #12]
 810caa0:	681b      	ldr	r3, [r3, #0]
 810caa2:	685b      	ldr	r3, [r3, #4]
 810caa4:	0c1b      	lsrs	r3, r3, #16
 810caa6:	041b      	lsls	r3, r3, #16
 810caa8:	8879      	ldrh	r1, [r7, #2]
 810caaa:	68fa      	ldr	r2, [r7, #12]
 810caac:	6812      	ldr	r2, [r2, #0]
 810caae:	430b      	orrs	r3, r1
 810cab0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 810cab2:	68fb      	ldr	r3, [r7, #12]
 810cab4:	681b      	ldr	r3, [r3, #0]
 810cab6:	689a      	ldr	r2, [r3, #8]
 810cab8:	68fb      	ldr	r3, [r7, #12]
 810caba:	681b      	ldr	r3, [r3, #0]
 810cabc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810cac0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 810cac2:	68fb      	ldr	r3, [r7, #12]
 810cac4:	681b      	ldr	r3, [r3, #0]
 810cac6:	691a      	ldr	r2, [r3, #16]
 810cac8:	68fb      	ldr	r3, [r7, #12]
 810caca:	681b      	ldr	r3, [r3, #0]
 810cacc:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 810cad0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810cad2:	68fb      	ldr	r3, [r7, #12]
 810cad4:	681b      	ldr	r3, [r3, #0]
 810cad6:	681a      	ldr	r2, [r3, #0]
 810cad8:	68fb      	ldr	r3, [r7, #12]
 810cada:	681b      	ldr	r3, [r3, #0]
 810cadc:	f042 0201 	orr.w	r2, r2, #1
 810cae0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810cae2:	68fb      	ldr	r3, [r7, #12]
 810cae4:	685b      	ldr	r3, [r3, #4]
 810cae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810caea:	d107      	bne.n	810cafc <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810caec:	68fb      	ldr	r3, [r7, #12]
 810caee:	681b      	ldr	r3, [r3, #0]
 810caf0:	681a      	ldr	r2, [r3, #0]
 810caf2:	68fb      	ldr	r3, [r7, #12]
 810caf4:	681b      	ldr	r3, [r3, #0]
 810caf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810cafa:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810cafc:	68fb      	ldr	r3, [r7, #12]
 810cafe:	2200      	movs	r2, #0
 810cb00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 810cb04:	7dfb      	ldrb	r3, [r7, #23]
}
 810cb06:	4618      	mov	r0, r3
 810cb08:	3718      	adds	r7, #24
 810cb0a:	46bd      	mov	sp, r7
 810cb0c:	bd80      	pop	{r7, pc}
 810cb0e:	bf00      	nop
 810cb10:	0810cfd5 	.word	0x0810cfd5
 810cb14:	0810cf49 	.word	0x0810cf49
 810cb18:	0810cff1 	.word	0x0810cff1
 810cb1c:	0810cf8f 	.word	0x0810cf8f
 810cb20:	0810d00d 	.word	0x0810d00d

0810cb24 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810cb24:	b580      	push	{r7, lr}
 810cb26:	b08a      	sub	sp, #40	; 0x28
 810cb28:	af00      	add	r7, sp, #0
 810cb2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810cb2c:	687b      	ldr	r3, [r7, #4]
 810cb2e:	681b      	ldr	r3, [r3, #0]
 810cb30:	691b      	ldr	r3, [r3, #16]
 810cb32:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810cb34:	687b      	ldr	r3, [r7, #4]
 810cb36:	681b      	ldr	r3, [r3, #0]
 810cb38:	695b      	ldr	r3, [r3, #20]
 810cb3a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810cb3c:	6a3a      	ldr	r2, [r7, #32]
 810cb3e:	69fb      	ldr	r3, [r7, #28]
 810cb40:	4013      	ands	r3, r2
 810cb42:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810cb44:	687b      	ldr	r3, [r7, #4]
 810cb46:	681b      	ldr	r3, [r3, #0]
 810cb48:	689b      	ldr	r3, [r3, #8]
 810cb4a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810cb4c:	2300      	movs	r3, #0
 810cb4e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810cb50:	687b      	ldr	r3, [r7, #4]
 810cb52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810cb56:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810cb58:	687b      	ldr	r3, [r7, #4]
 810cb5a:	681b      	ldr	r3, [r3, #0]
 810cb5c:	3330      	adds	r3, #48	; 0x30
 810cb5e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810cb60:	69bb      	ldr	r3, [r7, #24]
 810cb62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810cb66:	2b00      	cmp	r3, #0
 810cb68:	d113      	bne.n	810cb92 <HAL_SPI_IRQHandler+0x6e>
 810cb6a:	69bb      	ldr	r3, [r7, #24]
 810cb6c:	f003 0320 	and.w	r3, r3, #32
 810cb70:	2b00      	cmp	r3, #0
 810cb72:	d10e      	bne.n	810cb92 <HAL_SPI_IRQHandler+0x6e>
 810cb74:	69bb      	ldr	r3, [r7, #24]
 810cb76:	f003 0304 	and.w	r3, r3, #4
 810cb7a:	2b00      	cmp	r3, #0
 810cb7c:	d009      	beq.n	810cb92 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810cb7e:	687b      	ldr	r3, [r7, #4]
 810cb80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810cb82:	6878      	ldr	r0, [r7, #4]
 810cb84:	4798      	blx	r3
    hspi->RxISR(hspi);
 810cb86:	687b      	ldr	r3, [r7, #4]
 810cb88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810cb8a:	6878      	ldr	r0, [r7, #4]
 810cb8c:	4798      	blx	r3
    handled = 1UL;
 810cb8e:	2301      	movs	r3, #1
 810cb90:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810cb92:	69bb      	ldr	r3, [r7, #24]
 810cb94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810cb98:	2b00      	cmp	r3, #0
 810cb9a:	d10f      	bne.n	810cbbc <HAL_SPI_IRQHandler+0x98>
 810cb9c:	69bb      	ldr	r3, [r7, #24]
 810cb9e:	f003 0301 	and.w	r3, r3, #1
 810cba2:	2b00      	cmp	r3, #0
 810cba4:	d00a      	beq.n	810cbbc <HAL_SPI_IRQHandler+0x98>
 810cba6:	69bb      	ldr	r3, [r7, #24]
 810cba8:	f003 0304 	and.w	r3, r3, #4
 810cbac:	2b00      	cmp	r3, #0
 810cbae:	d105      	bne.n	810cbbc <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810cbb0:	687b      	ldr	r3, [r7, #4]
 810cbb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810cbb4:	6878      	ldr	r0, [r7, #4]
 810cbb6:	4798      	blx	r3
    handled = 1UL;
 810cbb8:	2301      	movs	r3, #1
 810cbba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810cbbc:	69bb      	ldr	r3, [r7, #24]
 810cbbe:	f003 0320 	and.w	r3, r3, #32
 810cbc2:	2b00      	cmp	r3, #0
 810cbc4:	d10f      	bne.n	810cbe6 <HAL_SPI_IRQHandler+0xc2>
 810cbc6:	69bb      	ldr	r3, [r7, #24]
 810cbc8:	f003 0302 	and.w	r3, r3, #2
 810cbcc:	2b00      	cmp	r3, #0
 810cbce:	d00a      	beq.n	810cbe6 <HAL_SPI_IRQHandler+0xc2>
 810cbd0:	69bb      	ldr	r3, [r7, #24]
 810cbd2:	f003 0304 	and.w	r3, r3, #4
 810cbd6:	2b00      	cmp	r3, #0
 810cbd8:	d105      	bne.n	810cbe6 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810cbda:	687b      	ldr	r3, [r7, #4]
 810cbdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810cbde:	6878      	ldr	r0, [r7, #4]
 810cbe0:	4798      	blx	r3
    handled = 1UL;
 810cbe2:	2301      	movs	r3, #1
 810cbe4:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cbe8:	2b00      	cmp	r3, #0
 810cbea:	f040 8171 	bne.w	810ced0 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810cbee:	69bb      	ldr	r3, [r7, #24]
 810cbf0:	f003 0308 	and.w	r3, r3, #8
 810cbf4:	2b00      	cmp	r3, #0
 810cbf6:	f000 80a0 	beq.w	810cd3a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810cbfa:	687b      	ldr	r3, [r7, #4]
 810cbfc:	681b      	ldr	r3, [r3, #0]
 810cbfe:	699a      	ldr	r2, [r3, #24]
 810cc00:	687b      	ldr	r3, [r7, #4]
 810cc02:	681b      	ldr	r3, [r3, #0]
 810cc04:	f042 0208 	orr.w	r2, r2, #8
 810cc08:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810cc0a:	687b      	ldr	r3, [r7, #4]
 810cc0c:	681b      	ldr	r3, [r3, #0]
 810cc0e:	699a      	ldr	r2, [r3, #24]
 810cc10:	687b      	ldr	r3, [r7, #4]
 810cc12:	681b      	ldr	r3, [r3, #0]
 810cc14:	f042 0210 	orr.w	r2, r2, #16
 810cc18:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810cc1a:	687b      	ldr	r3, [r7, #4]
 810cc1c:	681b      	ldr	r3, [r3, #0]
 810cc1e:	699a      	ldr	r2, [r3, #24]
 810cc20:	687b      	ldr	r3, [r7, #4]
 810cc22:	681b      	ldr	r3, [r3, #0]
 810cc24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810cc28:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810cc2a:	687b      	ldr	r3, [r7, #4]
 810cc2c:	681b      	ldr	r3, [r3, #0]
 810cc2e:	691a      	ldr	r2, [r3, #16]
 810cc30:	687b      	ldr	r3, [r7, #4]
 810cc32:	681b      	ldr	r3, [r3, #0]
 810cc34:	f022 0208 	bic.w	r2, r2, #8
 810cc38:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810cc3a:	697b      	ldr	r3, [r7, #20]
 810cc3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810cc40:	2b00      	cmp	r3, #0
 810cc42:	d00f      	beq.n	810cc64 <HAL_SPI_IRQHandler+0x140>
 810cc44:	7cfb      	ldrb	r3, [r7, #19]
 810cc46:	2b04      	cmp	r3, #4
 810cc48:	d004      	beq.n	810cc54 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810cc4a:	687b      	ldr	r3, [r7, #4]
 810cc4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810cc4e:	69db      	ldr	r3, [r3, #28]
 810cc50:	2b00      	cmp	r3, #0
 810cc52:	d007      	beq.n	810cc64 <HAL_SPI_IRQHandler+0x140>
 810cc54:	7cfb      	ldrb	r3, [r7, #19]
 810cc56:	2b03      	cmp	r3, #3
 810cc58:	d059      	beq.n	810cd0e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810cc5a:	687b      	ldr	r3, [r7, #4]
 810cc5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810cc5e:	69db      	ldr	r3, [r3, #28]
 810cc60:	2b00      	cmp	r3, #0
 810cc62:	d154      	bne.n	810cd0e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810cc64:	687b      	ldr	r3, [r7, #4]
 810cc66:	681b      	ldr	r3, [r3, #0]
 810cc68:	689b      	ldr	r3, [r3, #8]
 810cc6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810cc6e:	2b00      	cmp	r3, #0
 810cc70:	d13d      	bne.n	810ccee <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810cc72:	e036      	b.n	810cce2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810cc74:	687b      	ldr	r3, [r7, #4]
 810cc76:	68db      	ldr	r3, [r3, #12]
 810cc78:	2b0f      	cmp	r3, #15
 810cc7a:	d90b      	bls.n	810cc94 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810cc7c:	687b      	ldr	r3, [r7, #4]
 810cc7e:	681a      	ldr	r2, [r3, #0]
 810cc80:	687b      	ldr	r3, [r7, #4]
 810cc82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810cc84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810cc86:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810cc88:	687b      	ldr	r3, [r7, #4]
 810cc8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810cc8c:	1d1a      	adds	r2, r3, #4
 810cc8e:	687b      	ldr	r3, [r7, #4]
 810cc90:	665a      	str	r2, [r3, #100]	; 0x64
 810cc92:	e01d      	b.n	810ccd0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810cc94:	687b      	ldr	r3, [r7, #4]
 810cc96:	68db      	ldr	r3, [r3, #12]
 810cc98:	2b07      	cmp	r3, #7
 810cc9a:	d90b      	bls.n	810ccb4 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810cc9c:	687b      	ldr	r3, [r7, #4]
 810cc9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810cca0:	68fa      	ldr	r2, [r7, #12]
 810cca2:	8812      	ldrh	r2, [r2, #0]
 810cca4:	b292      	uxth	r2, r2
 810cca6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810cca8:	687b      	ldr	r3, [r7, #4]
 810ccaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ccac:	1c9a      	adds	r2, r3, #2
 810ccae:	687b      	ldr	r3, [r7, #4]
 810ccb0:	665a      	str	r2, [r3, #100]	; 0x64
 810ccb2:	e00d      	b.n	810ccd0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810ccb4:	687b      	ldr	r3, [r7, #4]
 810ccb6:	681b      	ldr	r3, [r3, #0]
 810ccb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810ccbc:	687b      	ldr	r3, [r7, #4]
 810ccbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ccc0:	7812      	ldrb	r2, [r2, #0]
 810ccc2:	b2d2      	uxtb	r2, r2
 810ccc4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810ccc6:	687b      	ldr	r3, [r7, #4]
 810ccc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ccca:	1c5a      	adds	r2, r3, #1
 810cccc:	687b      	ldr	r3, [r7, #4]
 810ccce:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810ccd0:	687b      	ldr	r3, [r7, #4]
 810ccd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ccd6:	b29b      	uxth	r3, r3
 810ccd8:	3b01      	subs	r3, #1
 810ccda:	b29a      	uxth	r2, r3
 810ccdc:	687b      	ldr	r3, [r7, #4]
 810ccde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810cce2:	687b      	ldr	r3, [r7, #4]
 810cce4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810cce8:	b29b      	uxth	r3, r3
 810ccea:	2b00      	cmp	r3, #0
 810ccec:	d1c2      	bne.n	810cc74 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810ccee:	6878      	ldr	r0, [r7, #4]
 810ccf0:	f000 f9c9 	bl	810d086 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810ccf4:	687b      	ldr	r3, [r7, #4]
 810ccf6:	2201      	movs	r2, #1
 810ccf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810ccfc:	687b      	ldr	r3, [r7, #4]
 810ccfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810cd02:	2b00      	cmp	r3, #0
 810cd04:	d003      	beq.n	810cd0e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810cd06:	6878      	ldr	r0, [r7, #4]
 810cd08:	f000 f914 	bl	810cf34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810cd0c:	e0e5      	b.n	810ceda <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810cd0e:	7cfb      	ldrb	r3, [r7, #19]
 810cd10:	2b05      	cmp	r3, #5
 810cd12:	d103      	bne.n	810cd1c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810cd14:	6878      	ldr	r0, [r7, #4]
 810cd16:	f7f4 ffeb 	bl	8101cf0 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810cd1a:	e0db      	b.n	810ced4 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810cd1c:	7cfb      	ldrb	r3, [r7, #19]
 810cd1e:	2b04      	cmp	r3, #4
 810cd20:	d103      	bne.n	810cd2a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810cd22:	6878      	ldr	r0, [r7, #4]
 810cd24:	f000 f8e8 	bl	810cef8 <HAL_SPI_RxCpltCallback>
    return;
 810cd28:	e0d4      	b.n	810ced4 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810cd2a:	7cfb      	ldrb	r3, [r7, #19]
 810cd2c:	2b03      	cmp	r3, #3
 810cd2e:	f040 80d1 	bne.w	810ced4 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810cd32:	6878      	ldr	r0, [r7, #4]
 810cd34:	f000 f8d6 	bl	810cee4 <HAL_SPI_TxCpltCallback>
    return;
 810cd38:	e0cc      	b.n	810ced4 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810cd3a:	69fb      	ldr	r3, [r7, #28]
 810cd3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810cd40:	2b00      	cmp	r3, #0
 810cd42:	d00d      	beq.n	810cd60 <HAL_SPI_IRQHandler+0x23c>
 810cd44:	6a3b      	ldr	r3, [r7, #32]
 810cd46:	f003 0308 	and.w	r3, r3, #8
 810cd4a:	2b00      	cmp	r3, #0
 810cd4c:	d008      	beq.n	810cd60 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810cd4e:	687b      	ldr	r3, [r7, #4]
 810cd50:	681b      	ldr	r3, [r3, #0]
 810cd52:	699a      	ldr	r2, [r3, #24]
 810cd54:	687b      	ldr	r3, [r7, #4]
 810cd56:	681b      	ldr	r3, [r3, #0]
 810cd58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810cd5c:	619a      	str	r2, [r3, #24]

    return;
 810cd5e:	e0bc      	b.n	810ceda <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810cd60:	69bb      	ldr	r3, [r7, #24]
 810cd62:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810cd66:	2b00      	cmp	r3, #0
 810cd68:	f000 80b7 	beq.w	810ceda <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810cd6c:	69bb      	ldr	r3, [r7, #24]
 810cd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810cd72:	2b00      	cmp	r3, #0
 810cd74:	d00f      	beq.n	810cd96 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810cd76:	687b      	ldr	r3, [r7, #4]
 810cd78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810cd7c:	f043 0204 	orr.w	r2, r3, #4
 810cd80:	687b      	ldr	r3, [r7, #4]
 810cd82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810cd86:	687b      	ldr	r3, [r7, #4]
 810cd88:	681b      	ldr	r3, [r3, #0]
 810cd8a:	699a      	ldr	r2, [r3, #24]
 810cd8c:	687b      	ldr	r3, [r7, #4]
 810cd8e:	681b      	ldr	r3, [r3, #0]
 810cd90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810cd94:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810cd96:	69bb      	ldr	r3, [r7, #24]
 810cd98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810cd9c:	2b00      	cmp	r3, #0
 810cd9e:	d00f      	beq.n	810cdc0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810cda0:	687b      	ldr	r3, [r7, #4]
 810cda2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810cda6:	f043 0201 	orr.w	r2, r3, #1
 810cdaa:	687b      	ldr	r3, [r7, #4]
 810cdac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810cdb0:	687b      	ldr	r3, [r7, #4]
 810cdb2:	681b      	ldr	r3, [r3, #0]
 810cdb4:	699a      	ldr	r2, [r3, #24]
 810cdb6:	687b      	ldr	r3, [r7, #4]
 810cdb8:	681b      	ldr	r3, [r3, #0]
 810cdba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810cdbe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810cdc0:	69bb      	ldr	r3, [r7, #24]
 810cdc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810cdc6:	2b00      	cmp	r3, #0
 810cdc8:	d00f      	beq.n	810cdea <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810cdca:	687b      	ldr	r3, [r7, #4]
 810cdcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810cdd0:	f043 0208 	orr.w	r2, r3, #8
 810cdd4:	687b      	ldr	r3, [r7, #4]
 810cdd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810cdda:	687b      	ldr	r3, [r7, #4]
 810cddc:	681b      	ldr	r3, [r3, #0]
 810cdde:	699a      	ldr	r2, [r3, #24]
 810cde0:	687b      	ldr	r3, [r7, #4]
 810cde2:	681b      	ldr	r3, [r3, #0]
 810cde4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810cde8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810cdea:	69bb      	ldr	r3, [r7, #24]
 810cdec:	f003 0320 	and.w	r3, r3, #32
 810cdf0:	2b00      	cmp	r3, #0
 810cdf2:	d00f      	beq.n	810ce14 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810cdf4:	687b      	ldr	r3, [r7, #4]
 810cdf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810cdfa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810cdfe:	687b      	ldr	r3, [r7, #4]
 810ce00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810ce04:	687b      	ldr	r3, [r7, #4]
 810ce06:	681b      	ldr	r3, [r3, #0]
 810ce08:	699a      	ldr	r2, [r3, #24]
 810ce0a:	687b      	ldr	r3, [r7, #4]
 810ce0c:	681b      	ldr	r3, [r3, #0]
 810ce0e:	f042 0220 	orr.w	r2, r2, #32
 810ce12:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810ce14:	687b      	ldr	r3, [r7, #4]
 810ce16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ce1a:	2b00      	cmp	r3, #0
 810ce1c:	d05c      	beq.n	810ced8 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810ce1e:	687b      	ldr	r3, [r7, #4]
 810ce20:	681b      	ldr	r3, [r3, #0]
 810ce22:	681a      	ldr	r2, [r3, #0]
 810ce24:	687b      	ldr	r3, [r7, #4]
 810ce26:	681b      	ldr	r3, [r3, #0]
 810ce28:	f022 0201 	bic.w	r2, r2, #1
 810ce2c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810ce2e:	687b      	ldr	r3, [r7, #4]
 810ce30:	681b      	ldr	r3, [r3, #0]
 810ce32:	691b      	ldr	r3, [r3, #16]
 810ce34:	687a      	ldr	r2, [r7, #4]
 810ce36:	6812      	ldr	r2, [r2, #0]
 810ce38:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810ce3c:	f023 0303 	bic.w	r3, r3, #3
 810ce40:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810ce42:	697b      	ldr	r3, [r7, #20]
 810ce44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810ce48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810ce4c:	d138      	bne.n	810cec0 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810ce4e:	687b      	ldr	r3, [r7, #4]
 810ce50:	681b      	ldr	r3, [r3, #0]
 810ce52:	689a      	ldr	r2, [r3, #8]
 810ce54:	687b      	ldr	r3, [r7, #4]
 810ce56:	681b      	ldr	r3, [r3, #0]
 810ce58:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810ce5c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810ce5e:	687b      	ldr	r3, [r7, #4]
 810ce60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ce62:	2b00      	cmp	r3, #0
 810ce64:	d013      	beq.n	810ce8e <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810ce66:	687b      	ldr	r3, [r7, #4]
 810ce68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ce6a:	4a1d      	ldr	r2, [pc, #116]	; (810cee0 <HAL_SPI_IRQHandler+0x3bc>)
 810ce6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810ce6e:	687b      	ldr	r3, [r7, #4]
 810ce70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ce72:	4618      	mov	r0, r3
 810ce74:	f7f9 fc54 	bl	8106720 <HAL_DMA_Abort_IT>
 810ce78:	4603      	mov	r3, r0
 810ce7a:	2b00      	cmp	r3, #0
 810ce7c:	d007      	beq.n	810ce8e <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810ce7e:	687b      	ldr	r3, [r7, #4]
 810ce80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ce84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810ce88:	687b      	ldr	r3, [r7, #4]
 810ce8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810ce8e:	687b      	ldr	r3, [r7, #4]
 810ce90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ce92:	2b00      	cmp	r3, #0
 810ce94:	d020      	beq.n	810ced8 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810ce96:	687b      	ldr	r3, [r7, #4]
 810ce98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ce9a:	4a11      	ldr	r2, [pc, #68]	; (810cee0 <HAL_SPI_IRQHandler+0x3bc>)
 810ce9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810ce9e:	687b      	ldr	r3, [r7, #4]
 810cea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810cea2:	4618      	mov	r0, r3
 810cea4:	f7f9 fc3c 	bl	8106720 <HAL_DMA_Abort_IT>
 810cea8:	4603      	mov	r3, r0
 810ceaa:	2b00      	cmp	r3, #0
 810ceac:	d014      	beq.n	810ced8 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810ceae:	687b      	ldr	r3, [r7, #4]
 810ceb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ceb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810ceb8:	687b      	ldr	r3, [r7, #4]
 810ceba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810cebe:	e00b      	b.n	810ced8 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810cec0:	687b      	ldr	r3, [r7, #4]
 810cec2:	2201      	movs	r2, #1
 810cec4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810cec8:	6878      	ldr	r0, [r7, #4]
 810ceca:	f000 f833 	bl	810cf34 <HAL_SPI_ErrorCallback>
    return;
 810cece:	e003      	b.n	810ced8 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810ced0:	bf00      	nop
 810ced2:	e002      	b.n	810ceda <HAL_SPI_IRQHandler+0x3b6>
    return;
 810ced4:	bf00      	nop
 810ced6:	e000      	b.n	810ceda <HAL_SPI_IRQHandler+0x3b6>
    return;
 810ced8:	bf00      	nop
  }
}
 810ceda:	3728      	adds	r7, #40	; 0x28
 810cedc:	46bd      	mov	sp, r7
 810cede:	bd80      	pop	{r7, pc}
 810cee0:	0810d053 	.word	0x0810d053

0810cee4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810cee4:	b480      	push	{r7}
 810cee6:	b083      	sub	sp, #12
 810cee8:	af00      	add	r7, sp, #0
 810ceea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810ceec:	bf00      	nop
 810ceee:	370c      	adds	r7, #12
 810cef0:	46bd      	mov	sp, r7
 810cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cef6:	4770      	bx	lr

0810cef8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810cef8:	b480      	push	{r7}
 810cefa:	b083      	sub	sp, #12
 810cefc:	af00      	add	r7, sp, #0
 810cefe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810cf00:	bf00      	nop
 810cf02:	370c      	adds	r7, #12
 810cf04:	46bd      	mov	sp, r7
 810cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf0a:	4770      	bx	lr

0810cf0c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810cf0c:	b480      	push	{r7}
 810cf0e:	b083      	sub	sp, #12
 810cf10:	af00      	add	r7, sp, #0
 810cf12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 810cf14:	bf00      	nop
 810cf16:	370c      	adds	r7, #12
 810cf18:	46bd      	mov	sp, r7
 810cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf1e:	4770      	bx	lr

0810cf20 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810cf20:	b480      	push	{r7}
 810cf22:	b083      	sub	sp, #12
 810cf24:	af00      	add	r7, sp, #0
 810cf26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 810cf28:	bf00      	nop
 810cf2a:	370c      	adds	r7, #12
 810cf2c:	46bd      	mov	sp, r7
 810cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf32:	4770      	bx	lr

0810cf34 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810cf34:	b480      	push	{r7}
 810cf36:	b083      	sub	sp, #12
 810cf38:	af00      	add	r7, sp, #0
 810cf3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810cf3c:	bf00      	nop
 810cf3e:	370c      	adds	r7, #12
 810cf40:	46bd      	mov	sp, r7
 810cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf46:	4770      	bx	lr

0810cf48 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810cf48:	b580      	push	{r7, lr}
 810cf4a:	b084      	sub	sp, #16
 810cf4c:	af00      	add	r7, sp, #0
 810cf4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810cf50:	687b      	ldr	r3, [r7, #4]
 810cf52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cf54:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810cf56:	68fb      	ldr	r3, [r7, #12]
 810cf58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810cf5c:	b2db      	uxtb	r3, r3
 810cf5e:	2b07      	cmp	r3, #7
 810cf60:	d011      	beq.n	810cf86 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 810cf62:	68fb      	ldr	r3, [r7, #12]
 810cf64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810cf66:	69db      	ldr	r3, [r3, #28]
 810cf68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cf6c:	d103      	bne.n	810cf76 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 810cf6e:	68f8      	ldr	r0, [r7, #12]
 810cf70:	f7ff ffc2 	bl	810cef8 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810cf74:	e007      	b.n	810cf86 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810cf76:	68fb      	ldr	r3, [r7, #12]
 810cf78:	681b      	ldr	r3, [r3, #0]
 810cf7a:	691a      	ldr	r2, [r3, #16]
 810cf7c:	68fb      	ldr	r3, [r7, #12]
 810cf7e:	681b      	ldr	r3, [r3, #0]
 810cf80:	f042 0208 	orr.w	r2, r2, #8
 810cf84:	611a      	str	r2, [r3, #16]
}
 810cf86:	bf00      	nop
 810cf88:	3710      	adds	r7, #16
 810cf8a:	46bd      	mov	sp, r7
 810cf8c:	bd80      	pop	{r7, pc}

0810cf8e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810cf8e:	b580      	push	{r7, lr}
 810cf90:	b084      	sub	sp, #16
 810cf92:	af00      	add	r7, sp, #0
 810cf94:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810cf96:	687b      	ldr	r3, [r7, #4]
 810cf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cf9a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810cf9c:	68fb      	ldr	r3, [r7, #12]
 810cf9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810cfa2:	b2db      	uxtb	r3, r3
 810cfa4:	2b07      	cmp	r3, #7
 810cfa6:	d011      	beq.n	810cfcc <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810cfa8:	68fb      	ldr	r3, [r7, #12]
 810cfaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810cfac:	69db      	ldr	r3, [r3, #28]
 810cfae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cfb2:	d103      	bne.n	810cfbc <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 810cfb4:	68f8      	ldr	r0, [r7, #12]
 810cfb6:	f7f4 fe9b 	bl	8101cf0 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810cfba:	e007      	b.n	810cfcc <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810cfbc:	68fb      	ldr	r3, [r7, #12]
 810cfbe:	681b      	ldr	r3, [r3, #0]
 810cfc0:	691a      	ldr	r2, [r3, #16]
 810cfc2:	68fb      	ldr	r3, [r7, #12]
 810cfc4:	681b      	ldr	r3, [r3, #0]
 810cfc6:	f042 0208 	orr.w	r2, r2, #8
 810cfca:	611a      	str	r2, [r3, #16]
}
 810cfcc:	bf00      	nop
 810cfce:	3710      	adds	r7, #16
 810cfd0:	46bd      	mov	sp, r7
 810cfd2:	bd80      	pop	{r7, pc}

0810cfd4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810cfd4:	b580      	push	{r7, lr}
 810cfd6:	b084      	sub	sp, #16
 810cfd8:	af00      	add	r7, sp, #0
 810cfda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810cfdc:	687b      	ldr	r3, [r7, #4]
 810cfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cfe0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 810cfe2:	68f8      	ldr	r0, [r7, #12]
 810cfe4:	f7ff ff92 	bl	810cf0c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810cfe8:	bf00      	nop
 810cfea:	3710      	adds	r7, #16
 810cfec:	46bd      	mov	sp, r7
 810cfee:	bd80      	pop	{r7, pc}

0810cff0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810cff0:	b580      	push	{r7, lr}
 810cff2:	b084      	sub	sp, #16
 810cff4:	af00      	add	r7, sp, #0
 810cff6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810cff8:	687b      	ldr	r3, [r7, #4]
 810cffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cffc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 810cffe:	68f8      	ldr	r0, [r7, #12]
 810d000:	f7ff ff8e 	bl	810cf20 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810d004:	bf00      	nop
 810d006:	3710      	adds	r7, #16
 810d008:	46bd      	mov	sp, r7
 810d00a:	bd80      	pop	{r7, pc}

0810d00c <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 810d00c:	b580      	push	{r7, lr}
 810d00e:	b084      	sub	sp, #16
 810d010:	af00      	add	r7, sp, #0
 810d012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810d014:	687b      	ldr	r3, [r7, #4]
 810d016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d018:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 810d01a:	6878      	ldr	r0, [r7, #4]
 810d01c:	f7fa fcfc 	bl	8107a18 <HAL_DMA_GetError>
 810d020:	4603      	mov	r3, r0
 810d022:	2b02      	cmp	r3, #2
 810d024:	d011      	beq.n	810d04a <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 810d026:	68f8      	ldr	r0, [r7, #12]
 810d028:	f000 f82d 	bl	810d086 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810d02c:	68fb      	ldr	r3, [r7, #12]
 810d02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d032:	f043 0210 	orr.w	r2, r3, #16
 810d036:	68fb      	ldr	r3, [r7, #12]
 810d038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 810d03c:	68fb      	ldr	r3, [r7, #12]
 810d03e:	2201      	movs	r2, #1
 810d040:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 810d044:	68f8      	ldr	r0, [r7, #12]
 810d046:	f7ff ff75 	bl	810cf34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 810d04a:	bf00      	nop
 810d04c:	3710      	adds	r7, #16
 810d04e:	46bd      	mov	sp, r7
 810d050:	bd80      	pop	{r7, pc}

0810d052 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810d052:	b580      	push	{r7, lr}
 810d054:	b084      	sub	sp, #16
 810d056:	af00      	add	r7, sp, #0
 810d058:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810d05a:	687b      	ldr	r3, [r7, #4]
 810d05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d05e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810d060:	68fb      	ldr	r3, [r7, #12]
 810d062:	2200      	movs	r2, #0
 810d064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810d068:	68fb      	ldr	r3, [r7, #12]
 810d06a:	2200      	movs	r2, #0
 810d06c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810d070:	68fb      	ldr	r3, [r7, #12]
 810d072:	2201      	movs	r2, #1
 810d074:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810d078:	68f8      	ldr	r0, [r7, #12]
 810d07a:	f7ff ff5b 	bl	810cf34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810d07e:	bf00      	nop
 810d080:	3710      	adds	r7, #16
 810d082:	46bd      	mov	sp, r7
 810d084:	bd80      	pop	{r7, pc}

0810d086 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810d086:	b480      	push	{r7}
 810d088:	b085      	sub	sp, #20
 810d08a:	af00      	add	r7, sp, #0
 810d08c:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810d08e:	687b      	ldr	r3, [r7, #4]
 810d090:	681b      	ldr	r3, [r3, #0]
 810d092:	695b      	ldr	r3, [r3, #20]
 810d094:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810d096:	687b      	ldr	r3, [r7, #4]
 810d098:	681b      	ldr	r3, [r3, #0]
 810d09a:	699a      	ldr	r2, [r3, #24]
 810d09c:	687b      	ldr	r3, [r7, #4]
 810d09e:	681b      	ldr	r3, [r3, #0]
 810d0a0:	f042 0208 	orr.w	r2, r2, #8
 810d0a4:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810d0a6:	687b      	ldr	r3, [r7, #4]
 810d0a8:	681b      	ldr	r3, [r3, #0]
 810d0aa:	699a      	ldr	r2, [r3, #24]
 810d0ac:	687b      	ldr	r3, [r7, #4]
 810d0ae:	681b      	ldr	r3, [r3, #0]
 810d0b0:	f042 0210 	orr.w	r2, r2, #16
 810d0b4:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810d0b6:	687b      	ldr	r3, [r7, #4]
 810d0b8:	681b      	ldr	r3, [r3, #0]
 810d0ba:	681a      	ldr	r2, [r3, #0]
 810d0bc:	687b      	ldr	r3, [r7, #4]
 810d0be:	681b      	ldr	r3, [r3, #0]
 810d0c0:	f022 0201 	bic.w	r2, r2, #1
 810d0c4:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810d0c6:	687b      	ldr	r3, [r7, #4]
 810d0c8:	681b      	ldr	r3, [r3, #0]
 810d0ca:	691b      	ldr	r3, [r3, #16]
 810d0cc:	687a      	ldr	r2, [r7, #4]
 810d0ce:	6812      	ldr	r2, [r2, #0]
 810d0d0:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810d0d4:	f023 0303 	bic.w	r3, r3, #3
 810d0d8:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810d0da:	687b      	ldr	r3, [r7, #4]
 810d0dc:	681b      	ldr	r3, [r3, #0]
 810d0de:	689a      	ldr	r2, [r3, #8]
 810d0e0:	687b      	ldr	r3, [r7, #4]
 810d0e2:	681b      	ldr	r3, [r3, #0]
 810d0e4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810d0e8:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810d0ea:	687b      	ldr	r3, [r7, #4]
 810d0ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810d0f0:	b2db      	uxtb	r3, r3
 810d0f2:	2b04      	cmp	r3, #4
 810d0f4:	d014      	beq.n	810d120 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810d0f6:	68fb      	ldr	r3, [r7, #12]
 810d0f8:	f003 0320 	and.w	r3, r3, #32
 810d0fc:	2b00      	cmp	r3, #0
 810d0fe:	d00f      	beq.n	810d120 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810d100:	687b      	ldr	r3, [r7, #4]
 810d102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d106:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810d10a:	687b      	ldr	r3, [r7, #4]
 810d10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810d110:	687b      	ldr	r3, [r7, #4]
 810d112:	681b      	ldr	r3, [r3, #0]
 810d114:	699a      	ldr	r2, [r3, #24]
 810d116:	687b      	ldr	r3, [r7, #4]
 810d118:	681b      	ldr	r3, [r3, #0]
 810d11a:	f042 0220 	orr.w	r2, r2, #32
 810d11e:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810d120:	687b      	ldr	r3, [r7, #4]
 810d122:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810d126:	b2db      	uxtb	r3, r3
 810d128:	2b03      	cmp	r3, #3
 810d12a:	d014      	beq.n	810d156 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810d12c:	68fb      	ldr	r3, [r7, #12]
 810d12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d132:	2b00      	cmp	r3, #0
 810d134:	d00f      	beq.n	810d156 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810d136:	687b      	ldr	r3, [r7, #4]
 810d138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d13c:	f043 0204 	orr.w	r2, r3, #4
 810d140:	687b      	ldr	r3, [r7, #4]
 810d142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810d146:	687b      	ldr	r3, [r7, #4]
 810d148:	681b      	ldr	r3, [r3, #0]
 810d14a:	699a      	ldr	r2, [r3, #24]
 810d14c:	687b      	ldr	r3, [r7, #4]
 810d14e:	681b      	ldr	r3, [r3, #0]
 810d150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810d154:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810d156:	68fb      	ldr	r3, [r7, #12]
 810d158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810d15c:	2b00      	cmp	r3, #0
 810d15e:	d00f      	beq.n	810d180 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810d160:	687b      	ldr	r3, [r7, #4]
 810d162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d166:	f043 0201 	orr.w	r2, r3, #1
 810d16a:	687b      	ldr	r3, [r7, #4]
 810d16c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810d170:	687b      	ldr	r3, [r7, #4]
 810d172:	681b      	ldr	r3, [r3, #0]
 810d174:	699a      	ldr	r2, [r3, #24]
 810d176:	687b      	ldr	r3, [r7, #4]
 810d178:	681b      	ldr	r3, [r3, #0]
 810d17a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810d17e:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810d180:	68fb      	ldr	r3, [r7, #12]
 810d182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810d186:	2b00      	cmp	r3, #0
 810d188:	d00f      	beq.n	810d1aa <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810d18a:	687b      	ldr	r3, [r7, #4]
 810d18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d190:	f043 0208 	orr.w	r2, r3, #8
 810d194:	687b      	ldr	r3, [r7, #4]
 810d196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810d19a:	687b      	ldr	r3, [r7, #4]
 810d19c:	681b      	ldr	r3, [r3, #0]
 810d19e:	699a      	ldr	r2, [r3, #24]
 810d1a0:	687b      	ldr	r3, [r7, #4]
 810d1a2:	681b      	ldr	r3, [r3, #0]
 810d1a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810d1a8:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810d1aa:	687b      	ldr	r3, [r7, #4]
 810d1ac:	2200      	movs	r2, #0
 810d1ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810d1b2:	687b      	ldr	r3, [r7, #4]
 810d1b4:	2200      	movs	r2, #0
 810d1b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810d1ba:	bf00      	nop
 810d1bc:	3714      	adds	r7, #20
 810d1be:	46bd      	mov	sp, r7
 810d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1c4:	4770      	bx	lr

0810d1c6 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810d1c6:	b480      	push	{r7}
 810d1c8:	b085      	sub	sp, #20
 810d1ca:	af00      	add	r7, sp, #0
 810d1cc:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810d1ce:	687b      	ldr	r3, [r7, #4]
 810d1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d1d2:	095b      	lsrs	r3, r3, #5
 810d1d4:	3301      	adds	r3, #1
 810d1d6:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810d1d8:	687b      	ldr	r3, [r7, #4]
 810d1da:	68db      	ldr	r3, [r3, #12]
 810d1dc:	3301      	adds	r3, #1
 810d1de:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810d1e0:	68bb      	ldr	r3, [r7, #8]
 810d1e2:	3307      	adds	r3, #7
 810d1e4:	08db      	lsrs	r3, r3, #3
 810d1e6:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810d1e8:	68bb      	ldr	r3, [r7, #8]
 810d1ea:	68fa      	ldr	r2, [r7, #12]
 810d1ec:	fb02 f303 	mul.w	r3, r2, r3
}
 810d1f0:	4618      	mov	r0, r3
 810d1f2:	3714      	adds	r7, #20
 810d1f4:	46bd      	mov	sp, r7
 810d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1fa:	4770      	bx	lr

0810d1fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810d1fc:	b580      	push	{r7, lr}
 810d1fe:	b082      	sub	sp, #8
 810d200:	af00      	add	r7, sp, #0
 810d202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810d204:	687b      	ldr	r3, [r7, #4]
 810d206:	2b00      	cmp	r3, #0
 810d208:	d101      	bne.n	810d20e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810d20a:	2301      	movs	r3, #1
 810d20c:	e042      	b.n	810d294 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810d20e:	687b      	ldr	r3, [r7, #4]
 810d210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d214:	2b00      	cmp	r3, #0
 810d216:	d106      	bne.n	810d226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810d218:	687b      	ldr	r3, [r7, #4]
 810d21a:	2200      	movs	r2, #0
 810d21c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810d220:	6878      	ldr	r0, [r7, #4]
 810d222:	f7f6 fac1 	bl	81037a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810d226:	687b      	ldr	r3, [r7, #4]
 810d228:	2224      	movs	r2, #36	; 0x24
 810d22a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810d22e:	687b      	ldr	r3, [r7, #4]
 810d230:	681b      	ldr	r3, [r3, #0]
 810d232:	681a      	ldr	r2, [r3, #0]
 810d234:	687b      	ldr	r3, [r7, #4]
 810d236:	681b      	ldr	r3, [r3, #0]
 810d238:	f022 0201 	bic.w	r2, r2, #1
 810d23c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810d23e:	6878      	ldr	r0, [r7, #4]
 810d240:	f000 fbd6 	bl	810d9f0 <UART_SetConfig>
 810d244:	4603      	mov	r3, r0
 810d246:	2b01      	cmp	r3, #1
 810d248:	d101      	bne.n	810d24e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810d24a:	2301      	movs	r3, #1
 810d24c:	e022      	b.n	810d294 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810d24e:	687b      	ldr	r3, [r7, #4]
 810d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d252:	2b00      	cmp	r3, #0
 810d254:	d002      	beq.n	810d25c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810d256:	6878      	ldr	r0, [r7, #4]
 810d258:	f001 f92a 	bl	810e4b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810d25c:	687b      	ldr	r3, [r7, #4]
 810d25e:	681b      	ldr	r3, [r3, #0]
 810d260:	685a      	ldr	r2, [r3, #4]
 810d262:	687b      	ldr	r3, [r7, #4]
 810d264:	681b      	ldr	r3, [r3, #0]
 810d266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810d26a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810d26c:	687b      	ldr	r3, [r7, #4]
 810d26e:	681b      	ldr	r3, [r3, #0]
 810d270:	689a      	ldr	r2, [r3, #8]
 810d272:	687b      	ldr	r3, [r7, #4]
 810d274:	681b      	ldr	r3, [r3, #0]
 810d276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810d27a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810d27c:	687b      	ldr	r3, [r7, #4]
 810d27e:	681b      	ldr	r3, [r3, #0]
 810d280:	681a      	ldr	r2, [r3, #0]
 810d282:	687b      	ldr	r3, [r7, #4]
 810d284:	681b      	ldr	r3, [r3, #0]
 810d286:	f042 0201 	orr.w	r2, r2, #1
 810d28a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810d28c:	6878      	ldr	r0, [r7, #4]
 810d28e:	f001 f9b1 	bl	810e5f4 <UART_CheckIdleState>
 810d292:	4603      	mov	r3, r0
}
 810d294:	4618      	mov	r0, r3
 810d296:	3708      	adds	r7, #8
 810d298:	46bd      	mov	sp, r7
 810d29a:	bd80      	pop	{r7, pc}

0810d29c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810d29c:	b580      	push	{r7, lr}
 810d29e:	b084      	sub	sp, #16
 810d2a0:	af00      	add	r7, sp, #0
 810d2a2:	60f8      	str	r0, [r7, #12]
 810d2a4:	60b9      	str	r1, [r7, #8]
 810d2a6:	4613      	mov	r3, r2
 810d2a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810d2aa:	68fb      	ldr	r3, [r7, #12]
 810d2ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d2b0:	2b20      	cmp	r3, #32
 810d2b2:	d168      	bne.n	810d386 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810d2b4:	68bb      	ldr	r3, [r7, #8]
 810d2b6:	2b00      	cmp	r3, #0
 810d2b8:	d002      	beq.n	810d2c0 <HAL_UART_Transmit_DMA+0x24>
 810d2ba:	88fb      	ldrh	r3, [r7, #6]
 810d2bc:	2b00      	cmp	r3, #0
 810d2be:	d101      	bne.n	810d2c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810d2c0:	2301      	movs	r3, #1
 810d2c2:	e061      	b.n	810d388 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810d2c4:	68fb      	ldr	r3, [r7, #12]
 810d2c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d2ca:	2b01      	cmp	r3, #1
 810d2cc:	d101      	bne.n	810d2d2 <HAL_UART_Transmit_DMA+0x36>
 810d2ce:	2302      	movs	r3, #2
 810d2d0:	e05a      	b.n	810d388 <HAL_UART_Transmit_DMA+0xec>
 810d2d2:	68fb      	ldr	r3, [r7, #12]
 810d2d4:	2201      	movs	r2, #1
 810d2d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810d2da:	68fb      	ldr	r3, [r7, #12]
 810d2dc:	68ba      	ldr	r2, [r7, #8]
 810d2de:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810d2e0:	68fb      	ldr	r3, [r7, #12]
 810d2e2:	88fa      	ldrh	r2, [r7, #6]
 810d2e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810d2e8:	68fb      	ldr	r3, [r7, #12]
 810d2ea:	88fa      	ldrh	r2, [r7, #6]
 810d2ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d2f0:	68fb      	ldr	r3, [r7, #12]
 810d2f2:	2200      	movs	r2, #0
 810d2f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810d2f8:	68fb      	ldr	r3, [r7, #12]
 810d2fa:	2221      	movs	r2, #33	; 0x21
 810d2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810d300:	68fb      	ldr	r3, [r7, #12]
 810d302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810d304:	2b00      	cmp	r3, #0
 810d306:	d02c      	beq.n	810d362 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810d308:	68fb      	ldr	r3, [r7, #12]
 810d30a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810d30c:	4a20      	ldr	r2, [pc, #128]	; (810d390 <HAL_UART_Transmit_DMA+0xf4>)
 810d30e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810d310:	68fb      	ldr	r3, [r7, #12]
 810d312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810d314:	4a1f      	ldr	r2, [pc, #124]	; (810d394 <HAL_UART_Transmit_DMA+0xf8>)
 810d316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810d318:	68fb      	ldr	r3, [r7, #12]
 810d31a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810d31c:	4a1e      	ldr	r2, [pc, #120]	; (810d398 <HAL_UART_Transmit_DMA+0xfc>)
 810d31e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810d320:	68fb      	ldr	r3, [r7, #12]
 810d322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810d324:	2200      	movs	r2, #0
 810d326:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810d328:	68fb      	ldr	r3, [r7, #12]
 810d32a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810d32c:	68fb      	ldr	r3, [r7, #12]
 810d32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810d330:	4619      	mov	r1, r3
 810d332:	68fb      	ldr	r3, [r7, #12]
 810d334:	681b      	ldr	r3, [r3, #0]
 810d336:	3328      	adds	r3, #40	; 0x28
 810d338:	461a      	mov	r2, r3
 810d33a:	88fb      	ldrh	r3, [r7, #6]
 810d33c:	f7f8 fc68 	bl	8105c10 <HAL_DMA_Start_IT>
 810d340:	4603      	mov	r3, r0
 810d342:	2b00      	cmp	r3, #0
 810d344:	d00d      	beq.n	810d362 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810d346:	68fb      	ldr	r3, [r7, #12]
 810d348:	2210      	movs	r2, #16
 810d34a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810d34e:	68fb      	ldr	r3, [r7, #12]
 810d350:	2200      	movs	r2, #0
 810d352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810d356:	68fb      	ldr	r3, [r7, #12]
 810d358:	2220      	movs	r2, #32
 810d35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810d35e:	2301      	movs	r3, #1
 810d360:	e012      	b.n	810d388 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810d362:	68fb      	ldr	r3, [r7, #12]
 810d364:	681b      	ldr	r3, [r3, #0]
 810d366:	2240      	movs	r2, #64	; 0x40
 810d368:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810d36a:	68fb      	ldr	r3, [r7, #12]
 810d36c:	2200      	movs	r2, #0
 810d36e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810d372:	68fb      	ldr	r3, [r7, #12]
 810d374:	681b      	ldr	r3, [r3, #0]
 810d376:	689a      	ldr	r2, [r3, #8]
 810d378:	68fb      	ldr	r3, [r7, #12]
 810d37a:	681b      	ldr	r3, [r3, #0]
 810d37c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810d380:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810d382:	2300      	movs	r3, #0
 810d384:	e000      	b.n	810d388 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810d386:	2302      	movs	r3, #2
  }
}
 810d388:	4618      	mov	r0, r3
 810d38a:	3710      	adds	r7, #16
 810d38c:	46bd      	mov	sp, r7
 810d38e:	bd80      	pop	{r7, pc}
 810d390:	0810e909 	.word	0x0810e909
 810d394:	0810e959 	.word	0x0810e959
 810d398:	0810ea43 	.word	0x0810ea43

0810d39c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810d39c:	b580      	push	{r7, lr}
 810d39e:	b084      	sub	sp, #16
 810d3a0:	af00      	add	r7, sp, #0
 810d3a2:	60f8      	str	r0, [r7, #12]
 810d3a4:	60b9      	str	r1, [r7, #8]
 810d3a6:	4613      	mov	r3, r2
 810d3a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810d3aa:	68fb      	ldr	r3, [r7, #12]
 810d3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810d3b0:	2b20      	cmp	r3, #32
 810d3b2:	d131      	bne.n	810d418 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810d3b4:	68bb      	ldr	r3, [r7, #8]
 810d3b6:	2b00      	cmp	r3, #0
 810d3b8:	d002      	beq.n	810d3c0 <HAL_UART_Receive_DMA+0x24>
 810d3ba:	88fb      	ldrh	r3, [r7, #6]
 810d3bc:	2b00      	cmp	r3, #0
 810d3be:	d101      	bne.n	810d3c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810d3c0:	2301      	movs	r3, #1
 810d3c2:	e02a      	b.n	810d41a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810d3c4:	68fb      	ldr	r3, [r7, #12]
 810d3c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d3ca:	2b01      	cmp	r3, #1
 810d3cc:	d101      	bne.n	810d3d2 <HAL_UART_Receive_DMA+0x36>
 810d3ce:	2302      	movs	r3, #2
 810d3d0:	e023      	b.n	810d41a <HAL_UART_Receive_DMA+0x7e>
 810d3d2:	68fb      	ldr	r3, [r7, #12]
 810d3d4:	2201      	movs	r2, #1
 810d3d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d3da:	68fb      	ldr	r3, [r7, #12]
 810d3dc:	2200      	movs	r2, #0
 810d3de:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810d3e0:	68fb      	ldr	r3, [r7, #12]
 810d3e2:	681b      	ldr	r3, [r3, #0]
 810d3e4:	4a0f      	ldr	r2, [pc, #60]	; (810d424 <HAL_UART_Receive_DMA+0x88>)
 810d3e6:	4293      	cmp	r3, r2
 810d3e8:	d00e      	beq.n	810d408 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810d3ea:	68fb      	ldr	r3, [r7, #12]
 810d3ec:	681b      	ldr	r3, [r3, #0]
 810d3ee:	685b      	ldr	r3, [r3, #4]
 810d3f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810d3f4:	2b00      	cmp	r3, #0
 810d3f6:	d007      	beq.n	810d408 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810d3f8:	68fb      	ldr	r3, [r7, #12]
 810d3fa:	681b      	ldr	r3, [r3, #0]
 810d3fc:	681a      	ldr	r2, [r3, #0]
 810d3fe:	68fb      	ldr	r3, [r7, #12]
 810d400:	681b      	ldr	r3, [r3, #0]
 810d402:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810d406:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810d408:	88fb      	ldrh	r3, [r7, #6]
 810d40a:	461a      	mov	r2, r3
 810d40c:	68b9      	ldr	r1, [r7, #8]
 810d40e:	68f8      	ldr	r0, [r7, #12]
 810d410:	f001 f9bc 	bl	810e78c <UART_Start_Receive_DMA>
 810d414:	4603      	mov	r3, r0
 810d416:	e000      	b.n	810d41a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810d418:	2302      	movs	r3, #2
  }
}
 810d41a:	4618      	mov	r0, r3
 810d41c:	3710      	adds	r7, #16
 810d41e:	46bd      	mov	sp, r7
 810d420:	bd80      	pop	{r7, pc}
 810d422:	bf00      	nop
 810d424:	58000c00 	.word	0x58000c00

0810d428 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810d428:	b580      	push	{r7, lr}
 810d42a:	b088      	sub	sp, #32
 810d42c:	af00      	add	r7, sp, #0
 810d42e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810d430:	687b      	ldr	r3, [r7, #4]
 810d432:	681b      	ldr	r3, [r3, #0]
 810d434:	69db      	ldr	r3, [r3, #28]
 810d436:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810d438:	687b      	ldr	r3, [r7, #4]
 810d43a:	681b      	ldr	r3, [r3, #0]
 810d43c:	681b      	ldr	r3, [r3, #0]
 810d43e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810d440:	687b      	ldr	r3, [r7, #4]
 810d442:	681b      	ldr	r3, [r3, #0]
 810d444:	689b      	ldr	r3, [r3, #8]
 810d446:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810d448:	69fa      	ldr	r2, [r7, #28]
 810d44a:	f640 030f 	movw	r3, #2063	; 0x80f
 810d44e:	4013      	ands	r3, r2
 810d450:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810d452:	693b      	ldr	r3, [r7, #16]
 810d454:	2b00      	cmp	r3, #0
 810d456:	d118      	bne.n	810d48a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810d458:	69fb      	ldr	r3, [r7, #28]
 810d45a:	f003 0320 	and.w	r3, r3, #32
 810d45e:	2b00      	cmp	r3, #0
 810d460:	d013      	beq.n	810d48a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810d462:	69bb      	ldr	r3, [r7, #24]
 810d464:	f003 0320 	and.w	r3, r3, #32
 810d468:	2b00      	cmp	r3, #0
 810d46a:	d104      	bne.n	810d476 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810d46c:	697b      	ldr	r3, [r7, #20]
 810d46e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810d472:	2b00      	cmp	r3, #0
 810d474:	d009      	beq.n	810d48a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810d476:	687b      	ldr	r3, [r7, #4]
 810d478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810d47a:	2b00      	cmp	r3, #0
 810d47c:	f000 8282 	beq.w	810d984 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810d480:	687b      	ldr	r3, [r7, #4]
 810d482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810d484:	6878      	ldr	r0, [r7, #4]
 810d486:	4798      	blx	r3
      }
      return;
 810d488:	e27c      	b.n	810d984 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810d48a:	693b      	ldr	r3, [r7, #16]
 810d48c:	2b00      	cmp	r3, #0
 810d48e:	f000 80ef 	beq.w	810d670 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810d492:	697a      	ldr	r2, [r7, #20]
 810d494:	4b73      	ldr	r3, [pc, #460]	; (810d664 <HAL_UART_IRQHandler+0x23c>)
 810d496:	4013      	ands	r3, r2
 810d498:	2b00      	cmp	r3, #0
 810d49a:	d105      	bne.n	810d4a8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810d49c:	69ba      	ldr	r2, [r7, #24]
 810d49e:	4b72      	ldr	r3, [pc, #456]	; (810d668 <HAL_UART_IRQHandler+0x240>)
 810d4a0:	4013      	ands	r3, r2
 810d4a2:	2b00      	cmp	r3, #0
 810d4a4:	f000 80e4 	beq.w	810d670 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810d4a8:	69fb      	ldr	r3, [r7, #28]
 810d4aa:	f003 0301 	and.w	r3, r3, #1
 810d4ae:	2b00      	cmp	r3, #0
 810d4b0:	d010      	beq.n	810d4d4 <HAL_UART_IRQHandler+0xac>
 810d4b2:	69bb      	ldr	r3, [r7, #24]
 810d4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810d4b8:	2b00      	cmp	r3, #0
 810d4ba:	d00b      	beq.n	810d4d4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810d4bc:	687b      	ldr	r3, [r7, #4]
 810d4be:	681b      	ldr	r3, [r3, #0]
 810d4c0:	2201      	movs	r2, #1
 810d4c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810d4c4:	687b      	ldr	r3, [r7, #4]
 810d4c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d4ca:	f043 0201 	orr.w	r2, r3, #1
 810d4ce:	687b      	ldr	r3, [r7, #4]
 810d4d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810d4d4:	69fb      	ldr	r3, [r7, #28]
 810d4d6:	f003 0302 	and.w	r3, r3, #2
 810d4da:	2b00      	cmp	r3, #0
 810d4dc:	d010      	beq.n	810d500 <HAL_UART_IRQHandler+0xd8>
 810d4de:	697b      	ldr	r3, [r7, #20]
 810d4e0:	f003 0301 	and.w	r3, r3, #1
 810d4e4:	2b00      	cmp	r3, #0
 810d4e6:	d00b      	beq.n	810d500 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810d4e8:	687b      	ldr	r3, [r7, #4]
 810d4ea:	681b      	ldr	r3, [r3, #0]
 810d4ec:	2202      	movs	r2, #2
 810d4ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810d4f0:	687b      	ldr	r3, [r7, #4]
 810d4f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d4f6:	f043 0204 	orr.w	r2, r3, #4
 810d4fa:	687b      	ldr	r3, [r7, #4]
 810d4fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810d500:	69fb      	ldr	r3, [r7, #28]
 810d502:	f003 0304 	and.w	r3, r3, #4
 810d506:	2b00      	cmp	r3, #0
 810d508:	d010      	beq.n	810d52c <HAL_UART_IRQHandler+0x104>
 810d50a:	697b      	ldr	r3, [r7, #20]
 810d50c:	f003 0301 	and.w	r3, r3, #1
 810d510:	2b00      	cmp	r3, #0
 810d512:	d00b      	beq.n	810d52c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810d514:	687b      	ldr	r3, [r7, #4]
 810d516:	681b      	ldr	r3, [r3, #0]
 810d518:	2204      	movs	r2, #4
 810d51a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810d51c:	687b      	ldr	r3, [r7, #4]
 810d51e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d522:	f043 0202 	orr.w	r2, r3, #2
 810d526:	687b      	ldr	r3, [r7, #4]
 810d528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810d52c:	69fb      	ldr	r3, [r7, #28]
 810d52e:	f003 0308 	and.w	r3, r3, #8
 810d532:	2b00      	cmp	r3, #0
 810d534:	d015      	beq.n	810d562 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810d536:	69bb      	ldr	r3, [r7, #24]
 810d538:	f003 0320 	and.w	r3, r3, #32
 810d53c:	2b00      	cmp	r3, #0
 810d53e:	d104      	bne.n	810d54a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810d540:	697a      	ldr	r2, [r7, #20]
 810d542:	4b48      	ldr	r3, [pc, #288]	; (810d664 <HAL_UART_IRQHandler+0x23c>)
 810d544:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810d546:	2b00      	cmp	r3, #0
 810d548:	d00b      	beq.n	810d562 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810d54a:	687b      	ldr	r3, [r7, #4]
 810d54c:	681b      	ldr	r3, [r3, #0]
 810d54e:	2208      	movs	r2, #8
 810d550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810d552:	687b      	ldr	r3, [r7, #4]
 810d554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d558:	f043 0208 	orr.w	r2, r3, #8
 810d55c:	687b      	ldr	r3, [r7, #4]
 810d55e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810d562:	69fb      	ldr	r3, [r7, #28]
 810d564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810d568:	2b00      	cmp	r3, #0
 810d56a:	d011      	beq.n	810d590 <HAL_UART_IRQHandler+0x168>
 810d56c:	69bb      	ldr	r3, [r7, #24]
 810d56e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810d572:	2b00      	cmp	r3, #0
 810d574:	d00c      	beq.n	810d590 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810d576:	687b      	ldr	r3, [r7, #4]
 810d578:	681b      	ldr	r3, [r3, #0]
 810d57a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810d57e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810d580:	687b      	ldr	r3, [r7, #4]
 810d582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d586:	f043 0220 	orr.w	r2, r3, #32
 810d58a:	687b      	ldr	r3, [r7, #4]
 810d58c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810d590:	687b      	ldr	r3, [r7, #4]
 810d592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d596:	2b00      	cmp	r3, #0
 810d598:	f000 81f6 	beq.w	810d988 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810d59c:	69fb      	ldr	r3, [r7, #28]
 810d59e:	f003 0320 	and.w	r3, r3, #32
 810d5a2:	2b00      	cmp	r3, #0
 810d5a4:	d011      	beq.n	810d5ca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810d5a6:	69bb      	ldr	r3, [r7, #24]
 810d5a8:	f003 0320 	and.w	r3, r3, #32
 810d5ac:	2b00      	cmp	r3, #0
 810d5ae:	d104      	bne.n	810d5ba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810d5b0:	697b      	ldr	r3, [r7, #20]
 810d5b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810d5b6:	2b00      	cmp	r3, #0
 810d5b8:	d007      	beq.n	810d5ca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810d5ba:	687b      	ldr	r3, [r7, #4]
 810d5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810d5be:	2b00      	cmp	r3, #0
 810d5c0:	d003      	beq.n	810d5ca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810d5c2:	687b      	ldr	r3, [r7, #4]
 810d5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810d5c6:	6878      	ldr	r0, [r7, #4]
 810d5c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810d5ca:	687b      	ldr	r3, [r7, #4]
 810d5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d5d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810d5d2:	687b      	ldr	r3, [r7, #4]
 810d5d4:	681b      	ldr	r3, [r3, #0]
 810d5d6:	689b      	ldr	r3, [r3, #8]
 810d5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d5dc:	2b40      	cmp	r3, #64	; 0x40
 810d5de:	d004      	beq.n	810d5ea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810d5e0:	68fb      	ldr	r3, [r7, #12]
 810d5e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810d5e6:	2b00      	cmp	r3, #0
 810d5e8:	d031      	beq.n	810d64e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810d5ea:	6878      	ldr	r0, [r7, #4]
 810d5ec:	f001 f95a 	bl	810e8a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d5f0:	687b      	ldr	r3, [r7, #4]
 810d5f2:	681b      	ldr	r3, [r3, #0]
 810d5f4:	689b      	ldr	r3, [r3, #8]
 810d5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d5fa:	2b40      	cmp	r3, #64	; 0x40
 810d5fc:	d123      	bne.n	810d646 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810d5fe:	687b      	ldr	r3, [r7, #4]
 810d600:	681b      	ldr	r3, [r3, #0]
 810d602:	689a      	ldr	r2, [r3, #8]
 810d604:	687b      	ldr	r3, [r7, #4]
 810d606:	681b      	ldr	r3, [r3, #0]
 810d608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810d60c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810d60e:	687b      	ldr	r3, [r7, #4]
 810d610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d612:	2b00      	cmp	r3, #0
 810d614:	d013      	beq.n	810d63e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810d616:	687b      	ldr	r3, [r7, #4]
 810d618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d61a:	4a14      	ldr	r2, [pc, #80]	; (810d66c <HAL_UART_IRQHandler+0x244>)
 810d61c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810d61e:	687b      	ldr	r3, [r7, #4]
 810d620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d622:	4618      	mov	r0, r3
 810d624:	f7f9 f87c 	bl	8106720 <HAL_DMA_Abort_IT>
 810d628:	4603      	mov	r3, r0
 810d62a:	2b00      	cmp	r3, #0
 810d62c:	d017      	beq.n	810d65e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810d62e:	687b      	ldr	r3, [r7, #4]
 810d630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810d634:	687a      	ldr	r2, [r7, #4]
 810d636:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810d638:	4610      	mov	r0, r2
 810d63a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d63c:	e00f      	b.n	810d65e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810d63e:	6878      	ldr	r0, [r7, #4]
 810d640:	f000 f9c0 	bl	810d9c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d644:	e00b      	b.n	810d65e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810d646:	6878      	ldr	r0, [r7, #4]
 810d648:	f000 f9bc 	bl	810d9c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d64c:	e007      	b.n	810d65e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810d64e:	6878      	ldr	r0, [r7, #4]
 810d650:	f000 f9b8 	bl	810d9c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d654:	687b      	ldr	r3, [r7, #4]
 810d656:	2200      	movs	r2, #0
 810d658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810d65c:	e194      	b.n	810d988 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d65e:	bf00      	nop
    return;
 810d660:	e192      	b.n	810d988 <HAL_UART_IRQHandler+0x560>
 810d662:	bf00      	nop
 810d664:	10000001 	.word	0x10000001
 810d668:	04000120 	.word	0x04000120
 810d66c:	0810eac3 	.word	0x0810eac3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d670:	687b      	ldr	r3, [r7, #4]
 810d672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d674:	2b01      	cmp	r3, #1
 810d676:	f040 8111 	bne.w	810d89c <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810d67a:	69fb      	ldr	r3, [r7, #28]
 810d67c:	f003 0310 	and.w	r3, r3, #16
 810d680:	2b00      	cmp	r3, #0
 810d682:	f000 810b 	beq.w	810d89c <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810d686:	69bb      	ldr	r3, [r7, #24]
 810d688:	f003 0310 	and.w	r3, r3, #16
 810d68c:	2b00      	cmp	r3, #0
 810d68e:	f000 8105 	beq.w	810d89c <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810d692:	687b      	ldr	r3, [r7, #4]
 810d694:	681b      	ldr	r3, [r3, #0]
 810d696:	2210      	movs	r2, #16
 810d698:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810d69a:	687b      	ldr	r3, [r7, #4]
 810d69c:	681b      	ldr	r3, [r3, #0]
 810d69e:	689b      	ldr	r3, [r3, #8]
 810d6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d6a4:	2b40      	cmp	r3, #64	; 0x40
 810d6a6:	f040 80bb 	bne.w	810d820 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810d6aa:	687b      	ldr	r3, [r7, #4]
 810d6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d6ae:	681b      	ldr	r3, [r3, #0]
 810d6b0:	4a97      	ldr	r2, [pc, #604]	; (810d910 <HAL_UART_IRQHandler+0x4e8>)
 810d6b2:	4293      	cmp	r3, r2
 810d6b4:	d059      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d6b6:	687b      	ldr	r3, [r7, #4]
 810d6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d6ba:	681b      	ldr	r3, [r3, #0]
 810d6bc:	4a95      	ldr	r2, [pc, #596]	; (810d914 <HAL_UART_IRQHandler+0x4ec>)
 810d6be:	4293      	cmp	r3, r2
 810d6c0:	d053      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d6c2:	687b      	ldr	r3, [r7, #4]
 810d6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d6c6:	681b      	ldr	r3, [r3, #0]
 810d6c8:	4a93      	ldr	r2, [pc, #588]	; (810d918 <HAL_UART_IRQHandler+0x4f0>)
 810d6ca:	4293      	cmp	r3, r2
 810d6cc:	d04d      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d6ce:	687b      	ldr	r3, [r7, #4]
 810d6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d6d2:	681b      	ldr	r3, [r3, #0]
 810d6d4:	4a91      	ldr	r2, [pc, #580]	; (810d91c <HAL_UART_IRQHandler+0x4f4>)
 810d6d6:	4293      	cmp	r3, r2
 810d6d8:	d047      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d6da:	687b      	ldr	r3, [r7, #4]
 810d6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d6de:	681b      	ldr	r3, [r3, #0]
 810d6e0:	4a8f      	ldr	r2, [pc, #572]	; (810d920 <HAL_UART_IRQHandler+0x4f8>)
 810d6e2:	4293      	cmp	r3, r2
 810d6e4:	d041      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d6e6:	687b      	ldr	r3, [r7, #4]
 810d6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d6ea:	681b      	ldr	r3, [r3, #0]
 810d6ec:	4a8d      	ldr	r2, [pc, #564]	; (810d924 <HAL_UART_IRQHandler+0x4fc>)
 810d6ee:	4293      	cmp	r3, r2
 810d6f0:	d03b      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d6f2:	687b      	ldr	r3, [r7, #4]
 810d6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d6f6:	681b      	ldr	r3, [r3, #0]
 810d6f8:	4a8b      	ldr	r2, [pc, #556]	; (810d928 <HAL_UART_IRQHandler+0x500>)
 810d6fa:	4293      	cmp	r3, r2
 810d6fc:	d035      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d6fe:	687b      	ldr	r3, [r7, #4]
 810d700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d702:	681b      	ldr	r3, [r3, #0]
 810d704:	4a89      	ldr	r2, [pc, #548]	; (810d92c <HAL_UART_IRQHandler+0x504>)
 810d706:	4293      	cmp	r3, r2
 810d708:	d02f      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d70a:	687b      	ldr	r3, [r7, #4]
 810d70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d70e:	681b      	ldr	r3, [r3, #0]
 810d710:	4a87      	ldr	r2, [pc, #540]	; (810d930 <HAL_UART_IRQHandler+0x508>)
 810d712:	4293      	cmp	r3, r2
 810d714:	d029      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d716:	687b      	ldr	r3, [r7, #4]
 810d718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d71a:	681b      	ldr	r3, [r3, #0]
 810d71c:	4a85      	ldr	r2, [pc, #532]	; (810d934 <HAL_UART_IRQHandler+0x50c>)
 810d71e:	4293      	cmp	r3, r2
 810d720:	d023      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d722:	687b      	ldr	r3, [r7, #4]
 810d724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d726:	681b      	ldr	r3, [r3, #0]
 810d728:	4a83      	ldr	r2, [pc, #524]	; (810d938 <HAL_UART_IRQHandler+0x510>)
 810d72a:	4293      	cmp	r3, r2
 810d72c:	d01d      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d72e:	687b      	ldr	r3, [r7, #4]
 810d730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d732:	681b      	ldr	r3, [r3, #0]
 810d734:	4a81      	ldr	r2, [pc, #516]	; (810d93c <HAL_UART_IRQHandler+0x514>)
 810d736:	4293      	cmp	r3, r2
 810d738:	d017      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d73a:	687b      	ldr	r3, [r7, #4]
 810d73c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d73e:	681b      	ldr	r3, [r3, #0]
 810d740:	4a7f      	ldr	r2, [pc, #508]	; (810d940 <HAL_UART_IRQHandler+0x518>)
 810d742:	4293      	cmp	r3, r2
 810d744:	d011      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d746:	687b      	ldr	r3, [r7, #4]
 810d748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d74a:	681b      	ldr	r3, [r3, #0]
 810d74c:	4a7d      	ldr	r2, [pc, #500]	; (810d944 <HAL_UART_IRQHandler+0x51c>)
 810d74e:	4293      	cmp	r3, r2
 810d750:	d00b      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d752:	687b      	ldr	r3, [r7, #4]
 810d754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d756:	681b      	ldr	r3, [r3, #0]
 810d758:	4a7b      	ldr	r2, [pc, #492]	; (810d948 <HAL_UART_IRQHandler+0x520>)
 810d75a:	4293      	cmp	r3, r2
 810d75c:	d005      	beq.n	810d76a <HAL_UART_IRQHandler+0x342>
 810d75e:	687b      	ldr	r3, [r7, #4]
 810d760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d762:	681b      	ldr	r3, [r3, #0]
 810d764:	4a79      	ldr	r2, [pc, #484]	; (810d94c <HAL_UART_IRQHandler+0x524>)
 810d766:	4293      	cmp	r3, r2
 810d768:	d105      	bne.n	810d776 <HAL_UART_IRQHandler+0x34e>
 810d76a:	687b      	ldr	r3, [r7, #4]
 810d76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d76e:	681b      	ldr	r3, [r3, #0]
 810d770:	685b      	ldr	r3, [r3, #4]
 810d772:	b29b      	uxth	r3, r3
 810d774:	e004      	b.n	810d780 <HAL_UART_IRQHandler+0x358>
 810d776:	687b      	ldr	r3, [r7, #4]
 810d778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d77a:	681b      	ldr	r3, [r3, #0]
 810d77c:	685b      	ldr	r3, [r3, #4]
 810d77e:	b29b      	uxth	r3, r3
 810d780:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810d782:	893b      	ldrh	r3, [r7, #8]
 810d784:	2b00      	cmp	r3, #0
 810d786:	f000 8101 	beq.w	810d98c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810d78a:	687b      	ldr	r3, [r7, #4]
 810d78c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810d790:	893a      	ldrh	r2, [r7, #8]
 810d792:	429a      	cmp	r2, r3
 810d794:	f080 80fa 	bcs.w	810d98c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810d798:	687b      	ldr	r3, [r7, #4]
 810d79a:	893a      	ldrh	r2, [r7, #8]
 810d79c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810d7a0:	687b      	ldr	r3, [r7, #4]
 810d7a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d7a4:	69db      	ldr	r3, [r3, #28]
 810d7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d7aa:	d02b      	beq.n	810d804 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810d7ac:	687b      	ldr	r3, [r7, #4]
 810d7ae:	681b      	ldr	r3, [r3, #0]
 810d7b0:	681a      	ldr	r2, [r3, #0]
 810d7b2:	687b      	ldr	r3, [r7, #4]
 810d7b4:	681b      	ldr	r3, [r3, #0]
 810d7b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810d7ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d7bc:	687b      	ldr	r3, [r7, #4]
 810d7be:	681b      	ldr	r3, [r3, #0]
 810d7c0:	689a      	ldr	r2, [r3, #8]
 810d7c2:	687b      	ldr	r3, [r7, #4]
 810d7c4:	681b      	ldr	r3, [r3, #0]
 810d7c6:	f022 0201 	bic.w	r2, r2, #1
 810d7ca:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810d7cc:	687b      	ldr	r3, [r7, #4]
 810d7ce:	681b      	ldr	r3, [r3, #0]
 810d7d0:	689a      	ldr	r2, [r3, #8]
 810d7d2:	687b      	ldr	r3, [r7, #4]
 810d7d4:	681b      	ldr	r3, [r3, #0]
 810d7d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810d7da:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810d7dc:	687b      	ldr	r3, [r7, #4]
 810d7de:	2220      	movs	r2, #32
 810d7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d7e4:	687b      	ldr	r3, [r7, #4]
 810d7e6:	2200      	movs	r2, #0
 810d7e8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d7ea:	687b      	ldr	r3, [r7, #4]
 810d7ec:	681b      	ldr	r3, [r3, #0]
 810d7ee:	681a      	ldr	r2, [r3, #0]
 810d7f0:	687b      	ldr	r3, [r7, #4]
 810d7f2:	681b      	ldr	r3, [r3, #0]
 810d7f4:	f022 0210 	bic.w	r2, r2, #16
 810d7f8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810d7fa:	687b      	ldr	r3, [r7, #4]
 810d7fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d7fe:	4618      	mov	r0, r3
 810d800:	f7f8 fc70 	bl	81060e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810d804:	687b      	ldr	r3, [r7, #4]
 810d806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810d80a:	687b      	ldr	r3, [r7, #4]
 810d80c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810d810:	b29b      	uxth	r3, r3
 810d812:	1ad3      	subs	r3, r2, r3
 810d814:	b29b      	uxth	r3, r3
 810d816:	4619      	mov	r1, r3
 810d818:	6878      	ldr	r0, [r7, #4]
 810d81a:	f000 f8dd 	bl	810d9d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810d81e:	e0b5      	b.n	810d98c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810d820:	687b      	ldr	r3, [r7, #4]
 810d822:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810d826:	687b      	ldr	r3, [r7, #4]
 810d828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810d82c:	b29b      	uxth	r3, r3
 810d82e:	1ad3      	subs	r3, r2, r3
 810d830:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810d832:	687b      	ldr	r3, [r7, #4]
 810d834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810d838:	b29b      	uxth	r3, r3
 810d83a:	2b00      	cmp	r3, #0
 810d83c:	f000 80a8 	beq.w	810d990 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810d840:	897b      	ldrh	r3, [r7, #10]
 810d842:	2b00      	cmp	r3, #0
 810d844:	f000 80a4 	beq.w	810d990 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810d848:	687b      	ldr	r3, [r7, #4]
 810d84a:	681b      	ldr	r3, [r3, #0]
 810d84c:	681a      	ldr	r2, [r3, #0]
 810d84e:	687b      	ldr	r3, [r7, #4]
 810d850:	681b      	ldr	r3, [r3, #0]
 810d852:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810d856:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810d858:	687b      	ldr	r3, [r7, #4]
 810d85a:	681b      	ldr	r3, [r3, #0]
 810d85c:	689b      	ldr	r3, [r3, #8]
 810d85e:	687a      	ldr	r2, [r7, #4]
 810d860:	6812      	ldr	r2, [r2, #0]
 810d862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810d866:	f023 0301 	bic.w	r3, r3, #1
 810d86a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810d86c:	687b      	ldr	r3, [r7, #4]
 810d86e:	2220      	movs	r2, #32
 810d870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d874:	687b      	ldr	r3, [r7, #4]
 810d876:	2200      	movs	r2, #0
 810d878:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810d87a:	687b      	ldr	r3, [r7, #4]
 810d87c:	2200      	movs	r2, #0
 810d87e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d880:	687b      	ldr	r3, [r7, #4]
 810d882:	681b      	ldr	r3, [r3, #0]
 810d884:	681a      	ldr	r2, [r3, #0]
 810d886:	687b      	ldr	r3, [r7, #4]
 810d888:	681b      	ldr	r3, [r3, #0]
 810d88a:	f022 0210 	bic.w	r2, r2, #16
 810d88e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810d890:	897b      	ldrh	r3, [r7, #10]
 810d892:	4619      	mov	r1, r3
 810d894:	6878      	ldr	r0, [r7, #4]
 810d896:	f000 f89f 	bl	810d9d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810d89a:	e079      	b.n	810d990 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810d89c:	69fb      	ldr	r3, [r7, #28]
 810d89e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810d8a2:	2b00      	cmp	r3, #0
 810d8a4:	d00d      	beq.n	810d8c2 <HAL_UART_IRQHandler+0x49a>
 810d8a6:	697b      	ldr	r3, [r7, #20]
 810d8a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810d8ac:	2b00      	cmp	r3, #0
 810d8ae:	d008      	beq.n	810d8c2 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810d8b0:	687b      	ldr	r3, [r7, #4]
 810d8b2:	681b      	ldr	r3, [r3, #0]
 810d8b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810d8b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810d8ba:	6878      	ldr	r0, [r7, #4]
 810d8bc:	f001 f931 	bl	810eb22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810d8c0:	e069      	b.n	810d996 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810d8c2:	69fb      	ldr	r3, [r7, #28]
 810d8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d8c8:	2b00      	cmp	r3, #0
 810d8ca:	d012      	beq.n	810d8f2 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810d8cc:	69bb      	ldr	r3, [r7, #24]
 810d8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d8d2:	2b00      	cmp	r3, #0
 810d8d4:	d104      	bne.n	810d8e0 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810d8d6:	697b      	ldr	r3, [r7, #20]
 810d8d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810d8dc:	2b00      	cmp	r3, #0
 810d8de:	d008      	beq.n	810d8f2 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810d8e0:	687b      	ldr	r3, [r7, #4]
 810d8e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810d8e4:	2b00      	cmp	r3, #0
 810d8e6:	d055      	beq.n	810d994 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810d8e8:	687b      	ldr	r3, [r7, #4]
 810d8ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810d8ec:	6878      	ldr	r0, [r7, #4]
 810d8ee:	4798      	blx	r3
    }
    return;
 810d8f0:	e050      	b.n	810d994 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810d8f2:	69fb      	ldr	r3, [r7, #28]
 810d8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d8f8:	2b00      	cmp	r3, #0
 810d8fa:	d029      	beq.n	810d950 <HAL_UART_IRQHandler+0x528>
 810d8fc:	69bb      	ldr	r3, [r7, #24]
 810d8fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d902:	2b00      	cmp	r3, #0
 810d904:	d024      	beq.n	810d950 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810d906:	6878      	ldr	r0, [r7, #4]
 810d908:	f001 f8f1 	bl	810eaee <UART_EndTransmit_IT>
    return;
 810d90c:	e043      	b.n	810d996 <HAL_UART_IRQHandler+0x56e>
 810d90e:	bf00      	nop
 810d910:	40020010 	.word	0x40020010
 810d914:	40020028 	.word	0x40020028
 810d918:	40020040 	.word	0x40020040
 810d91c:	40020058 	.word	0x40020058
 810d920:	40020070 	.word	0x40020070
 810d924:	40020088 	.word	0x40020088
 810d928:	400200a0 	.word	0x400200a0
 810d92c:	400200b8 	.word	0x400200b8
 810d930:	40020410 	.word	0x40020410
 810d934:	40020428 	.word	0x40020428
 810d938:	40020440 	.word	0x40020440
 810d93c:	40020458 	.word	0x40020458
 810d940:	40020470 	.word	0x40020470
 810d944:	40020488 	.word	0x40020488
 810d948:	400204a0 	.word	0x400204a0
 810d94c:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810d950:	69fb      	ldr	r3, [r7, #28]
 810d952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810d956:	2b00      	cmp	r3, #0
 810d958:	d008      	beq.n	810d96c <HAL_UART_IRQHandler+0x544>
 810d95a:	69bb      	ldr	r3, [r7, #24]
 810d95c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810d960:	2b00      	cmp	r3, #0
 810d962:	d003      	beq.n	810d96c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810d964:	6878      	ldr	r0, [r7, #4]
 810d966:	f001 f8f0 	bl	810eb4a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810d96a:	e014      	b.n	810d996 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810d96c:	69fb      	ldr	r3, [r7, #28]
 810d96e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810d972:	2b00      	cmp	r3, #0
 810d974:	d00f      	beq.n	810d996 <HAL_UART_IRQHandler+0x56e>
 810d976:	69bb      	ldr	r3, [r7, #24]
 810d978:	2b00      	cmp	r3, #0
 810d97a:	da0c      	bge.n	810d996 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810d97c:	6878      	ldr	r0, [r7, #4]
 810d97e:	f001 f8da 	bl	810eb36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810d982:	e008      	b.n	810d996 <HAL_UART_IRQHandler+0x56e>
      return;
 810d984:	bf00      	nop
 810d986:	e006      	b.n	810d996 <HAL_UART_IRQHandler+0x56e>
    return;
 810d988:	bf00      	nop
 810d98a:	e004      	b.n	810d996 <HAL_UART_IRQHandler+0x56e>
      return;
 810d98c:	bf00      	nop
 810d98e:	e002      	b.n	810d996 <HAL_UART_IRQHandler+0x56e>
      return;
 810d990:	bf00      	nop
 810d992:	e000      	b.n	810d996 <HAL_UART_IRQHandler+0x56e>
    return;
 810d994:	bf00      	nop
  }
}
 810d996:	3720      	adds	r7, #32
 810d998:	46bd      	mov	sp, r7
 810d99a:	bd80      	pop	{r7, pc}

0810d99c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810d99c:	b480      	push	{r7}
 810d99e:	b083      	sub	sp, #12
 810d9a0:	af00      	add	r7, sp, #0
 810d9a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810d9a4:	bf00      	nop
 810d9a6:	370c      	adds	r7, #12
 810d9a8:	46bd      	mov	sp, r7
 810d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9ae:	4770      	bx	lr

0810d9b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810d9b0:	b480      	push	{r7}
 810d9b2:	b083      	sub	sp, #12
 810d9b4:	af00      	add	r7, sp, #0
 810d9b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810d9b8:	bf00      	nop
 810d9ba:	370c      	adds	r7, #12
 810d9bc:	46bd      	mov	sp, r7
 810d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9c2:	4770      	bx	lr

0810d9c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810d9c4:	b480      	push	{r7}
 810d9c6:	b083      	sub	sp, #12
 810d9c8:	af00      	add	r7, sp, #0
 810d9ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810d9cc:	bf00      	nop
 810d9ce:	370c      	adds	r7, #12
 810d9d0:	46bd      	mov	sp, r7
 810d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9d6:	4770      	bx	lr

0810d9d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810d9d8:	b480      	push	{r7}
 810d9da:	b083      	sub	sp, #12
 810d9dc:	af00      	add	r7, sp, #0
 810d9de:	6078      	str	r0, [r7, #4]
 810d9e0:	460b      	mov	r3, r1
 810d9e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810d9e4:	bf00      	nop
 810d9e6:	370c      	adds	r7, #12
 810d9e8:	46bd      	mov	sp, r7
 810d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9ee:	4770      	bx	lr

0810d9f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810d9f0:	b5b0      	push	{r4, r5, r7, lr}
 810d9f2:	b08e      	sub	sp, #56	; 0x38
 810d9f4:	af00      	add	r7, sp, #0
 810d9f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810d9f8:	2300      	movs	r3, #0
 810d9fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810d9fe:	687b      	ldr	r3, [r7, #4]
 810da00:	689a      	ldr	r2, [r3, #8]
 810da02:	687b      	ldr	r3, [r7, #4]
 810da04:	691b      	ldr	r3, [r3, #16]
 810da06:	431a      	orrs	r2, r3
 810da08:	687b      	ldr	r3, [r7, #4]
 810da0a:	695b      	ldr	r3, [r3, #20]
 810da0c:	431a      	orrs	r2, r3
 810da0e:	687b      	ldr	r3, [r7, #4]
 810da10:	69db      	ldr	r3, [r3, #28]
 810da12:	4313      	orrs	r3, r2
 810da14:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810da16:	687b      	ldr	r3, [r7, #4]
 810da18:	681b      	ldr	r3, [r3, #0]
 810da1a:	681a      	ldr	r2, [r3, #0]
 810da1c:	4bc0      	ldr	r3, [pc, #768]	; (810dd20 <UART_SetConfig+0x330>)
 810da1e:	4013      	ands	r3, r2
 810da20:	687a      	ldr	r2, [r7, #4]
 810da22:	6812      	ldr	r2, [r2, #0]
 810da24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810da26:	430b      	orrs	r3, r1
 810da28:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810da2a:	687b      	ldr	r3, [r7, #4]
 810da2c:	681b      	ldr	r3, [r3, #0]
 810da2e:	685b      	ldr	r3, [r3, #4]
 810da30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810da34:	687b      	ldr	r3, [r7, #4]
 810da36:	68da      	ldr	r2, [r3, #12]
 810da38:	687b      	ldr	r3, [r7, #4]
 810da3a:	681b      	ldr	r3, [r3, #0]
 810da3c:	430a      	orrs	r2, r1
 810da3e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810da40:	687b      	ldr	r3, [r7, #4]
 810da42:	699b      	ldr	r3, [r3, #24]
 810da44:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810da46:	687b      	ldr	r3, [r7, #4]
 810da48:	681b      	ldr	r3, [r3, #0]
 810da4a:	4ab6      	ldr	r2, [pc, #728]	; (810dd24 <UART_SetConfig+0x334>)
 810da4c:	4293      	cmp	r3, r2
 810da4e:	d004      	beq.n	810da5a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810da50:	687b      	ldr	r3, [r7, #4]
 810da52:	6a1b      	ldr	r3, [r3, #32]
 810da54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810da56:	4313      	orrs	r3, r2
 810da58:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810da5a:	687b      	ldr	r3, [r7, #4]
 810da5c:	681b      	ldr	r3, [r3, #0]
 810da5e:	689b      	ldr	r3, [r3, #8]
 810da60:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810da64:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810da68:	687a      	ldr	r2, [r7, #4]
 810da6a:	6812      	ldr	r2, [r2, #0]
 810da6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810da6e:	430b      	orrs	r3, r1
 810da70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810da72:	687b      	ldr	r3, [r7, #4]
 810da74:	681b      	ldr	r3, [r3, #0]
 810da76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810da78:	f023 010f 	bic.w	r1, r3, #15
 810da7c:	687b      	ldr	r3, [r7, #4]
 810da7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810da80:	687b      	ldr	r3, [r7, #4]
 810da82:	681b      	ldr	r3, [r3, #0]
 810da84:	430a      	orrs	r2, r1
 810da86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810da88:	687b      	ldr	r3, [r7, #4]
 810da8a:	681b      	ldr	r3, [r3, #0]
 810da8c:	4aa6      	ldr	r2, [pc, #664]	; (810dd28 <UART_SetConfig+0x338>)
 810da8e:	4293      	cmp	r3, r2
 810da90:	d176      	bne.n	810db80 <UART_SetConfig+0x190>
 810da92:	4ba6      	ldr	r3, [pc, #664]	; (810dd2c <UART_SetConfig+0x33c>)
 810da94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810da96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810da9a:	2b28      	cmp	r3, #40	; 0x28
 810da9c:	d86c      	bhi.n	810db78 <UART_SetConfig+0x188>
 810da9e:	a201      	add	r2, pc, #4	; (adr r2, 810daa4 <UART_SetConfig+0xb4>)
 810daa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810daa4:	0810db49 	.word	0x0810db49
 810daa8:	0810db79 	.word	0x0810db79
 810daac:	0810db79 	.word	0x0810db79
 810dab0:	0810db79 	.word	0x0810db79
 810dab4:	0810db79 	.word	0x0810db79
 810dab8:	0810db79 	.word	0x0810db79
 810dabc:	0810db79 	.word	0x0810db79
 810dac0:	0810db79 	.word	0x0810db79
 810dac4:	0810db51 	.word	0x0810db51
 810dac8:	0810db79 	.word	0x0810db79
 810dacc:	0810db79 	.word	0x0810db79
 810dad0:	0810db79 	.word	0x0810db79
 810dad4:	0810db79 	.word	0x0810db79
 810dad8:	0810db79 	.word	0x0810db79
 810dadc:	0810db79 	.word	0x0810db79
 810dae0:	0810db79 	.word	0x0810db79
 810dae4:	0810db59 	.word	0x0810db59
 810dae8:	0810db79 	.word	0x0810db79
 810daec:	0810db79 	.word	0x0810db79
 810daf0:	0810db79 	.word	0x0810db79
 810daf4:	0810db79 	.word	0x0810db79
 810daf8:	0810db79 	.word	0x0810db79
 810dafc:	0810db79 	.word	0x0810db79
 810db00:	0810db79 	.word	0x0810db79
 810db04:	0810db61 	.word	0x0810db61
 810db08:	0810db79 	.word	0x0810db79
 810db0c:	0810db79 	.word	0x0810db79
 810db10:	0810db79 	.word	0x0810db79
 810db14:	0810db79 	.word	0x0810db79
 810db18:	0810db79 	.word	0x0810db79
 810db1c:	0810db79 	.word	0x0810db79
 810db20:	0810db79 	.word	0x0810db79
 810db24:	0810db69 	.word	0x0810db69
 810db28:	0810db79 	.word	0x0810db79
 810db2c:	0810db79 	.word	0x0810db79
 810db30:	0810db79 	.word	0x0810db79
 810db34:	0810db79 	.word	0x0810db79
 810db38:	0810db79 	.word	0x0810db79
 810db3c:	0810db79 	.word	0x0810db79
 810db40:	0810db79 	.word	0x0810db79
 810db44:	0810db71 	.word	0x0810db71
 810db48:	2301      	movs	r3, #1
 810db4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810db4e:	e220      	b.n	810df92 <UART_SetConfig+0x5a2>
 810db50:	2304      	movs	r3, #4
 810db52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810db56:	e21c      	b.n	810df92 <UART_SetConfig+0x5a2>
 810db58:	2308      	movs	r3, #8
 810db5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810db5e:	e218      	b.n	810df92 <UART_SetConfig+0x5a2>
 810db60:	2310      	movs	r3, #16
 810db62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810db66:	e214      	b.n	810df92 <UART_SetConfig+0x5a2>
 810db68:	2320      	movs	r3, #32
 810db6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810db6e:	e210      	b.n	810df92 <UART_SetConfig+0x5a2>
 810db70:	2340      	movs	r3, #64	; 0x40
 810db72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810db76:	e20c      	b.n	810df92 <UART_SetConfig+0x5a2>
 810db78:	2380      	movs	r3, #128	; 0x80
 810db7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810db7e:	e208      	b.n	810df92 <UART_SetConfig+0x5a2>
 810db80:	687b      	ldr	r3, [r7, #4]
 810db82:	681b      	ldr	r3, [r3, #0]
 810db84:	4a6a      	ldr	r2, [pc, #424]	; (810dd30 <UART_SetConfig+0x340>)
 810db86:	4293      	cmp	r3, r2
 810db88:	d130      	bne.n	810dbec <UART_SetConfig+0x1fc>
 810db8a:	4b68      	ldr	r3, [pc, #416]	; (810dd2c <UART_SetConfig+0x33c>)
 810db8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810db8e:	f003 0307 	and.w	r3, r3, #7
 810db92:	2b05      	cmp	r3, #5
 810db94:	d826      	bhi.n	810dbe4 <UART_SetConfig+0x1f4>
 810db96:	a201      	add	r2, pc, #4	; (adr r2, 810db9c <UART_SetConfig+0x1ac>)
 810db98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810db9c:	0810dbb5 	.word	0x0810dbb5
 810dba0:	0810dbbd 	.word	0x0810dbbd
 810dba4:	0810dbc5 	.word	0x0810dbc5
 810dba8:	0810dbcd 	.word	0x0810dbcd
 810dbac:	0810dbd5 	.word	0x0810dbd5
 810dbb0:	0810dbdd 	.word	0x0810dbdd
 810dbb4:	2300      	movs	r3, #0
 810dbb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dbba:	e1ea      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dbbc:	2304      	movs	r3, #4
 810dbbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dbc2:	e1e6      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dbc4:	2308      	movs	r3, #8
 810dbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dbca:	e1e2      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dbcc:	2310      	movs	r3, #16
 810dbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dbd2:	e1de      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dbd4:	2320      	movs	r3, #32
 810dbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dbda:	e1da      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dbdc:	2340      	movs	r3, #64	; 0x40
 810dbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dbe2:	e1d6      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dbe4:	2380      	movs	r3, #128	; 0x80
 810dbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dbea:	e1d2      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dbec:	687b      	ldr	r3, [r7, #4]
 810dbee:	681b      	ldr	r3, [r3, #0]
 810dbf0:	4a50      	ldr	r2, [pc, #320]	; (810dd34 <UART_SetConfig+0x344>)
 810dbf2:	4293      	cmp	r3, r2
 810dbf4:	d130      	bne.n	810dc58 <UART_SetConfig+0x268>
 810dbf6:	4b4d      	ldr	r3, [pc, #308]	; (810dd2c <UART_SetConfig+0x33c>)
 810dbf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810dbfa:	f003 0307 	and.w	r3, r3, #7
 810dbfe:	2b05      	cmp	r3, #5
 810dc00:	d826      	bhi.n	810dc50 <UART_SetConfig+0x260>
 810dc02:	a201      	add	r2, pc, #4	; (adr r2, 810dc08 <UART_SetConfig+0x218>)
 810dc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dc08:	0810dc21 	.word	0x0810dc21
 810dc0c:	0810dc29 	.word	0x0810dc29
 810dc10:	0810dc31 	.word	0x0810dc31
 810dc14:	0810dc39 	.word	0x0810dc39
 810dc18:	0810dc41 	.word	0x0810dc41
 810dc1c:	0810dc49 	.word	0x0810dc49
 810dc20:	2300      	movs	r3, #0
 810dc22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dc26:	e1b4      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dc28:	2304      	movs	r3, #4
 810dc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dc2e:	e1b0      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dc30:	2308      	movs	r3, #8
 810dc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dc36:	e1ac      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dc38:	2310      	movs	r3, #16
 810dc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dc3e:	e1a8      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dc40:	2320      	movs	r3, #32
 810dc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dc46:	e1a4      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dc48:	2340      	movs	r3, #64	; 0x40
 810dc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dc4e:	e1a0      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dc50:	2380      	movs	r3, #128	; 0x80
 810dc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dc56:	e19c      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dc58:	687b      	ldr	r3, [r7, #4]
 810dc5a:	681b      	ldr	r3, [r3, #0]
 810dc5c:	4a36      	ldr	r2, [pc, #216]	; (810dd38 <UART_SetConfig+0x348>)
 810dc5e:	4293      	cmp	r3, r2
 810dc60:	d130      	bne.n	810dcc4 <UART_SetConfig+0x2d4>
 810dc62:	4b32      	ldr	r3, [pc, #200]	; (810dd2c <UART_SetConfig+0x33c>)
 810dc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810dc66:	f003 0307 	and.w	r3, r3, #7
 810dc6a:	2b05      	cmp	r3, #5
 810dc6c:	d826      	bhi.n	810dcbc <UART_SetConfig+0x2cc>
 810dc6e:	a201      	add	r2, pc, #4	; (adr r2, 810dc74 <UART_SetConfig+0x284>)
 810dc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dc74:	0810dc8d 	.word	0x0810dc8d
 810dc78:	0810dc95 	.word	0x0810dc95
 810dc7c:	0810dc9d 	.word	0x0810dc9d
 810dc80:	0810dca5 	.word	0x0810dca5
 810dc84:	0810dcad 	.word	0x0810dcad
 810dc88:	0810dcb5 	.word	0x0810dcb5
 810dc8c:	2300      	movs	r3, #0
 810dc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dc92:	e17e      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dc94:	2304      	movs	r3, #4
 810dc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dc9a:	e17a      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dc9c:	2308      	movs	r3, #8
 810dc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dca2:	e176      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dca4:	2310      	movs	r3, #16
 810dca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dcaa:	e172      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dcac:	2320      	movs	r3, #32
 810dcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dcb2:	e16e      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dcb4:	2340      	movs	r3, #64	; 0x40
 810dcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dcba:	e16a      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dcbc:	2380      	movs	r3, #128	; 0x80
 810dcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dcc2:	e166      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dcc4:	687b      	ldr	r3, [r7, #4]
 810dcc6:	681b      	ldr	r3, [r3, #0]
 810dcc8:	4a1c      	ldr	r2, [pc, #112]	; (810dd3c <UART_SetConfig+0x34c>)
 810dcca:	4293      	cmp	r3, r2
 810dccc:	d140      	bne.n	810dd50 <UART_SetConfig+0x360>
 810dcce:	4b17      	ldr	r3, [pc, #92]	; (810dd2c <UART_SetConfig+0x33c>)
 810dcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810dcd2:	f003 0307 	and.w	r3, r3, #7
 810dcd6:	2b05      	cmp	r3, #5
 810dcd8:	d836      	bhi.n	810dd48 <UART_SetConfig+0x358>
 810dcda:	a201      	add	r2, pc, #4	; (adr r2, 810dce0 <UART_SetConfig+0x2f0>)
 810dcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dce0:	0810dcf9 	.word	0x0810dcf9
 810dce4:	0810dd01 	.word	0x0810dd01
 810dce8:	0810dd09 	.word	0x0810dd09
 810dcec:	0810dd11 	.word	0x0810dd11
 810dcf0:	0810dd19 	.word	0x0810dd19
 810dcf4:	0810dd41 	.word	0x0810dd41
 810dcf8:	2300      	movs	r3, #0
 810dcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dcfe:	e148      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dd00:	2304      	movs	r3, #4
 810dd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dd06:	e144      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dd08:	2308      	movs	r3, #8
 810dd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dd0e:	e140      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dd10:	2310      	movs	r3, #16
 810dd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dd16:	e13c      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dd18:	2320      	movs	r3, #32
 810dd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dd1e:	e138      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dd20:	cfff69f3 	.word	0xcfff69f3
 810dd24:	58000c00 	.word	0x58000c00
 810dd28:	40011000 	.word	0x40011000
 810dd2c:	58024400 	.word	0x58024400
 810dd30:	40004400 	.word	0x40004400
 810dd34:	40004800 	.word	0x40004800
 810dd38:	40004c00 	.word	0x40004c00
 810dd3c:	40005000 	.word	0x40005000
 810dd40:	2340      	movs	r3, #64	; 0x40
 810dd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dd46:	e124      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dd48:	2380      	movs	r3, #128	; 0x80
 810dd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dd4e:	e120      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dd50:	687b      	ldr	r3, [r7, #4]
 810dd52:	681b      	ldr	r3, [r3, #0]
 810dd54:	4acc      	ldr	r2, [pc, #816]	; (810e088 <UART_SetConfig+0x698>)
 810dd56:	4293      	cmp	r3, r2
 810dd58:	d176      	bne.n	810de48 <UART_SetConfig+0x458>
 810dd5a:	4bcc      	ldr	r3, [pc, #816]	; (810e08c <UART_SetConfig+0x69c>)
 810dd5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810dd5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810dd62:	2b28      	cmp	r3, #40	; 0x28
 810dd64:	d86c      	bhi.n	810de40 <UART_SetConfig+0x450>
 810dd66:	a201      	add	r2, pc, #4	; (adr r2, 810dd6c <UART_SetConfig+0x37c>)
 810dd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dd6c:	0810de11 	.word	0x0810de11
 810dd70:	0810de41 	.word	0x0810de41
 810dd74:	0810de41 	.word	0x0810de41
 810dd78:	0810de41 	.word	0x0810de41
 810dd7c:	0810de41 	.word	0x0810de41
 810dd80:	0810de41 	.word	0x0810de41
 810dd84:	0810de41 	.word	0x0810de41
 810dd88:	0810de41 	.word	0x0810de41
 810dd8c:	0810de19 	.word	0x0810de19
 810dd90:	0810de41 	.word	0x0810de41
 810dd94:	0810de41 	.word	0x0810de41
 810dd98:	0810de41 	.word	0x0810de41
 810dd9c:	0810de41 	.word	0x0810de41
 810dda0:	0810de41 	.word	0x0810de41
 810dda4:	0810de41 	.word	0x0810de41
 810dda8:	0810de41 	.word	0x0810de41
 810ddac:	0810de21 	.word	0x0810de21
 810ddb0:	0810de41 	.word	0x0810de41
 810ddb4:	0810de41 	.word	0x0810de41
 810ddb8:	0810de41 	.word	0x0810de41
 810ddbc:	0810de41 	.word	0x0810de41
 810ddc0:	0810de41 	.word	0x0810de41
 810ddc4:	0810de41 	.word	0x0810de41
 810ddc8:	0810de41 	.word	0x0810de41
 810ddcc:	0810de29 	.word	0x0810de29
 810ddd0:	0810de41 	.word	0x0810de41
 810ddd4:	0810de41 	.word	0x0810de41
 810ddd8:	0810de41 	.word	0x0810de41
 810dddc:	0810de41 	.word	0x0810de41
 810dde0:	0810de41 	.word	0x0810de41
 810dde4:	0810de41 	.word	0x0810de41
 810dde8:	0810de41 	.word	0x0810de41
 810ddec:	0810de31 	.word	0x0810de31
 810ddf0:	0810de41 	.word	0x0810de41
 810ddf4:	0810de41 	.word	0x0810de41
 810ddf8:	0810de41 	.word	0x0810de41
 810ddfc:	0810de41 	.word	0x0810de41
 810de00:	0810de41 	.word	0x0810de41
 810de04:	0810de41 	.word	0x0810de41
 810de08:	0810de41 	.word	0x0810de41
 810de0c:	0810de39 	.word	0x0810de39
 810de10:	2301      	movs	r3, #1
 810de12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de16:	e0bc      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de18:	2304      	movs	r3, #4
 810de1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de1e:	e0b8      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de20:	2308      	movs	r3, #8
 810de22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de26:	e0b4      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de28:	2310      	movs	r3, #16
 810de2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de2e:	e0b0      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de30:	2320      	movs	r3, #32
 810de32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de36:	e0ac      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de38:	2340      	movs	r3, #64	; 0x40
 810de3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de3e:	e0a8      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de40:	2380      	movs	r3, #128	; 0x80
 810de42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de46:	e0a4      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de48:	687b      	ldr	r3, [r7, #4]
 810de4a:	681b      	ldr	r3, [r3, #0]
 810de4c:	4a90      	ldr	r2, [pc, #576]	; (810e090 <UART_SetConfig+0x6a0>)
 810de4e:	4293      	cmp	r3, r2
 810de50:	d130      	bne.n	810deb4 <UART_SetConfig+0x4c4>
 810de52:	4b8e      	ldr	r3, [pc, #568]	; (810e08c <UART_SetConfig+0x69c>)
 810de54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810de56:	f003 0307 	and.w	r3, r3, #7
 810de5a:	2b05      	cmp	r3, #5
 810de5c:	d826      	bhi.n	810deac <UART_SetConfig+0x4bc>
 810de5e:	a201      	add	r2, pc, #4	; (adr r2, 810de64 <UART_SetConfig+0x474>)
 810de60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810de64:	0810de7d 	.word	0x0810de7d
 810de68:	0810de85 	.word	0x0810de85
 810de6c:	0810de8d 	.word	0x0810de8d
 810de70:	0810de95 	.word	0x0810de95
 810de74:	0810de9d 	.word	0x0810de9d
 810de78:	0810dea5 	.word	0x0810dea5
 810de7c:	2300      	movs	r3, #0
 810de7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de82:	e086      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de84:	2304      	movs	r3, #4
 810de86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de8a:	e082      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de8c:	2308      	movs	r3, #8
 810de8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de92:	e07e      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de94:	2310      	movs	r3, #16
 810de96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810de9a:	e07a      	b.n	810df92 <UART_SetConfig+0x5a2>
 810de9c:	2320      	movs	r3, #32
 810de9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810dea2:	e076      	b.n	810df92 <UART_SetConfig+0x5a2>
 810dea4:	2340      	movs	r3, #64	; 0x40
 810dea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810deaa:	e072      	b.n	810df92 <UART_SetConfig+0x5a2>
 810deac:	2380      	movs	r3, #128	; 0x80
 810deae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810deb2:	e06e      	b.n	810df92 <UART_SetConfig+0x5a2>
 810deb4:	687b      	ldr	r3, [r7, #4]
 810deb6:	681b      	ldr	r3, [r3, #0]
 810deb8:	4a76      	ldr	r2, [pc, #472]	; (810e094 <UART_SetConfig+0x6a4>)
 810deba:	4293      	cmp	r3, r2
 810debc:	d130      	bne.n	810df20 <UART_SetConfig+0x530>
 810debe:	4b73      	ldr	r3, [pc, #460]	; (810e08c <UART_SetConfig+0x69c>)
 810dec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810dec2:	f003 0307 	and.w	r3, r3, #7
 810dec6:	2b05      	cmp	r3, #5
 810dec8:	d826      	bhi.n	810df18 <UART_SetConfig+0x528>
 810deca:	a201      	add	r2, pc, #4	; (adr r2, 810ded0 <UART_SetConfig+0x4e0>)
 810decc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ded0:	0810dee9 	.word	0x0810dee9
 810ded4:	0810def1 	.word	0x0810def1
 810ded8:	0810def9 	.word	0x0810def9
 810dedc:	0810df01 	.word	0x0810df01
 810dee0:	0810df09 	.word	0x0810df09
 810dee4:	0810df11 	.word	0x0810df11
 810dee8:	2300      	movs	r3, #0
 810deea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810deee:	e050      	b.n	810df92 <UART_SetConfig+0x5a2>
 810def0:	2304      	movs	r3, #4
 810def2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810def6:	e04c      	b.n	810df92 <UART_SetConfig+0x5a2>
 810def8:	2308      	movs	r3, #8
 810defa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810defe:	e048      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df00:	2310      	movs	r3, #16
 810df02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df06:	e044      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df08:	2320      	movs	r3, #32
 810df0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df0e:	e040      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df10:	2340      	movs	r3, #64	; 0x40
 810df12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df16:	e03c      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df18:	2380      	movs	r3, #128	; 0x80
 810df1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df1e:	e038      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df20:	687b      	ldr	r3, [r7, #4]
 810df22:	681b      	ldr	r3, [r3, #0]
 810df24:	4a5c      	ldr	r2, [pc, #368]	; (810e098 <UART_SetConfig+0x6a8>)
 810df26:	4293      	cmp	r3, r2
 810df28:	d130      	bne.n	810df8c <UART_SetConfig+0x59c>
 810df2a:	4b58      	ldr	r3, [pc, #352]	; (810e08c <UART_SetConfig+0x69c>)
 810df2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810df2e:	f003 0307 	and.w	r3, r3, #7
 810df32:	2b05      	cmp	r3, #5
 810df34:	d826      	bhi.n	810df84 <UART_SetConfig+0x594>
 810df36:	a201      	add	r2, pc, #4	; (adr r2, 810df3c <UART_SetConfig+0x54c>)
 810df38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810df3c:	0810df55 	.word	0x0810df55
 810df40:	0810df5d 	.word	0x0810df5d
 810df44:	0810df65 	.word	0x0810df65
 810df48:	0810df6d 	.word	0x0810df6d
 810df4c:	0810df75 	.word	0x0810df75
 810df50:	0810df7d 	.word	0x0810df7d
 810df54:	2302      	movs	r3, #2
 810df56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df5a:	e01a      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df5c:	2304      	movs	r3, #4
 810df5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df62:	e016      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df64:	2308      	movs	r3, #8
 810df66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df6a:	e012      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df6c:	2310      	movs	r3, #16
 810df6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df72:	e00e      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df74:	2320      	movs	r3, #32
 810df76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df7a:	e00a      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df7c:	2340      	movs	r3, #64	; 0x40
 810df7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df82:	e006      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df84:	2380      	movs	r3, #128	; 0x80
 810df86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810df8a:	e002      	b.n	810df92 <UART_SetConfig+0x5a2>
 810df8c:	2380      	movs	r3, #128	; 0x80
 810df8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810df92:	687b      	ldr	r3, [r7, #4]
 810df94:	681b      	ldr	r3, [r3, #0]
 810df96:	4a40      	ldr	r2, [pc, #256]	; (810e098 <UART_SetConfig+0x6a8>)
 810df98:	4293      	cmp	r3, r2
 810df9a:	f040 80ef 	bne.w	810e17c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810df9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810dfa2:	2b20      	cmp	r3, #32
 810dfa4:	dc46      	bgt.n	810e034 <UART_SetConfig+0x644>
 810dfa6:	2b02      	cmp	r3, #2
 810dfa8:	f2c0 8081 	blt.w	810e0ae <UART_SetConfig+0x6be>
 810dfac:	3b02      	subs	r3, #2
 810dfae:	2b1e      	cmp	r3, #30
 810dfb0:	d87d      	bhi.n	810e0ae <UART_SetConfig+0x6be>
 810dfb2:	a201      	add	r2, pc, #4	; (adr r2, 810dfb8 <UART_SetConfig+0x5c8>)
 810dfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dfb8:	0810e03b 	.word	0x0810e03b
 810dfbc:	0810e0af 	.word	0x0810e0af
 810dfc0:	0810e043 	.word	0x0810e043
 810dfc4:	0810e0af 	.word	0x0810e0af
 810dfc8:	0810e0af 	.word	0x0810e0af
 810dfcc:	0810e0af 	.word	0x0810e0af
 810dfd0:	0810e053 	.word	0x0810e053
 810dfd4:	0810e0af 	.word	0x0810e0af
 810dfd8:	0810e0af 	.word	0x0810e0af
 810dfdc:	0810e0af 	.word	0x0810e0af
 810dfe0:	0810e0af 	.word	0x0810e0af
 810dfe4:	0810e0af 	.word	0x0810e0af
 810dfe8:	0810e0af 	.word	0x0810e0af
 810dfec:	0810e0af 	.word	0x0810e0af
 810dff0:	0810e063 	.word	0x0810e063
 810dff4:	0810e0af 	.word	0x0810e0af
 810dff8:	0810e0af 	.word	0x0810e0af
 810dffc:	0810e0af 	.word	0x0810e0af
 810e000:	0810e0af 	.word	0x0810e0af
 810e004:	0810e0af 	.word	0x0810e0af
 810e008:	0810e0af 	.word	0x0810e0af
 810e00c:	0810e0af 	.word	0x0810e0af
 810e010:	0810e0af 	.word	0x0810e0af
 810e014:	0810e0af 	.word	0x0810e0af
 810e018:	0810e0af 	.word	0x0810e0af
 810e01c:	0810e0af 	.word	0x0810e0af
 810e020:	0810e0af 	.word	0x0810e0af
 810e024:	0810e0af 	.word	0x0810e0af
 810e028:	0810e0af 	.word	0x0810e0af
 810e02c:	0810e0af 	.word	0x0810e0af
 810e030:	0810e0a1 	.word	0x0810e0a1
 810e034:	2b40      	cmp	r3, #64	; 0x40
 810e036:	d036      	beq.n	810e0a6 <UART_SetConfig+0x6b6>
 810e038:	e039      	b.n	810e0ae <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810e03a:	f7fd fd31 	bl	810baa0 <HAL_RCCEx_GetD3PCLK1Freq>
 810e03e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810e040:	e03b      	b.n	810e0ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810e042:	f107 0314 	add.w	r3, r7, #20
 810e046:	4618      	mov	r0, r3
 810e048:	f7fd fd40 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810e04c:	69bb      	ldr	r3, [r7, #24]
 810e04e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e050:	e033      	b.n	810e0ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810e052:	f107 0308 	add.w	r3, r7, #8
 810e056:	4618      	mov	r0, r3
 810e058:	f7fd fe8c 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810e05c:	68fb      	ldr	r3, [r7, #12]
 810e05e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e060:	e02b      	b.n	810e0ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810e062:	4b0a      	ldr	r3, [pc, #40]	; (810e08c <UART_SetConfig+0x69c>)
 810e064:	681b      	ldr	r3, [r3, #0]
 810e066:	f003 0320 	and.w	r3, r3, #32
 810e06a:	2b00      	cmp	r3, #0
 810e06c:	d009      	beq.n	810e082 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810e06e:	4b07      	ldr	r3, [pc, #28]	; (810e08c <UART_SetConfig+0x69c>)
 810e070:	681b      	ldr	r3, [r3, #0]
 810e072:	08db      	lsrs	r3, r3, #3
 810e074:	f003 0303 	and.w	r3, r3, #3
 810e078:	4a08      	ldr	r2, [pc, #32]	; (810e09c <UART_SetConfig+0x6ac>)
 810e07a:	fa22 f303 	lsr.w	r3, r2, r3
 810e07e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810e080:	e01b      	b.n	810e0ba <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810e082:	4b06      	ldr	r3, [pc, #24]	; (810e09c <UART_SetConfig+0x6ac>)
 810e084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e086:	e018      	b.n	810e0ba <UART_SetConfig+0x6ca>
 810e088:	40011400 	.word	0x40011400
 810e08c:	58024400 	.word	0x58024400
 810e090:	40007800 	.word	0x40007800
 810e094:	40007c00 	.word	0x40007c00
 810e098:	58000c00 	.word	0x58000c00
 810e09c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810e0a0:	4bc4      	ldr	r3, [pc, #784]	; (810e3b4 <UART_SetConfig+0x9c4>)
 810e0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e0a4:	e009      	b.n	810e0ba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810e0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810e0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e0ac:	e005      	b.n	810e0ba <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810e0ae:	2300      	movs	r3, #0
 810e0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810e0b2:	2301      	movs	r3, #1
 810e0b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810e0b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810e0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e0bc:	2b00      	cmp	r3, #0
 810e0be:	f000 81da 	beq.w	810e476 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810e0c2:	687b      	ldr	r3, [r7, #4]
 810e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810e0c6:	4abc      	ldr	r2, [pc, #752]	; (810e3b8 <UART_SetConfig+0x9c8>)
 810e0c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810e0cc:	461a      	mov	r2, r3
 810e0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e0d0:	fbb3 f3f2 	udiv	r3, r3, r2
 810e0d4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810e0d6:	687b      	ldr	r3, [r7, #4]
 810e0d8:	685a      	ldr	r2, [r3, #4]
 810e0da:	4613      	mov	r3, r2
 810e0dc:	005b      	lsls	r3, r3, #1
 810e0de:	4413      	add	r3, r2
 810e0e0:	6a3a      	ldr	r2, [r7, #32]
 810e0e2:	429a      	cmp	r2, r3
 810e0e4:	d305      	bcc.n	810e0f2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810e0e6:	687b      	ldr	r3, [r7, #4]
 810e0e8:	685b      	ldr	r3, [r3, #4]
 810e0ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810e0ec:	6a3a      	ldr	r2, [r7, #32]
 810e0ee:	429a      	cmp	r2, r3
 810e0f0:	d903      	bls.n	810e0fa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810e0f2:	2301      	movs	r3, #1
 810e0f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810e0f8:	e1bd      	b.n	810e476 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810e0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e0fc:	4618      	mov	r0, r3
 810e0fe:	f04f 0100 	mov.w	r1, #0
 810e102:	687b      	ldr	r3, [r7, #4]
 810e104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810e106:	4aac      	ldr	r2, [pc, #688]	; (810e3b8 <UART_SetConfig+0x9c8>)
 810e108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810e10c:	b29a      	uxth	r2, r3
 810e10e:	f04f 0300 	mov.w	r3, #0
 810e112:	f7f2 fefb 	bl	8100f0c <__aeabi_uldivmod>
 810e116:	4602      	mov	r2, r0
 810e118:	460b      	mov	r3, r1
 810e11a:	4610      	mov	r0, r2
 810e11c:	4619      	mov	r1, r3
 810e11e:	f04f 0200 	mov.w	r2, #0
 810e122:	f04f 0300 	mov.w	r3, #0
 810e126:	020b      	lsls	r3, r1, #8
 810e128:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810e12c:	0202      	lsls	r2, r0, #8
 810e12e:	6879      	ldr	r1, [r7, #4]
 810e130:	6849      	ldr	r1, [r1, #4]
 810e132:	0849      	lsrs	r1, r1, #1
 810e134:	4608      	mov	r0, r1
 810e136:	f04f 0100 	mov.w	r1, #0
 810e13a:	1814      	adds	r4, r2, r0
 810e13c:	eb43 0501 	adc.w	r5, r3, r1
 810e140:	687b      	ldr	r3, [r7, #4]
 810e142:	685b      	ldr	r3, [r3, #4]
 810e144:	461a      	mov	r2, r3
 810e146:	f04f 0300 	mov.w	r3, #0
 810e14a:	4620      	mov	r0, r4
 810e14c:	4629      	mov	r1, r5
 810e14e:	f7f2 fedd 	bl	8100f0c <__aeabi_uldivmod>
 810e152:	4602      	mov	r2, r0
 810e154:	460b      	mov	r3, r1
 810e156:	4613      	mov	r3, r2
 810e158:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810e15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e15c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810e160:	d308      	bcc.n	810e174 <UART_SetConfig+0x784>
 810e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e168:	d204      	bcs.n	810e174 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810e16a:	687b      	ldr	r3, [r7, #4]
 810e16c:	681b      	ldr	r3, [r3, #0]
 810e16e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810e170:	60da      	str	r2, [r3, #12]
 810e172:	e180      	b.n	810e476 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810e174:	2301      	movs	r3, #1
 810e176:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810e17a:	e17c      	b.n	810e476 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810e17c:	687b      	ldr	r3, [r7, #4]
 810e17e:	69db      	ldr	r3, [r3, #28]
 810e180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810e184:	f040 80bf 	bne.w	810e306 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810e188:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810e18c:	2b20      	cmp	r3, #32
 810e18e:	dc49      	bgt.n	810e224 <UART_SetConfig+0x834>
 810e190:	2b00      	cmp	r3, #0
 810e192:	db7c      	blt.n	810e28e <UART_SetConfig+0x89e>
 810e194:	2b20      	cmp	r3, #32
 810e196:	d87a      	bhi.n	810e28e <UART_SetConfig+0x89e>
 810e198:	a201      	add	r2, pc, #4	; (adr r2, 810e1a0 <UART_SetConfig+0x7b0>)
 810e19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e19e:	bf00      	nop
 810e1a0:	0810e22b 	.word	0x0810e22b
 810e1a4:	0810e233 	.word	0x0810e233
 810e1a8:	0810e28f 	.word	0x0810e28f
 810e1ac:	0810e28f 	.word	0x0810e28f
 810e1b0:	0810e23b 	.word	0x0810e23b
 810e1b4:	0810e28f 	.word	0x0810e28f
 810e1b8:	0810e28f 	.word	0x0810e28f
 810e1bc:	0810e28f 	.word	0x0810e28f
 810e1c0:	0810e24b 	.word	0x0810e24b
 810e1c4:	0810e28f 	.word	0x0810e28f
 810e1c8:	0810e28f 	.word	0x0810e28f
 810e1cc:	0810e28f 	.word	0x0810e28f
 810e1d0:	0810e28f 	.word	0x0810e28f
 810e1d4:	0810e28f 	.word	0x0810e28f
 810e1d8:	0810e28f 	.word	0x0810e28f
 810e1dc:	0810e28f 	.word	0x0810e28f
 810e1e0:	0810e25b 	.word	0x0810e25b
 810e1e4:	0810e28f 	.word	0x0810e28f
 810e1e8:	0810e28f 	.word	0x0810e28f
 810e1ec:	0810e28f 	.word	0x0810e28f
 810e1f0:	0810e28f 	.word	0x0810e28f
 810e1f4:	0810e28f 	.word	0x0810e28f
 810e1f8:	0810e28f 	.word	0x0810e28f
 810e1fc:	0810e28f 	.word	0x0810e28f
 810e200:	0810e28f 	.word	0x0810e28f
 810e204:	0810e28f 	.word	0x0810e28f
 810e208:	0810e28f 	.word	0x0810e28f
 810e20c:	0810e28f 	.word	0x0810e28f
 810e210:	0810e28f 	.word	0x0810e28f
 810e214:	0810e28f 	.word	0x0810e28f
 810e218:	0810e28f 	.word	0x0810e28f
 810e21c:	0810e28f 	.word	0x0810e28f
 810e220:	0810e281 	.word	0x0810e281
 810e224:	2b40      	cmp	r3, #64	; 0x40
 810e226:	d02e      	beq.n	810e286 <UART_SetConfig+0x896>
 810e228:	e031      	b.n	810e28e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810e22a:	f7fb fffb 	bl	810a224 <HAL_RCC_GetPCLK1Freq>
 810e22e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810e230:	e033      	b.n	810e29a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810e232:	f7fc f80d 	bl	810a250 <HAL_RCC_GetPCLK2Freq>
 810e236:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810e238:	e02f      	b.n	810e29a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810e23a:	f107 0314 	add.w	r3, r7, #20
 810e23e:	4618      	mov	r0, r3
 810e240:	f7fd fc44 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810e244:	69bb      	ldr	r3, [r7, #24]
 810e246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e248:	e027      	b.n	810e29a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810e24a:	f107 0308 	add.w	r3, r7, #8
 810e24e:	4618      	mov	r0, r3
 810e250:	f7fd fd90 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810e254:	68fb      	ldr	r3, [r7, #12]
 810e256:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e258:	e01f      	b.n	810e29a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810e25a:	4b58      	ldr	r3, [pc, #352]	; (810e3bc <UART_SetConfig+0x9cc>)
 810e25c:	681b      	ldr	r3, [r3, #0]
 810e25e:	f003 0320 	and.w	r3, r3, #32
 810e262:	2b00      	cmp	r3, #0
 810e264:	d009      	beq.n	810e27a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810e266:	4b55      	ldr	r3, [pc, #340]	; (810e3bc <UART_SetConfig+0x9cc>)
 810e268:	681b      	ldr	r3, [r3, #0]
 810e26a:	08db      	lsrs	r3, r3, #3
 810e26c:	f003 0303 	and.w	r3, r3, #3
 810e270:	4a53      	ldr	r2, [pc, #332]	; (810e3c0 <UART_SetConfig+0x9d0>)
 810e272:	fa22 f303 	lsr.w	r3, r2, r3
 810e276:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810e278:	e00f      	b.n	810e29a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810e27a:	4b51      	ldr	r3, [pc, #324]	; (810e3c0 <UART_SetConfig+0x9d0>)
 810e27c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e27e:	e00c      	b.n	810e29a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810e280:	4b4c      	ldr	r3, [pc, #304]	; (810e3b4 <UART_SetConfig+0x9c4>)
 810e282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e284:	e009      	b.n	810e29a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810e286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810e28a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e28c:	e005      	b.n	810e29a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810e28e:	2300      	movs	r3, #0
 810e290:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810e292:	2301      	movs	r3, #1
 810e294:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810e298:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810e29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e29c:	2b00      	cmp	r3, #0
 810e29e:	f000 80ea 	beq.w	810e476 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810e2a2:	687b      	ldr	r3, [r7, #4]
 810e2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810e2a6:	4a44      	ldr	r2, [pc, #272]	; (810e3b8 <UART_SetConfig+0x9c8>)
 810e2a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810e2ac:	461a      	mov	r2, r3
 810e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e2b0:	fbb3 f3f2 	udiv	r3, r3, r2
 810e2b4:	005a      	lsls	r2, r3, #1
 810e2b6:	687b      	ldr	r3, [r7, #4]
 810e2b8:	685b      	ldr	r3, [r3, #4]
 810e2ba:	085b      	lsrs	r3, r3, #1
 810e2bc:	441a      	add	r2, r3
 810e2be:	687b      	ldr	r3, [r7, #4]
 810e2c0:	685b      	ldr	r3, [r3, #4]
 810e2c2:	fbb2 f3f3 	udiv	r3, r2, r3
 810e2c6:	b29b      	uxth	r3, r3
 810e2c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810e2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e2cc:	2b0f      	cmp	r3, #15
 810e2ce:	d916      	bls.n	810e2fe <UART_SetConfig+0x90e>
 810e2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810e2d6:	d212      	bcs.n	810e2fe <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810e2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e2da:	b29b      	uxth	r3, r3
 810e2dc:	f023 030f 	bic.w	r3, r3, #15
 810e2e0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e2e4:	085b      	lsrs	r3, r3, #1
 810e2e6:	b29b      	uxth	r3, r3
 810e2e8:	f003 0307 	and.w	r3, r3, #7
 810e2ec:	b29a      	uxth	r2, r3
 810e2ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810e2f0:	4313      	orrs	r3, r2
 810e2f2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810e2f4:	687b      	ldr	r3, [r7, #4]
 810e2f6:	681b      	ldr	r3, [r3, #0]
 810e2f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810e2fa:	60da      	str	r2, [r3, #12]
 810e2fc:	e0bb      	b.n	810e476 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810e2fe:	2301      	movs	r3, #1
 810e300:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810e304:	e0b7      	b.n	810e476 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810e306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810e30a:	2b20      	cmp	r3, #32
 810e30c:	dc4a      	bgt.n	810e3a4 <UART_SetConfig+0x9b4>
 810e30e:	2b00      	cmp	r3, #0
 810e310:	f2c0 8086 	blt.w	810e420 <UART_SetConfig+0xa30>
 810e314:	2b20      	cmp	r3, #32
 810e316:	f200 8083 	bhi.w	810e420 <UART_SetConfig+0xa30>
 810e31a:	a201      	add	r2, pc, #4	; (adr r2, 810e320 <UART_SetConfig+0x930>)
 810e31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e320:	0810e3ab 	.word	0x0810e3ab
 810e324:	0810e3c5 	.word	0x0810e3c5
 810e328:	0810e421 	.word	0x0810e421
 810e32c:	0810e421 	.word	0x0810e421
 810e330:	0810e3cd 	.word	0x0810e3cd
 810e334:	0810e421 	.word	0x0810e421
 810e338:	0810e421 	.word	0x0810e421
 810e33c:	0810e421 	.word	0x0810e421
 810e340:	0810e3dd 	.word	0x0810e3dd
 810e344:	0810e421 	.word	0x0810e421
 810e348:	0810e421 	.word	0x0810e421
 810e34c:	0810e421 	.word	0x0810e421
 810e350:	0810e421 	.word	0x0810e421
 810e354:	0810e421 	.word	0x0810e421
 810e358:	0810e421 	.word	0x0810e421
 810e35c:	0810e421 	.word	0x0810e421
 810e360:	0810e3ed 	.word	0x0810e3ed
 810e364:	0810e421 	.word	0x0810e421
 810e368:	0810e421 	.word	0x0810e421
 810e36c:	0810e421 	.word	0x0810e421
 810e370:	0810e421 	.word	0x0810e421
 810e374:	0810e421 	.word	0x0810e421
 810e378:	0810e421 	.word	0x0810e421
 810e37c:	0810e421 	.word	0x0810e421
 810e380:	0810e421 	.word	0x0810e421
 810e384:	0810e421 	.word	0x0810e421
 810e388:	0810e421 	.word	0x0810e421
 810e38c:	0810e421 	.word	0x0810e421
 810e390:	0810e421 	.word	0x0810e421
 810e394:	0810e421 	.word	0x0810e421
 810e398:	0810e421 	.word	0x0810e421
 810e39c:	0810e421 	.word	0x0810e421
 810e3a0:	0810e413 	.word	0x0810e413
 810e3a4:	2b40      	cmp	r3, #64	; 0x40
 810e3a6:	d037      	beq.n	810e418 <UART_SetConfig+0xa28>
 810e3a8:	e03a      	b.n	810e420 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810e3aa:	f7fb ff3b 	bl	810a224 <HAL_RCC_GetPCLK1Freq>
 810e3ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810e3b0:	e03c      	b.n	810e42c <UART_SetConfig+0xa3c>
 810e3b2:	bf00      	nop
 810e3b4:	003d0900 	.word	0x003d0900
 810e3b8:	0810fdf4 	.word	0x0810fdf4
 810e3bc:	58024400 	.word	0x58024400
 810e3c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810e3c4:	f7fb ff44 	bl	810a250 <HAL_RCC_GetPCLK2Freq>
 810e3c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810e3ca:	e02f      	b.n	810e42c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810e3cc:	f107 0314 	add.w	r3, r7, #20
 810e3d0:	4618      	mov	r0, r3
 810e3d2:	f7fd fb7b 	bl	810bacc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810e3d6:	69bb      	ldr	r3, [r7, #24]
 810e3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e3da:	e027      	b.n	810e42c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810e3dc:	f107 0308 	add.w	r3, r7, #8
 810e3e0:	4618      	mov	r0, r3
 810e3e2:	f7fd fcc7 	bl	810bd74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810e3e6:	68fb      	ldr	r3, [r7, #12]
 810e3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e3ea:	e01f      	b.n	810e42c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810e3ec:	4b2c      	ldr	r3, [pc, #176]	; (810e4a0 <UART_SetConfig+0xab0>)
 810e3ee:	681b      	ldr	r3, [r3, #0]
 810e3f0:	f003 0320 	and.w	r3, r3, #32
 810e3f4:	2b00      	cmp	r3, #0
 810e3f6:	d009      	beq.n	810e40c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810e3f8:	4b29      	ldr	r3, [pc, #164]	; (810e4a0 <UART_SetConfig+0xab0>)
 810e3fa:	681b      	ldr	r3, [r3, #0]
 810e3fc:	08db      	lsrs	r3, r3, #3
 810e3fe:	f003 0303 	and.w	r3, r3, #3
 810e402:	4a28      	ldr	r2, [pc, #160]	; (810e4a4 <UART_SetConfig+0xab4>)
 810e404:	fa22 f303 	lsr.w	r3, r2, r3
 810e408:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810e40a:	e00f      	b.n	810e42c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810e40c:	4b25      	ldr	r3, [pc, #148]	; (810e4a4 <UART_SetConfig+0xab4>)
 810e40e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e410:	e00c      	b.n	810e42c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810e412:	4b25      	ldr	r3, [pc, #148]	; (810e4a8 <UART_SetConfig+0xab8>)
 810e414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e416:	e009      	b.n	810e42c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810e418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810e41c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810e41e:	e005      	b.n	810e42c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810e420:	2300      	movs	r3, #0
 810e422:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810e424:	2301      	movs	r3, #1
 810e426:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810e42a:	bf00      	nop
    }

    if (pclk != 0U)
 810e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e42e:	2b00      	cmp	r3, #0
 810e430:	d021      	beq.n	810e476 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810e432:	687b      	ldr	r3, [r7, #4]
 810e434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810e436:	4a1d      	ldr	r2, [pc, #116]	; (810e4ac <UART_SetConfig+0xabc>)
 810e438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810e43c:	461a      	mov	r2, r3
 810e43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e440:	fbb3 f2f2 	udiv	r2, r3, r2
 810e444:	687b      	ldr	r3, [r7, #4]
 810e446:	685b      	ldr	r3, [r3, #4]
 810e448:	085b      	lsrs	r3, r3, #1
 810e44a:	441a      	add	r2, r3
 810e44c:	687b      	ldr	r3, [r7, #4]
 810e44e:	685b      	ldr	r3, [r3, #4]
 810e450:	fbb2 f3f3 	udiv	r3, r2, r3
 810e454:	b29b      	uxth	r3, r3
 810e456:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810e458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e45a:	2b0f      	cmp	r3, #15
 810e45c:	d908      	bls.n	810e470 <UART_SetConfig+0xa80>
 810e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810e464:	d204      	bcs.n	810e470 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 810e466:	687b      	ldr	r3, [r7, #4]
 810e468:	681b      	ldr	r3, [r3, #0]
 810e46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810e46c:	60da      	str	r2, [r3, #12]
 810e46e:	e002      	b.n	810e476 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810e470:	2301      	movs	r3, #1
 810e472:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810e476:	687b      	ldr	r3, [r7, #4]
 810e478:	2201      	movs	r2, #1
 810e47a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810e47e:	687b      	ldr	r3, [r7, #4]
 810e480:	2201      	movs	r2, #1
 810e482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810e486:	687b      	ldr	r3, [r7, #4]
 810e488:	2200      	movs	r2, #0
 810e48a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810e48c:	687b      	ldr	r3, [r7, #4]
 810e48e:	2200      	movs	r2, #0
 810e490:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810e492:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810e496:	4618      	mov	r0, r3
 810e498:	3738      	adds	r7, #56	; 0x38
 810e49a:	46bd      	mov	sp, r7
 810e49c:	bdb0      	pop	{r4, r5, r7, pc}
 810e49e:	bf00      	nop
 810e4a0:	58024400 	.word	0x58024400
 810e4a4:	03d09000 	.word	0x03d09000
 810e4a8:	003d0900 	.word	0x003d0900
 810e4ac:	0810fdf4 	.word	0x0810fdf4

0810e4b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810e4b0:	b480      	push	{r7}
 810e4b2:	b083      	sub	sp, #12
 810e4b4:	af00      	add	r7, sp, #0
 810e4b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810e4b8:	687b      	ldr	r3, [r7, #4]
 810e4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e4bc:	f003 0301 	and.w	r3, r3, #1
 810e4c0:	2b00      	cmp	r3, #0
 810e4c2:	d00a      	beq.n	810e4da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810e4c4:	687b      	ldr	r3, [r7, #4]
 810e4c6:	681b      	ldr	r3, [r3, #0]
 810e4c8:	685b      	ldr	r3, [r3, #4]
 810e4ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810e4ce:	687b      	ldr	r3, [r7, #4]
 810e4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e4d2:	687b      	ldr	r3, [r7, #4]
 810e4d4:	681b      	ldr	r3, [r3, #0]
 810e4d6:	430a      	orrs	r2, r1
 810e4d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810e4da:	687b      	ldr	r3, [r7, #4]
 810e4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e4de:	f003 0302 	and.w	r3, r3, #2
 810e4e2:	2b00      	cmp	r3, #0
 810e4e4:	d00a      	beq.n	810e4fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810e4e6:	687b      	ldr	r3, [r7, #4]
 810e4e8:	681b      	ldr	r3, [r3, #0]
 810e4ea:	685b      	ldr	r3, [r3, #4]
 810e4ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810e4f0:	687b      	ldr	r3, [r7, #4]
 810e4f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810e4f4:	687b      	ldr	r3, [r7, #4]
 810e4f6:	681b      	ldr	r3, [r3, #0]
 810e4f8:	430a      	orrs	r2, r1
 810e4fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810e4fc:	687b      	ldr	r3, [r7, #4]
 810e4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e500:	f003 0304 	and.w	r3, r3, #4
 810e504:	2b00      	cmp	r3, #0
 810e506:	d00a      	beq.n	810e51e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810e508:	687b      	ldr	r3, [r7, #4]
 810e50a:	681b      	ldr	r3, [r3, #0]
 810e50c:	685b      	ldr	r3, [r3, #4]
 810e50e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810e512:	687b      	ldr	r3, [r7, #4]
 810e514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810e516:	687b      	ldr	r3, [r7, #4]
 810e518:	681b      	ldr	r3, [r3, #0]
 810e51a:	430a      	orrs	r2, r1
 810e51c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810e51e:	687b      	ldr	r3, [r7, #4]
 810e520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e522:	f003 0308 	and.w	r3, r3, #8
 810e526:	2b00      	cmp	r3, #0
 810e528:	d00a      	beq.n	810e540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810e52a:	687b      	ldr	r3, [r7, #4]
 810e52c:	681b      	ldr	r3, [r3, #0]
 810e52e:	685b      	ldr	r3, [r3, #4]
 810e530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810e534:	687b      	ldr	r3, [r7, #4]
 810e536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810e538:	687b      	ldr	r3, [r7, #4]
 810e53a:	681b      	ldr	r3, [r3, #0]
 810e53c:	430a      	orrs	r2, r1
 810e53e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810e540:	687b      	ldr	r3, [r7, #4]
 810e542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e544:	f003 0310 	and.w	r3, r3, #16
 810e548:	2b00      	cmp	r3, #0
 810e54a:	d00a      	beq.n	810e562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810e54c:	687b      	ldr	r3, [r7, #4]
 810e54e:	681b      	ldr	r3, [r3, #0]
 810e550:	689b      	ldr	r3, [r3, #8]
 810e552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810e556:	687b      	ldr	r3, [r7, #4]
 810e558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810e55a:	687b      	ldr	r3, [r7, #4]
 810e55c:	681b      	ldr	r3, [r3, #0]
 810e55e:	430a      	orrs	r2, r1
 810e560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810e562:	687b      	ldr	r3, [r7, #4]
 810e564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e566:	f003 0320 	and.w	r3, r3, #32
 810e56a:	2b00      	cmp	r3, #0
 810e56c:	d00a      	beq.n	810e584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810e56e:	687b      	ldr	r3, [r7, #4]
 810e570:	681b      	ldr	r3, [r3, #0]
 810e572:	689b      	ldr	r3, [r3, #8]
 810e574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810e578:	687b      	ldr	r3, [r7, #4]
 810e57a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810e57c:	687b      	ldr	r3, [r7, #4]
 810e57e:	681b      	ldr	r3, [r3, #0]
 810e580:	430a      	orrs	r2, r1
 810e582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810e584:	687b      	ldr	r3, [r7, #4]
 810e586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810e58c:	2b00      	cmp	r3, #0
 810e58e:	d01a      	beq.n	810e5c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810e590:	687b      	ldr	r3, [r7, #4]
 810e592:	681b      	ldr	r3, [r3, #0]
 810e594:	685b      	ldr	r3, [r3, #4]
 810e596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810e59a:	687b      	ldr	r3, [r7, #4]
 810e59c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810e59e:	687b      	ldr	r3, [r7, #4]
 810e5a0:	681b      	ldr	r3, [r3, #0]
 810e5a2:	430a      	orrs	r2, r1
 810e5a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810e5a6:	687b      	ldr	r3, [r7, #4]
 810e5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810e5aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e5ae:	d10a      	bne.n	810e5c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810e5b0:	687b      	ldr	r3, [r7, #4]
 810e5b2:	681b      	ldr	r3, [r3, #0]
 810e5b4:	685b      	ldr	r3, [r3, #4]
 810e5b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810e5ba:	687b      	ldr	r3, [r7, #4]
 810e5bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810e5be:	687b      	ldr	r3, [r7, #4]
 810e5c0:	681b      	ldr	r3, [r3, #0]
 810e5c2:	430a      	orrs	r2, r1
 810e5c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810e5c6:	687b      	ldr	r3, [r7, #4]
 810e5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810e5ce:	2b00      	cmp	r3, #0
 810e5d0:	d00a      	beq.n	810e5e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810e5d2:	687b      	ldr	r3, [r7, #4]
 810e5d4:	681b      	ldr	r3, [r3, #0]
 810e5d6:	685b      	ldr	r3, [r3, #4]
 810e5d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810e5dc:	687b      	ldr	r3, [r7, #4]
 810e5de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810e5e0:	687b      	ldr	r3, [r7, #4]
 810e5e2:	681b      	ldr	r3, [r3, #0]
 810e5e4:	430a      	orrs	r2, r1
 810e5e6:	605a      	str	r2, [r3, #4]
  }
}
 810e5e8:	bf00      	nop
 810e5ea:	370c      	adds	r7, #12
 810e5ec:	46bd      	mov	sp, r7
 810e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5f2:	4770      	bx	lr

0810e5f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810e5f4:	b580      	push	{r7, lr}
 810e5f6:	b086      	sub	sp, #24
 810e5f8:	af02      	add	r7, sp, #8
 810e5fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e5fc:	687b      	ldr	r3, [r7, #4]
 810e5fe:	2200      	movs	r2, #0
 810e600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810e604:	f7f5 fa74 	bl	8103af0 <HAL_GetTick>
 810e608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810e60a:	687b      	ldr	r3, [r7, #4]
 810e60c:	681b      	ldr	r3, [r3, #0]
 810e60e:	681b      	ldr	r3, [r3, #0]
 810e610:	f003 0308 	and.w	r3, r3, #8
 810e614:	2b08      	cmp	r3, #8
 810e616:	d10e      	bne.n	810e636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810e618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810e61c:	9300      	str	r3, [sp, #0]
 810e61e:	68fb      	ldr	r3, [r7, #12]
 810e620:	2200      	movs	r2, #0
 810e622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810e626:	6878      	ldr	r0, [r7, #4]
 810e628:	f000 f82f 	bl	810e68a <UART_WaitOnFlagUntilTimeout>
 810e62c:	4603      	mov	r3, r0
 810e62e:	2b00      	cmp	r3, #0
 810e630:	d001      	beq.n	810e636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810e632:	2303      	movs	r3, #3
 810e634:	e025      	b.n	810e682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810e636:	687b      	ldr	r3, [r7, #4]
 810e638:	681b      	ldr	r3, [r3, #0]
 810e63a:	681b      	ldr	r3, [r3, #0]
 810e63c:	f003 0304 	and.w	r3, r3, #4
 810e640:	2b04      	cmp	r3, #4
 810e642:	d10e      	bne.n	810e662 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810e644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810e648:	9300      	str	r3, [sp, #0]
 810e64a:	68fb      	ldr	r3, [r7, #12]
 810e64c:	2200      	movs	r2, #0
 810e64e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810e652:	6878      	ldr	r0, [r7, #4]
 810e654:	f000 f819 	bl	810e68a <UART_WaitOnFlagUntilTimeout>
 810e658:	4603      	mov	r3, r0
 810e65a:	2b00      	cmp	r3, #0
 810e65c:	d001      	beq.n	810e662 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810e65e:	2303      	movs	r3, #3
 810e660:	e00f      	b.n	810e682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810e662:	687b      	ldr	r3, [r7, #4]
 810e664:	2220      	movs	r2, #32
 810e666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810e66a:	687b      	ldr	r3, [r7, #4]
 810e66c:	2220      	movs	r2, #32
 810e66e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e672:	687b      	ldr	r3, [r7, #4]
 810e674:	2200      	movs	r2, #0
 810e676:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810e678:	687b      	ldr	r3, [r7, #4]
 810e67a:	2200      	movs	r2, #0
 810e67c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810e680:	2300      	movs	r3, #0
}
 810e682:	4618      	mov	r0, r3
 810e684:	3710      	adds	r7, #16
 810e686:	46bd      	mov	sp, r7
 810e688:	bd80      	pop	{r7, pc}

0810e68a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810e68a:	b580      	push	{r7, lr}
 810e68c:	b084      	sub	sp, #16
 810e68e:	af00      	add	r7, sp, #0
 810e690:	60f8      	str	r0, [r7, #12]
 810e692:	60b9      	str	r1, [r7, #8]
 810e694:	603b      	str	r3, [r7, #0]
 810e696:	4613      	mov	r3, r2
 810e698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810e69a:	e062      	b.n	810e762 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810e69c:	69bb      	ldr	r3, [r7, #24]
 810e69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e6a2:	d05e      	beq.n	810e762 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810e6a4:	f7f5 fa24 	bl	8103af0 <HAL_GetTick>
 810e6a8:	4602      	mov	r2, r0
 810e6aa:	683b      	ldr	r3, [r7, #0]
 810e6ac:	1ad3      	subs	r3, r2, r3
 810e6ae:	69ba      	ldr	r2, [r7, #24]
 810e6b0:	429a      	cmp	r2, r3
 810e6b2:	d302      	bcc.n	810e6ba <UART_WaitOnFlagUntilTimeout+0x30>
 810e6b4:	69bb      	ldr	r3, [r7, #24]
 810e6b6:	2b00      	cmp	r3, #0
 810e6b8:	d11d      	bne.n	810e6f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810e6ba:	68fb      	ldr	r3, [r7, #12]
 810e6bc:	681b      	ldr	r3, [r3, #0]
 810e6be:	681a      	ldr	r2, [r3, #0]
 810e6c0:	68fb      	ldr	r3, [r7, #12]
 810e6c2:	681b      	ldr	r3, [r3, #0]
 810e6c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810e6c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810e6ca:	68fb      	ldr	r3, [r7, #12]
 810e6cc:	681b      	ldr	r3, [r3, #0]
 810e6ce:	689a      	ldr	r2, [r3, #8]
 810e6d0:	68fb      	ldr	r3, [r7, #12]
 810e6d2:	681b      	ldr	r3, [r3, #0]
 810e6d4:	f022 0201 	bic.w	r2, r2, #1
 810e6d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810e6da:	68fb      	ldr	r3, [r7, #12]
 810e6dc:	2220      	movs	r2, #32
 810e6de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810e6e2:	68fb      	ldr	r3, [r7, #12]
 810e6e4:	2220      	movs	r2, #32
 810e6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810e6ea:	68fb      	ldr	r3, [r7, #12]
 810e6ec:	2200      	movs	r2, #0
 810e6ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810e6f2:	2303      	movs	r3, #3
 810e6f4:	e045      	b.n	810e782 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810e6f6:	68fb      	ldr	r3, [r7, #12]
 810e6f8:	681b      	ldr	r3, [r3, #0]
 810e6fa:	681b      	ldr	r3, [r3, #0]
 810e6fc:	f003 0304 	and.w	r3, r3, #4
 810e700:	2b00      	cmp	r3, #0
 810e702:	d02e      	beq.n	810e762 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810e704:	68fb      	ldr	r3, [r7, #12]
 810e706:	681b      	ldr	r3, [r3, #0]
 810e708:	69db      	ldr	r3, [r3, #28]
 810e70a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810e70e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810e712:	d126      	bne.n	810e762 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810e714:	68fb      	ldr	r3, [r7, #12]
 810e716:	681b      	ldr	r3, [r3, #0]
 810e718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810e71c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810e71e:	68fb      	ldr	r3, [r7, #12]
 810e720:	681b      	ldr	r3, [r3, #0]
 810e722:	681a      	ldr	r2, [r3, #0]
 810e724:	68fb      	ldr	r3, [r7, #12]
 810e726:	681b      	ldr	r3, [r3, #0]
 810e728:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810e72c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810e72e:	68fb      	ldr	r3, [r7, #12]
 810e730:	681b      	ldr	r3, [r3, #0]
 810e732:	689a      	ldr	r2, [r3, #8]
 810e734:	68fb      	ldr	r3, [r7, #12]
 810e736:	681b      	ldr	r3, [r3, #0]
 810e738:	f022 0201 	bic.w	r2, r2, #1
 810e73c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810e73e:	68fb      	ldr	r3, [r7, #12]
 810e740:	2220      	movs	r2, #32
 810e742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810e746:	68fb      	ldr	r3, [r7, #12]
 810e748:	2220      	movs	r2, #32
 810e74a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810e74e:	68fb      	ldr	r3, [r7, #12]
 810e750:	2220      	movs	r2, #32
 810e752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810e756:	68fb      	ldr	r3, [r7, #12]
 810e758:	2200      	movs	r2, #0
 810e75a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810e75e:	2303      	movs	r3, #3
 810e760:	e00f      	b.n	810e782 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810e762:	68fb      	ldr	r3, [r7, #12]
 810e764:	681b      	ldr	r3, [r3, #0]
 810e766:	69da      	ldr	r2, [r3, #28]
 810e768:	68bb      	ldr	r3, [r7, #8]
 810e76a:	4013      	ands	r3, r2
 810e76c:	68ba      	ldr	r2, [r7, #8]
 810e76e:	429a      	cmp	r2, r3
 810e770:	bf0c      	ite	eq
 810e772:	2301      	moveq	r3, #1
 810e774:	2300      	movne	r3, #0
 810e776:	b2db      	uxtb	r3, r3
 810e778:	461a      	mov	r2, r3
 810e77a:	79fb      	ldrb	r3, [r7, #7]
 810e77c:	429a      	cmp	r2, r3
 810e77e:	d08d      	beq.n	810e69c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810e780:	2300      	movs	r3, #0
}
 810e782:	4618      	mov	r0, r3
 810e784:	3710      	adds	r7, #16
 810e786:	46bd      	mov	sp, r7
 810e788:	bd80      	pop	{r7, pc}
	...

0810e78c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810e78c:	b580      	push	{r7, lr}
 810e78e:	b084      	sub	sp, #16
 810e790:	af00      	add	r7, sp, #0
 810e792:	60f8      	str	r0, [r7, #12]
 810e794:	60b9      	str	r1, [r7, #8]
 810e796:	4613      	mov	r3, r2
 810e798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810e79a:	68fb      	ldr	r3, [r7, #12]
 810e79c:	68ba      	ldr	r2, [r7, #8]
 810e79e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 810e7a0:	68fb      	ldr	r3, [r7, #12]
 810e7a2:	88fa      	ldrh	r2, [r7, #6]
 810e7a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e7a8:	68fb      	ldr	r3, [r7, #12]
 810e7aa:	2200      	movs	r2, #0
 810e7ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810e7b0:	68fb      	ldr	r3, [r7, #12]
 810e7b2:	2222      	movs	r2, #34	; 0x22
 810e7b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 810e7b8:	68fb      	ldr	r3, [r7, #12]
 810e7ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e7bc:	2b00      	cmp	r3, #0
 810e7be:	d02c      	beq.n	810e81a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810e7c0:	68fb      	ldr	r3, [r7, #12]
 810e7c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e7c4:	4a25      	ldr	r2, [pc, #148]	; (810e85c <UART_Start_Receive_DMA+0xd0>)
 810e7c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810e7c8:	68fb      	ldr	r3, [r7, #12]
 810e7ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e7cc:	4a24      	ldr	r2, [pc, #144]	; (810e860 <UART_Start_Receive_DMA+0xd4>)
 810e7ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810e7d0:	68fb      	ldr	r3, [r7, #12]
 810e7d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e7d4:	4a23      	ldr	r2, [pc, #140]	; (810e864 <UART_Start_Receive_DMA+0xd8>)
 810e7d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810e7d8:	68fb      	ldr	r3, [r7, #12]
 810e7da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e7dc:	2200      	movs	r2, #0
 810e7de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810e7e0:	68fb      	ldr	r3, [r7, #12]
 810e7e2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810e7e4:	68fb      	ldr	r3, [r7, #12]
 810e7e6:	681b      	ldr	r3, [r3, #0]
 810e7e8:	3324      	adds	r3, #36	; 0x24
 810e7ea:	4619      	mov	r1, r3
 810e7ec:	68fb      	ldr	r3, [r7, #12]
 810e7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810e7f0:	461a      	mov	r2, r3
 810e7f2:	88fb      	ldrh	r3, [r7, #6]
 810e7f4:	f7f7 fa0c 	bl	8105c10 <HAL_DMA_Start_IT>
 810e7f8:	4603      	mov	r3, r0
 810e7fa:	2b00      	cmp	r3, #0
 810e7fc:	d00d      	beq.n	810e81a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810e7fe:	68fb      	ldr	r3, [r7, #12]
 810e800:	2210      	movs	r2, #16
 810e802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810e806:	68fb      	ldr	r3, [r7, #12]
 810e808:	2200      	movs	r2, #0
 810e80a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 810e80e:	68fb      	ldr	r3, [r7, #12]
 810e810:	2220      	movs	r2, #32
 810e812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 810e816:	2301      	movs	r3, #1
 810e818:	e01c      	b.n	810e854 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 810e81a:	68fb      	ldr	r3, [r7, #12]
 810e81c:	2200      	movs	r2, #0
 810e81e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810e822:	68fb      	ldr	r3, [r7, #12]
 810e824:	681b      	ldr	r3, [r3, #0]
 810e826:	681a      	ldr	r2, [r3, #0]
 810e828:	68fb      	ldr	r3, [r7, #12]
 810e82a:	681b      	ldr	r3, [r3, #0]
 810e82c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810e830:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810e832:	68fb      	ldr	r3, [r7, #12]
 810e834:	681b      	ldr	r3, [r3, #0]
 810e836:	689a      	ldr	r2, [r3, #8]
 810e838:	68fb      	ldr	r3, [r7, #12]
 810e83a:	681b      	ldr	r3, [r3, #0]
 810e83c:	f042 0201 	orr.w	r2, r2, #1
 810e840:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810e842:	68fb      	ldr	r3, [r7, #12]
 810e844:	681b      	ldr	r3, [r3, #0]
 810e846:	689a      	ldr	r2, [r3, #8]
 810e848:	68fb      	ldr	r3, [r7, #12]
 810e84a:	681b      	ldr	r3, [r3, #0]
 810e84c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810e850:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 810e852:	2300      	movs	r3, #0
}
 810e854:	4618      	mov	r0, r3
 810e856:	3710      	adds	r7, #16
 810e858:	46bd      	mov	sp, r7
 810e85a:	bd80      	pop	{r7, pc}
 810e85c:	0810e975 	.word	0x0810e975
 810e860:	0810ea0b 	.word	0x0810ea0b
 810e864:	0810ea43 	.word	0x0810ea43

0810e868 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810e868:	b480      	push	{r7}
 810e86a:	b083      	sub	sp, #12
 810e86c:	af00      	add	r7, sp, #0
 810e86e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810e870:	687b      	ldr	r3, [r7, #4]
 810e872:	681b      	ldr	r3, [r3, #0]
 810e874:	681a      	ldr	r2, [r3, #0]
 810e876:	687b      	ldr	r3, [r7, #4]
 810e878:	681b      	ldr	r3, [r3, #0]
 810e87a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810e87e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810e880:	687b      	ldr	r3, [r7, #4]
 810e882:	681b      	ldr	r3, [r3, #0]
 810e884:	689a      	ldr	r2, [r3, #8]
 810e886:	687b      	ldr	r3, [r7, #4]
 810e888:	681b      	ldr	r3, [r3, #0]
 810e88a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810e88e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810e890:	687b      	ldr	r3, [r7, #4]
 810e892:	2220      	movs	r2, #32
 810e894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810e898:	bf00      	nop
 810e89a:	370c      	adds	r7, #12
 810e89c:	46bd      	mov	sp, r7
 810e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8a2:	4770      	bx	lr

0810e8a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810e8a4:	b480      	push	{r7}
 810e8a6:	b083      	sub	sp, #12
 810e8a8:	af00      	add	r7, sp, #0
 810e8aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810e8ac:	687b      	ldr	r3, [r7, #4]
 810e8ae:	681b      	ldr	r3, [r3, #0]
 810e8b0:	681a      	ldr	r2, [r3, #0]
 810e8b2:	687b      	ldr	r3, [r7, #4]
 810e8b4:	681b      	ldr	r3, [r3, #0]
 810e8b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810e8ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810e8bc:	687b      	ldr	r3, [r7, #4]
 810e8be:	681b      	ldr	r3, [r3, #0]
 810e8c0:	689b      	ldr	r3, [r3, #8]
 810e8c2:	687a      	ldr	r2, [r7, #4]
 810e8c4:	6812      	ldr	r2, [r2, #0]
 810e8c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810e8ca:	f023 0301 	bic.w	r3, r3, #1
 810e8ce:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e8d0:	687b      	ldr	r3, [r7, #4]
 810e8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810e8d4:	2b01      	cmp	r3, #1
 810e8d6:	d107      	bne.n	810e8e8 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e8d8:	687b      	ldr	r3, [r7, #4]
 810e8da:	681b      	ldr	r3, [r3, #0]
 810e8dc:	681a      	ldr	r2, [r3, #0]
 810e8de:	687b      	ldr	r3, [r7, #4]
 810e8e0:	681b      	ldr	r3, [r3, #0]
 810e8e2:	f022 0210 	bic.w	r2, r2, #16
 810e8e6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810e8e8:	687b      	ldr	r3, [r7, #4]
 810e8ea:	2220      	movs	r2, #32
 810e8ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e8f0:	687b      	ldr	r3, [r7, #4]
 810e8f2:	2200      	movs	r2, #0
 810e8f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810e8f6:	687b      	ldr	r3, [r7, #4]
 810e8f8:	2200      	movs	r2, #0
 810e8fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 810e8fc:	bf00      	nop
 810e8fe:	370c      	adds	r7, #12
 810e900:	46bd      	mov	sp, r7
 810e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e906:	4770      	bx	lr

0810e908 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810e908:	b580      	push	{r7, lr}
 810e90a:	b084      	sub	sp, #16
 810e90c:	af00      	add	r7, sp, #0
 810e90e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810e910:	687b      	ldr	r3, [r7, #4]
 810e912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e914:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810e916:	687b      	ldr	r3, [r7, #4]
 810e918:	69db      	ldr	r3, [r3, #28]
 810e91a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e91e:	d014      	beq.n	810e94a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810e920:	68fb      	ldr	r3, [r7, #12]
 810e922:	2200      	movs	r2, #0
 810e924:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810e928:	68fb      	ldr	r3, [r7, #12]
 810e92a:	681b      	ldr	r3, [r3, #0]
 810e92c:	689a      	ldr	r2, [r3, #8]
 810e92e:	68fb      	ldr	r3, [r7, #12]
 810e930:	681b      	ldr	r3, [r3, #0]
 810e932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810e936:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810e938:	68fb      	ldr	r3, [r7, #12]
 810e93a:	681b      	ldr	r3, [r3, #0]
 810e93c:	681a      	ldr	r2, [r3, #0]
 810e93e:	68fb      	ldr	r3, [r7, #12]
 810e940:	681b      	ldr	r3, [r3, #0]
 810e942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810e946:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810e948:	e002      	b.n	810e950 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810e94a:	68f8      	ldr	r0, [r7, #12]
 810e94c:	f7f4 fe60 	bl	8103610 <HAL_UART_TxCpltCallback>
}
 810e950:	bf00      	nop
 810e952:	3710      	adds	r7, #16
 810e954:	46bd      	mov	sp, r7
 810e956:	bd80      	pop	{r7, pc}

0810e958 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810e958:	b580      	push	{r7, lr}
 810e95a:	b084      	sub	sp, #16
 810e95c:	af00      	add	r7, sp, #0
 810e95e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810e960:	687b      	ldr	r3, [r7, #4]
 810e962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e964:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810e966:	68f8      	ldr	r0, [r7, #12]
 810e968:	f7ff f818 	bl	810d99c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810e96c:	bf00      	nop
 810e96e:	3710      	adds	r7, #16
 810e970:	46bd      	mov	sp, r7
 810e972:	bd80      	pop	{r7, pc}

0810e974 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810e974:	b580      	push	{r7, lr}
 810e976:	b084      	sub	sp, #16
 810e978:	af00      	add	r7, sp, #0
 810e97a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810e97c:	687b      	ldr	r3, [r7, #4]
 810e97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e980:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810e982:	687b      	ldr	r3, [r7, #4]
 810e984:	69db      	ldr	r3, [r3, #28]
 810e986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e98a:	d02b      	beq.n	810e9e4 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 810e98c:	68fb      	ldr	r3, [r7, #12]
 810e98e:	2200      	movs	r2, #0
 810e990:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810e994:	68fb      	ldr	r3, [r7, #12]
 810e996:	681b      	ldr	r3, [r3, #0]
 810e998:	681a      	ldr	r2, [r3, #0]
 810e99a:	68fb      	ldr	r3, [r7, #12]
 810e99c:	681b      	ldr	r3, [r3, #0]
 810e99e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810e9a2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810e9a4:	68fb      	ldr	r3, [r7, #12]
 810e9a6:	681b      	ldr	r3, [r3, #0]
 810e9a8:	689a      	ldr	r2, [r3, #8]
 810e9aa:	68fb      	ldr	r3, [r7, #12]
 810e9ac:	681b      	ldr	r3, [r3, #0]
 810e9ae:	f022 0201 	bic.w	r2, r2, #1
 810e9b2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810e9b4:	68fb      	ldr	r3, [r7, #12]
 810e9b6:	681b      	ldr	r3, [r3, #0]
 810e9b8:	689a      	ldr	r2, [r3, #8]
 810e9ba:	68fb      	ldr	r3, [r7, #12]
 810e9bc:	681b      	ldr	r3, [r3, #0]
 810e9be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810e9c2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810e9c4:	68fb      	ldr	r3, [r7, #12]
 810e9c6:	2220      	movs	r2, #32
 810e9c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e9cc:	68fb      	ldr	r3, [r7, #12]
 810e9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810e9d0:	2b01      	cmp	r3, #1
 810e9d2:	d107      	bne.n	810e9e4 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e9d4:	68fb      	ldr	r3, [r7, #12]
 810e9d6:	681b      	ldr	r3, [r3, #0]
 810e9d8:	681a      	ldr	r2, [r3, #0]
 810e9da:	68fb      	ldr	r3, [r7, #12]
 810e9dc:	681b      	ldr	r3, [r3, #0]
 810e9de:	f022 0210 	bic.w	r2, r2, #16
 810e9e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e9e4:	68fb      	ldr	r3, [r7, #12]
 810e9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810e9e8:	2b01      	cmp	r3, #1
 810e9ea:	d107      	bne.n	810e9fc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e9ec:	68fb      	ldr	r3, [r7, #12]
 810e9ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810e9f2:	4619      	mov	r1, r3
 810e9f4:	68f8      	ldr	r0, [r7, #12]
 810e9f6:	f7fe ffef 	bl	810d9d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810e9fa:	e002      	b.n	810ea02 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 810e9fc:	68f8      	ldr	r0, [r7, #12]
 810e9fe:	f7f4 fe11 	bl	8103624 <HAL_UART_RxCpltCallback>
}
 810ea02:	bf00      	nop
 810ea04:	3710      	adds	r7, #16
 810ea06:	46bd      	mov	sp, r7
 810ea08:	bd80      	pop	{r7, pc}

0810ea0a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810ea0a:	b580      	push	{r7, lr}
 810ea0c:	b084      	sub	sp, #16
 810ea0e:	af00      	add	r7, sp, #0
 810ea10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810ea12:	687b      	ldr	r3, [r7, #4]
 810ea14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ea16:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ea18:	68fb      	ldr	r3, [r7, #12]
 810ea1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ea1c:	2b01      	cmp	r3, #1
 810ea1e:	d109      	bne.n	810ea34 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810ea20:	68fb      	ldr	r3, [r7, #12]
 810ea22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810ea26:	085b      	lsrs	r3, r3, #1
 810ea28:	b29b      	uxth	r3, r3
 810ea2a:	4619      	mov	r1, r3
 810ea2c:	68f8      	ldr	r0, [r7, #12]
 810ea2e:	f7fe ffd3 	bl	810d9d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810ea32:	e002      	b.n	810ea3a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 810ea34:	68f8      	ldr	r0, [r7, #12]
 810ea36:	f7fe ffbb 	bl	810d9b0 <HAL_UART_RxHalfCpltCallback>
}
 810ea3a:	bf00      	nop
 810ea3c:	3710      	adds	r7, #16
 810ea3e:	46bd      	mov	sp, r7
 810ea40:	bd80      	pop	{r7, pc}

0810ea42 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810ea42:	b580      	push	{r7, lr}
 810ea44:	b086      	sub	sp, #24
 810ea46:	af00      	add	r7, sp, #0
 810ea48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810ea4a:	687b      	ldr	r3, [r7, #4]
 810ea4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ea4e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810ea50:	697b      	ldr	r3, [r7, #20]
 810ea52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ea56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810ea58:	697b      	ldr	r3, [r7, #20]
 810ea5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810ea5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810ea60:	697b      	ldr	r3, [r7, #20]
 810ea62:	681b      	ldr	r3, [r3, #0]
 810ea64:	689b      	ldr	r3, [r3, #8]
 810ea66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ea6a:	2b80      	cmp	r3, #128	; 0x80
 810ea6c:	d109      	bne.n	810ea82 <UART_DMAError+0x40>
 810ea6e:	693b      	ldr	r3, [r7, #16]
 810ea70:	2b21      	cmp	r3, #33	; 0x21
 810ea72:	d106      	bne.n	810ea82 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810ea74:	697b      	ldr	r3, [r7, #20]
 810ea76:	2200      	movs	r2, #0
 810ea78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810ea7c:	6978      	ldr	r0, [r7, #20]
 810ea7e:	f7ff fef3 	bl	810e868 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810ea82:	697b      	ldr	r3, [r7, #20]
 810ea84:	681b      	ldr	r3, [r3, #0]
 810ea86:	689b      	ldr	r3, [r3, #8]
 810ea88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ea8c:	2b40      	cmp	r3, #64	; 0x40
 810ea8e:	d109      	bne.n	810eaa4 <UART_DMAError+0x62>
 810ea90:	68fb      	ldr	r3, [r7, #12]
 810ea92:	2b22      	cmp	r3, #34	; 0x22
 810ea94:	d106      	bne.n	810eaa4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810ea96:	697b      	ldr	r3, [r7, #20]
 810ea98:	2200      	movs	r2, #0
 810ea9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810ea9e:	6978      	ldr	r0, [r7, #20]
 810eaa0:	f7ff ff00 	bl	810e8a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810eaa4:	697b      	ldr	r3, [r7, #20]
 810eaa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810eaaa:	f043 0210 	orr.w	r2, r3, #16
 810eaae:	697b      	ldr	r3, [r7, #20]
 810eab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810eab4:	6978      	ldr	r0, [r7, #20]
 810eab6:	f7fe ff85 	bl	810d9c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810eaba:	bf00      	nop
 810eabc:	3718      	adds	r7, #24
 810eabe:	46bd      	mov	sp, r7
 810eac0:	bd80      	pop	{r7, pc}

0810eac2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810eac2:	b580      	push	{r7, lr}
 810eac4:	b084      	sub	sp, #16
 810eac6:	af00      	add	r7, sp, #0
 810eac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810eaca:	687b      	ldr	r3, [r7, #4]
 810eacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810eace:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810ead0:	68fb      	ldr	r3, [r7, #12]
 810ead2:	2200      	movs	r2, #0
 810ead4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810ead8:	68fb      	ldr	r3, [r7, #12]
 810eada:	2200      	movs	r2, #0
 810eadc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810eae0:	68f8      	ldr	r0, [r7, #12]
 810eae2:	f7fe ff6f 	bl	810d9c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810eae6:	bf00      	nop
 810eae8:	3710      	adds	r7, #16
 810eaea:	46bd      	mov	sp, r7
 810eaec:	bd80      	pop	{r7, pc}

0810eaee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810eaee:	b580      	push	{r7, lr}
 810eaf0:	b082      	sub	sp, #8
 810eaf2:	af00      	add	r7, sp, #0
 810eaf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810eaf6:	687b      	ldr	r3, [r7, #4]
 810eaf8:	681b      	ldr	r3, [r3, #0]
 810eafa:	681a      	ldr	r2, [r3, #0]
 810eafc:	687b      	ldr	r3, [r7, #4]
 810eafe:	681b      	ldr	r3, [r3, #0]
 810eb00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810eb04:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810eb06:	687b      	ldr	r3, [r7, #4]
 810eb08:	2220      	movs	r2, #32
 810eb0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810eb0e:	687b      	ldr	r3, [r7, #4]
 810eb10:	2200      	movs	r2, #0
 810eb12:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810eb14:	6878      	ldr	r0, [r7, #4]
 810eb16:	f7f4 fd7b 	bl	8103610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810eb1a:	bf00      	nop
 810eb1c:	3708      	adds	r7, #8
 810eb1e:	46bd      	mov	sp, r7
 810eb20:	bd80      	pop	{r7, pc}

0810eb22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810eb22:	b480      	push	{r7}
 810eb24:	b083      	sub	sp, #12
 810eb26:	af00      	add	r7, sp, #0
 810eb28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810eb2a:	bf00      	nop
 810eb2c:	370c      	adds	r7, #12
 810eb2e:	46bd      	mov	sp, r7
 810eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb34:	4770      	bx	lr

0810eb36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810eb36:	b480      	push	{r7}
 810eb38:	b083      	sub	sp, #12
 810eb3a:	af00      	add	r7, sp, #0
 810eb3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810eb3e:	bf00      	nop
 810eb40:	370c      	adds	r7, #12
 810eb42:	46bd      	mov	sp, r7
 810eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb48:	4770      	bx	lr

0810eb4a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810eb4a:	b480      	push	{r7}
 810eb4c:	b083      	sub	sp, #12
 810eb4e:	af00      	add	r7, sp, #0
 810eb50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810eb52:	bf00      	nop
 810eb54:	370c      	adds	r7, #12
 810eb56:	46bd      	mov	sp, r7
 810eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb5c:	4770      	bx	lr

0810eb5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810eb5e:	b480      	push	{r7}
 810eb60:	b085      	sub	sp, #20
 810eb62:	af00      	add	r7, sp, #0
 810eb64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810eb66:	687b      	ldr	r3, [r7, #4]
 810eb68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810eb6c:	2b01      	cmp	r3, #1
 810eb6e:	d101      	bne.n	810eb74 <HAL_UARTEx_DisableFifoMode+0x16>
 810eb70:	2302      	movs	r3, #2
 810eb72:	e027      	b.n	810ebc4 <HAL_UARTEx_DisableFifoMode+0x66>
 810eb74:	687b      	ldr	r3, [r7, #4]
 810eb76:	2201      	movs	r2, #1
 810eb78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810eb7c:	687b      	ldr	r3, [r7, #4]
 810eb7e:	2224      	movs	r2, #36	; 0x24
 810eb80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810eb84:	687b      	ldr	r3, [r7, #4]
 810eb86:	681b      	ldr	r3, [r3, #0]
 810eb88:	681b      	ldr	r3, [r3, #0]
 810eb8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810eb8c:	687b      	ldr	r3, [r7, #4]
 810eb8e:	681b      	ldr	r3, [r3, #0]
 810eb90:	681a      	ldr	r2, [r3, #0]
 810eb92:	687b      	ldr	r3, [r7, #4]
 810eb94:	681b      	ldr	r3, [r3, #0]
 810eb96:	f022 0201 	bic.w	r2, r2, #1
 810eb9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810eb9c:	68fb      	ldr	r3, [r7, #12]
 810eb9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810eba2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810eba4:	687b      	ldr	r3, [r7, #4]
 810eba6:	2200      	movs	r2, #0
 810eba8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ebaa:	687b      	ldr	r3, [r7, #4]
 810ebac:	681b      	ldr	r3, [r3, #0]
 810ebae:	68fa      	ldr	r2, [r7, #12]
 810ebb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ebb2:	687b      	ldr	r3, [r7, #4]
 810ebb4:	2220      	movs	r2, #32
 810ebb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ebba:	687b      	ldr	r3, [r7, #4]
 810ebbc:	2200      	movs	r2, #0
 810ebbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810ebc2:	2300      	movs	r3, #0
}
 810ebc4:	4618      	mov	r0, r3
 810ebc6:	3714      	adds	r7, #20
 810ebc8:	46bd      	mov	sp, r7
 810ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ebce:	4770      	bx	lr

0810ebd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ebd0:	b580      	push	{r7, lr}
 810ebd2:	b084      	sub	sp, #16
 810ebd4:	af00      	add	r7, sp, #0
 810ebd6:	6078      	str	r0, [r7, #4]
 810ebd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ebda:	687b      	ldr	r3, [r7, #4]
 810ebdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810ebe0:	2b01      	cmp	r3, #1
 810ebe2:	d101      	bne.n	810ebe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810ebe4:	2302      	movs	r3, #2
 810ebe6:	e02d      	b.n	810ec44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810ebe8:	687b      	ldr	r3, [r7, #4]
 810ebea:	2201      	movs	r2, #1
 810ebec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810ebf0:	687b      	ldr	r3, [r7, #4]
 810ebf2:	2224      	movs	r2, #36	; 0x24
 810ebf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ebf8:	687b      	ldr	r3, [r7, #4]
 810ebfa:	681b      	ldr	r3, [r3, #0]
 810ebfc:	681b      	ldr	r3, [r3, #0]
 810ebfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ec00:	687b      	ldr	r3, [r7, #4]
 810ec02:	681b      	ldr	r3, [r3, #0]
 810ec04:	681a      	ldr	r2, [r3, #0]
 810ec06:	687b      	ldr	r3, [r7, #4]
 810ec08:	681b      	ldr	r3, [r3, #0]
 810ec0a:	f022 0201 	bic.w	r2, r2, #1
 810ec0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810ec10:	687b      	ldr	r3, [r7, #4]
 810ec12:	681b      	ldr	r3, [r3, #0]
 810ec14:	689b      	ldr	r3, [r3, #8]
 810ec16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810ec1a:	687b      	ldr	r3, [r7, #4]
 810ec1c:	681b      	ldr	r3, [r3, #0]
 810ec1e:	683a      	ldr	r2, [r7, #0]
 810ec20:	430a      	orrs	r2, r1
 810ec22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ec24:	6878      	ldr	r0, [r7, #4]
 810ec26:	f000 f84f 	bl	810ecc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ec2a:	687b      	ldr	r3, [r7, #4]
 810ec2c:	681b      	ldr	r3, [r3, #0]
 810ec2e:	68fa      	ldr	r2, [r7, #12]
 810ec30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ec32:	687b      	ldr	r3, [r7, #4]
 810ec34:	2220      	movs	r2, #32
 810ec36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ec3a:	687b      	ldr	r3, [r7, #4]
 810ec3c:	2200      	movs	r2, #0
 810ec3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810ec42:	2300      	movs	r3, #0
}
 810ec44:	4618      	mov	r0, r3
 810ec46:	3710      	adds	r7, #16
 810ec48:	46bd      	mov	sp, r7
 810ec4a:	bd80      	pop	{r7, pc}

0810ec4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ec4c:	b580      	push	{r7, lr}
 810ec4e:	b084      	sub	sp, #16
 810ec50:	af00      	add	r7, sp, #0
 810ec52:	6078      	str	r0, [r7, #4]
 810ec54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ec56:	687b      	ldr	r3, [r7, #4]
 810ec58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810ec5c:	2b01      	cmp	r3, #1
 810ec5e:	d101      	bne.n	810ec64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810ec60:	2302      	movs	r3, #2
 810ec62:	e02d      	b.n	810ecc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810ec64:	687b      	ldr	r3, [r7, #4]
 810ec66:	2201      	movs	r2, #1
 810ec68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810ec6c:	687b      	ldr	r3, [r7, #4]
 810ec6e:	2224      	movs	r2, #36	; 0x24
 810ec70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ec74:	687b      	ldr	r3, [r7, #4]
 810ec76:	681b      	ldr	r3, [r3, #0]
 810ec78:	681b      	ldr	r3, [r3, #0]
 810ec7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ec7c:	687b      	ldr	r3, [r7, #4]
 810ec7e:	681b      	ldr	r3, [r3, #0]
 810ec80:	681a      	ldr	r2, [r3, #0]
 810ec82:	687b      	ldr	r3, [r7, #4]
 810ec84:	681b      	ldr	r3, [r3, #0]
 810ec86:	f022 0201 	bic.w	r2, r2, #1
 810ec8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ec8c:	687b      	ldr	r3, [r7, #4]
 810ec8e:	681b      	ldr	r3, [r3, #0]
 810ec90:	689b      	ldr	r3, [r3, #8]
 810ec92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810ec96:	687b      	ldr	r3, [r7, #4]
 810ec98:	681b      	ldr	r3, [r3, #0]
 810ec9a:	683a      	ldr	r2, [r7, #0]
 810ec9c:	430a      	orrs	r2, r1
 810ec9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810eca0:	6878      	ldr	r0, [r7, #4]
 810eca2:	f000 f811 	bl	810ecc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810eca6:	687b      	ldr	r3, [r7, #4]
 810eca8:	681b      	ldr	r3, [r3, #0]
 810ecaa:	68fa      	ldr	r2, [r7, #12]
 810ecac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ecae:	687b      	ldr	r3, [r7, #4]
 810ecb0:	2220      	movs	r2, #32
 810ecb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ecb6:	687b      	ldr	r3, [r7, #4]
 810ecb8:	2200      	movs	r2, #0
 810ecba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810ecbe:	2300      	movs	r3, #0
}
 810ecc0:	4618      	mov	r0, r3
 810ecc2:	3710      	adds	r7, #16
 810ecc4:	46bd      	mov	sp, r7
 810ecc6:	bd80      	pop	{r7, pc}

0810ecc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ecc8:	b480      	push	{r7}
 810ecca:	b085      	sub	sp, #20
 810eccc:	af00      	add	r7, sp, #0
 810ecce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810ecd0:	687b      	ldr	r3, [r7, #4]
 810ecd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ecd4:	2b00      	cmp	r3, #0
 810ecd6:	d108      	bne.n	810ecea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ecd8:	687b      	ldr	r3, [r7, #4]
 810ecda:	2201      	movs	r2, #1
 810ecdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810ece0:	687b      	ldr	r3, [r7, #4]
 810ece2:	2201      	movs	r2, #1
 810ece4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ece8:	e031      	b.n	810ed4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ecea:	2310      	movs	r3, #16
 810ecec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ecee:	2310      	movs	r3, #16
 810ecf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ecf2:	687b      	ldr	r3, [r7, #4]
 810ecf4:	681b      	ldr	r3, [r3, #0]
 810ecf6:	689b      	ldr	r3, [r3, #8]
 810ecf8:	0e5b      	lsrs	r3, r3, #25
 810ecfa:	b2db      	uxtb	r3, r3
 810ecfc:	f003 0307 	and.w	r3, r3, #7
 810ed00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ed02:	687b      	ldr	r3, [r7, #4]
 810ed04:	681b      	ldr	r3, [r3, #0]
 810ed06:	689b      	ldr	r3, [r3, #8]
 810ed08:	0f5b      	lsrs	r3, r3, #29
 810ed0a:	b2db      	uxtb	r3, r3
 810ed0c:	f003 0307 	and.w	r3, r3, #7
 810ed10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ed12:	7bbb      	ldrb	r3, [r7, #14]
 810ed14:	7b3a      	ldrb	r2, [r7, #12]
 810ed16:	4911      	ldr	r1, [pc, #68]	; (810ed5c <UARTEx_SetNbDataToProcess+0x94>)
 810ed18:	5c8a      	ldrb	r2, [r1, r2]
 810ed1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810ed1e:	7b3a      	ldrb	r2, [r7, #12]
 810ed20:	490f      	ldr	r1, [pc, #60]	; (810ed60 <UARTEx_SetNbDataToProcess+0x98>)
 810ed22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ed24:	fb93 f3f2 	sdiv	r3, r3, r2
 810ed28:	b29a      	uxth	r2, r3
 810ed2a:	687b      	ldr	r3, [r7, #4]
 810ed2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ed30:	7bfb      	ldrb	r3, [r7, #15]
 810ed32:	7b7a      	ldrb	r2, [r7, #13]
 810ed34:	4909      	ldr	r1, [pc, #36]	; (810ed5c <UARTEx_SetNbDataToProcess+0x94>)
 810ed36:	5c8a      	ldrb	r2, [r1, r2]
 810ed38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810ed3c:	7b7a      	ldrb	r2, [r7, #13]
 810ed3e:	4908      	ldr	r1, [pc, #32]	; (810ed60 <UARTEx_SetNbDataToProcess+0x98>)
 810ed40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ed42:	fb93 f3f2 	sdiv	r3, r3, r2
 810ed46:	b29a      	uxth	r2, r3
 810ed48:	687b      	ldr	r3, [r7, #4]
 810ed4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810ed4e:	bf00      	nop
 810ed50:	3714      	adds	r7, #20
 810ed52:	46bd      	mov	sp, r7
 810ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed58:	4770      	bx	lr
 810ed5a:	bf00      	nop
 810ed5c:	0810fe0c 	.word	0x0810fe0c
 810ed60:	0810fe14 	.word	0x0810fe14

0810ed64 <__errno>:
 810ed64:	4b01      	ldr	r3, [pc, #4]	; (810ed6c <__errno+0x8>)
 810ed66:	6818      	ldr	r0, [r3, #0]
 810ed68:	4770      	bx	lr
 810ed6a:	bf00      	nop
 810ed6c:	10000024 	.word	0x10000024

0810ed70 <__libc_init_array>:
 810ed70:	b570      	push	{r4, r5, r6, lr}
 810ed72:	4d0d      	ldr	r5, [pc, #52]	; (810eda8 <__libc_init_array+0x38>)
 810ed74:	4c0d      	ldr	r4, [pc, #52]	; (810edac <__libc_init_array+0x3c>)
 810ed76:	1b64      	subs	r4, r4, r5
 810ed78:	10a4      	asrs	r4, r4, #2
 810ed7a:	2600      	movs	r6, #0
 810ed7c:	42a6      	cmp	r6, r4
 810ed7e:	d109      	bne.n	810ed94 <__libc_init_array+0x24>
 810ed80:	4d0b      	ldr	r5, [pc, #44]	; (810edb0 <__libc_init_array+0x40>)
 810ed82:	4c0c      	ldr	r4, [pc, #48]	; (810edb4 <__libc_init_array+0x44>)
 810ed84:	f000 ffd6 	bl	810fd34 <_init>
 810ed88:	1b64      	subs	r4, r4, r5
 810ed8a:	10a4      	asrs	r4, r4, #2
 810ed8c:	2600      	movs	r6, #0
 810ed8e:	42a6      	cmp	r6, r4
 810ed90:	d105      	bne.n	810ed9e <__libc_init_array+0x2e>
 810ed92:	bd70      	pop	{r4, r5, r6, pc}
 810ed94:	f855 3b04 	ldr.w	r3, [r5], #4
 810ed98:	4798      	blx	r3
 810ed9a:	3601      	adds	r6, #1
 810ed9c:	e7ee      	b.n	810ed7c <__libc_init_array+0xc>
 810ed9e:	f855 3b04 	ldr.w	r3, [r5], #4
 810eda2:	4798      	blx	r3
 810eda4:	3601      	adds	r6, #1
 810eda6:	e7f2      	b.n	810ed8e <__libc_init_array+0x1e>
 810eda8:	0810fe68 	.word	0x0810fe68
 810edac:	0810fe68 	.word	0x0810fe68
 810edb0:	0810fe68 	.word	0x0810fe68
 810edb4:	0810fe6c 	.word	0x0810fe6c

0810edb8 <memset>:
 810edb8:	4402      	add	r2, r0
 810edba:	4603      	mov	r3, r0
 810edbc:	4293      	cmp	r3, r2
 810edbe:	d100      	bne.n	810edc2 <memset+0xa>
 810edc0:	4770      	bx	lr
 810edc2:	f803 1b01 	strb.w	r1, [r3], #1
 810edc6:	e7f9      	b.n	810edbc <memset+0x4>

0810edc8 <pow>:
 810edc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810edcc:	ec59 8b10 	vmov	r8, r9, d0
 810edd0:	ec57 6b11 	vmov	r6, r7, d1
 810edd4:	f000 f8a8 	bl	810ef28 <__ieee754_pow>
 810edd8:	4b4e      	ldr	r3, [pc, #312]	; (810ef14 <pow+0x14c>)
 810edda:	f993 3000 	ldrsb.w	r3, [r3]
 810edde:	3301      	adds	r3, #1
 810ede0:	ec55 4b10 	vmov	r4, r5, d0
 810ede4:	d015      	beq.n	810ee12 <pow+0x4a>
 810ede6:	4632      	mov	r2, r6
 810ede8:	463b      	mov	r3, r7
 810edea:	4630      	mov	r0, r6
 810edec:	4639      	mov	r1, r7
 810edee:	f7f1 fec9 	bl	8100b84 <__aeabi_dcmpun>
 810edf2:	b970      	cbnz	r0, 810ee12 <pow+0x4a>
 810edf4:	4642      	mov	r2, r8
 810edf6:	464b      	mov	r3, r9
 810edf8:	4640      	mov	r0, r8
 810edfa:	4649      	mov	r1, r9
 810edfc:	f7f1 fec2 	bl	8100b84 <__aeabi_dcmpun>
 810ee00:	2200      	movs	r2, #0
 810ee02:	2300      	movs	r3, #0
 810ee04:	b148      	cbz	r0, 810ee1a <pow+0x52>
 810ee06:	4630      	mov	r0, r6
 810ee08:	4639      	mov	r1, r7
 810ee0a:	f7f1 fe89 	bl	8100b20 <__aeabi_dcmpeq>
 810ee0e:	2800      	cmp	r0, #0
 810ee10:	d17d      	bne.n	810ef0e <pow+0x146>
 810ee12:	ec45 4b10 	vmov	d0, r4, r5
 810ee16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ee1a:	4640      	mov	r0, r8
 810ee1c:	4649      	mov	r1, r9
 810ee1e:	f7f1 fe7f 	bl	8100b20 <__aeabi_dcmpeq>
 810ee22:	b1e0      	cbz	r0, 810ee5e <pow+0x96>
 810ee24:	2200      	movs	r2, #0
 810ee26:	2300      	movs	r3, #0
 810ee28:	4630      	mov	r0, r6
 810ee2a:	4639      	mov	r1, r7
 810ee2c:	f7f1 fe78 	bl	8100b20 <__aeabi_dcmpeq>
 810ee30:	2800      	cmp	r0, #0
 810ee32:	d16c      	bne.n	810ef0e <pow+0x146>
 810ee34:	ec47 6b10 	vmov	d0, r6, r7
 810ee38:	f000 fe55 	bl	810fae6 <finite>
 810ee3c:	2800      	cmp	r0, #0
 810ee3e:	d0e8      	beq.n	810ee12 <pow+0x4a>
 810ee40:	2200      	movs	r2, #0
 810ee42:	2300      	movs	r3, #0
 810ee44:	4630      	mov	r0, r6
 810ee46:	4639      	mov	r1, r7
 810ee48:	f7f1 fe74 	bl	8100b34 <__aeabi_dcmplt>
 810ee4c:	2800      	cmp	r0, #0
 810ee4e:	d0e0      	beq.n	810ee12 <pow+0x4a>
 810ee50:	f7ff ff88 	bl	810ed64 <__errno>
 810ee54:	2321      	movs	r3, #33	; 0x21
 810ee56:	6003      	str	r3, [r0, #0]
 810ee58:	2400      	movs	r4, #0
 810ee5a:	4d2f      	ldr	r5, [pc, #188]	; (810ef18 <pow+0x150>)
 810ee5c:	e7d9      	b.n	810ee12 <pow+0x4a>
 810ee5e:	ec45 4b10 	vmov	d0, r4, r5
 810ee62:	f000 fe40 	bl	810fae6 <finite>
 810ee66:	bbb8      	cbnz	r0, 810eed8 <pow+0x110>
 810ee68:	ec49 8b10 	vmov	d0, r8, r9
 810ee6c:	f000 fe3b 	bl	810fae6 <finite>
 810ee70:	b390      	cbz	r0, 810eed8 <pow+0x110>
 810ee72:	ec47 6b10 	vmov	d0, r6, r7
 810ee76:	f000 fe36 	bl	810fae6 <finite>
 810ee7a:	b368      	cbz	r0, 810eed8 <pow+0x110>
 810ee7c:	4622      	mov	r2, r4
 810ee7e:	462b      	mov	r3, r5
 810ee80:	4620      	mov	r0, r4
 810ee82:	4629      	mov	r1, r5
 810ee84:	f7f1 fe7e 	bl	8100b84 <__aeabi_dcmpun>
 810ee88:	b160      	cbz	r0, 810eea4 <pow+0xdc>
 810ee8a:	f7ff ff6b 	bl	810ed64 <__errno>
 810ee8e:	2321      	movs	r3, #33	; 0x21
 810ee90:	6003      	str	r3, [r0, #0]
 810ee92:	2200      	movs	r2, #0
 810ee94:	2300      	movs	r3, #0
 810ee96:	4610      	mov	r0, r2
 810ee98:	4619      	mov	r1, r3
 810ee9a:	f7f1 fd03 	bl	81008a4 <__aeabi_ddiv>
 810ee9e:	4604      	mov	r4, r0
 810eea0:	460d      	mov	r5, r1
 810eea2:	e7b6      	b.n	810ee12 <pow+0x4a>
 810eea4:	f7ff ff5e 	bl	810ed64 <__errno>
 810eea8:	2322      	movs	r3, #34	; 0x22
 810eeaa:	6003      	str	r3, [r0, #0]
 810eeac:	2200      	movs	r2, #0
 810eeae:	2300      	movs	r3, #0
 810eeb0:	4640      	mov	r0, r8
 810eeb2:	4649      	mov	r1, r9
 810eeb4:	f7f1 fe3e 	bl	8100b34 <__aeabi_dcmplt>
 810eeb8:	2400      	movs	r4, #0
 810eeba:	b158      	cbz	r0, 810eed4 <pow+0x10c>
 810eebc:	ec47 6b10 	vmov	d0, r6, r7
 810eec0:	f000 fe26 	bl	810fb10 <rint>
 810eec4:	4632      	mov	r2, r6
 810eec6:	ec51 0b10 	vmov	r0, r1, d0
 810eeca:	463b      	mov	r3, r7
 810eecc:	f7f1 fe28 	bl	8100b20 <__aeabi_dcmpeq>
 810eed0:	2800      	cmp	r0, #0
 810eed2:	d0c2      	beq.n	810ee5a <pow+0x92>
 810eed4:	4d11      	ldr	r5, [pc, #68]	; (810ef1c <pow+0x154>)
 810eed6:	e79c      	b.n	810ee12 <pow+0x4a>
 810eed8:	2200      	movs	r2, #0
 810eeda:	2300      	movs	r3, #0
 810eedc:	4620      	mov	r0, r4
 810eede:	4629      	mov	r1, r5
 810eee0:	f7f1 fe1e 	bl	8100b20 <__aeabi_dcmpeq>
 810eee4:	2800      	cmp	r0, #0
 810eee6:	d094      	beq.n	810ee12 <pow+0x4a>
 810eee8:	ec49 8b10 	vmov	d0, r8, r9
 810eeec:	f000 fdfb 	bl	810fae6 <finite>
 810eef0:	2800      	cmp	r0, #0
 810eef2:	d08e      	beq.n	810ee12 <pow+0x4a>
 810eef4:	ec47 6b10 	vmov	d0, r6, r7
 810eef8:	f000 fdf5 	bl	810fae6 <finite>
 810eefc:	2800      	cmp	r0, #0
 810eefe:	d088      	beq.n	810ee12 <pow+0x4a>
 810ef00:	f7ff ff30 	bl	810ed64 <__errno>
 810ef04:	2322      	movs	r3, #34	; 0x22
 810ef06:	6003      	str	r3, [r0, #0]
 810ef08:	2400      	movs	r4, #0
 810ef0a:	2500      	movs	r5, #0
 810ef0c:	e781      	b.n	810ee12 <pow+0x4a>
 810ef0e:	4d04      	ldr	r5, [pc, #16]	; (810ef20 <pow+0x158>)
 810ef10:	2400      	movs	r4, #0
 810ef12:	e77e      	b.n	810ee12 <pow+0x4a>
 810ef14:	10000088 	.word	0x10000088
 810ef18:	fff00000 	.word	0xfff00000
 810ef1c:	7ff00000 	.word	0x7ff00000
 810ef20:	3ff00000 	.word	0x3ff00000
 810ef24:	00000000 	.word	0x00000000

0810ef28 <__ieee754_pow>:
 810ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ef2c:	ed2d 8b06 	vpush	{d8-d10}
 810ef30:	b08d      	sub	sp, #52	; 0x34
 810ef32:	ed8d 1b02 	vstr	d1, [sp, #8]
 810ef36:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 810ef3a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 810ef3e:	ea56 0100 	orrs.w	r1, r6, r0
 810ef42:	ec53 2b10 	vmov	r2, r3, d0
 810ef46:	f000 84d1 	beq.w	810f8ec <__ieee754_pow+0x9c4>
 810ef4a:	497f      	ldr	r1, [pc, #508]	; (810f148 <__ieee754_pow+0x220>)
 810ef4c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 810ef50:	428c      	cmp	r4, r1
 810ef52:	ee10 8a10 	vmov	r8, s0
 810ef56:	4699      	mov	r9, r3
 810ef58:	dc09      	bgt.n	810ef6e <__ieee754_pow+0x46>
 810ef5a:	d103      	bne.n	810ef64 <__ieee754_pow+0x3c>
 810ef5c:	b97a      	cbnz	r2, 810ef7e <__ieee754_pow+0x56>
 810ef5e:	42a6      	cmp	r6, r4
 810ef60:	dd02      	ble.n	810ef68 <__ieee754_pow+0x40>
 810ef62:	e00c      	b.n	810ef7e <__ieee754_pow+0x56>
 810ef64:	428e      	cmp	r6, r1
 810ef66:	dc02      	bgt.n	810ef6e <__ieee754_pow+0x46>
 810ef68:	428e      	cmp	r6, r1
 810ef6a:	d110      	bne.n	810ef8e <__ieee754_pow+0x66>
 810ef6c:	b178      	cbz	r0, 810ef8e <__ieee754_pow+0x66>
 810ef6e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810ef72:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810ef76:	ea54 0308 	orrs.w	r3, r4, r8
 810ef7a:	f000 84b7 	beq.w	810f8ec <__ieee754_pow+0x9c4>
 810ef7e:	4873      	ldr	r0, [pc, #460]	; (810f14c <__ieee754_pow+0x224>)
 810ef80:	b00d      	add	sp, #52	; 0x34
 810ef82:	ecbd 8b06 	vpop	{d8-d10}
 810ef86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ef8a:	f000 bdb9 	b.w	810fb00 <nan>
 810ef8e:	f1b9 0f00 	cmp.w	r9, #0
 810ef92:	da36      	bge.n	810f002 <__ieee754_pow+0xda>
 810ef94:	496e      	ldr	r1, [pc, #440]	; (810f150 <__ieee754_pow+0x228>)
 810ef96:	428e      	cmp	r6, r1
 810ef98:	dc51      	bgt.n	810f03e <__ieee754_pow+0x116>
 810ef9a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 810ef9e:	428e      	cmp	r6, r1
 810efa0:	f340 84af 	ble.w	810f902 <__ieee754_pow+0x9da>
 810efa4:	1531      	asrs	r1, r6, #20
 810efa6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810efaa:	2914      	cmp	r1, #20
 810efac:	dd0f      	ble.n	810efce <__ieee754_pow+0xa6>
 810efae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 810efb2:	fa20 fc01 	lsr.w	ip, r0, r1
 810efb6:	fa0c f101 	lsl.w	r1, ip, r1
 810efba:	4281      	cmp	r1, r0
 810efbc:	f040 84a1 	bne.w	810f902 <__ieee754_pow+0x9da>
 810efc0:	f00c 0c01 	and.w	ip, ip, #1
 810efc4:	f1cc 0102 	rsb	r1, ip, #2
 810efc8:	9100      	str	r1, [sp, #0]
 810efca:	b180      	cbz	r0, 810efee <__ieee754_pow+0xc6>
 810efcc:	e059      	b.n	810f082 <__ieee754_pow+0x15a>
 810efce:	2800      	cmp	r0, #0
 810efd0:	d155      	bne.n	810f07e <__ieee754_pow+0x156>
 810efd2:	f1c1 0114 	rsb	r1, r1, #20
 810efd6:	fa46 fc01 	asr.w	ip, r6, r1
 810efda:	fa0c f101 	lsl.w	r1, ip, r1
 810efde:	42b1      	cmp	r1, r6
 810efe0:	f040 848c 	bne.w	810f8fc <__ieee754_pow+0x9d4>
 810efe4:	f00c 0c01 	and.w	ip, ip, #1
 810efe8:	f1cc 0102 	rsb	r1, ip, #2
 810efec:	9100      	str	r1, [sp, #0]
 810efee:	4959      	ldr	r1, [pc, #356]	; (810f154 <__ieee754_pow+0x22c>)
 810eff0:	428e      	cmp	r6, r1
 810eff2:	d12d      	bne.n	810f050 <__ieee754_pow+0x128>
 810eff4:	2f00      	cmp	r7, #0
 810eff6:	da79      	bge.n	810f0ec <__ieee754_pow+0x1c4>
 810eff8:	4956      	ldr	r1, [pc, #344]	; (810f154 <__ieee754_pow+0x22c>)
 810effa:	2000      	movs	r0, #0
 810effc:	f7f1 fc52 	bl	81008a4 <__aeabi_ddiv>
 810f000:	e016      	b.n	810f030 <__ieee754_pow+0x108>
 810f002:	2100      	movs	r1, #0
 810f004:	9100      	str	r1, [sp, #0]
 810f006:	2800      	cmp	r0, #0
 810f008:	d13b      	bne.n	810f082 <__ieee754_pow+0x15a>
 810f00a:	494f      	ldr	r1, [pc, #316]	; (810f148 <__ieee754_pow+0x220>)
 810f00c:	428e      	cmp	r6, r1
 810f00e:	d1ee      	bne.n	810efee <__ieee754_pow+0xc6>
 810f010:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810f014:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810f018:	ea53 0308 	orrs.w	r3, r3, r8
 810f01c:	f000 8466 	beq.w	810f8ec <__ieee754_pow+0x9c4>
 810f020:	4b4d      	ldr	r3, [pc, #308]	; (810f158 <__ieee754_pow+0x230>)
 810f022:	429c      	cmp	r4, r3
 810f024:	dd0d      	ble.n	810f042 <__ieee754_pow+0x11a>
 810f026:	2f00      	cmp	r7, #0
 810f028:	f280 8464 	bge.w	810f8f4 <__ieee754_pow+0x9cc>
 810f02c:	2000      	movs	r0, #0
 810f02e:	2100      	movs	r1, #0
 810f030:	ec41 0b10 	vmov	d0, r0, r1
 810f034:	b00d      	add	sp, #52	; 0x34
 810f036:	ecbd 8b06 	vpop	{d8-d10}
 810f03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f03e:	2102      	movs	r1, #2
 810f040:	e7e0      	b.n	810f004 <__ieee754_pow+0xdc>
 810f042:	2f00      	cmp	r7, #0
 810f044:	daf2      	bge.n	810f02c <__ieee754_pow+0x104>
 810f046:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 810f04a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810f04e:	e7ef      	b.n	810f030 <__ieee754_pow+0x108>
 810f050:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 810f054:	d104      	bne.n	810f060 <__ieee754_pow+0x138>
 810f056:	4610      	mov	r0, r2
 810f058:	4619      	mov	r1, r3
 810f05a:	f7f1 faf9 	bl	8100650 <__aeabi_dmul>
 810f05e:	e7e7      	b.n	810f030 <__ieee754_pow+0x108>
 810f060:	493e      	ldr	r1, [pc, #248]	; (810f15c <__ieee754_pow+0x234>)
 810f062:	428f      	cmp	r7, r1
 810f064:	d10d      	bne.n	810f082 <__ieee754_pow+0x15a>
 810f066:	f1b9 0f00 	cmp.w	r9, #0
 810f06a:	db0a      	blt.n	810f082 <__ieee754_pow+0x15a>
 810f06c:	ec43 2b10 	vmov	d0, r2, r3
 810f070:	b00d      	add	sp, #52	; 0x34
 810f072:	ecbd 8b06 	vpop	{d8-d10}
 810f076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f07a:	f000 bc77 	b.w	810f96c <__ieee754_sqrt>
 810f07e:	2100      	movs	r1, #0
 810f080:	9100      	str	r1, [sp, #0]
 810f082:	ec43 2b10 	vmov	d0, r2, r3
 810f086:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810f08a:	f000 fd23 	bl	810fad4 <fabs>
 810f08e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f092:	ec51 0b10 	vmov	r0, r1, d0
 810f096:	f1b8 0f00 	cmp.w	r8, #0
 810f09a:	d12a      	bne.n	810f0f2 <__ieee754_pow+0x1ca>
 810f09c:	b12c      	cbz	r4, 810f0aa <__ieee754_pow+0x182>
 810f09e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 810f154 <__ieee754_pow+0x22c>
 810f0a2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 810f0a6:	45e6      	cmp	lr, ip
 810f0a8:	d123      	bne.n	810f0f2 <__ieee754_pow+0x1ca>
 810f0aa:	2f00      	cmp	r7, #0
 810f0ac:	da05      	bge.n	810f0ba <__ieee754_pow+0x192>
 810f0ae:	4602      	mov	r2, r0
 810f0b0:	460b      	mov	r3, r1
 810f0b2:	2000      	movs	r0, #0
 810f0b4:	4927      	ldr	r1, [pc, #156]	; (810f154 <__ieee754_pow+0x22c>)
 810f0b6:	f7f1 fbf5 	bl	81008a4 <__aeabi_ddiv>
 810f0ba:	f1b9 0f00 	cmp.w	r9, #0
 810f0be:	dab7      	bge.n	810f030 <__ieee754_pow+0x108>
 810f0c0:	9b00      	ldr	r3, [sp, #0]
 810f0c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810f0c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810f0ca:	4323      	orrs	r3, r4
 810f0cc:	d108      	bne.n	810f0e0 <__ieee754_pow+0x1b8>
 810f0ce:	4602      	mov	r2, r0
 810f0d0:	460b      	mov	r3, r1
 810f0d2:	4610      	mov	r0, r2
 810f0d4:	4619      	mov	r1, r3
 810f0d6:	f7f1 f903 	bl	81002e0 <__aeabi_dsub>
 810f0da:	4602      	mov	r2, r0
 810f0dc:	460b      	mov	r3, r1
 810f0de:	e78d      	b.n	810effc <__ieee754_pow+0xd4>
 810f0e0:	9b00      	ldr	r3, [sp, #0]
 810f0e2:	2b01      	cmp	r3, #1
 810f0e4:	d1a4      	bne.n	810f030 <__ieee754_pow+0x108>
 810f0e6:	4602      	mov	r2, r0
 810f0e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810f0ec:	4610      	mov	r0, r2
 810f0ee:	4619      	mov	r1, r3
 810f0f0:	e79e      	b.n	810f030 <__ieee754_pow+0x108>
 810f0f2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 810f0f6:	f10c 35ff 	add.w	r5, ip, #4294967295
 810f0fa:	950a      	str	r5, [sp, #40]	; 0x28
 810f0fc:	9d00      	ldr	r5, [sp, #0]
 810f0fe:	46ac      	mov	ip, r5
 810f100:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 810f102:	ea5c 0505 	orrs.w	r5, ip, r5
 810f106:	d0e4      	beq.n	810f0d2 <__ieee754_pow+0x1aa>
 810f108:	4b15      	ldr	r3, [pc, #84]	; (810f160 <__ieee754_pow+0x238>)
 810f10a:	429e      	cmp	r6, r3
 810f10c:	f340 80fc 	ble.w	810f308 <__ieee754_pow+0x3e0>
 810f110:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810f114:	429e      	cmp	r6, r3
 810f116:	4b10      	ldr	r3, [pc, #64]	; (810f158 <__ieee754_pow+0x230>)
 810f118:	dd07      	ble.n	810f12a <__ieee754_pow+0x202>
 810f11a:	429c      	cmp	r4, r3
 810f11c:	dc0a      	bgt.n	810f134 <__ieee754_pow+0x20c>
 810f11e:	2f00      	cmp	r7, #0
 810f120:	da84      	bge.n	810f02c <__ieee754_pow+0x104>
 810f122:	a307      	add	r3, pc, #28	; (adr r3, 810f140 <__ieee754_pow+0x218>)
 810f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f128:	e795      	b.n	810f056 <__ieee754_pow+0x12e>
 810f12a:	429c      	cmp	r4, r3
 810f12c:	dbf7      	blt.n	810f11e <__ieee754_pow+0x1f6>
 810f12e:	4b09      	ldr	r3, [pc, #36]	; (810f154 <__ieee754_pow+0x22c>)
 810f130:	429c      	cmp	r4, r3
 810f132:	dd17      	ble.n	810f164 <__ieee754_pow+0x23c>
 810f134:	2f00      	cmp	r7, #0
 810f136:	dcf4      	bgt.n	810f122 <__ieee754_pow+0x1fa>
 810f138:	e778      	b.n	810f02c <__ieee754_pow+0x104>
 810f13a:	bf00      	nop
 810f13c:	f3af 8000 	nop.w
 810f140:	8800759c 	.word	0x8800759c
 810f144:	7e37e43c 	.word	0x7e37e43c
 810f148:	7ff00000 	.word	0x7ff00000
 810f14c:	0810fe1c 	.word	0x0810fe1c
 810f150:	433fffff 	.word	0x433fffff
 810f154:	3ff00000 	.word	0x3ff00000
 810f158:	3fefffff 	.word	0x3fefffff
 810f15c:	3fe00000 	.word	0x3fe00000
 810f160:	41e00000 	.word	0x41e00000
 810f164:	4b64      	ldr	r3, [pc, #400]	; (810f2f8 <__ieee754_pow+0x3d0>)
 810f166:	2200      	movs	r2, #0
 810f168:	f7f1 f8ba 	bl	81002e0 <__aeabi_dsub>
 810f16c:	a356      	add	r3, pc, #344	; (adr r3, 810f2c8 <__ieee754_pow+0x3a0>)
 810f16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f172:	4604      	mov	r4, r0
 810f174:	460d      	mov	r5, r1
 810f176:	f7f1 fa6b 	bl	8100650 <__aeabi_dmul>
 810f17a:	a355      	add	r3, pc, #340	; (adr r3, 810f2d0 <__ieee754_pow+0x3a8>)
 810f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f180:	4606      	mov	r6, r0
 810f182:	460f      	mov	r7, r1
 810f184:	4620      	mov	r0, r4
 810f186:	4629      	mov	r1, r5
 810f188:	f7f1 fa62 	bl	8100650 <__aeabi_dmul>
 810f18c:	4b5b      	ldr	r3, [pc, #364]	; (810f2fc <__ieee754_pow+0x3d4>)
 810f18e:	4682      	mov	sl, r0
 810f190:	468b      	mov	fp, r1
 810f192:	2200      	movs	r2, #0
 810f194:	4620      	mov	r0, r4
 810f196:	4629      	mov	r1, r5
 810f198:	f7f1 fa5a 	bl	8100650 <__aeabi_dmul>
 810f19c:	4602      	mov	r2, r0
 810f19e:	460b      	mov	r3, r1
 810f1a0:	a14d      	add	r1, pc, #308	; (adr r1, 810f2d8 <__ieee754_pow+0x3b0>)
 810f1a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 810f1a6:	f7f1 f89b 	bl	81002e0 <__aeabi_dsub>
 810f1aa:	4622      	mov	r2, r4
 810f1ac:	462b      	mov	r3, r5
 810f1ae:	f7f1 fa4f 	bl	8100650 <__aeabi_dmul>
 810f1b2:	4602      	mov	r2, r0
 810f1b4:	460b      	mov	r3, r1
 810f1b6:	2000      	movs	r0, #0
 810f1b8:	4951      	ldr	r1, [pc, #324]	; (810f300 <__ieee754_pow+0x3d8>)
 810f1ba:	f7f1 f891 	bl	81002e0 <__aeabi_dsub>
 810f1be:	4622      	mov	r2, r4
 810f1c0:	4680      	mov	r8, r0
 810f1c2:	4689      	mov	r9, r1
 810f1c4:	462b      	mov	r3, r5
 810f1c6:	4620      	mov	r0, r4
 810f1c8:	4629      	mov	r1, r5
 810f1ca:	f7f1 fa41 	bl	8100650 <__aeabi_dmul>
 810f1ce:	4602      	mov	r2, r0
 810f1d0:	460b      	mov	r3, r1
 810f1d2:	4640      	mov	r0, r8
 810f1d4:	4649      	mov	r1, r9
 810f1d6:	f7f1 fa3b 	bl	8100650 <__aeabi_dmul>
 810f1da:	a341      	add	r3, pc, #260	; (adr r3, 810f2e0 <__ieee754_pow+0x3b8>)
 810f1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f1e0:	f7f1 fa36 	bl	8100650 <__aeabi_dmul>
 810f1e4:	4602      	mov	r2, r0
 810f1e6:	460b      	mov	r3, r1
 810f1e8:	4650      	mov	r0, sl
 810f1ea:	4659      	mov	r1, fp
 810f1ec:	f7f1 f878 	bl	81002e0 <__aeabi_dsub>
 810f1f0:	4602      	mov	r2, r0
 810f1f2:	460b      	mov	r3, r1
 810f1f4:	4680      	mov	r8, r0
 810f1f6:	4689      	mov	r9, r1
 810f1f8:	4630      	mov	r0, r6
 810f1fa:	4639      	mov	r1, r7
 810f1fc:	f7f1 f872 	bl	81002e4 <__adddf3>
 810f200:	2400      	movs	r4, #0
 810f202:	4632      	mov	r2, r6
 810f204:	463b      	mov	r3, r7
 810f206:	4620      	mov	r0, r4
 810f208:	460d      	mov	r5, r1
 810f20a:	f7f1 f869 	bl	81002e0 <__aeabi_dsub>
 810f20e:	4602      	mov	r2, r0
 810f210:	460b      	mov	r3, r1
 810f212:	4640      	mov	r0, r8
 810f214:	4649      	mov	r1, r9
 810f216:	f7f1 f863 	bl	81002e0 <__aeabi_dsub>
 810f21a:	9b00      	ldr	r3, [sp, #0]
 810f21c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810f21e:	3b01      	subs	r3, #1
 810f220:	4313      	orrs	r3, r2
 810f222:	4682      	mov	sl, r0
 810f224:	468b      	mov	fp, r1
 810f226:	f040 81f1 	bne.w	810f60c <__ieee754_pow+0x6e4>
 810f22a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 810f2e8 <__ieee754_pow+0x3c0>
 810f22e:	eeb0 8a47 	vmov.f32	s16, s14
 810f232:	eef0 8a67 	vmov.f32	s17, s15
 810f236:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810f23a:	2600      	movs	r6, #0
 810f23c:	4632      	mov	r2, r6
 810f23e:	463b      	mov	r3, r7
 810f240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810f244:	f7f1 f84c 	bl	81002e0 <__aeabi_dsub>
 810f248:	4622      	mov	r2, r4
 810f24a:	462b      	mov	r3, r5
 810f24c:	f7f1 fa00 	bl	8100650 <__aeabi_dmul>
 810f250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810f254:	4680      	mov	r8, r0
 810f256:	4689      	mov	r9, r1
 810f258:	4650      	mov	r0, sl
 810f25a:	4659      	mov	r1, fp
 810f25c:	f7f1 f9f8 	bl	8100650 <__aeabi_dmul>
 810f260:	4602      	mov	r2, r0
 810f262:	460b      	mov	r3, r1
 810f264:	4640      	mov	r0, r8
 810f266:	4649      	mov	r1, r9
 810f268:	f7f1 f83c 	bl	81002e4 <__adddf3>
 810f26c:	4632      	mov	r2, r6
 810f26e:	463b      	mov	r3, r7
 810f270:	4680      	mov	r8, r0
 810f272:	4689      	mov	r9, r1
 810f274:	4620      	mov	r0, r4
 810f276:	4629      	mov	r1, r5
 810f278:	f7f1 f9ea 	bl	8100650 <__aeabi_dmul>
 810f27c:	460b      	mov	r3, r1
 810f27e:	4604      	mov	r4, r0
 810f280:	460d      	mov	r5, r1
 810f282:	4602      	mov	r2, r0
 810f284:	4649      	mov	r1, r9
 810f286:	4640      	mov	r0, r8
 810f288:	f7f1 f82c 	bl	81002e4 <__adddf3>
 810f28c:	4b1d      	ldr	r3, [pc, #116]	; (810f304 <__ieee754_pow+0x3dc>)
 810f28e:	4299      	cmp	r1, r3
 810f290:	ec45 4b19 	vmov	d9, r4, r5
 810f294:	4606      	mov	r6, r0
 810f296:	460f      	mov	r7, r1
 810f298:	468b      	mov	fp, r1
 810f29a:	f340 82fe 	ble.w	810f89a <__ieee754_pow+0x972>
 810f29e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810f2a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810f2a6:	4303      	orrs	r3, r0
 810f2a8:	f000 81f0 	beq.w	810f68c <__ieee754_pow+0x764>
 810f2ac:	a310      	add	r3, pc, #64	; (adr r3, 810f2f0 <__ieee754_pow+0x3c8>)
 810f2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f2b2:	ec51 0b18 	vmov	r0, r1, d8
 810f2b6:	f7f1 f9cb 	bl	8100650 <__aeabi_dmul>
 810f2ba:	a30d      	add	r3, pc, #52	; (adr r3, 810f2f0 <__ieee754_pow+0x3c8>)
 810f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f2c0:	e6cb      	b.n	810f05a <__ieee754_pow+0x132>
 810f2c2:	bf00      	nop
 810f2c4:	f3af 8000 	nop.w
 810f2c8:	60000000 	.word	0x60000000
 810f2cc:	3ff71547 	.word	0x3ff71547
 810f2d0:	f85ddf44 	.word	0xf85ddf44
 810f2d4:	3e54ae0b 	.word	0x3e54ae0b
 810f2d8:	55555555 	.word	0x55555555
 810f2dc:	3fd55555 	.word	0x3fd55555
 810f2e0:	652b82fe 	.word	0x652b82fe
 810f2e4:	3ff71547 	.word	0x3ff71547
 810f2e8:	00000000 	.word	0x00000000
 810f2ec:	bff00000 	.word	0xbff00000
 810f2f0:	8800759c 	.word	0x8800759c
 810f2f4:	7e37e43c 	.word	0x7e37e43c
 810f2f8:	3ff00000 	.word	0x3ff00000
 810f2fc:	3fd00000 	.word	0x3fd00000
 810f300:	3fe00000 	.word	0x3fe00000
 810f304:	408fffff 	.word	0x408fffff
 810f308:	4bd7      	ldr	r3, [pc, #860]	; (810f668 <__ieee754_pow+0x740>)
 810f30a:	ea03 0309 	and.w	r3, r3, r9
 810f30e:	2200      	movs	r2, #0
 810f310:	b92b      	cbnz	r3, 810f31e <__ieee754_pow+0x3f6>
 810f312:	4bd6      	ldr	r3, [pc, #856]	; (810f66c <__ieee754_pow+0x744>)
 810f314:	f7f1 f99c 	bl	8100650 <__aeabi_dmul>
 810f318:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810f31c:	460c      	mov	r4, r1
 810f31e:	1523      	asrs	r3, r4, #20
 810f320:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810f324:	4413      	add	r3, r2
 810f326:	9309      	str	r3, [sp, #36]	; 0x24
 810f328:	4bd1      	ldr	r3, [pc, #836]	; (810f670 <__ieee754_pow+0x748>)
 810f32a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810f32e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810f332:	429c      	cmp	r4, r3
 810f334:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810f338:	dd08      	ble.n	810f34c <__ieee754_pow+0x424>
 810f33a:	4bce      	ldr	r3, [pc, #824]	; (810f674 <__ieee754_pow+0x74c>)
 810f33c:	429c      	cmp	r4, r3
 810f33e:	f340 8163 	ble.w	810f608 <__ieee754_pow+0x6e0>
 810f342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f344:	3301      	adds	r3, #1
 810f346:	9309      	str	r3, [sp, #36]	; 0x24
 810f348:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810f34c:	2400      	movs	r4, #0
 810f34e:	00e3      	lsls	r3, r4, #3
 810f350:	930b      	str	r3, [sp, #44]	; 0x2c
 810f352:	4bc9      	ldr	r3, [pc, #804]	; (810f678 <__ieee754_pow+0x750>)
 810f354:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810f358:	ed93 7b00 	vldr	d7, [r3]
 810f35c:	4629      	mov	r1, r5
 810f35e:	ec53 2b17 	vmov	r2, r3, d7
 810f362:	eeb0 8a47 	vmov.f32	s16, s14
 810f366:	eef0 8a67 	vmov.f32	s17, s15
 810f36a:	4682      	mov	sl, r0
 810f36c:	f7f0 ffb8 	bl	81002e0 <__aeabi_dsub>
 810f370:	4652      	mov	r2, sl
 810f372:	4606      	mov	r6, r0
 810f374:	460f      	mov	r7, r1
 810f376:	462b      	mov	r3, r5
 810f378:	ec51 0b18 	vmov	r0, r1, d8
 810f37c:	f7f0 ffb2 	bl	81002e4 <__adddf3>
 810f380:	4602      	mov	r2, r0
 810f382:	460b      	mov	r3, r1
 810f384:	2000      	movs	r0, #0
 810f386:	49bd      	ldr	r1, [pc, #756]	; (810f67c <__ieee754_pow+0x754>)
 810f388:	f7f1 fa8c 	bl	81008a4 <__aeabi_ddiv>
 810f38c:	ec41 0b19 	vmov	d9, r0, r1
 810f390:	4602      	mov	r2, r0
 810f392:	460b      	mov	r3, r1
 810f394:	4630      	mov	r0, r6
 810f396:	4639      	mov	r1, r7
 810f398:	f7f1 f95a 	bl	8100650 <__aeabi_dmul>
 810f39c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810f3a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810f3a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810f3a8:	2300      	movs	r3, #0
 810f3aa:	9304      	str	r3, [sp, #16]
 810f3ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 810f3b0:	46ab      	mov	fp, r5
 810f3b2:	106d      	asrs	r5, r5, #1
 810f3b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810f3b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810f3bc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810f3c0:	2200      	movs	r2, #0
 810f3c2:	4640      	mov	r0, r8
 810f3c4:	4649      	mov	r1, r9
 810f3c6:	4614      	mov	r4, r2
 810f3c8:	461d      	mov	r5, r3
 810f3ca:	f7f1 f941 	bl	8100650 <__aeabi_dmul>
 810f3ce:	4602      	mov	r2, r0
 810f3d0:	460b      	mov	r3, r1
 810f3d2:	4630      	mov	r0, r6
 810f3d4:	4639      	mov	r1, r7
 810f3d6:	f7f0 ff83 	bl	81002e0 <__aeabi_dsub>
 810f3da:	ec53 2b18 	vmov	r2, r3, d8
 810f3de:	4606      	mov	r6, r0
 810f3e0:	460f      	mov	r7, r1
 810f3e2:	4620      	mov	r0, r4
 810f3e4:	4629      	mov	r1, r5
 810f3e6:	f7f0 ff7b 	bl	81002e0 <__aeabi_dsub>
 810f3ea:	4602      	mov	r2, r0
 810f3ec:	460b      	mov	r3, r1
 810f3ee:	4650      	mov	r0, sl
 810f3f0:	4659      	mov	r1, fp
 810f3f2:	f7f0 ff75 	bl	81002e0 <__aeabi_dsub>
 810f3f6:	4642      	mov	r2, r8
 810f3f8:	464b      	mov	r3, r9
 810f3fa:	f7f1 f929 	bl	8100650 <__aeabi_dmul>
 810f3fe:	4602      	mov	r2, r0
 810f400:	460b      	mov	r3, r1
 810f402:	4630      	mov	r0, r6
 810f404:	4639      	mov	r1, r7
 810f406:	f7f0 ff6b 	bl	81002e0 <__aeabi_dsub>
 810f40a:	ec53 2b19 	vmov	r2, r3, d9
 810f40e:	f7f1 f91f 	bl	8100650 <__aeabi_dmul>
 810f412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810f416:	ec41 0b18 	vmov	d8, r0, r1
 810f41a:	4610      	mov	r0, r2
 810f41c:	4619      	mov	r1, r3
 810f41e:	f7f1 f917 	bl	8100650 <__aeabi_dmul>
 810f422:	a37d      	add	r3, pc, #500	; (adr r3, 810f618 <__ieee754_pow+0x6f0>)
 810f424:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f428:	4604      	mov	r4, r0
 810f42a:	460d      	mov	r5, r1
 810f42c:	f7f1 f910 	bl	8100650 <__aeabi_dmul>
 810f430:	a37b      	add	r3, pc, #492	; (adr r3, 810f620 <__ieee754_pow+0x6f8>)
 810f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f436:	f7f0 ff55 	bl	81002e4 <__adddf3>
 810f43a:	4622      	mov	r2, r4
 810f43c:	462b      	mov	r3, r5
 810f43e:	f7f1 f907 	bl	8100650 <__aeabi_dmul>
 810f442:	a379      	add	r3, pc, #484	; (adr r3, 810f628 <__ieee754_pow+0x700>)
 810f444:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f448:	f7f0 ff4c 	bl	81002e4 <__adddf3>
 810f44c:	4622      	mov	r2, r4
 810f44e:	462b      	mov	r3, r5
 810f450:	f7f1 f8fe 	bl	8100650 <__aeabi_dmul>
 810f454:	a376      	add	r3, pc, #472	; (adr r3, 810f630 <__ieee754_pow+0x708>)
 810f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f45a:	f7f0 ff43 	bl	81002e4 <__adddf3>
 810f45e:	4622      	mov	r2, r4
 810f460:	462b      	mov	r3, r5
 810f462:	f7f1 f8f5 	bl	8100650 <__aeabi_dmul>
 810f466:	a374      	add	r3, pc, #464	; (adr r3, 810f638 <__ieee754_pow+0x710>)
 810f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f46c:	f7f0 ff3a 	bl	81002e4 <__adddf3>
 810f470:	4622      	mov	r2, r4
 810f472:	462b      	mov	r3, r5
 810f474:	f7f1 f8ec 	bl	8100650 <__aeabi_dmul>
 810f478:	a371      	add	r3, pc, #452	; (adr r3, 810f640 <__ieee754_pow+0x718>)
 810f47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f47e:	f7f0 ff31 	bl	81002e4 <__adddf3>
 810f482:	4622      	mov	r2, r4
 810f484:	4606      	mov	r6, r0
 810f486:	460f      	mov	r7, r1
 810f488:	462b      	mov	r3, r5
 810f48a:	4620      	mov	r0, r4
 810f48c:	4629      	mov	r1, r5
 810f48e:	f7f1 f8df 	bl	8100650 <__aeabi_dmul>
 810f492:	4602      	mov	r2, r0
 810f494:	460b      	mov	r3, r1
 810f496:	4630      	mov	r0, r6
 810f498:	4639      	mov	r1, r7
 810f49a:	f7f1 f8d9 	bl	8100650 <__aeabi_dmul>
 810f49e:	4642      	mov	r2, r8
 810f4a0:	4604      	mov	r4, r0
 810f4a2:	460d      	mov	r5, r1
 810f4a4:	464b      	mov	r3, r9
 810f4a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f4aa:	f7f0 ff1b 	bl	81002e4 <__adddf3>
 810f4ae:	ec53 2b18 	vmov	r2, r3, d8
 810f4b2:	f7f1 f8cd 	bl	8100650 <__aeabi_dmul>
 810f4b6:	4622      	mov	r2, r4
 810f4b8:	462b      	mov	r3, r5
 810f4ba:	f7f0 ff13 	bl	81002e4 <__adddf3>
 810f4be:	4642      	mov	r2, r8
 810f4c0:	4682      	mov	sl, r0
 810f4c2:	468b      	mov	fp, r1
 810f4c4:	464b      	mov	r3, r9
 810f4c6:	4640      	mov	r0, r8
 810f4c8:	4649      	mov	r1, r9
 810f4ca:	f7f1 f8c1 	bl	8100650 <__aeabi_dmul>
 810f4ce:	4b6c      	ldr	r3, [pc, #432]	; (810f680 <__ieee754_pow+0x758>)
 810f4d0:	2200      	movs	r2, #0
 810f4d2:	4606      	mov	r6, r0
 810f4d4:	460f      	mov	r7, r1
 810f4d6:	f7f0 ff05 	bl	81002e4 <__adddf3>
 810f4da:	4652      	mov	r2, sl
 810f4dc:	465b      	mov	r3, fp
 810f4de:	f7f0 ff01 	bl	81002e4 <__adddf3>
 810f4e2:	9c04      	ldr	r4, [sp, #16]
 810f4e4:	460d      	mov	r5, r1
 810f4e6:	4622      	mov	r2, r4
 810f4e8:	460b      	mov	r3, r1
 810f4ea:	4640      	mov	r0, r8
 810f4ec:	4649      	mov	r1, r9
 810f4ee:	f7f1 f8af 	bl	8100650 <__aeabi_dmul>
 810f4f2:	4b63      	ldr	r3, [pc, #396]	; (810f680 <__ieee754_pow+0x758>)
 810f4f4:	4680      	mov	r8, r0
 810f4f6:	4689      	mov	r9, r1
 810f4f8:	2200      	movs	r2, #0
 810f4fa:	4620      	mov	r0, r4
 810f4fc:	4629      	mov	r1, r5
 810f4fe:	f7f0 feef 	bl	81002e0 <__aeabi_dsub>
 810f502:	4632      	mov	r2, r6
 810f504:	463b      	mov	r3, r7
 810f506:	f7f0 feeb 	bl	81002e0 <__aeabi_dsub>
 810f50a:	4602      	mov	r2, r0
 810f50c:	460b      	mov	r3, r1
 810f50e:	4650      	mov	r0, sl
 810f510:	4659      	mov	r1, fp
 810f512:	f7f0 fee5 	bl	81002e0 <__aeabi_dsub>
 810f516:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810f51a:	f7f1 f899 	bl	8100650 <__aeabi_dmul>
 810f51e:	4622      	mov	r2, r4
 810f520:	4606      	mov	r6, r0
 810f522:	460f      	mov	r7, r1
 810f524:	462b      	mov	r3, r5
 810f526:	ec51 0b18 	vmov	r0, r1, d8
 810f52a:	f7f1 f891 	bl	8100650 <__aeabi_dmul>
 810f52e:	4602      	mov	r2, r0
 810f530:	460b      	mov	r3, r1
 810f532:	4630      	mov	r0, r6
 810f534:	4639      	mov	r1, r7
 810f536:	f7f0 fed5 	bl	81002e4 <__adddf3>
 810f53a:	4606      	mov	r6, r0
 810f53c:	460f      	mov	r7, r1
 810f53e:	4602      	mov	r2, r0
 810f540:	460b      	mov	r3, r1
 810f542:	4640      	mov	r0, r8
 810f544:	4649      	mov	r1, r9
 810f546:	f7f0 fecd 	bl	81002e4 <__adddf3>
 810f54a:	9c04      	ldr	r4, [sp, #16]
 810f54c:	a33e      	add	r3, pc, #248	; (adr r3, 810f648 <__ieee754_pow+0x720>)
 810f54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f552:	4620      	mov	r0, r4
 810f554:	460d      	mov	r5, r1
 810f556:	f7f1 f87b 	bl	8100650 <__aeabi_dmul>
 810f55a:	4642      	mov	r2, r8
 810f55c:	ec41 0b18 	vmov	d8, r0, r1
 810f560:	464b      	mov	r3, r9
 810f562:	4620      	mov	r0, r4
 810f564:	4629      	mov	r1, r5
 810f566:	f7f0 febb 	bl	81002e0 <__aeabi_dsub>
 810f56a:	4602      	mov	r2, r0
 810f56c:	460b      	mov	r3, r1
 810f56e:	4630      	mov	r0, r6
 810f570:	4639      	mov	r1, r7
 810f572:	f7f0 feb5 	bl	81002e0 <__aeabi_dsub>
 810f576:	a336      	add	r3, pc, #216	; (adr r3, 810f650 <__ieee754_pow+0x728>)
 810f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f57c:	f7f1 f868 	bl	8100650 <__aeabi_dmul>
 810f580:	a335      	add	r3, pc, #212	; (adr r3, 810f658 <__ieee754_pow+0x730>)
 810f582:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f586:	4606      	mov	r6, r0
 810f588:	460f      	mov	r7, r1
 810f58a:	4620      	mov	r0, r4
 810f58c:	4629      	mov	r1, r5
 810f58e:	f7f1 f85f 	bl	8100650 <__aeabi_dmul>
 810f592:	4602      	mov	r2, r0
 810f594:	460b      	mov	r3, r1
 810f596:	4630      	mov	r0, r6
 810f598:	4639      	mov	r1, r7
 810f59a:	f7f0 fea3 	bl	81002e4 <__adddf3>
 810f59e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810f5a0:	4b38      	ldr	r3, [pc, #224]	; (810f684 <__ieee754_pow+0x75c>)
 810f5a2:	4413      	add	r3, r2
 810f5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f5a8:	f7f0 fe9c 	bl	81002e4 <__adddf3>
 810f5ac:	4682      	mov	sl, r0
 810f5ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 810f5b0:	468b      	mov	fp, r1
 810f5b2:	f7f0 ffe3 	bl	810057c <__aeabi_i2d>
 810f5b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810f5b8:	4b33      	ldr	r3, [pc, #204]	; (810f688 <__ieee754_pow+0x760>)
 810f5ba:	4413      	add	r3, r2
 810f5bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 810f5c0:	4606      	mov	r6, r0
 810f5c2:	460f      	mov	r7, r1
 810f5c4:	4652      	mov	r2, sl
 810f5c6:	465b      	mov	r3, fp
 810f5c8:	ec51 0b18 	vmov	r0, r1, d8
 810f5cc:	f7f0 fe8a 	bl	81002e4 <__adddf3>
 810f5d0:	4642      	mov	r2, r8
 810f5d2:	464b      	mov	r3, r9
 810f5d4:	f7f0 fe86 	bl	81002e4 <__adddf3>
 810f5d8:	4632      	mov	r2, r6
 810f5da:	463b      	mov	r3, r7
 810f5dc:	f7f0 fe82 	bl	81002e4 <__adddf3>
 810f5e0:	9c04      	ldr	r4, [sp, #16]
 810f5e2:	4632      	mov	r2, r6
 810f5e4:	463b      	mov	r3, r7
 810f5e6:	4620      	mov	r0, r4
 810f5e8:	460d      	mov	r5, r1
 810f5ea:	f7f0 fe79 	bl	81002e0 <__aeabi_dsub>
 810f5ee:	4642      	mov	r2, r8
 810f5f0:	464b      	mov	r3, r9
 810f5f2:	f7f0 fe75 	bl	81002e0 <__aeabi_dsub>
 810f5f6:	ec53 2b18 	vmov	r2, r3, d8
 810f5fa:	f7f0 fe71 	bl	81002e0 <__aeabi_dsub>
 810f5fe:	4602      	mov	r2, r0
 810f600:	460b      	mov	r3, r1
 810f602:	4650      	mov	r0, sl
 810f604:	4659      	mov	r1, fp
 810f606:	e606      	b.n	810f216 <__ieee754_pow+0x2ee>
 810f608:	2401      	movs	r4, #1
 810f60a:	e6a0      	b.n	810f34e <__ieee754_pow+0x426>
 810f60c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 810f660 <__ieee754_pow+0x738>
 810f610:	e60d      	b.n	810f22e <__ieee754_pow+0x306>
 810f612:	bf00      	nop
 810f614:	f3af 8000 	nop.w
 810f618:	4a454eef 	.word	0x4a454eef
 810f61c:	3fca7e28 	.word	0x3fca7e28
 810f620:	93c9db65 	.word	0x93c9db65
 810f624:	3fcd864a 	.word	0x3fcd864a
 810f628:	a91d4101 	.word	0xa91d4101
 810f62c:	3fd17460 	.word	0x3fd17460
 810f630:	518f264d 	.word	0x518f264d
 810f634:	3fd55555 	.word	0x3fd55555
 810f638:	db6fabff 	.word	0xdb6fabff
 810f63c:	3fdb6db6 	.word	0x3fdb6db6
 810f640:	33333303 	.word	0x33333303
 810f644:	3fe33333 	.word	0x3fe33333
 810f648:	e0000000 	.word	0xe0000000
 810f64c:	3feec709 	.word	0x3feec709
 810f650:	dc3a03fd 	.word	0xdc3a03fd
 810f654:	3feec709 	.word	0x3feec709
 810f658:	145b01f5 	.word	0x145b01f5
 810f65c:	be3e2fe0 	.word	0xbe3e2fe0
 810f660:	00000000 	.word	0x00000000
 810f664:	3ff00000 	.word	0x3ff00000
 810f668:	7ff00000 	.word	0x7ff00000
 810f66c:	43400000 	.word	0x43400000
 810f670:	0003988e 	.word	0x0003988e
 810f674:	000bb679 	.word	0x000bb679
 810f678:	0810fe20 	.word	0x0810fe20
 810f67c:	3ff00000 	.word	0x3ff00000
 810f680:	40080000 	.word	0x40080000
 810f684:	0810fe40 	.word	0x0810fe40
 810f688:	0810fe30 	.word	0x0810fe30
 810f68c:	a3b5      	add	r3, pc, #724	; (adr r3, 810f964 <__ieee754_pow+0xa3c>)
 810f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f692:	4640      	mov	r0, r8
 810f694:	4649      	mov	r1, r9
 810f696:	f7f0 fe25 	bl	81002e4 <__adddf3>
 810f69a:	4622      	mov	r2, r4
 810f69c:	ec41 0b1a 	vmov	d10, r0, r1
 810f6a0:	462b      	mov	r3, r5
 810f6a2:	4630      	mov	r0, r6
 810f6a4:	4639      	mov	r1, r7
 810f6a6:	f7f0 fe1b 	bl	81002e0 <__aeabi_dsub>
 810f6aa:	4602      	mov	r2, r0
 810f6ac:	460b      	mov	r3, r1
 810f6ae:	ec51 0b1a 	vmov	r0, r1, d10
 810f6b2:	f7f1 fa5d 	bl	8100b70 <__aeabi_dcmpgt>
 810f6b6:	2800      	cmp	r0, #0
 810f6b8:	f47f adf8 	bne.w	810f2ac <__ieee754_pow+0x384>
 810f6bc:	4aa4      	ldr	r2, [pc, #656]	; (810f950 <__ieee754_pow+0xa28>)
 810f6be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810f6c2:	4293      	cmp	r3, r2
 810f6c4:	f340 810b 	ble.w	810f8de <__ieee754_pow+0x9b6>
 810f6c8:	151b      	asrs	r3, r3, #20
 810f6ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810f6ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810f6d2:	fa4a f303 	asr.w	r3, sl, r3
 810f6d6:	445b      	add	r3, fp
 810f6d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810f6dc:	4e9d      	ldr	r6, [pc, #628]	; (810f954 <__ieee754_pow+0xa2c>)
 810f6de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810f6e2:	4116      	asrs	r6, r2
 810f6e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810f6e8:	2000      	movs	r0, #0
 810f6ea:	ea23 0106 	bic.w	r1, r3, r6
 810f6ee:	f1c2 0214 	rsb	r2, r2, #20
 810f6f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810f6f6:	fa4a fa02 	asr.w	sl, sl, r2
 810f6fa:	f1bb 0f00 	cmp.w	fp, #0
 810f6fe:	4602      	mov	r2, r0
 810f700:	460b      	mov	r3, r1
 810f702:	4620      	mov	r0, r4
 810f704:	4629      	mov	r1, r5
 810f706:	bfb8      	it	lt
 810f708:	f1ca 0a00 	rsblt	sl, sl, #0
 810f70c:	f7f0 fde8 	bl	81002e0 <__aeabi_dsub>
 810f710:	ec41 0b19 	vmov	d9, r0, r1
 810f714:	4642      	mov	r2, r8
 810f716:	464b      	mov	r3, r9
 810f718:	ec51 0b19 	vmov	r0, r1, d9
 810f71c:	f7f0 fde2 	bl	81002e4 <__adddf3>
 810f720:	2400      	movs	r4, #0
 810f722:	a379      	add	r3, pc, #484	; (adr r3, 810f908 <__ieee754_pow+0x9e0>)
 810f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f728:	4620      	mov	r0, r4
 810f72a:	460d      	mov	r5, r1
 810f72c:	f7f0 ff90 	bl	8100650 <__aeabi_dmul>
 810f730:	ec53 2b19 	vmov	r2, r3, d9
 810f734:	4606      	mov	r6, r0
 810f736:	460f      	mov	r7, r1
 810f738:	4620      	mov	r0, r4
 810f73a:	4629      	mov	r1, r5
 810f73c:	f7f0 fdd0 	bl	81002e0 <__aeabi_dsub>
 810f740:	4602      	mov	r2, r0
 810f742:	460b      	mov	r3, r1
 810f744:	4640      	mov	r0, r8
 810f746:	4649      	mov	r1, r9
 810f748:	f7f0 fdca 	bl	81002e0 <__aeabi_dsub>
 810f74c:	a370      	add	r3, pc, #448	; (adr r3, 810f910 <__ieee754_pow+0x9e8>)
 810f74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f752:	f7f0 ff7d 	bl	8100650 <__aeabi_dmul>
 810f756:	a370      	add	r3, pc, #448	; (adr r3, 810f918 <__ieee754_pow+0x9f0>)
 810f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f75c:	4680      	mov	r8, r0
 810f75e:	4689      	mov	r9, r1
 810f760:	4620      	mov	r0, r4
 810f762:	4629      	mov	r1, r5
 810f764:	f7f0 ff74 	bl	8100650 <__aeabi_dmul>
 810f768:	4602      	mov	r2, r0
 810f76a:	460b      	mov	r3, r1
 810f76c:	4640      	mov	r0, r8
 810f76e:	4649      	mov	r1, r9
 810f770:	f7f0 fdb8 	bl	81002e4 <__adddf3>
 810f774:	4604      	mov	r4, r0
 810f776:	460d      	mov	r5, r1
 810f778:	4602      	mov	r2, r0
 810f77a:	460b      	mov	r3, r1
 810f77c:	4630      	mov	r0, r6
 810f77e:	4639      	mov	r1, r7
 810f780:	f7f0 fdb0 	bl	81002e4 <__adddf3>
 810f784:	4632      	mov	r2, r6
 810f786:	463b      	mov	r3, r7
 810f788:	4680      	mov	r8, r0
 810f78a:	4689      	mov	r9, r1
 810f78c:	f7f0 fda8 	bl	81002e0 <__aeabi_dsub>
 810f790:	4602      	mov	r2, r0
 810f792:	460b      	mov	r3, r1
 810f794:	4620      	mov	r0, r4
 810f796:	4629      	mov	r1, r5
 810f798:	f7f0 fda2 	bl	81002e0 <__aeabi_dsub>
 810f79c:	4642      	mov	r2, r8
 810f79e:	4606      	mov	r6, r0
 810f7a0:	460f      	mov	r7, r1
 810f7a2:	464b      	mov	r3, r9
 810f7a4:	4640      	mov	r0, r8
 810f7a6:	4649      	mov	r1, r9
 810f7a8:	f7f0 ff52 	bl	8100650 <__aeabi_dmul>
 810f7ac:	a35c      	add	r3, pc, #368	; (adr r3, 810f920 <__ieee754_pow+0x9f8>)
 810f7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f7b2:	4604      	mov	r4, r0
 810f7b4:	460d      	mov	r5, r1
 810f7b6:	f7f0 ff4b 	bl	8100650 <__aeabi_dmul>
 810f7ba:	a35b      	add	r3, pc, #364	; (adr r3, 810f928 <__ieee754_pow+0xa00>)
 810f7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f7c0:	f7f0 fd8e 	bl	81002e0 <__aeabi_dsub>
 810f7c4:	4622      	mov	r2, r4
 810f7c6:	462b      	mov	r3, r5
 810f7c8:	f7f0 ff42 	bl	8100650 <__aeabi_dmul>
 810f7cc:	a358      	add	r3, pc, #352	; (adr r3, 810f930 <__ieee754_pow+0xa08>)
 810f7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f7d2:	f7f0 fd87 	bl	81002e4 <__adddf3>
 810f7d6:	4622      	mov	r2, r4
 810f7d8:	462b      	mov	r3, r5
 810f7da:	f7f0 ff39 	bl	8100650 <__aeabi_dmul>
 810f7de:	a356      	add	r3, pc, #344	; (adr r3, 810f938 <__ieee754_pow+0xa10>)
 810f7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f7e4:	f7f0 fd7c 	bl	81002e0 <__aeabi_dsub>
 810f7e8:	4622      	mov	r2, r4
 810f7ea:	462b      	mov	r3, r5
 810f7ec:	f7f0 ff30 	bl	8100650 <__aeabi_dmul>
 810f7f0:	a353      	add	r3, pc, #332	; (adr r3, 810f940 <__ieee754_pow+0xa18>)
 810f7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f7f6:	f7f0 fd75 	bl	81002e4 <__adddf3>
 810f7fa:	4622      	mov	r2, r4
 810f7fc:	462b      	mov	r3, r5
 810f7fe:	f7f0 ff27 	bl	8100650 <__aeabi_dmul>
 810f802:	4602      	mov	r2, r0
 810f804:	460b      	mov	r3, r1
 810f806:	4640      	mov	r0, r8
 810f808:	4649      	mov	r1, r9
 810f80a:	f7f0 fd69 	bl	81002e0 <__aeabi_dsub>
 810f80e:	4604      	mov	r4, r0
 810f810:	460d      	mov	r5, r1
 810f812:	4602      	mov	r2, r0
 810f814:	460b      	mov	r3, r1
 810f816:	4640      	mov	r0, r8
 810f818:	4649      	mov	r1, r9
 810f81a:	f7f0 ff19 	bl	8100650 <__aeabi_dmul>
 810f81e:	2200      	movs	r2, #0
 810f820:	ec41 0b19 	vmov	d9, r0, r1
 810f824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810f828:	4620      	mov	r0, r4
 810f82a:	4629      	mov	r1, r5
 810f82c:	f7f0 fd58 	bl	81002e0 <__aeabi_dsub>
 810f830:	4602      	mov	r2, r0
 810f832:	460b      	mov	r3, r1
 810f834:	ec51 0b19 	vmov	r0, r1, d9
 810f838:	f7f1 f834 	bl	81008a4 <__aeabi_ddiv>
 810f83c:	4632      	mov	r2, r6
 810f83e:	4604      	mov	r4, r0
 810f840:	460d      	mov	r5, r1
 810f842:	463b      	mov	r3, r7
 810f844:	4640      	mov	r0, r8
 810f846:	4649      	mov	r1, r9
 810f848:	f7f0 ff02 	bl	8100650 <__aeabi_dmul>
 810f84c:	4632      	mov	r2, r6
 810f84e:	463b      	mov	r3, r7
 810f850:	f7f0 fd48 	bl	81002e4 <__adddf3>
 810f854:	4602      	mov	r2, r0
 810f856:	460b      	mov	r3, r1
 810f858:	4620      	mov	r0, r4
 810f85a:	4629      	mov	r1, r5
 810f85c:	f7f0 fd40 	bl	81002e0 <__aeabi_dsub>
 810f860:	4642      	mov	r2, r8
 810f862:	464b      	mov	r3, r9
 810f864:	f7f0 fd3c 	bl	81002e0 <__aeabi_dsub>
 810f868:	460b      	mov	r3, r1
 810f86a:	4602      	mov	r2, r0
 810f86c:	493a      	ldr	r1, [pc, #232]	; (810f958 <__ieee754_pow+0xa30>)
 810f86e:	2000      	movs	r0, #0
 810f870:	f7f0 fd36 	bl	81002e0 <__aeabi_dsub>
 810f874:	e9cd 0100 	strd	r0, r1, [sp]
 810f878:	9b01      	ldr	r3, [sp, #4]
 810f87a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810f87e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810f882:	da2f      	bge.n	810f8e4 <__ieee754_pow+0x9bc>
 810f884:	4650      	mov	r0, sl
 810f886:	ed9d 0b00 	vldr	d0, [sp]
 810f88a:	f000 f9cd 	bl	810fc28 <scalbn>
 810f88e:	ec51 0b10 	vmov	r0, r1, d0
 810f892:	ec53 2b18 	vmov	r2, r3, d8
 810f896:	f7ff bbe0 	b.w	810f05a <__ieee754_pow+0x132>
 810f89a:	4b30      	ldr	r3, [pc, #192]	; (810f95c <__ieee754_pow+0xa34>)
 810f89c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810f8a0:	429e      	cmp	r6, r3
 810f8a2:	f77f af0b 	ble.w	810f6bc <__ieee754_pow+0x794>
 810f8a6:	4b2e      	ldr	r3, [pc, #184]	; (810f960 <__ieee754_pow+0xa38>)
 810f8a8:	440b      	add	r3, r1
 810f8aa:	4303      	orrs	r3, r0
 810f8ac:	d00b      	beq.n	810f8c6 <__ieee754_pow+0x99e>
 810f8ae:	a326      	add	r3, pc, #152	; (adr r3, 810f948 <__ieee754_pow+0xa20>)
 810f8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f8b4:	ec51 0b18 	vmov	r0, r1, d8
 810f8b8:	f7f0 feca 	bl	8100650 <__aeabi_dmul>
 810f8bc:	a322      	add	r3, pc, #136	; (adr r3, 810f948 <__ieee754_pow+0xa20>)
 810f8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f8c2:	f7ff bbca 	b.w	810f05a <__ieee754_pow+0x132>
 810f8c6:	4622      	mov	r2, r4
 810f8c8:	462b      	mov	r3, r5
 810f8ca:	f7f0 fd09 	bl	81002e0 <__aeabi_dsub>
 810f8ce:	4642      	mov	r2, r8
 810f8d0:	464b      	mov	r3, r9
 810f8d2:	f7f1 f943 	bl	8100b5c <__aeabi_dcmpge>
 810f8d6:	2800      	cmp	r0, #0
 810f8d8:	f43f aef0 	beq.w	810f6bc <__ieee754_pow+0x794>
 810f8dc:	e7e7      	b.n	810f8ae <__ieee754_pow+0x986>
 810f8de:	f04f 0a00 	mov.w	sl, #0
 810f8e2:	e717      	b.n	810f714 <__ieee754_pow+0x7ec>
 810f8e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 810f8e8:	4619      	mov	r1, r3
 810f8ea:	e7d2      	b.n	810f892 <__ieee754_pow+0x96a>
 810f8ec:	491a      	ldr	r1, [pc, #104]	; (810f958 <__ieee754_pow+0xa30>)
 810f8ee:	2000      	movs	r0, #0
 810f8f0:	f7ff bb9e 	b.w	810f030 <__ieee754_pow+0x108>
 810f8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810f8f8:	f7ff bb9a 	b.w	810f030 <__ieee754_pow+0x108>
 810f8fc:	9000      	str	r0, [sp, #0]
 810f8fe:	f7ff bb76 	b.w	810efee <__ieee754_pow+0xc6>
 810f902:	2100      	movs	r1, #0
 810f904:	f7ff bb60 	b.w	810efc8 <__ieee754_pow+0xa0>
 810f908:	00000000 	.word	0x00000000
 810f90c:	3fe62e43 	.word	0x3fe62e43
 810f910:	fefa39ef 	.word	0xfefa39ef
 810f914:	3fe62e42 	.word	0x3fe62e42
 810f918:	0ca86c39 	.word	0x0ca86c39
 810f91c:	be205c61 	.word	0xbe205c61
 810f920:	72bea4d0 	.word	0x72bea4d0
 810f924:	3e663769 	.word	0x3e663769
 810f928:	c5d26bf1 	.word	0xc5d26bf1
 810f92c:	3ebbbd41 	.word	0x3ebbbd41
 810f930:	af25de2c 	.word	0xaf25de2c
 810f934:	3f11566a 	.word	0x3f11566a
 810f938:	16bebd93 	.word	0x16bebd93
 810f93c:	3f66c16c 	.word	0x3f66c16c
 810f940:	5555553e 	.word	0x5555553e
 810f944:	3fc55555 	.word	0x3fc55555
 810f948:	c2f8f359 	.word	0xc2f8f359
 810f94c:	01a56e1f 	.word	0x01a56e1f
 810f950:	3fe00000 	.word	0x3fe00000
 810f954:	000fffff 	.word	0x000fffff
 810f958:	3ff00000 	.word	0x3ff00000
 810f95c:	4090cbff 	.word	0x4090cbff
 810f960:	3f6f3400 	.word	0x3f6f3400
 810f964:	652b82fe 	.word	0x652b82fe
 810f968:	3c971547 	.word	0x3c971547

0810f96c <__ieee754_sqrt>:
 810f96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f970:	ec55 4b10 	vmov	r4, r5, d0
 810f974:	4e56      	ldr	r6, [pc, #344]	; (810fad0 <__ieee754_sqrt+0x164>)
 810f976:	43ae      	bics	r6, r5
 810f978:	ee10 0a10 	vmov	r0, s0
 810f97c:	ee10 3a10 	vmov	r3, s0
 810f980:	4629      	mov	r1, r5
 810f982:	462a      	mov	r2, r5
 810f984:	d110      	bne.n	810f9a8 <__ieee754_sqrt+0x3c>
 810f986:	ee10 2a10 	vmov	r2, s0
 810f98a:	462b      	mov	r3, r5
 810f98c:	f7f0 fe60 	bl	8100650 <__aeabi_dmul>
 810f990:	4602      	mov	r2, r0
 810f992:	460b      	mov	r3, r1
 810f994:	4620      	mov	r0, r4
 810f996:	4629      	mov	r1, r5
 810f998:	f7f0 fca4 	bl	81002e4 <__adddf3>
 810f99c:	4604      	mov	r4, r0
 810f99e:	460d      	mov	r5, r1
 810f9a0:	ec45 4b10 	vmov	d0, r4, r5
 810f9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f9a8:	2d00      	cmp	r5, #0
 810f9aa:	dc10      	bgt.n	810f9ce <__ieee754_sqrt+0x62>
 810f9ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810f9b0:	4330      	orrs	r0, r6
 810f9b2:	d0f5      	beq.n	810f9a0 <__ieee754_sqrt+0x34>
 810f9b4:	b15d      	cbz	r5, 810f9ce <__ieee754_sqrt+0x62>
 810f9b6:	ee10 2a10 	vmov	r2, s0
 810f9ba:	462b      	mov	r3, r5
 810f9bc:	ee10 0a10 	vmov	r0, s0
 810f9c0:	f7f0 fc8e 	bl	81002e0 <__aeabi_dsub>
 810f9c4:	4602      	mov	r2, r0
 810f9c6:	460b      	mov	r3, r1
 810f9c8:	f7f0 ff6c 	bl	81008a4 <__aeabi_ddiv>
 810f9cc:	e7e6      	b.n	810f99c <__ieee754_sqrt+0x30>
 810f9ce:	1509      	asrs	r1, r1, #20
 810f9d0:	d076      	beq.n	810fac0 <__ieee754_sqrt+0x154>
 810f9d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810f9d6:	07ce      	lsls	r6, r1, #31
 810f9d8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810f9dc:	bf5e      	ittt	pl
 810f9de:	0fda      	lsrpl	r2, r3, #31
 810f9e0:	005b      	lslpl	r3, r3, #1
 810f9e2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810f9e6:	0fda      	lsrs	r2, r3, #31
 810f9e8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810f9ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810f9f0:	2000      	movs	r0, #0
 810f9f2:	106d      	asrs	r5, r5, #1
 810f9f4:	005b      	lsls	r3, r3, #1
 810f9f6:	f04f 0e16 	mov.w	lr, #22
 810f9fa:	4684      	mov	ip, r0
 810f9fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810fa00:	eb0c 0401 	add.w	r4, ip, r1
 810fa04:	4294      	cmp	r4, r2
 810fa06:	bfde      	ittt	le
 810fa08:	1b12      	suble	r2, r2, r4
 810fa0a:	eb04 0c01 	addle.w	ip, r4, r1
 810fa0e:	1840      	addle	r0, r0, r1
 810fa10:	0052      	lsls	r2, r2, #1
 810fa12:	f1be 0e01 	subs.w	lr, lr, #1
 810fa16:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810fa1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810fa1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810fa22:	d1ed      	bne.n	810fa00 <__ieee754_sqrt+0x94>
 810fa24:	4671      	mov	r1, lr
 810fa26:	2720      	movs	r7, #32
 810fa28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810fa2c:	4562      	cmp	r2, ip
 810fa2e:	eb04 060e 	add.w	r6, r4, lr
 810fa32:	dc02      	bgt.n	810fa3a <__ieee754_sqrt+0xce>
 810fa34:	d113      	bne.n	810fa5e <__ieee754_sqrt+0xf2>
 810fa36:	429e      	cmp	r6, r3
 810fa38:	d811      	bhi.n	810fa5e <__ieee754_sqrt+0xf2>
 810fa3a:	2e00      	cmp	r6, #0
 810fa3c:	eb06 0e04 	add.w	lr, r6, r4
 810fa40:	da43      	bge.n	810faca <__ieee754_sqrt+0x15e>
 810fa42:	f1be 0f00 	cmp.w	lr, #0
 810fa46:	db40      	blt.n	810faca <__ieee754_sqrt+0x15e>
 810fa48:	f10c 0801 	add.w	r8, ip, #1
 810fa4c:	eba2 020c 	sub.w	r2, r2, ip
 810fa50:	429e      	cmp	r6, r3
 810fa52:	bf88      	it	hi
 810fa54:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810fa58:	1b9b      	subs	r3, r3, r6
 810fa5a:	4421      	add	r1, r4
 810fa5c:	46c4      	mov	ip, r8
 810fa5e:	0052      	lsls	r2, r2, #1
 810fa60:	3f01      	subs	r7, #1
 810fa62:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810fa66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810fa6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810fa6e:	d1dd      	bne.n	810fa2c <__ieee754_sqrt+0xc0>
 810fa70:	4313      	orrs	r3, r2
 810fa72:	d006      	beq.n	810fa82 <__ieee754_sqrt+0x116>
 810fa74:	1c4c      	adds	r4, r1, #1
 810fa76:	bf13      	iteet	ne
 810fa78:	3101      	addne	r1, #1
 810fa7a:	3001      	addeq	r0, #1
 810fa7c:	4639      	moveq	r1, r7
 810fa7e:	f021 0101 	bicne.w	r1, r1, #1
 810fa82:	1043      	asrs	r3, r0, #1
 810fa84:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810fa88:	0849      	lsrs	r1, r1, #1
 810fa8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810fa8e:	07c2      	lsls	r2, r0, #31
 810fa90:	bf48      	it	mi
 810fa92:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810fa96:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810fa9a:	460c      	mov	r4, r1
 810fa9c:	463d      	mov	r5, r7
 810fa9e:	e77f      	b.n	810f9a0 <__ieee754_sqrt+0x34>
 810faa0:	0ada      	lsrs	r2, r3, #11
 810faa2:	3815      	subs	r0, #21
 810faa4:	055b      	lsls	r3, r3, #21
 810faa6:	2a00      	cmp	r2, #0
 810faa8:	d0fa      	beq.n	810faa0 <__ieee754_sqrt+0x134>
 810faaa:	02d7      	lsls	r7, r2, #11
 810faac:	d50a      	bpl.n	810fac4 <__ieee754_sqrt+0x158>
 810faae:	f1c1 0420 	rsb	r4, r1, #32
 810fab2:	fa23 f404 	lsr.w	r4, r3, r4
 810fab6:	1e4d      	subs	r5, r1, #1
 810fab8:	408b      	lsls	r3, r1
 810faba:	4322      	orrs	r2, r4
 810fabc:	1b41      	subs	r1, r0, r5
 810fabe:	e788      	b.n	810f9d2 <__ieee754_sqrt+0x66>
 810fac0:	4608      	mov	r0, r1
 810fac2:	e7f0      	b.n	810faa6 <__ieee754_sqrt+0x13a>
 810fac4:	0052      	lsls	r2, r2, #1
 810fac6:	3101      	adds	r1, #1
 810fac8:	e7ef      	b.n	810faaa <__ieee754_sqrt+0x13e>
 810faca:	46e0      	mov	r8, ip
 810facc:	e7be      	b.n	810fa4c <__ieee754_sqrt+0xe0>
 810face:	bf00      	nop
 810fad0:	7ff00000 	.word	0x7ff00000

0810fad4 <fabs>:
 810fad4:	ec51 0b10 	vmov	r0, r1, d0
 810fad8:	ee10 2a10 	vmov	r2, s0
 810fadc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810fae0:	ec43 2b10 	vmov	d0, r2, r3
 810fae4:	4770      	bx	lr

0810fae6 <finite>:
 810fae6:	b082      	sub	sp, #8
 810fae8:	ed8d 0b00 	vstr	d0, [sp]
 810faec:	9801      	ldr	r0, [sp, #4]
 810faee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810faf2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810faf6:	0fc0      	lsrs	r0, r0, #31
 810faf8:	b002      	add	sp, #8
 810fafa:	4770      	bx	lr
 810fafc:	0000      	movs	r0, r0
	...

0810fb00 <nan>:
 810fb00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810fb08 <nan+0x8>
 810fb04:	4770      	bx	lr
 810fb06:	bf00      	nop
 810fb08:	00000000 	.word	0x00000000
 810fb0c:	7ff80000 	.word	0x7ff80000

0810fb10 <rint>:
 810fb10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810fb12:	ec51 0b10 	vmov	r0, r1, d0
 810fb16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810fb1a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 810fb1e:	2e13      	cmp	r6, #19
 810fb20:	ee10 4a10 	vmov	r4, s0
 810fb24:	460b      	mov	r3, r1
 810fb26:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 810fb2a:	dc58      	bgt.n	810fbde <rint+0xce>
 810fb2c:	2e00      	cmp	r6, #0
 810fb2e:	da2b      	bge.n	810fb88 <rint+0x78>
 810fb30:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 810fb34:	4302      	orrs	r2, r0
 810fb36:	d023      	beq.n	810fb80 <rint+0x70>
 810fb38:	f3c1 0213 	ubfx	r2, r1, #0, #20
 810fb3c:	4302      	orrs	r2, r0
 810fb3e:	4254      	negs	r4, r2
 810fb40:	4314      	orrs	r4, r2
 810fb42:	0c4b      	lsrs	r3, r1, #17
 810fb44:	0b24      	lsrs	r4, r4, #12
 810fb46:	045b      	lsls	r3, r3, #17
 810fb48:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 810fb4c:	ea44 0103 	orr.w	r1, r4, r3
 810fb50:	4b32      	ldr	r3, [pc, #200]	; (810fc1c <rint+0x10c>)
 810fb52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810fb56:	e9d3 6700 	ldrd	r6, r7, [r3]
 810fb5a:	4602      	mov	r2, r0
 810fb5c:	460b      	mov	r3, r1
 810fb5e:	4630      	mov	r0, r6
 810fb60:	4639      	mov	r1, r7
 810fb62:	f7f0 fbbf 	bl	81002e4 <__adddf3>
 810fb66:	e9cd 0100 	strd	r0, r1, [sp]
 810fb6a:	463b      	mov	r3, r7
 810fb6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810fb70:	4632      	mov	r2, r6
 810fb72:	f7f0 fbb5 	bl	81002e0 <__aeabi_dsub>
 810fb76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810fb7a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 810fb7e:	4639      	mov	r1, r7
 810fb80:	ec41 0b10 	vmov	d0, r0, r1
 810fb84:	b003      	add	sp, #12
 810fb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810fb88:	4a25      	ldr	r2, [pc, #148]	; (810fc20 <rint+0x110>)
 810fb8a:	4132      	asrs	r2, r6
 810fb8c:	ea01 0702 	and.w	r7, r1, r2
 810fb90:	4307      	orrs	r7, r0
 810fb92:	d0f5      	beq.n	810fb80 <rint+0x70>
 810fb94:	0851      	lsrs	r1, r2, #1
 810fb96:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 810fb9a:	4314      	orrs	r4, r2
 810fb9c:	d00c      	beq.n	810fbb8 <rint+0xa8>
 810fb9e:	ea23 0201 	bic.w	r2, r3, r1
 810fba2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810fba6:	2e13      	cmp	r6, #19
 810fba8:	fa43 f606 	asr.w	r6, r3, r6
 810fbac:	bf0c      	ite	eq
 810fbae:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 810fbb2:	2400      	movne	r4, #0
 810fbb4:	ea42 0306 	orr.w	r3, r2, r6
 810fbb8:	4918      	ldr	r1, [pc, #96]	; (810fc1c <rint+0x10c>)
 810fbba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 810fbbe:	4622      	mov	r2, r4
 810fbc0:	e9d5 4500 	ldrd	r4, r5, [r5]
 810fbc4:	4620      	mov	r0, r4
 810fbc6:	4629      	mov	r1, r5
 810fbc8:	f7f0 fb8c 	bl	81002e4 <__adddf3>
 810fbcc:	e9cd 0100 	strd	r0, r1, [sp]
 810fbd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810fbd4:	4622      	mov	r2, r4
 810fbd6:	462b      	mov	r3, r5
 810fbd8:	f7f0 fb82 	bl	81002e0 <__aeabi_dsub>
 810fbdc:	e7d0      	b.n	810fb80 <rint+0x70>
 810fbde:	2e33      	cmp	r6, #51	; 0x33
 810fbe0:	dd07      	ble.n	810fbf2 <rint+0xe2>
 810fbe2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810fbe6:	d1cb      	bne.n	810fb80 <rint+0x70>
 810fbe8:	ee10 2a10 	vmov	r2, s0
 810fbec:	f7f0 fb7a 	bl	81002e4 <__adddf3>
 810fbf0:	e7c6      	b.n	810fb80 <rint+0x70>
 810fbf2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 810fbf6:	f04f 36ff 	mov.w	r6, #4294967295
 810fbfa:	40d6      	lsrs	r6, r2
 810fbfc:	4230      	tst	r0, r6
 810fbfe:	d0bf      	beq.n	810fb80 <rint+0x70>
 810fc00:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 810fc04:	ea4f 0156 	mov.w	r1, r6, lsr #1
 810fc08:	bf1f      	itttt	ne
 810fc0a:	ea24 0101 	bicne.w	r1, r4, r1
 810fc0e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 810fc12:	fa44 f202 	asrne.w	r2, r4, r2
 810fc16:	ea41 0402 	orrne.w	r4, r1, r2
 810fc1a:	e7cd      	b.n	810fbb8 <rint+0xa8>
 810fc1c:	0810fe50 	.word	0x0810fe50
 810fc20:	000fffff 	.word	0x000fffff
 810fc24:	00000000 	.word	0x00000000

0810fc28 <scalbn>:
 810fc28:	b570      	push	{r4, r5, r6, lr}
 810fc2a:	ec55 4b10 	vmov	r4, r5, d0
 810fc2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810fc32:	4606      	mov	r6, r0
 810fc34:	462b      	mov	r3, r5
 810fc36:	b99a      	cbnz	r2, 810fc60 <scalbn+0x38>
 810fc38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810fc3c:	4323      	orrs	r3, r4
 810fc3e:	d036      	beq.n	810fcae <scalbn+0x86>
 810fc40:	4b39      	ldr	r3, [pc, #228]	; (810fd28 <scalbn+0x100>)
 810fc42:	4629      	mov	r1, r5
 810fc44:	ee10 0a10 	vmov	r0, s0
 810fc48:	2200      	movs	r2, #0
 810fc4a:	f7f0 fd01 	bl	8100650 <__aeabi_dmul>
 810fc4e:	4b37      	ldr	r3, [pc, #220]	; (810fd2c <scalbn+0x104>)
 810fc50:	429e      	cmp	r6, r3
 810fc52:	4604      	mov	r4, r0
 810fc54:	460d      	mov	r5, r1
 810fc56:	da10      	bge.n	810fc7a <scalbn+0x52>
 810fc58:	a32b      	add	r3, pc, #172	; (adr r3, 810fd08 <scalbn+0xe0>)
 810fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fc5e:	e03a      	b.n	810fcd6 <scalbn+0xae>
 810fc60:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810fc64:	428a      	cmp	r2, r1
 810fc66:	d10c      	bne.n	810fc82 <scalbn+0x5a>
 810fc68:	ee10 2a10 	vmov	r2, s0
 810fc6c:	4620      	mov	r0, r4
 810fc6e:	4629      	mov	r1, r5
 810fc70:	f7f0 fb38 	bl	81002e4 <__adddf3>
 810fc74:	4604      	mov	r4, r0
 810fc76:	460d      	mov	r5, r1
 810fc78:	e019      	b.n	810fcae <scalbn+0x86>
 810fc7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810fc7e:	460b      	mov	r3, r1
 810fc80:	3a36      	subs	r2, #54	; 0x36
 810fc82:	4432      	add	r2, r6
 810fc84:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810fc88:	428a      	cmp	r2, r1
 810fc8a:	dd08      	ble.n	810fc9e <scalbn+0x76>
 810fc8c:	2d00      	cmp	r5, #0
 810fc8e:	a120      	add	r1, pc, #128	; (adr r1, 810fd10 <scalbn+0xe8>)
 810fc90:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fc94:	da1c      	bge.n	810fcd0 <scalbn+0xa8>
 810fc96:	a120      	add	r1, pc, #128	; (adr r1, 810fd18 <scalbn+0xf0>)
 810fc98:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fc9c:	e018      	b.n	810fcd0 <scalbn+0xa8>
 810fc9e:	2a00      	cmp	r2, #0
 810fca0:	dd08      	ble.n	810fcb4 <scalbn+0x8c>
 810fca2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810fca6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810fcaa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810fcae:	ec45 4b10 	vmov	d0, r4, r5
 810fcb2:	bd70      	pop	{r4, r5, r6, pc}
 810fcb4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810fcb8:	da19      	bge.n	810fcee <scalbn+0xc6>
 810fcba:	f24c 3350 	movw	r3, #50000	; 0xc350
 810fcbe:	429e      	cmp	r6, r3
 810fcc0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810fcc4:	dd0a      	ble.n	810fcdc <scalbn+0xb4>
 810fcc6:	a112      	add	r1, pc, #72	; (adr r1, 810fd10 <scalbn+0xe8>)
 810fcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fccc:	2b00      	cmp	r3, #0
 810fcce:	d1e2      	bne.n	810fc96 <scalbn+0x6e>
 810fcd0:	a30f      	add	r3, pc, #60	; (adr r3, 810fd10 <scalbn+0xe8>)
 810fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810fcd6:	f7f0 fcbb 	bl	8100650 <__aeabi_dmul>
 810fcda:	e7cb      	b.n	810fc74 <scalbn+0x4c>
 810fcdc:	a10a      	add	r1, pc, #40	; (adr r1, 810fd08 <scalbn+0xe0>)
 810fcde:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fce2:	2b00      	cmp	r3, #0
 810fce4:	d0b8      	beq.n	810fc58 <scalbn+0x30>
 810fce6:	a10e      	add	r1, pc, #56	; (adr r1, 810fd20 <scalbn+0xf8>)
 810fce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810fcec:	e7b4      	b.n	810fc58 <scalbn+0x30>
 810fcee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810fcf2:	3236      	adds	r2, #54	; 0x36
 810fcf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810fcf8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810fcfc:	4620      	mov	r0, r4
 810fcfe:	4b0c      	ldr	r3, [pc, #48]	; (810fd30 <scalbn+0x108>)
 810fd00:	2200      	movs	r2, #0
 810fd02:	e7e8      	b.n	810fcd6 <scalbn+0xae>
 810fd04:	f3af 8000 	nop.w
 810fd08:	c2f8f359 	.word	0xc2f8f359
 810fd0c:	01a56e1f 	.word	0x01a56e1f
 810fd10:	8800759c 	.word	0x8800759c
 810fd14:	7e37e43c 	.word	0x7e37e43c
 810fd18:	8800759c 	.word	0x8800759c
 810fd1c:	fe37e43c 	.word	0xfe37e43c
 810fd20:	c2f8f359 	.word	0xc2f8f359
 810fd24:	81a56e1f 	.word	0x81a56e1f
 810fd28:	43500000 	.word	0x43500000
 810fd2c:	ffff3cb0 	.word	0xffff3cb0
 810fd30:	3c900000 	.word	0x3c900000

0810fd34 <_init>:
 810fd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fd36:	bf00      	nop
 810fd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810fd3a:	bc08      	pop	{r3}
 810fd3c:	469e      	mov	lr, r3
 810fd3e:	4770      	bx	lr

0810fd40 <_fini>:
 810fd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fd42:	bf00      	nop
 810fd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810fd46:	bc08      	pop	{r3}
 810fd48:	469e      	mov	lr, r3
 810fd4a:	4770      	bx	lr
