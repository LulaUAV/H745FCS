
baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012920  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08012bb8  08012bb8  00022bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cb4  08012cb4  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08012cb4  08012cb4  00022cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cbc  08012cbc  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cbc  08012cbc  00022cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012cc0  08012cc0  00022cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  24000000  08012cc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d10  240001fc  08012ec0  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  24003f0c  08012ec0  00033f0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004641e  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007528  00000000  00000000  00076648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f0  00000000  00000000  0007db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e78  00000000  00000000  0007fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004049c  00000000  00000000  00081ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f270  00000000  00000000  000c1f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018f1ff  00000000  00000000  000f11e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002803e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c60  00000000  00000000  00280438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001fc 	.word	0x240001fc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08012ba0 	.word	0x08012ba0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000200 	.word	0x24000200
 80002d4:	08012ba0 	.word	0x08012ba0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_DMA_Init+0x6c>)
 800070c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_DMA_Init+0x6c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_DMA_Init+0x6c>)
 800071c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_DMA_Init+0x6c>)
 800072a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <MX_DMA_Init+0x6c>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_DMA_Init+0x6c>)
 800073a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2010      	movs	r0, #16
 800074c:	f001 fa9d 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000750:	2010      	movs	r0, #16
 8000752:	f001 fab4 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2011      	movs	r0, #17
 800075c:	f001 fa95 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000760:	2011      	movs	r0, #17
 8000762:	f001 faac 	bl	8001cbe <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	58024400 	.word	0x58024400

08000774 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_GPIO_Init+0xe4>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	4a35      	ldr	r2, [pc, #212]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000782:	f043 0320 	orr.w	r3, r3, #32
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <MX_GPIO_Init+0xe4>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <MX_GPIO_Init+0xe4>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	4a2e      	ldr	r2, [pc, #184]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	4a26      	ldr	r2, [pc, #152]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007da:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 800084c:	f000 f806 	bl	800085c <GPIO_Port_Config>

}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	58024400 	.word	0x58024400

0800085c <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	4827      	ldr	r0, [pc, #156]	; (8000914 <GPIO_Port_Config+0xb8>)
 8000876:	f003 fe9b 	bl	80045b0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4821      	ldr	r0, [pc, #132]	; (8000914 <GPIO_Port_Config+0xb8>)
 8000890:	f003 fcde 	bl	8004250 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089a:	481e      	ldr	r0, [pc, #120]	; (8000914 <GPIO_Port_Config+0xb8>)
 800089c:	f003 fe88 	bl	80045b0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 80008a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4817      	ldr	r0, [pc, #92]	; (8000914 <GPIO_Port_Config+0xb8>)
 80008b8:	f003 fcca 	bl	8004250 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	4815      	ldr	r0, [pc, #84]	; (8000918 <GPIO_Port_Config+0xbc>)
 80008c4:	f003 fe74 	bl	80045b0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 80008c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <GPIO_Port_Config+0xbc>)
 80008e0:	f003 fcb6 	bl	8004250 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <GPIO_Port_Config+0xbc>)
 80008ec:	f003 fe60 	bl	80045b0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80008f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <GPIO_Port_Config+0xbc>)
 8000908:	f003 fca2 	bl	8004250 <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58021000 	.word	0x58021000
 8000918:	58021400 	.word	0x58021400

0800091c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_I2C2_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_I2C2_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_I2C2_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_I2C2_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_I2C2_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_I2C2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_I2C2_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2C2_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_I2C2_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_I2C2_Init+0x74>)
 8000958:	f003 fe72 	bl	8004640 <HAL_I2C_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000962:	f000 fad7 	bl	8000f14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <MX_I2C2_Init+0x74>)
 800096a:	f004 fd7e 	bl	800546a <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 face 	bl	8000f14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_I2C2_Init+0x74>)
 800097c:	f004 fdc0 	bl	8005500 <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 fac5 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2400023c 	.word	0x2400023c
 8000994:	40005800 	.word	0x40005800
 8000998:	307075b1 	.word	0x307075b1

0800099c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0b8      	sub	sp, #224	; 0xe0
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	22bc      	movs	r2, #188	; 0xbc
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f012 f81f 	bl	8012a00 <memset>
  if(i2cHandle->Instance==I2C2)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a2d      	ldr	r2, [pc, #180]	; (8000a7c <HAL_I2C_MspInit+0xe0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d152      	bne.n	8000a72 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009cc:	2308      	movs	r3, #8
 80009ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 f800 	bl	80079e0 <HAL_RCCEx_PeriphCLKConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009e6:	f000 fa95 	bl	8000f14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <HAL_I2C_MspInit+0xe4>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <HAL_I2C_MspInit+0xe4>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <HAL_I2C_MspInit+0xe4>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a10:	2312      	movs	r3, #18
 8000a12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a22:	2304      	movs	r3, #4
 8000a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4815      	ldr	r0, [pc, #84]	; (8000a84 <HAL_I2C_MspInit+0xe8>)
 8000a30:	f003 fc0e 	bl	8004250 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_I2C_MspInit+0xe4>)
 8000a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a3a:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <HAL_I2C_MspInit+0xe4>)
 8000a3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_I2C_MspInit+0xe4>)
 8000a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2021      	movs	r0, #33	; 0x21
 8000a58:	f001 f917 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000a5c:	2021      	movs	r0, #33	; 0x21
 8000a5e:	f001 f92e 	bl	8001cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2022      	movs	r0, #34	; 0x22
 8000a68:	f001 f90f 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000a6c:	2022      	movs	r0, #34	; 0x22
 8000a6e:	f001 f926 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a72:	bf00      	nop
 8000a74:	37e0      	adds	r7, #224	; 0xe0
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40005800 	.word	0x40005800
 8000a80:	58024400 	.word	0x58024400
 8000a84:	58020400 	.word	0x58020400

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a8e:	f000 f9fb 	bl	8000e88 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a92:	4b5b      	ldr	r3, [pc, #364]	; (8000c00 <main+0x178>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d11b      	bne.n	8000ad6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9e:	f3bf 8f4f 	dsb	sy
}
 8000aa2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aa4:	f3bf 8f6f 	isb	sy
}
 8000aa8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000aaa:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <main+0x178>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab2:	f3bf 8f4f 	dsb	sy
}
 8000ab6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab8:	f3bf 8f6f 	isb	sy
}
 8000abc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000abe:	4b50      	ldr	r3, [pc, #320]	; (8000c00 <main+0x178>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a4f      	ldr	r2, [pc, #316]	; (8000c00 <main+0x178>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aca:	f3bf 8f4f 	dsb	sy
}
 8000ace:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ad0:	f3bf 8f6f 	isb	sy
}
 8000ad4:	e000      	b.n	8000ad8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ad6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ad8:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <main+0x178>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d138      	bne.n	8000b56 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ae4:	4b46      	ldr	r3, [pc, #280]	; (8000c00 <main+0x178>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000aec:	f3bf 8f4f 	dsb	sy
}
 8000af0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000af2:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <main+0x178>)
 8000af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000af8:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	0b5b      	lsrs	r3, r3, #13
 8000afe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b02:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b0c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	015a      	lsls	r2, r3, #5
 8000b12:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b16:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b1c:	4938      	ldr	r1, [pc, #224]	; (8000c00 <main+0x178>)
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1e5a      	subs	r2, r3, #1
 8000b28:	60ba      	str	r2, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1ef      	bne.n	8000b0e <main+0x86>
    } while(sets-- != 0U);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	60fa      	str	r2, [r7, #12]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e5      	bne.n	8000b04 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b38:	f3bf 8f4f 	dsb	sy
}
 8000b3c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <main+0x178>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a2f      	ldr	r2, [pc, #188]	; (8000c00 <main+0x178>)
 8000b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b48:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b4a:	f3bf 8f4f 	dsb	sy
}
 8000b4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b50:	f3bf 8f6f 	isb	sy
}
 8000b54:	e000      	b.n	8000b58 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b56:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b5c:	617b      	str	r3, [r7, #20]

  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000b5e:	e000      	b.n	8000b62 <main+0xda>
 8000b60:	bf00      	nop
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <main+0x17c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f8      	bne.n	8000b60 <main+0xd8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f000 feef 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f901 	bl	8000d78 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <main+0x17c>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <main+0x17c>)
 8000b7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <main+0x17c>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f003 fd25 	bl	80045e4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f003 fd3b 	bl	8004618 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba6:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ba8:	bf00      	nop
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <main+0x17c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d104      	bne.n	8000bc0 <main+0x138>
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	617a      	str	r2, [r7, #20]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dcf4      	bgt.n	8000baa <main+0x122>
if ( timeout < 0 )
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da01      	bge.n	8000bca <main+0x142>
{
Error_Handler();
 8000bc6:	f000 f9a5 	bl	8000f14 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f7ff fdd3 	bl	8000774 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bce:	f7ff fd99 	bl	8000704 <MX_DMA_Init>
  MX_I2C2_Init();
 8000bd2:	f7ff fea3 	bl	800091c <MX_I2C2_Init>
 // MX_SDMMC1_SD_Init();
  MX_TIM1_Init();
 8000bd6:	f000 fb29 	bl	800122c <MX_TIM1_Init>
  MX_UART4_Init();
 8000bda:	f000 fccf 	bl	800157c <MX_UART4_Init>
  MX_FATFS_Init();
 8000bde:	f00f faaf 	bl	8010140 <MX_FATFS_Init>
  MX_UART7_Init();
 8000be2:	f000 fd1b 	bl	800161c <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000be6:	f011 f961 	bl	8011eac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

     ReadGPS();
 8000bea:	f000 f80d 	bl	8000c08 <ReadGPS>
     ReadMag();
 8000bee:	f000 f841 	bl	8000c74 <ReadMag>
     ReadAcc();
 8000bf2:	f000 f861 	bl	8000cb8 <ReadAcc>
     ReadBaro();
 8000bf6:	f000 f881 	bl	8000cfc <ReadBaro>
     ReadGyro();
 8000bfa:	f000 f89b 	bl	8000d34 <ReadGyro>
     ReadGPS();
 8000bfe:	e7f4      	b.n	8000bea <main+0x162>
 8000c00:	e000ed00 	.word	0xe000ed00
 8000c04:	58024400 	.word	0x58024400

08000c08 <ReadGPS>:
}



void ReadGPS(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f003 fce9 	bl	80045e4 <HAL_HSEM_FastTake>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d122      	bne.n	8000c5e <ReadGPS+0x56>
      {
        gps_values.gps_latitude = gps_values_m7->gps_latitude;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <ReadGPS+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <ReadGPS+0x68>)
 8000c20:	6013      	str	r3, [r2, #0]
        gps_values.gps_longitude = gps_values_m7->gps_longitude;
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <ReadGPS+0x64>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <ReadGPS+0x68>)
 8000c2a:	6053      	str	r3, [r2, #4]
        gps_values.gps_altitude = gps_values_m7->gps_altitude;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <ReadGPS+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <ReadGPS+0x68>)
 8000c34:	6093      	str	r3, [r2, #8]
        gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <ReadGPS+0x64>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <ReadGPS+0x68>)
 8000c3e:	60d3      	str	r3, [r2, #12]
        gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <ReadGPS+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <ReadGPS+0x68>)
 8000c48:	6113      	str	r3, [r2, #16]
        gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <ReadGPS+0x64>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <ReadGPS+0x68>)
 8000c52:	6153      	str	r3, [r2, #20]
        gps_values.gps_satellites = gps_values_m7->gps_satellites;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <ReadGPS+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <ReadGPS+0x68>)
 8000c5c:	61d3      	str	r3, [r2, #28]
      }
      HAL_HSEM_Release(HSEM_ID_0,0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2000      	movs	r0, #0
 8000c62:	f003 fcd9 	bl	8004618 <HAL_HSEM_Release>

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24000018 	.word	0x24000018
 8000c70:	24000288 	.word	0x24000288

08000c74 <ReadMag>:

void ReadMag(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f003 fcb3 	bl	80045e4 <HAL_HSEM_FastTake>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10e      	bne.n	8000ca2 <ReadMag+0x2e>
  {
    mag_values.imu_mag_x = mag_values_m7->imu_mag_x;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <ReadMag+0x3c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <ReadMag+0x40>)
 8000c8c:	6013      	str	r3, [r2, #0]
    mag_values.imu_mag_y = mag_values_m7->imu_mag_y;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <ReadMag+0x3c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <ReadMag+0x40>)
 8000c96:	6053      	str	r3, [r2, #4]
    mag_values.imu_mag_z = mag_values_m7->imu_mag_z;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <ReadMag+0x3c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <ReadMag+0x40>)
 8000ca0:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f003 fcb7 	bl	8004618 <HAL_HSEM_Release>

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000010 	.word	0x24000010
 8000cb4:	240002c8 	.word	0x240002c8

08000cb8 <ReadAcc>:
void ReadAcc(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f003 fc91 	bl	80045e4 <HAL_HSEM_FastTake>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10e      	bne.n	8000ce6 <ReadAcc+0x2e>
  {
      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <ReadAcc+0x3c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <ReadAcc+0x40>)
 8000cd0:	6013      	str	r3, [r2, #0]
      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <ReadAcc+0x3c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <ReadAcc+0x40>)
 8000cda:	6053      	str	r3, [r2, #4]
      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <ReadAcc+0x3c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <ReadAcc+0x40>)
 8000ce4:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f003 fc95 	bl	8004618 <HAL_HSEM_Release>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000008 	.word	0x24000008
 8000cf8:	240002b0 	.word	0x240002b0

08000cfc <ReadBaro>:
void ReadBaro(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000d00:	2000      	movs	r0, #0
 8000d02:	f003 fc6f 	bl	80045e4 <HAL_HSEM_FastTake>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d109      	bne.n	8000d20 <ReadBaro+0x24>
  {
     baro_values.baro_altitude = baro_values_m7->baro_altitude;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <ReadBaro+0x30>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <ReadBaro+0x34>)
 8000d14:	6053      	str	r3, [r2, #4]
     baro_values.baro_pressure = baro_values_m7->baro_pressure;
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <ReadBaro+0x30>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <ReadBaro+0x34>)
 8000d1e:	6013      	str	r3, [r2, #0]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000d20:	2100      	movs	r1, #0
 8000d22:	2000      	movs	r0, #0
 8000d24:	f003 fc78 	bl	8004618 <HAL_HSEM_Release>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24000014 	.word	0x24000014
 8000d30:	240002a8 	.word	0x240002a8

08000d34 <ReadGyro>:
void ReadGyro(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f003 fc53 	bl	80045e4 <HAL_HSEM_FastTake>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10e      	bne.n	8000d62 <ReadGyro+0x2e>
  {
     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <ReadGyro+0x3c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <ReadGyro+0x40>)
 8000d4c:	6013      	str	r3, [r2, #0]
     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <ReadGyro+0x3c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <ReadGyro+0x40>)
 8000d56:	6053      	str	r3, [r2, #4]
     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <ReadGyro+0x3c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <ReadGyro+0x40>)
 8000d60:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000d62:	2100      	movs	r1, #0
 8000d64:	2000      	movs	r0, #0
 8000d66:	f003 fc57 	bl	8004618 <HAL_HSEM_Release>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2400000c 	.word	0x2400000c
 8000d74:	240002bc 	.word	0x240002bc

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09c      	sub	sp, #112	; 0x70
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	224c      	movs	r2, #76	; 0x4c
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f011 fe3a 	bl	8012a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2220      	movs	r2, #32
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f011 fe34 	bl	8012a00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f005 fdd9 	bl	8006950 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <SystemClock_Config+0x104>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a35      	ldr	r2, [pc, #212]	; (8000e7c <SystemClock_Config+0x104>)
 8000da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <SystemClock_Config+0x104>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <SystemClock_Config+0x108>)
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	4a30      	ldr	r2, [pc, #192]	; (8000e80 <SystemClock_Config+0x108>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dc4:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <SystemClock_Config+0x108>)
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd0:	bf00      	nop
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <SystemClock_Config+0x104>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dde:	d1f8      	bne.n	8000dd2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <SystemClock_Config+0x10c>)
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	f023 0303 	bic.w	r3, r3, #3
 8000de8:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <SystemClock_Config+0x10c>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000df0:	2321      	movs	r3, #33	; 0x21
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e02:	2302      	movs	r3, #2
 8000e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e0a:	233c      	movs	r3, #60	; 0x3c
 8000e0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000e12:	230f      	movs	r3, #15
 8000e14:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f005 fdfa 	bl	8006a24 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e36:	f000 f86d 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	233f      	movs	r3, #63	; 0x3f
 8000e3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e46:	2308      	movs	r3, #8
 8000e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e4e:	2340      	movs	r3, #64	; 0x40
 8000e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2104      	movs	r1, #4
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 f9ef 	bl	8007244 <HAL_RCC_ClockConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000e6c:	f000 f852 	bl	8000f14 <Error_Handler>
  }

  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000e70:	f005 fdc8 	bl	8006a04 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000e74:	bf00      	nop
 8000e76:	3770      	adds	r7, #112	; 0x70
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	58024800 	.word	0x58024800
 8000e80:	58000400 	.word	0x58000400
 8000e84:	58024400 	.word	0x58024400

08000e88 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e9a:	f000 ff2b 	bl	8001cf4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000ea6:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000eaa:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000eac:	2312      	movs	r3, #18
 8000eae:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 ff48 	bl	8001d64 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000ed8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000edc:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000ede:	230f      	movs	r3, #15
 8000ee0:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000eea:	2303      	movs	r3, #3
 8000eec:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000efe:	463b      	mov	r3, r7
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 ff2f 	bl	8001d64 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f06:	2004      	movs	r0, #4
 8000f08:	f000 ff0c 	bl	8001d24 <HAL_MPU_Enable>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <HAL_SD_MspInit>:
  /* USER CODE END SDMMC1_Init 2 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0ba      	sub	sp, #232	; 0xe8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	22bc      	movs	r2, #188	; 0xbc
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f011 fd5d 	bl	8012a00 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a3b      	ldr	r2, [pc, #236]	; (8001038 <HAL_SD_MspInit+0x118>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d16e      	bne.n	800102e <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f006 fd3e 	bl	80079e0 <HAL_RCCEx_PeriphCLKConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000f6a:	f7ff ffd3 	bl	8000f14 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f6e:	4b33      	ldr	r3, [pc, #204]	; (800103c <HAL_SD_MspInit+0x11c>)
 8000f70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f74:	4a31      	ldr	r2, [pc, #196]	; (800103c <HAL_SD_MspInit+0x11c>)
 8000f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	; (800103c <HAL_SD_MspInit+0x11c>)
 8000f80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <HAL_SD_MspInit+0x11c>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	4a2a      	ldr	r2, [pc, #168]	; (800103c <HAL_SD_MspInit+0x11c>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <HAL_SD_MspInit+0x11c>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_SD_MspInit+0x11c>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	4a22      	ldr	r2, [pc, #136]	; (800103c <HAL_SD_MspInit+0x11c>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_SD_MspInit+0x11c>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fc8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fec:	4619      	mov	r1, r3
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <HAL_SD_MspInit+0x120>)
 8000ff0:	f003 f92e 	bl	8004250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800100c:	230c      	movs	r3, #12
 800100e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001012:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001016:	4619      	mov	r1, r3
 8001018:	480a      	ldr	r0, [pc, #40]	; (8001044 <HAL_SD_MspInit+0x124>)
 800101a:	f003 f919 	bl	8004250 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2031      	movs	r0, #49	; 0x31
 8001024:	f000 fe31 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001028:	2031      	movs	r0, #49	; 0x31
 800102a:	f000 fe48 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	37e8      	adds	r7, #232	; 0xe8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	52007000 	.word	0x52007000
 800103c:	58024400 	.word	0x58024400
 8001040:	58020800 	.word	0x58020800
 8001044:	58020c00 	.word	0x58020c00

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_MspInit+0x30>)
 8001050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x30>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x30>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	58024400 	.word	0x58024400

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 fcb4 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <DMA1_Stream5_IRQHandler+0x10>)
 80010d6:	f001 ff47 	bl	8002f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	240004a4 	.word	0x240004a4

080010e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <DMA1_Stream6_IRQHandler+0x10>)
 80010ea:	f001 ff3d 	bl	8002f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2400042c 	.word	0x2400042c

080010f8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <TIM1_BRK_IRQHandler+0x10>)
 80010fe:	f00a fae7 	bl	800b6d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	24000350 	.word	0x24000350

0800110c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <TIM1_UP_IRQHandler+0x10>)
 8001112:	f00a fadd 	bl	800b6d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24000350 	.word	0x24000350

08001120 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001126:	f00a fad3 	bl	800b6d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	24000350 	.word	0x24000350

08001134 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <TIM1_CC_IRQHandler+0x10>)
 800113a:	f00a fac9 	bl	800b6d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24000350 	.word	0x24000350

08001148 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <I2C2_EV_IRQHandler+0x10>)
 800114e:	f003 fb07 	bl	8004760 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2400023c 	.word	0x2400023c

0800115c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <I2C2_ER_IRQHandler+0x10>)
 8001162:	f003 fb17 	bl	8004794 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2400023c 	.word	0x2400023c

08001170 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <SDMMC1_IRQHandler+0x10>)
 8001176:	f009 f821 	bl	800a1bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	240002d4 	.word	0x240002d4

08001184 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <UART4_IRQHandler+0x10>)
 800118a:	f00b fb71 	bl	800c870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2400051c 	.word	0x2400051c

08001198 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <UART7_IRQHandler+0x10>)
 800119e:	f00b fb67 	bl	800c870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2400039c 	.word	0x2400039c

080011ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <OTG_FS_IRQHandler+0x10>)
 80011b2:	f004 fb48 	bl	8005846 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	24003af4 	.word	0x24003af4

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f011 fbcc 	bl	801298c <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	24040000 	.word	0x24040000
 8001220:	00004000 	.word	0x00004000
 8001224:	24000218 	.word	0x24000218
 8001228:	24003f10 	.word	0x24003f10

0800122c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0a4      	sub	sp, #144	; 0x90
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	222c      	movs	r2, #44	; 0x2c
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f011 fbc9 	bl	8012a00 <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2220      	movs	r2, #32
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f011 fbc3 	bl	8012a00 <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800128a:	463a      	mov	r2, r7
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f006 fb63 	bl	800795c <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 800129c:	f006 fb32 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 80012a0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80012a4:	e005      	b.n	80012b2 <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 80012a6:	f006 fb2d 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 80012aa:	4603      	mov	r3, r0
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 80012b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012b6:	4a5f      	ldr	r2, [pc, #380]	; (8001434 <MX_TIM1_Init+0x208>)
 80012b8:	fba2 2303 	umull	r2, r3, r2, r3
 80012bc:	0c9b      	lsrs	r3, r3, #18
 80012be:	3301      	adds	r3, #1
 80012c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 80012c4:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <MX_TIM1_Init+0x20c>)
 80012c6:	4a5d      	ldr	r2, [pc, #372]	; (800143c <MX_TIM1_Init+0x210>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 80012ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012ce:	3b01      	subs	r3, #1
 80012d0:	4a59      	ldr	r2, [pc, #356]	; (8001438 <MX_TIM1_Init+0x20c>)
 80012d2:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <MX_TIM1_Init+0x20c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 80012da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	3b01      	subs	r3, #1
 80012f0:	4a51      	ldr	r2, [pc, #324]	; (8001438 <MX_TIM1_Init+0x20c>)
 80012f2:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b50      	ldr	r3, [pc, #320]	; (8001438 <MX_TIM1_Init+0x20c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fa:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <MX_TIM1_Init+0x20c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b4d      	ldr	r3, [pc, #308]	; (8001438 <MX_TIM1_Init+0x20c>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001306:	484c      	ldr	r0, [pc, #304]	; (8001438 <MX_TIM1_Init+0x20c>)
 8001308:	f00a f92a 	bl	800b560 <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8001312:	f7ff fdff 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800131c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001320:	4619      	mov	r1, r3
 8001322:	4845      	ldr	r0, [pc, #276]	; (8001438 <MX_TIM1_Init+0x20c>)
 8001324:	f00a fc04 	bl	800bb30 <HAL_TIM_ConfigClockSource>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800132e:	f7ff fdf1 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001332:	4841      	ldr	r0, [pc, #260]	; (8001438 <MX_TIM1_Init+0x20c>)
 8001334:	f00a f96b 	bl	800b60e <HAL_TIM_PWM_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800133e:	f7ff fde9 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800134e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001352:	4619      	mov	r1, r3
 8001354:	4838      	ldr	r0, [pc, #224]	; (8001438 <MX_TIM1_Init+0x20c>)
 8001356:	f00b f917 	bl	800c588 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001360:	f7ff fdd8 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001364:	2360      	movs	r3, #96	; 0x60
 8001366:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 8001368:	2332      	movs	r3, #50	; 0x32
 800136a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136c:	2300      	movs	r3, #0
 800136e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001370:	2300      	movs	r3, #0
 8001372:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001380:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	482b      	ldr	r0, [pc, #172]	; (8001438 <MX_TIM1_Init+0x20c>)
 800138a:	f00a fac1 	bl	800b910 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001394:	f7ff fdbe 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001398:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800139c:	2204      	movs	r2, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4825      	ldr	r0, [pc, #148]	; (8001438 <MX_TIM1_Init+0x20c>)
 80013a2:	f00a fab5 	bl	800b910 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 80013ac:	f7ff fdb2 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013b4:	2208      	movs	r2, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	481f      	ldr	r0, [pc, #124]	; (8001438 <MX_TIM1_Init+0x20c>)
 80013ba:	f00a faa9 	bl	800b910 <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 80013c4:	f7ff fda6 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013cc:	220c      	movs	r2, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	4819      	ldr	r0, [pc, #100]	; (8001438 <MX_TIM1_Init+0x20c>)
 80013d2:	f00a fa9d 	bl	800b910 <HAL_TIM_PWM_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 80013dc:	f7ff fd9a 	bl	8000f14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001406:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	4808      	ldr	r0, [pc, #32]	; (8001438 <MX_TIM1_Init+0x20c>)
 8001418:	f00b f93e 	bl	800c698 <HAL_TIMEx_ConfigBreakDeadTime>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 8001422:	f7ff fd77 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_TIM1_Init+0x20c>)
 8001428:	f000 f84a 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 800142c:	bf00      	nop
 800142e:	3790      	adds	r7, #144	; 0x90
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	66673335 	.word	0x66673335
 8001438:	24000350 	.word	0x24000350
 800143c:	40010000 	.word	0x40010000

08001440 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12e      	bne.n	80014b0 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_TIM_Base_MspInit+0x7c>)
 8001454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001458:	4a18      	ldr	r2, [pc, #96]	; (80014bc <HAL_TIM_Base_MspInit+0x7c>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_TIM_Base_MspInit+0x7c>)
 8001464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2018      	movs	r0, #24
 8001476:	f000 fc08 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800147a:	2018      	movs	r0, #24
 800147c:	f000 fc1f 	bl	8001cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2019      	movs	r0, #25
 8001486:	f000 fc00 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800148a:	2019      	movs	r0, #25
 800148c:	f000 fc17 	bl	8001cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	201a      	movs	r0, #26
 8001496:	f000 fbf8 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800149a:	201a      	movs	r0, #26
 800149c:	f000 fc0f 	bl	8001cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	201b      	movs	r0, #27
 80014a6:	f000 fbf0 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014aa:	201b      	movs	r0, #27
 80014ac:	f000 fc07 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010000 	.word	0x40010000
 80014bc:	58024400 	.word	0x58024400

080014c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a23      	ldr	r2, [pc, #140]	; (800156c <HAL_TIM_MspPostInit+0xac>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d13f      	bne.n	8001562 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_TIM_MspPostInit+0xb0>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <HAL_TIM_MspPostInit+0xb0>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_TIM_MspPostInit+0xb0>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_TIM_MspPostInit+0xb0>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_TIM_MspPostInit+0xb0>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_TIM_MspPostInit+0xb0>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800151e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001530:	2301      	movs	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <HAL_TIM_MspPostInit+0xb4>)
 800153c:	f002 fe88 	bl	8004250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001552:	2301      	movs	r3, #1
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <HAL_TIM_MspPostInit+0xb8>)
 800155e:	f002 fe77 	bl	8004250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40010000 	.word	0x40010000
 8001570:	58024400 	.word	0x58024400
 8001574:	58021000 	.word	0x58021000
 8001578:	58020000 	.word	0x58020000

0800157c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <MX_UART4_Init+0x94>)
 8001582:	4a24      	ldr	r2, [pc, #144]	; (8001614 <MX_UART4_Init+0x98>)
 8001584:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <MX_UART4_Init+0x94>)
 8001588:	4a23      	ldr	r2, [pc, #140]	; (8001618 <MX_UART4_Init+0x9c>)
 800158a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <MX_UART4_Init+0x94>)
 800158e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001592:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <MX_UART4_Init+0x94>)
 8001596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_UART4_Init+0x94>)
 800159e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_UART4_Init+0x94>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_UART4_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_UART4_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_UART4_Init+0x94>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_UART4_Init+0x94>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <MX_UART4_Init+0x94>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_UART4_Init+0x94>)
 80015ca:	f00b f901 	bl	800c7d0 <HAL_UART_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 80015d4:	f7ff fc9e 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d8:	2100      	movs	r1, #0
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_UART4_Init+0x94>)
 80015dc:	f00c fba9 	bl	800dd32 <HAL_UARTEx_SetTxFifoThreshold>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 80015e6:	f7ff fc95 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ea:	2100      	movs	r1, #0
 80015ec:	4808      	ldr	r0, [pc, #32]	; (8001610 <MX_UART4_Init+0x94>)
 80015ee:	f00c fbde 	bl	800ddae <HAL_UARTEx_SetRxFifoThreshold>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_UART4_Init+0x80>
  {
    Error_Handler();
 80015f8:	f7ff fc8c 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_UART4_Init+0x94>)
 80015fe:	f00c fb5f 	bl	800dcc0 <HAL_UARTEx_DisableFifoMode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8001608:	f7ff fc84 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2400051c 	.word	0x2400051c
 8001614:	40004c00 	.word	0x40004c00
 8001618:	000186a0 	.word	0x000186a0

0800161c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_UART7_Init+0x90>)
 8001622:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <MX_UART7_Init+0x94>)
 8001624:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <MX_UART7_Init+0x90>)
 8001628:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800162c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_UART7_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_UART7_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_UART7_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_UART7_Init+0x90>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_UART7_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_UART7_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_UART7_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_UART7_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_UART7_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <MX_UART7_Init+0x90>)
 8001666:	f00b f8b3 	bl	800c7d0 <HAL_UART_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001670:	f7ff fc50 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_UART7_Init+0x90>)
 8001678:	f00c fb5b 	bl	800dd32 <HAL_UARTEx_SetTxFifoThreshold>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001682:	f7ff fc47 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <MX_UART7_Init+0x90>)
 800168a:	f00c fb90 	bl	800ddae <HAL_UARTEx_SetRxFifoThreshold>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001694:	f7ff fc3e 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_UART7_Init+0x90>)
 800169a:	f00c fb11 	bl	800dcc0 <HAL_UARTEx_DisableFifoMode>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80016a4:	f7ff fc36 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2400039c 	.word	0x2400039c
 80016b0:	40007800 	.word	0x40007800

080016b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0ba      	sub	sp, #232	; 0xe8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	22bc      	movs	r2, #188	; 0xbc
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f011 f993 	bl	8012a00 <memset>
  if(uartHandle->Instance==UART4)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7e      	ldr	r2, [pc, #504]	; (80018d8 <HAL_UART_MspInit+0x224>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d14a      	bne.n	800177a <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ee:	f107 0318 	add.w	r3, r7, #24
 80016f2:	4618      	mov	r0, r3
 80016f4:	f006 f974 	bl	80079e0 <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016fe:	f7ff fc09 	bl	8000f14 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001702:	4b76      	ldr	r3, [pc, #472]	; (80018dc <HAL_UART_MspInit+0x228>)
 8001704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001708:	4a74      	ldr	r2, [pc, #464]	; (80018dc <HAL_UART_MspInit+0x228>)
 800170a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800170e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <HAL_UART_MspInit+0x228>)
 8001714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b6e      	ldr	r3, [pc, #440]	; (80018dc <HAL_UART_MspInit+0x228>)
 8001722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001726:	4a6d      	ldr	r2, [pc, #436]	; (80018dc <HAL_UART_MspInit+0x228>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_UART_MspInit+0x228>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800173e:	2303      	movs	r3, #3
 8001740:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001756:	2308      	movs	r3, #8
 8001758:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001760:	4619      	mov	r1, r3
 8001762:	485f      	ldr	r0, [pc, #380]	; (80018e0 <HAL_UART_MspInit+0x22c>)
 8001764:	f002 fd74 	bl	8004250 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2034      	movs	r0, #52	; 0x34
 800176e:	f000 fa8c 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001772:	2034      	movs	r0, #52	; 0x34
 8001774:	f000 faa3 	bl	8001cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001778:	e0a9      	b.n	80018ce <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==UART7)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a59      	ldr	r2, [pc, #356]	; (80018e4 <HAL_UART_MspInit+0x230>)
 8001780:	4293      	cmp	r3, r2
 8001782:	f040 80a4 	bne.w	80018ce <HAL_UART_MspInit+0x21a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	4618      	mov	r0, r3
 8001796:	f006 f923 	bl	80079e0 <HAL_RCCEx_PeriphCLKConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80017a0:	f7ff fbb8 	bl	8000f14 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80017a4:	4b4d      	ldr	r3, [pc, #308]	; (80018dc <HAL_UART_MspInit+0x228>)
 80017a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017aa:	4a4c      	ldr	r2, [pc, #304]	; (80018dc <HAL_UART_MspInit+0x228>)
 80017ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017b4:	4b49      	ldr	r3, [pc, #292]	; (80018dc <HAL_UART_MspInit+0x228>)
 80017b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_UART_MspInit+0x228>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c8:	4a44      	ldr	r2, [pc, #272]	; (80018dc <HAL_UART_MspInit+0x228>)
 80017ca:	f043 0320 	orr.w	r3, r3, #32
 80017ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d2:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_UART_MspInit+0x228>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e0:	23c0      	movs	r3, #192	; 0xc0
 80017e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80017f8:	2307      	movs	r3, #7
 80017fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001802:	4619      	mov	r1, r3
 8001804:	4838      	ldr	r0, [pc, #224]	; (80018e8 <HAL_UART_MspInit+0x234>)
 8001806:	f002 fd23 	bl	8004250 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_UART_MspInit+0x238>)
 800180c:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <HAL_UART_MspInit+0x23c>)
 800180e:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001810:	4b36      	ldr	r3, [pc, #216]	; (80018ec <HAL_UART_MspInit+0x238>)
 8001812:	224f      	movs	r2, #79	; 0x4f
 8001814:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001816:	4b35      	ldr	r3, [pc, #212]	; (80018ec <HAL_UART_MspInit+0x238>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800181c:	4b33      	ldr	r3, [pc, #204]	; (80018ec <HAL_UART_MspInit+0x238>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001822:	4b32      	ldr	r3, [pc, #200]	; (80018ec <HAL_UART_MspInit+0x238>)
 8001824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001828:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800182a:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_UART_MspInit+0x238>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001830:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <HAL_UART_MspInit+0x238>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_UART_MspInit+0x238>)
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_UART_MspInit+0x238>)
 800183e:	2200      	movs	r2, #0
 8001840:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_UART_MspInit+0x238>)
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001848:	4828      	ldr	r0, [pc, #160]	; (80018ec <HAL_UART_MspInit+0x238>)
 800184a:	f000 facf 	bl	8001dec <HAL_DMA_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001854:	f7ff fb5e 	bl	8000f14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a24      	ldr	r2, [pc, #144]	; (80018ec <HAL_UART_MspInit+0x238>)
 800185c:	67da      	str	r2, [r3, #124]	; 0x7c
 800185e:	4a23      	ldr	r2, [pc, #140]	; (80018ec <HAL_UART_MspInit+0x238>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_UART_MspInit+0x240>)
 8001866:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <HAL_UART_MspInit+0x244>)
 8001868:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_UART_MspInit+0x240>)
 800186c:	2250      	movs	r2, #80	; 0x50
 800186e:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_UART_MspInit+0x240>)
 8001872:	2240      	movs	r2, #64	; 0x40
 8001874:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_UART_MspInit+0x240>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <HAL_UART_MspInit+0x240>)
 800187e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001882:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_UART_MspInit+0x240>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_UART_MspInit+0x240>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_UART_MspInit+0x240>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_UART_MspInit+0x240>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_UART_MspInit+0x240>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80018a2:	4814      	ldr	r0, [pc, #80]	; (80018f4 <HAL_UART_MspInit+0x240>)
 80018a4:	f000 faa2 	bl	8001dec <HAL_DMA_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80018ae:	f7ff fb31 	bl	8000f14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_UART_MspInit+0x240>)
 80018b6:	679a      	str	r2, [r3, #120]	; 0x78
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_UART_MspInit+0x240>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2052      	movs	r0, #82	; 0x52
 80018c4:	f000 f9e1 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80018c8:	2052      	movs	r0, #82	; 0x52
 80018ca:	f000 f9f8 	bl	8001cbe <HAL_NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	37e8      	adds	r7, #232	; 0xe8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40004c00 	.word	0x40004c00
 80018dc:	58024400 	.word	0x58024400
 80018e0:	58020000 	.word	0x58020000
 80018e4:	40007800 	.word	0x40007800
 80018e8:	58021400 	.word	0x58021400
 80018ec:	240004a4 	.word	0x240004a4
 80018f0:	40020088 	.word	0x40020088
 80018f4:	2400042c 	.word	0x2400042c
 80018f8:	400200a0 	.word	0x400200a0

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001900:	f7fe fe66 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001906:	490d      	ldr	r1, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800191c:	4c0a      	ldr	r4, [pc, #40]	; (8001948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192a:	f011 f835 	bl	8012998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff f8ab 	bl	8000a88 <main>
  bx  lr
 8001932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001934:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001938:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800193c:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 8001940:	08012cc4 	.word	0x08012cc4
  ldr r2, =_sbss
 8001944:	240001fc 	.word	0x240001fc
  ldr r4, =_ebss
 8001948:	24003f0c 	.word	0x24003f0c

0800194c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC3_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	2003      	movs	r0, #3
 8001958:	f000 f98c 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800195c:	f005 fe28 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_Init+0x68>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	4913      	ldr	r1, [pc, #76]	; (80019bc <HAL_Init+0x6c>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_Init+0x68>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_Init+0x6c>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_Init+0x70>)
 8001992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_Init+0x74>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f814 	bl	80019c8 <HAL_InitTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e002      	b.n	80019b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019aa:	f7ff fb4d 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	58024400 	.word	0x58024400
 80019bc:	08012c00 	.word	0x08012c00
 80019c0:	24000004 	.word	0x24000004
 80019c4:	24000000 	.word	0x24000000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_InitTick+0x60>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e021      	b.n	8001a20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_InitTick+0x64>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_InitTick+0x60>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f971 	bl	8001cda <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 f93b 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x68>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	24000020 	.word	0x24000020
 8001a2c:	24000000 	.word	0x24000000
 8001a30:	2400001c 	.word	0x2400001c

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	24000020 	.word	0x24000020
 8001a58:	240005ac 	.word	0x240005ac

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	240005ac 	.word	0x240005ac

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	24000020 	.word	0x24000020

08001abc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetREVID+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	5c001000 	.word	0x5c001000

08001ad4 <__NVIC_SetPriorityGrouping>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <__NVIC_SetPriorityGrouping+0x40>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x40>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00
 8001b18:	05fa0000 	.word	0x05fa0000

08001b1c <__NVIC_GetPriorityGrouping>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <__NVIC_EnableIRQ+0x38>)
 8001b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff29 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff40 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff90 	bl	8001bc8 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5f 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff33 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffa4 	bl	8001c30 <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cf8:	f3bf 8f5f 	dmb	sy
}
 8001cfc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <HAL_MPU_Disable+0x28>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <HAL_MPU_Disable+0x28>)
 8001d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d08:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_MPU_Disable+0x2c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	605a      	str	r2, [r3, #4]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00
 8001d20:	e000ed90 	.word	0xe000ed90

08001d24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <HAL_MPU_Enable+0x38>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_MPU_Enable+0x3c>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_MPU_Enable+0x3c>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d42:	f3bf 8f4f 	dsb	sy
}
 8001d46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d48:	f3bf 8f6f 	isb	sy
}
 8001d4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed90 	.word	0xe000ed90
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	785a      	ldrb	r2, [r3, #1]
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_MPU_ConfigRegion+0x84>)
 8001d72:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d029      	beq.n	8001dd0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_MPU_ConfigRegion+0x84>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7b1b      	ldrb	r3, [r3, #12]
 8001d88:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7adb      	ldrb	r3, [r3, #11]
 8001d8e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7a9b      	ldrb	r3, [r3, #10]
 8001d96:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7b5b      	ldrb	r3, [r3, #13]
 8001d9e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001da0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7b9b      	ldrb	r3, [r3, #14]
 8001da6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001da8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7bdb      	ldrb	r3, [r3, #15]
 8001dae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001db0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7a5b      	ldrb	r3, [r3, #9]
 8001db6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001db8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7a1b      	ldrb	r3, [r3, #8]
 8001dbe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dc0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dcc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001dce:	e005      	b.n	8001ddc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_MPU_ConfigRegion+0x84>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_MPU_ConfigRegion+0x84>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed90 	.word	0xe000ed90

08001dec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff fe32 	bl	8001a5c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e316      	b.n	8002432 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a66      	ldr	r2, [pc, #408]	; (8001fa4 <HAL_DMA_Init+0x1b8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d04a      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a65      	ldr	r2, [pc, #404]	; (8001fa8 <HAL_DMA_Init+0x1bc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d045      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_DMA_Init+0x1c0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d040      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a62      	ldr	r2, [pc, #392]	; (8001fb0 <HAL_DMA_Init+0x1c4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d03b      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a60      	ldr	r2, [pc, #384]	; (8001fb4 <HAL_DMA_Init+0x1c8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d036      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5f      	ldr	r2, [pc, #380]	; (8001fb8 <HAL_DMA_Init+0x1cc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d031      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_DMA_Init+0x1d0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d02c      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_DMA_Init+0x1d4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d027      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_DMA_Init+0x1d8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d022      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a59      	ldr	r2, [pc, #356]	; (8001fc8 <HAL_DMA_Init+0x1dc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d01d      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_DMA_Init+0x1e0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d018      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a56      	ldr	r2, [pc, #344]	; (8001fd0 <HAL_DMA_Init+0x1e4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a54      	ldr	r2, [pc, #336]	; (8001fd4 <HAL_DMA_Init+0x1e8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00e      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a53      	ldr	r2, [pc, #332]	; (8001fd8 <HAL_DMA_Init+0x1ec>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d009      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_DMA_Init+0x1f0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_DMA_Init+0xb8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a50      	ldr	r2, [pc, #320]	; (8001fe0 <HAL_DMA_Init+0x1f4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DMA_Init+0xbc>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_DMA_Init+0xbe>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 813b 	beq.w	8002126 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a37      	ldr	r2, [pc, #220]	; (8001fa4 <HAL_DMA_Init+0x1b8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d04a      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a36      	ldr	r2, [pc, #216]	; (8001fa8 <HAL_DMA_Init+0x1bc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d045      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a34      	ldr	r2, [pc, #208]	; (8001fac <HAL_DMA_Init+0x1c0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d040      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a33      	ldr	r2, [pc, #204]	; (8001fb0 <HAL_DMA_Init+0x1c4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d03b      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a31      	ldr	r2, [pc, #196]	; (8001fb4 <HAL_DMA_Init+0x1c8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d036      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a30      	ldr	r2, [pc, #192]	; (8001fb8 <HAL_DMA_Init+0x1cc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d031      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2e      	ldr	r2, [pc, #184]	; (8001fbc <HAL_DMA_Init+0x1d0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02c      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <HAL_DMA_Init+0x1d4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d027      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <HAL_DMA_Init+0x1d8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d022      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <HAL_DMA_Init+0x1dc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d01d      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a28      	ldr	r2, [pc, #160]	; (8001fcc <HAL_DMA_Init+0x1e0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d018      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <HAL_DMA_Init+0x1e4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <HAL_DMA_Init+0x1e8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00e      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <HAL_DMA_Init+0x1ec>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_DMA_Init+0x1f0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d004      	beq.n	8001f60 <HAL_DMA_Init+0x174>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <HAL_DMA_Init+0x1f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <HAL_DMA_Init+0x186>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e007      	b.n	8001f82 <HAL_DMA_Init+0x196>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f82:	e02f      	b.n	8001fe4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f84:	f7ff fd6a 	bl	8001a5c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d928      	bls.n	8001fe4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e246      	b.n	8002432 <HAL_DMA_Init+0x646>
 8001fa4:	40020010 	.word	0x40020010
 8001fa8:	40020028 	.word	0x40020028
 8001fac:	40020040 	.word	0x40020040
 8001fb0:	40020058 	.word	0x40020058
 8001fb4:	40020070 	.word	0x40020070
 8001fb8:	40020088 	.word	0x40020088
 8001fbc:	400200a0 	.word	0x400200a0
 8001fc0:	400200b8 	.word	0x400200b8
 8001fc4:	40020410 	.word	0x40020410
 8001fc8:	40020428 	.word	0x40020428
 8001fcc:	40020440 	.word	0x40020440
 8001fd0:	40020458 	.word	0x40020458
 8001fd4:	40020470 	.word	0x40020470
 8001fd8:	40020488 	.word	0x40020488
 8001fdc:	400204a0 	.word	0x400204a0
 8001fe0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1c8      	bne.n	8001f84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4b83      	ldr	r3, [pc, #524]	; (800220c <HAL_DMA_Init+0x420>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800200a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002016:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002022:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2b04      	cmp	r3, #4
 8002036:	d107      	bne.n	8002048 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	4313      	orrs	r3, r2
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002048:	4b71      	ldr	r3, [pc, #452]	; (8002210 <HAL_DMA_Init+0x424>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b71      	ldr	r3, [pc, #452]	; (8002214 <HAL_DMA_Init+0x428>)
 800204e:	4013      	ands	r3, r2
 8002050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002054:	d328      	bcc.n	80020a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b28      	cmp	r3, #40	; 0x28
 800205c:	d903      	bls.n	8002066 <HAL_DMA_Init+0x27a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b2e      	cmp	r3, #46	; 0x2e
 8002064:	d917      	bls.n	8002096 <HAL_DMA_Init+0x2aa>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b3e      	cmp	r3, #62	; 0x3e
 800206c:	d903      	bls.n	8002076 <HAL_DMA_Init+0x28a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b42      	cmp	r3, #66	; 0x42
 8002074:	d90f      	bls.n	8002096 <HAL_DMA_Init+0x2aa>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b46      	cmp	r3, #70	; 0x46
 800207c:	d903      	bls.n	8002086 <HAL_DMA_Init+0x29a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b48      	cmp	r3, #72	; 0x48
 8002084:	d907      	bls.n	8002096 <HAL_DMA_Init+0x2aa>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b4e      	cmp	r3, #78	; 0x4e
 800208c:	d905      	bls.n	800209a <HAL_DMA_Init+0x2ae>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b52      	cmp	r3, #82	; 0x52
 8002094:	d801      	bhi.n	800209a <HAL_DMA_Init+0x2ae>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_DMA_Init+0x2b0>
 800209a:	2300      	movs	r3, #0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f023 0307 	bic.w	r3, r3, #7
 80020be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d117      	bne.n	8002102 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00e      	beq.n	8002102 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f001 ff29 	bl	8003f3c <DMA_CheckFifoParam>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e197      	b.n	8002432 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f001 fe64 	bl	8003dd8 <DMA_CalcBaseAndBitshift>
 8002110:	4603      	mov	r3, r0
 8002112:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	223f      	movs	r2, #63	; 0x3f
 800211e:	409a      	lsls	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e0cd      	b.n	80022c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a3b      	ldr	r2, [pc, #236]	; (8002218 <HAL_DMA_Init+0x42c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_DMA_Init+0x38a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a39      	ldr	r2, [pc, #228]	; (800221c <HAL_DMA_Init+0x430>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_Init+0x38a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a38      	ldr	r2, [pc, #224]	; (8002220 <HAL_DMA_Init+0x434>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d018      	beq.n	8002176 <HAL_DMA_Init+0x38a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a36      	ldr	r2, [pc, #216]	; (8002224 <HAL_DMA_Init+0x438>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_DMA_Init+0x38a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a35      	ldr	r2, [pc, #212]	; (8002228 <HAL_DMA_Init+0x43c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00e      	beq.n	8002176 <HAL_DMA_Init+0x38a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a33      	ldr	r2, [pc, #204]	; (800222c <HAL_DMA_Init+0x440>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_DMA_Init+0x38a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a32      	ldr	r2, [pc, #200]	; (8002230 <HAL_DMA_Init+0x444>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <HAL_DMA_Init+0x38a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_DMA_Init+0x448>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_DMA_Init+0x38e>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_DMA_Init+0x390>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8097 	beq.w	80022b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a24      	ldr	r2, [pc, #144]	; (8002218 <HAL_DMA_Init+0x42c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d021      	beq.n	80021d0 <HAL_DMA_Init+0x3e4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a22      	ldr	r2, [pc, #136]	; (800221c <HAL_DMA_Init+0x430>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01c      	beq.n	80021d0 <HAL_DMA_Init+0x3e4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a21      	ldr	r2, [pc, #132]	; (8002220 <HAL_DMA_Init+0x434>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d017      	beq.n	80021d0 <HAL_DMA_Init+0x3e4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_DMA_Init+0x438>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d012      	beq.n	80021d0 <HAL_DMA_Init+0x3e4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_DMA_Init+0x43c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00d      	beq.n	80021d0 <HAL_DMA_Init+0x3e4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_DMA_Init+0x440>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d008      	beq.n	80021d0 <HAL_DMA_Init+0x3e4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1b      	ldr	r2, [pc, #108]	; (8002230 <HAL_DMA_Init+0x444>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <HAL_DMA_Init+0x3e4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a19      	ldr	r2, [pc, #100]	; (8002234 <HAL_DMA_Init+0x448>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_DMA_Init+0x44c>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d020      	beq.n	800223c <HAL_DMA_Init+0x450>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b80      	cmp	r3, #128	; 0x80
 8002200:	d102      	bne.n	8002208 <HAL_DMA_Init+0x41c>
 8002202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002206:	e01a      	b.n	800223e <HAL_DMA_Init+0x452>
 8002208:	2300      	movs	r3, #0
 800220a:	e018      	b.n	800223e <HAL_DMA_Init+0x452>
 800220c:	fe10803f 	.word	0xfe10803f
 8002210:	5c001000 	.word	0x5c001000
 8002214:	ffff0000 	.word	0xffff0000
 8002218:	58025408 	.word	0x58025408
 800221c:	5802541c 	.word	0x5802541c
 8002220:	58025430 	.word	0x58025430
 8002224:	58025444 	.word	0x58025444
 8002228:	58025458 	.word	0x58025458
 800222c:	5802546c 	.word	0x5802546c
 8002230:	58025480 	.word	0x58025480
 8002234:	58025494 	.word	0x58025494
 8002238:	fffe000f 	.word	0xfffe000f
 800223c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68d2      	ldr	r2, [r2, #12]
 8002242:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002244:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800224c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002254:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800225c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002264:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800226c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b6e      	ldr	r3, [pc, #440]	; (800243c <HAL_DMA_Init+0x650>)
 8002284:	4413      	add	r3, r2
 8002286:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_DMA_Init+0x654>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	009a      	lsls	r2, r3, #2
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f001 fd9f 	bl	8003dd8 <DMA_CalcBaseAndBitshift>
 800229a:	4603      	mov	r3, r0
 800229c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2201      	movs	r2, #1
 80022a8:	409a      	lsls	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	e008      	b.n	80022c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0b7      	b.n	8002432 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5f      	ldr	r2, [pc, #380]	; (8002444 <HAL_DMA_Init+0x658>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d072      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <HAL_DMA_Init+0x65c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d06d      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5c      	ldr	r2, [pc, #368]	; (800244c <HAL_DMA_Init+0x660>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d068      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a5a      	ldr	r2, [pc, #360]	; (8002450 <HAL_DMA_Init+0x664>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d063      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a59      	ldr	r2, [pc, #356]	; (8002454 <HAL_DMA_Init+0x668>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d05e      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a57      	ldr	r2, [pc, #348]	; (8002458 <HAL_DMA_Init+0x66c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d059      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a56      	ldr	r2, [pc, #344]	; (800245c <HAL_DMA_Init+0x670>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d054      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a54      	ldr	r2, [pc, #336]	; (8002460 <HAL_DMA_Init+0x674>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d04f      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a53      	ldr	r2, [pc, #332]	; (8002464 <HAL_DMA_Init+0x678>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d04a      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a51      	ldr	r2, [pc, #324]	; (8002468 <HAL_DMA_Init+0x67c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d045      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a50      	ldr	r2, [pc, #320]	; (800246c <HAL_DMA_Init+0x680>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d040      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <HAL_DMA_Init+0x684>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d03b      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <HAL_DMA_Init+0x688>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d036      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_DMA_Init+0x68c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d031      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_DMA_Init+0x690>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d02c      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a48      	ldr	r2, [pc, #288]	; (8002480 <HAL_DMA_Init+0x694>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d027      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_DMA_Init+0x698>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d022      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a45      	ldr	r2, [pc, #276]	; (8002488 <HAL_DMA_Init+0x69c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01d      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a44      	ldr	r2, [pc, #272]	; (800248c <HAL_DMA_Init+0x6a0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d018      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a42      	ldr	r2, [pc, #264]	; (8002490 <HAL_DMA_Init+0x6a4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a41      	ldr	r2, [pc, #260]	; (8002494 <HAL_DMA_Init+0x6a8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a3f      	ldr	r2, [pc, #252]	; (8002498 <HAL_DMA_Init+0x6ac>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a3e      	ldr	r2, [pc, #248]	; (800249c <HAL_DMA_Init+0x6b0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_DMA_Init+0x5c6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a3c      	ldr	r2, [pc, #240]	; (80024a0 <HAL_DMA_Init+0x6b4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_DMA_Init+0x5ca>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_DMA_Init+0x5cc>
 80023b6:	2300      	movs	r3, #0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d032      	beq.n	8002422 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f001 fe39 	bl	8004034 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b80      	cmp	r3, #128	; 0x80
 80023c8:	d102      	bne.n	80023d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <HAL_DMA_Init+0x624>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d80c      	bhi.n	8002410 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f001 feb6 	bl	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	e008      	b.n	8002422 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	a7fdabf8 	.word	0xa7fdabf8
 8002440:	cccccccd 	.word	0xcccccccd
 8002444:	40020010 	.word	0x40020010
 8002448:	40020028 	.word	0x40020028
 800244c:	40020040 	.word	0x40020040
 8002450:	40020058 	.word	0x40020058
 8002454:	40020070 	.word	0x40020070
 8002458:	40020088 	.word	0x40020088
 800245c:	400200a0 	.word	0x400200a0
 8002460:	400200b8 	.word	0x400200b8
 8002464:	40020410 	.word	0x40020410
 8002468:	40020428 	.word	0x40020428
 800246c:	40020440 	.word	0x40020440
 8002470:	40020458 	.word	0x40020458
 8002474:	40020470 	.word	0x40020470
 8002478:	40020488 	.word	0x40020488
 800247c:	400204a0 	.word	0x400204a0
 8002480:	400204b8 	.word	0x400204b8
 8002484:	58025408 	.word	0x58025408
 8002488:	5802541c 	.word	0x5802541c
 800248c:	58025430 	.word	0x58025430
 8002490:	58025444 	.word	0x58025444
 8002494:	58025458 	.word	0x58025458
 8002498:	5802546c 	.word	0x5802546c
 800249c:	58025480 	.word	0x58025480
 80024a0:	58025494 	.word	0x58025494

080024a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff fad6 	bl	8001a5c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e2dc      	b.n	8002a76 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d008      	beq.n	80024da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e2cd      	b.n	8002a76 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a76      	ldr	r2, [pc, #472]	; (80026b8 <HAL_DMA_Abort+0x214>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d04a      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a74      	ldr	r2, [pc, #464]	; (80026bc <HAL_DMA_Abort+0x218>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d045      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a73      	ldr	r2, [pc, #460]	; (80026c0 <HAL_DMA_Abort+0x21c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d040      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a71      	ldr	r2, [pc, #452]	; (80026c4 <HAL_DMA_Abort+0x220>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d03b      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a70      	ldr	r2, [pc, #448]	; (80026c8 <HAL_DMA_Abort+0x224>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d036      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a6e      	ldr	r2, [pc, #440]	; (80026cc <HAL_DMA_Abort+0x228>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d031      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6d      	ldr	r2, [pc, #436]	; (80026d0 <HAL_DMA_Abort+0x22c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d02c      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6b      	ldr	r2, [pc, #428]	; (80026d4 <HAL_DMA_Abort+0x230>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d027      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6a      	ldr	r2, [pc, #424]	; (80026d8 <HAL_DMA_Abort+0x234>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d022      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a68      	ldr	r2, [pc, #416]	; (80026dc <HAL_DMA_Abort+0x238>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01d      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a67      	ldr	r2, [pc, #412]	; (80026e0 <HAL_DMA_Abort+0x23c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d018      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <HAL_DMA_Abort+0x240>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a64      	ldr	r2, [pc, #400]	; (80026e8 <HAL_DMA_Abort+0x244>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00e      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a62      	ldr	r2, [pc, #392]	; (80026ec <HAL_DMA_Abort+0x248>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d009      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a61      	ldr	r2, [pc, #388]	; (80026f0 <HAL_DMA_Abort+0x24c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_DMA_Abort+0xd6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a5f      	ldr	r2, [pc, #380]	; (80026f4 <HAL_DMA_Abort+0x250>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_DMA_Abort+0xda>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_DMA_Abort+0xdc>
 800257e:	2300      	movs	r3, #0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 021e 	bic.w	r2, r2, #30
 8002592:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e00a      	b.n	80025c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 020e 	bic.w	r2, r2, #14
 80025ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3c      	ldr	r2, [pc, #240]	; (80026b8 <HAL_DMA_Abort+0x214>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d072      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3a      	ldr	r2, [pc, #232]	; (80026bc <HAL_DMA_Abort+0x218>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d06d      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a39      	ldr	r2, [pc, #228]	; (80026c0 <HAL_DMA_Abort+0x21c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d068      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a37      	ldr	r2, [pc, #220]	; (80026c4 <HAL_DMA_Abort+0x220>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d063      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a36      	ldr	r2, [pc, #216]	; (80026c8 <HAL_DMA_Abort+0x224>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d05e      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a34      	ldr	r2, [pc, #208]	; (80026cc <HAL_DMA_Abort+0x228>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d059      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a33      	ldr	r2, [pc, #204]	; (80026d0 <HAL_DMA_Abort+0x22c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d054      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a31      	ldr	r2, [pc, #196]	; (80026d4 <HAL_DMA_Abort+0x230>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d04f      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a30      	ldr	r2, [pc, #192]	; (80026d8 <HAL_DMA_Abort+0x234>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d04a      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <HAL_DMA_Abort+0x238>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d045      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <HAL_DMA_Abort+0x23c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d040      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <HAL_DMA_Abort+0x240>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d03b      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <HAL_DMA_Abort+0x244>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d036      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_DMA_Abort+0x248>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d031      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_DMA_Abort+0x24c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d02c      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <HAL_DMA_Abort+0x250>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d027      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <HAL_DMA_Abort+0x254>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d022      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_DMA_Abort+0x258>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01d      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a21      	ldr	r2, [pc, #132]	; (8002700 <HAL_DMA_Abort+0x25c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d018      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <HAL_DMA_Abort+0x260>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <HAL_DMA_Abort+0x264>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00e      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_DMA_Abort+0x268>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d009      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <HAL_DMA_Abort+0x26c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d004      	beq.n	80026b2 <HAL_DMA_Abort+0x20e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_DMA_Abort+0x270>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d132      	bne.n	8002718 <HAL_DMA_Abort+0x274>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e031      	b.n	800271a <HAL_DMA_Abort+0x276>
 80026b6:	bf00      	nop
 80026b8:	40020010 	.word	0x40020010
 80026bc:	40020028 	.word	0x40020028
 80026c0:	40020040 	.word	0x40020040
 80026c4:	40020058 	.word	0x40020058
 80026c8:	40020070 	.word	0x40020070
 80026cc:	40020088 	.word	0x40020088
 80026d0:	400200a0 	.word	0x400200a0
 80026d4:	400200b8 	.word	0x400200b8
 80026d8:	40020410 	.word	0x40020410
 80026dc:	40020428 	.word	0x40020428
 80026e0:	40020440 	.word	0x40020440
 80026e4:	40020458 	.word	0x40020458
 80026e8:	40020470 	.word	0x40020470
 80026ec:	40020488 	.word	0x40020488
 80026f0:	400204a0 	.word	0x400204a0
 80026f4:	400204b8 	.word	0x400204b8
 80026f8:	58025408 	.word	0x58025408
 80026fc:	5802541c 	.word	0x5802541c
 8002700:	58025430 	.word	0x58025430
 8002704:	58025444 	.word	0x58025444
 8002708:	58025458 	.word	0x58025458
 800270c:	5802546c 	.word	0x5802546c
 8002710:	58025480 	.word	0x58025480
 8002714:	58025494 	.word	0x58025494
 8002718:	2300      	movs	r3, #0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800272c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a6d      	ldr	r2, [pc, #436]	; (80028e8 <HAL_DMA_Abort+0x444>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d04a      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6b      	ldr	r2, [pc, #428]	; (80028ec <HAL_DMA_Abort+0x448>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d045      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6a      	ldr	r2, [pc, #424]	; (80028f0 <HAL_DMA_Abort+0x44c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d040      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a68      	ldr	r2, [pc, #416]	; (80028f4 <HAL_DMA_Abort+0x450>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d03b      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a67      	ldr	r2, [pc, #412]	; (80028f8 <HAL_DMA_Abort+0x454>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d036      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a65      	ldr	r2, [pc, #404]	; (80028fc <HAL_DMA_Abort+0x458>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d031      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a64      	ldr	r2, [pc, #400]	; (8002900 <HAL_DMA_Abort+0x45c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d02c      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a62      	ldr	r2, [pc, #392]	; (8002904 <HAL_DMA_Abort+0x460>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d027      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a61      	ldr	r2, [pc, #388]	; (8002908 <HAL_DMA_Abort+0x464>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d022      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5f      	ldr	r2, [pc, #380]	; (800290c <HAL_DMA_Abort+0x468>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01d      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5e      	ldr	r2, [pc, #376]	; (8002910 <HAL_DMA_Abort+0x46c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d018      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5c      	ldr	r2, [pc, #368]	; (8002914 <HAL_DMA_Abort+0x470>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5b      	ldr	r2, [pc, #364]	; (8002918 <HAL_DMA_Abort+0x474>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00e      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a59      	ldr	r2, [pc, #356]	; (800291c <HAL_DMA_Abort+0x478>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a58      	ldr	r2, [pc, #352]	; (8002920 <HAL_DMA_Abort+0x47c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_Abort+0x32a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_DMA_Abort+0x480>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d108      	bne.n	80027e0 <HAL_DMA_Abort+0x33c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e007      	b.n	80027f0 <HAL_DMA_Abort+0x34c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027f0:	e013      	b.n	800281a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f2:	f7ff f933 	bl	8001a5c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d90c      	bls.n	800281a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2203      	movs	r2, #3
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e12d      	b.n	8002a76 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e5      	bne.n	80027f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2f      	ldr	r2, [pc, #188]	; (80028e8 <HAL_DMA_Abort+0x444>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d04a      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <HAL_DMA_Abort+0x448>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d045      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2c      	ldr	r2, [pc, #176]	; (80028f0 <HAL_DMA_Abort+0x44c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d040      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <HAL_DMA_Abort+0x450>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d03b      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <HAL_DMA_Abort+0x454>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d036      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_DMA_Abort+0x458>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d031      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a26      	ldr	r2, [pc, #152]	; (8002900 <HAL_DMA_Abort+0x45c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d02c      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a24      	ldr	r2, [pc, #144]	; (8002904 <HAL_DMA_Abort+0x460>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d027      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <HAL_DMA_Abort+0x464>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a21      	ldr	r2, [pc, #132]	; (800290c <HAL_DMA_Abort+0x468>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01d      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a20      	ldr	r2, [pc, #128]	; (8002910 <HAL_DMA_Abort+0x46c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d018      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_DMA_Abort+0x470>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_DMA_Abort+0x474>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00e      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_DMA_Abort+0x478>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d009      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_DMA_Abort+0x47c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_Abort+0x422>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_DMA_Abort+0x480>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_DMA_Abort+0x426>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_DMA_Abort+0x428>
 80028ca:	2300      	movs	r3, #0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d02b      	beq.n	8002928 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	223f      	movs	r2, #63	; 0x3f
 80028e0:	409a      	lsls	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	e02a      	b.n	800293e <HAL_DMA_Abort+0x49a>
 80028e8:	40020010 	.word	0x40020010
 80028ec:	40020028 	.word	0x40020028
 80028f0:	40020040 	.word	0x40020040
 80028f4:	40020058 	.word	0x40020058
 80028f8:	40020070 	.word	0x40020070
 80028fc:	40020088 	.word	0x40020088
 8002900:	400200a0 	.word	0x400200a0
 8002904:	400200b8 	.word	0x400200b8
 8002908:	40020410 	.word	0x40020410
 800290c:	40020428 	.word	0x40020428
 8002910:	40020440 	.word	0x40020440
 8002914:	40020458 	.word	0x40020458
 8002918:	40020470 	.word	0x40020470
 800291c:	40020488 	.word	0x40020488
 8002920:	400204a0 	.word	0x400204a0
 8002924:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	2201      	movs	r2, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a4f      	ldr	r2, [pc, #316]	; (8002a80 <HAL_DMA_Abort+0x5dc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d072      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a4d      	ldr	r2, [pc, #308]	; (8002a84 <HAL_DMA_Abort+0x5e0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d06d      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a4c      	ldr	r2, [pc, #304]	; (8002a88 <HAL_DMA_Abort+0x5e4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d068      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4a      	ldr	r2, [pc, #296]	; (8002a8c <HAL_DMA_Abort+0x5e8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d063      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a49      	ldr	r2, [pc, #292]	; (8002a90 <HAL_DMA_Abort+0x5ec>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d05e      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a47      	ldr	r2, [pc, #284]	; (8002a94 <HAL_DMA_Abort+0x5f0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d059      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a46      	ldr	r2, [pc, #280]	; (8002a98 <HAL_DMA_Abort+0x5f4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d054      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a44      	ldr	r2, [pc, #272]	; (8002a9c <HAL_DMA_Abort+0x5f8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d04f      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a43      	ldr	r2, [pc, #268]	; (8002aa0 <HAL_DMA_Abort+0x5fc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04a      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a41      	ldr	r2, [pc, #260]	; (8002aa4 <HAL_DMA_Abort+0x600>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d045      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a40      	ldr	r2, [pc, #256]	; (8002aa8 <HAL_DMA_Abort+0x604>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d040      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3e      	ldr	r2, [pc, #248]	; (8002aac <HAL_DMA_Abort+0x608>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d03b      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a3d      	ldr	r2, [pc, #244]	; (8002ab0 <HAL_DMA_Abort+0x60c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d036      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <HAL_DMA_Abort+0x610>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d031      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <HAL_DMA_Abort+0x614>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d02c      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a38      	ldr	r2, [pc, #224]	; (8002abc <HAL_DMA_Abort+0x618>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d027      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a37      	ldr	r2, [pc, #220]	; (8002ac0 <HAL_DMA_Abort+0x61c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a35      	ldr	r2, [pc, #212]	; (8002ac4 <HAL_DMA_Abort+0x620>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01d      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <HAL_DMA_Abort+0x624>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a32      	ldr	r2, [pc, #200]	; (8002acc <HAL_DMA_Abort+0x628>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a31      	ldr	r2, [pc, #196]	; (8002ad0 <HAL_DMA_Abort+0x62c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2f      	ldr	r2, [pc, #188]	; (8002ad4 <HAL_DMA_Abort+0x630>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ad8 <HAL_DMA_Abort+0x634>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Abort+0x58a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <HAL_DMA_Abort+0x638>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_DMA_Abort+0x58e>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_DMA_Abort+0x590>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d015      	beq.n	8002a64 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a40:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a58:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a62:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40020010 	.word	0x40020010
 8002a84:	40020028 	.word	0x40020028
 8002a88:	40020040 	.word	0x40020040
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	40020070 	.word	0x40020070
 8002a94:	40020088 	.word	0x40020088
 8002a98:	400200a0 	.word	0x400200a0
 8002a9c:	400200b8 	.word	0x400200b8
 8002aa0:	40020410 	.word	0x40020410
 8002aa4:	40020428 	.word	0x40020428
 8002aa8:	40020440 	.word	0x40020440
 8002aac:	40020458 	.word	0x40020458
 8002ab0:	40020470 	.word	0x40020470
 8002ab4:	40020488 	.word	0x40020488
 8002ab8:	400204a0 	.word	0x400204a0
 8002abc:	400204b8 	.word	0x400204b8
 8002ac0:	58025408 	.word	0x58025408
 8002ac4:	5802541c 	.word	0x5802541c
 8002ac8:	58025430 	.word	0x58025430
 8002acc:	58025444 	.word	0x58025444
 8002ad0:	58025458 	.word	0x58025458
 8002ad4:	5802546c 	.word	0x5802546c
 8002ad8:	58025480 	.word	0x58025480
 8002adc:	58025494 	.word	0x58025494

08002ae0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e205      	b.n	8002efe <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d004      	beq.n	8002b08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e1fa      	b.n	8002efe <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a8c      	ldr	r2, [pc, #560]	; (8002d40 <HAL_DMA_Abort_IT+0x260>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d04a      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a8b      	ldr	r2, [pc, #556]	; (8002d44 <HAL_DMA_Abort_IT+0x264>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d045      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a89      	ldr	r2, [pc, #548]	; (8002d48 <HAL_DMA_Abort_IT+0x268>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d040      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a88      	ldr	r2, [pc, #544]	; (8002d4c <HAL_DMA_Abort_IT+0x26c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d03b      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a86      	ldr	r2, [pc, #536]	; (8002d50 <HAL_DMA_Abort_IT+0x270>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d036      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a85      	ldr	r2, [pc, #532]	; (8002d54 <HAL_DMA_Abort_IT+0x274>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d031      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a83      	ldr	r2, [pc, #524]	; (8002d58 <HAL_DMA_Abort_IT+0x278>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02c      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a82      	ldr	r2, [pc, #520]	; (8002d5c <HAL_DMA_Abort_IT+0x27c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d027      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a80      	ldr	r2, [pc, #512]	; (8002d60 <HAL_DMA_Abort_IT+0x280>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d022      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a7f      	ldr	r2, [pc, #508]	; (8002d64 <HAL_DMA_Abort_IT+0x284>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d01d      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a7d      	ldr	r2, [pc, #500]	; (8002d68 <HAL_DMA_Abort_IT+0x288>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d018      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7c      	ldr	r2, [pc, #496]	; (8002d6c <HAL_DMA_Abort_IT+0x28c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a7a      	ldr	r2, [pc, #488]	; (8002d70 <HAL_DMA_Abort_IT+0x290>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00e      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a79      	ldr	r2, [pc, #484]	; (8002d74 <HAL_DMA_Abort_IT+0x294>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a77      	ldr	r2, [pc, #476]	; (8002d78 <HAL_DMA_Abort_IT+0x298>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xc8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a76      	ldr	r2, [pc, #472]	; (8002d7c <HAL_DMA_Abort_IT+0x29c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_DMA_Abort_IT+0xcc>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_DMA_Abort_IT+0xce>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d065      	beq.n	8002c7e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a60      	ldr	r2, [pc, #384]	; (8002d40 <HAL_DMA_Abort_IT+0x260>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04a      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a5e      	ldr	r2, [pc, #376]	; (8002d44 <HAL_DMA_Abort_IT+0x264>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d045      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5d      	ldr	r2, [pc, #372]	; (8002d48 <HAL_DMA_Abort_IT+0x268>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d040      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5b      	ldr	r2, [pc, #364]	; (8002d4c <HAL_DMA_Abort_IT+0x26c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d03b      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a5a      	ldr	r2, [pc, #360]	; (8002d50 <HAL_DMA_Abort_IT+0x270>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d036      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_DMA_Abort_IT+0x274>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d031      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a57      	ldr	r2, [pc, #348]	; (8002d58 <HAL_DMA_Abort_IT+0x278>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d02c      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a55      	ldr	r2, [pc, #340]	; (8002d5c <HAL_DMA_Abort_IT+0x27c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d027      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a54      	ldr	r2, [pc, #336]	; (8002d60 <HAL_DMA_Abort_IT+0x280>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_DMA_Abort_IT+0x284>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01d      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a51      	ldr	r2, [pc, #324]	; (8002d68 <HAL_DMA_Abort_IT+0x288>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a4f      	ldr	r2, [pc, #316]	; (8002d6c <HAL_DMA_Abort_IT+0x28c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4e      	ldr	r2, [pc, #312]	; (8002d70 <HAL_DMA_Abort_IT+0x290>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a4c      	ldr	r2, [pc, #304]	; (8002d74 <HAL_DMA_Abort_IT+0x294>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a4b      	ldr	r2, [pc, #300]	; (8002d78 <HAL_DMA_Abort_IT+0x298>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x17a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a49      	ldr	r2, [pc, #292]	; (8002d7c <HAL_DMA_Abort_IT+0x29c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d108      	bne.n	8002c6c <HAL_DMA_Abort_IT+0x18c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e147      	b.n	8002efc <HAL_DMA_Abort_IT+0x41c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e13e      	b.n	8002efc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 020e 	bic.w	r2, r2, #14
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2b      	ldr	r2, [pc, #172]	; (8002d40 <HAL_DMA_Abort_IT+0x260>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d04a      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a29      	ldr	r2, [pc, #164]	; (8002d44 <HAL_DMA_Abort_IT+0x264>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d045      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_DMA_Abort_IT+0x268>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d040      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <HAL_DMA_Abort_IT+0x26c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d03b      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <HAL_DMA_Abort_IT+0x270>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d036      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <HAL_DMA_Abort_IT+0x274>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d031      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_DMA_Abort_IT+0x278>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d02c      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <HAL_DMA_Abort_IT+0x27c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d027      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1f      	ldr	r2, [pc, #124]	; (8002d60 <HAL_DMA_Abort_IT+0x280>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_DMA_Abort_IT+0x284>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <HAL_DMA_Abort_IT+0x288>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d018      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <HAL_DMA_Abort_IT+0x28c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_DMA_Abort_IT+0x290>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00e      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <HAL_DMA_Abort_IT+0x294>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <HAL_DMA_Abort_IT+0x298>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x24e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <HAL_DMA_Abort_IT+0x29c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d128      	bne.n	8002d80 <HAL_DMA_Abort_IT+0x2a0>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e027      	b.n	8002d90 <HAL_DMA_Abort_IT+0x2b0>
 8002d40:	40020010 	.word	0x40020010
 8002d44:	40020028 	.word	0x40020028
 8002d48:	40020040 	.word	0x40020040
 8002d4c:	40020058 	.word	0x40020058
 8002d50:	40020070 	.word	0x40020070
 8002d54:	40020088 	.word	0x40020088
 8002d58:	400200a0 	.word	0x400200a0
 8002d5c:	400200b8 	.word	0x400200b8
 8002d60:	40020410 	.word	0x40020410
 8002d64:	40020428 	.word	0x40020428
 8002d68:	40020440 	.word	0x40020440
 8002d6c:	40020458 	.word	0x40020458
 8002d70:	40020470 	.word	0x40020470
 8002d74:	40020488 	.word	0x40020488
 8002d78:	400204a0 	.word	0x400204a0
 8002d7c:	400204b8 	.word	0x400204b8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5c      	ldr	r2, [pc, #368]	; (8002f08 <HAL_DMA_Abort_IT+0x428>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d072      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5b      	ldr	r2, [pc, #364]	; (8002f0c <HAL_DMA_Abort_IT+0x42c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d06d      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a59      	ldr	r2, [pc, #356]	; (8002f10 <HAL_DMA_Abort_IT+0x430>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d068      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_DMA_Abort_IT+0x434>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d063      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_DMA_Abort_IT+0x438>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d05e      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a55      	ldr	r2, [pc, #340]	; (8002f1c <HAL_DMA_Abort_IT+0x43c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d059      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <HAL_DMA_Abort_IT+0x440>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d054      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_DMA_Abort_IT+0x444>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d04f      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a50      	ldr	r2, [pc, #320]	; (8002f28 <HAL_DMA_Abort_IT+0x448>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d04a      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4f      	ldr	r2, [pc, #316]	; (8002f2c <HAL_DMA_Abort_IT+0x44c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d045      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4d      	ldr	r2, [pc, #308]	; (8002f30 <HAL_DMA_Abort_IT+0x450>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d040      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4c      	ldr	r2, [pc, #304]	; (8002f34 <HAL_DMA_Abort_IT+0x454>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d03b      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a4a      	ldr	r2, [pc, #296]	; (8002f38 <HAL_DMA_Abort_IT+0x458>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d036      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a49      	ldr	r2, [pc, #292]	; (8002f3c <HAL_DMA_Abort_IT+0x45c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d031      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a47      	ldr	r2, [pc, #284]	; (8002f40 <HAL_DMA_Abort_IT+0x460>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d02c      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <HAL_DMA_Abort_IT+0x464>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d027      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a44      	ldr	r2, [pc, #272]	; (8002f48 <HAL_DMA_Abort_IT+0x468>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d022      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a43      	ldr	r2, [pc, #268]	; (8002f4c <HAL_DMA_Abort_IT+0x46c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d01d      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a41      	ldr	r2, [pc, #260]	; (8002f50 <HAL_DMA_Abort_IT+0x470>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d018      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a40      	ldr	r2, [pc, #256]	; (8002f54 <HAL_DMA_Abort_IT+0x474>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3e      	ldr	r2, [pc, #248]	; (8002f58 <HAL_DMA_Abort_IT+0x478>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00e      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a3d      	ldr	r2, [pc, #244]	; (8002f5c <HAL_DMA_Abort_IT+0x47c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d009      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a3b      	ldr	r2, [pc, #236]	; (8002f60 <HAL_DMA_Abort_IT+0x480>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x3a0>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a3a      	ldr	r2, [pc, #232]	; (8002f64 <HAL_DMA_Abort_IT+0x484>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_DMA_Abort_IT+0x3a4>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_DMA_Abort_IT+0x3a6>
 8002e84:	2300      	movs	r3, #0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d028      	beq.n	8002edc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002eb8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002eda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40020010 	.word	0x40020010
 8002f0c:	40020028 	.word	0x40020028
 8002f10:	40020040 	.word	0x40020040
 8002f14:	40020058 	.word	0x40020058
 8002f18:	40020070 	.word	0x40020070
 8002f1c:	40020088 	.word	0x40020088
 8002f20:	400200a0 	.word	0x400200a0
 8002f24:	400200b8 	.word	0x400200b8
 8002f28:	40020410 	.word	0x40020410
 8002f2c:	40020428 	.word	0x40020428
 8002f30:	40020440 	.word	0x40020440
 8002f34:	40020458 	.word	0x40020458
 8002f38:	40020470 	.word	0x40020470
 8002f3c:	40020488 	.word	0x40020488
 8002f40:	400204a0 	.word	0x400204a0
 8002f44:	400204b8 	.word	0x400204b8
 8002f48:	58025408 	.word	0x58025408
 8002f4c:	5802541c 	.word	0x5802541c
 8002f50:	58025430 	.word	0x58025430
 8002f54:	58025444 	.word	0x58025444
 8002f58:	58025458 	.word	0x58025458
 8002f5c:	5802546c 	.word	0x5802546c
 8002f60:	58025480 	.word	0x58025480
 8002f64:	58025494 	.word	0x58025494

08002f68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f74:	4b67      	ldr	r3, [pc, #412]	; (8003114 <HAL_DMA_IRQHandler+0x1ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a67      	ldr	r2, [pc, #412]	; (8003118 <HAL_DMA_IRQHandler+0x1b0>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a5f      	ldr	r2, [pc, #380]	; (800311c <HAL_DMA_IRQHandler+0x1b4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d04a      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a5d      	ldr	r2, [pc, #372]	; (8003120 <HAL_DMA_IRQHandler+0x1b8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d045      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a5c      	ldr	r2, [pc, #368]	; (8003124 <HAL_DMA_IRQHandler+0x1bc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d040      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a5a      	ldr	r2, [pc, #360]	; (8003128 <HAL_DMA_IRQHandler+0x1c0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d03b      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a59      	ldr	r2, [pc, #356]	; (800312c <HAL_DMA_IRQHandler+0x1c4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d036      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a57      	ldr	r2, [pc, #348]	; (8003130 <HAL_DMA_IRQHandler+0x1c8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a56      	ldr	r2, [pc, #344]	; (8003134 <HAL_DMA_IRQHandler+0x1cc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d02c      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a54      	ldr	r2, [pc, #336]	; (8003138 <HAL_DMA_IRQHandler+0x1d0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d027      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a53      	ldr	r2, [pc, #332]	; (800313c <HAL_DMA_IRQHandler+0x1d4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a51      	ldr	r2, [pc, #324]	; (8003140 <HAL_DMA_IRQHandler+0x1d8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01d      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_DMA_IRQHandler+0x1dc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d018      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a4e      	ldr	r2, [pc, #312]	; (8003148 <HAL_DMA_IRQHandler+0x1e0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a4d      	ldr	r2, [pc, #308]	; (800314c <HAL_DMA_IRQHandler+0x1e4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00e      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a4b      	ldr	r2, [pc, #300]	; (8003150 <HAL_DMA_IRQHandler+0x1e8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a4a      	ldr	r2, [pc, #296]	; (8003154 <HAL_DMA_IRQHandler+0x1ec>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_DMA_IRQHandler+0xd2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a48      	ldr	r2, [pc, #288]	; (8003158 <HAL_DMA_IRQHandler+0x1f0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d101      	bne.n	800303e <HAL_DMA_IRQHandler+0xd6>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_DMA_IRQHandler+0xd8>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 842b 	beq.w	800389c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2208      	movs	r2, #8
 8003050:	409a      	lsls	r2, r3
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80a2 	beq.w	80031a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2e      	ldr	r2, [pc, #184]	; (800311c <HAL_DMA_IRQHandler+0x1b4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d04a      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <HAL_DMA_IRQHandler+0x1b8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d045      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2b      	ldr	r2, [pc, #172]	; (8003124 <HAL_DMA_IRQHandler+0x1bc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d040      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <HAL_DMA_IRQHandler+0x1c0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d03b      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <HAL_DMA_IRQHandler+0x1c4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d036      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a27      	ldr	r2, [pc, #156]	; (8003130 <HAL_DMA_IRQHandler+0x1c8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d031      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a25      	ldr	r2, [pc, #148]	; (8003134 <HAL_DMA_IRQHandler+0x1cc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d02c      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a24      	ldr	r2, [pc, #144]	; (8003138 <HAL_DMA_IRQHandler+0x1d0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d027      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <HAL_DMA_IRQHandler+0x1d4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d022      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a21      	ldr	r2, [pc, #132]	; (8003140 <HAL_DMA_IRQHandler+0x1d8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d01d      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <HAL_DMA_IRQHandler+0x1dc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <HAL_DMA_IRQHandler+0x1e0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_DMA_IRQHandler+0x1e4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_DMA_IRQHandler+0x1e8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a19      	ldr	r2, [pc, #100]	; (8003154 <HAL_DMA_IRQHandler+0x1ec>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_DMA_IRQHandler+0x194>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a18      	ldr	r2, [pc, #96]	; (8003158 <HAL_DMA_IRQHandler+0x1f0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d12f      	bne.n	800315c <HAL_DMA_IRQHandler+0x1f4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e02e      	b.n	8003170 <HAL_DMA_IRQHandler+0x208>
 8003112:	bf00      	nop
 8003114:	24000000 	.word	0x24000000
 8003118:	1b4e81b5 	.word	0x1b4e81b5
 800311c:	40020010 	.word	0x40020010
 8003120:	40020028 	.word	0x40020028
 8003124:	40020040 	.word	0x40020040
 8003128:	40020058 	.word	0x40020058
 800312c:	40020070 	.word	0x40020070
 8003130:	40020088 	.word	0x40020088
 8003134:	400200a0 	.word	0x400200a0
 8003138:	400200b8 	.word	0x400200b8
 800313c:	40020410 	.word	0x40020410
 8003140:	40020428 	.word	0x40020428
 8003144:	40020440 	.word	0x40020440
 8003148:	40020458 	.word	0x40020458
 800314c:	40020470 	.word	0x40020470
 8003150:	40020488 	.word	0x40020488
 8003154:	400204a0 	.word	0x400204a0
 8003158:	400204b8 	.word	0x400204b8
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d015      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0204 	bic.w	r2, r2, #4
 8003182:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2208      	movs	r2, #8
 800318e:	409a      	lsls	r2, r3
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d06e      	beq.n	8003294 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a69      	ldr	r2, [pc, #420]	; (8003360 <HAL_DMA_IRQHandler+0x3f8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d04a      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a67      	ldr	r2, [pc, #412]	; (8003364 <HAL_DMA_IRQHandler+0x3fc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d045      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a66      	ldr	r2, [pc, #408]	; (8003368 <HAL_DMA_IRQHandler+0x400>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d040      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a64      	ldr	r2, [pc, #400]	; (800336c <HAL_DMA_IRQHandler+0x404>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d03b      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a63      	ldr	r2, [pc, #396]	; (8003370 <HAL_DMA_IRQHandler+0x408>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d036      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a61      	ldr	r2, [pc, #388]	; (8003374 <HAL_DMA_IRQHandler+0x40c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d031      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a60      	ldr	r2, [pc, #384]	; (8003378 <HAL_DMA_IRQHandler+0x410>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d02c      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a5e      	ldr	r2, [pc, #376]	; (800337c <HAL_DMA_IRQHandler+0x414>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d027      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a5d      	ldr	r2, [pc, #372]	; (8003380 <HAL_DMA_IRQHandler+0x418>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5b      	ldr	r2, [pc, #364]	; (8003384 <HAL_DMA_IRQHandler+0x41c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01d      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a5a      	ldr	r2, [pc, #360]	; (8003388 <HAL_DMA_IRQHandler+0x420>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_DMA_IRQHandler+0x424>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a57      	ldr	r2, [pc, #348]	; (8003390 <HAL_DMA_IRQHandler+0x428>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a55      	ldr	r2, [pc, #340]	; (8003394 <HAL_DMA_IRQHandler+0x42c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a54      	ldr	r2, [pc, #336]	; (8003398 <HAL_DMA_IRQHandler+0x430>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2ee>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_DMA_IRQHandler+0x434>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d10a      	bne.n	800326c <HAL_DMA_IRQHandler+0x304>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e003      	b.n	8003274 <HAL_DMA_IRQHandler+0x30c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00d      	beq.n	8003294 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2201      	movs	r2, #1
 8003282:	409a      	lsls	r2, r3
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	f043 0202 	orr.w	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2204      	movs	r2, #4
 800329e:	409a      	lsls	r2, r3
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 808f 	beq.w	80033c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <HAL_DMA_IRQHandler+0x3f8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d04a      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <HAL_DMA_IRQHandler+0x3fc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d045      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a29      	ldr	r2, [pc, #164]	; (8003368 <HAL_DMA_IRQHandler+0x400>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d040      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <HAL_DMA_IRQHandler+0x404>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d03b      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a26      	ldr	r2, [pc, #152]	; (8003370 <HAL_DMA_IRQHandler+0x408>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d036      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a24      	ldr	r2, [pc, #144]	; (8003374 <HAL_DMA_IRQHandler+0x40c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d031      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a23      	ldr	r2, [pc, #140]	; (8003378 <HAL_DMA_IRQHandler+0x410>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d02c      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a21      	ldr	r2, [pc, #132]	; (800337c <HAL_DMA_IRQHandler+0x414>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d027      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a20      	ldr	r2, [pc, #128]	; (8003380 <HAL_DMA_IRQHandler+0x418>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <HAL_DMA_IRQHandler+0x41c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01d      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_DMA_IRQHandler+0x420>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d018      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1b      	ldr	r2, [pc, #108]	; (800338c <HAL_DMA_IRQHandler+0x424>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <HAL_DMA_IRQHandler+0x428>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_DMA_IRQHandler+0x42c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a17      	ldr	r2, [pc, #92]	; (8003398 <HAL_DMA_IRQHandler+0x430>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d004      	beq.n	800334a <HAL_DMA_IRQHandler+0x3e2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a15      	ldr	r2, [pc, #84]	; (800339c <HAL_DMA_IRQHandler+0x434>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d12a      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x438>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e023      	b.n	80033a8 <HAL_DMA_IRQHandler+0x440>
 8003360:	40020010 	.word	0x40020010
 8003364:	40020028 	.word	0x40020028
 8003368:	40020040 	.word	0x40020040
 800336c:	40020058 	.word	0x40020058
 8003370:	40020070 	.word	0x40020070
 8003374:	40020088 	.word	0x40020088
 8003378:	400200a0 	.word	0x400200a0
 800337c:	400200b8 	.word	0x400200b8
 8003380:	40020410 	.word	0x40020410
 8003384:	40020428 	.word	0x40020428
 8003388:	40020440 	.word	0x40020440
 800338c:	40020458 	.word	0x40020458
 8003390:	40020470 	.word	0x40020470
 8003394:	40020488 	.word	0x40020488
 8003398:	400204a0 	.word	0x400204a0
 800339c:	400204b8 	.word	0x400204b8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2204      	movs	r2, #4
 80033b6:	409a      	lsls	r2, r3
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	f043 0204 	orr.w	r2, r3, #4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2210      	movs	r2, #16
 80033d2:	409a      	lsls	r2, r3
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80a6 	beq.w	800352a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a85      	ldr	r2, [pc, #532]	; (80035f8 <HAL_DMA_IRQHandler+0x690>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d04a      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a83      	ldr	r2, [pc, #524]	; (80035fc <HAL_DMA_IRQHandler+0x694>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d045      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a82      	ldr	r2, [pc, #520]	; (8003600 <HAL_DMA_IRQHandler+0x698>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d040      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a80      	ldr	r2, [pc, #512]	; (8003604 <HAL_DMA_IRQHandler+0x69c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d03b      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7f      	ldr	r2, [pc, #508]	; (8003608 <HAL_DMA_IRQHandler+0x6a0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d036      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a7d      	ldr	r2, [pc, #500]	; (800360c <HAL_DMA_IRQHandler+0x6a4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d031      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7c      	ldr	r2, [pc, #496]	; (8003610 <HAL_DMA_IRQHandler+0x6a8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d02c      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a7a      	ldr	r2, [pc, #488]	; (8003614 <HAL_DMA_IRQHandler+0x6ac>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d027      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a79      	ldr	r2, [pc, #484]	; (8003618 <HAL_DMA_IRQHandler+0x6b0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d022      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a77      	ldr	r2, [pc, #476]	; (800361c <HAL_DMA_IRQHandler+0x6b4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01d      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a76      	ldr	r2, [pc, #472]	; (8003620 <HAL_DMA_IRQHandler+0x6b8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d018      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a74      	ldr	r2, [pc, #464]	; (8003624 <HAL_DMA_IRQHandler+0x6bc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a73      	ldr	r2, [pc, #460]	; (8003628 <HAL_DMA_IRQHandler+0x6c0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a71      	ldr	r2, [pc, #452]	; (800362c <HAL_DMA_IRQHandler+0x6c4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a70      	ldr	r2, [pc, #448]	; (8003630 <HAL_DMA_IRQHandler+0x6c8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_DMA_IRQHandler+0x516>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <HAL_DMA_IRQHandler+0x6cc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d10a      	bne.n	8003494 <HAL_DMA_IRQHandler+0x52c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e009      	b.n	80034a8 <HAL_DMA_IRQHandler+0x540>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d03e      	beq.n	800352a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	2210      	movs	r2, #16
 80034b6:	409a      	lsls	r2, r3
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d024      	beq.n	800352a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
 80034e8:	e01f      	b.n	800352a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01b      	beq.n	800352a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
 80034fa:	e016      	b.n	800352a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0208 	bic.w	r2, r2, #8
 8003518:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2220      	movs	r2, #32
 8003534:	409a      	lsls	r2, r3
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8110 	beq.w	8003760 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2c      	ldr	r2, [pc, #176]	; (80035f8 <HAL_DMA_IRQHandler+0x690>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d04a      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <HAL_DMA_IRQHandler+0x694>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d045      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a29      	ldr	r2, [pc, #164]	; (8003600 <HAL_DMA_IRQHandler+0x698>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d040      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_DMA_IRQHandler+0x69c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d03b      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <HAL_DMA_IRQHandler+0x6a0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d036      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a25      	ldr	r2, [pc, #148]	; (800360c <HAL_DMA_IRQHandler+0x6a4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d031      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <HAL_DMA_IRQHandler+0x6a8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02c      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_DMA_IRQHandler+0x6ac>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d027      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a20      	ldr	r2, [pc, #128]	; (8003618 <HAL_DMA_IRQHandler+0x6b0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d022      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_DMA_IRQHandler+0x6b4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d01d      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_DMA_IRQHandler+0x6b8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d018      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_DMA_IRQHandler+0x6bc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <HAL_DMA_IRQHandler+0x6c0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00e      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_DMA_IRQHandler+0x6c4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a17      	ldr	r2, [pc, #92]	; (8003630 <HAL_DMA_IRQHandler+0x6c8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d004      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x678>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a16      	ldr	r2, [pc, #88]	; (8003634 <HAL_DMA_IRQHandler+0x6cc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d12b      	bne.n	8003638 <HAL_DMA_IRQHandler+0x6d0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e02a      	b.n	800364c <HAL_DMA_IRQHandler+0x6e4>
 80035f6:	bf00      	nop
 80035f8:	40020010 	.word	0x40020010
 80035fc:	40020028 	.word	0x40020028
 8003600:	40020040 	.word	0x40020040
 8003604:	40020058 	.word	0x40020058
 8003608:	40020070 	.word	0x40020070
 800360c:	40020088 	.word	0x40020088
 8003610:	400200a0 	.word	0x400200a0
 8003614:	400200b8 	.word	0x400200b8
 8003618:	40020410 	.word	0x40020410
 800361c:	40020428 	.word	0x40020428
 8003620:	40020440 	.word	0x40020440
 8003624:	40020458 	.word	0x40020458
 8003628:	40020470 	.word	0x40020470
 800362c:	40020488 	.word	0x40020488
 8003630:	400204a0 	.word	0x400204a0
 8003634:	400204b8 	.word	0x400204b8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	bf14      	ite	ne
 8003646:	2301      	movne	r3, #1
 8003648:	2300      	moveq	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8087 	beq.w	8003760 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2220      	movs	r2, #32
 800365c:	409a      	lsls	r2, r3
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b04      	cmp	r3, #4
 800366c:	d139      	bne.n	80036e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0216 	bic.w	r2, r2, #22
 800367c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <HAL_DMA_IRQHandler+0x736>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0208 	bic.w	r2, r2, #8
 80036ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	223f      	movs	r2, #63	; 0x3f
 80036b8:	409a      	lsls	r2, r3
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 834a 	beq.w	8003d6c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
          }
          return;
 80036e0:	e344      	b.n	8003d6c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	2b00      	cmp	r3, #0
 8003704:	d02c      	beq.n	8003760 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e027      	b.n	8003760 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d023      	beq.n	8003760 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
 8003720:	e01e      	b.n	8003760 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10f      	bne.n	8003750 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0210 	bic.w	r2, r2, #16
 800373e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8306 	beq.w	8003d76 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8088 	beq.w	8003888 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2204      	movs	r2, #4
 800377c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a7a      	ldr	r2, [pc, #488]	; (8003970 <HAL_DMA_IRQHandler+0xa08>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d04a      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a79      	ldr	r2, [pc, #484]	; (8003974 <HAL_DMA_IRQHandler+0xa0c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d045      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a77      	ldr	r2, [pc, #476]	; (8003978 <HAL_DMA_IRQHandler+0xa10>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d040      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a76      	ldr	r2, [pc, #472]	; (800397c <HAL_DMA_IRQHandler+0xa14>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d03b      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a74      	ldr	r2, [pc, #464]	; (8003980 <HAL_DMA_IRQHandler+0xa18>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d036      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a73      	ldr	r2, [pc, #460]	; (8003984 <HAL_DMA_IRQHandler+0xa1c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d031      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a71      	ldr	r2, [pc, #452]	; (8003988 <HAL_DMA_IRQHandler+0xa20>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d02c      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a70      	ldr	r2, [pc, #448]	; (800398c <HAL_DMA_IRQHandler+0xa24>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d027      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6e      	ldr	r2, [pc, #440]	; (8003990 <HAL_DMA_IRQHandler+0xa28>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d022      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a6d      	ldr	r2, [pc, #436]	; (8003994 <HAL_DMA_IRQHandler+0xa2c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d01d      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a6b      	ldr	r2, [pc, #428]	; (8003998 <HAL_DMA_IRQHandler+0xa30>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6a      	ldr	r2, [pc, #424]	; (800399c <HAL_DMA_IRQHandler+0xa34>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a68      	ldr	r2, [pc, #416]	; (80039a0 <HAL_DMA_IRQHandler+0xa38>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a67      	ldr	r2, [pc, #412]	; (80039a4 <HAL_DMA_IRQHandler+0xa3c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a65      	ldr	r2, [pc, #404]	; (80039a8 <HAL_DMA_IRQHandler+0xa40>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_DMA_IRQHandler+0x8b8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a64      	ldr	r2, [pc, #400]	; (80039ac <HAL_DMA_IRQHandler+0xa44>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <HAL_DMA_IRQHandler+0x8ca>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e007      	b.n	8003842 <HAL_DMA_IRQHandler+0x8da>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384a:	429a      	cmp	r2, r3
 800384c:	d307      	bcc.n	800385e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f2      	bne.n	8003842 <HAL_DMA_IRQHandler+0x8da>
 800385c:	e000      	b.n	8003860 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800385e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2203      	movs	r2, #3
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800387e:	e003      	b.n	8003888 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8272 	beq.w	8003d76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
 800389a:	e26c      	b.n	8003d76 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a43      	ldr	r2, [pc, #268]	; (80039b0 <HAL_DMA_IRQHandler+0xa48>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d022      	beq.n	80038ec <HAL_DMA_IRQHandler+0x984>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a42      	ldr	r2, [pc, #264]	; (80039b4 <HAL_DMA_IRQHandler+0xa4c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d01d      	beq.n	80038ec <HAL_DMA_IRQHandler+0x984>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a40      	ldr	r2, [pc, #256]	; (80039b8 <HAL_DMA_IRQHandler+0xa50>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d018      	beq.n	80038ec <HAL_DMA_IRQHandler+0x984>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3f      	ldr	r2, [pc, #252]	; (80039bc <HAL_DMA_IRQHandler+0xa54>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <HAL_DMA_IRQHandler+0x984>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a3d      	ldr	r2, [pc, #244]	; (80039c0 <HAL_DMA_IRQHandler+0xa58>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00e      	beq.n	80038ec <HAL_DMA_IRQHandler+0x984>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <HAL_DMA_IRQHandler+0xa5c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_DMA_IRQHandler+0x984>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <HAL_DMA_IRQHandler+0xa60>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <HAL_DMA_IRQHandler+0x984>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a39      	ldr	r2, [pc, #228]	; (80039cc <HAL_DMA_IRQHandler+0xa64>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <HAL_DMA_IRQHandler+0x988>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_DMA_IRQHandler+0x98a>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 823f 	beq.w	8003d76 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	2204      	movs	r2, #4
 800390a:	409a      	lsls	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80cd 	beq.w	8003ab0 <HAL_DMA_IRQHandler+0xb48>
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80c7 	beq.w	8003ab0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2204      	movs	r2, #4
 800392c:	409a      	lsls	r2, r3
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d049      	beq.n	80039d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8210 	beq.w	8003d70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003958:	e20a      	b.n	8003d70 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8206 	beq.w	8003d70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800396c:	e200      	b.n	8003d70 <HAL_DMA_IRQHandler+0xe08>
 800396e:	bf00      	nop
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
 80039b0:	58025408 	.word	0x58025408
 80039b4:	5802541c 	.word	0x5802541c
 80039b8:	58025430 	.word	0x58025430
 80039bc:	58025444 	.word	0x58025444
 80039c0:	58025458 	.word	0x58025458
 80039c4:	5802546c 	.word	0x5802546c
 80039c8:	58025480 	.word	0x58025480
 80039cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d160      	bne.n	8003a9c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a8c      	ldr	r2, [pc, #560]	; (8003c10 <HAL_DMA_IRQHandler+0xca8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d04a      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a8a      	ldr	r2, [pc, #552]	; (8003c14 <HAL_DMA_IRQHandler+0xcac>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a89      	ldr	r2, [pc, #548]	; (8003c18 <HAL_DMA_IRQHandler+0xcb0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a87      	ldr	r2, [pc, #540]	; (8003c1c <HAL_DMA_IRQHandler+0xcb4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d03b      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a86      	ldr	r2, [pc, #536]	; (8003c20 <HAL_DMA_IRQHandler+0xcb8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a84      	ldr	r2, [pc, #528]	; (8003c24 <HAL_DMA_IRQHandler+0xcbc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a83      	ldr	r2, [pc, #524]	; (8003c28 <HAL_DMA_IRQHandler+0xcc0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d02c      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a81      	ldr	r2, [pc, #516]	; (8003c2c <HAL_DMA_IRQHandler+0xcc4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a80      	ldr	r2, [pc, #512]	; (8003c30 <HAL_DMA_IRQHandler+0xcc8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7e      	ldr	r2, [pc, #504]	; (8003c34 <HAL_DMA_IRQHandler+0xccc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7d      	ldr	r2, [pc, #500]	; (8003c38 <HAL_DMA_IRQHandler+0xcd0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7b      	ldr	r2, [pc, #492]	; (8003c3c <HAL_DMA_IRQHandler+0xcd4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7a      	ldr	r2, [pc, #488]	; (8003c40 <HAL_DMA_IRQHandler+0xcd8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a78      	ldr	r2, [pc, #480]	; (8003c44 <HAL_DMA_IRQHandler+0xcdc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a77      	ldr	r2, [pc, #476]	; (8003c48 <HAL_DMA_IRQHandler+0xce0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xb12>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a75      	ldr	r2, [pc, #468]	; (8003c4c <HAL_DMA_IRQHandler+0xce4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <HAL_DMA_IRQHandler+0xb24>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0208 	bic.w	r2, r2, #8
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e007      	b.n	8003a9c <HAL_DMA_IRQHandler+0xb34>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0204 	bic.w	r2, r2, #4
 8003a9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8165 	beq.w	8003d70 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aae:	e15f      	b.n	8003d70 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2202      	movs	r2, #2
 8003aba:	409a      	lsls	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80c5 	beq.w	8003c50 <HAL_DMA_IRQHandler+0xce8>
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80bf 	beq.w	8003c50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2202      	movs	r2, #2
 8003adc:	409a      	lsls	r2, r3
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 813a 	beq.w	8003d74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b08:	e134      	b.n	8003d74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8130 	beq.w	8003d74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b1c:	e12a      	b.n	8003d74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d168      	bne.n	8003bfa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a38      	ldr	r2, [pc, #224]	; (8003c10 <HAL_DMA_IRQHandler+0xca8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04a      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a37      	ldr	r2, [pc, #220]	; (8003c14 <HAL_DMA_IRQHandler+0xcac>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d045      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a35      	ldr	r2, [pc, #212]	; (8003c18 <HAL_DMA_IRQHandler+0xcb0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d040      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a34      	ldr	r2, [pc, #208]	; (8003c1c <HAL_DMA_IRQHandler+0xcb4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d03b      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a32      	ldr	r2, [pc, #200]	; (8003c20 <HAL_DMA_IRQHandler+0xcb8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d036      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a31      	ldr	r2, [pc, #196]	; (8003c24 <HAL_DMA_IRQHandler+0xcbc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d031      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2f      	ldr	r2, [pc, #188]	; (8003c28 <HAL_DMA_IRQHandler+0xcc0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d02c      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2e      	ldr	r2, [pc, #184]	; (8003c2c <HAL_DMA_IRQHandler+0xcc4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d027      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a2c      	ldr	r2, [pc, #176]	; (8003c30 <HAL_DMA_IRQHandler+0xcc8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2b      	ldr	r2, [pc, #172]	; (8003c34 <HAL_DMA_IRQHandler+0xccc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <HAL_DMA_IRQHandler+0xcd0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a28      	ldr	r2, [pc, #160]	; (8003c3c <HAL_DMA_IRQHandler+0xcd4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a26      	ldr	r2, [pc, #152]	; (8003c40 <HAL_DMA_IRQHandler+0xcd8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a25      	ldr	r2, [pc, #148]	; (8003c44 <HAL_DMA_IRQHandler+0xcdc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <HAL_DMA_IRQHandler+0xce0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0xc60>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <HAL_DMA_IRQHandler+0xce4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <HAL_DMA_IRQHandler+0xc72>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0214 	bic.w	r2, r2, #20
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e007      	b.n	8003bea <HAL_DMA_IRQHandler+0xc82>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 020a 	bic.w	r2, r2, #10
 8003be8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80b8 	beq.w	8003d74 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c0c:	e0b2      	b.n	8003d74 <HAL_DMA_IRQHandler+0xe0c>
 8003c0e:	bf00      	nop
 8003c10:	40020010 	.word	0x40020010
 8003c14:	40020028 	.word	0x40020028
 8003c18:	40020040 	.word	0x40020040
 8003c1c:	40020058 	.word	0x40020058
 8003c20:	40020070 	.word	0x40020070
 8003c24:	40020088 	.word	0x40020088
 8003c28:	400200a0 	.word	0x400200a0
 8003c2c:	400200b8 	.word	0x400200b8
 8003c30:	40020410 	.word	0x40020410
 8003c34:	40020428 	.word	0x40020428
 8003c38:	40020440 	.word	0x40020440
 8003c3c:	40020458 	.word	0x40020458
 8003c40:	40020470 	.word	0x40020470
 8003c44:	40020488 	.word	0x40020488
 8003c48:	400204a0 	.word	0x400204a0
 8003c4c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2208      	movs	r2, #8
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8088 	beq.w	8003d76 <HAL_DMA_IRQHandler+0xe0e>
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8082 	beq.w	8003d76 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a41      	ldr	r2, [pc, #260]	; (8003d7c <HAL_DMA_IRQHandler+0xe14>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d04a      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3f      	ldr	r2, [pc, #252]	; (8003d80 <HAL_DMA_IRQHandler+0xe18>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d045      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a3e      	ldr	r2, [pc, #248]	; (8003d84 <HAL_DMA_IRQHandler+0xe1c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d040      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a3c      	ldr	r2, [pc, #240]	; (8003d88 <HAL_DMA_IRQHandler+0xe20>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d03b      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <HAL_DMA_IRQHandler+0xe24>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d036      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a39      	ldr	r2, [pc, #228]	; (8003d90 <HAL_DMA_IRQHandler+0xe28>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d031      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a38      	ldr	r2, [pc, #224]	; (8003d94 <HAL_DMA_IRQHandler+0xe2c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d02c      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a36      	ldr	r2, [pc, #216]	; (8003d98 <HAL_DMA_IRQHandler+0xe30>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d027      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a35      	ldr	r2, [pc, #212]	; (8003d9c <HAL_DMA_IRQHandler+0xe34>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a33      	ldr	r2, [pc, #204]	; (8003da0 <HAL_DMA_IRQHandler+0xe38>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01d      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a32      	ldr	r2, [pc, #200]	; (8003da4 <HAL_DMA_IRQHandler+0xe3c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <HAL_DMA_IRQHandler+0xe40>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2f      	ldr	r2, [pc, #188]	; (8003dac <HAL_DMA_IRQHandler+0xe44>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2d      	ldr	r2, [pc, #180]	; (8003db0 <HAL_DMA_IRQHandler+0xe48>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2c      	ldr	r2, [pc, #176]	; (8003db4 <HAL_DMA_IRQHandler+0xe4c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xdaa>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2a      	ldr	r2, [pc, #168]	; (8003db8 <HAL_DMA_IRQHandler+0xe50>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d108      	bne.n	8003d24 <HAL_DMA_IRQHandler+0xdbc>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 021c 	bic.w	r2, r2, #28
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e007      	b.n	8003d34 <HAL_DMA_IRQHandler+0xdcc>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 020e 	bic.w	r2, r2, #14
 8003d32:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
 8003d6a:	e004      	b.n	8003d76 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d6c:	bf00      	nop
 8003d6e:	e002      	b.n	8003d76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d70:	bf00      	nop
 8003d72:	e000      	b.n	8003d76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d74:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d76:	3728      	adds	r7, #40	; 0x28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40020010 	.word	0x40020010
 8003d80:	40020028 	.word	0x40020028
 8003d84:	40020040 	.word	0x40020040
 8003d88:	40020058 	.word	0x40020058
 8003d8c:	40020070 	.word	0x40020070
 8003d90:	40020088 	.word	0x40020088
 8003d94:	400200a0 	.word	0x400200a0
 8003d98:	400200b8 	.word	0x400200b8
 8003d9c:	40020410 	.word	0x40020410
 8003da0:	40020428 	.word	0x40020428
 8003da4:	40020440 	.word	0x40020440
 8003da8:	40020458 	.word	0x40020458
 8003dac:	40020470 	.word	0x40020470
 8003db0:	40020488 	.word	0x40020488
 8003db4:	400204a0 	.word	0x400204a0
 8003db8:	400204b8 	.word	0x400204b8

08003dbc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dca:	b2db      	uxtb	r3, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a42      	ldr	r2, [pc, #264]	; (8003ef0 <DMA_CalcBaseAndBitshift+0x118>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d04a      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a41      	ldr	r2, [pc, #260]	; (8003ef4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d045      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <DMA_CalcBaseAndBitshift+0x120>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d040      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3e      	ldr	r2, [pc, #248]	; (8003efc <DMA_CalcBaseAndBitshift+0x124>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d03b      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	; (8003f00 <DMA_CalcBaseAndBitshift+0x128>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d036      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a3b      	ldr	r2, [pc, #236]	; (8003f04 <DMA_CalcBaseAndBitshift+0x12c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d031      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a39      	ldr	r2, [pc, #228]	; (8003f08 <DMA_CalcBaseAndBitshift+0x130>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02c      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a38      	ldr	r2, [pc, #224]	; (8003f0c <DMA_CalcBaseAndBitshift+0x134>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d027      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a36      	ldr	r2, [pc, #216]	; (8003f10 <DMA_CalcBaseAndBitshift+0x138>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a35      	ldr	r2, [pc, #212]	; (8003f14 <DMA_CalcBaseAndBitshift+0x13c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01d      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a33      	ldr	r2, [pc, #204]	; (8003f18 <DMA_CalcBaseAndBitshift+0x140>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a32      	ldr	r2, [pc, #200]	; (8003f1c <DMA_CalcBaseAndBitshift+0x144>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a30      	ldr	r2, [pc, #192]	; (8003f20 <DMA_CalcBaseAndBitshift+0x148>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <DMA_CalcBaseAndBitshift+0x14c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a2d      	ldr	r2, [pc, #180]	; (8003f28 <DMA_CalcBaseAndBitshift+0x150>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <DMA_CalcBaseAndBitshift+0xa8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <DMA_CalcBaseAndBitshift+0x154>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <DMA_CalcBaseAndBitshift+0xac>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <DMA_CalcBaseAndBitshift+0xae>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d024      	beq.n	8003ed4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	3b10      	subs	r3, #16
 8003e92:	4a27      	ldr	r2, [pc, #156]	; (8003f30 <DMA_CalcBaseAndBitshift+0x158>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	4a24      	ldr	r2, [pc, #144]	; (8003f34 <DMA_CalcBaseAndBitshift+0x15c>)
 8003ea4:	5cd3      	ldrb	r3, [r2, r3]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d908      	bls.n	8003ec4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4b1f      	ldr	r3, [pc, #124]	; (8003f38 <DMA_CalcBaseAndBitshift+0x160>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	1d1a      	adds	r2, r3, #4
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ec2:	e00d      	b.n	8003ee0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <DMA_CalcBaseAndBitshift+0x160>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed2:	e005      	b.n	8003ee0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40020010 	.word	0x40020010
 8003ef4:	40020028 	.word	0x40020028
 8003ef8:	40020040 	.word	0x40020040
 8003efc:	40020058 	.word	0x40020058
 8003f00:	40020070 	.word	0x40020070
 8003f04:	40020088 	.word	0x40020088
 8003f08:	400200a0 	.word	0x400200a0
 8003f0c:	400200b8 	.word	0x400200b8
 8003f10:	40020410 	.word	0x40020410
 8003f14:	40020428 	.word	0x40020428
 8003f18:	40020440 	.word	0x40020440
 8003f1c:	40020458 	.word	0x40020458
 8003f20:	40020470 	.word	0x40020470
 8003f24:	40020488 	.word	0x40020488
 8003f28:	400204a0 	.word	0x400204a0
 8003f2c:	400204b8 	.word	0x400204b8
 8003f30:	aaaaaaab 	.word	0xaaaaaaab
 8003f34:	08012c10 	.word	0x08012c10
 8003f38:	fffffc00 	.word	0xfffffc00

08003f3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d120      	bne.n	8003f92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d858      	bhi.n	800400a <DMA_CheckFifoParam+0xce>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <DMA_CheckFifoParam+0x24>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f83 	.word	0x08003f83
 8003f68:	08003f71 	.word	0x08003f71
 8003f6c:	0800400b 	.word	0x0800400b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d048      	beq.n	800400e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f80:	e045      	b.n	800400e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f8a:	d142      	bne.n	8004012 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f90:	e03f      	b.n	8004012 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9a:	d123      	bne.n	8003fe4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d838      	bhi.n	8004016 <DMA_CheckFifoParam+0xda>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <DMA_CheckFifoParam+0x70>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fc3 	.word	0x08003fc3
 8003fb4:	08003fbd 	.word	0x08003fbd
 8003fb8:	08003fd5 	.word	0x08003fd5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
        break;
 8003fc0:	e030      	b.n	8004024 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d025      	beq.n	800401a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fd2:	e022      	b.n	800401a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fdc:	d11f      	bne.n	800401e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fe2:	e01c      	b.n	800401e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d902      	bls.n	8003ff2 <DMA_CheckFifoParam+0xb6>
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d003      	beq.n	8003ff8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ff0:	e018      	b.n	8004024 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ff6:	e015      	b.n	8004024 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00e      	beq.n	8004022 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
    break;
 8004008:	e00b      	b.n	8004022 <DMA_CheckFifoParam+0xe6>
        break;
 800400a:	bf00      	nop
 800400c:	e00a      	b.n	8004024 <DMA_CheckFifoParam+0xe8>
        break;
 800400e:	bf00      	nop
 8004010:	e008      	b.n	8004024 <DMA_CheckFifoParam+0xe8>
        break;
 8004012:	bf00      	nop
 8004014:	e006      	b.n	8004024 <DMA_CheckFifoParam+0xe8>
        break;
 8004016:	bf00      	nop
 8004018:	e004      	b.n	8004024 <DMA_CheckFifoParam+0xe8>
        break;
 800401a:	bf00      	nop
 800401c:	e002      	b.n	8004024 <DMA_CheckFifoParam+0xe8>
        break;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <DMA_CheckFifoParam+0xe8>
    break;
 8004022:	bf00      	nop
    }
  }

  return status;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop

08004034 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a38      	ldr	r2, [pc, #224]	; (8004128 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d022      	beq.n	8004092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a36      	ldr	r2, [pc, #216]	; (800412c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01d      	beq.n	8004092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a35      	ldr	r2, [pc, #212]	; (8004130 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d018      	beq.n	8004092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a33      	ldr	r2, [pc, #204]	; (8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a32      	ldr	r2, [pc, #200]	; (8004138 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a30      	ldr	r2, [pc, #192]	; (800413c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d009      	beq.n	8004092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2f      	ldr	r2, [pc, #188]	; (8004140 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004096:	2300      	movs	r3, #0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01a      	beq.n	80040d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	3b08      	subs	r3, #8
 80040a4:	4a28      	ldr	r2, [pc, #160]	; (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4b26      	ldr	r3, [pc, #152]	; (800414c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a24      	ldr	r2, [pc, #144]	; (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80040c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040d0:	e024      	b.n	800411c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	3b10      	subs	r3, #16
 80040da:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d806      	bhi.n	80040fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4a1b      	ldr	r2, [pc, #108]	; (800415c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d902      	bls.n	80040fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3308      	adds	r3, #8
 80040f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4b18      	ldr	r3, [pc, #96]	; (8004160 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	461a      	mov	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a16      	ldr	r2, [pc, #88]	; (8004164 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800410c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2201      	movs	r2, #1
 8004116:	409a      	lsls	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	58025408 	.word	0x58025408
 800412c:	5802541c 	.word	0x5802541c
 8004130:	58025430 	.word	0x58025430
 8004134:	58025444 	.word	0x58025444
 8004138:	58025458 	.word	0x58025458
 800413c:	5802546c 	.word	0x5802546c
 8004140:	58025480 	.word	0x58025480
 8004144:	58025494 	.word	0x58025494
 8004148:	cccccccd 	.word	0xcccccccd
 800414c:	16009600 	.word	0x16009600
 8004150:	58025880 	.word	0x58025880
 8004154:	aaaaaaab 	.word	0xaaaaaaab
 8004158:	400204b8 	.word	0x400204b8
 800415c:	4002040f 	.word	0x4002040f
 8004160:	10008200 	.word	0x10008200
 8004164:	40020880 	.word	0x40020880

08004168 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d04a      	beq.n	8004214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b08      	cmp	r3, #8
 8004182:	d847      	bhi.n	8004214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a25      	ldr	r2, [pc, #148]	; (8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d022      	beq.n	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a24      	ldr	r2, [pc, #144]	; (8004224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d01d      	beq.n	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a22      	ldr	r2, [pc, #136]	; (8004228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d018      	beq.n	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d013      	beq.n	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00e      	beq.n	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1e      	ldr	r2, [pc, #120]	; (8004234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d009      	beq.n	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1c      	ldr	r2, [pc, #112]	; (8004238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1b      	ldr	r2, [pc, #108]	; (800423c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d101      	bne.n	80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80041d8:	2300      	movs	r3, #0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4b17      	ldr	r3, [pc, #92]	; (8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	461a      	mov	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a15      	ldr	r2, [pc, #84]	; (8004244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80041f0:	671a      	str	r2, [r3, #112]	; 0x70
 80041f2:	e009      	b.n	8004208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4b14      	ldr	r3, [pc, #80]	; (8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	461a      	mov	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a11      	ldr	r2, [pc, #68]	; (800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004206:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3b01      	subs	r3, #1
 800420c:	2201      	movs	r2, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	58025408 	.word	0x58025408
 8004224:	5802541c 	.word	0x5802541c
 8004228:	58025430 	.word	0x58025430
 800422c:	58025444 	.word	0x58025444
 8004230:	58025458 	.word	0x58025458
 8004234:	5802546c 	.word	0x5802546c
 8004238:	58025480 	.word	0x58025480
 800423c:	58025494 	.word	0x58025494
 8004240:	1600963f 	.word	0x1600963f
 8004244:	58025940 	.word	0x58025940
 8004248:	1000823f 	.word	0x1000823f
 800424c:	40020940 	.word	0x40020940

08004250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800425e:	4b89      	ldr	r3, [pc, #548]	; (8004484 <HAL_GPIO_Init+0x234>)
 8004260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004262:	e194      	b.n	800458e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	2101      	movs	r1, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa01 f303 	lsl.w	r3, r1, r3
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8186 	beq.w	8004588 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d00b      	beq.n	800429c <HAL_GPIO_Init+0x4c>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d007      	beq.n	800429c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004290:	2b11      	cmp	r3, #17
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b12      	cmp	r3, #18
 800429a:	d130      	bne.n	80042fe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2203      	movs	r2, #3
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4013      	ands	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042d2:	2201      	movs	r2, #1
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	f003 0201 	and.w	r2, r3, #1
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	2203      	movs	r2, #3
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4313      	orrs	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d003      	beq.n	800433e <HAL_GPIO_Init+0xee>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b12      	cmp	r3, #18
 800433c:	d123      	bne.n	8004386 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	08da      	lsrs	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3208      	adds	r2, #8
 8004346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	220f      	movs	r2, #15
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4313      	orrs	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	08da      	lsrs	r2, r3, #3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3208      	adds	r2, #8
 8004380:	69b9      	ldr	r1, [r7, #24]
 8004382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	2203      	movs	r2, #3
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0203 	and.w	r2, r3, #3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 80e0 	beq.w	8004588 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c8:	4b2f      	ldr	r3, [pc, #188]	; (8004488 <HAL_GPIO_Init+0x238>)
 80043ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043ce:	4a2e      	ldr	r2, [pc, #184]	; (8004488 <HAL_GPIO_Init+0x238>)
 80043d0:	f043 0302 	orr.w	r3, r3, #2
 80043d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043d8:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_GPIO_Init+0x238>)
 80043da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_GPIO_Init+0x23c>)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	089b      	lsrs	r3, r3, #2
 80043ec:	3302      	adds	r3, #2
 80043ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	220f      	movs	r2, #15
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a20      	ldr	r2, [pc, #128]	; (8004490 <HAL_GPIO_Init+0x240>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d052      	beq.n	80044b8 <HAL_GPIO_Init+0x268>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <HAL_GPIO_Init+0x244>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d031      	beq.n	800447e <HAL_GPIO_Init+0x22e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a1e      	ldr	r2, [pc, #120]	; (8004498 <HAL_GPIO_Init+0x248>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d02b      	beq.n	800447a <HAL_GPIO_Init+0x22a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1d      	ldr	r2, [pc, #116]	; (800449c <HAL_GPIO_Init+0x24c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d025      	beq.n	8004476 <HAL_GPIO_Init+0x226>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <HAL_GPIO_Init+0x250>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d01f      	beq.n	8004472 <HAL_GPIO_Init+0x222>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <HAL_GPIO_Init+0x254>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d019      	beq.n	800446e <HAL_GPIO_Init+0x21e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_GPIO_Init+0x258>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <HAL_GPIO_Init+0x21a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_GPIO_Init+0x25c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00d      	beq.n	8004466 <HAL_GPIO_Init+0x216>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_GPIO_Init+0x260>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d007      	beq.n	8004462 <HAL_GPIO_Init+0x212>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <HAL_GPIO_Init+0x264>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d101      	bne.n	800445e <HAL_GPIO_Init+0x20e>
 800445a:	2309      	movs	r3, #9
 800445c:	e02d      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 800445e:	230a      	movs	r3, #10
 8004460:	e02b      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 8004462:	2308      	movs	r3, #8
 8004464:	e029      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 8004466:	2307      	movs	r3, #7
 8004468:	e027      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 800446a:	2306      	movs	r3, #6
 800446c:	e025      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 800446e:	2305      	movs	r3, #5
 8004470:	e023      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 8004472:	2304      	movs	r3, #4
 8004474:	e021      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 8004476:	2303      	movs	r3, #3
 8004478:	e01f      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 800447a:	2302      	movs	r3, #2
 800447c:	e01d      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 800447e:	2301      	movs	r3, #1
 8004480:	e01b      	b.n	80044ba <HAL_GPIO_Init+0x26a>
 8004482:	bf00      	nop
 8004484:	58000080 	.word	0x58000080
 8004488:	58024400 	.word	0x58024400
 800448c:	58000400 	.word	0x58000400
 8004490:	58020000 	.word	0x58020000
 8004494:	58020400 	.word	0x58020400
 8004498:	58020800 	.word	0x58020800
 800449c:	58020c00 	.word	0x58020c00
 80044a0:	58021000 	.word	0x58021000
 80044a4:	58021400 	.word	0x58021400
 80044a8:	58021800 	.word	0x58021800
 80044ac:	58021c00 	.word	0x58021c00
 80044b0:	58022000 	.word	0x58022000
 80044b4:	58022400 	.word	0x58022400
 80044b8:	2300      	movs	r3, #0
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	f002 0203 	and.w	r2, r2, #3
 80044c0:	0092      	lsls	r2, r2, #2
 80044c2:	4093      	lsls	r3, r2
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044ca:	4938      	ldr	r1, [pc, #224]	; (80045ac <HAL_GPIO_Init+0x35c>)
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	3302      	adds	r3, #2
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800455a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	3301      	adds	r3, #1
 800458c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f ae63 	bne.w	8004264 <HAL_GPIO_Init+0x14>
  }
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	3724      	adds	r7, #36	; 0x24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	58000400 	.word	0x58000400

080045b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
 80045bc:	4613      	mov	r3, r2
 80045be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045c0:	787b      	ldrb	r3, [r7, #1]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045c6:	887a      	ldrh	r2, [r7, #2]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80045cc:	e003      	b.n	80045d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80045ce:	887b      	ldrh	r3, [r7, #2]
 80045d0:	041a      	lsls	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	619a      	str	r2, [r3, #24]
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80045ec:	4a08      	ldr	r2, [pc, #32]	; (8004610 <HAL_HSEM_FastTake+0x2c>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3320      	adds	r3, #32
 80045f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f6:	4a07      	ldr	r2, [pc, #28]	; (8004614 <HAL_HSEM_FastTake+0x30>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	58026400 	.word	0x58026400
 8004614:	80000300 	.word	0x80000300

08004618 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004622:	4906      	ldr	r1, [pc, #24]	; (800463c <HAL_HSEM_Release+0x24>)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	58026400 	.word	0x58026400

08004640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e07f      	b.n	8004752 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc f998 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d107      	bne.n	80046ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	e006      	b.n	80046c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d104      	bne.n	80046da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HAL_I2C_Init+0x11c>)
 80046e6:	430b      	orrs	r3, r1
 80046e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	ea42 0103 	orr.w	r1, r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	021a      	lsls	r2, r3, #8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69d9      	ldr	r1, [r3, #28]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1a      	ldr	r2, [r3, #32]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	02008000 	.word	0x02008000

08004760 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
  }
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	0a1b      	lsrs	r3, r3, #8
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d010      	beq.n	80047da <HAL_I2C_ER_IRQHandler+0x46>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	09db      	lsrs	r3, r3, #7
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047d8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	0a9b      	lsrs	r3, r3, #10
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d010      	beq.n	8004808 <HAL_I2C_ER_IRQHandler+0x74>
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	09db      	lsrs	r3, r3, #7
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	f043 0208 	orr.w	r2, r3, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004806:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	0a5b      	lsrs	r3, r3, #9
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d010      	beq.n	8004836 <HAL_I2C_ER_IRQHandler+0xa2>
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	09db      	lsrs	r3, r3, #7
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	f043 0202 	orr.w	r2, r3, #2
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004834:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 030b 	and.w	r3, r3, #11
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004846:	68f9      	ldr	r1, [r7, #12]
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fc77 	bl	800513c <I2C_ITError>
  }
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	460b      	mov	r3, r1
 8004888:	70fb      	strb	r3, [r7, #3]
 800488a:	4613      	mov	r3, r2
 800488c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <I2C_Slave_ISR_IT+0x24>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e0ec      	b.n	8004ad4 <I2C_Slave_ISR_IT+0x1fe>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <I2C_Slave_ISR_IT+0x4c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800491a:	6939      	ldr	r1, [r7, #16]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f9bf 	bl	8004ca0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04d      	beq.n	80049ca <I2C_Slave_ISR_IT+0xf4>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d047      	beq.n	80049ca <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d128      	bne.n	8004996 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b28      	cmp	r3, #40	; 0x28
 800494e:	d108      	bne.n	8004962 <I2C_Slave_ISR_IT+0x8c>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004956:	d104      	bne.n	8004962 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004958:	6939      	ldr	r1, [r7, #16]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fb98 	bl	8005090 <I2C_ITListenCplt>
 8004960:	e032      	b.n	80049c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b29      	cmp	r3, #41	; 0x29
 800496c:	d10e      	bne.n	800498c <I2C_Slave_ISR_IT+0xb6>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004974:	d00a      	beq.n	800498c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2210      	movs	r2, #16
 800497c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fcd3 	bl	800532a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f92d 	bl	8004be4 <I2C_ITSlaveSeqCplt>
 800498a:	e01d      	b.n	80049c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2210      	movs	r2, #16
 8004992:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004994:	e096      	b.n	8004ac4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2210      	movs	r2, #16
 800499c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f043 0204 	orr.w	r2, r3, #4
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <I2C_Slave_ISR_IT+0xe4>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049b6:	f040 8085 	bne.w	8004ac4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	4619      	mov	r1, r3
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fbbb 	bl	800513c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80049c6:	e07d      	b.n	8004ac4 <I2C_Slave_ISR_IT+0x1ee>
 80049c8:	e07c      	b.n	8004ac4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	089b      	lsrs	r3, r3, #2
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d030      	beq.n	8004a38 <I2C_Slave_ISR_IT+0x162>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	089b      	lsrs	r3, r3, #2
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02a      	beq.n	8004a38 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d018      	beq.n	8004a1e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d14f      	bne.n	8004ac8 <I2C_Slave_ISR_IT+0x1f2>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a2e:	d04b      	beq.n	8004ac8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f8d7 	bl	8004be4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004a36:	e047      	b.n	8004ac8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	08db      	lsrs	r3, r3, #3
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	08db      	lsrs	r3, r3, #3
 8004a48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004a50:	6939      	ldr	r1, [r7, #16]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f842 	bl	8004adc <I2C_ITAddrCplt>
 8004a58:	e037      	b.n	8004aca <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	085b      	lsrs	r3, r3, #1
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d031      	beq.n	8004aca <I2C_Slave_ISR_IT+0x1f4>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d02b      	beq.n	8004aca <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d018      	beq.n	8004aae <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	851a      	strh	r2, [r3, #40]	; 0x28
 8004aac:	e00d      	b.n	8004aca <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab4:	d002      	beq.n	8004abc <I2C_Slave_ISR_IT+0x1e6>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f891 	bl	8004be4 <I2C_ITSlaveSeqCplt>
 8004ac2:	e002      	b.n	8004aca <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004ac8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004af2:	2b28      	cmp	r3, #40	; 0x28
 8004af4:	d16a      	bne.n	8004bcc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b14:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b22:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b30:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d138      	bne.n	8004bac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004b3a:	897b      	ldrh	r3, [r7, #10]
 8004b3c:	09db      	lsrs	r3, r3, #7
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	89bb      	ldrh	r3, [r7, #12]
 8004b42:	4053      	eors	r3, r2
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f003 0306 	and.w	r3, r3, #6
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d11c      	bne.n	8004b88 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b4e:	897b      	ldrh	r3, [r7, #10]
 8004b50:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d13b      	bne.n	8004bdc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2208      	movs	r2, #8
 8004b70:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b7a:	89ba      	ldrh	r2, [r7, #12]
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fe7c 	bl	800487e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b86:	e029      	b.n	8004bdc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004b88:	893b      	ldrh	r3, [r7, #8]
 8004b8a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fc0c 	bl	80053ae <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b9e:	89ba      	ldrh	r2, [r7, #12]
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fe6a 	bl	800487e <HAL_I2C_AddrCallback>
}
 8004baa:	e017      	b.n	8004bdc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fbfc 	bl	80053ae <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bbe:	89ba      	ldrh	r2, [r7, #12]
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fe5a 	bl	800487e <HAL_I2C_AddrCallback>
}
 8004bca:	e007      	b.n	8004bdc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	0b9b      	lsrs	r3, r3, #14
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e00d      	b.n	8004c36 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	0bdb      	lsrs	r3, r3, #15
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b29      	cmp	r3, #41	; 0x29
 8004c40:	d112      	bne.n	8004c68 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2228      	movs	r2, #40	; 0x28
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2221      	movs	r2, #33	; 0x21
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c50:	2101      	movs	r1, #1
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fbab 	bl	80053ae <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fdf8 	bl	8004856 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c66:	e017      	b.n	8004c98 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b2a      	cmp	r3, #42	; 0x2a
 8004c72:	d111      	bne.n	8004c98 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2228      	movs	r2, #40	; 0x28
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2222      	movs	r2, #34	; 0x22
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c82:	2102      	movs	r1, #2
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fb92 	bl	80053ae <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fde9 	bl	800486a <HAL_I2C_SlaveRxCpltCallback>
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cbc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b21      	cmp	r3, #33	; 0x21
 8004cca:	d002      	beq.n	8004cd2 <I2C_ITSlaveCplt+0x32>
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b29      	cmp	r3, #41	; 0x29
 8004cd0:	d108      	bne.n	8004ce4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004cd2:	f248 0101 	movw	r1, #32769	; 0x8001
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fb69 	bl	80053ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2221      	movs	r2, #33	; 0x21
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ce2:	e00d      	b.n	8004d00 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b22      	cmp	r3, #34	; 0x22
 8004ce8:	d002      	beq.n	8004cf0 <I2C_ITSlaveCplt+0x50>
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	2b2a      	cmp	r3, #42	; 0x2a
 8004cee:	d107      	bne.n	8004d00 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004cf0:	f248 0102 	movw	r1, #32770	; 0x8002
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fb5a 	bl	80053ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2222      	movs	r2, #34	; 0x22
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d0e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b80      	ldr	r3, [pc, #512]	; (8004f1c <I2C_ITSlaveCplt+0x27c>)
 8004d1c:	400b      	ands	r3, r1
 8004d1e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fb02 	bl	800532a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	0b9b      	lsrs	r3, r3, #14
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d07a      	beq.n	8004e28 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d40:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 8111 	beq.w	8004f6e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a73      	ldr	r2, [pc, #460]	; (8004f20 <I2C_ITSlaveCplt+0x280>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d059      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a71      	ldr	r2, [pc, #452]	; (8004f24 <I2C_ITSlaveCplt+0x284>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d053      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a6f      	ldr	r2, [pc, #444]	; (8004f28 <I2C_ITSlaveCplt+0x288>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d04d      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a6d      	ldr	r2, [pc, #436]	; (8004f2c <I2C_ITSlaveCplt+0x28c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d047      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a6b      	ldr	r2, [pc, #428]	; (8004f30 <I2C_ITSlaveCplt+0x290>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d041      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a69      	ldr	r2, [pc, #420]	; (8004f34 <I2C_ITSlaveCplt+0x294>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d03b      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a67      	ldr	r2, [pc, #412]	; (8004f38 <I2C_ITSlaveCplt+0x298>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d035      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a65      	ldr	r2, [pc, #404]	; (8004f3c <I2C_ITSlaveCplt+0x29c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d02f      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a63      	ldr	r2, [pc, #396]	; (8004f40 <I2C_ITSlaveCplt+0x2a0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d029      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a61      	ldr	r2, [pc, #388]	; (8004f44 <I2C_ITSlaveCplt+0x2a4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d023      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a5f      	ldr	r2, [pc, #380]	; (8004f48 <I2C_ITSlaveCplt+0x2a8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d01d      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5d      	ldr	r2, [pc, #372]	; (8004f4c <I2C_ITSlaveCplt+0x2ac>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d017      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a5b      	ldr	r2, [pc, #364]	; (8004f50 <I2C_ITSlaveCplt+0x2b0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d011      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a59      	ldr	r2, [pc, #356]	; (8004f54 <I2C_ITSlaveCplt+0x2b4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a57      	ldr	r2, [pc, #348]	; (8004f58 <I2C_ITSlaveCplt+0x2b8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d005      	beq.n	8004e0c <I2C_ITSlaveCplt+0x16c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a55      	ldr	r2, [pc, #340]	; (8004f5c <I2C_ITSlaveCplt+0x2bc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d105      	bne.n	8004e18 <I2C_ITSlaveCplt+0x178>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	e004      	b.n	8004e22 <I2C_ITSlaveCplt+0x182>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	8553      	strh	r3, [r2, #42]	; 0x2a
 8004e26:	e0a2      	b.n	8004f6e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	0bdb      	lsrs	r3, r3, #15
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 809c 	beq.w	8004f6e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 808f 	beq.w	8004f6e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <I2C_ITSlaveCplt+0x280>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d059      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <I2C_ITSlaveCplt+0x284>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d053      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a2e      	ldr	r2, [pc, #184]	; (8004f28 <I2C_ITSlaveCplt+0x288>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d04d      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <I2C_ITSlaveCplt+0x28c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d047      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2a      	ldr	r2, [pc, #168]	; (8004f30 <I2C_ITSlaveCplt+0x290>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d041      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a28      	ldr	r2, [pc, #160]	; (8004f34 <I2C_ITSlaveCplt+0x294>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d03b      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a26      	ldr	r2, [pc, #152]	; (8004f38 <I2C_ITSlaveCplt+0x298>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d035      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a24      	ldr	r2, [pc, #144]	; (8004f3c <I2C_ITSlaveCplt+0x29c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d02f      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <I2C_ITSlaveCplt+0x2a0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d029      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <I2C_ITSlaveCplt+0x2a4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d023      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <I2C_ITSlaveCplt+0x2a8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d01d      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <I2C_ITSlaveCplt+0x2ac>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d017      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	; (8004f50 <I2C_ITSlaveCplt+0x2b0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d011      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <I2C_ITSlaveCplt+0x2b4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00b      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <I2C_ITSlaveCplt+0x2b8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d005      	beq.n	8004f10 <I2C_ITSlaveCplt+0x270>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <I2C_ITSlaveCplt+0x2bc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d127      	bne.n	8004f60 <I2C_ITSlaveCplt+0x2c0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	e026      	b.n	8004f6a <I2C_ITSlaveCplt+0x2ca>
 8004f1c:	fe00e800 	.word	0xfe00e800
 8004f20:	40020010 	.word	0x40020010
 8004f24:	40020028 	.word	0x40020028
 8004f28:	40020040 	.word	0x40020040
 8004f2c:	40020058 	.word	0x40020058
 8004f30:	40020070 	.word	0x40020070
 8004f34:	40020088 	.word	0x40020088
 8004f38:	400200a0 	.word	0x400200a0
 8004f3c:	400200b8 	.word	0x400200b8
 8004f40:	40020410 	.word	0x40020410
 8004f44:	40020428 	.word	0x40020428
 8004f48:	40020440 	.word	0x40020440
 8004f4c:	40020458 	.word	0x40020458
 8004f50:	40020470 	.word	0x40020470
 8004f54:	40020488 	.word	0x40020488
 8004f58:	400204a0 	.word	0x400204a0
 8004f5c:	400204b8 	.word	0x400204b8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d020      	beq.n	8004fbc <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0304 	bic.w	r3, r3, #4
 8004f80:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00c      	beq.n	8004fbc <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d010      	beq.n	800500a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8a4 	bl	800513c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b28      	cmp	r3, #40	; 0x28
 8004ffe:	d141      	bne.n	8005084 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f844 	bl	8005090 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005008:	e03c      	b.n	8005084 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005012:	d014      	beq.n	800503e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fde5 	bl	8004be4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1b      	ldr	r2, [pc, #108]	; (800508c <I2C_ITSlaveCplt+0x3ec>)
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fc2f 	bl	800489a <HAL_I2C_ListenCpltCallback>
}
 800503c:	e022      	b.n	8005084 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b22      	cmp	r3, #34	; 0x22
 8005048:	d10e      	bne.n	8005068 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff fc02 	bl	800486a <HAL_I2C_SlaveRxCpltCallback>
}
 8005066:	e00d      	b.n	8005084 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fbe9 	bl	8004856 <HAL_I2C_SlaveTxCpltCallback>
}
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	ffff0000 	.word	0xffff0000

08005090 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a26      	ldr	r2, [pc, #152]	; (8005138 <I2C_ITListenCplt+0xa8>)
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d022      	beq.n	800510e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d012      	beq.n	800510e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	f043 0204 	orr.w	r2, r3, #4
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800510e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f94b 	bl	80053ae <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2210      	movs	r2, #16
 800511e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fbb6 	bl	800489a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	ffff0000 	.word	0xffff0000

0800513c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a5d      	ldr	r2, [pc, #372]	; (80052d0 <I2C_ITError+0x194>)
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b28      	cmp	r3, #40	; 0x28
 8005172:	d005      	beq.n	8005180 <I2C_ITError+0x44>
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b29      	cmp	r3, #41	; 0x29
 8005178:	d002      	beq.n	8005180 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	2b2a      	cmp	r3, #42	; 0x2a
 800517e:	d10b      	bne.n	8005198 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005180:	2103      	movs	r1, #3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f913 	bl	80053ae <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2228      	movs	r2, #40	; 0x28
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a50      	ldr	r2, [pc, #320]	; (80052d4 <I2C_ITError+0x198>)
 8005194:	635a      	str	r2, [r3, #52]	; 0x34
 8005196:	e011      	b.n	80051bc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005198:	f248 0103 	movw	r1, #32771	; 0x8003
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f906 	bl	80053ae <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b60      	cmp	r3, #96	; 0x60
 80051ac:	d003      	beq.n	80051b6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d039      	beq.n	800523e <I2C_ITError+0x102>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b11      	cmp	r3, #17
 80051ce:	d002      	beq.n	80051d6 <I2C_ITError+0x9a>
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b21      	cmp	r3, #33	; 0x21
 80051d4:	d133      	bne.n	800523e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051e4:	d107      	bne.n	80051f6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fdde 	bl	8003dbc <HAL_DMA_GetState>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d017      	beq.n	8005236 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	4a33      	ldr	r2, [pc, #204]	; (80052d8 <I2C_ITError+0x19c>)
 800520c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	4618      	mov	r0, r3
 800521c:	f7fd fc60 	bl	8002ae0 <HAL_DMA_Abort_IT>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d04d      	beq.n	80052c2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005230:	4610      	mov	r0, r2
 8005232:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005234:	e045      	b.n	80052c2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f850 	bl	80052dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800523c:	e041      	b.n	80052c2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d039      	beq.n	80052ba <I2C_ITError+0x17e>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b12      	cmp	r3, #18
 800524a:	d002      	beq.n	8005252 <I2C_ITError+0x116>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b22      	cmp	r3, #34	; 0x22
 8005250:	d133      	bne.n	80052ba <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800525c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005260:	d107      	bne.n	8005272 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005270:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fda0 	bl	8003dbc <HAL_DMA_GetState>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d017      	beq.n	80052b2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005286:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <I2C_ITError+0x19c>)
 8005288:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	4618      	mov	r0, r3
 8005298:	f7fd fc22 	bl	8002ae0 <HAL_DMA_Abort_IT>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d011      	beq.n	80052c6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052ac:	4610      	mov	r0, r2
 80052ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052b0:	e009      	b.n	80052c6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f812 	bl	80052dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052b8:	e005      	b.n	80052c6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f80e 	bl	80052dc <I2C_TreatErrorCallback>
  }
}
 80052c0:	e002      	b.n	80052c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052c6:	bf00      	nop
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	ffff0000 	.word	0xffff0000
 80052d4:	080048d7 	.word	0x080048d7
 80052d8:	08005373 	.word	0x08005373

080052dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b60      	cmp	r3, #96	; 0x60
 80052ee:	d10e      	bne.n	800530e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fadb 	bl	80048c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800530c:	e009      	b.n	8005322 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fac6 	bl	80048ae <HAL_I2C_ErrorCallback>
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d103      	bne.n	8005348 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2200      	movs	r2, #0
 8005346:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b01      	cmp	r3, #1
 8005354:	d007      	beq.n	8005366 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0201 	orr.w	r2, r2, #1
 8005364:	619a      	str	r2, [r3, #24]
  }
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	2200      	movs	r2, #0
 800538e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539c:	2200      	movs	r2, #0
 800539e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff ff9b 	bl	80052dc <I2C_TreatErrorCallback>
}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	460b      	mov	r3, r1
 80053b8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80053be:	887b      	ldrh	r3, [r7, #2]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00f      	beq.n	80053e8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80053ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053dc:	2b28      	cmp	r3, #40	; 0x28
 80053de:	d003      	beq.n	80053e8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80053e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80053e8:	887b      	ldrh	r3, [r7, #2]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00f      	beq.n	8005412 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80053f8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005406:	2b28      	cmp	r3, #40	; 0x28
 8005408:	d003      	beq.n	8005412 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005410:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005412:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005416:	2b00      	cmp	r3, #0
 8005418:	da03      	bge.n	8005422 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005420:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005422:	887b      	ldrh	r3, [r7, #2]
 8005424:	2b10      	cmp	r3, #16
 8005426:	d103      	bne.n	8005430 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800542e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005430:	887b      	ldrh	r3, [r7, #2]
 8005432:	2b20      	cmp	r3, #32
 8005434:	d103      	bne.n	800543e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f043 0320 	orr.w	r3, r3, #32
 800543c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800543e:	887b      	ldrh	r3, [r7, #2]
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d103      	bne.n	800544c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800544a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	43da      	mvns	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	400a      	ands	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b20      	cmp	r3, #32
 800547e:	d138      	bne.n	80054f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800548a:	2302      	movs	r3, #2
 800548c:	e032      	b.n	80054f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2224      	movs	r2, #36	; 0x24
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6819      	ldr	r1, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e000      	b.n	80054f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
  }
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b20      	cmp	r3, #32
 8005514:	d139      	bne.n	800558a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005520:	2302      	movs	r3, #2
 8005522:	e033      	b.n	800558c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	; 0x24
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005552:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e000      	b.n	800558c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
  }
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559a:	b08f      	sub	sp, #60	; 0x3c
 800559c:	af0a      	add	r7, sp, #40	; 0x28
 800559e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e116      	b.n	80057d8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f00c fec5 	bl	8012354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2203      	movs	r2, #3
 80055ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f009 fb58 	bl	800ec9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	687e      	ldr	r6, [r7, #4]
 80055f6:	466d      	mov	r5, sp
 80055f8:	f106 0410 	add.w	r4, r6, #16
 80055fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005604:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005608:	e885 0003 	stmia.w	r5, {r0, r1}
 800560c:	1d33      	adds	r3, r6, #4
 800560e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005610:	6838      	ldr	r0, [r7, #0]
 8005612:	f009 fa23 	bl	800ea5c <USB_CoreInit>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0d7      	b.n	80057d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f009 fb46 	bl	800ecc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]
 8005638:	e04a      	b.n	80056d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800563a:	7bfa      	ldrb	r2, [r7, #15]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	333d      	adds	r3, #61	; 0x3d
 800564a:	2201      	movs	r2, #1
 800564c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800564e:	7bfa      	ldrb	r2, [r7, #15]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	333c      	adds	r3, #60	; 0x3c
 800565e:	7bfa      	ldrb	r2, [r7, #15]
 8005660:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005662:	7bfa      	ldrb	r2, [r7, #15]
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	b298      	uxth	r0, r3
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3342      	adds	r3, #66	; 0x42
 8005676:	4602      	mov	r2, r0
 8005678:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800567a:	7bfa      	ldrb	r2, [r7, #15]
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	333f      	adds	r3, #63	; 0x3f
 800568a:	2200      	movs	r2, #0
 800568c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800568e:	7bfa      	ldrb	r2, [r7, #15]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	3344      	adds	r3, #68	; 0x44
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056a2:	7bfa      	ldrb	r2, [r7, #15]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	3348      	adds	r3, #72	; 0x48
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056b6:	7bfa      	ldrb	r2, [r7, #15]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3350      	adds	r3, #80	; 0x50
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	3301      	adds	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
 80056d0:	7bfa      	ldrb	r2, [r7, #15]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d3af      	bcc.n	800563a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056da:	2300      	movs	r3, #0
 80056dc:	73fb      	strb	r3, [r7, #15]
 80056de:	e044      	b.n	800576a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056f6:	7bfa      	ldrb	r2, [r7, #15]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005708:	7bfa      	ldrb	r2, [r7, #15]
 800570a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800570c:	7bfa      	ldrb	r2, [r7, #15]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005738:	7bfa      	ldrb	r2, [r7, #15]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	3301      	adds	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
 800576a:	7bfa      	ldrb	r2, [r7, #15]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d3b5      	bcc.n	80056e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	687e      	ldr	r6, [r7, #4]
 800577c:	466d      	mov	r5, sp
 800577e:	f106 0410 	add.w	r4, r6, #16
 8005782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800578a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800578e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005792:	1d33      	adds	r3, r6, #4
 8005794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005796:	6838      	ldr	r0, [r7, #0]
 8005798:	f009 fabc 	bl	800ed14 <USB_DevInit>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e014      	b.n	80057d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d102      	bne.n	80057cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f001 f892 	bl	80068f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f00a fb3c 	bl	800fe4e <USB_DevDisconnect>

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_PCD_Start+0x1c>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e020      	b.n	800583e <HAL_PCD_Start+0x5e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	2b01      	cmp	r3, #1
 800580a:	d109      	bne.n	8005820 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005810:	2b01      	cmp	r3, #1
 8005812:	d005      	beq.n	8005820 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f009 fa29 	bl	800ec7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f00a faec 	bl	800fe0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005846:	b590      	push	{r4, r7, lr}
 8005848:	b08d      	sub	sp, #52	; 0x34
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f00a fbaa 	bl	800ffb6 <USB_GetMode>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 83ca 	bne.w	8005ffe <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f00a fb0e 	bl	800fe90 <USB_ReadInterrupts>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 83c0 	beq.w	8005ffc <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f00a fb05 	bl	800fe90 <USB_ReadInterrupts>
 8005886:	4603      	mov	r3, r0
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b02      	cmp	r3, #2
 800588e:	d107      	bne.n	80058a0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695a      	ldr	r2, [r3, #20]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f002 0202 	and.w	r2, r2, #2
 800589e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f00a faf3 	bl	800fe90 <USB_ReadInterrupts>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d161      	bne.n	8005978 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0210 	bic.w	r2, r2, #16
 80058c2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f003 020f 	and.w	r2, r3, #15
 80058d0:	4613      	mov	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4413      	add	r3, r2
 80058e0:	3304      	adds	r3, #4
 80058e2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	0c5b      	lsrs	r3, r3, #17
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d124      	bne.n	800593a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d035      	beq.n	8005968 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800590a:	b29b      	uxth	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	6a38      	ldr	r0, [r7, #32]
 8005910:	f00a f92a 	bl	800fb68 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005920:	441a      	add	r2, r3
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	091b      	lsrs	r3, r3, #4
 800592e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005932:	441a      	add	r2, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	619a      	str	r2, [r3, #24]
 8005938:	e016      	b.n	8005968 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	0c5b      	lsrs	r3, r3, #17
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	2b06      	cmp	r3, #6
 8005944:	d110      	bne.n	8005968 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800594c:	2208      	movs	r2, #8
 800594e:	4619      	mov	r1, r3
 8005950:	6a38      	ldr	r0, [r7, #32]
 8005952:	f00a f909 	bl	800fb68 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005962:	441a      	add	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0210 	orr.w	r2, r2, #16
 8005976:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f00a fa87 	bl	800fe90 <USB_ReadInterrupts>
 8005982:	4603      	mov	r3, r0
 8005984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005988:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800598c:	d16e      	bne.n	8005a6c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f00a fa8d 	bl	800feb6 <USB_ReadDevAllOutEpInterrupt>
 800599c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800599e:	e062      	b.n	8005a66 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d057      	beq.n	8005a5a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	4611      	mov	r1, r2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f00a fab2 	bl	800ff1e <USB_ReadDevOutEPInterrupt>
 80059ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00c      	beq.n	80059e0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	461a      	mov	r2, r3
 80059d4:	2301      	movs	r3, #1
 80059d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fdde 	bl	800659c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00c      	beq.n	8005a04 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	461a      	mov	r2, r3
 80059f8:	2308      	movs	r3, #8
 80059fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80059fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fed8 	bl	80067b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d008      	beq.n	8005a20 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a36:	461a      	mov	r2, r3
 8005a38:	2320      	movs	r3, #32
 8005a3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a52:	461a      	mov	r2, r3
 8005a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d199      	bne.n	80059a0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f00a fa0d 	bl	800fe90 <USB_ReadInterrupts>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a80:	f040 80c0 	bne.w	8005c04 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f00a fa2e 	bl	800feea <USB_ReadDevAllInEpInterrupt>
 8005a8e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005a94:	e0b2      	b.n	8005bfc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80a7 	beq.w	8005bf0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f00a fa54 	bl	800ff5a <USB_ReadDevInEPInterrupt>
 8005ab2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d057      	beq.n	8005b6e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	69f9      	ldr	r1, [r7, #28]
 8005ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ade:	4013      	ands	r3, r2
 8005ae0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	461a      	mov	r2, r3
 8005af0:	2301      	movs	r3, #1
 8005af2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d132      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	3348      	adds	r3, #72	; 0x48
 8005b0c:	6819      	ldr	r1, [r3, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b12:	4613      	mov	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4403      	add	r3, r0
 8005b1c:	3344      	adds	r3, #68	; 0x44
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4419      	add	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b26:	4613      	mov	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4403      	add	r3, r0
 8005b30:	3348      	adds	r3, #72	; 0x48
 8005b32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d113      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x31c>
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3e:	4613      	mov	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	3350      	adds	r3, #80	; 0x50
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d108      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	f00a fa5d 	bl	801001c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f00c fc90 	bl	801248e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	461a      	mov	r2, r3
 8005b86:	2308      	movs	r3, #8
 8005b88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2310      	movs	r3, #16
 8005ba4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2340      	movs	r3, #64	; 0x40
 8005bc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d008      	beq.n	8005bde <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2302      	movs	r3, #2
 8005bdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fc48 	bl	8006480 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f47f af49 	bne.w	8005a96 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f00a f941 	bl	800fe90 <USB_ReadInterrupts>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c18:	d122      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d108      	bne.n	8005c4a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c40:	2100      	movs	r1, #0
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fe78 	bl	8006938 <HAL_PCDEx_LPM_Callback>
 8005c48:	e002      	b.n	8005c50 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f00c fc96 	bl	801257c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f00a f913 	bl	800fe90 <USB_ReadInterrupts>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c74:	d112      	bne.n	8005c9c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d102      	bne.n	8005c8c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f00c fc52 	bl	8012530 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f00a f8f5 	bl	800fe90 <USB_ReadInterrupts>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb0:	d121      	bne.n	8005cf6 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695a      	ldr	r2, [r3, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005cc0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d111      	bne.n	8005cf0 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cda:	089b      	lsrs	r3, r3, #2
 8005cdc:	f003 020f 	and.w	r2, r3, #15
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fe25 	bl	8006938 <HAL_PCDEx_LPM_Callback>
 8005cee:	e002      	b.n	8005cf6 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f00c fc1d 	bl	8012530 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f00a f8c8 	bl	800fe90 <USB_ReadInterrupts>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0a:	f040 80c7 	bne.w	8005e9c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2110      	movs	r1, #16
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f009 f951 	bl	800efd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d2e:	2300      	movs	r3, #0
 8005d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d32:	e056      	b.n	8005de2 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d40:	461a      	mov	r2, r3
 8005d42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d66:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d94:	461a      	mov	r2, r3
 8005d96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	3301      	adds	r3, #1
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d3a3      	bcc.n	8005d34 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dfa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005dfe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d016      	beq.n	8005e36 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e18:	f043 030b 	orr.w	r3, r3, #11
 8005e1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e2e:	f043 030b 	orr.w	r3, r3, #11
 8005e32:	6453      	str	r3, [r2, #68]	; 0x44
 8005e34:	e015      	b.n	8005e62 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e44:	4619      	mov	r1, r3
 8005e46:	f242 032b 	movw	r3, #8235	; 0x202b
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5c:	f043 030b 	orr.w	r3, r3, #11
 8005e60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e86:	461a      	mov	r2, r3
 8005e88:	f00a f8c8 	bl	801001c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695a      	ldr	r2, [r3, #20]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f009 fff5 	bl	800fe90 <USB_ReadInterrupts>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb0:	d124      	bne.n	8005efc <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f00a f88c 	bl	800ffd4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f009 f8e6 	bl	800f092 <USB_GetDevSpeed>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681c      	ldr	r4, [r3, #0]
 8005ed2:	f001 fce7 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 8005ed6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f008 fe29 	bl	800eb38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f00c faf9 	bl	80124de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f009 ffc5 	bl	800fe90 <USB_ReadInterrupts>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d10a      	bne.n	8005f26 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f00c fad6 	bl	80124c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695a      	ldr	r2, [r3, #20]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f002 0208 	and.w	r2, r2, #8
 8005f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f009 ffb0 	bl	800fe90 <USB_ReadInterrupts>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f3a:	d10f      	bne.n	8005f5c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f00c fb38 	bl	80125bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f009 ff95 	bl	800fe90 <USB_ReadInterrupts>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f70:	d10f      	bne.n	8005f92 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f00c fb0b 	bl	8012598 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f009 ff7a 	bl	800fe90 <USB_ReadInterrupts>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa6:	d10a      	bne.n	8005fbe <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f00c fb19 	bl	80125e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695a      	ldr	r2, [r3, #20]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f009 ff64 	bl	800fe90 <USB_ReadInterrupts>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d115      	bne.n	8005ffe <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f00c fb09 	bl	80125fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6859      	ldr	r1, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	e000      	b.n	8005ffe <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005ffc:	bf00      	nop
    }
  }
}
 8005ffe:	3734      	adds	r7, #52	; 0x34
 8006000:	46bd      	mov	sp, r7
 8006002:	bd90      	pop	{r4, r7, pc}

08006004 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_PCD_SetAddress+0x1a>
 800601a:	2302      	movs	r3, #2
 800601c:	e013      	b.n	8006046 <HAL_PCD_SetAddress+0x42>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f009 fec2 	bl	800fdc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	4608      	mov	r0, r1
 8006058:	4611      	mov	r1, r2
 800605a:	461a      	mov	r2, r3
 800605c:	4603      	mov	r3, r0
 800605e:	70fb      	strb	r3, [r7, #3]
 8006060:	460b      	mov	r3, r1
 8006062:	803b      	strh	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800606c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006070:	2b00      	cmp	r3, #0
 8006072:	da0f      	bge.n	8006094 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	f003 020f 	and.w	r2, r3, #15
 800607a:	4613      	mov	r3, r2
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	1a9b      	subs	r3, r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	3338      	adds	r3, #56	; 0x38
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	3304      	adds	r3, #4
 800608a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	705a      	strb	r2, [r3, #1]
 8006092:	e00f      	b.n	80060b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	f003 020f 	and.w	r2, r3, #15
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	1a9b      	subs	r3, r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060c0:	883a      	ldrh	r2, [r7, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	78ba      	ldrb	r2, [r7, #2]
 80060ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060de:	78bb      	ldrb	r3, [r7, #2]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d102      	bne.n	80060ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_PCD_EP_Open+0xaa>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e00e      	b.n	8006116 <HAL_PCD_EP_Open+0xc8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68f9      	ldr	r1, [r7, #12]
 8006106:	4618      	mov	r0, r3
 8006108:	f008 ffe8 	bl	800f0dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006114:	7afb      	ldrb	r3, [r7, #11]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800612a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800612e:	2b00      	cmp	r3, #0
 8006130:	da0f      	bge.n	8006152 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	f003 020f 	and.w	r2, r3, #15
 8006138:	4613      	mov	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	3338      	adds	r3, #56	; 0x38
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	4413      	add	r3, r2
 8006146:	3304      	adds	r3, #4
 8006148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	705a      	strb	r2, [r3, #1]
 8006150:	e00f      	b.n	8006172 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	f003 020f 	and.w	r2, r3, #15
 8006158:	4613      	mov	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	3304      	adds	r3, #4
 800616a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_PCD_EP_Close+0x6e>
 8006188:	2302      	movs	r3, #2
 800618a:	e00e      	b.n	80061aa <HAL_PCD_EP_Close+0x8c>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68f9      	ldr	r1, [r7, #12]
 800619a:	4618      	mov	r0, r3
 800619c:	f009 f826 	bl	800f1ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b086      	sub	sp, #24
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
 80061be:	460b      	mov	r3, r1
 80061c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	f003 020f 	and.w	r2, r3, #15
 80061c8:	4613      	mov	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	3304      	adds	r3, #4
 80061da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2200      	movs	r2, #0
 80061ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2200      	movs	r2, #0
 80061f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061f4:	7afb      	ldrb	r3, [r7, #11]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d102      	bne.n	800620e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	6979      	ldr	r1, [r7, #20]
 8006226:	f009 fb09 	bl	800f83c <USB_EP0StartXfer>
 800622a:	e008      	b.n	800623e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	f009 f8b3 	bl	800f3a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	f003 020f 	and.w	r2, r3, #15
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800626a:	681b      	ldr	r3, [r3, #0]
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	607a      	str	r2, [r7, #4]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	460b      	mov	r3, r1
 8006286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006288:	7afb      	ldrb	r3, [r7, #11]
 800628a:	f003 020f 	and.w	r2, r3, #15
 800628e:	4613      	mov	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	3338      	adds	r3, #56	; 0x38
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	3304      	adds	r3, #4
 800629e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2200      	movs	r2, #0
 80062b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2201      	movs	r2, #1
 80062b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062b8:	7afb      	ldrb	r3, [r7, #11]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d102      	bne.n	80062d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062d2:	7afb      	ldrb	r3, [r7, #11]
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	6979      	ldr	r1, [r7, #20]
 80062ea:	f009 faa7 	bl	800f83c <USB_EP0StartXfer>
 80062ee:	e008      	b.n	8006302 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	6979      	ldr	r1, [r7, #20]
 80062fe:	f009 f851 	bl	800f3a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	f003 020f 	and.w	r2, r3, #15
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d901      	bls.n	800632a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e050      	b.n	80063cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800632a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800632e:	2b00      	cmp	r3, #0
 8006330:	da0f      	bge.n	8006352 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	f003 020f 	and.w	r2, r3, #15
 8006338:	4613      	mov	r3, r2
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	3338      	adds	r3, #56	; 0x38
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4413      	add	r3, r2
 8006346:	3304      	adds	r3, #4
 8006348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	705a      	strb	r2, [r3, #1]
 8006350:	e00d      	b.n	800636e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006352:	78fa      	ldrb	r2, [r7, #3]
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4413      	add	r3, r2
 8006364:	3304      	adds	r3, #4
 8006366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	b2da      	uxtb	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_PCD_EP_SetStall+0x82>
 800638a:	2302      	movs	r3, #2
 800638c:	e01e      	b.n	80063cc <HAL_PCD_EP_SetStall+0xc0>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68f9      	ldr	r1, [r7, #12]
 800639c:	4618      	mov	r0, r3
 800639e:	f009 fc3b 	bl	800fc18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	b2d9      	uxtb	r1, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063bc:	461a      	mov	r2, r3
 80063be:	f009 fe2d 	bl	801001c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	f003 020f 	and.w	r2, r3, #15
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d901      	bls.n	80063f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e042      	b.n	8006478 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da0f      	bge.n	800641a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	4613      	mov	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	3338      	adds	r3, #56	; 0x38
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	3304      	adds	r3, #4
 8006410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	705a      	strb	r2, [r3, #1]
 8006418:	e00f      	b.n	800643a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	f003 020f 	and.w	r2, r3, #15
 8006420:	4613      	mov	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4413      	add	r3, r2
 8006430:	3304      	adds	r3, #4
 8006432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	b2da      	uxtb	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_PCD_EP_ClrStall+0x86>
 8006456:	2302      	movs	r3, #2
 8006458:	e00e      	b.n	8006478 <HAL_PCD_EP_ClrStall+0xa4>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	4618      	mov	r0, r3
 800646a:	f009 fc43 	bl	800fcf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08a      	sub	sp, #40	; 0x28
 8006484:	af02      	add	r7, sp, #8
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	4613      	mov	r3, r2
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	3338      	adds	r3, #56	; 0x38
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	3304      	adds	r3, #4
 80064a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d901      	bls.n	80064b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e06c      	b.n	8006592 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	695a      	ldr	r2, [r3, #20]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d902      	bls.n	80064d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3303      	adds	r3, #3
 80064d8:	089b      	lsrs	r3, r3, #2
 80064da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064dc:	e02b      	b.n	8006536 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	695a      	ldr	r2, [r3, #20]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d902      	bls.n	80064fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	3303      	adds	r3, #3
 80064fe:	089b      	lsrs	r3, r3, #2
 8006500:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68d9      	ldr	r1, [r3, #12]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006512:	b2db      	uxtb	r3, r3
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	4603      	mov	r3, r0
 8006518:	6978      	ldr	r0, [r7, #20]
 800651a:	f009 fae7 	bl	800faec <USB_WritePacket>

    ep->xfer_buff  += len;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	441a      	add	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	b29b      	uxth	r3, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	429a      	cmp	r2, r3
 800654a:	d809      	bhi.n	8006560 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	699a      	ldr	r2, [r3, #24]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006554:	429a      	cmp	r2, r3
 8006556:	d203      	bcs.n	8006560 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1be      	bne.n	80064de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	429a      	cmp	r2, r3
 800656a:	d811      	bhi.n	8006590 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	2201      	movs	r2, #1
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	43db      	mvns	r3, r3
 8006586:	6939      	ldr	r1, [r7, #16]
 8006588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800658c:	4013      	ands	r3, r2
 800658e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	333c      	adds	r3, #60	; 0x3c
 80065b4:	3304      	adds	r3, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	f040 80a0 	bne.w	8006714 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d015      	beq.n	800660a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a72      	ldr	r2, [pc, #456]	; (80067ac <PCD_EP_OutXfrComplete_int+0x210>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	f240 80dd 	bls.w	80067a2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80d7 	beq.w	80067a2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006600:	461a      	mov	r2, r3
 8006602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006606:	6093      	str	r3, [r2, #8]
 8006608:	e0cb      	b.n	80067a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d009      	beq.n	8006628 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006620:	461a      	mov	r2, r3
 8006622:	2320      	movs	r3, #32
 8006624:	6093      	str	r3, [r2, #8]
 8006626:	e0bc      	b.n	80067a2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 80b7 	bne.w	80067a2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4a5d      	ldr	r2, [pc, #372]	; (80067ac <PCD_EP_OutXfrComplete_int+0x210>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d90f      	bls.n	800665c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006652:	461a      	mov	r2, r3
 8006654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006658:	6093      	str	r3, [r2, #8]
 800665a:	e0a2      	b.n	80067a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	4613      	mov	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800666e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	0159      	lsls	r1, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	440b      	add	r3, r1
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006682:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4403      	add	r3, r0
 8006692:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006696:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	1a9b      	subs	r3, r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066aa:	6819      	ldr	r1, [r3, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	4613      	mov	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4403      	add	r3, r0
 80066ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4419      	add	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	4613      	mov	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4403      	add	r3, r0
 80066d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066d4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d114      	bne.n	8006706 <PCD_EP_OutXfrComplete_int+0x16a>
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d108      	bne.n	8006706 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066fe:	461a      	mov	r2, r3
 8006700:	2101      	movs	r1, #1
 8006702:	f009 fc8b 	bl	801001c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f00b fea3 	bl	8012458 <HAL_PCD_DataOutStageCallback>
 8006712:	e046      	b.n	80067a2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4a26      	ldr	r2, [pc, #152]	; (80067b0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d124      	bne.n	8006766 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006732:	461a      	mov	r2, r3
 8006734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006738:	6093      	str	r3, [r2, #8]
 800673a:	e032      	b.n	80067a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006752:	461a      	mov	r2, r3
 8006754:	2320      	movs	r3, #32
 8006756:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f00b fe7a 	bl	8012458 <HAL_PCD_DataOutStageCallback>
 8006764:	e01d      	b.n	80067a2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d114      	bne.n	8006796 <PCD_EP_OutXfrComplete_int+0x1fa>
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4613      	mov	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d108      	bne.n	8006796 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800678e:	461a      	mov	r2, r3
 8006790:	2100      	movs	r1, #0
 8006792:	f009 fc43 	bl	801001c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f00b fe5b 	bl	8012458 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	4f54300a 	.word	0x4f54300a
 80067b0:	4f54310a 	.word	0x4f54310a

080067b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	333c      	adds	r3, #60	; 0x3c
 80067cc:	3304      	adds	r3, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a15      	ldr	r2, [pc, #84]	; (800683c <PCD_EP_OutSetupPacket_int+0x88>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d90e      	bls.n	8006808 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006800:	461a      	mov	r2, r3
 8006802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006806:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f00b fe13 	bl	8012434 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4a0a      	ldr	r2, [pc, #40]	; (800683c <PCD_EP_OutSetupPacket_int+0x88>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d90c      	bls.n	8006830 <PCD_EP_OutSetupPacket_int+0x7c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d108      	bne.n	8006830 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006828:	461a      	mov	r2, r3
 800682a:	2101      	movs	r1, #1
 800682c:	f009 fbf6 	bl	801001c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	4f54300a 	.word	0x4f54300a

08006840 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
 800684c:	4613      	mov	r3, r2
 800684e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d107      	bne.n	800686e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800685e:	883b      	ldrh	r3, [r7, #0]
 8006860:	0419      	lsls	r1, r3, #16
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	430a      	orrs	r2, r1
 800686a:	629a      	str	r2, [r3, #40]	; 0x28
 800686c:	e028      	b.n	80068c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	4413      	add	r3, r2
 800687a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]
 8006880:	e00d      	b.n	800689e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	3340      	adds	r3, #64	; 0x40
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	0c1b      	lsrs	r3, r3, #16
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	4413      	add	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	3301      	adds	r3, #1
 800689c:	73fb      	strb	r3, [r7, #15]
 800689e:	7bfa      	ldrb	r2, [r7, #15]
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d3ec      	bcc.n	8006882 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80068a8:	883b      	ldrh	r3, [r7, #0]
 80068aa:	0418      	lsls	r0, r3, #16
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6819      	ldr	r1, [r3, #0]
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	4302      	orrs	r2, r0
 80068b8:	3340      	adds	r3, #64	; 0x40
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	887a      	ldrh	r2, [r7, #2]
 80068e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800691e:	4b05      	ldr	r3, [pc, #20]	; (8006934 <HAL_PCDEx_ActivateLPM+0x44>)
 8006920:	4313      	orrs	r3, r2
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	10000003 	.word	0x10000003

08006938 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006958:	4b29      	ldr	r3, [pc, #164]	; (8006a00 <HAL_PWREx_ConfigSupply+0xb0>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	2b06      	cmp	r3, #6
 8006962:	d00a      	beq.n	800697a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006964:	4b26      	ldr	r3, [pc, #152]	; (8006a00 <HAL_PWREx_ConfigSupply+0xb0>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	429a      	cmp	r2, r3
 8006970:	d001      	beq.n	8006976 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e040      	b.n	80069f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e03e      	b.n	80069f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800697a:	4b21      	ldr	r3, [pc, #132]	; (8006a00 <HAL_PWREx_ConfigSupply+0xb0>)
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006982:	491f      	ldr	r1, [pc, #124]	; (8006a00 <HAL_PWREx_ConfigSupply+0xb0>)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4313      	orrs	r3, r2
 8006988:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800698a:	f7fb f867 	bl	8001a5c <HAL_GetTick>
 800698e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006990:	e009      	b.n	80069a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006992:	f7fb f863 	bl	8001a5c <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069a0:	d901      	bls.n	80069a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e028      	b.n	80069f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069a6:	4b16      	ldr	r3, [pc, #88]	; (8006a00 <HAL_PWREx_ConfigSupply+0xb0>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b2:	d1ee      	bne.n	8006992 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b1e      	cmp	r3, #30
 80069b8:	d008      	beq.n	80069cc <HAL_PWREx_ConfigSupply+0x7c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b2e      	cmp	r3, #46	; 0x2e
 80069be:	d005      	beq.n	80069cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b1d      	cmp	r3, #29
 80069c4:	d002      	beq.n	80069cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b2d      	cmp	r3, #45	; 0x2d
 80069ca:	d114      	bne.n	80069f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80069cc:	f7fb f846 	bl	8001a5c <HAL_GetTick>
 80069d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80069d2:	e009      	b.n	80069e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069d4:	f7fb f842 	bl	8001a5c <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069e2:	d901      	bls.n	80069e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e007      	b.n	80069f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <HAL_PWREx_ConfigSupply+0xb0>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f4:	d1ee      	bne.n	80069d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	58024800 	.word	0x58024800

08006a04 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006a08:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a12:	60d3      	str	r3, [r2, #12]
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	58024800 	.word	0x58024800

08006a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08c      	sub	sp, #48	; 0x30
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e3ff      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8087 	beq.w	8006b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a44:	4b99      	ldr	r3, [pc, #612]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a4e:	4b97      	ldr	r3, [pc, #604]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d007      	beq.n	8006a6a <HAL_RCC_OscConfig+0x46>
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	2b18      	cmp	r3, #24
 8006a5e:	d110      	bne.n	8006a82 <HAL_RCC_OscConfig+0x5e>
 8006a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d10b      	bne.n	8006a82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a6a:	4b90      	ldr	r3, [pc, #576]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d06c      	beq.n	8006b50 <HAL_RCC_OscConfig+0x12c>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d168      	bne.n	8006b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e3d9      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8a:	d106      	bne.n	8006a9a <HAL_RCC_OscConfig+0x76>
 8006a8c:	4b87      	ldr	r3, [pc, #540]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a86      	ldr	r2, [pc, #536]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e02e      	b.n	8006af8 <HAL_RCC_OscConfig+0xd4>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCC_OscConfig+0x98>
 8006aa2:	4b82      	ldr	r3, [pc, #520]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a81      	ldr	r2, [pc, #516]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	4b7f      	ldr	r3, [pc, #508]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a7e      	ldr	r2, [pc, #504]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	e01d      	b.n	8006af8 <HAL_RCC_OscConfig+0xd4>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ac4:	d10c      	bne.n	8006ae0 <HAL_RCC_OscConfig+0xbc>
 8006ac6:	4b79      	ldr	r3, [pc, #484]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a78      	ldr	r2, [pc, #480]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	4b76      	ldr	r3, [pc, #472]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a75      	ldr	r2, [pc, #468]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	e00b      	b.n	8006af8 <HAL_RCC_OscConfig+0xd4>
 8006ae0:	4b72      	ldr	r3, [pc, #456]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a71      	ldr	r2, [pc, #452]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	4b6f      	ldr	r3, [pc, #444]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a6e      	ldr	r2, [pc, #440]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d013      	beq.n	8006b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fa ffac 	bl	8001a5c <HAL_GetTick>
 8006b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b08:	f7fa ffa8 	bl	8001a5c <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b64      	cmp	r3, #100	; 0x64
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e38d      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b1a:	4b64      	ldr	r3, [pc, #400]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCC_OscConfig+0xe4>
 8006b26:	e014      	b.n	8006b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b28:	f7fa ff98 	bl	8001a5c <HAL_GetTick>
 8006b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b30:	f7fa ff94 	bl	8001a5c <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b64      	cmp	r3, #100	; 0x64
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e379      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b42:	4b5a      	ldr	r3, [pc, #360]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f0      	bne.n	8006b30 <HAL_RCC_OscConfig+0x10c>
 8006b4e:	e000      	b.n	8006b52 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80ae 	beq.w	8006cbc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b60:	4b52      	ldr	r3, [pc, #328]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b6a:	4b50      	ldr	r3, [pc, #320]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <HAL_RCC_OscConfig+0x162>
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	2b18      	cmp	r3, #24
 8006b7a:	d13a      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x1ce>
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d135      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b86:	4b49      	ldr	r3, [pc, #292]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d005      	beq.n	8006b9e <HAL_RCC_OscConfig+0x17a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e34b      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b9e:	f7fa ff8d 	bl	8001abc <HAL_GetREVID>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d817      	bhi.n	8006bdc <HAL_RCC_OscConfig+0x1b8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d108      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x1a2>
 8006bb4:	4b3d      	ldr	r3, [pc, #244]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006bbc:	4a3b      	ldr	r2, [pc, #236]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bc4:	e07a      	b.n	8006cbc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc6:	4b39      	ldr	r3, [pc, #228]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	031b      	lsls	r3, r3, #12
 8006bd4:	4935      	ldr	r1, [pc, #212]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bda:	e06f      	b.n	8006cbc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bdc:	4b33      	ldr	r3, [pc, #204]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	061b      	lsls	r3, r3, #24
 8006bea:	4930      	ldr	r1, [pc, #192]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bf0:	e064      	b.n	8006cbc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d045      	beq.n	8006c86 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bfa:	4b2c      	ldr	r3, [pc, #176]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f023 0219 	bic.w	r2, r3, #25
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	4929      	ldr	r1, [pc, #164]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fa ff26 	bl	8001a5c <HAL_GetTick>
 8006c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c14:	f7fa ff22 	bl	8001a5c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e307      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c26:	4b21      	ldr	r3, [pc, #132]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f0      	beq.n	8006c14 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c32:	f7fa ff43 	bl	8001abc <HAL_GetREVID>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d817      	bhi.n	8006c70 <HAL_RCC_OscConfig+0x24c>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b40      	cmp	r3, #64	; 0x40
 8006c46:	d108      	bne.n	8006c5a <HAL_RCC_OscConfig+0x236>
 8006c48:	4b18      	ldr	r3, [pc, #96]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c50:	4a16      	ldr	r2, [pc, #88]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c56:	6053      	str	r3, [r2, #4]
 8006c58:	e030      	b.n	8006cbc <HAL_RCC_OscConfig+0x298>
 8006c5a:	4b14      	ldr	r3, [pc, #80]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	031b      	lsls	r3, r3, #12
 8006c68:	4910      	ldr	r1, [pc, #64]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	604b      	str	r3, [r1, #4]
 8006c6e:	e025      	b.n	8006cbc <HAL_RCC_OscConfig+0x298>
 8006c70:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	061b      	lsls	r3, r3, #24
 8006c7e:	490b      	ldr	r1, [pc, #44]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	604b      	str	r3, [r1, #4]
 8006c84:	e01a      	b.n	8006cbc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a08      	ldr	r2, [pc, #32]	; (8006cac <HAL_RCC_OscConfig+0x288>)
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c92:	f7fa fee3 	bl	8001a5c <HAL_GetTick>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c98:	e00a      	b.n	8006cb0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c9a:	f7fa fedf 	bl	8001a5c <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d903      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e2c4      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
 8006cac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cb0:	4ba4      	ldr	r3, [pc, #656]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1ee      	bne.n	8006c9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 80a9 	beq.w	8006e1c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cca:	4b9e      	ldr	r3, [pc, #632]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cd2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cd4:	4b9b      	ldr	r3, [pc, #620]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d007      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x2cc>
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2b18      	cmp	r3, #24
 8006ce4:	d13a      	bne.n	8006d5c <HAL_RCC_OscConfig+0x338>
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d135      	bne.n	8006d5c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cf0:	4b94      	ldr	r3, [pc, #592]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d005      	beq.n	8006d08 <HAL_RCC_OscConfig+0x2e4>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	2b80      	cmp	r3, #128	; 0x80
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e296      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d08:	f7fa fed8 	bl	8001abc <HAL_GetREVID>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d817      	bhi.n	8006d46 <HAL_RCC_OscConfig+0x322>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d108      	bne.n	8006d30 <HAL_RCC_OscConfig+0x30c>
 8006d1e:	4b89      	ldr	r3, [pc, #548]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d26:	4a87      	ldr	r2, [pc, #540]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d2e:	e075      	b.n	8006e1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d30:	4b84      	ldr	r3, [pc, #528]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	069b      	lsls	r3, r3, #26
 8006d3e:	4981      	ldr	r1, [pc, #516]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d44:	e06a      	b.n	8006e1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d46:	4b7f      	ldr	r3, [pc, #508]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	061b      	lsls	r3, r3, #24
 8006d54:	497b      	ldr	r1, [pc, #492]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d5a:	e05f      	b.n	8006e1c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d042      	beq.n	8006dea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d64:	4b77      	ldr	r3, [pc, #476]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a76      	ldr	r2, [pc, #472]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d70:	f7fa fe74 	bl	8001a5c <HAL_GetTick>
 8006d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d78:	f7fa fe70 	bl	8001a5c <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e255      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d8a:	4b6e      	ldr	r3, [pc, #440]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0f0      	beq.n	8006d78 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d96:	f7fa fe91 	bl	8001abc <HAL_GetREVID>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d817      	bhi.n	8006dd4 <HAL_RCC_OscConfig+0x3b0>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d108      	bne.n	8006dbe <HAL_RCC_OscConfig+0x39a>
 8006dac:	4b65      	ldr	r3, [pc, #404]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006db4:	4a63      	ldr	r2, [pc, #396]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006db6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dba:	6053      	str	r3, [r2, #4]
 8006dbc:	e02e      	b.n	8006e1c <HAL_RCC_OscConfig+0x3f8>
 8006dbe:	4b61      	ldr	r3, [pc, #388]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	069b      	lsls	r3, r3, #26
 8006dcc:	495d      	ldr	r1, [pc, #372]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	604b      	str	r3, [r1, #4]
 8006dd2:	e023      	b.n	8006e1c <HAL_RCC_OscConfig+0x3f8>
 8006dd4:	4b5b      	ldr	r3, [pc, #364]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	061b      	lsls	r3, r3, #24
 8006de2:	4958      	ldr	r1, [pc, #352]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60cb      	str	r3, [r1, #12]
 8006de8:	e018      	b.n	8006e1c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006dea:	4b56      	ldr	r3, [pc, #344]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a55      	ldr	r2, [pc, #340]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df6:	f7fa fe31 	bl	8001a5c <HAL_GetTick>
 8006dfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006dfc:	e008      	b.n	8006e10 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006dfe:	f7fa fe2d 	bl	8001a5c <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e212      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e10:	4b4c      	ldr	r3, [pc, #304]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1f0      	bne.n	8006dfe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d036      	beq.n	8006e96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d019      	beq.n	8006e64 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e30:	4b44      	ldr	r3, [pc, #272]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e34:	4a43      	ldr	r2, [pc, #268]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006e36:	f043 0301 	orr.w	r3, r3, #1
 8006e3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3c:	f7fa fe0e 	bl	8001a5c <HAL_GetTick>
 8006e40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e44:	f7fa fe0a 	bl	8001a5c <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e1ef      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e56:	4b3b      	ldr	r3, [pc, #236]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0f0      	beq.n	8006e44 <HAL_RCC_OscConfig+0x420>
 8006e62:	e018      	b.n	8006e96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e64:	4b37      	ldr	r3, [pc, #220]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e68:	4a36      	ldr	r2, [pc, #216]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006e6a:	f023 0301 	bic.w	r3, r3, #1
 8006e6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e70:	f7fa fdf4 	bl	8001a5c <HAL_GetTick>
 8006e74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e78:	f7fa fdf0 	bl	8001a5c <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e1d5      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e8a:	4b2e      	ldr	r3, [pc, #184]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d036      	beq.n	8006f10 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d019      	beq.n	8006ede <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006eaa:	4b26      	ldr	r3, [pc, #152]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a25      	ldr	r2, [pc, #148]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006eb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006eb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006eb6:	f7fa fdd1 	bl	8001a5c <HAL_GetTick>
 8006eba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ebc:	e008      	b.n	8006ed0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ebe:	f7fa fdcd 	bl	8001a5c <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e1b2      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ed0:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0f0      	beq.n	8006ebe <HAL_RCC_OscConfig+0x49a>
 8006edc:	e018      	b.n	8006f10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ede:	4b19      	ldr	r3, [pc, #100]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006eea:	f7fa fdb7 	bl	8001a5c <HAL_GetTick>
 8006eee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ef2:	f7fa fdb3 	bl	8001a5c <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e198      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f04:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <HAL_RCC_OscConfig+0x520>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f0      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8085 	beq.w	8007028 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <HAL_RCC_OscConfig+0x524>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a09      	ldr	r2, [pc, #36]	; (8006f48 <HAL_RCC_OscConfig+0x524>)
 8006f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f2a:	f7fa fd97 	bl	8001a5c <HAL_GetTick>
 8006f2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f30:	e00c      	b.n	8006f4c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f32:	f7fa fd93 	bl	8001a5c <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b64      	cmp	r3, #100	; 0x64
 8006f3e:	d905      	bls.n	8006f4c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e178      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
 8006f44:	58024400 	.word	0x58024400
 8006f48:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f4c:	4b96      	ldr	r3, [pc, #600]	; (80071a8 <HAL_RCC_OscConfig+0x784>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0ec      	beq.n	8006f32 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d106      	bne.n	8006f6e <HAL_RCC_OscConfig+0x54a>
 8006f60:	4b92      	ldr	r3, [pc, #584]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f64:	4a91      	ldr	r2, [pc, #580]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006f66:	f043 0301 	orr.w	r3, r3, #1
 8006f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f6c:	e02d      	b.n	8006fca <HAL_RCC_OscConfig+0x5a6>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10c      	bne.n	8006f90 <HAL_RCC_OscConfig+0x56c>
 8006f76:	4b8d      	ldr	r3, [pc, #564]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	4a8c      	ldr	r2, [pc, #560]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006f7c:	f023 0301 	bic.w	r3, r3, #1
 8006f80:	6713      	str	r3, [r2, #112]	; 0x70
 8006f82:	4b8a      	ldr	r3, [pc, #552]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	4a89      	ldr	r2, [pc, #548]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006f88:	f023 0304 	bic.w	r3, r3, #4
 8006f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f8e:	e01c      	b.n	8006fca <HAL_RCC_OscConfig+0x5a6>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b05      	cmp	r3, #5
 8006f96:	d10c      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x58e>
 8006f98:	4b84      	ldr	r3, [pc, #528]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9c:	4a83      	ldr	r2, [pc, #524]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006f9e:	f043 0304 	orr.w	r3, r3, #4
 8006fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fa4:	4b81      	ldr	r3, [pc, #516]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa8:	4a80      	ldr	r2, [pc, #512]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006faa:	f043 0301 	orr.w	r3, r3, #1
 8006fae:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb0:	e00b      	b.n	8006fca <HAL_RCC_OscConfig+0x5a6>
 8006fb2:	4b7e      	ldr	r3, [pc, #504]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb6:	4a7d      	ldr	r2, [pc, #500]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006fb8:	f023 0301 	bic.w	r3, r3, #1
 8006fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006fbe:	4b7b      	ldr	r3, [pc, #492]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	4a7a      	ldr	r2, [pc, #488]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006fc4:	f023 0304 	bic.w	r3, r3, #4
 8006fc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d015      	beq.n	8006ffe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd2:	f7fa fd43 	bl	8001a5c <HAL_GetTick>
 8006fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fd8:	e00a      	b.n	8006ff0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fda:	f7fa fd3f 	bl	8001a5c <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e122      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ff0:	4b6e      	ldr	r3, [pc, #440]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0ee      	beq.n	8006fda <HAL_RCC_OscConfig+0x5b6>
 8006ffc:	e014      	b.n	8007028 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ffe:	f7fa fd2d 	bl	8001a5c <HAL_GetTick>
 8007002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007004:	e00a      	b.n	800701c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007006:	f7fa fd29 	bl	8001a5c <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	f241 3288 	movw	r2, #5000	; 0x1388
 8007014:	4293      	cmp	r3, r2
 8007016:	d901      	bls.n	800701c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e10c      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800701c:	4b63      	ldr	r3, [pc, #396]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1ee      	bne.n	8007006 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8101 	beq.w	8007234 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007032:	4b5e      	ldr	r3, [pc, #376]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800703a:	2b18      	cmp	r3, #24
 800703c:	f000 80bc 	beq.w	80071b8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	2b02      	cmp	r3, #2
 8007046:	f040 8095 	bne.w	8007174 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800704a:	4b58      	ldr	r3, [pc, #352]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a57      	ldr	r2, [pc, #348]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007056:	f7fa fd01 	bl	8001a5c <HAL_GetTick>
 800705a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800705c:	e008      	b.n	8007070 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800705e:	f7fa fcfd 	bl	8001a5c <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e0e2      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007070:	4b4e      	ldr	r3, [pc, #312]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1f0      	bne.n	800705e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800707c:	4b4b      	ldr	r3, [pc, #300]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800707e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007080:	4b4b      	ldr	r3, [pc, #300]	; (80071b0 <HAL_RCC_OscConfig+0x78c>)
 8007082:	4013      	ands	r3, r2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800708c:	0112      	lsls	r2, r2, #4
 800708e:	430a      	orrs	r2, r1
 8007090:	4946      	ldr	r1, [pc, #280]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007092:	4313      	orrs	r3, r2
 8007094:	628b      	str	r3, [r1, #40]	; 0x28
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	3b01      	subs	r3, #1
 800709c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a4:	3b01      	subs	r3, #1
 80070a6:	025b      	lsls	r3, r3, #9
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	3b01      	subs	r3, #1
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	3b01      	subs	r3, #1
 80070c0:	061b      	lsls	r3, r3, #24
 80070c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070c6:	4939      	ldr	r1, [pc, #228]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80070cc:	4b37      	ldr	r3, [pc, #220]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	4a36      	ldr	r2, [pc, #216]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 80070d2:	f023 0301 	bic.w	r3, r3, #1
 80070d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070d8:	4b34      	ldr	r3, [pc, #208]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 80070da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070dc:	4b35      	ldr	r3, [pc, #212]	; (80071b4 <HAL_RCC_OscConfig+0x790>)
 80070de:	4013      	ands	r3, r2
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070e4:	00d2      	lsls	r2, r2, #3
 80070e6:	4931      	ldr	r1, [pc, #196]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070ec:	4b2f      	ldr	r3, [pc, #188]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	f023 020c 	bic.w	r2, r3, #12
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	492c      	ldr	r1, [pc, #176]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070fe:	4b2b      	ldr	r3, [pc, #172]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	f023 0202 	bic.w	r2, r3, #2
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	4928      	ldr	r1, [pc, #160]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800710c:	4313      	orrs	r3, r2
 800710e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007110:	4b26      	ldr	r3, [pc, #152]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	4a25      	ldr	r2, [pc, #148]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800711a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800711c:	4b23      	ldr	r3, [pc, #140]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	4a22      	ldr	r2, [pc, #136]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007128:	4b20      	ldr	r3, [pc, #128]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	4a1f      	ldr	r2, [pc, #124]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800712e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007134:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a1c      	ldr	r2, [pc, #112]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800713a:	f043 0301 	orr.w	r3, r3, #1
 800713e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007140:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a19      	ldr	r2, [pc, #100]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800714a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714c:	f7fa fc86 	bl	8001a5c <HAL_GetTick>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007154:	f7fa fc82 	bl	8001a5c <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e067      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0f0      	beq.n	8007154 <HAL_RCC_OscConfig+0x730>
 8007172:	e05f      	b.n	8007234 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007174:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a0c      	ldr	r2, [pc, #48]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800717a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fa fc6c 	bl	8001a5c <HAL_GetTick>
 8007184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007188:	f7fa fc68 	bl	8001a5c <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e04d      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800719a:	4b04      	ldr	r3, [pc, #16]	; (80071ac <HAL_RCC_OscConfig+0x788>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x764>
 80071a6:	e045      	b.n	8007234 <HAL_RCC_OscConfig+0x810>
 80071a8:	58024800 	.word	0x58024800
 80071ac:	58024400 	.word	0x58024400
 80071b0:	fffffc0c 	.word	0xfffffc0c
 80071b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071b8:	4b21      	ldr	r3, [pc, #132]	; (8007240 <HAL_RCC_OscConfig+0x81c>)
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071be:	4b20      	ldr	r3, [pc, #128]	; (8007240 <HAL_RCC_OscConfig+0x81c>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d031      	beq.n	8007230 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f003 0203 	and.w	r2, r3, #3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d12a      	bne.n	8007230 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	091b      	lsrs	r3, r3, #4
 80071de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d122      	bne.n	8007230 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d11a      	bne.n	8007230 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	0a5b      	lsrs	r3, r3, #9
 80071fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007206:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007208:	429a      	cmp	r2, r3
 800720a:	d111      	bne.n	8007230 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	0c1b      	lsrs	r3, r3, #16
 8007210:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800721a:	429a      	cmp	r2, r3
 800721c:	d108      	bne.n	8007230 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	0e1b      	lsrs	r3, r3, #24
 8007222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800722c:	429a      	cmp	r2, r3
 800722e:	d001      	beq.n	8007234 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e000      	b.n	8007236 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3730      	adds	r7, #48	; 0x30
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400

08007244 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e19c      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007258:	4b8a      	ldr	r3, [pc, #552]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d910      	bls.n	8007288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007266:	4b87      	ldr	r3, [pc, #540]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f023 020f 	bic.w	r2, r3, #15
 800726e:	4985      	ldr	r1, [pc, #532]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	4313      	orrs	r3, r2
 8007274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007276:	4b83      	ldr	r3, [pc, #524]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d001      	beq.n	8007288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e184      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	2b00      	cmp	r3, #0
 8007292:	d010      	beq.n	80072b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	4b7b      	ldr	r3, [pc, #492]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d908      	bls.n	80072b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072a4:	4b78      	ldr	r3, [pc, #480]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	4975      	ldr	r1, [pc, #468]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d010      	beq.n	80072e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695a      	ldr	r2, [r3, #20]
 80072c6:	4b70      	ldr	r3, [pc, #448]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d908      	bls.n	80072e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072d2:	4b6d      	ldr	r3, [pc, #436]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	496a      	ldr	r1, [pc, #424]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d010      	beq.n	8007312 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	4b64      	ldr	r3, [pc, #400]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d908      	bls.n	8007312 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007300:	4b61      	ldr	r3, [pc, #388]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	495e      	ldr	r1, [pc, #376]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800730e:	4313      	orrs	r3, r2
 8007310:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d010      	beq.n	8007340 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69da      	ldr	r2, [r3, #28]
 8007322:	4b59      	ldr	r3, [pc, #356]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800732a:	429a      	cmp	r2, r3
 800732c:	d908      	bls.n	8007340 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800732e:	4b56      	ldr	r3, [pc, #344]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	4953      	ldr	r1, [pc, #332]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800733c:	4313      	orrs	r3, r2
 800733e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d010      	beq.n	800736e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	4b4d      	ldr	r3, [pc, #308]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	429a      	cmp	r2, r3
 800735a:	d908      	bls.n	800736e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800735c:	4b4a      	ldr	r3, [pc, #296]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f023 020f 	bic.w	r2, r3, #15
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	4947      	ldr	r1, [pc, #284]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800736a:	4313      	orrs	r3, r2
 800736c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d055      	beq.n	8007426 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800737a:	4b43      	ldr	r3, [pc, #268]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	4940      	ldr	r1, [pc, #256]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007388:	4313      	orrs	r3, r2
 800738a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d107      	bne.n	80073a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007394:	4b3c      	ldr	r3, [pc, #240]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d121      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e0f6      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d107      	bne.n	80073bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073ac:	4b36      	ldr	r3, [pc, #216]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d115      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0ea      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d107      	bne.n	80073d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073c4:	4b30      	ldr	r3, [pc, #192]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e0de      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073d4:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0d6      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073e4:	4b28      	ldr	r3, [pc, #160]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f023 0207 	bic.w	r2, r3, #7
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4925      	ldr	r1, [pc, #148]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fa fb31 	bl	8001a5c <HAL_GetTick>
 80073fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073fc:	e00a      	b.n	8007414 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073fe:	f7fa fb2d 	bl	8001a5c <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	f241 3288 	movw	r2, #5000	; 0x1388
 800740c:	4293      	cmp	r3, r2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e0be      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007414:	4b1c      	ldr	r3, [pc, #112]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	429a      	cmp	r2, r3
 8007424:	d1eb      	bne.n	80073fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d010      	beq.n	8007454 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	4b14      	ldr	r3, [pc, #80]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	429a      	cmp	r2, r3
 8007440:	d208      	bcs.n	8007454 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f023 020f 	bic.w	r2, r3, #15
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	490e      	ldr	r1, [pc, #56]	; (8007488 <HAL_RCC_ClockConfig+0x244>)
 8007450:	4313      	orrs	r3, r2
 8007452:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007454:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d214      	bcs.n	800748c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007462:	4b08      	ldr	r3, [pc, #32]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 020f 	bic.w	r2, r3, #15
 800746a:	4906      	ldr	r1, [pc, #24]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	4313      	orrs	r3, r2
 8007470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b04      	ldr	r3, [pc, #16]	; (8007484 <HAL_RCC_ClockConfig+0x240>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d005      	beq.n	800748c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e086      	b.n	8007592 <HAL_RCC_ClockConfig+0x34e>
 8007484:	52002000 	.word	0x52002000
 8007488:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d010      	beq.n	80074ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	4b3f      	ldr	r3, [pc, #252]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d208      	bcs.n	80074ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074a8:	4b3c      	ldr	r3, [pc, #240]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	4939      	ldr	r1, [pc, #228]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d010      	beq.n	80074e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	695a      	ldr	r2, [r3, #20]
 80074ca:	4b34      	ldr	r3, [pc, #208]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d208      	bcs.n	80074e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074d6:	4b31      	ldr	r3, [pc, #196]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	492e      	ldr	r1, [pc, #184]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0310 	and.w	r3, r3, #16
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d010      	beq.n	8007516 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	4b28      	ldr	r3, [pc, #160]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007500:	429a      	cmp	r2, r3
 8007502:	d208      	bcs.n	8007516 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007504:	4b25      	ldr	r3, [pc, #148]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	4922      	ldr	r1, [pc, #136]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007512:	4313      	orrs	r3, r2
 8007514:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d010      	beq.n	8007544 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69da      	ldr	r2, [r3, #28]
 8007526:	4b1d      	ldr	r3, [pc, #116]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800752e:	429a      	cmp	r2, r3
 8007530:	d208      	bcs.n	8007544 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007532:	4b1a      	ldr	r3, [pc, #104]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	4917      	ldr	r1, [pc, #92]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007540:	4313      	orrs	r3, r2
 8007542:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007544:	f000 f834 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 8007548:	4602      	mov	r2, r0
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	0a1b      	lsrs	r3, r3, #8
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	4912      	ldr	r1, [pc, #72]	; (80075a0 <HAL_RCC_ClockConfig+0x35c>)
 8007556:	5ccb      	ldrb	r3, [r1, r3]
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	fa22 f303 	lsr.w	r3, r2, r3
 8007560:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007562:	4b0e      	ldr	r3, [pc, #56]	; (800759c <HAL_RCC_ClockConfig+0x358>)
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	4a0d      	ldr	r2, [pc, #52]	; (80075a0 <HAL_RCC_ClockConfig+0x35c>)
 800756c:	5cd3      	ldrb	r3, [r2, r3]
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
 8007578:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <HAL_RCC_ClockConfig+0x360>)
 800757a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800757c:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <HAL_RCC_ClockConfig+0x364>)
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007582:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <HAL_RCC_ClockConfig+0x368>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f7fa fa1e 	bl	80019c8 <HAL_InitTick>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	58024400 	.word	0x58024400
 80075a0:	08012c00 	.word	0x08012c00
 80075a4:	24000004 	.word	0x24000004
 80075a8:	24000000 	.word	0x24000000
 80075ac:	2400001c 	.word	0x2400001c

080075b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b089      	sub	sp, #36	; 0x24
 80075b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075b6:	4bb3      	ldr	r3, [pc, #716]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075be:	2b18      	cmp	r3, #24
 80075c0:	f200 8155 	bhi.w	800786e <HAL_RCC_GetSysClockFreq+0x2be>
 80075c4:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	08007631 	.word	0x08007631
 80075d0:	0800786f 	.word	0x0800786f
 80075d4:	0800786f 	.word	0x0800786f
 80075d8:	0800786f 	.word	0x0800786f
 80075dc:	0800786f 	.word	0x0800786f
 80075e0:	0800786f 	.word	0x0800786f
 80075e4:	0800786f 	.word	0x0800786f
 80075e8:	0800786f 	.word	0x0800786f
 80075ec:	08007657 	.word	0x08007657
 80075f0:	0800786f 	.word	0x0800786f
 80075f4:	0800786f 	.word	0x0800786f
 80075f8:	0800786f 	.word	0x0800786f
 80075fc:	0800786f 	.word	0x0800786f
 8007600:	0800786f 	.word	0x0800786f
 8007604:	0800786f 	.word	0x0800786f
 8007608:	0800786f 	.word	0x0800786f
 800760c:	0800765d 	.word	0x0800765d
 8007610:	0800786f 	.word	0x0800786f
 8007614:	0800786f 	.word	0x0800786f
 8007618:	0800786f 	.word	0x0800786f
 800761c:	0800786f 	.word	0x0800786f
 8007620:	0800786f 	.word	0x0800786f
 8007624:	0800786f 	.word	0x0800786f
 8007628:	0800786f 	.word	0x0800786f
 800762c:	08007663 	.word	0x08007663
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007630:	4b94      	ldr	r3, [pc, #592]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d009      	beq.n	8007650 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800763c:	4b91      	ldr	r3, [pc, #580]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	08db      	lsrs	r3, r3, #3
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	4a90      	ldr	r2, [pc, #576]	; (8007888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
 800764c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800764e:	e111      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007650:	4b8d      	ldr	r3, [pc, #564]	; (8007888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007652:	61bb      	str	r3, [r7, #24]
    break;
 8007654:	e10e      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007656:	4b8d      	ldr	r3, [pc, #564]	; (800788c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007658:	61bb      	str	r3, [r7, #24]
    break;
 800765a:	e10b      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800765c:	4b8c      	ldr	r3, [pc, #560]	; (8007890 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800765e:	61bb      	str	r3, [r7, #24]
    break;
 8007660:	e108      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007662:	4b88      	ldr	r3, [pc, #544]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800766c:	4b85      	ldr	r3, [pc, #532]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	091b      	lsrs	r3, r3, #4
 8007672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007676:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007678:	4b82      	ldr	r3, [pc, #520]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007682:	4b80      	ldr	r3, [pc, #512]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007686:	08db      	lsrs	r3, r3, #3
 8007688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	fb02 f303 	mul.w	r3, r2, r3
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 80e1 	beq.w	8007868 <HAL_RCC_GetSysClockFreq+0x2b8>
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	f000 8083 	beq.w	80077b4 <HAL_RCC_GetSysClockFreq+0x204>
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	f200 80a1 	bhi.w	80077f8 <HAL_RCC_GetSysClockFreq+0x248>
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <HAL_RCC_GetSysClockFreq+0x114>
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d056      	beq.n	8007770 <HAL_RCC_GetSysClockFreq+0x1c0>
 80076c2:	e099      	b.n	80077f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076c4:	4b6f      	ldr	r3, [pc, #444]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d02d      	beq.n	800772c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076d0:	4b6c      	ldr	r3, [pc, #432]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	08db      	lsrs	r3, r3, #3
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	4a6b      	ldr	r2, [pc, #428]	; (8007888 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
 80076e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	ee07 3a90 	vmov	s15, r3
 80076e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fa:	4b62      	ldr	r3, [pc, #392]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770a:	ed97 6a02 	vldr	s12, [r7, #8]
 800770e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007726:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800772a:	e087      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007736:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007898 <HAL_RCC_GetSysClockFreq+0x2e8>
 800773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773e:	4b51      	ldr	r3, [pc, #324]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007752:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800776e:	e065      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800789c <HAL_RCC_GetSysClockFreq+0x2ec>
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b40      	ldr	r3, [pc, #256]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a02 	vldr	s12, [r7, #8]
 8007796:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077b2:	e043      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80078a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b2f      	ldr	r3, [pc, #188]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f6:	e021      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a26 	vldr	s13, [pc, #152]	; 800789c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a02 	vldr	s12, [r7, #8]
 800781e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007894 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800783a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800783c:	4b11      	ldr	r3, [pc, #68]	; (8007884 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	0a5b      	lsrs	r3, r3, #9
 8007842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007846:	3301      	adds	r3, #1
 8007848:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	ee07 3a90 	vmov	s15, r3
 8007850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007854:	edd7 6a07 	vldr	s13, [r7, #28]
 8007858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800785c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007860:	ee17 3a90 	vmov	r3, s15
 8007864:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007866:	e005      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	61bb      	str	r3, [r7, #24]
    break;
 800786c:	e002      	b.n	8007874 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007870:	61bb      	str	r3, [r7, #24]
    break;
 8007872:	bf00      	nop
  }

  return sysclockfreq;
 8007874:	69bb      	ldr	r3, [r7, #24]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3724      	adds	r7, #36	; 0x24
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	58024400 	.word	0x58024400
 8007888:	03d09000 	.word	0x03d09000
 800788c:	003d0900 	.word	0x003d0900
 8007890:	00f42400 	.word	0x00f42400
 8007894:	46000000 	.word	0x46000000
 8007898:	4c742400 	.word	0x4c742400
 800789c:	4a742400 	.word	0x4a742400
 80078a0:	4b742400 	.word	0x4b742400

080078a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078aa:	f7ff fe81 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 80078ae:	4602      	mov	r2, r0
 80078b0:	4b10      	ldr	r3, [pc, #64]	; (80078f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	490f      	ldr	r1, [pc, #60]	; (80078f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80078bc:	5ccb      	ldrb	r3, [r1, r3]
 80078be:	f003 031f 	and.w	r3, r3, #31
 80078c2:	fa22 f303 	lsr.w	r3, r2, r3
 80078c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078c8:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	4a09      	ldr	r2, [pc, #36]	; (80078f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80078d2:	5cd3      	ldrb	r3, [r2, r3]
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	4a07      	ldr	r2, [pc, #28]	; (80078fc <HAL_RCC_GetHCLKFreq+0x58>)
 80078e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078e2:	4a07      	ldr	r2, [pc, #28]	; (8007900 <HAL_RCC_GetHCLKFreq+0x5c>)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <HAL_RCC_GetHCLKFreq+0x58>)
 80078ea:	681b      	ldr	r3, [r3, #0]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	58024400 	.word	0x58024400
 80078f8:	08012c00 	.word	0x08012c00
 80078fc:	24000004 	.word	0x24000004
 8007900:	24000000 	.word	0x24000000

08007904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007908:	f7ff ffcc 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 800790c:	4602      	mov	r2, r0
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	091b      	lsrs	r3, r3, #4
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	4904      	ldr	r1, [pc, #16]	; (800792c <HAL_RCC_GetPCLK1Freq+0x28>)
 800791a:	5ccb      	ldrb	r3, [r1, r3]
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007924:	4618      	mov	r0, r3
 8007926:	bd80      	pop	{r7, pc}
 8007928:	58024400 	.word	0x58024400
 800792c:	08012c00 	.word	0x08012c00

08007930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007934:	f7ff ffb6 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 8007938:	4602      	mov	r2, r0
 800793a:	4b06      	ldr	r3, [pc, #24]	; (8007954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	0a1b      	lsrs	r3, r3, #8
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	4904      	ldr	r1, [pc, #16]	; (8007958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007946:	5ccb      	ldrb	r3, [r1, r3]
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007950:	4618      	mov	r0, r3
 8007952:	bd80      	pop	{r7, pc}
 8007954:	58024400 	.word	0x58024400
 8007958:	08012c00 	.word	0x08012c00

0800795c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	223f      	movs	r2, #63	; 0x3f
 800796a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800796c:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <HAL_RCC_GetClockConfig+0x7c>)
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	f003 0207 	and.w	r2, r3, #7
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007978:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <HAL_RCC_GetClockConfig+0x7c>)
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007984:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <HAL_RCC_GetClockConfig+0x7c>)
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f003 020f 	and.w	r2, r3, #15
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007990:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <HAL_RCC_GetClockConfig+0x7c>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800799c:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <HAL_RCC_GetClockConfig+0x7c>)
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80079a8:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <HAL_RCC_GetClockConfig+0x7c>)
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80079b4:	4b08      	ldr	r3, [pc, #32]	; (80079d8 <HAL_RCC_GetClockConfig+0x7c>)
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079c0:	4b06      	ldr	r3, [pc, #24]	; (80079dc <HAL_RCC_GetClockConfig+0x80>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 020f 	and.w	r2, r3, #15
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	601a      	str	r2, [r3, #0]
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	58024400 	.word	0x58024400
 80079dc:	52002000 	.word	0x52002000

080079e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079e8:	2300      	movs	r3, #0
 80079ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079ec:	2300      	movs	r3, #0
 80079ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d03f      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a04:	d02a      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007a06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a0a:	d824      	bhi.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a10:	d018      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a16:	d81e      	bhi.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a20:	d007      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a22:	e018      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a24:	4bab      	ldr	r3, [pc, #684]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	4aaa      	ldr	r2, [pc, #680]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a30:	e015      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3304      	adds	r3, #4
 8007a36:	2102      	movs	r1, #2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f001 fff3 	bl	8009a24 <RCCEx_PLL2_Config>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a42:	e00c      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3324      	adds	r3, #36	; 0x24
 8007a48:	2102      	movs	r1, #2
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f002 f89c 	bl	8009b88 <RCCEx_PLL3_Config>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a54:	e003      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5a:	e000      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a64:	4b9b      	ldr	r3, [pc, #620]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a70:	4998      	ldr	r1, [pc, #608]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	650b      	str	r3, [r1, #80]	; 0x50
 8007a76:	e001      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
 8007a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d03d      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d826      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a90:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007aad 	.word	0x08007aad
 8007a9c:	08007abb 	.word	0x08007abb
 8007aa0:	08007acd 	.word	0x08007acd
 8007aa4:	08007ae5 	.word	0x08007ae5
 8007aa8:	08007ae5 	.word	0x08007ae5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aac:	4b89      	ldr	r3, [pc, #548]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	4a88      	ldr	r2, [pc, #544]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ab8:	e015      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3304      	adds	r3, #4
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f001 ffaf 	bl	8009a24 <RCCEx_PLL2_Config>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007aca:	e00c      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3324      	adds	r3, #36	; 0x24
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f002 f858 	bl	8009b88 <RCCEx_PLL3_Config>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007adc:	e003      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae2:	e000      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d109      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007aec:	4b79      	ldr	r3, [pc, #484]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af0:	f023 0207 	bic.w	r2, r3, #7
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af8:	4976      	ldr	r1, [pc, #472]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	650b      	str	r3, [r1, #80]	; 0x50
 8007afe:	e001      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d042      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b18:	d02b      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b1e:	d825      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b20:	2bc0      	cmp	r3, #192	; 0xc0
 8007b22:	d028      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b24:	2bc0      	cmp	r3, #192	; 0xc0
 8007b26:	d821      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b28:	2b80      	cmp	r3, #128	; 0x80
 8007b2a:	d016      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007b2c:	2b80      	cmp	r3, #128	; 0x80
 8007b2e:	d81d      	bhi.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	d007      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007b38:	e018      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b3a:	4b66      	ldr	r3, [pc, #408]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	4a65      	ldr	r2, [pc, #404]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b46:	e017      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 ff68 	bl	8009a24 <RCCEx_PLL2_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b58:	e00e      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3324      	adds	r3, #36	; 0x24
 8007b5e:	2100      	movs	r1, #0
 8007b60:	4618      	mov	r0, r3
 8007b62:	f002 f811 	bl	8009b88 <RCCEx_PLL3_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b6a:	e005      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b70:	e002      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b72:	bf00      	nop
 8007b74:	e000      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d109      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b7e:	4b55      	ldr	r3, [pc, #340]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	4952      	ldr	r1, [pc, #328]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	650b      	str	r3, [r1, #80]	; 0x50
 8007b90:	e001      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d049      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bac:	d030      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007bae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bb2:	d82a      	bhi.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007bb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bb8:	d02c      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007bba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bbe:	d824      	bhi.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bc4:	d018      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bca:	d81e      	bhi.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bd4:	d007      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007bd6:	e018      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd8:	4b3e      	ldr	r3, [pc, #248]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	4a3d      	ldr	r2, [pc, #244]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007be4:	e017      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3304      	adds	r3, #4
 8007bea:	2100      	movs	r1, #0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f001 ff19 	bl	8009a24 <RCCEx_PLL2_Config>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007bf6:	e00e      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3324      	adds	r3, #36	; 0x24
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f001 ffc2 	bl	8009b88 <RCCEx_PLL3_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c08:	e005      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c0e:	e002      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007c10:	bf00      	nop
 8007c12:	e000      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c1c:	4b2d      	ldr	r3, [pc, #180]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c2a:	492a      	ldr	r1, [pc, #168]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	658b      	str	r3, [r1, #88]	; 0x58
 8007c30:	e001      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d04c      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c4c:	d030      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c52:	d82a      	bhi.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c58:	d02c      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c5e:	d824      	bhi.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c64:	d018      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c6a:	d81e      	bhi.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d003      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c74:	d007      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007c76:	e018      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c78:	4b16      	ldr	r3, [pc, #88]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	4a15      	ldr	r2, [pc, #84]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c84:	e017      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f001 fec9 	bl	8009a24 <RCCEx_PLL2_Config>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c96:	e00e      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3324      	adds	r3, #36	; 0x24
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f001 ff72 	bl	8009b88 <RCCEx_PLL3_Config>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ca8:	e005      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	75fb      	strb	r3, [r7, #23]
      break;
 8007cae:	e002      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10d      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007cca:	4902      	ldr	r1, [pc, #8]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	658b      	str	r3, [r1, #88]	; 0x58
 8007cd0:	e004      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007cd2:	bf00      	nop
 8007cd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d032      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cec:	2b30      	cmp	r3, #48	; 0x30
 8007cee:	d01c      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007cf0:	2b30      	cmp	r3, #48	; 0x30
 8007cf2:	d817      	bhi.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	d00c      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d813      	bhi.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d016      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007d00:	2b10      	cmp	r3, #16
 8007d02:	d10f      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d04:	4baf      	ldr	r3, [pc, #700]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	4aae      	ldr	r2, [pc, #696]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d10:	e00e      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3304      	adds	r3, #4
 8007d16:	2102      	movs	r1, #2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 fe83 	bl	8009a24 <RCCEx_PLL2_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d22:	e005      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	75fb      	strb	r3, [r7, #23]
      break;
 8007d28:	e002      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007d2a:	bf00      	nop
 8007d2c:	e000      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d36:	4ba3      	ldr	r3, [pc, #652]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d42:	49a0      	ldr	r1, [pc, #640]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d48:	e001      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d047      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d62:	d030      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d68:	d82a      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d6e:	d02c      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007d70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d74:	d824      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d7a:	d018      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d80:	d81e      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8a:	d007      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007d8c:	e018      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8e:	4b8d      	ldr	r3, [pc, #564]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	4a8c      	ldr	r2, [pc, #560]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d9a:	e017      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	2100      	movs	r1, #0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fe3e 	bl	8009a24 <RCCEx_PLL2_Config>
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007dac:	e00e      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3324      	adds	r3, #36	; 0x24
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 fee7 	bl	8009b88 <RCCEx_PLL3_Config>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007dbe:	e005      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc4:	e002      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007dc6:	bf00      	nop
 8007dc8:	e000      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007dd2:	4b7c      	ldr	r3, [pc, #496]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	4979      	ldr	r1, [pc, #484]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	650b      	str	r3, [r1, #80]	; 0x50
 8007de4:	e001      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d049      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dfe:	d02e      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e04:	d828      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007e06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e0a:	d02a      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007e0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e10:	d822      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007e12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e16:	d026      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007e18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e1c:	d81c      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007e1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e22:	d010      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e28:	d816      	bhi.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d01d      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e32:	d111      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3304      	adds	r3, #4
 8007e38:	2101      	movs	r1, #1
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f001 fdf2 	bl	8009a24 <RCCEx_PLL2_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e44:	e012      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3324      	adds	r3, #36	; 0x24
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 fe9b 	bl	8009b88 <RCCEx_PLL3_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e56:	e009      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5c:	e006      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e5e:	bf00      	nop
 8007e60:	e004      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e62:	bf00      	nop
 8007e64:	e002      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e66:	bf00      	nop
 8007e68:	e000      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d109      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e72:	4b54      	ldr	r3, [pc, #336]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e76:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7e:	4951      	ldr	r1, [pc, #324]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	650b      	str	r3, [r1, #80]	; 0x50
 8007e84:	e001      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
 8007e88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d04b      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ea0:	d02e      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ea6:	d828      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eac:	d02a      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb2:	d822      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007eb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eb8:	d026      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007eba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ebe:	d81c      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec4:	d010      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eca:	d816      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01d      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ed4:	d111      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	2101      	movs	r1, #1
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 fda1 	bl	8009a24 <RCCEx_PLL2_Config>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ee6:	e012      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3324      	adds	r3, #36	; 0x24
 8007eec:	2101      	movs	r1, #1
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f001 fe4a 	bl	8009b88 <RCCEx_PLL3_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ef8:	e009      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	75fb      	strb	r3, [r7, #23]
      break;
 8007efe:	e006      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007f00:	bf00      	nop
 8007f02:	e004      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007f04:	bf00      	nop
 8007f06:	e002      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007f08:	bf00      	nop
 8007f0a:	e000      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f14:	4b2b      	ldr	r3, [pc, #172]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f18:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f22:	4928      	ldr	r1, [pc, #160]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	658b      	str	r3, [r1, #88]	; 0x58
 8007f28:	e001      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d02f      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f42:	d00e      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f48:	d814      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d015      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f52:	d10f      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f54:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	4a1a      	ldr	r2, [pc, #104]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f60:	e00c      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	3304      	adds	r3, #4
 8007f66:	2101      	movs	r1, #1
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f001 fd5b 	bl	8009a24 <RCCEx_PLL2_Config>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f72:	e003      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	75fb      	strb	r3, [r7, #23]
      break;
 8007f78:	e000      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f82:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8e:	490d      	ldr	r1, [pc, #52]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	650b      	str	r3, [r1, #80]	; 0x50
 8007f94:	e001      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d033      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d81c      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007fae:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb4:	08007fef 	.word	0x08007fef
 8007fb8:	08007fc9 	.word	0x08007fc9
 8007fbc:	08007fd7 	.word	0x08007fd7
 8007fc0:	08007fef 	.word	0x08007fef
 8007fc4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc8:	4bb8      	ldr	r3, [pc, #736]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	4ab7      	ldr	r2, [pc, #732]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fd4:	e00c      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	2102      	movs	r1, #2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 fd21 	bl	8009a24 <RCCEx_PLL2_Config>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fe6:	e003      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	75fb      	strb	r3, [r7, #23]
      break;
 8007fec:	e000      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ff6:	4bad      	ldr	r3, [pc, #692]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ffa:	f023 0203 	bic.w	r2, r3, #3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008002:	49aa      	ldr	r1, [pc, #680]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008004:	4313      	orrs	r3, r2
 8008006:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008008:	e001      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 8086 	beq.w	8008128 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800801c:	4ba4      	ldr	r3, [pc, #656]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4aa3      	ldr	r2, [pc, #652]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008028:	f7f9 fd18 	bl	8001a5c <HAL_GetTick>
 800802c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800802e:	e009      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008030:	f7f9 fd14 	bl	8001a5c <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b64      	cmp	r3, #100	; 0x64
 800803c:	d902      	bls.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	75fb      	strb	r3, [r7, #23]
        break;
 8008042:	e005      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008044:	4b9a      	ldr	r3, [pc, #616]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0ef      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d166      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008056:	4b95      	ldr	r3, [pc, #596]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008060:	4053      	eors	r3, r2
 8008062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008066:	2b00      	cmp	r3, #0
 8008068:	d013      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800806a:	4b90      	ldr	r3, [pc, #576]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008072:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008074:	4b8d      	ldr	r3, [pc, #564]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	4a8c      	ldr	r2, [pc, #560]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800807a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800807e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008080:	4b8a      	ldr	r3, [pc, #552]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008084:	4a89      	ldr	r2, [pc, #548]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800808a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800808c:	4a87      	ldr	r2, [pc, #540]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809c:	d115      	bne.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800809e:	f7f9 fcdd 	bl	8001a5c <HAL_GetTick>
 80080a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080a4:	e00b      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080a6:	f7f9 fcd9 	bl	8001a5c <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d902      	bls.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	75fb      	strb	r3, [r7, #23]
            break;
 80080bc:	e005      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080be:	4b7b      	ldr	r3, [pc, #492]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0ed      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d126      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080de:	d10d      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80080e0:	4b72      	ldr	r3, [pc, #456]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080ee:	0919      	lsrs	r1, r3, #4
 80080f0:	4b70      	ldr	r3, [pc, #448]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80080f2:	400b      	ands	r3, r1
 80080f4:	496d      	ldr	r1, [pc, #436]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	610b      	str	r3, [r1, #16]
 80080fa:	e005      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80080fc:	4b6b      	ldr	r3, [pc, #428]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	4a6a      	ldr	r2, [pc, #424]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008102:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008106:	6113      	str	r3, [r2, #16]
 8008108:	4b68      	ldr	r3, [pc, #416]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800810a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008116:	4965      	ldr	r1, [pc, #404]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008118:	4313      	orrs	r3, r2
 800811a:	670b      	str	r3, [r1, #112]	; 0x70
 800811c:	e004      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	75bb      	strb	r3, [r7, #22]
 8008122:	e001      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d07e      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008138:	2b28      	cmp	r3, #40	; 0x28
 800813a:	d867      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800813c:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	08008213 	.word	0x08008213
 8008148:	0800820d 	.word	0x0800820d
 800814c:	0800820d 	.word	0x0800820d
 8008150:	0800820d 	.word	0x0800820d
 8008154:	0800820d 	.word	0x0800820d
 8008158:	0800820d 	.word	0x0800820d
 800815c:	0800820d 	.word	0x0800820d
 8008160:	0800820d 	.word	0x0800820d
 8008164:	080081e9 	.word	0x080081e9
 8008168:	0800820d 	.word	0x0800820d
 800816c:	0800820d 	.word	0x0800820d
 8008170:	0800820d 	.word	0x0800820d
 8008174:	0800820d 	.word	0x0800820d
 8008178:	0800820d 	.word	0x0800820d
 800817c:	0800820d 	.word	0x0800820d
 8008180:	0800820d 	.word	0x0800820d
 8008184:	080081fb 	.word	0x080081fb
 8008188:	0800820d 	.word	0x0800820d
 800818c:	0800820d 	.word	0x0800820d
 8008190:	0800820d 	.word	0x0800820d
 8008194:	0800820d 	.word	0x0800820d
 8008198:	0800820d 	.word	0x0800820d
 800819c:	0800820d 	.word	0x0800820d
 80081a0:	0800820d 	.word	0x0800820d
 80081a4:	08008213 	.word	0x08008213
 80081a8:	0800820d 	.word	0x0800820d
 80081ac:	0800820d 	.word	0x0800820d
 80081b0:	0800820d 	.word	0x0800820d
 80081b4:	0800820d 	.word	0x0800820d
 80081b8:	0800820d 	.word	0x0800820d
 80081bc:	0800820d 	.word	0x0800820d
 80081c0:	0800820d 	.word	0x0800820d
 80081c4:	08008213 	.word	0x08008213
 80081c8:	0800820d 	.word	0x0800820d
 80081cc:	0800820d 	.word	0x0800820d
 80081d0:	0800820d 	.word	0x0800820d
 80081d4:	0800820d 	.word	0x0800820d
 80081d8:	0800820d 	.word	0x0800820d
 80081dc:	0800820d 	.word	0x0800820d
 80081e0:	0800820d 	.word	0x0800820d
 80081e4:	08008213 	.word	0x08008213
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3304      	adds	r3, #4
 80081ec:	2101      	movs	r1, #1
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fc18 	bl	8009a24 <RCCEx_PLL2_Config>
 80081f4:	4603      	mov	r3, r0
 80081f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081f8:	e00c      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3324      	adds	r3, #36	; 0x24
 80081fe:	2101      	movs	r1, #1
 8008200:	4618      	mov	r0, r3
 8008202:	f001 fcc1 	bl	8009b88 <RCCEx_PLL3_Config>
 8008206:	4603      	mov	r3, r0
 8008208:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800820a:	e003      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	75fb      	strb	r3, [r7, #23]
      break;
 8008210:	e000      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800821c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008226:	4921      	ldr	r1, [pc, #132]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008228:	4313      	orrs	r3, r2
 800822a:	654b      	str	r3, [r1, #84]	; 0x54
 800822c:	e001      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d03e      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008242:	2b05      	cmp	r3, #5
 8008244:	d820      	bhi.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	0800828f 	.word	0x0800828f
 8008250:	08008265 	.word	0x08008265
 8008254:	08008277 	.word	0x08008277
 8008258:	0800828f 	.word	0x0800828f
 800825c:	0800828f 	.word	0x0800828f
 8008260:	0800828f 	.word	0x0800828f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	2101      	movs	r1, #1
 800826a:	4618      	mov	r0, r3
 800826c:	f001 fbda 	bl	8009a24 <RCCEx_PLL2_Config>
 8008270:	4603      	mov	r3, r0
 8008272:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008274:	e00c      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3324      	adds	r3, #36	; 0x24
 800827a:	2101      	movs	r1, #1
 800827c:	4618      	mov	r0, r3
 800827e:	f001 fc83 	bl	8009b88 <RCCEx_PLL3_Config>
 8008282:	4603      	mov	r3, r0
 8008284:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008286:	e003      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	75fb      	strb	r3, [r7, #23]
      break;
 800828c:	e000      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800828e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d110      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008296:	4b05      	ldr	r3, [pc, #20]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829a:	f023 0207 	bic.w	r2, r3, #7
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a2:	4902      	ldr	r1, [pc, #8]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	654b      	str	r3, [r1, #84]	; 0x54
 80082a8:	e008      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80082aa:	bf00      	nop
 80082ac:	58024400 	.word	0x58024400
 80082b0:	58024800 	.word	0x58024800
 80082b4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d039      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	d820      	bhi.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	0800831b 	.word	0x0800831b
 80082dc:	080082f1 	.word	0x080082f1
 80082e0:	08008303 	.word	0x08008303
 80082e4:	0800831b 	.word	0x0800831b
 80082e8:	0800831b 	.word	0x0800831b
 80082ec:	0800831b 	.word	0x0800831b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3304      	adds	r3, #4
 80082f4:	2101      	movs	r1, #1
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fb94 	bl	8009a24 <RCCEx_PLL2_Config>
 80082fc:	4603      	mov	r3, r0
 80082fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008300:	e00c      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3324      	adds	r3, #36	; 0x24
 8008306:	2101      	movs	r1, #1
 8008308:	4618      	mov	r0, r3
 800830a:	f001 fc3d 	bl	8009b88 <RCCEx_PLL3_Config>
 800830e:	4603      	mov	r3, r0
 8008310:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008312:	e003      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	75fb      	strb	r3, [r7, #23]
      break;
 8008318:	e000      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800831a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008322:	4bb7      	ldr	r3, [pc, #732]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008326:	f023 0207 	bic.w	r2, r3, #7
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008330:	49b3      	ldr	r1, [pc, #716]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008332:	4313      	orrs	r3, r2
 8008334:	658b      	str	r3, [r1, #88]	; 0x58
 8008336:	e001      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0320 	and.w	r3, r3, #32
 8008344:	2b00      	cmp	r3, #0
 8008346:	d04b      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800834e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008352:	d02e      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008358:	d828      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800835a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835e:	d02a      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008364:	d822      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008366:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800836a:	d026      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800836c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008370:	d81c      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008376:	d010      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800837c:	d816      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d01d      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008386:	d111      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	2100      	movs	r1, #0
 800838e:	4618      	mov	r0, r3
 8008390:	f001 fb48 	bl	8009a24 <RCCEx_PLL2_Config>
 8008394:	4603      	mov	r3, r0
 8008396:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008398:	e012      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3324      	adds	r3, #36	; 0x24
 800839e:	2102      	movs	r1, #2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 fbf1 	bl	8009b88 <RCCEx_PLL3_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80083aa:	e009      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	75fb      	strb	r3, [r7, #23]
      break;
 80083b0:	e006      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80083b2:	bf00      	nop
 80083b4:	e004      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80083b6:	bf00      	nop
 80083b8:	e002      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80083ba:	bf00      	nop
 80083bc:	e000      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80083be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083c6:	4b8e      	ldr	r3, [pc, #568]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d4:	498a      	ldr	r1, [pc, #552]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	654b      	str	r3, [r1, #84]	; 0x54
 80083da:	e001      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d04b      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083f6:	d02e      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80083f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083fc:	d828      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008402:	d02a      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008408:	d822      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800840a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800840e:	d026      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008410:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008414:	d81c      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800841a:	d010      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800841c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008420:	d816      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01d      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800842a:	d111      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3304      	adds	r3, #4
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f001 faf6 	bl	8009a24 <RCCEx_PLL2_Config>
 8008438:	4603      	mov	r3, r0
 800843a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800843c:	e012      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3324      	adds	r3, #36	; 0x24
 8008442:	2102      	movs	r1, #2
 8008444:	4618      	mov	r0, r3
 8008446:	f001 fb9f 	bl	8009b88 <RCCEx_PLL3_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800844e:	e009      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	75fb      	strb	r3, [r7, #23]
      break;
 8008454:	e006      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008456:	bf00      	nop
 8008458:	e004      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800845a:	bf00      	nop
 800845c:	e002      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800845e:	bf00      	nop
 8008460:	e000      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800846a:	4b65      	ldr	r3, [pc, #404]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800846c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008478:	4961      	ldr	r1, [pc, #388]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800847a:	4313      	orrs	r3, r2
 800847c:	658b      	str	r3, [r1, #88]	; 0x58
 800847e:	e001      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848c:	2b00      	cmp	r3, #0
 800848e:	d04b      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008496:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800849a:	d02e      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800849c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80084a0:	d828      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80084a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a6:	d02a      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80084a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ac:	d822      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80084ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084b2:	d026      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80084b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084b8:	d81c      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80084ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084be:	d010      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80084c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084c4:	d816      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d01d      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80084ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ce:	d111      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3304      	adds	r3, #4
 80084d4:	2100      	movs	r1, #0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 faa4 	bl	8009a24 <RCCEx_PLL2_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084e0:	e012      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3324      	adds	r3, #36	; 0x24
 80084e6:	2102      	movs	r1, #2
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fb4d 	bl	8009b88 <RCCEx_PLL3_Config>
 80084ee:	4603      	mov	r3, r0
 80084f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084f2:	e009      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	75fb      	strb	r3, [r7, #23]
      break;
 80084f8:	e006      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084fa:	bf00      	nop
 80084fc:	e004      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084fe:	bf00      	nop
 8008500:	e002      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008502:	bf00      	nop
 8008504:	e000      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008508:	7dfb      	ldrb	r3, [r7, #23]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800850e:	4b3c      	ldr	r3, [pc, #240]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800851c:	4938      	ldr	r1, [pc, #224]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800851e:	4313      	orrs	r3, r2
 8008520:	658b      	str	r3, [r1, #88]	; 0x58
 8008522:	e001      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01a      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800853a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853e:	d10a      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3324      	adds	r3, #36	; 0x24
 8008544:	2102      	movs	r1, #2
 8008546:	4618      	mov	r0, r3
 8008548:	f001 fb1e 	bl	8009b88 <RCCEx_PLL3_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008556:	4b2a      	ldr	r3, [pc, #168]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008564:	4926      	ldr	r1, [pc, #152]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008566:	4313      	orrs	r3, r2
 8008568:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b00      	cmp	r3, #0
 8008574:	d01a      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800857c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008580:	d10a      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3324      	adds	r3, #36	; 0x24
 8008586:	2102      	movs	r1, #2
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fafd 	bl	8009b88 <RCCEx_PLL3_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008598:	4b19      	ldr	r3, [pc, #100]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800859a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085a6:	4916      	ldr	r1, [pc, #88]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d036      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085c2:	d01f      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80085c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085c8:	d817      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80085ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d2:	d009      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80085d4:	e011      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	3304      	adds	r3, #4
 80085da:	2100      	movs	r1, #0
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 fa21 	bl	8009a24 <RCCEx_PLL2_Config>
 80085e2:	4603      	mov	r3, r0
 80085e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085e6:	e00e      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3324      	adds	r3, #36	; 0x24
 80085ec:	2102      	movs	r1, #2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f001 faca 	bl	8009b88 <RCCEx_PLL3_Config>
 80085f4:	4603      	mov	r3, r0
 80085f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085f8:	e005      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	75fb      	strb	r3, [r7, #23]
      break;
 80085fe:	e002      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008600:	58024400 	.word	0x58024400
      break;
 8008604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800860c:	4b93      	ldr	r3, [pc, #588]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800860e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800861a:	4990      	ldr	r1, [pc, #576]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800861c:	4313      	orrs	r3, r2
 800861e:	658b      	str	r3, [r1, #88]	; 0x58
 8008620:	e001      	b.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d033      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800863c:	d01c      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800863e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008642:	d816      	bhi.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008648:	d003      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800864a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800864e:	d007      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008650:	e00f      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008652:	4b82      	ldr	r3, [pc, #520]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	4a81      	ldr	r2, [pc, #516]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800865c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800865e:	e00c      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3324      	adds	r3, #36	; 0x24
 8008664:	2101      	movs	r1, #1
 8008666:	4618      	mov	r0, r3
 8008668:	f001 fa8e 	bl	8009b88 <RCCEx_PLL3_Config>
 800866c:	4603      	mov	r3, r0
 800866e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008670:	e003      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	75fb      	strb	r3, [r7, #23]
      break;
 8008676:	e000      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008680:	4b76      	ldr	r3, [pc, #472]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800868e:	4973      	ldr	r1, [pc, #460]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008690:	4313      	orrs	r3, r2
 8008692:	654b      	str	r3, [r1, #84]	; 0x54
 8008694:	e001      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
 8008698:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d029      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80086ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b2:	d007      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80086b4:	e00f      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b6:	4b69      	ldr	r3, [pc, #420]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ba:	4a68      	ldr	r2, [pc, #416]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086c2:	e00b      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3304      	adds	r3, #4
 80086c8:	2102      	movs	r1, #2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 f9aa 	bl	8009a24 <RCCEx_PLL2_Config>
 80086d0:	4603      	mov	r3, r0
 80086d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086d4:	e002      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	75fb      	strb	r3, [r7, #23]
      break;
 80086da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086e2:	4b5e      	ldr	r3, [pc, #376]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ee:	495b      	ldr	r1, [pc, #364]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086f4:	e001      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00a      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3324      	adds	r3, #36	; 0x24
 800870a:	2102      	movs	r1, #2
 800870c:	4618      	mov	r0, r3
 800870e:	f001 fa3b 	bl	8009b88 <RCCEx_PLL3_Config>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d030      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008730:	d017      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008736:	d811      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800873c:	d013      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800873e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008742:	d80b      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d010      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800874c:	d106      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800874e:	4b43      	ldr	r3, [pc, #268]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008752:	4a42      	ldr	r2, [pc, #264]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008758:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800875a:	e007      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	75fb      	strb	r3, [r7, #23]
      break;
 8008760:	e004      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008762:	bf00      	nop
 8008764:	e002      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008766:	bf00      	nop
 8008768:	e000      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800876a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d109      	bne.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008772:	4b3a      	ldr	r3, [pc, #232]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008776:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800877e:	4937      	ldr	r1, [pc, #220]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008780:	4313      	orrs	r3, r2
 8008782:	654b      	str	r3, [r1, #84]	; 0x54
 8008784:	e001      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d008      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008796:	4b31      	ldr	r3, [pc, #196]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a2:	492e      	ldr	r1, [pc, #184]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80087b4:	4b29      	ldr	r3, [pc, #164]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087c2:	4926      	ldr	r1, [pc, #152]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d008      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087d4:	4b21      	ldr	r3, [pc, #132]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087e0:	491e      	ldr	r1, [pc, #120]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00d      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087f2:	4b1a      	ldr	r3, [pc, #104]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	4a19      	ldr	r2, [pc, #100]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087fc:	6113      	str	r3, [r2, #16]
 80087fe:	4b17      	ldr	r3, [pc, #92]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008800:	691a      	ldr	r2, [r3, #16]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008808:	4914      	ldr	r1, [pc, #80]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800880a:	4313      	orrs	r3, r2
 800880c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	da08      	bge.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008816:	4b11      	ldr	r3, [pc, #68]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008822:	490e      	ldr	r1, [pc, #56]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008824:	4313      	orrs	r3, r2
 8008826:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d009      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008834:	4b09      	ldr	r3, [pc, #36]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008838:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008842:	4906      	ldr	r1, [pc, #24]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008844:	4313      	orrs	r3, r2
 8008846:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008848:	7dbb      	ldrb	r3, [r7, #22]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	58024400 	.word	0x58024400

08008860 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b090      	sub	sp, #64	; 0x40
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886e:	f040 8095 	bne.w	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008872:	4bae      	ldr	r3, [pc, #696]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	633b      	str	r3, [r7, #48]	; 0x30
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	2b04      	cmp	r3, #4
 8008880:	f200 8088 	bhi.w	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	080088a1 	.word	0x080088a1
 8008890:	080088c9 	.word	0x080088c9
 8008894:	080088f1 	.word	0x080088f1
 8008898:	0800898d 	.word	0x0800898d
 800889c:	08008919 	.word	0x08008919

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088a0:	4ba2      	ldr	r3, [pc, #648]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ac:	d108      	bne.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 ff64 	bl	8009780 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088bc:	f000 bc95 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088c4:	f000 bc91 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c8:	4b98      	ldr	r3, [pc, #608]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088d4:	d108      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d6:	f107 0318 	add.w	r3, r7, #24
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 fca8 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088e4:	f000 bc81 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088ec:	f000 bc7d 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088f0:	4b8e      	ldr	r3, [pc, #568]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088fc:	d108      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088fe:	f107 030c 	add.w	r3, r7, #12
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fde8 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800890c:	f000 bc6d 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008914:	f000 bc69 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008918:	4b84      	ldr	r3, [pc, #528]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800891a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800891c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008920:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008922:	4b82      	ldr	r3, [pc, #520]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b04      	cmp	r3, #4
 800892c:	d10c      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	2b00      	cmp	r3, #0
 8008932:	d109      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008934:	4b7d      	ldr	r3, [pc, #500]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	08db      	lsrs	r3, r3, #3
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	4a7c      	ldr	r2, [pc, #496]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008946:	e01f      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008948:	4b78      	ldr	r3, [pc, #480]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008954:	d106      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800895c:	d102      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800895e:	4b75      	ldr	r3, [pc, #468]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008962:	e011      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008964:	4b71      	ldr	r3, [pc, #452]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800896c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008970:	d106      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008978:	d102      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800897a:	4b6f      	ldr	r3, [pc, #444]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800897c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800897e:	e003      	b.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008984:	f000 bc31 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008988:	f000 bc2f 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800898c:	4b6b      	ldr	r3, [pc, #428]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008990:	f000 bc2b 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008998:	f000 bc27 	b.w	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a2:	f040 8095 	bne.w	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80089a6:	4b61      	ldr	r3, [pc, #388]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80089ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b6:	d04d      	beq.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089be:	f200 8084 	bhi.w	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	2bc0      	cmp	r3, #192	; 0xc0
 80089c6:	d07d      	beq.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	2bc0      	cmp	r3, #192	; 0xc0
 80089cc:	d87d      	bhi.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	2b80      	cmp	r3, #128	; 0x80
 80089d2:	d02d      	beq.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	2b80      	cmp	r3, #128	; 0x80
 80089d8:	d877      	bhi.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d003      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	2b40      	cmp	r3, #64	; 0x40
 80089e4:	d012      	beq.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80089e6:	e070      	b.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089e8:	4b50      	ldr	r3, [pc, #320]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089f4:	d107      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fec0 	bl	8009780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a04:	e3f1      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a0a:	e3ee      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a0c:	4b47      	ldr	r3, [pc, #284]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a18:	d107      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a1a:	f107 0318 	add.w	r3, r7, #24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 fc06 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a28:	e3df      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a2e:	e3dc      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a30:	4b3e      	ldr	r3, [pc, #248]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a3c:	d107      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a3e:	f107 030c 	add.w	r3, r7, #12
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fd48 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a4c:	e3cd      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a52:	e3ca      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a54:	4b35      	ldr	r3, [pc, #212]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a5c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a5e:	4b33      	ldr	r3, [pc, #204]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0304 	and.w	r3, r3, #4
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d10c      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d109      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a70:	4b2e      	ldr	r3, [pc, #184]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	08db      	lsrs	r3, r3, #3
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	4a2d      	ldr	r2, [pc, #180]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a82:	e01e      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a84:	4b29      	ldr	r3, [pc, #164]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a90:	d106      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a98:	d102      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a9a:	4b26      	ldr	r3, [pc, #152]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a9e:	e010      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008aa0:	4b22      	ldr	r3, [pc, #136]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aac:	d106      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ab4:	d102      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ab6:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aba:	e002      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ac0:	e393      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ac2:	e392      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ac4:	4b1d      	ldr	r3, [pc, #116]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac8:	e38f      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ace:	e38c      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ad6:	f040 80a7 	bne.w	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008ada:	4b14      	ldr	r3, [pc, #80]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ade:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008ae2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aea:	d05f      	beq.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008af2:	f200 8096 	bhi.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008afc:	f000 808e 	beq.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b06:	f200 808c 	bhi.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b10:	d03a      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b18:	f200 8083 	bhi.w	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00e      	beq.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b28:	d01c      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008b2a:	e07a      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008b2c:	58024400 	.word	0x58024400
 8008b30:	03d09000 	.word	0x03d09000
 8008b34:	003d0900 	.word	0x003d0900
 8008b38:	00f42400 	.word	0x00f42400
 8008b3c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b40:	4baa      	ldr	r3, [pc, #680]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b4c:	d107      	bne.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 fe14 	bl	8009780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b5c:	e345      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b62:	e342      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b64:	4ba1      	ldr	r3, [pc, #644]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b70:	d107      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b72:	f107 0318 	add.w	r3, r7, #24
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fb5a 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b80:	e333      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b86:	e330      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b88:	4b98      	ldr	r3, [pc, #608]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b94:	d107      	bne.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b96:	f107 030c 	add.w	r3, r7, #12
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fc9c 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ba4:	e321      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008baa:	e31e      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bac:	4b8f      	ldr	r3, [pc, #572]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bb6:	4b8d      	ldr	r3, [pc, #564]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0304 	and.w	r3, r3, #4
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d10c      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d109      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bc8:	4b88      	ldr	r3, [pc, #544]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	08db      	lsrs	r3, r3, #3
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	4a87      	ldr	r2, [pc, #540]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bda:	e01e      	b.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bdc:	4b83      	ldr	r3, [pc, #524]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be8:	d106      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bf0:	d102      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008bf2:	4b80      	ldr	r3, [pc, #512]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf6:	e010      	b.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bf8:	4b7c      	ldr	r3, [pc, #496]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c04:	d106      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c0c:	d102      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c0e:	4b7a      	ldr	r3, [pc, #488]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c12:	e002      	b.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c18:	e2e7      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c1a:	e2e6      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c1c:	4b77      	ldr	r3, [pc, #476]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c20:	e2e3      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c26:	e2e0      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c2e:	f040 809c 	bne.w	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008c32:	4b6e      	ldr	r3, [pc, #440]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008c3a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c42:	d054      	beq.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c4a:	f200 808b 	bhi.w	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c54:	f000 8083 	beq.w	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c5e:	f200 8081 	bhi.w	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c68:	d02f      	beq.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c70:	d878      	bhi.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c7e:	d012      	beq.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008c80:	e070      	b.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c82:	4b5a      	ldr	r3, [pc, #360]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c8e:	d107      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fd73 	bl	8009780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c9e:	e2a4      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca4:	e2a1      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ca6:	4b51      	ldr	r3, [pc, #324]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cb2:	d107      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cb4:	f107 0318 	add.w	r3, r7, #24
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fab9 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008cc2:	e292      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc8:	e28f      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cca:	4b48      	ldr	r3, [pc, #288]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cd6:	d107      	bne.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd8:	f107 030c 	add.w	r3, r7, #12
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fbfb 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ce6:	e280      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cec:	e27d      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008cee:	4b3f      	ldr	r3, [pc, #252]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cf6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cf8:	4b3c      	ldr	r3, [pc, #240]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d10c      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d109      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d0a:	4b38      	ldr	r3, [pc, #224]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	08db      	lsrs	r3, r3, #3
 8008d10:	f003 0303 	and.w	r3, r3, #3
 8008d14:	4a36      	ldr	r2, [pc, #216]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008d16:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d1c:	e01e      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d1e:	4b33      	ldr	r3, [pc, #204]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d2a:	d106      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d32:	d102      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d34:	4b2f      	ldr	r3, [pc, #188]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d38:	e010      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d3a:	4b2c      	ldr	r3, [pc, #176]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d46:	d106      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d4e:	d102      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d50:	4b29      	ldr	r3, [pc, #164]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d54:	e002      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d5a:	e246      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d5c:	e245      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d5e:	4b27      	ldr	r3, [pc, #156]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d62:	e242      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d68:	e23f      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d70:	f040 80a8 	bne.w	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008d74:	4b1d      	ldr	r3, [pc, #116]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008d7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d84:	d060      	beq.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d8c:	f200 8097 	bhi.w	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d96:	f000 808f 	beq.w	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008da0:	f200 808d 	bhi.w	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008daa:	d03b      	beq.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db2:	f200 8084 	bhi.w	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc2:	d01d      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008dc4:	e07b      	b.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd2:	d107      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fcd1 	bl	8009780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008de2:	e202      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008de8:	e1ff      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008dea:	bf00      	nop
 8008dec:	58024400 	.word	0x58024400
 8008df0:	03d09000 	.word	0x03d09000
 8008df4:	003d0900 	.word	0x003d0900
 8008df8:	00f42400 	.word	0x00f42400
 8008dfc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e00:	4ba3      	ldr	r3, [pc, #652]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e0c:	d107      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e0e:	f107 0318 	add.w	r3, r7, #24
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fa0c 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e1c:	e1e5      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e22:	e1e2      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e24:	4b9a      	ldr	r3, [pc, #616]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e30:	d107      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e32:	f107 030c 	add.w	r3, r7, #12
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fb4e 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e40:	e1d3      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e46:	e1d0      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e48:	4b91      	ldr	r3, [pc, #580]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e50:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e52:	4b8f      	ldr	r3, [pc, #572]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d10c      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d109      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e64:	4b8a      	ldr	r3, [pc, #552]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	08db      	lsrs	r3, r3, #3
 8008e6a:	f003 0303 	and.w	r3, r3, #3
 8008e6e:	4a89      	ldr	r2, [pc, #548]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e70:	fa22 f303 	lsr.w	r3, r2, r3
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e76:	e01e      	b.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e78:	4b85      	ldr	r3, [pc, #532]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e84:	d106      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e8c:	d102      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e8e:	4b82      	ldr	r3, [pc, #520]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e92:	e010      	b.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e94:	4b7e      	ldr	r3, [pc, #504]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ea0:	d106      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea8:	d102      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008eaa:	4b7c      	ldr	r3, [pc, #496]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eae:	e002      	b.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008eb4:	e199      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008eb6:	e198      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008eb8:	4b79      	ldr	r3, [pc, #484]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ebc:	e195      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec2:	e192      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008eca:	d173      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008ecc:	4b70      	ldr	r3, [pc, #448]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ed4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008edc:	d02f      	beq.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee4:	d863      	bhi.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d004      	beq.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef2:	d012      	beq.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008ef4:	e05b      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ef6:	4b66      	ldr	r3, [pc, #408]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f02:	d107      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f04:	f107 0318 	add.w	r3, r7, #24
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 f991 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f12:	e16a      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f18:	e167      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f1a:	4b5d      	ldr	r3, [pc, #372]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f26:	d107      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f28:	f107 030c 	add.w	r3, r7, #12
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fad3 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f36:	e158      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f3c:	e155      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f3e:	4b54      	ldr	r3, [pc, #336]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f48:	4b51      	ldr	r3, [pc, #324]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d10c      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d109      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f5a:	4b4d      	ldr	r3, [pc, #308]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	08db      	lsrs	r3, r3, #3
 8008f60:	f003 0303 	and.w	r3, r3, #3
 8008f64:	4a4b      	ldr	r2, [pc, #300]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f66:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f6c:	e01e      	b.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f6e:	4b48      	ldr	r3, [pc, #288]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f7a:	d106      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f82:	d102      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f84:	4b44      	ldr	r3, [pc, #272]	; (8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f88:	e010      	b.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f8a:	4b41      	ldr	r3, [pc, #260]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f96:	d106      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f9e:	d102      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008fa0:	4b3e      	ldr	r3, [pc, #248]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa4:	e002      	b.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008faa:	e11e      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fac:	e11d      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb2:	e11a      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fba:	d133      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008fbc:	4b34      	ldr	r3, [pc, #208]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fc4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd2:	d012      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008fd4:	e023      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fd6:	4b2e      	ldr	r3, [pc, #184]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fe2:	d107      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fbc9 	bl	8009780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ff2:	e0fa      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff8:	e0f7      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ffa:	4b25      	ldr	r3, [pc, #148]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009006:	d107      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009008:	f107 0318 	add.w	r3, r7, #24
 800900c:	4618      	mov	r0, r3
 800900e:	f000 f90f 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009016:	e0e8      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800901c:	e0e5      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009022:	e0e2      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800902a:	f040 808f 	bne.w	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800902e:	4b18      	ldr	r3, [pc, #96]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009032:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009036:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800903e:	d075      	beq.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009046:	d87e      	bhi.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904e:	d060      	beq.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009056:	d876      	bhi.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800905e:	d045      	beq.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009066:	d86e      	bhi.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906e:	d02b      	beq.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009076:	d866      	bhi.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	2b00      	cmp	r3, #0
 800907c:	d004      	beq.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009084:	d00e      	beq.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009086:	e05e      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009088:	f000 f8bc 	bl	8009204 <HAL_RCCEx_GetD3PCLK1Freq>
 800908c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800908e:	e0ac      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009090:	58024400 	.word	0x58024400
 8009094:	03d09000 	.word	0x03d09000
 8009098:	003d0900 	.word	0x003d0900
 800909c:	00f42400 	.word	0x00f42400
 80090a0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090a4:	4b53      	ldr	r3, [pc, #332]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090b0:	d107      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090b2:	f107 0318 	add.w	r3, r7, #24
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f8ba 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090c0:	e093      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c6:	e090      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090c8:	4b4a      	ldr	r3, [pc, #296]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d4:	d107      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090d6:	f107 030c 	add.w	r3, r7, #12
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f9fc 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090e4:	e081      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ea:	e07e      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090ec:	4b41      	ldr	r3, [pc, #260]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d109      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090f8:	4b3e      	ldr	r3, [pc, #248]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	08db      	lsrs	r3, r3, #3
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	4a3d      	ldr	r2, [pc, #244]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009104:	fa22 f303 	lsr.w	r3, r2, r3
 8009108:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800910a:	e06e      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009110:	e06b      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009112:	4b38      	ldr	r3, [pc, #224]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800911a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800911e:	d102      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009120:	4b36      	ldr	r3, [pc, #216]	; (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009124:	e061      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912a:	e05e      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800912c:	4b31      	ldr	r3, [pc, #196]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009138:	d102      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800913a:	4b31      	ldr	r3, [pc, #196]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800913c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800913e:	e054      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009144:	e051      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800914a:	e04e      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009152:	d148      	bne.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009154:	4b27      	ldr	r3, [pc, #156]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800915c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009164:	d02a      	beq.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800916c:	d838      	bhi.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800917a:	d00d      	beq.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800917c:	e030      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800917e:	4b1d      	ldr	r3, [pc, #116]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800918a:	d102      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800918c:	4b1c      	ldr	r3, [pc, #112]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800918e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009190:	e02b      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009196:	e028      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009198:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091a4:	d107      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fae8 	bl	8009780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091b4:	e019      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ba:	e016      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091bc:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091c8:	d107      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ca:	f107 0318 	add.w	r3, r7, #24
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f82e 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091d8:	e007      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091de:	e004      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091e4:	e001      	b.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80091ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3740      	adds	r7, #64	; 0x40
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	58024400 	.word	0x58024400
 80091f8:	03d09000 	.word	0x03d09000
 80091fc:	003d0900 	.word	0x003d0900
 8009200:	00f42400 	.word	0x00f42400

08009204 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009208:	f7fe fb4c 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 800920c:	4602      	mov	r2, r0
 800920e:	4b06      	ldr	r3, [pc, #24]	; (8009228 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	091b      	lsrs	r3, r3, #4
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800921a:	5ccb      	ldrb	r3, [r1, r3]
 800921c:	f003 031f 	and.w	r3, r3, #31
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009224:	4618      	mov	r0, r3
 8009226:	bd80      	pop	{r7, pc}
 8009228:	58024400 	.word	0x58024400
 800922c:	08012c00 	.word	0x08012c00

08009230 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009230:	b480      	push	{r7}
 8009232:	b089      	sub	sp, #36	; 0x24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009238:	4ba1      	ldr	r3, [pc, #644]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009242:	4b9f      	ldr	r3, [pc, #636]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009246:	0b1b      	lsrs	r3, r3, #12
 8009248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800924c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800924e:	4b9c      	ldr	r3, [pc, #624]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009252:	091b      	lsrs	r3, r3, #4
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800925a:	4b99      	ldr	r3, [pc, #612]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800925c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925e:	08db      	lsrs	r3, r3, #3
 8009260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	fb02 f303 	mul.w	r3, r2, r3
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 8111 	beq.w	80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	2b02      	cmp	r3, #2
 8009282:	f000 8083 	beq.w	800938c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	2b02      	cmp	r3, #2
 800928a:	f200 80a1 	bhi.w	80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d056      	beq.n	8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800929a:	e099      	b.n	80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800929c:	4b88      	ldr	r3, [pc, #544]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d02d      	beq.n	8009304 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092a8:	4b85      	ldr	r3, [pc, #532]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	08db      	lsrs	r3, r3, #3
 80092ae:	f003 0303 	and.w	r3, r3, #3
 80092b2:	4a84      	ldr	r2, [pc, #528]	; (80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
 80092b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	ee07 3a90 	vmov	s15, r3
 80092ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d2:	4b7b      	ldr	r3, [pc, #492]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009302:	e087      	b.n	8009414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	ee07 3a90 	vmov	s15, r3
 800930a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009316:	4b6a      	ldr	r3, [pc, #424]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009326:	ed97 6a03 	vldr	s12, [r7, #12]
 800932a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800932e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800933a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800933e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009346:	e065      	b.n	8009414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800935a:	4b59      	ldr	r3, [pc, #356]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936a:	ed97 6a03 	vldr	s12, [r7, #12]
 800936e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800937e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800938a:	e043      	b.n	8009414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009396:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800939a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939e:	4b48      	ldr	r3, [pc, #288]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093ce:	e021      	b.n	8009414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e2:	4b37      	ldr	r3, [pc, #220]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009412:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009414:	4b2a      	ldr	r3, [pc, #168]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009418:	0a5b      	lsrs	r3, r3, #9
 800941a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800941e:	ee07 3a90 	vmov	s15, r3
 8009422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800942a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800942e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800943a:	ee17 2a90 	vmov	r2, s15
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009442:	4b1f      	ldr	r3, [pc, #124]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009446:	0c1b      	lsrs	r3, r3, #16
 8009448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800944c:	ee07 3a90 	vmov	s15, r3
 8009450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800945c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009468:	ee17 2a90 	vmov	r2, s15
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009470:	4b13      	ldr	r3, [pc, #76]	; (80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	0e1b      	lsrs	r3, r3, #24
 8009476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948a:	edd7 6a07 	vldr	s13, [r7, #28]
 800948e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009496:	ee17 2a90 	vmov	r2, s15
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800949e:	e008      	b.n	80094b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	609a      	str	r2, [r3, #8]
}
 80094b2:	bf00      	nop
 80094b4:	3724      	adds	r7, #36	; 0x24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	58024400 	.word	0x58024400
 80094c4:	03d09000 	.word	0x03d09000
 80094c8:	46000000 	.word	0x46000000
 80094cc:	4c742400 	.word	0x4c742400
 80094d0:	4a742400 	.word	0x4a742400
 80094d4:	4b742400 	.word	0x4b742400

080094d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80094d8:	b480      	push	{r7}
 80094da:	b089      	sub	sp, #36	; 0x24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094e0:	4ba1      	ldr	r3, [pc, #644]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e4:	f003 0303 	and.w	r3, r3, #3
 80094e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80094ea:	4b9f      	ldr	r3, [pc, #636]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ee:	0d1b      	lsrs	r3, r3, #20
 80094f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094f6:	4b9c      	ldr	r3, [pc, #624]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fa:	0a1b      	lsrs	r3, r3, #8
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009502:	4b99      	ldr	r3, [pc, #612]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009506:	08db      	lsrs	r3, r3, #3
 8009508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	fb02 f303 	mul.w	r3, r2, r3
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8111 	beq.w	8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b02      	cmp	r3, #2
 800952a:	f000 8083 	beq.w	8009634 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b02      	cmp	r3, #2
 8009532:	f200 80a1 	bhi.w	8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d056      	beq.n	80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009542:	e099      	b.n	8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009544:	4b88      	ldr	r3, [pc, #544]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d02d      	beq.n	80095ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009550:	4b85      	ldr	r3, [pc, #532]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	08db      	lsrs	r3, r3, #3
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	4a84      	ldr	r2, [pc, #528]	; (800976c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800955c:	fa22 f303 	lsr.w	r3, r2, r3
 8009560:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	ee07 3a90 	vmov	s15, r3
 8009568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800957a:	4b7b      	ldr	r3, [pc, #492]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958a:	ed97 6a03 	vldr	s12, [r7, #12]
 800958e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800959a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095aa:	e087      	b.n	80096bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	ee07 3a90 	vmov	s15, r3
 80095b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095be:	4b6a      	ldr	r3, [pc, #424]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80095d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ee:	e065      	b.n	80096bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009602:	4b59      	ldr	r3, [pc, #356]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009612:	ed97 6a03 	vldr	s12, [r7, #12]
 8009616:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800961a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800962a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009632:	e043      	b.n	80096bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800977c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009646:	4b48      	ldr	r3, [pc, #288]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009656:	ed97 6a03 	vldr	s12, [r7, #12]
 800965a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800965e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800966a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009676:	e021      	b.n	80096bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009682:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968a:	4b37      	ldr	r3, [pc, #220]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800968c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969a:	ed97 6a03 	vldr	s12, [r7, #12]
 800969e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80096bc:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c0:	0a5b      	lsrs	r3, r3, #9
 80096c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c6:	ee07 3a90 	vmov	s15, r3
 80096ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80096da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096e2:	ee17 2a90 	vmov	r2, s15
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80096ea:	4b1f      	ldr	r3, [pc, #124]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	0c1b      	lsrs	r3, r3, #16
 80096f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f4:	ee07 3a90 	vmov	s15, r3
 80096f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009704:	edd7 6a07 	vldr	s13, [r7, #28]
 8009708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800970c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009710:	ee17 2a90 	vmov	r2, s15
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009718:	4b13      	ldr	r3, [pc, #76]	; (8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	0e1b      	lsrs	r3, r3, #24
 800971e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800972e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009732:	edd7 6a07 	vldr	s13, [r7, #28]
 8009736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800973a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973e:	ee17 2a90 	vmov	r2, s15
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009746:	e008      	b.n	800975a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	609a      	str	r2, [r3, #8]
}
 800975a:	bf00      	nop
 800975c:	3724      	adds	r7, #36	; 0x24
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	58024400 	.word	0x58024400
 800976c:	03d09000 	.word	0x03d09000
 8009770:	46000000 	.word	0x46000000
 8009774:	4c742400 	.word	0x4c742400
 8009778:	4a742400 	.word	0x4a742400
 800977c:	4b742400 	.word	0x4b742400

08009780 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009780:	b480      	push	{r7}
 8009782:	b089      	sub	sp, #36	; 0x24
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009788:	4ba0      	ldr	r3, [pc, #640]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	f003 0303 	and.w	r3, r3, #3
 8009790:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009792:	4b9e      	ldr	r3, [pc, #632]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009796:	091b      	lsrs	r3, r3, #4
 8009798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800979c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800979e:	4b9b      	ldr	r3, [pc, #620]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80097a8:	4b98      	ldr	r3, [pc, #608]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ac:	08db      	lsrs	r3, r3, #3
 80097ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	fb02 f303 	mul.w	r3, r2, r3
 80097b8:	ee07 3a90 	vmov	s15, r3
 80097bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 8111 	beq.w	80099ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	f000 8083 	beq.w	80098da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	f200 80a1 	bhi.w	800991e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d056      	beq.n	8009896 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80097e8:	e099      	b.n	800991e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ea:	4b88      	ldr	r3, [pc, #544]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d02d      	beq.n	8009852 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097f6:	4b85      	ldr	r3, [pc, #532]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	08db      	lsrs	r3, r3, #3
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	4a83      	ldr	r2, [pc, #524]	; (8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009802:	fa22 f303 	lsr.w	r3, r2, r3
 8009806:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	ee07 3a90 	vmov	s15, r3
 800980e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	ee07 3a90 	vmov	s15, r3
 8009818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009820:	4b7a      	ldr	r3, [pc, #488]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009828:	ee07 3a90 	vmov	s15, r3
 800982c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009830:	ed97 6a03 	vldr	s12, [r7, #12]
 8009834:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009850:	e087      	b.n	8009962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	ee07 3a90 	vmov	s15, r3
 8009858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009864:	4b69      	ldr	r3, [pc, #420]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009874:	ed97 6a03 	vldr	s12, [r7, #12]
 8009878:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800987c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009890:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009894:	e065      	b.n	8009962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	ee07 3a90 	vmov	s15, r3
 800989c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a8:	4b58      	ldr	r3, [pc, #352]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b0:	ee07 3a90 	vmov	s15, r3
 80098b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80098bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d8:	e043      	b.n	8009962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	ee07 3a90 	vmov	s15, r3
 80098e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80098e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ec:	4b47      	ldr	r3, [pc, #284]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009900:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009918:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800991c:	e021      	b.n	8009962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	ee07 3a90 	vmov	s15, r3
 8009924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009928:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800992c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009930:	4b36      	ldr	r3, [pc, #216]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009938:	ee07 3a90 	vmov	s15, r3
 800993c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009940:	ed97 6a03 	vldr	s12, [r7, #12]
 8009944:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009960:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009962:	4b2a      	ldr	r3, [pc, #168]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	0a5b      	lsrs	r3, r3, #9
 8009968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996c:	ee07 3a90 	vmov	s15, r3
 8009970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800997c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009988:	ee17 2a90 	vmov	r2, s15
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009990:	4b1e      	ldr	r3, [pc, #120]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009994:	0c1b      	lsrs	r3, r3, #16
 8009996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b6:	ee17 2a90 	vmov	r2, s15
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80099be:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c2:	0e1b      	lsrs	r3, r3, #24
 80099c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c8:	ee07 3a90 	vmov	s15, r3
 80099cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80099dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e4:	ee17 2a90 	vmov	r2, s15
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099ec:	e008      	b.n	8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	609a      	str	r2, [r3, #8]
}
 8009a00:	bf00      	nop
 8009a02:	3724      	adds	r7, #36	; 0x24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	58024400 	.word	0x58024400
 8009a10:	03d09000 	.word	0x03d09000
 8009a14:	46000000 	.word	0x46000000
 8009a18:	4c742400 	.word	0x4c742400
 8009a1c:	4a742400 	.word	0x4a742400
 8009a20:	4b742400 	.word	0x4b742400

08009a24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a32:	4b53      	ldr	r3, [pc, #332]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a36:	f003 0303 	and.w	r3, r3, #3
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d101      	bne.n	8009a42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e099      	b.n	8009b76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a42:	4b4f      	ldr	r3, [pc, #316]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a4e      	ldr	r2, [pc, #312]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009a48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a4e:	f7f8 f805 	bl	8001a5c <HAL_GetTick>
 8009a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a54:	e008      	b.n	8009a68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a56:	f7f8 f801 	bl	8001a5c <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d901      	bls.n	8009a68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e086      	b.n	8009b76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a68:	4b45      	ldr	r3, [pc, #276]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1f0      	bne.n	8009a56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a74:	4b42      	ldr	r3, [pc, #264]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	031b      	lsls	r3, r3, #12
 8009a82:	493f      	ldr	r1, [pc, #252]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	628b      	str	r3, [r1, #40]	; 0x28
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	025b      	lsls	r3, r3, #9
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	041b      	lsls	r3, r3, #16
 8009aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	061b      	lsls	r3, r3, #24
 8009ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ab8:	4931      	ldr	r1, [pc, #196]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009abe:	4b30      	ldr	r3, [pc, #192]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	492d      	ldr	r1, [pc, #180]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009acc:	4313      	orrs	r3, r2
 8009ace:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ad0:	4b2b      	ldr	r3, [pc, #172]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	f023 0220 	bic.w	r2, r3, #32
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	4928      	ldr	r1, [pc, #160]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ae2:	4b27      	ldr	r3, [pc, #156]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae6:	4a26      	ldr	r2, [pc, #152]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009ae8:	f023 0310 	bic.w	r3, r3, #16
 8009aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009aee:	4b24      	ldr	r3, [pc, #144]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009af2:	4b24      	ldr	r3, [pc, #144]	; (8009b84 <RCCEx_PLL2_Config+0x160>)
 8009af4:	4013      	ands	r3, r2
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	69d2      	ldr	r2, [r2, #28]
 8009afa:	00d2      	lsls	r2, r2, #3
 8009afc:	4920      	ldr	r1, [pc, #128]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b02:	4b1f      	ldr	r3, [pc, #124]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	4a1e      	ldr	r2, [pc, #120]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b08:	f043 0310 	orr.w	r3, r3, #16
 8009b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d106      	bne.n	8009b22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b14:	4b1a      	ldr	r3, [pc, #104]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	4a19      	ldr	r2, [pc, #100]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b20:	e00f      	b.n	8009b42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d106      	bne.n	8009b36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b28:	4b15      	ldr	r3, [pc, #84]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	4a14      	ldr	r2, [pc, #80]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b34:	e005      	b.n	8009b42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b36:	4b12      	ldr	r3, [pc, #72]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	4a11      	ldr	r2, [pc, #68]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b42:	4b0f      	ldr	r3, [pc, #60]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a0e      	ldr	r2, [pc, #56]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b4e:	f7f7 ff85 	bl	8001a5c <HAL_GetTick>
 8009b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b54:	e008      	b.n	8009b68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b56:	f7f7 ff81 	bl	8001a5c <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d901      	bls.n	8009b68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e006      	b.n	8009b76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b68:	4b05      	ldr	r3, [pc, #20]	; (8009b80 <RCCEx_PLL2_Config+0x15c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d0f0      	beq.n	8009b56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	58024400 	.word	0x58024400
 8009b84:	ffff0007 	.word	0xffff0007

08009b88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b96:	4b53      	ldr	r3, [pc, #332]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9a:	f003 0303 	and.w	r3, r3, #3
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d101      	bne.n	8009ba6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e099      	b.n	8009cda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ba6:	4b4f      	ldr	r3, [pc, #316]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a4e      	ldr	r2, [pc, #312]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bb2:	f7f7 ff53 	bl	8001a5c <HAL_GetTick>
 8009bb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bb8:	e008      	b.n	8009bcc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bba:	f7f7 ff4f 	bl	8001a5c <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d901      	bls.n	8009bcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e086      	b.n	8009cda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bcc:	4b45      	ldr	r3, [pc, #276]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1f0      	bne.n	8009bba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009bd8:	4b42      	ldr	r3, [pc, #264]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	051b      	lsls	r3, r3, #20
 8009be6:	493f      	ldr	r1, [pc, #252]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	628b      	str	r3, [r1, #40]	; 0x28
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	025b      	lsls	r3, r3, #9
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	041b      	lsls	r3, r3, #16
 8009c0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	061b      	lsls	r3, r3, #24
 8009c18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c1c:	4931      	ldr	r1, [pc, #196]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c22:	4b30      	ldr	r3, [pc, #192]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	492d      	ldr	r1, [pc, #180]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c34:	4b2b      	ldr	r3, [pc, #172]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	4928      	ldr	r1, [pc, #160]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c46:	4b27      	ldr	r3, [pc, #156]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	4a26      	ldr	r2, [pc, #152]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c52:	4b24      	ldr	r3, [pc, #144]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c56:	4b24      	ldr	r3, [pc, #144]	; (8009ce8 <RCCEx_PLL3_Config+0x160>)
 8009c58:	4013      	ands	r3, r2
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	69d2      	ldr	r2, [r2, #28]
 8009c5e:	00d2      	lsls	r2, r2, #3
 8009c60:	4920      	ldr	r1, [pc, #128]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c66:	4b1f      	ldr	r3, [pc, #124]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	4a1e      	ldr	r2, [pc, #120]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d106      	bne.n	8009c86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c78:	4b1a      	ldr	r3, [pc, #104]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7c:	4a19      	ldr	r2, [pc, #100]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c84:	e00f      	b.n	8009ca6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d106      	bne.n	8009c9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c8c:	4b15      	ldr	r3, [pc, #84]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	4a14      	ldr	r2, [pc, #80]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c98:	e005      	b.n	8009ca6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c9a:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	4a11      	ldr	r2, [pc, #68]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a0e      	ldr	r2, [pc, #56]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cb2:	f7f7 fed3 	bl	8001a5c <HAL_GetTick>
 8009cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cb8:	e008      	b.n	8009ccc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009cba:	f7f7 fecf 	bl	8001a5c <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d901      	bls.n	8009ccc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e006      	b.n	8009cda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <RCCEx_PLL3_Config+0x15c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0f0      	beq.n	8009cba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	58024400 	.word	0x58024400
 8009ce8:	ffff0007 	.word	0xffff0007

08009cec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08a      	sub	sp, #40	; 0x28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e075      	b.n	8009dea <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d105      	bne.n	8009d16 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7f7 f905 	bl	8000f20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2203      	movs	r2, #3
 8009d1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f868 	bl	8009df4 <HAL_SD_InitCard>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e05d      	b.n	8009dea <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009d2e:	f107 0308 	add.w	r3, r7, #8
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fda5 	bl	800a884 <HAL_SD_GetCardStatus>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e052      	b.n	8009dea <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009d44:	7e3b      	ldrb	r3, [r7, #24]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009d4a:	7e7b      	ldrb	r3, [r7, #25]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d10a      	bne.n	8009d6e <HAL_SD_Init+0x82>
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d102      	bne.n	8009d64 <HAL_SD_Init+0x78>
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d004      	beq.n	8009d6e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8009d6c:	e00b      	b.n	8009d86 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d104      	bne.n	8009d80 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d7c:	659a      	str	r2, [r3, #88]	; 0x58
 8009d7e:	e002      	b.n	8009d86 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fe5b 	bl	800aa48 <HAL_SD_ConfigWideBusOperation>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e026      	b.n	8009dea <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009d9c:	f7f7 fe5e 	bl	8001a5c <HAL_GetTick>
 8009da0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009da2:	e011      	b.n	8009dc8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009da4:	f7f7 fe5a 	bl	8001a5c <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db2:	d109      	bne.n	8009dc8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009dba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e010      	b.n	8009dea <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 ff4d 	bl	800ac68 <HAL_SD_GetCardState>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d1e7      	bne.n	8009da4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3728      	adds	r7, #40	; 0x28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
	...

08009df4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009df4:	b590      	push	{r4, r7, lr}
 8009df6:	b08d      	sub	sp, #52	; 0x34
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009e00:	2300      	movs	r3, #0
 8009e02:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009e04:	2300      	movs	r3, #0
 8009e06:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009e0c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009e10:	f7fe fd26 	bl	8008860 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e14:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d109      	bne.n	8009e30 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e2a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e06a      	b.n	8009f06 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	4a36      	ldr	r2, [pc, #216]	; (8009f10 <HAL_SD_InitCard+0x11c>)
 8009e36:	fba2 2303 	umull	r2, r3, r2, r3
 8009e3a:	091b      	lsrs	r3, r3, #4
 8009e3c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681c      	ldr	r4, [r3, #0]
 8009e42:	466a      	mov	r2, sp
 8009e44:	f107 0318 	add.w	r3, r7, #24
 8009e48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e56:	4620      	mov	r0, r4
 8009e58:	f004 f836 	bl	800dec8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f004 f879 	bl	800df58 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009e72:	4a28      	ldr	r2, [pc, #160]	; (8009f14 <HAL_SD_InitCard+0x120>)
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7f7 fdf9 	bl	8001a74 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 ffcc 	bl	800ae20 <SD_PowerON>
 8009e88:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e02e      	b.n	8009f06 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fefd 	bl	800aca8 <SD_InitCard>
 8009eae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00b      	beq.n	8009ece <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e01b      	b.n	8009f06 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f004 f8d4 	bl	800e084 <SDMMC_CmdBlockLength>
 8009edc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00f      	beq.n	8009f04 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a0b      	ldr	r2, [pc, #44]	; (8009f18 <HAL_SD_InitCard+0x124>)
 8009eea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e000      	b.n	8009f06 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	372c      	adds	r7, #44	; 0x2c
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd90      	pop	{r4, r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	014f8b59 	.word	0x014f8b59
 8009f14:	00012110 	.word	0x00012110
 8009f18:	1fe00fff 	.word	0x1fe00fff

08009f1c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08c      	sub	sp, #48	; 0x30
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d107      	bne.n	8009f44 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e08d      	b.n	800a060 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	f040 8086 	bne.w	800a05e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	441a      	add	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d907      	bls.n	8009f76 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e074      	b.n	800a060 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2203      	movs	r2, #3
 8009f7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2200      	movs	r2, #0
 8009f84:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	025a      	lsls	r2, r3, #9
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d002      	beq.n	8009fa2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9e:	025b      	lsls	r3, r3, #9
 8009fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	025b      	lsls	r3, r3, #9
 8009fac:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009fae:	2390      	movs	r3, #144	; 0x90
 8009fb0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f107 0210 	add.w	r2, r7, #16
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f004 f82f 	bl	800e02c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68da      	ldr	r2, [r3, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fdc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2201      	movs	r2, #1
 8009fec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d90a      	bls.n	800a00a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2282      	movs	r2, #130	; 0x82
 8009ff8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a000:	4618      	mov	r0, r3
 800a002:	f004 f885 	bl	800e110 <SDMMC_CmdReadMultiBlock>
 800a006:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a008:	e009      	b.n	800a01e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2281      	movs	r2, #129	; 0x81
 800a00e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a016:	4618      	mov	r0, r3
 800a018:	f004 f857 	bl	800e0ca <SDMMC_CmdReadSingleBlock>
 800a01c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a020:	2b00      	cmp	r3, #0
 800a022:	d012      	beq.n	800a04a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a0f      	ldr	r2, [pc, #60]	; (800a068 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a02a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a032:	431a      	orrs	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e00a      	b.n	800a060 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a058:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	e000      	b.n	800a060 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a05e:	2302      	movs	r3, #2
  }
}
 800a060:	4618      	mov	r0, r3
 800a062:	3730      	adds	r7, #48	; 0x30
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	1fe00fff 	.word	0x1fe00fff

0800a06c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08c      	sub	sp, #48	; 0x30
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d107      	bne.n	800a094 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a088:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e08d      	b.n	800a1b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	f040 8086 	bne.w	800a1ae <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	441a      	add	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d907      	bls.n	800a0c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e074      	b.n	800a1b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2203      	movs	r2, #3
 800a0ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	025a      	lsls	r2, r3, #9
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d002      	beq.n	800a0f2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	025b      	lsls	r3, r3, #9
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	025b      	lsls	r3, r3, #9
 800a0fc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a0fe:	2390      	movs	r3, #144	; 0x90
 800a100:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a102:	2300      	movs	r3, #0
 800a104:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a106:	2300      	movs	r3, #0
 800a108:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a10a:	2300      	movs	r3, #0
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f107 0210 	add.w	r2, r7, #16
 800a116:	4611      	mov	r1, r2
 800a118:	4618      	mov	r0, r3
 800a11a:	f003 ff87 	bl	800e02c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a12c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2201      	movs	r2, #1
 800a13c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d90a      	bls.n	800a15a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	22a0      	movs	r2, #160	; 0xa0
 800a148:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a150:	4618      	mov	r0, r3
 800a152:	f004 f823 	bl	800e19c <SDMMC_CmdWriteMultiBlock>
 800a156:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a158:	e009      	b.n	800a16e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2290      	movs	r2, #144	; 0x90
 800a15e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a166:	4618      	mov	r0, r3
 800a168:	f003 fff5 	bl	800e156 <SDMMC_CmdWriteSingleBlock>
 800a16c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a170:	2b00      	cmp	r3, #0
 800a172:	d012      	beq.n	800a19a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a0f      	ldr	r2, [pc, #60]	; (800a1b8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a17a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	431a      	orrs	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e00a      	b.n	800a1b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a1a8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e000      	b.n	800a1b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a1ae:	2302      	movs	r3, #2
  }
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3730      	adds	r7, #48	; 0x30
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	1fe00fff 	.word	0x1fe00fff

0800a1bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d008      	beq.n	800a1ea <HAL_SD_IRQHandler+0x2e>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f003 0308 	and.w	r3, r3, #8
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 f904 	bl	800b3f0 <SD_Read_IT>
 800a1e8:	e19a      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 80ac 	beq.w	800a352 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a202:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	4b9d      	ldr	r3, [pc, #628]	; (800a484 <HAL_SD_IRQHandler+0x2c8>)
 800a210:	400b      	ands	r3, r1
 800a212:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a222:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68da      	ldr	r2, [r3, #12]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a232:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f003 0308 	and.w	r3, r3, #8
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d038      	beq.n	800a2b0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d104      	bne.n	800a252 <HAL_SD_IRQHandler+0x96>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d011      	beq.n	800a276 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4618      	mov	r0, r3
 800a258:	f003 ffc4 	bl	800e1e4 <SDMMC_CmdStopTransfer>
 800a25c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d008      	beq.n	800a276 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	431a      	orrs	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f959 	bl	800a528 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a83      	ldr	r2, [pc, #524]	; (800a488 <HAL_SD_IRQHandler+0x2cc>)
 800a27c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d104      	bne.n	800a2a0 <HAL_SD_IRQHandler+0xe4>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f005 ffe1 	bl	8010268 <HAL_SD_RxCpltCallback>
 800a2a6:	e13b      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f005 ffd3 	bl	8010254 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2ae:	e137      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 8132 	beq.w	800a520 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f003 0302 	and.w	r3, r3, #2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d104      	bne.n	800a2e8 <HAL_SD_IRQHandler+0x12c>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f003 0320 	and.w	r3, r3, #32
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d011      	beq.n	800a30c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f003 ff79 	bl	800e1e4 <SDMMC_CmdStopTransfer>
 800a2f2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d008      	beq.n	800a30c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f90e 	bl	800a528 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f003 0310 	and.w	r3, r3, #16
 800a320:	2b00      	cmp	r3, #0
 800a322:	d104      	bne.n	800a32e <HAL_SD_IRQHandler+0x172>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f003 0320 	and.w	r3, r3, #32
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f005 ff90 	bl	8010254 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d105      	bne.n	800a34a <HAL_SD_IRQHandler+0x18e>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f003 0302 	and.w	r3, r3, #2
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 80eb 	beq.w	800a520 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f005 ff8c 	bl	8010268 <HAL_SD_RxCpltCallback>
}
 800a350:	e0e6      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d008      	beq.n	800a372 <HAL_SD_IRQHandler+0x1b6>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 f886 	bl	800b47c <SD_Write_IT>
 800a370:	e0d6      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a378:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 80a2 	beq.w	800a4c6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a388:	f003 0302 	and.w	r3, r3, #2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a394:	f043 0202 	orr.w	r2, r3, #2
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a2:	f003 0308 	and.w	r3, r3, #8
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d005      	beq.n	800a3b6 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ae:	f043 0208 	orr.w	r2, r3, #8
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3bc:	f003 0320 	and.w	r3, r3, #32
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d005      	beq.n	800a3d0 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c8:	f043 0220 	orr.w	r2, r3, #32
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d6:	f003 0310 	and.w	r3, r3, #16
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d005      	beq.n	800a3ea <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e2:	f043 0210 	orr.w	r2, r3, #16
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a26      	ldr	r2, [pc, #152]	; (800a488 <HAL_SD_IRQHandler+0x2cc>)
 800a3f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a400:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a410:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a420:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68da      	ldr	r2, [r3, #12]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a430:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4618      	mov	r0, r3
 800a438:	f003 fed4 	bl	800e1e4 <SDMMC_CmdStopTransfer>
 800a43c:	4602      	mov	r2, r0
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a442:	431a      	orrs	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68da      	ldr	r2, [r3, #12]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a456:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a460:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f003 0308 	and.w	r3, r3, #8
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00f      	beq.n	800a48c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f854 	bl	800a528 <HAL_SD_ErrorCallback>
}
 800a480:	e04e      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
 800a482:	bf00      	nop
 800a484:	ffff3ec5 	.word	0xffff3ec5
 800a488:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a492:	2b00      	cmp	r3, #0
 800a494:	d044      	beq.n	800a520 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d040      	beq.n	800a520 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a4ac:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f832 	bl	800a528 <HAL_SD_ErrorCallback>
}
 800a4c4:	e02c      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d025      	beq.n	800a520 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4dc:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e4:	f003 0304 	and.w	r3, r3, #4
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10c      	bne.n	800a506 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f003 0320 	and.w	r3, r3, #32
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f001 f828 	bl	800b54c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a4fc:	e010      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f001 f810 	bl	800b524 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a504:	e00c      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f003 0320 	and.w	r3, r3, #32
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d003      	beq.n	800a518 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 f811 	bl	800b538 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a516:	e003      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fff9 	bl	800b510 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a51e:	e7ff      	b.n	800a520 <HAL_SD_IRQHandler+0x364>
 800a520:	bf00      	nop
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a54a:	0f9b      	lsrs	r3, r3, #30
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a556:	0e9b      	lsrs	r3, r3, #26
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	f003 030f 	and.w	r3, r3, #15
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a568:	0e1b      	lsrs	r3, r3, #24
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	f003 0303 	and.w	r3, r3, #3
 800a570:	b2da      	uxtb	r2, r3
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a57a:	0c1b      	lsrs	r3, r3, #16
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a586:	0a1b      	lsrs	r3, r3, #8
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a592:	b2da      	uxtb	r2, r3
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59c:	0d1b      	lsrs	r3, r3, #20
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5a8:	0c1b      	lsrs	r3, r3, #16
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5ba:	0bdb      	lsrs	r3, r3, #15
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5cc:	0b9b      	lsrs	r3, r3, #14
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5de:	0b5b      	lsrs	r3, r3, #13
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5f0:	0b1b      	lsrs	r3, r3, #12
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2200      	movs	r2, #0
 800a602:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d163      	bne.n	800a6d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a610:	009a      	lsls	r2, r3, #2
 800a612:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a616:	4013      	ands	r3, r2
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a61c:	0f92      	lsrs	r2, r2, #30
 800a61e:	431a      	orrs	r2, r3
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a628:	0edb      	lsrs	r3, r3, #27
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	f003 0307 	and.w	r3, r3, #7
 800a630:	b2da      	uxtb	r2, r3
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a63a:	0e1b      	lsrs	r3, r3, #24
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	f003 0307 	and.w	r3, r3, #7
 800a642:	b2da      	uxtb	r2, r3
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a64c:	0d5b      	lsrs	r3, r3, #21
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	f003 0307 	and.w	r3, r3, #7
 800a654:	b2da      	uxtb	r2, r3
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a65e:	0c9b      	lsrs	r3, r3, #18
 800a660:	b2db      	uxtb	r3, r3
 800a662:	f003 0307 	and.w	r3, r3, #7
 800a666:	b2da      	uxtb	r2, r3
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a670:	0bdb      	lsrs	r3, r3, #15
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 0307 	and.w	r3, r3, #7
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	7e1b      	ldrb	r3, [r3, #24]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	3302      	adds	r3, #2
 800a694:	2201      	movs	r2, #1
 800a696:	fa02 f303 	lsl.w	r3, r2, r3
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a69e:	fb02 f203 	mul.w	r2, r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	7a1b      	ldrb	r3, [r3, #8]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	f003 030f 	and.w	r3, r3, #15
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	409a      	lsls	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a6c0:	0a52      	lsrs	r2, r2, #9
 800a6c2:	fb02 f203 	mul.w	r2, r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6d0:	655a      	str	r2, [r3, #84]	; 0x54
 800a6d2:	e031      	b.n	800a738 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d11d      	bne.n	800a718 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6e0:	041b      	lsls	r3, r3, #16
 800a6e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ea:	0c1b      	lsrs	r3, r3, #16
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	029a      	lsls	r2, r3, #10
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a70c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	655a      	str	r2, [r3, #84]	; 0x54
 800a716:	e00f      	b.n	800a738 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a58      	ldr	r2, [pc, #352]	; (800a880 <HAL_SD_GetCardCSD+0x344>)
 800a71e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e09d      	b.n	800a874 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a73c:	0b9b      	lsrs	r3, r3, #14
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	b2da      	uxtb	r2, r3
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a74e:	09db      	lsrs	r3, r3, #7
 800a750:	b2db      	uxtb	r3, r3
 800a752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a756:	b2da      	uxtb	r2, r3
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a760:	b2db      	uxtb	r3, r3
 800a762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a766:	b2da      	uxtb	r2, r3
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a770:	0fdb      	lsrs	r3, r3, #31
 800a772:	b2da      	uxtb	r2, r3
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a77c:	0f5b      	lsrs	r3, r3, #29
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	f003 0303 	and.w	r3, r3, #3
 800a784:	b2da      	uxtb	r2, r3
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a78e:	0e9b      	lsrs	r3, r3, #26
 800a790:	b2db      	uxtb	r3, r3
 800a792:	f003 0307 	and.w	r3, r3, #7
 800a796:	b2da      	uxtb	r2, r3
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7a0:	0d9b      	lsrs	r3, r3, #22
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	f003 030f 	and.w	r3, r3, #15
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b2:	0d5b      	lsrs	r3, r3, #21
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7ce:	0c1b      	lsrs	r3, r3, #16
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7e2:	0bdb      	lsrs	r3, r3, #15
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7f6:	0b9b      	lsrs	r3, r3, #14
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a80a:	0b5b      	lsrs	r3, r3, #13
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a81e:	0b1b      	lsrs	r3, r3, #12
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a832:	0a9b      	lsrs	r3, r3, #10
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 0303 	and.w	r3, r3, #3
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a846:	0a1b      	lsrs	r3, r3, #8
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0303 	and.w	r3, r3, #3
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a85a:	085b      	lsrs	r3, r3, #1
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	1fe00fff 	.word	0x1fe00fff

0800a884 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b094      	sub	sp, #80	; 0x50
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a894:	f107 0308 	add.w	r3, r7, #8
 800a898:	4619      	mov	r1, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fb4a 	bl	800af34 <SD_SendSDStatus>
 800a8a0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d011      	beq.n	800a8cc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a4f      	ldr	r2, [pc, #316]	; (800a9ec <HAL_SD_GetCardStatus+0x168>)
 800a8ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8b6:	431a      	orrs	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a8ca:	e070      	b.n	800a9ae <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	099b      	lsrs	r3, r3, #6
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	095b      	lsrs	r3, r3, #5
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	0a1b      	lsrs	r3, r3, #8
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	0e1b      	lsrs	r3, r3, #24
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	4313      	orrs	r3, r2
 800a900:	b29a      	uxth	r2, r3
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	061a      	lsls	r2, r3, #24
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a912:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	0a1b      	lsrs	r3, r3, #8
 800a918:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a91c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	0e1b      	lsrs	r3, r3, #24
 800a922:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	0a1b      	lsrs	r3, r3, #8
 800a934:	b2da      	uxtb	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	0d1b      	lsrs	r3, r3, #20
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 030f 	and.w	r3, r3, #15
 800a944:	b2da      	uxtb	r2, r3
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	0c1b      	lsrs	r3, r3, #16
 800a94e:	b29b      	uxth	r3, r3
 800a950:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a954:	b29a      	uxth	r2, r3
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	4313      	orrs	r3, r2
 800a960:	b29a      	uxth	r2, r3
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	0a9b      	lsrs	r3, r3, #10
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a970:	b2da      	uxtb	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	0a1b      	lsrs	r3, r3, #8
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 0303 	and.w	r3, r3, #3
 800a980:	b2da      	uxtb	r2, r3
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	091b      	lsrs	r3, r3, #4
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f003 030f 	and.w	r3, r3, #15
 800a990:	b2da      	uxtb	r2, r3
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	f003 030f 	and.w	r3, r3, #15
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	0e1b      	lsrs	r3, r3, #24
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f003 fb64 	bl	800e084 <SDMMC_CmdBlockLength>
 800a9bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00d      	beq.n	800a9e0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a08      	ldr	r2, [pc, #32]	; (800a9ec <HAL_SD_GetCardStatus+0x168>)
 800a9ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9d0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a9e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3750      	adds	r7, #80	; 0x50
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	1fe00fff 	.word	0x1fe00fff

0800a9f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aa48:	b590      	push	{r4, r7, lr}
 800aa4a:	b08d      	sub	sp, #52	; 0x34
 800aa4c:	af02      	add	r7, sp, #8
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2203      	movs	r2, #3
 800aa5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d02e      	beq.n	800aac6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa6e:	d106      	bne.n	800aa7e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	635a      	str	r2, [r3, #52]	; 0x34
 800aa7c:	e029      	b.n	800aad2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa84:	d10a      	bne.n	800aa9c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fb4c 	bl	800b124 <SD_WideBus_Enable>
 800aa8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	431a      	orrs	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	635a      	str	r2, [r3, #52]	; 0x34
 800aa9a:	e01a      	b.n	800aad2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10a      	bne.n	800aab8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fb89 	bl	800b1ba <SD_WideBus_Disable>
 800aaa8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	431a      	orrs	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	635a      	str	r2, [r3, #52]	; 0x34
 800aab6:	e00c      	b.n	800aad2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aabc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	635a      	str	r2, [r3, #52]	; 0x34
 800aac4:	e005      	b.n	800aad2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d007      	beq.n	800aaea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a5e      	ldr	r2, [pc, #376]	; (800ac58 <HAL_SD_ConfigWideBusOperation+0x210>)
 800aae0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aae8:	e094      	b.n	800ac14 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800aaea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800aaee:	f7fd feb7 	bl	8008860 <HAL_RCCEx_GetPeriphCLKFreq>
 800aaf2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 8083 	beq.w	800ac02 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	695a      	ldr	r2, [r3, #20]
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	4950      	ldr	r1, [pc, #320]	; (800ac5c <HAL_SD_ConfigWideBusOperation+0x214>)
 800ab1a:	fba1 1303 	umull	r1, r3, r1, r3
 800ab1e:	0e1b      	lsrs	r3, r3, #24
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d303      	bcc.n	800ab2c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	61bb      	str	r3, [r7, #24]
 800ab2a:	e05a      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab34:	d103      	bne.n	800ab3e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	61bb      	str	r3, [r7, #24]
 800ab3c:	e051      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab46:	d126      	bne.n	800ab96 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10e      	bne.n	800ab6e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	4a43      	ldr	r2, [pc, #268]	; (800ac60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d906      	bls.n	800ab66 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	4a40      	ldr	r2, [pc, #256]	; (800ac5c <HAL_SD_ConfigWideBusOperation+0x214>)
 800ab5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab60:	0e5b      	lsrs	r3, r3, #25
 800ab62:	61bb      	str	r3, [r7, #24]
 800ab64:	e03d      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	61bb      	str	r3, [r7, #24]
 800ab6c:	e039      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	005b      	lsls	r3, r3, #1
 800ab74:	69fa      	ldr	r2, [r7, #28]
 800ab76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7a:	4a39      	ldr	r2, [pc, #228]	; (800ac60 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d906      	bls.n	800ab8e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4a36      	ldr	r2, [pc, #216]	; (800ac5c <HAL_SD_ConfigWideBusOperation+0x214>)
 800ab84:	fba2 2303 	umull	r2, r3, r2, r3
 800ab88:	0e5b      	lsrs	r3, r3, #25
 800ab8a:	61bb      	str	r3, [r7, #24]
 800ab8c:	e029      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	61bb      	str	r3, [r7, #24]
 800ab94:	e025      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10e      	bne.n	800abbc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	4a30      	ldr	r2, [pc, #192]	; (800ac64 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d906      	bls.n	800abb4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	4a2c      	ldr	r2, [pc, #176]	; (800ac5c <HAL_SD_ConfigWideBusOperation+0x214>)
 800abaa:	fba2 2303 	umull	r2, r3, r2, r3
 800abae:	0e1b      	lsrs	r3, r3, #24
 800abb0:	61bb      	str	r3, [r7, #24]
 800abb2:	e016      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	61bb      	str	r3, [r7, #24]
 800abba:	e012      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc8:	4a26      	ldr	r2, [pc, #152]	; (800ac64 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d906      	bls.n	800abdc <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	4a22      	ldr	r2, [pc, #136]	; (800ac5c <HAL_SD_ConfigWideBusOperation+0x214>)
 800abd2:	fba2 2303 	umull	r2, r3, r2, r3
 800abd6:	0e1b      	lsrs	r3, r3, #24
 800abd8:	61bb      	str	r3, [r7, #24]
 800abda:	e002      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681c      	ldr	r4, [r3, #0]
 800abe6:	466a      	mov	r2, sp
 800abe8:	f107 0314 	add.w	r3, r7, #20
 800abec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abf0:	e882 0003 	stmia.w	r2, {r0, r1}
 800abf4:	f107 0308 	add.w	r3, r7, #8
 800abf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abfa:	4620      	mov	r0, r4
 800abfc:	f003 f964 	bl	800dec8 <SDMMC_Init>
 800ac00:	e008      	b.n	800ac14 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f003 fa31 	bl	800e084 <SDMMC_CmdBlockLength>
 800ac22:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00c      	beq.n	800ac44 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a0a      	ldr	r2, [pc, #40]	; (800ac58 <HAL_SD_ConfigWideBusOperation+0x210>)
 800ac30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ac4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	372c      	adds	r7, #44	; 0x2c
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd90      	pop	{r4, r7, pc}
 800ac58:	1fe00fff 	.word	0x1fe00fff
 800ac5c:	55e63b89 	.word	0x55e63b89
 800ac60:	02faf080 	.word	0x02faf080
 800ac64:	017d7840 	.word	0x017d7840

0800ac68 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ac74:	f107 030c 	add.w	r3, r7, #12
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fa2a 	bl	800b0d4 <SD_SendStatus>
 800ac80:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d005      	beq.n	800ac94 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	0a5b      	lsrs	r3, r3, #9
 800ac98:	f003 030f 	and.w	r3, r3, #15
 800ac9c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ac9e:	693b      	ldr	r3, [r7, #16]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b090      	sub	sp, #64	; 0x40
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800acb0:	2301      	movs	r3, #1
 800acb2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4618      	mov	r0, r3
 800acba:	f003 f95e 	bl	800df7a <SDMMC_GetPowerState>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d102      	bne.n	800acca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800acc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800acc8:	e0a5      	b.n	800ae16 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d02e      	beq.n	800ad30 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f003 fba9 	bl	800e42e <SDMMC_CmdSendCID>
 800acdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800acde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <SD_InitCard+0x40>
    {
      return errorstate;
 800ace4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace6:	e096      	b.n	800ae16 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2100      	movs	r1, #0
 800acee:	4618      	mov	r0, r3
 800acf0:	f003 f989 	bl	800e006 <SDMMC_GetResponse>
 800acf4:	4602      	mov	r2, r0
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2104      	movs	r1, #4
 800ad00:	4618      	mov	r0, r3
 800ad02:	f003 f980 	bl	800e006 <SDMMC_GetResponse>
 800ad06:	4602      	mov	r2, r0
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2108      	movs	r1, #8
 800ad12:	4618      	mov	r0, r3
 800ad14:	f003 f977 	bl	800e006 <SDMMC_GetResponse>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	210c      	movs	r1, #12
 800ad24:	4618      	mov	r0, r3
 800ad26:	f003 f96e 	bl	800e006 <SDMMC_GetResponse>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d00d      	beq.n	800ad54 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f107 020e 	add.w	r2, r7, #14
 800ad40:	4611      	mov	r1, r2
 800ad42:	4618      	mov	r0, r3
 800ad44:	f003 fbb2 	bl	800e4ac <SDMMC_CmdSetRelAdd>
 800ad48:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d001      	beq.n	800ad54 <SD_InitCard+0xac>
    {
      return errorstate;
 800ad50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad52:	e060      	b.n	800ae16 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad58:	2b03      	cmp	r3, #3
 800ad5a:	d036      	beq.n	800adca <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ad5c:	89fb      	ldrh	r3, [r7, #14]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6c:	041b      	lsls	r3, r3, #16
 800ad6e:	4619      	mov	r1, r3
 800ad70:	4610      	mov	r0, r2
 800ad72:	f003 fb7b 	bl	800e46c <SDMMC_CmdSendCSD>
 800ad76:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <SD_InitCard+0xda>
    {
      return errorstate;
 800ad7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad80:	e049      	b.n	800ae16 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2100      	movs	r1, #0
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f003 f93c 	bl	800e006 <SDMMC_GetResponse>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2104      	movs	r1, #4
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f003 f933 	bl	800e006 <SDMMC_GetResponse>
 800ada0:	4602      	mov	r2, r0
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2108      	movs	r1, #8
 800adac:	4618      	mov	r0, r3
 800adae:	f003 f92a 	bl	800e006 <SDMMC_GetResponse>
 800adb2:	4602      	mov	r2, r0
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	210c      	movs	r1, #12
 800adbe:	4618      	mov	r0, r3
 800adc0:	f003 f921 	bl	800e006 <SDMMC_GetResponse>
 800adc4:	4602      	mov	r2, r0
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2104      	movs	r1, #4
 800add0:	4618      	mov	r0, r3
 800add2:	f003 f918 	bl	800e006 <SDMMC_GetResponse>
 800add6:	4603      	mov	r3, r0
 800add8:	0d1a      	lsrs	r2, r3, #20
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800adde:	f107 0310 	add.w	r3, r7, #16
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff fba9 	bl	800a53c <HAL_SD_GetCardCSD>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800adf4:	e00f      	b.n	800ae16 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adfe:	041b      	lsls	r3, r3, #16
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f003 fa2a 	bl	800e25c <SDMMC_CmdSelDesel>
 800ae08:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <SD_InitCard+0x16c>
  {
    return errorstate;
 800ae10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae12:	e000      	b.n	800ae16 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3740      	adds	r7, #64	; 0x40
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ae30:	2300      	movs	r3, #0
 800ae32:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f003 fa32 	bl	800e2a2 <SDMMC_CmdGoIdleState>
 800ae3e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <SD_PowerON+0x2a>
  {
    return errorstate;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	e06e      	b.n	800af28 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f003 fa45 	bl	800e2de <SDMMC_CmdOperCond>
 800ae54:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00d      	beq.n	800ae78 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f003 fa1b 	bl	800e2a2 <SDMMC_CmdGoIdleState>
 800ae6c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d004      	beq.n	800ae7e <SD_PowerON+0x5e>
    {
      return errorstate;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	e057      	b.n	800af28 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d137      	bne.n	800aef6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f003 fa46 	bl	800e31e <SDMMC_CmdAppCommand>
 800ae92:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d02d      	beq.n	800aef6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae9e:	e043      	b.n	800af28 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2100      	movs	r1, #0
 800aea6:	4618      	mov	r0, r3
 800aea8:	f003 fa39 	bl	800e31e <SDMMC_CmdAppCommand>
 800aeac:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <SD_PowerON+0x98>
    {
      return errorstate;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	e037      	b.n	800af28 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	491c      	ldr	r1, [pc, #112]	; (800af30 <SD_PowerON+0x110>)
 800aebe:	4618      	mov	r0, r3
 800aec0:	f003 fa50 	bl	800e364 <SDMMC_CmdAppOperCommand>
 800aec4:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aed0:	e02a      	b.n	800af28 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2100      	movs	r1, #0
 800aed8:	4618      	mov	r0, r3
 800aeda:	f003 f894 	bl	800e006 <SDMMC_GetResponse>
 800aede:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	0fdb      	lsrs	r3, r3, #31
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d101      	bne.n	800aeec <SD_PowerON+0xcc>
 800aee8:	2301      	movs	r3, #1
 800aeea:	e000      	b.n	800aeee <SD_PowerON+0xce>
 800aeec:	2300      	movs	r3, #0
 800aeee:	613b      	str	r3, [r7, #16]

    count++;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d802      	bhi.n	800af06 <SD_PowerON+0xe6>
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d0cc      	beq.n	800aea0 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d902      	bls.n	800af16 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af14:	e008      	b.n	800af28 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3718      	adds	r7, #24
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	c1100000 	.word	0xc1100000

0800af34 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08c      	sub	sp, #48	; 0x30
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af3e:	f7f6 fd8d 	bl	8001a5c <HAL_GetTick>
 800af42:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2100      	movs	r1, #0
 800af4e:	4618      	mov	r0, r3
 800af50:	f003 f859 	bl	800e006 <SDMMC_GetResponse>
 800af54:	4603      	mov	r3, r0
 800af56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af5e:	d102      	bne.n	800af66 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af64:	e0b0      	b.n	800b0c8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2140      	movs	r1, #64	; 0x40
 800af6c:	4618      	mov	r0, r3
 800af6e:	f003 f889 	bl	800e084 <SDMMC_CmdBlockLength>
 800af72:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	e0a0      	b.n	800b0c8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8e:	041b      	lsls	r3, r3, #16
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f003 f9c3 	bl	800e31e <SDMMC_CmdAppCommand>
 800af98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	e08d      	b.n	800b0c8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afac:	f04f 33ff 	mov.w	r3, #4294967295
 800afb0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800afb2:	2340      	movs	r3, #64	; 0x40
 800afb4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800afb6:	2360      	movs	r3, #96	; 0x60
 800afb8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800afba:	2302      	movs	r3, #2
 800afbc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800afc2:	2301      	movs	r3, #1
 800afc4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f107 0208 	add.w	r2, r7, #8
 800afce:	4611      	mov	r1, r2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f003 f82b 	bl	800e02c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4618      	mov	r0, r3
 800afdc:	f003 faab 	bl	800e536 <SDMMC_CmdStatusRegister>
 800afe0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d02b      	beq.n	800b040 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	e069      	b.n	800b0c8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800affa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d013      	beq.n	800b02a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b002:	2300      	movs	r3, #0
 800b004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b006:	e00d      	b.n	800b024 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f002 ff85 	bl	800df1c <SDMMC_ReadFIFO>
 800b012:	4602      	mov	r2, r0
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	601a      	str	r2, [r3, #0]
        pData++;
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	3304      	adds	r3, #4
 800b01c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b020:	3301      	adds	r3, #1
 800b022:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b026:	2b07      	cmp	r3, #7
 800b028:	d9ee      	bls.n	800b008 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b02a:	f7f6 fd17 	bl	8001a5c <HAL_GetTick>
 800b02e:	4602      	mov	r2, r0
 800b030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b038:	d102      	bne.n	800b040 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b03a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b03e:	e043      	b.n	800b0c8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b046:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d0d2      	beq.n	800aff4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b054:	f003 0308 	and.w	r3, r3, #8
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b05c:	2308      	movs	r3, #8
 800b05e:	e033      	b.n	800b0c8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b066:	f003 0302 	and.w	r3, r3, #2
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b06e:	2302      	movs	r3, #2
 800b070:	e02a      	b.n	800b0c8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b078:	f003 0320 	and.w	r3, r3, #32
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d017      	beq.n	800b0b0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b080:	2320      	movs	r3, #32
 800b082:	e021      	b.n	800b0c8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4618      	mov	r0, r3
 800b08a:	f002 ff47 	bl	800df1c <SDMMC_ReadFIFO>
 800b08e:	4602      	mov	r2, r0
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	601a      	str	r2, [r3, #0]
    pData++;
 800b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b096:	3304      	adds	r3, #4
 800b098:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b09a:	f7f6 fcdf 	bl	8001a5c <HAL_GetTick>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a8:	d102      	bne.n	800b0b0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b0aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0ae:	e00b      	b.n	800b0c8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1e2      	bne.n	800b084 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a03      	ldr	r2, [pc, #12]	; (800b0d0 <SD_SendSDStatus+0x19c>)
 800b0c4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3730      	adds	r7, #48	; 0x30
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	18000f3a 	.word	0x18000f3a

0800b0d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d102      	bne.n	800b0ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b0e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0e8:	e018      	b.n	800b11c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f2:	041b      	lsls	r3, r3, #16
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	f003 f9fa 	bl	800e4f0 <SDMMC_CmdSendStatus>
 800b0fc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	e009      	b.n	800b11c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2100      	movs	r1, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f002 ff79 	bl	800e006 <SDMMC_GetResponse>
 800b114:	4602      	mov	r2, r0
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b12c:	2300      	movs	r3, #0
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	2300      	movs	r3, #0
 800b132:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2100      	movs	r1, #0
 800b13a:	4618      	mov	r0, r3
 800b13c:	f002 ff63 	bl	800e006 <SDMMC_GetResponse>
 800b140:	4603      	mov	r3, r0
 800b142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b14a:	d102      	bne.n	800b152 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b14c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b150:	e02f      	b.n	800b1b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b152:	f107 030c 	add.w	r3, r7, #12
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f879 	bl	800b250 <SD_FindSCR>
 800b15e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	e023      	b.n	800b1b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d01c      	beq.n	800b1ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17c:	041b      	lsls	r3, r3, #16
 800b17e:	4619      	mov	r1, r3
 800b180:	4610      	mov	r0, r2
 800b182:	f003 f8cc 	bl	800e31e <SDMMC_CmdAppCommand>
 800b186:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	e00f      	b.n	800b1b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2102      	movs	r1, #2
 800b198:	4618      	mov	r0, r3
 800b19a:	f003 f903 	bl	800e3a4 <SDMMC_CmdBusWidth>
 800b19e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	e003      	b.n	800b1b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e001      	b.n	800b1b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b1ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b086      	sub	sp, #24
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60fb      	str	r3, [r7, #12]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f002 ff18 	bl	800e006 <SDMMC_GetResponse>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1e0:	d102      	bne.n	800b1e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1e6:	e02f      	b.n	800b248 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b1e8:	f107 030c 	add.w	r3, r7, #12
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f82e 	bl	800b250 <SD_FindSCR>
 800b1f4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	e023      	b.n	800b248 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b206:	2b00      	cmp	r3, #0
 800b208:	d01c      	beq.n	800b244 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b212:	041b      	lsls	r3, r3, #16
 800b214:	4619      	mov	r1, r3
 800b216:	4610      	mov	r0, r2
 800b218:	f003 f881 	bl	800e31e <SDMMC_CmdAppCommand>
 800b21c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	e00f      	b.n	800b248 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2100      	movs	r1, #0
 800b22e:	4618      	mov	r0, r3
 800b230:	f003 f8b8 	bl	800e3a4 <SDMMC_CmdBusWidth>
 800b234:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	e003      	b.n	800b248 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b240:	2300      	movs	r3, #0
 800b242:	e001      	b.n	800b248 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b244:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3718      	adds	r7, #24
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08e      	sub	sp, #56	; 0x38
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b25a:	f7f6 fbff 	bl	8001a5c <HAL_GetTick>
 800b25e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b264:	2300      	movs	r3, #0
 800b266:	60bb      	str	r3, [r7, #8]
 800b268:	2300      	movs	r3, #0
 800b26a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2108      	movs	r1, #8
 800b276:	4618      	mov	r0, r3
 800b278:	f002 ff04 	bl	800e084 <SDMMC_CmdBlockLength>
 800b27c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	e0ad      	b.n	800b3e4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b290:	041b      	lsls	r3, r3, #16
 800b292:	4619      	mov	r1, r3
 800b294:	4610      	mov	r0, r2
 800b296:	f003 f842 	bl	800e31e <SDMMC_CmdAppCommand>
 800b29a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	e09e      	b.n	800b3e4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b2ac:	2308      	movs	r3, #8
 800b2ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b2b0:	2330      	movs	r3, #48	; 0x30
 800b2b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f107 0210 	add.w	r2, r7, #16
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f002 feae 	bl	800e02c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f003 f888 	bl	800e3ea <SDMMC_CmdSendSCR>
 800b2da:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d027      	beq.n	800b332 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e4:	e07e      	b.n	800b3e4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d113      	bne.n	800b31c <SD_FindSCR+0xcc>
 800b2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d110      	bne.n	800b31c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f002 fe0c 	bl	800df1c <SDMMC_ReadFIFO>
 800b304:	4603      	mov	r3, r0
 800b306:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f002 fe05 	bl	800df1c <SDMMC_ReadFIFO>
 800b312:	4603      	mov	r3, r0
 800b314:	60fb      	str	r3, [r7, #12]
      index++;
 800b316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b318:	3301      	adds	r3, #1
 800b31a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b31c:	f7f6 fb9e 	bl	8001a5c <HAL_GetTick>
 800b320:	4602      	mov	r2, r0
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32a:	d102      	bne.n	800b332 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b32c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b330:	e058      	b.n	800b3e4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b338:	f240 532a 	movw	r3, #1322	; 0x52a
 800b33c:	4013      	ands	r3, r2
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0d1      	beq.n	800b2e6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b348:	f003 0308 	and.w	r3, r3, #8
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2208      	movs	r2, #8
 800b356:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b358:	2308      	movs	r3, #8
 800b35a:	e043      	b.n	800b3e4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b362:	f003 0302 	and.w	r3, r3, #2
 800b366:	2b00      	cmp	r3, #0
 800b368:	d005      	beq.n	800b376 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2202      	movs	r2, #2
 800b370:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b372:	2302      	movs	r3, #2
 800b374:	e036      	b.n	800b3e4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37c:	f003 0320 	and.w	r3, r3, #32
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2220      	movs	r2, #32
 800b38a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b38c:	2320      	movs	r3, #32
 800b38e:	e029      	b.n	800b3e4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a15      	ldr	r2, [pc, #84]	; (800b3ec <SD_FindSCR+0x19c>)
 800b396:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	061a      	lsls	r2, r3, #24
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	021b      	lsls	r3, r3, #8
 800b3a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3a4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	0a1b      	lsrs	r3, r3, #8
 800b3aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b3ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	0e1b      	lsrs	r3, r3, #24
 800b3b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	601a      	str	r2, [r3, #0]
    scr++;
 800b3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3bc:	3304      	adds	r3, #4
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	061a      	lsls	r2, r3, #24
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	021b      	lsls	r3, r3, #8
 800b3c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3cc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	0a1b      	lsrs	r3, r3, #8
 800b3d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b3d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	0e1b      	lsrs	r3, r3, #24
 800b3dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3738      	adds	r7, #56	; 0x38
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	18000f3a 	.word	0x18000f3a

0800b3f0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b402:	2b1f      	cmp	r3, #31
 800b404:	d936      	bls.n	800b474 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b406:	2300      	movs	r3, #0
 800b408:	617b      	str	r3, [r7, #20]
 800b40a:	e027      	b.n	800b45c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4618      	mov	r0, r3
 800b412:	f002 fd83 	bl	800df1c <SDMMC_ReadFIFO>
 800b416:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	3301      	adds	r3, #1
 800b424:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	0a1b      	lsrs	r3, r3, #8
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	3301      	adds	r3, #1
 800b434:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	0c1b      	lsrs	r3, r3, #16
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	3301      	adds	r3, #1
 800b444:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	0e1b      	lsrs	r3, r3, #24
 800b44a:	b2da      	uxtb	r2, r3
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3301      	adds	r3, #1
 800b454:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	3301      	adds	r3, #1
 800b45a:	617b      	str	r3, [r7, #20]
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2b07      	cmp	r3, #7
 800b460:	d9d4      	bls.n	800b40c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46c:	f1a3 0220 	sub.w	r2, r3, #32
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b474:	bf00      	nop
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	69db      	ldr	r3, [r3, #28]
 800b488:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	2b1f      	cmp	r3, #31
 800b490:	d93a      	bls.n	800b508 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b492:	2300      	movs	r3, #0
 800b494:	617b      	str	r3, [r7, #20]
 800b496:	e02b      	b.n	800b4f0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	021a      	lsls	r2, r3, #8
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	041a      	lsls	r2, r3, #16
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	061a      	lsls	r2, r3, #24
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f107 020c 	add.w	r2, r7, #12
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f002 fd26 	bl	800df36 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	2b07      	cmp	r3, #7
 800b4f4:	d9d0      	bls.n	800b498 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	693a      	ldr	r2, [r7, #16]
 800b4fa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	f1a3 0220 	sub.w	r2, r3, #32
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	621a      	str	r2, [r3, #32]
  }
}
 800b508:	bf00      	nop
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d101      	bne.n	800b572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e049      	b.n	800b606 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7f5 ff5a 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2202      	movs	r2, #2
 800b590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3304      	adds	r3, #4
 800b59c:	4619      	mov	r1, r3
 800b59e:	4610      	mov	r0, r2
 800b5a0:	f000 fbec 	bl	800bd7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b082      	sub	sp, #8
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e049      	b.n	800b6b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b626:	b2db      	uxtb	r3, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d106      	bne.n	800b63a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f841 	bl	800b6bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2202      	movs	r2, #2
 800b63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	3304      	adds	r3, #4
 800b64a:	4619      	mov	r1, r3
 800b64c:	4610      	mov	r0, r2
 800b64e:	f000 fb95 	bl	800bd7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	f003 0302 	and.w	r3, r3, #2
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d122      	bne.n	800b72c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	f003 0302 	and.w	r3, r3, #2
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d11b      	bne.n	800b72c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f06f 0202 	mvn.w	r2, #2
 800b6fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2201      	movs	r2, #1
 800b702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fb14 	bl	800bd40 <HAL_TIM_IC_CaptureCallback>
 800b718:	e005      	b.n	800b726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 fb06 	bl	800bd2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fb17 	bl	800bd54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	f003 0304 	and.w	r3, r3, #4
 800b736:	2b04      	cmp	r3, #4
 800b738:	d122      	bne.n	800b780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	f003 0304 	and.w	r3, r3, #4
 800b744:	2b04      	cmp	r3, #4
 800b746:	d11b      	bne.n	800b780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f06f 0204 	mvn.w	r2, #4
 800b750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2202      	movs	r2, #2
 800b756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 faea 	bl	800bd40 <HAL_TIM_IC_CaptureCallback>
 800b76c:	e005      	b.n	800b77a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fadc 	bl	800bd2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 faed 	bl	800bd54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	f003 0308 	and.w	r3, r3, #8
 800b78a:	2b08      	cmp	r3, #8
 800b78c:	d122      	bne.n	800b7d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	f003 0308 	and.w	r3, r3, #8
 800b798:	2b08      	cmp	r3, #8
 800b79a:	d11b      	bne.n	800b7d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f06f 0208 	mvn.w	r2, #8
 800b7a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2204      	movs	r2, #4
 800b7aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	69db      	ldr	r3, [r3, #28]
 800b7b2:	f003 0303 	and.w	r3, r3, #3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d003      	beq.n	800b7c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fac0 	bl	800bd40 <HAL_TIM_IC_CaptureCallback>
 800b7c0:	e005      	b.n	800b7ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 fab2 	bl	800bd2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fac3 	bl	800bd54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	f003 0310 	and.w	r3, r3, #16
 800b7de:	2b10      	cmp	r3, #16
 800b7e0:	d122      	bne.n	800b828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f003 0310 	and.w	r3, r3, #16
 800b7ec:	2b10      	cmp	r3, #16
 800b7ee:	d11b      	bne.n	800b828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f06f 0210 	mvn.w	r2, #16
 800b7f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2208      	movs	r2, #8
 800b7fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d003      	beq.n	800b816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fa96 	bl	800bd40 <HAL_TIM_IC_CaptureCallback>
 800b814:	e005      	b.n	800b822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa88 	bl	800bd2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fa99 	bl	800bd54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	2b01      	cmp	r3, #1
 800b834:	d10e      	bne.n	800b854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	2b01      	cmp	r3, #1
 800b842:	d107      	bne.n	800b854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f06f 0201 	mvn.w	r2, #1
 800b84c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fa62 	bl	800bd18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b85e:	2b80      	cmp	r3, #128	; 0x80
 800b860:	d10e      	bne.n	800b880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b86c:	2b80      	cmp	r3, #128	; 0x80
 800b86e:	d107      	bne.n	800b880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 ff94 	bl	800c7a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b88a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b88e:	d10e      	bne.n	800b8ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b89a:	2b80      	cmp	r3, #128	; 0x80
 800b89c:	d107      	bne.n	800b8ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b8a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 ff87 	bl	800c7bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b8:	2b40      	cmp	r3, #64	; 0x40
 800b8ba:	d10e      	bne.n	800b8da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c6:	2b40      	cmp	r3, #64	; 0x40
 800b8c8:	d107      	bne.n	800b8da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b8d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fa47 	bl	800bd68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	f003 0320 	and.w	r3, r3, #32
 800b8e4:	2b20      	cmp	r3, #32
 800b8e6:	d10e      	bne.n	800b906 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f003 0320 	and.w	r3, r3, #32
 800b8f2:	2b20      	cmp	r3, #32
 800b8f4:	d107      	bne.n	800b906 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f06f 0220 	mvn.w	r2, #32
 800b8fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 ff47 	bl	800c794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b906:	bf00      	nop
 800b908:	3708      	adds	r7, #8
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
	...

0800b910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b922:	2b01      	cmp	r3, #1
 800b924:	d101      	bne.n	800b92a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b926:	2302      	movs	r3, #2
 800b928:	e0fd      	b.n	800bb26 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b14      	cmp	r3, #20
 800b936:	f200 80f0 	bhi.w	800bb1a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b93a:	a201      	add	r2, pc, #4	; (adr r2, 800b940 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b940:	0800b995 	.word	0x0800b995
 800b944:	0800bb1b 	.word	0x0800bb1b
 800b948:	0800bb1b 	.word	0x0800bb1b
 800b94c:	0800bb1b 	.word	0x0800bb1b
 800b950:	0800b9d5 	.word	0x0800b9d5
 800b954:	0800bb1b 	.word	0x0800bb1b
 800b958:	0800bb1b 	.word	0x0800bb1b
 800b95c:	0800bb1b 	.word	0x0800bb1b
 800b960:	0800ba17 	.word	0x0800ba17
 800b964:	0800bb1b 	.word	0x0800bb1b
 800b968:	0800bb1b 	.word	0x0800bb1b
 800b96c:	0800bb1b 	.word	0x0800bb1b
 800b970:	0800ba57 	.word	0x0800ba57
 800b974:	0800bb1b 	.word	0x0800bb1b
 800b978:	0800bb1b 	.word	0x0800bb1b
 800b97c:	0800bb1b 	.word	0x0800bb1b
 800b980:	0800ba99 	.word	0x0800ba99
 800b984:	0800bb1b 	.word	0x0800bb1b
 800b988:	0800bb1b 	.word	0x0800bb1b
 800b98c:	0800bb1b 	.word	0x0800bb1b
 800b990:	0800bad9 	.word	0x0800bad9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 fa88 	bl	800beb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	699a      	ldr	r2, [r3, #24]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f042 0208 	orr.w	r2, r2, #8
 800b9ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	699a      	ldr	r2, [r3, #24]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f022 0204 	bic.w	r2, r2, #4
 800b9be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6999      	ldr	r1, [r3, #24]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	691a      	ldr	r2, [r3, #16]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	619a      	str	r2, [r3, #24]
      break;
 800b9d2:	e0a3      	b.n	800bb1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68b9      	ldr	r1, [r7, #8]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 faf8 	bl	800bfd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	699a      	ldr	r2, [r3, #24]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	699a      	ldr	r2, [r3, #24]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6999      	ldr	r1, [r3, #24]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	021a      	lsls	r2, r3, #8
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	430a      	orrs	r2, r1
 800ba12:	619a      	str	r2, [r3, #24]
      break;
 800ba14:	e082      	b.n	800bb1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68b9      	ldr	r1, [r7, #8]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 fb61 	bl	800c0e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	69da      	ldr	r2, [r3, #28]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f042 0208 	orr.w	r2, r2, #8
 800ba30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	69da      	ldr	r2, [r3, #28]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f022 0204 	bic.w	r2, r2, #4
 800ba40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	69d9      	ldr	r1, [r3, #28]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	691a      	ldr	r2, [r3, #16]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	61da      	str	r2, [r3, #28]
      break;
 800ba54:	e062      	b.n	800bb1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68b9      	ldr	r1, [r7, #8]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 fbc7 	bl	800c1f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	69da      	ldr	r2, [r3, #28]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	69da      	ldr	r2, [r3, #28]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	69d9      	ldr	r1, [r3, #28]
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	021a      	lsls	r2, r3, #8
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	61da      	str	r2, [r3, #28]
      break;
 800ba96:	e041      	b.n	800bb1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68b9      	ldr	r1, [r7, #8]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 fc0e 	bl	800c2c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f042 0208 	orr.w	r2, r2, #8
 800bab2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f022 0204 	bic.w	r2, r2, #4
 800bac2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	691a      	ldr	r2, [r3, #16]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bad6:	e021      	b.n	800bb1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68b9      	ldr	r1, [r7, #8]
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 fc50 	bl	800c384 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	021a      	lsls	r2, r3, #8
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	430a      	orrs	r2, r1
 800bb16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bb18:	e000      	b.n	800bb1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bb1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop

0800bb30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d101      	bne.n	800bb48 <HAL_TIM_ConfigClockSource+0x18>
 800bb44:	2302      	movs	r3, #2
 800bb46:	e0db      	b.n	800bd00 <HAL_TIM_ConfigClockSource+0x1d0>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2202      	movs	r2, #2
 800bb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4b69      	ldr	r3, [pc, #420]	; (800bd08 <HAL_TIM_ConfigClockSource+0x1d8>)
 800bb64:	4013      	ands	r3, r2
 800bb66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a63      	ldr	r2, [pc, #396]	; (800bd0c <HAL_TIM_ConfigClockSource+0x1dc>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	f000 80a9 	beq.w	800bcd6 <HAL_TIM_ConfigClockSource+0x1a6>
 800bb84:	4a61      	ldr	r2, [pc, #388]	; (800bd0c <HAL_TIM_ConfigClockSource+0x1dc>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	f200 80ae 	bhi.w	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bb8c:	4a60      	ldr	r2, [pc, #384]	; (800bd10 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	f000 80a1 	beq.w	800bcd6 <HAL_TIM_ConfigClockSource+0x1a6>
 800bb94:	4a5e      	ldr	r2, [pc, #376]	; (800bd10 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	f200 80a6 	bhi.w	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bb9c:	4a5d      	ldr	r2, [pc, #372]	; (800bd14 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	f000 8099 	beq.w	800bcd6 <HAL_TIM_ConfigClockSource+0x1a6>
 800bba4:	4a5b      	ldr	r2, [pc, #364]	; (800bd14 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	f200 809e 	bhi.w	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bbac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bbb0:	f000 8091 	beq.w	800bcd6 <HAL_TIM_ConfigClockSource+0x1a6>
 800bbb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bbb8:	f200 8096 	bhi.w	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bbbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbc0:	f000 8089 	beq.w	800bcd6 <HAL_TIM_ConfigClockSource+0x1a6>
 800bbc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbc8:	f200 808e 	bhi.w	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bbcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbd0:	d03e      	beq.n	800bc50 <HAL_TIM_ConfigClockSource+0x120>
 800bbd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbd6:	f200 8087 	bhi.w	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bbda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbde:	f000 8085 	beq.w	800bcec <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbe6:	d87f      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bbe8:	2b70      	cmp	r3, #112	; 0x70
 800bbea:	d01a      	beq.n	800bc22 <HAL_TIM_ConfigClockSource+0xf2>
 800bbec:	2b70      	cmp	r3, #112	; 0x70
 800bbee:	d87b      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bbf0:	2b60      	cmp	r3, #96	; 0x60
 800bbf2:	d050      	beq.n	800bc96 <HAL_TIM_ConfigClockSource+0x166>
 800bbf4:	2b60      	cmp	r3, #96	; 0x60
 800bbf6:	d877      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bbf8:	2b50      	cmp	r3, #80	; 0x50
 800bbfa:	d03c      	beq.n	800bc76 <HAL_TIM_ConfigClockSource+0x146>
 800bbfc:	2b50      	cmp	r3, #80	; 0x50
 800bbfe:	d873      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bc00:	2b40      	cmp	r3, #64	; 0x40
 800bc02:	d058      	beq.n	800bcb6 <HAL_TIM_ConfigClockSource+0x186>
 800bc04:	2b40      	cmp	r3, #64	; 0x40
 800bc06:	d86f      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bc08:	2b30      	cmp	r3, #48	; 0x30
 800bc0a:	d064      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x1a6>
 800bc0c:	2b30      	cmp	r3, #48	; 0x30
 800bc0e:	d86b      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bc10:	2b20      	cmp	r3, #32
 800bc12:	d060      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x1a6>
 800bc14:	2b20      	cmp	r3, #32
 800bc16:	d867      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d05c      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x1a6>
 800bc1c:	2b10      	cmp	r3, #16
 800bc1e:	d05a      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bc20:	e062      	b.n	800bce8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6818      	ldr	r0, [r3, #0]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	6899      	ldr	r1, [r3, #8]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	f000 fc89 	bl	800c548 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	609a      	str	r2, [r3, #8]
      break;
 800bc4e:	e04e      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	6899      	ldr	r1, [r3, #8]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	f000 fc72 	bl	800c548 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689a      	ldr	r2, [r3, #8]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc72:	609a      	str	r2, [r3, #8]
      break;
 800bc74:	e03b      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	6859      	ldr	r1, [r3, #4]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	461a      	mov	r2, r3
 800bc84:	f000 fbe2 	bl	800c44c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2150      	movs	r1, #80	; 0x50
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 fc3c 	bl	800c50c <TIM_ITRx_SetConfig>
      break;
 800bc94:	e02b      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	6859      	ldr	r1, [r3, #4]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	461a      	mov	r2, r3
 800bca4:	f000 fc01 	bl	800c4aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2160      	movs	r1, #96	; 0x60
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 fc2c 	bl	800c50c <TIM_ITRx_SetConfig>
      break;
 800bcb4:	e01b      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	6859      	ldr	r1, [r3, #4]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f000 fbc2 	bl	800c44c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2140      	movs	r1, #64	; 0x40
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 fc1c 	bl	800c50c <TIM_ITRx_SetConfig>
      break;
 800bcd4:	e00b      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4619      	mov	r1, r3
 800bce0:	4610      	mov	r0, r2
 800bce2:	f000 fc13 	bl	800c50c <TIM_ITRx_SetConfig>
        break;
 800bce6:	e002      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bce8:	bf00      	nop
 800bcea:	e000      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bcec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	ffceff88 	.word	0xffceff88
 800bd0c:	00100040 	.word	0x00100040
 800bd10:	00100030 	.word	0x00100030
 800bd14:	00100020 	.word	0x00100020

0800bd18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd48:	bf00      	nop
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a40      	ldr	r2, [pc, #256]	; (800be90 <TIM_Base_SetConfig+0x114>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d013      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd9a:	d00f      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a3d      	ldr	r2, [pc, #244]	; (800be94 <TIM_Base_SetConfig+0x118>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d00b      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a3c      	ldr	r2, [pc, #240]	; (800be98 <TIM_Base_SetConfig+0x11c>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d007      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a3b      	ldr	r2, [pc, #236]	; (800be9c <TIM_Base_SetConfig+0x120>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d003      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a3a      	ldr	r2, [pc, #232]	; (800bea0 <TIM_Base_SetConfig+0x124>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d108      	bne.n	800bdce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a2f      	ldr	r2, [pc, #188]	; (800be90 <TIM_Base_SetConfig+0x114>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d01f      	beq.n	800be16 <TIM_Base_SetConfig+0x9a>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bddc:	d01b      	beq.n	800be16 <TIM_Base_SetConfig+0x9a>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a2c      	ldr	r2, [pc, #176]	; (800be94 <TIM_Base_SetConfig+0x118>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d017      	beq.n	800be16 <TIM_Base_SetConfig+0x9a>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a2b      	ldr	r2, [pc, #172]	; (800be98 <TIM_Base_SetConfig+0x11c>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d013      	beq.n	800be16 <TIM_Base_SetConfig+0x9a>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a2a      	ldr	r2, [pc, #168]	; (800be9c <TIM_Base_SetConfig+0x120>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d00f      	beq.n	800be16 <TIM_Base_SetConfig+0x9a>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a29      	ldr	r2, [pc, #164]	; (800bea0 <TIM_Base_SetConfig+0x124>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d00b      	beq.n	800be16 <TIM_Base_SetConfig+0x9a>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a28      	ldr	r2, [pc, #160]	; (800bea4 <TIM_Base_SetConfig+0x128>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d007      	beq.n	800be16 <TIM_Base_SetConfig+0x9a>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a27      	ldr	r2, [pc, #156]	; (800bea8 <TIM_Base_SetConfig+0x12c>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d003      	beq.n	800be16 <TIM_Base_SetConfig+0x9a>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a26      	ldr	r2, [pc, #152]	; (800beac <TIM_Base_SetConfig+0x130>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d108      	bne.n	800be28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	4313      	orrs	r3, r2
 800be26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	4313      	orrs	r3, r2
 800be34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a10      	ldr	r2, [pc, #64]	; (800be90 <TIM_Base_SetConfig+0x114>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d00f      	beq.n	800be74 <TIM_Base_SetConfig+0xf8>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a12      	ldr	r2, [pc, #72]	; (800bea0 <TIM_Base_SetConfig+0x124>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d00b      	beq.n	800be74 <TIM_Base_SetConfig+0xf8>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a11      	ldr	r2, [pc, #68]	; (800bea4 <TIM_Base_SetConfig+0x128>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d007      	beq.n	800be74 <TIM_Base_SetConfig+0xf8>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a10      	ldr	r2, [pc, #64]	; (800bea8 <TIM_Base_SetConfig+0x12c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d003      	beq.n	800be74 <TIM_Base_SetConfig+0xf8>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a0f      	ldr	r2, [pc, #60]	; (800beac <TIM_Base_SetConfig+0x130>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d103      	bne.n	800be7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	691a      	ldr	r2, [r3, #16]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	615a      	str	r2, [r3, #20]
}
 800be82:	bf00      	nop
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	40010000 	.word	0x40010000
 800be94:	40000400 	.word	0x40000400
 800be98:	40000800 	.word	0x40000800
 800be9c:	40000c00 	.word	0x40000c00
 800bea0:	40010400 	.word	0x40010400
 800bea4:	40014000 	.word	0x40014000
 800bea8:	40014400 	.word	0x40014400
 800beac:	40014800 	.word	0x40014800

0800beb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a1b      	ldr	r3, [r3, #32]
 800bebe:	f023 0201 	bic.w	r2, r3, #1
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4b37      	ldr	r3, [pc, #220]	; (800bfb8 <TIM_OC1_SetConfig+0x108>)
 800bedc:	4013      	ands	r3, r2
 800bede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f023 0303 	bic.w	r3, r3, #3
 800bee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	4313      	orrs	r3, r2
 800bef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	f023 0302 	bic.w	r3, r3, #2
 800bef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a2d      	ldr	r2, [pc, #180]	; (800bfbc <TIM_OC1_SetConfig+0x10c>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d00f      	beq.n	800bf2c <TIM_OC1_SetConfig+0x7c>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a2c      	ldr	r2, [pc, #176]	; (800bfc0 <TIM_OC1_SetConfig+0x110>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d00b      	beq.n	800bf2c <TIM_OC1_SetConfig+0x7c>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a2b      	ldr	r2, [pc, #172]	; (800bfc4 <TIM_OC1_SetConfig+0x114>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d007      	beq.n	800bf2c <TIM_OC1_SetConfig+0x7c>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a2a      	ldr	r2, [pc, #168]	; (800bfc8 <TIM_OC1_SetConfig+0x118>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d003      	beq.n	800bf2c <TIM_OC1_SetConfig+0x7c>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a29      	ldr	r2, [pc, #164]	; (800bfcc <TIM_OC1_SetConfig+0x11c>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d10c      	bne.n	800bf46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f023 0308 	bic.w	r3, r3, #8
 800bf32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f023 0304 	bic.w	r3, r3, #4
 800bf44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a1c      	ldr	r2, [pc, #112]	; (800bfbc <TIM_OC1_SetConfig+0x10c>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d00f      	beq.n	800bf6e <TIM_OC1_SetConfig+0xbe>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a1b      	ldr	r2, [pc, #108]	; (800bfc0 <TIM_OC1_SetConfig+0x110>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d00b      	beq.n	800bf6e <TIM_OC1_SetConfig+0xbe>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a1a      	ldr	r2, [pc, #104]	; (800bfc4 <TIM_OC1_SetConfig+0x114>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d007      	beq.n	800bf6e <TIM_OC1_SetConfig+0xbe>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a19      	ldr	r2, [pc, #100]	; (800bfc8 <TIM_OC1_SetConfig+0x118>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d003      	beq.n	800bf6e <TIM_OC1_SetConfig+0xbe>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a18      	ldr	r2, [pc, #96]	; (800bfcc <TIM_OC1_SetConfig+0x11c>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d111      	bne.n	800bf92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	699b      	ldr	r3, [r3, #24]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	697a      	ldr	r2, [r7, #20]
 800bfaa:	621a      	str	r2, [r3, #32]
}
 800bfac:	bf00      	nop
 800bfae:	371c      	adds	r7, #28
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	fffeff8f 	.word	0xfffeff8f
 800bfbc:	40010000 	.word	0x40010000
 800bfc0:	40010400 	.word	0x40010400
 800bfc4:	40014000 	.word	0x40014000
 800bfc8:	40014400 	.word	0x40014400
 800bfcc:	40014800 	.word	0x40014800

0800bfd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	f023 0210 	bic.w	r2, r3, #16
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	699b      	ldr	r3, [r3, #24]
 800bff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	4b34      	ldr	r3, [pc, #208]	; (800c0cc <TIM_OC2_SetConfig+0xfc>)
 800bffc:	4013      	ands	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	021b      	lsls	r3, r3, #8
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	4313      	orrs	r3, r2
 800c012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f023 0320 	bic.w	r3, r3, #32
 800c01a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	011b      	lsls	r3, r3, #4
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	4313      	orrs	r3, r2
 800c026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4a29      	ldr	r2, [pc, #164]	; (800c0d0 <TIM_OC2_SetConfig+0x100>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d003      	beq.n	800c038 <TIM_OC2_SetConfig+0x68>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a28      	ldr	r2, [pc, #160]	; (800c0d4 <TIM_OC2_SetConfig+0x104>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d10d      	bne.n	800c054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c03e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	011b      	lsls	r3, r3, #4
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	4313      	orrs	r3, r2
 800c04a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a1e      	ldr	r2, [pc, #120]	; (800c0d0 <TIM_OC2_SetConfig+0x100>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d00f      	beq.n	800c07c <TIM_OC2_SetConfig+0xac>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a1d      	ldr	r2, [pc, #116]	; (800c0d4 <TIM_OC2_SetConfig+0x104>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d00b      	beq.n	800c07c <TIM_OC2_SetConfig+0xac>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a1c      	ldr	r2, [pc, #112]	; (800c0d8 <TIM_OC2_SetConfig+0x108>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d007      	beq.n	800c07c <TIM_OC2_SetConfig+0xac>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a1b      	ldr	r2, [pc, #108]	; (800c0dc <TIM_OC2_SetConfig+0x10c>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d003      	beq.n	800c07c <TIM_OC2_SetConfig+0xac>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a1a      	ldr	r2, [pc, #104]	; (800c0e0 <TIM_OC2_SetConfig+0x110>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d113      	bne.n	800c0a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c08a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	693a      	ldr	r2, [r7, #16]
 800c094:	4313      	orrs	r3, r2
 800c096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	685a      	ldr	r2, [r3, #4]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	621a      	str	r2, [r3, #32]
}
 800c0be:	bf00      	nop
 800c0c0:	371c      	adds	r7, #28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	feff8fff 	.word	0xfeff8fff
 800c0d0:	40010000 	.word	0x40010000
 800c0d4:	40010400 	.word	0x40010400
 800c0d8:	40014000 	.word	0x40014000
 800c0dc:	40014400 	.word	0x40014400
 800c0e0:	40014800 	.word	0x40014800

0800c0e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f023 0303 	bic.w	r3, r3, #3
 800c11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	4313      	orrs	r3, r2
 800c124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	021b      	lsls	r3, r3, #8
 800c134:	697a      	ldr	r2, [r7, #20]
 800c136:	4313      	orrs	r3, r2
 800c138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a27      	ldr	r2, [pc, #156]	; (800c1dc <TIM_OC3_SetConfig+0xf8>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d003      	beq.n	800c14a <TIM_OC3_SetConfig+0x66>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4a26      	ldr	r2, [pc, #152]	; (800c1e0 <TIM_OC3_SetConfig+0xfc>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d10d      	bne.n	800c166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	021b      	lsls	r3, r3, #8
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a1c      	ldr	r2, [pc, #112]	; (800c1dc <TIM_OC3_SetConfig+0xf8>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d00f      	beq.n	800c18e <TIM_OC3_SetConfig+0xaa>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a1b      	ldr	r2, [pc, #108]	; (800c1e0 <TIM_OC3_SetConfig+0xfc>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d00b      	beq.n	800c18e <TIM_OC3_SetConfig+0xaa>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a1a      	ldr	r2, [pc, #104]	; (800c1e4 <TIM_OC3_SetConfig+0x100>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d007      	beq.n	800c18e <TIM_OC3_SetConfig+0xaa>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a19      	ldr	r2, [pc, #100]	; (800c1e8 <TIM_OC3_SetConfig+0x104>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d003      	beq.n	800c18e <TIM_OC3_SetConfig+0xaa>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a18      	ldr	r2, [pc, #96]	; (800c1ec <TIM_OC3_SetConfig+0x108>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d113      	bne.n	800c1b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c19c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	011b      	lsls	r3, r3, #4
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	011b      	lsls	r3, r3, #4
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	697a      	ldr	r2, [r7, #20]
 800c1ce:	621a      	str	r2, [r3, #32]
}
 800c1d0:	bf00      	nop
 800c1d2:	371c      	adds	r7, #28
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	40010000 	.word	0x40010000
 800c1e0:	40010400 	.word	0x40010400
 800c1e4:	40014000 	.word	0x40014000
 800c1e8:	40014400 	.word	0x40014400
 800c1ec:	40014800 	.word	0x40014800

0800c1f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a1b      	ldr	r3, [r3, #32]
 800c1fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a1b      	ldr	r3, [r3, #32]
 800c20a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	69db      	ldr	r3, [r3, #28]
 800c216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c21e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	021b      	lsls	r3, r3, #8
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	4313      	orrs	r3, r2
 800c232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c23a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	031b      	lsls	r3, r3, #12
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	4313      	orrs	r3, r2
 800c246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a18      	ldr	r2, [pc, #96]	; (800c2ac <TIM_OC4_SetConfig+0xbc>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d00f      	beq.n	800c270 <TIM_OC4_SetConfig+0x80>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a17      	ldr	r2, [pc, #92]	; (800c2b0 <TIM_OC4_SetConfig+0xc0>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d00b      	beq.n	800c270 <TIM_OC4_SetConfig+0x80>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a16      	ldr	r2, [pc, #88]	; (800c2b4 <TIM_OC4_SetConfig+0xc4>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d007      	beq.n	800c270 <TIM_OC4_SetConfig+0x80>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a15      	ldr	r2, [pc, #84]	; (800c2b8 <TIM_OC4_SetConfig+0xc8>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d003      	beq.n	800c270 <TIM_OC4_SetConfig+0x80>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a14      	ldr	r2, [pc, #80]	; (800c2bc <TIM_OC4_SetConfig+0xcc>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d109      	bne.n	800c284 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	695b      	ldr	r3, [r3, #20]
 800c27c:	019b      	lsls	r3, r3, #6
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	4313      	orrs	r3, r2
 800c282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	621a      	str	r2, [r3, #32]
}
 800c29e:	bf00      	nop
 800c2a0:	371c      	adds	r7, #28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	40010000 	.word	0x40010000
 800c2b0:	40010400 	.word	0x40010400
 800c2b4:	40014000 	.word	0x40014000
 800c2b8:	40014400 	.word	0x40014400
 800c2bc:	40014800 	.word	0x40014800

0800c2c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b087      	sub	sp, #28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a1b      	ldr	r3, [r3, #32]
 800c2ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	041b      	lsls	r3, r3, #16
 800c308:	693a      	ldr	r2, [r7, #16]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a17      	ldr	r2, [pc, #92]	; (800c370 <TIM_OC5_SetConfig+0xb0>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d00f      	beq.n	800c336 <TIM_OC5_SetConfig+0x76>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a16      	ldr	r2, [pc, #88]	; (800c374 <TIM_OC5_SetConfig+0xb4>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d00b      	beq.n	800c336 <TIM_OC5_SetConfig+0x76>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a15      	ldr	r2, [pc, #84]	; (800c378 <TIM_OC5_SetConfig+0xb8>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d007      	beq.n	800c336 <TIM_OC5_SetConfig+0x76>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a14      	ldr	r2, [pc, #80]	; (800c37c <TIM_OC5_SetConfig+0xbc>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d003      	beq.n	800c336 <TIM_OC5_SetConfig+0x76>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a13      	ldr	r2, [pc, #76]	; (800c380 <TIM_OC5_SetConfig+0xc0>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d109      	bne.n	800c34a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c33c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	021b      	lsls	r3, r3, #8
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	4313      	orrs	r3, r2
 800c348:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	693a      	ldr	r2, [r7, #16]
 800c362:	621a      	str	r2, [r3, #32]
}
 800c364:	bf00      	nop
 800c366:	371c      	adds	r7, #28
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr
 800c370:	40010000 	.word	0x40010000
 800c374:	40010400 	.word	0x40010400
 800c378:	40014000 	.word	0x40014000
 800c37c:	40014400 	.word	0x40014400
 800c380:	40014800 	.word	0x40014800

0800c384 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c384:	b480      	push	{r7}
 800c386:	b087      	sub	sp, #28
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a1b      	ldr	r3, [r3, #32]
 800c392:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	021b      	lsls	r3, r3, #8
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	051b      	lsls	r3, r3, #20
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a18      	ldr	r2, [pc, #96]	; (800c438 <TIM_OC6_SetConfig+0xb4>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d00f      	beq.n	800c3fc <TIM_OC6_SetConfig+0x78>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a17      	ldr	r2, [pc, #92]	; (800c43c <TIM_OC6_SetConfig+0xb8>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d00b      	beq.n	800c3fc <TIM_OC6_SetConfig+0x78>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a16      	ldr	r2, [pc, #88]	; (800c440 <TIM_OC6_SetConfig+0xbc>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d007      	beq.n	800c3fc <TIM_OC6_SetConfig+0x78>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a15      	ldr	r2, [pc, #84]	; (800c444 <TIM_OC6_SetConfig+0xc0>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d003      	beq.n	800c3fc <TIM_OC6_SetConfig+0x78>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a14      	ldr	r2, [pc, #80]	; (800c448 <TIM_OC6_SetConfig+0xc4>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d109      	bne.n	800c410 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c402:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	029b      	lsls	r3, r3, #10
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	697a      	ldr	r2, [r7, #20]
 800c414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	621a      	str	r2, [r3, #32]
}
 800c42a:	bf00      	nop
 800c42c:	371c      	adds	r7, #28
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	40010000 	.word	0x40010000
 800c43c:	40010400 	.word	0x40010400
 800c440:	40014000 	.word	0x40014000
 800c444:	40014400 	.word	0x40014400
 800c448:	40014800 	.word	0x40014800

0800c44c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b087      	sub	sp, #28
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6a1b      	ldr	r3, [r3, #32]
 800c45c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	f023 0201 	bic.w	r2, r3, #1
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	011b      	lsls	r3, r3, #4
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	4313      	orrs	r3, r2
 800c480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	f023 030a 	bic.w	r3, r3, #10
 800c488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	4313      	orrs	r3, r2
 800c490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	621a      	str	r2, [r3, #32]
}
 800c49e:	bf00      	nop
 800c4a0:	371c      	adds	r7, #28
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr

0800c4aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4aa:	b480      	push	{r7}
 800c4ac:	b087      	sub	sp, #28
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	60f8      	str	r0, [r7, #12]
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6a1b      	ldr	r3, [r3, #32]
 800c4ba:	f023 0210 	bic.w	r2, r3, #16
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	699b      	ldr	r3, [r3, #24]
 800c4c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6a1b      	ldr	r3, [r3, #32]
 800c4cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	031b      	lsls	r3, r3, #12
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	011b      	lsls	r3, r3, #4
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	693a      	ldr	r2, [r7, #16]
 800c4fc:	621a      	str	r2, [r3, #32]
}
 800c4fe:	bf00      	nop
 800c500:	371c      	adds	r7, #28
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
	...

0800c50c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	4b09      	ldr	r3, [pc, #36]	; (800c544 <TIM_ITRx_SetConfig+0x38>)
 800c520:	4013      	ands	r3, r2
 800c522:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	4313      	orrs	r3, r2
 800c52a:	f043 0307 	orr.w	r3, r3, #7
 800c52e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	609a      	str	r2, [r3, #8]
}
 800c536:	bf00      	nop
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	ffcfff8f 	.word	0xffcfff8f

0800c548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c548:	b480      	push	{r7}
 800c54a:	b087      	sub	sp, #28
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	607a      	str	r2, [r7, #4]
 800c554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	021a      	lsls	r2, r3, #8
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	431a      	orrs	r2, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	4313      	orrs	r3, r2
 800c570:	697a      	ldr	r2, [r7, #20]
 800c572:	4313      	orrs	r3, r2
 800c574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	609a      	str	r2, [r3, #8]
}
 800c57c:	bf00      	nop
 800c57e:	371c      	adds	r7, #28
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d101      	bne.n	800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c59c:	2302      	movs	r3, #2
 800c59e:	e068      	b.n	800c672 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a2e      	ldr	r2, [pc, #184]	; (800c680 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d004      	beq.n	800c5d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a2d      	ldr	r2, [pc, #180]	; (800c684 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d108      	bne.n	800c5e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c5da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a1e      	ldr	r2, [pc, #120]	; (800c680 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d01d      	beq.n	800c646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c612:	d018      	beq.n	800c646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a1b      	ldr	r2, [pc, #108]	; (800c688 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d013      	beq.n	800c646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a1a      	ldr	r2, [pc, #104]	; (800c68c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d00e      	beq.n	800c646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a18      	ldr	r2, [pc, #96]	; (800c690 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d009      	beq.n	800c646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a13      	ldr	r2, [pc, #76]	; (800c684 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d004      	beq.n	800c646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a14      	ldr	r2, [pc, #80]	; (800c694 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d10c      	bne.n	800c660 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c64c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	4313      	orrs	r3, r2
 800c656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	40010000 	.word	0x40010000
 800c684:	40010400 	.word	0x40010400
 800c688:	40000400 	.word	0x40000400
 800c68c:	40000800 	.word	0x40000800
 800c690:	40000c00 	.word	0x40000c00
 800c694:	40001800 	.word	0x40001800

0800c698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d101      	bne.n	800c6b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	e065      	b.n	800c780 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	695b      	ldr	r3, [r3, #20]
 800c70c:	4313      	orrs	r3, r2
 800c70e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71a:	4313      	orrs	r3, r2
 800c71c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	041b      	lsls	r3, r3, #16
 800c72a:	4313      	orrs	r3, r2
 800c72c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a16      	ldr	r2, [pc, #88]	; (800c78c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d004      	beq.n	800c742 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a14      	ldr	r2, [pc, #80]	; (800c790 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d115      	bne.n	800c76e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74c:	051b      	lsls	r3, r3, #20
 800c74e:	4313      	orrs	r3, r2
 800c750:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	6a1b      	ldr	r3, [r3, #32]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3714      	adds	r7, #20
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr
 800c78c:	40010000 	.word	0x40010000
 800c790:	40010400 	.word	0x40010400

0800c794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c79c:	bf00      	nop
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7b0:	bf00      	nop
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c7c4:	bf00      	nop
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e042      	b.n	800c868 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d106      	bne.n	800c7fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7f4 ff5d 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2224      	movs	r2, #36	; 0x24
 800c7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f022 0201 	bic.w	r2, r2, #1
 800c810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fb06 	bl	800ce24 <UART_SetConfig>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d101      	bne.n	800c822 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	e022      	b.n	800c868 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c826:	2b00      	cmp	r3, #0
 800c828:	d002      	beq.n	800c830 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f001 f85a 	bl	800d8e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c83e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	689a      	ldr	r2, [r3, #8]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c84e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f042 0201 	orr.w	r2, r2, #1
 800c85e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f001 f8e1 	bl	800da28 <UART_CheckIdleState>
 800c866:	4603      	mov	r3, r0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b088      	sub	sp, #32
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	f640 030f 	movw	r3, #2063	; 0x80f
 800c896:	4013      	ands	r3, r2
 800c898:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d118      	bne.n	800c8d2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	f003 0320 	and.w	r3, r3, #32
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d013      	beq.n	800c8d2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	f003 0320 	and.w	r3, r3, #32
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d104      	bne.n	800c8be <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d009      	beq.n	800c8d2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 8282 	beq.w	800cdcc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	4798      	blx	r3
      }
      return;
 800c8d0:	e27c      	b.n	800cdcc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 80ef 	beq.w	800cab8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c8da:	697a      	ldr	r2, [r7, #20]
 800c8dc:	4b73      	ldr	r3, [pc, #460]	; (800caac <HAL_UART_IRQHandler+0x23c>)
 800c8de:	4013      	ands	r3, r2
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d105      	bne.n	800c8f0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c8e4:	69ba      	ldr	r2, [r7, #24]
 800c8e6:	4b72      	ldr	r3, [pc, #456]	; (800cab0 <HAL_UART_IRQHandler+0x240>)
 800c8e8:	4013      	ands	r3, r2
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f000 80e4 	beq.w	800cab8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	f003 0301 	and.w	r3, r3, #1
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d010      	beq.n	800c91c <HAL_UART_IRQHandler+0xac>
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00b      	beq.n	800c91c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2201      	movs	r2, #1
 800c90a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c912:	f043 0201 	orr.w	r2, r3, #1
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	f003 0302 	and.w	r3, r3, #2
 800c922:	2b00      	cmp	r3, #0
 800c924:	d010      	beq.n	800c948 <HAL_UART_IRQHandler+0xd8>
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00b      	beq.n	800c948 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2202      	movs	r2, #2
 800c936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c93e:	f043 0204 	orr.w	r2, r3, #4
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	f003 0304 	and.w	r3, r3, #4
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d010      	beq.n	800c974 <HAL_UART_IRQHandler+0x104>
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00b      	beq.n	800c974 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2204      	movs	r2, #4
 800c962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c96a:	f043 0202 	orr.w	r2, r3, #2
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	f003 0308 	and.w	r3, r3, #8
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d015      	beq.n	800c9aa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	f003 0320 	and.w	r3, r3, #32
 800c984:	2b00      	cmp	r3, #0
 800c986:	d104      	bne.n	800c992 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	4b48      	ldr	r3, [pc, #288]	; (800caac <HAL_UART_IRQHandler+0x23c>)
 800c98c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00b      	beq.n	800c9aa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2208      	movs	r2, #8
 800c998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9a0:	f043 0208 	orr.w	r2, r3, #8
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d011      	beq.n	800c9d8 <HAL_UART_IRQHandler+0x168>
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00c      	beq.n	800c9d8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9ce:	f043 0220 	orr.w	r2, r3, #32
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 81f6 	beq.w	800cdd0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	f003 0320 	and.w	r3, r3, #32
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d011      	beq.n	800ca12 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	f003 0320 	and.w	r3, r3, #32
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d104      	bne.n	800ca02 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d007      	beq.n	800ca12 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d003      	beq.n	800ca12 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca18:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca24:	2b40      	cmp	r3, #64	; 0x40
 800ca26:	d004      	beq.n	800ca32 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d031      	beq.n	800ca96 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f001 f8c4 	bl	800dbc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca42:	2b40      	cmp	r3, #64	; 0x40
 800ca44:	d123      	bne.n	800ca8e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	689a      	ldr	r2, [r3, #8]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca54:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d013      	beq.n	800ca86 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca62:	4a14      	ldr	r2, [pc, #80]	; (800cab4 <HAL_UART_IRQHandler+0x244>)
 800ca64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7f6 f838 	bl	8002ae0 <HAL_DMA_Abort_IT>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d017      	beq.n	800caa6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ca80:	4610      	mov	r0, r2
 800ca82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca84:	e00f      	b.n	800caa6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f9b6 	bl	800cdf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca8c:	e00b      	b.n	800caa6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f9b2 	bl	800cdf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca94:	e007      	b.n	800caa6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f9ae 	bl	800cdf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800caa4:	e194      	b.n	800cdd0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caa6:	bf00      	nop
    return;
 800caa8:	e192      	b.n	800cdd0 <HAL_UART_IRQHandler+0x560>
 800caaa:	bf00      	nop
 800caac:	10000001 	.word	0x10000001
 800cab0:	04000120 	.word	0x04000120
 800cab4:	0800dc25 	.word	0x0800dc25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	f040 810f 	bne.w	800cce0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	f003 0310 	and.w	r3, r3, #16
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 8109 	beq.w	800cce0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	f003 0310 	and.w	r3, r3, #16
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 8103 	beq.w	800cce0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2210      	movs	r2, #16
 800cae0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caec:	2b40      	cmp	r3, #64	; 0x40
 800caee:	f040 80bb 	bne.w	800cc68 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a96      	ldr	r2, [pc, #600]	; (800cd54 <HAL_UART_IRQHandler+0x4e4>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d059      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a94      	ldr	r2, [pc, #592]	; (800cd58 <HAL_UART_IRQHandler+0x4e8>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d053      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a92      	ldr	r2, [pc, #584]	; (800cd5c <HAL_UART_IRQHandler+0x4ec>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d04d      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a90      	ldr	r2, [pc, #576]	; (800cd60 <HAL_UART_IRQHandler+0x4f0>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d047      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a8e      	ldr	r2, [pc, #568]	; (800cd64 <HAL_UART_IRQHandler+0x4f4>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d041      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a8c      	ldr	r2, [pc, #560]	; (800cd68 <HAL_UART_IRQHandler+0x4f8>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d03b      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a8a      	ldr	r2, [pc, #552]	; (800cd6c <HAL_UART_IRQHandler+0x4fc>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d035      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a88      	ldr	r2, [pc, #544]	; (800cd70 <HAL_UART_IRQHandler+0x500>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d02f      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a86      	ldr	r2, [pc, #536]	; (800cd74 <HAL_UART_IRQHandler+0x504>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d029      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a84      	ldr	r2, [pc, #528]	; (800cd78 <HAL_UART_IRQHandler+0x508>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d023      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a82      	ldr	r2, [pc, #520]	; (800cd7c <HAL_UART_IRQHandler+0x50c>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d01d      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a80      	ldr	r2, [pc, #512]	; (800cd80 <HAL_UART_IRQHandler+0x510>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d017      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a7e      	ldr	r2, [pc, #504]	; (800cd84 <HAL_UART_IRQHandler+0x514>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d011      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a7c      	ldr	r2, [pc, #496]	; (800cd88 <HAL_UART_IRQHandler+0x518>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d00b      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a7a      	ldr	r2, [pc, #488]	; (800cd8c <HAL_UART_IRQHandler+0x51c>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d005      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x342>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a78      	ldr	r2, [pc, #480]	; (800cd90 <HAL_UART_IRQHandler+0x520>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d105      	bne.n	800cbbe <HAL_UART_IRQHandler+0x34e>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	e004      	b.n	800cbc8 <HAL_UART_IRQHandler+0x358>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800cbca:	893b      	ldrh	r3, [r7, #8]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 8101 	beq.w	800cdd4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cbd8:	893a      	ldrh	r2, [r7, #8]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	f080 80fa 	bcs.w	800cdd4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	893a      	ldrh	r2, [r7, #8]
 800cbe4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbec:	69db      	ldr	r3, [r3, #28]
 800cbee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbf2:	d02b      	beq.n	800cc4c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc02:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	689a      	ldr	r2, [r3, #8]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f022 0201 	bic.w	r2, r2, #1
 800cc12:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	689a      	ldr	r2, [r3, #8]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc22:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2220      	movs	r2, #32
 800cc28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f022 0210 	bic.w	r2, r2, #16
 800cc40:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7f5 fc2c 	bl	80024a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f8d3 	bl	800ce0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc66:	e0b5      	b.n	800cdd4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 80a8 	beq.w	800cdd8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800cc88:	897b      	ldrh	r3, [r7, #10]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f000 80a4 	beq.w	800cdd8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cc9e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6899      	ldr	r1, [r3, #8]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	4b3a      	ldr	r3, [pc, #232]	; (800cd94 <HAL_UART_IRQHandler+0x524>)
 800ccac:	400b      	ands	r3, r1
 800ccae:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f022 0210 	bic.w	r2, r2, #16
 800ccd2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ccd4:	897b      	ldrh	r3, [r7, #10]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f897 	bl	800ce0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ccde:	e07b      	b.n	800cdd8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00d      	beq.n	800cd06 <HAL_UART_IRQHandler+0x496>
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d008      	beq.n	800cd06 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ccfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 ffc0 	bl	800dc84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cd04:	e06b      	b.n	800cdde <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d012      	beq.n	800cd36 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d104      	bne.n	800cd24 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d008      	beq.n	800cd36 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d057      	beq.n	800cddc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	4798      	blx	r3
    }
    return;
 800cd34:	e052      	b.n	800cddc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d02b      	beq.n	800cd98 <HAL_UART_IRQHandler+0x528>
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d026      	beq.n	800cd98 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 ff80 	bl	800dc50 <UART_EndTransmit_IT>
    return;
 800cd50:	e045      	b.n	800cdde <HAL_UART_IRQHandler+0x56e>
 800cd52:	bf00      	nop
 800cd54:	40020010 	.word	0x40020010
 800cd58:	40020028 	.word	0x40020028
 800cd5c:	40020040 	.word	0x40020040
 800cd60:	40020058 	.word	0x40020058
 800cd64:	40020070 	.word	0x40020070
 800cd68:	40020088 	.word	0x40020088
 800cd6c:	400200a0 	.word	0x400200a0
 800cd70:	400200b8 	.word	0x400200b8
 800cd74:	40020410 	.word	0x40020410
 800cd78:	40020428 	.word	0x40020428
 800cd7c:	40020440 	.word	0x40020440
 800cd80:	40020458 	.word	0x40020458
 800cd84:	40020470 	.word	0x40020470
 800cd88:	40020488 	.word	0x40020488
 800cd8c:	400204a0 	.word	0x400204a0
 800cd90:	400204b8 	.word	0x400204b8
 800cd94:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d008      	beq.n	800cdb4 <HAL_UART_IRQHandler+0x544>
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d003      	beq.n	800cdb4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 ff7d 	bl	800dcac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cdb2:	e014      	b.n	800cdde <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00f      	beq.n	800cdde <HAL_UART_IRQHandler+0x56e>
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	da0c      	bge.n	800cdde <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 ff67 	bl	800dc98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cdca:	e008      	b.n	800cdde <HAL_UART_IRQHandler+0x56e>
      return;
 800cdcc:	bf00      	nop
 800cdce:	e006      	b.n	800cdde <HAL_UART_IRQHandler+0x56e>
    return;
 800cdd0:	bf00      	nop
 800cdd2:	e004      	b.n	800cdde <HAL_UART_IRQHandler+0x56e>
      return;
 800cdd4:	bf00      	nop
 800cdd6:	e002      	b.n	800cdde <HAL_UART_IRQHandler+0x56e>
      return;
 800cdd8:	bf00      	nop
 800cdda:	e000      	b.n	800cdde <HAL_UART_IRQHandler+0x56e>
    return;
 800cddc:	bf00      	nop
  }
}
 800cdde:	3720      	adds	r7, #32
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	460b      	mov	r3, r1
 800ce16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ce18:	bf00      	nop
 800ce1a:	370c      	adds	r7, #12
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce24:	b5b0      	push	{r4, r5, r7, lr}
 800ce26:	b08e      	sub	sp, #56	; 0x38
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	689a      	ldr	r2, [r3, #8]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	431a      	orrs	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	4bbf      	ldr	r3, [pc, #764]	; (800d150 <UART_SetConfig+0x32c>)
 800ce52:	4013      	ands	r3, r2
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	6812      	ldr	r2, [r2, #0]
 800ce58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce5a:	430b      	orrs	r3, r1
 800ce5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68da      	ldr	r2, [r3, #12]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	430a      	orrs	r2, r1
 800ce72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4ab5      	ldr	r2, [pc, #724]	; (800d154 <UART_SetConfig+0x330>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d004      	beq.n	800ce8e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	689a      	ldr	r2, [r3, #8]
 800ce94:	4bb0      	ldr	r3, [pc, #704]	; (800d158 <UART_SetConfig+0x334>)
 800ce96:	4013      	ands	r3, r2
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	6812      	ldr	r2, [r2, #0]
 800ce9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce9e:	430b      	orrs	r3, r1
 800cea0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea8:	f023 010f 	bic.w	r1, r3, #15
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	430a      	orrs	r2, r1
 800ceb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4aa7      	ldr	r2, [pc, #668]	; (800d15c <UART_SetConfig+0x338>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d176      	bne.n	800cfb0 <UART_SetConfig+0x18c>
 800cec2:	4ba7      	ldr	r3, [pc, #668]	; (800d160 <UART_SetConfig+0x33c>)
 800cec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ceca:	2b28      	cmp	r3, #40	; 0x28
 800cecc:	d86c      	bhi.n	800cfa8 <UART_SetConfig+0x184>
 800cece:	a201      	add	r2, pc, #4	; (adr r2, 800ced4 <UART_SetConfig+0xb0>)
 800ced0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced4:	0800cf79 	.word	0x0800cf79
 800ced8:	0800cfa9 	.word	0x0800cfa9
 800cedc:	0800cfa9 	.word	0x0800cfa9
 800cee0:	0800cfa9 	.word	0x0800cfa9
 800cee4:	0800cfa9 	.word	0x0800cfa9
 800cee8:	0800cfa9 	.word	0x0800cfa9
 800ceec:	0800cfa9 	.word	0x0800cfa9
 800cef0:	0800cfa9 	.word	0x0800cfa9
 800cef4:	0800cf81 	.word	0x0800cf81
 800cef8:	0800cfa9 	.word	0x0800cfa9
 800cefc:	0800cfa9 	.word	0x0800cfa9
 800cf00:	0800cfa9 	.word	0x0800cfa9
 800cf04:	0800cfa9 	.word	0x0800cfa9
 800cf08:	0800cfa9 	.word	0x0800cfa9
 800cf0c:	0800cfa9 	.word	0x0800cfa9
 800cf10:	0800cfa9 	.word	0x0800cfa9
 800cf14:	0800cf89 	.word	0x0800cf89
 800cf18:	0800cfa9 	.word	0x0800cfa9
 800cf1c:	0800cfa9 	.word	0x0800cfa9
 800cf20:	0800cfa9 	.word	0x0800cfa9
 800cf24:	0800cfa9 	.word	0x0800cfa9
 800cf28:	0800cfa9 	.word	0x0800cfa9
 800cf2c:	0800cfa9 	.word	0x0800cfa9
 800cf30:	0800cfa9 	.word	0x0800cfa9
 800cf34:	0800cf91 	.word	0x0800cf91
 800cf38:	0800cfa9 	.word	0x0800cfa9
 800cf3c:	0800cfa9 	.word	0x0800cfa9
 800cf40:	0800cfa9 	.word	0x0800cfa9
 800cf44:	0800cfa9 	.word	0x0800cfa9
 800cf48:	0800cfa9 	.word	0x0800cfa9
 800cf4c:	0800cfa9 	.word	0x0800cfa9
 800cf50:	0800cfa9 	.word	0x0800cfa9
 800cf54:	0800cf99 	.word	0x0800cf99
 800cf58:	0800cfa9 	.word	0x0800cfa9
 800cf5c:	0800cfa9 	.word	0x0800cfa9
 800cf60:	0800cfa9 	.word	0x0800cfa9
 800cf64:	0800cfa9 	.word	0x0800cfa9
 800cf68:	0800cfa9 	.word	0x0800cfa9
 800cf6c:	0800cfa9 	.word	0x0800cfa9
 800cf70:	0800cfa9 	.word	0x0800cfa9
 800cf74:	0800cfa1 	.word	0x0800cfa1
 800cf78:	2301      	movs	r3, #1
 800cf7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf7e:	e222      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cf80:	2304      	movs	r3, #4
 800cf82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf86:	e21e      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cf88:	2308      	movs	r3, #8
 800cf8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf8e:	e21a      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cf90:	2310      	movs	r3, #16
 800cf92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf96:	e216      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cf98:	2320      	movs	r3, #32
 800cf9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf9e:	e212      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cfa0:	2340      	movs	r3, #64	; 0x40
 800cfa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfa6:	e20e      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cfa8:	2380      	movs	r3, #128	; 0x80
 800cfaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfae:	e20a      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a6b      	ldr	r2, [pc, #428]	; (800d164 <UART_SetConfig+0x340>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d130      	bne.n	800d01c <UART_SetConfig+0x1f8>
 800cfba:	4b69      	ldr	r3, [pc, #420]	; (800d160 <UART_SetConfig+0x33c>)
 800cfbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfbe:	f003 0307 	and.w	r3, r3, #7
 800cfc2:	2b05      	cmp	r3, #5
 800cfc4:	d826      	bhi.n	800d014 <UART_SetConfig+0x1f0>
 800cfc6:	a201      	add	r2, pc, #4	; (adr r2, 800cfcc <UART_SetConfig+0x1a8>)
 800cfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfcc:	0800cfe5 	.word	0x0800cfe5
 800cfd0:	0800cfed 	.word	0x0800cfed
 800cfd4:	0800cff5 	.word	0x0800cff5
 800cfd8:	0800cffd 	.word	0x0800cffd
 800cfdc:	0800d005 	.word	0x0800d005
 800cfe0:	0800d00d 	.word	0x0800d00d
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfea:	e1ec      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cfec:	2304      	movs	r3, #4
 800cfee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cff2:	e1e8      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cff4:	2308      	movs	r3, #8
 800cff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cffa:	e1e4      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800cffc:	2310      	movs	r3, #16
 800cffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d002:	e1e0      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d004:	2320      	movs	r3, #32
 800d006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d00a:	e1dc      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d00c:	2340      	movs	r3, #64	; 0x40
 800d00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d012:	e1d8      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d014:	2380      	movs	r3, #128	; 0x80
 800d016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d01a:	e1d4      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a51      	ldr	r2, [pc, #324]	; (800d168 <UART_SetConfig+0x344>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d130      	bne.n	800d088 <UART_SetConfig+0x264>
 800d026:	4b4e      	ldr	r3, [pc, #312]	; (800d160 <UART_SetConfig+0x33c>)
 800d028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d02a:	f003 0307 	and.w	r3, r3, #7
 800d02e:	2b05      	cmp	r3, #5
 800d030:	d826      	bhi.n	800d080 <UART_SetConfig+0x25c>
 800d032:	a201      	add	r2, pc, #4	; (adr r2, 800d038 <UART_SetConfig+0x214>)
 800d034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d038:	0800d051 	.word	0x0800d051
 800d03c:	0800d059 	.word	0x0800d059
 800d040:	0800d061 	.word	0x0800d061
 800d044:	0800d069 	.word	0x0800d069
 800d048:	0800d071 	.word	0x0800d071
 800d04c:	0800d079 	.word	0x0800d079
 800d050:	2300      	movs	r3, #0
 800d052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d056:	e1b6      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d058:	2304      	movs	r3, #4
 800d05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d05e:	e1b2      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d060:	2308      	movs	r3, #8
 800d062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d066:	e1ae      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d068:	2310      	movs	r3, #16
 800d06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d06e:	e1aa      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d070:	2320      	movs	r3, #32
 800d072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d076:	e1a6      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d078:	2340      	movs	r3, #64	; 0x40
 800d07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d07e:	e1a2      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d080:	2380      	movs	r3, #128	; 0x80
 800d082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d086:	e19e      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a37      	ldr	r2, [pc, #220]	; (800d16c <UART_SetConfig+0x348>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d130      	bne.n	800d0f4 <UART_SetConfig+0x2d0>
 800d092:	4b33      	ldr	r3, [pc, #204]	; (800d160 <UART_SetConfig+0x33c>)
 800d094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	2b05      	cmp	r3, #5
 800d09c:	d826      	bhi.n	800d0ec <UART_SetConfig+0x2c8>
 800d09e:	a201      	add	r2, pc, #4	; (adr r2, 800d0a4 <UART_SetConfig+0x280>)
 800d0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a4:	0800d0bd 	.word	0x0800d0bd
 800d0a8:	0800d0c5 	.word	0x0800d0c5
 800d0ac:	0800d0cd 	.word	0x0800d0cd
 800d0b0:	0800d0d5 	.word	0x0800d0d5
 800d0b4:	0800d0dd 	.word	0x0800d0dd
 800d0b8:	0800d0e5 	.word	0x0800d0e5
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0c2:	e180      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d0c4:	2304      	movs	r3, #4
 800d0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ca:	e17c      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d0cc:	2308      	movs	r3, #8
 800d0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0d2:	e178      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d0d4:	2310      	movs	r3, #16
 800d0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0da:	e174      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d0dc:	2320      	movs	r3, #32
 800d0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0e2:	e170      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d0e4:	2340      	movs	r3, #64	; 0x40
 800d0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ea:	e16c      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d0ec:	2380      	movs	r3, #128	; 0x80
 800d0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0f2:	e168      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a1d      	ldr	r2, [pc, #116]	; (800d170 <UART_SetConfig+0x34c>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d142      	bne.n	800d184 <UART_SetConfig+0x360>
 800d0fe:	4b18      	ldr	r3, [pc, #96]	; (800d160 <UART_SetConfig+0x33c>)
 800d100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d102:	f003 0307 	and.w	r3, r3, #7
 800d106:	2b05      	cmp	r3, #5
 800d108:	d838      	bhi.n	800d17c <UART_SetConfig+0x358>
 800d10a:	a201      	add	r2, pc, #4	; (adr r2, 800d110 <UART_SetConfig+0x2ec>)
 800d10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d110:	0800d129 	.word	0x0800d129
 800d114:	0800d131 	.word	0x0800d131
 800d118:	0800d139 	.word	0x0800d139
 800d11c:	0800d141 	.word	0x0800d141
 800d120:	0800d149 	.word	0x0800d149
 800d124:	0800d175 	.word	0x0800d175
 800d128:	2300      	movs	r3, #0
 800d12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d12e:	e14a      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d130:	2304      	movs	r3, #4
 800d132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d136:	e146      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d138:	2308      	movs	r3, #8
 800d13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d13e:	e142      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d140:	2310      	movs	r3, #16
 800d142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d146:	e13e      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d148:	2320      	movs	r3, #32
 800d14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d14e:	e13a      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d150:	cfff69f3 	.word	0xcfff69f3
 800d154:	58000c00 	.word	0x58000c00
 800d158:	11fff4ff 	.word	0x11fff4ff
 800d15c:	40011000 	.word	0x40011000
 800d160:	58024400 	.word	0x58024400
 800d164:	40004400 	.word	0x40004400
 800d168:	40004800 	.word	0x40004800
 800d16c:	40004c00 	.word	0x40004c00
 800d170:	40005000 	.word	0x40005000
 800d174:	2340      	movs	r3, #64	; 0x40
 800d176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d17a:	e124      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d17c:	2380      	movs	r3, #128	; 0x80
 800d17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d182:	e120      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4acc      	ldr	r2, [pc, #816]	; (800d4bc <UART_SetConfig+0x698>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d176      	bne.n	800d27c <UART_SetConfig+0x458>
 800d18e:	4bcc      	ldr	r3, [pc, #816]	; (800d4c0 <UART_SetConfig+0x69c>)
 800d190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d196:	2b28      	cmp	r3, #40	; 0x28
 800d198:	d86c      	bhi.n	800d274 <UART_SetConfig+0x450>
 800d19a:	a201      	add	r2, pc, #4	; (adr r2, 800d1a0 <UART_SetConfig+0x37c>)
 800d19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a0:	0800d245 	.word	0x0800d245
 800d1a4:	0800d275 	.word	0x0800d275
 800d1a8:	0800d275 	.word	0x0800d275
 800d1ac:	0800d275 	.word	0x0800d275
 800d1b0:	0800d275 	.word	0x0800d275
 800d1b4:	0800d275 	.word	0x0800d275
 800d1b8:	0800d275 	.word	0x0800d275
 800d1bc:	0800d275 	.word	0x0800d275
 800d1c0:	0800d24d 	.word	0x0800d24d
 800d1c4:	0800d275 	.word	0x0800d275
 800d1c8:	0800d275 	.word	0x0800d275
 800d1cc:	0800d275 	.word	0x0800d275
 800d1d0:	0800d275 	.word	0x0800d275
 800d1d4:	0800d275 	.word	0x0800d275
 800d1d8:	0800d275 	.word	0x0800d275
 800d1dc:	0800d275 	.word	0x0800d275
 800d1e0:	0800d255 	.word	0x0800d255
 800d1e4:	0800d275 	.word	0x0800d275
 800d1e8:	0800d275 	.word	0x0800d275
 800d1ec:	0800d275 	.word	0x0800d275
 800d1f0:	0800d275 	.word	0x0800d275
 800d1f4:	0800d275 	.word	0x0800d275
 800d1f8:	0800d275 	.word	0x0800d275
 800d1fc:	0800d275 	.word	0x0800d275
 800d200:	0800d25d 	.word	0x0800d25d
 800d204:	0800d275 	.word	0x0800d275
 800d208:	0800d275 	.word	0x0800d275
 800d20c:	0800d275 	.word	0x0800d275
 800d210:	0800d275 	.word	0x0800d275
 800d214:	0800d275 	.word	0x0800d275
 800d218:	0800d275 	.word	0x0800d275
 800d21c:	0800d275 	.word	0x0800d275
 800d220:	0800d265 	.word	0x0800d265
 800d224:	0800d275 	.word	0x0800d275
 800d228:	0800d275 	.word	0x0800d275
 800d22c:	0800d275 	.word	0x0800d275
 800d230:	0800d275 	.word	0x0800d275
 800d234:	0800d275 	.word	0x0800d275
 800d238:	0800d275 	.word	0x0800d275
 800d23c:	0800d275 	.word	0x0800d275
 800d240:	0800d26d 	.word	0x0800d26d
 800d244:	2301      	movs	r3, #1
 800d246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d24a:	e0bc      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d24c:	2304      	movs	r3, #4
 800d24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d252:	e0b8      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d254:	2308      	movs	r3, #8
 800d256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d25a:	e0b4      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d25c:	2310      	movs	r3, #16
 800d25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d262:	e0b0      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d264:	2320      	movs	r3, #32
 800d266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d26a:	e0ac      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d26c:	2340      	movs	r3, #64	; 0x40
 800d26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d272:	e0a8      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d274:	2380      	movs	r3, #128	; 0x80
 800d276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d27a:	e0a4      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a90      	ldr	r2, [pc, #576]	; (800d4c4 <UART_SetConfig+0x6a0>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d130      	bne.n	800d2e8 <UART_SetConfig+0x4c4>
 800d286:	4b8e      	ldr	r3, [pc, #568]	; (800d4c0 <UART_SetConfig+0x69c>)
 800d288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d28a:	f003 0307 	and.w	r3, r3, #7
 800d28e:	2b05      	cmp	r3, #5
 800d290:	d826      	bhi.n	800d2e0 <UART_SetConfig+0x4bc>
 800d292:	a201      	add	r2, pc, #4	; (adr r2, 800d298 <UART_SetConfig+0x474>)
 800d294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d298:	0800d2b1 	.word	0x0800d2b1
 800d29c:	0800d2b9 	.word	0x0800d2b9
 800d2a0:	0800d2c1 	.word	0x0800d2c1
 800d2a4:	0800d2c9 	.word	0x0800d2c9
 800d2a8:	0800d2d1 	.word	0x0800d2d1
 800d2ac:	0800d2d9 	.word	0x0800d2d9
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2b6:	e086      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2be:	e082      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2c6:	e07e      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d2c8:	2310      	movs	r3, #16
 800d2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2ce:	e07a      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d2d0:	2320      	movs	r3, #32
 800d2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2d6:	e076      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d2d8:	2340      	movs	r3, #64	; 0x40
 800d2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2de:	e072      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d2e0:	2380      	movs	r3, #128	; 0x80
 800d2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2e6:	e06e      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a76      	ldr	r2, [pc, #472]	; (800d4c8 <UART_SetConfig+0x6a4>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d130      	bne.n	800d354 <UART_SetConfig+0x530>
 800d2f2:	4b73      	ldr	r3, [pc, #460]	; (800d4c0 <UART_SetConfig+0x69c>)
 800d2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b05      	cmp	r3, #5
 800d2fc:	d826      	bhi.n	800d34c <UART_SetConfig+0x528>
 800d2fe:	a201      	add	r2, pc, #4	; (adr r2, 800d304 <UART_SetConfig+0x4e0>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d31d 	.word	0x0800d31d
 800d308:	0800d325 	.word	0x0800d325
 800d30c:	0800d32d 	.word	0x0800d32d
 800d310:	0800d335 	.word	0x0800d335
 800d314:	0800d33d 	.word	0x0800d33d
 800d318:	0800d345 	.word	0x0800d345
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d322:	e050      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d324:	2304      	movs	r3, #4
 800d326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d32a:	e04c      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d32c:	2308      	movs	r3, #8
 800d32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d332:	e048      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d334:	2310      	movs	r3, #16
 800d336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d33a:	e044      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d33c:	2320      	movs	r3, #32
 800d33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d342:	e040      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d344:	2340      	movs	r3, #64	; 0x40
 800d346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d34a:	e03c      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d34c:	2380      	movs	r3, #128	; 0x80
 800d34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d352:	e038      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a5c      	ldr	r2, [pc, #368]	; (800d4cc <UART_SetConfig+0x6a8>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d130      	bne.n	800d3c0 <UART_SetConfig+0x59c>
 800d35e:	4b58      	ldr	r3, [pc, #352]	; (800d4c0 <UART_SetConfig+0x69c>)
 800d360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d362:	f003 0307 	and.w	r3, r3, #7
 800d366:	2b05      	cmp	r3, #5
 800d368:	d826      	bhi.n	800d3b8 <UART_SetConfig+0x594>
 800d36a:	a201      	add	r2, pc, #4	; (adr r2, 800d370 <UART_SetConfig+0x54c>)
 800d36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d370:	0800d389 	.word	0x0800d389
 800d374:	0800d391 	.word	0x0800d391
 800d378:	0800d399 	.word	0x0800d399
 800d37c:	0800d3a1 	.word	0x0800d3a1
 800d380:	0800d3a9 	.word	0x0800d3a9
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	2302      	movs	r3, #2
 800d38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d38e:	e01a      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d390:	2304      	movs	r3, #4
 800d392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d396:	e016      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d398:	2308      	movs	r3, #8
 800d39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d39e:	e012      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3a6:	e00e      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d3a8:	2320      	movs	r3, #32
 800d3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3ae:	e00a      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d3b0:	2340      	movs	r3, #64	; 0x40
 800d3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3b6:	e006      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d3b8:	2380      	movs	r3, #128	; 0x80
 800d3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3be:	e002      	b.n	800d3c6 <UART_SetConfig+0x5a2>
 800d3c0:	2380      	movs	r3, #128	; 0x80
 800d3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a40      	ldr	r2, [pc, #256]	; (800d4cc <UART_SetConfig+0x6a8>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	f040 80ef 	bne.w	800d5b0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d3d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3d6:	2b20      	cmp	r3, #32
 800d3d8:	dc46      	bgt.n	800d468 <UART_SetConfig+0x644>
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	f2c0 8081 	blt.w	800d4e2 <UART_SetConfig+0x6be>
 800d3e0:	3b02      	subs	r3, #2
 800d3e2:	2b1e      	cmp	r3, #30
 800d3e4:	d87d      	bhi.n	800d4e2 <UART_SetConfig+0x6be>
 800d3e6:	a201      	add	r2, pc, #4	; (adr r2, 800d3ec <UART_SetConfig+0x5c8>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d46f 	.word	0x0800d46f
 800d3f0:	0800d4e3 	.word	0x0800d4e3
 800d3f4:	0800d477 	.word	0x0800d477
 800d3f8:	0800d4e3 	.word	0x0800d4e3
 800d3fc:	0800d4e3 	.word	0x0800d4e3
 800d400:	0800d4e3 	.word	0x0800d4e3
 800d404:	0800d487 	.word	0x0800d487
 800d408:	0800d4e3 	.word	0x0800d4e3
 800d40c:	0800d4e3 	.word	0x0800d4e3
 800d410:	0800d4e3 	.word	0x0800d4e3
 800d414:	0800d4e3 	.word	0x0800d4e3
 800d418:	0800d4e3 	.word	0x0800d4e3
 800d41c:	0800d4e3 	.word	0x0800d4e3
 800d420:	0800d4e3 	.word	0x0800d4e3
 800d424:	0800d497 	.word	0x0800d497
 800d428:	0800d4e3 	.word	0x0800d4e3
 800d42c:	0800d4e3 	.word	0x0800d4e3
 800d430:	0800d4e3 	.word	0x0800d4e3
 800d434:	0800d4e3 	.word	0x0800d4e3
 800d438:	0800d4e3 	.word	0x0800d4e3
 800d43c:	0800d4e3 	.word	0x0800d4e3
 800d440:	0800d4e3 	.word	0x0800d4e3
 800d444:	0800d4e3 	.word	0x0800d4e3
 800d448:	0800d4e3 	.word	0x0800d4e3
 800d44c:	0800d4e3 	.word	0x0800d4e3
 800d450:	0800d4e3 	.word	0x0800d4e3
 800d454:	0800d4e3 	.word	0x0800d4e3
 800d458:	0800d4e3 	.word	0x0800d4e3
 800d45c:	0800d4e3 	.word	0x0800d4e3
 800d460:	0800d4e3 	.word	0x0800d4e3
 800d464:	0800d4d5 	.word	0x0800d4d5
 800d468:	2b40      	cmp	r3, #64	; 0x40
 800d46a:	d036      	beq.n	800d4da <UART_SetConfig+0x6b6>
 800d46c:	e039      	b.n	800d4e2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d46e:	f7fb fec9 	bl	8009204 <HAL_RCCEx_GetD3PCLK1Freq>
 800d472:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d474:	e03b      	b.n	800d4ee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d476:	f107 0314 	add.w	r3, r7, #20
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fb fed8 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d484:	e033      	b.n	800d4ee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d486:	f107 0308 	add.w	r3, r7, #8
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fc f824 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d494:	e02b      	b.n	800d4ee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d496:	4b0a      	ldr	r3, [pc, #40]	; (800d4c0 <UART_SetConfig+0x69c>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f003 0320 	and.w	r3, r3, #32
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d009      	beq.n	800d4b6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d4a2:	4b07      	ldr	r3, [pc, #28]	; (800d4c0 <UART_SetConfig+0x69c>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	08db      	lsrs	r3, r3, #3
 800d4a8:	f003 0303 	and.w	r3, r3, #3
 800d4ac:	4a08      	ldr	r2, [pc, #32]	; (800d4d0 <UART_SetConfig+0x6ac>)
 800d4ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d4b4:	e01b      	b.n	800d4ee <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d4b6:	4b06      	ldr	r3, [pc, #24]	; (800d4d0 <UART_SetConfig+0x6ac>)
 800d4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4ba:	e018      	b.n	800d4ee <UART_SetConfig+0x6ca>
 800d4bc:	40011400 	.word	0x40011400
 800d4c0:	58024400 	.word	0x58024400
 800d4c4:	40007800 	.word	0x40007800
 800d4c8:	40007c00 	.word	0x40007c00
 800d4cc:	58000c00 	.word	0x58000c00
 800d4d0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d4d4:	4bc4      	ldr	r3, [pc, #784]	; (800d7e8 <UART_SetConfig+0x9c4>)
 800d4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4d8:	e009      	b.n	800d4ee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4e0:	e005      	b.n	800d4ee <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d4ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f000 81da 	beq.w	800d8aa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fa:	4abc      	ldr	r2, [pc, #752]	; (800d7ec <UART_SetConfig+0x9c8>)
 800d4fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d500:	461a      	mov	r2, r3
 800d502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d504:	fbb3 f3f2 	udiv	r3, r3, r2
 800d508:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	4613      	mov	r3, r2
 800d510:	005b      	lsls	r3, r3, #1
 800d512:	4413      	add	r3, r2
 800d514:	6a3a      	ldr	r2, [r7, #32]
 800d516:	429a      	cmp	r2, r3
 800d518:	d305      	bcc.n	800d526 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d520:	6a3a      	ldr	r2, [r7, #32]
 800d522:	429a      	cmp	r2, r3
 800d524:	d903      	bls.n	800d52e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d52c:	e1bd      	b.n	800d8aa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d530:	4618      	mov	r0, r3
 800d532:	f04f 0100 	mov.w	r1, #0
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d53a:	4aac      	ldr	r2, [pc, #688]	; (800d7ec <UART_SetConfig+0x9c8>)
 800d53c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d540:	b29a      	uxth	r2, r3
 800d542:	f04f 0300 	mov.w	r3, #0
 800d546:	f7f2 fec7 	bl	80002d8 <__aeabi_uldivmod>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	4610      	mov	r0, r2
 800d550:	4619      	mov	r1, r3
 800d552:	f04f 0200 	mov.w	r2, #0
 800d556:	f04f 0300 	mov.w	r3, #0
 800d55a:	020b      	lsls	r3, r1, #8
 800d55c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d560:	0202      	lsls	r2, r0, #8
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	6849      	ldr	r1, [r1, #4]
 800d566:	0849      	lsrs	r1, r1, #1
 800d568:	4608      	mov	r0, r1
 800d56a:	f04f 0100 	mov.w	r1, #0
 800d56e:	1814      	adds	r4, r2, r0
 800d570:	eb43 0501 	adc.w	r5, r3, r1
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	461a      	mov	r2, r3
 800d57a:	f04f 0300 	mov.w	r3, #0
 800d57e:	4620      	mov	r0, r4
 800d580:	4629      	mov	r1, r5
 800d582:	f7f2 fea9 	bl	80002d8 <__aeabi_uldivmod>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	4613      	mov	r3, r2
 800d58c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d594:	d308      	bcc.n	800d5a8 <UART_SetConfig+0x784>
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d59c:	d204      	bcs.n	800d5a8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a4:	60da      	str	r2, [r3, #12]
 800d5a6:	e180      	b.n	800d8aa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d5ae:	e17c      	b.n	800d8aa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	69db      	ldr	r3, [r3, #28]
 800d5b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5b8:	f040 80bf 	bne.w	800d73a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d5bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d5c0:	2b20      	cmp	r3, #32
 800d5c2:	dc49      	bgt.n	800d658 <UART_SetConfig+0x834>
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	db7c      	blt.n	800d6c2 <UART_SetConfig+0x89e>
 800d5c8:	2b20      	cmp	r3, #32
 800d5ca:	d87a      	bhi.n	800d6c2 <UART_SetConfig+0x89e>
 800d5cc:	a201      	add	r2, pc, #4	; (adr r2, 800d5d4 <UART_SetConfig+0x7b0>)
 800d5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d2:	bf00      	nop
 800d5d4:	0800d65f 	.word	0x0800d65f
 800d5d8:	0800d667 	.word	0x0800d667
 800d5dc:	0800d6c3 	.word	0x0800d6c3
 800d5e0:	0800d6c3 	.word	0x0800d6c3
 800d5e4:	0800d66f 	.word	0x0800d66f
 800d5e8:	0800d6c3 	.word	0x0800d6c3
 800d5ec:	0800d6c3 	.word	0x0800d6c3
 800d5f0:	0800d6c3 	.word	0x0800d6c3
 800d5f4:	0800d67f 	.word	0x0800d67f
 800d5f8:	0800d6c3 	.word	0x0800d6c3
 800d5fc:	0800d6c3 	.word	0x0800d6c3
 800d600:	0800d6c3 	.word	0x0800d6c3
 800d604:	0800d6c3 	.word	0x0800d6c3
 800d608:	0800d6c3 	.word	0x0800d6c3
 800d60c:	0800d6c3 	.word	0x0800d6c3
 800d610:	0800d6c3 	.word	0x0800d6c3
 800d614:	0800d68f 	.word	0x0800d68f
 800d618:	0800d6c3 	.word	0x0800d6c3
 800d61c:	0800d6c3 	.word	0x0800d6c3
 800d620:	0800d6c3 	.word	0x0800d6c3
 800d624:	0800d6c3 	.word	0x0800d6c3
 800d628:	0800d6c3 	.word	0x0800d6c3
 800d62c:	0800d6c3 	.word	0x0800d6c3
 800d630:	0800d6c3 	.word	0x0800d6c3
 800d634:	0800d6c3 	.word	0x0800d6c3
 800d638:	0800d6c3 	.word	0x0800d6c3
 800d63c:	0800d6c3 	.word	0x0800d6c3
 800d640:	0800d6c3 	.word	0x0800d6c3
 800d644:	0800d6c3 	.word	0x0800d6c3
 800d648:	0800d6c3 	.word	0x0800d6c3
 800d64c:	0800d6c3 	.word	0x0800d6c3
 800d650:	0800d6c3 	.word	0x0800d6c3
 800d654:	0800d6b5 	.word	0x0800d6b5
 800d658:	2b40      	cmp	r3, #64	; 0x40
 800d65a:	d02e      	beq.n	800d6ba <UART_SetConfig+0x896>
 800d65c:	e031      	b.n	800d6c2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d65e:	f7fa f951 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 800d662:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d664:	e033      	b.n	800d6ce <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d666:	f7fa f963 	bl	8007930 <HAL_RCC_GetPCLK2Freq>
 800d66a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d66c:	e02f      	b.n	800d6ce <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d66e:	f107 0314 	add.w	r3, r7, #20
 800d672:	4618      	mov	r0, r3
 800d674:	f7fb fddc 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d67c:	e027      	b.n	800d6ce <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d67e:	f107 0308 	add.w	r3, r7, #8
 800d682:	4618      	mov	r0, r3
 800d684:	f7fb ff28 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d68c:	e01f      	b.n	800d6ce <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d68e:	4b58      	ldr	r3, [pc, #352]	; (800d7f0 <UART_SetConfig+0x9cc>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f003 0320 	and.w	r3, r3, #32
 800d696:	2b00      	cmp	r3, #0
 800d698:	d009      	beq.n	800d6ae <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d69a:	4b55      	ldr	r3, [pc, #340]	; (800d7f0 <UART_SetConfig+0x9cc>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	08db      	lsrs	r3, r3, #3
 800d6a0:	f003 0303 	and.w	r3, r3, #3
 800d6a4:	4a53      	ldr	r2, [pc, #332]	; (800d7f4 <UART_SetConfig+0x9d0>)
 800d6a6:	fa22 f303 	lsr.w	r3, r2, r3
 800d6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d6ac:	e00f      	b.n	800d6ce <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d6ae:	4b51      	ldr	r3, [pc, #324]	; (800d7f4 <UART_SetConfig+0x9d0>)
 800d6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d6b2:	e00c      	b.n	800d6ce <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d6b4:	4b4c      	ldr	r3, [pc, #304]	; (800d7e8 <UART_SetConfig+0x9c4>)
 800d6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d6b8:	e009      	b.n	800d6ce <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d6c0:	e005      	b.n	800d6ce <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d6cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f000 80ea 	beq.w	800d8aa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6da:	4a44      	ldr	r2, [pc, #272]	; (800d7ec <UART_SetConfig+0x9c8>)
 800d6dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6e8:	005a      	lsls	r2, r3, #1
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	085b      	lsrs	r3, r3, #1
 800d6f0:	441a      	add	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	2b0f      	cmp	r3, #15
 800d702:	d916      	bls.n	800d732 <UART_SetConfig+0x90e>
 800d704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d70a:	d212      	bcs.n	800d732 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70e:	b29b      	uxth	r3, r3
 800d710:	f023 030f 	bic.w	r3, r3, #15
 800d714:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d718:	085b      	lsrs	r3, r3, #1
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	f003 0307 	and.w	r3, r3, #7
 800d720:	b29a      	uxth	r2, r3
 800d722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d724:	4313      	orrs	r3, r2
 800d726:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d72e:	60da      	str	r2, [r3, #12]
 800d730:	e0bb      	b.n	800d8aa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d738:	e0b7      	b.n	800d8aa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d73a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d73e:	2b20      	cmp	r3, #32
 800d740:	dc4a      	bgt.n	800d7d8 <UART_SetConfig+0x9b4>
 800d742:	2b00      	cmp	r3, #0
 800d744:	f2c0 8086 	blt.w	800d854 <UART_SetConfig+0xa30>
 800d748:	2b20      	cmp	r3, #32
 800d74a:	f200 8083 	bhi.w	800d854 <UART_SetConfig+0xa30>
 800d74e:	a201      	add	r2, pc, #4	; (adr r2, 800d754 <UART_SetConfig+0x930>)
 800d750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d754:	0800d7df 	.word	0x0800d7df
 800d758:	0800d7f9 	.word	0x0800d7f9
 800d75c:	0800d855 	.word	0x0800d855
 800d760:	0800d855 	.word	0x0800d855
 800d764:	0800d801 	.word	0x0800d801
 800d768:	0800d855 	.word	0x0800d855
 800d76c:	0800d855 	.word	0x0800d855
 800d770:	0800d855 	.word	0x0800d855
 800d774:	0800d811 	.word	0x0800d811
 800d778:	0800d855 	.word	0x0800d855
 800d77c:	0800d855 	.word	0x0800d855
 800d780:	0800d855 	.word	0x0800d855
 800d784:	0800d855 	.word	0x0800d855
 800d788:	0800d855 	.word	0x0800d855
 800d78c:	0800d855 	.word	0x0800d855
 800d790:	0800d855 	.word	0x0800d855
 800d794:	0800d821 	.word	0x0800d821
 800d798:	0800d855 	.word	0x0800d855
 800d79c:	0800d855 	.word	0x0800d855
 800d7a0:	0800d855 	.word	0x0800d855
 800d7a4:	0800d855 	.word	0x0800d855
 800d7a8:	0800d855 	.word	0x0800d855
 800d7ac:	0800d855 	.word	0x0800d855
 800d7b0:	0800d855 	.word	0x0800d855
 800d7b4:	0800d855 	.word	0x0800d855
 800d7b8:	0800d855 	.word	0x0800d855
 800d7bc:	0800d855 	.word	0x0800d855
 800d7c0:	0800d855 	.word	0x0800d855
 800d7c4:	0800d855 	.word	0x0800d855
 800d7c8:	0800d855 	.word	0x0800d855
 800d7cc:	0800d855 	.word	0x0800d855
 800d7d0:	0800d855 	.word	0x0800d855
 800d7d4:	0800d847 	.word	0x0800d847
 800d7d8:	2b40      	cmp	r3, #64	; 0x40
 800d7da:	d037      	beq.n	800d84c <UART_SetConfig+0xa28>
 800d7dc:	e03a      	b.n	800d854 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7de:	f7fa f891 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 800d7e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d7e4:	e03c      	b.n	800d860 <UART_SetConfig+0xa3c>
 800d7e6:	bf00      	nop
 800d7e8:	003d0900 	.word	0x003d0900
 800d7ec:	08012c18 	.word	0x08012c18
 800d7f0:	58024400 	.word	0x58024400
 800d7f4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7f8:	f7fa f89a 	bl	8007930 <HAL_RCC_GetPCLK2Freq>
 800d7fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d7fe:	e02f      	b.n	800d860 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d800:	f107 0314 	add.w	r3, r7, #20
 800d804:	4618      	mov	r0, r3
 800d806:	f7fb fd13 	bl	8009230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d80a:	69bb      	ldr	r3, [r7, #24]
 800d80c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d80e:	e027      	b.n	800d860 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d810:	f107 0308 	add.w	r3, r7, #8
 800d814:	4618      	mov	r0, r3
 800d816:	f7fb fe5f 	bl	80094d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d81e:	e01f      	b.n	800d860 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d820:	4b2c      	ldr	r3, [pc, #176]	; (800d8d4 <UART_SetConfig+0xab0>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f003 0320 	and.w	r3, r3, #32
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d009      	beq.n	800d840 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d82c:	4b29      	ldr	r3, [pc, #164]	; (800d8d4 <UART_SetConfig+0xab0>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	08db      	lsrs	r3, r3, #3
 800d832:	f003 0303 	and.w	r3, r3, #3
 800d836:	4a28      	ldr	r2, [pc, #160]	; (800d8d8 <UART_SetConfig+0xab4>)
 800d838:	fa22 f303 	lsr.w	r3, r2, r3
 800d83c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d83e:	e00f      	b.n	800d860 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d840:	4b25      	ldr	r3, [pc, #148]	; (800d8d8 <UART_SetConfig+0xab4>)
 800d842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d844:	e00c      	b.n	800d860 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d846:	4b25      	ldr	r3, [pc, #148]	; (800d8dc <UART_SetConfig+0xab8>)
 800d848:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d84a:	e009      	b.n	800d860 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d84c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d852:	e005      	b.n	800d860 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d854:	2300      	movs	r3, #0
 800d856:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d85e:	bf00      	nop
    }

    if (pclk != 0U)
 800d860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d862:	2b00      	cmp	r3, #0
 800d864:	d021      	beq.n	800d8aa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86a:	4a1d      	ldr	r2, [pc, #116]	; (800d8e0 <UART_SetConfig+0xabc>)
 800d86c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d870:	461a      	mov	r2, r3
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	fbb3 f2f2 	udiv	r2, r3, r2
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	085b      	lsrs	r3, r3, #1
 800d87e:	441a      	add	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	fbb2 f3f3 	udiv	r3, r2, r3
 800d888:	b29b      	uxth	r3, r3
 800d88a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88e:	2b0f      	cmp	r3, #15
 800d890:	d908      	bls.n	800d8a4 <UART_SetConfig+0xa80>
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d898:	d204      	bcs.n	800d8a4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8a0:	60da      	str	r2, [r3, #12]
 800d8a2:	e002      	b.n	800d8aa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d8c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3738      	adds	r7, #56	; 0x38
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bdb0      	pop	{r4, r5, r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	58024400 	.word	0x58024400
 800d8d8:	03d09000 	.word	0x03d09000
 800d8dc:	003d0900 	.word	0x003d0900
 800d8e0:	08012c18 	.word	0x08012c18

0800d8e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f0:	f003 0301 	and.w	r3, r3, #1
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d00a      	beq.n	800d90e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	430a      	orrs	r2, r1
 800d90c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d912:	f003 0302 	and.w	r3, r3, #2
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00a      	beq.n	800d930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	430a      	orrs	r2, r1
 800d92e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d934:	f003 0304 	and.w	r3, r3, #4
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00a      	beq.n	800d952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	430a      	orrs	r2, r1
 800d950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d956:	f003 0308 	and.w	r3, r3, #8
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00a      	beq.n	800d974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	430a      	orrs	r2, r1
 800d972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d978:	f003 0310 	and.w	r3, r3, #16
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00a      	beq.n	800d996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	430a      	orrs	r2, r1
 800d994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99a:	f003 0320 	and.w	r3, r3, #32
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00a      	beq.n	800d9b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	430a      	orrs	r2, r1
 800d9b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d01a      	beq.n	800d9fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	430a      	orrs	r2, r1
 800d9d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9e2:	d10a      	bne.n	800d9fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	430a      	orrs	r2, r1
 800d9f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00a      	beq.n	800da1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	430a      	orrs	r2, r1
 800da1a:	605a      	str	r2, [r3, #4]
  }
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af02      	add	r7, sp, #8
 800da2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da38:	f7f4 f810 	bl	8001a5c <HAL_GetTick>
 800da3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f003 0308 	and.w	r3, r3, #8
 800da48:	2b08      	cmp	r3, #8
 800da4a:	d10e      	bne.n	800da6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800da50:	9300      	str	r3, [sp, #0]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2200      	movs	r2, #0
 800da56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f82f 	bl	800dabe <UART_WaitOnFlagUntilTimeout>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da66:	2303      	movs	r3, #3
 800da68:	e025      	b.n	800dab6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 0304 	and.w	r3, r3, #4
 800da74:	2b04      	cmp	r3, #4
 800da76:	d10e      	bne.n	800da96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 f819 	bl	800dabe <UART_WaitOnFlagUntilTimeout>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da92:	2303      	movs	r3, #3
 800da94:	e00f      	b.n	800dab6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2220      	movs	r2, #32
 800da9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2220      	movs	r2, #32
 800daa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3710      	adds	r7, #16
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b084      	sub	sp, #16
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	60f8      	str	r0, [r7, #12]
 800dac6:	60b9      	str	r1, [r7, #8]
 800dac8:	603b      	str	r3, [r7, #0]
 800daca:	4613      	mov	r3, r2
 800dacc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dace:	e062      	b.n	800db96 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad6:	d05e      	beq.n	800db96 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dad8:	f7f3 ffc0 	bl	8001a5c <HAL_GetTick>
 800dadc:	4602      	mov	r2, r0
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	69ba      	ldr	r2, [r7, #24]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d302      	bcc.n	800daee <UART_WaitOnFlagUntilTimeout+0x30>
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d11d      	bne.n	800db2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dafc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	689a      	ldr	r2, [r3, #8]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f022 0201 	bic.w	r2, r2, #1
 800db0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2220      	movs	r2, #32
 800db12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2220      	movs	r2, #32
 800db1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2200      	movs	r2, #0
 800db22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800db26:	2303      	movs	r3, #3
 800db28:	e045      	b.n	800dbb6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f003 0304 	and.w	r3, r3, #4
 800db34:	2b00      	cmp	r3, #0
 800db36:	d02e      	beq.n	800db96 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	69db      	ldr	r3, [r3, #28]
 800db3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db46:	d126      	bne.n	800db96 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800db60:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	689a      	ldr	r2, [r3, #8]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f022 0201 	bic.w	r2, r2, #1
 800db70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2220      	movs	r2, #32
 800db76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2220      	movs	r2, #32
 800db7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2220      	movs	r2, #32
 800db86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800db92:	2303      	movs	r3, #3
 800db94:	e00f      	b.n	800dbb6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	69da      	ldr	r2, [r3, #28]
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	4013      	ands	r3, r2
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	bf0c      	ite	eq
 800dba6:	2301      	moveq	r3, #1
 800dba8:	2300      	movne	r3, #0
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	461a      	mov	r2, r3
 800dbae:	79fb      	ldrb	r3, [r7, #7]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d08d      	beq.n	800dad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
	...

0800dbc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dbd6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6899      	ldr	r1, [r3, #8]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	4b0f      	ldr	r3, [pc, #60]	; (800dc20 <UART_EndRxTransfer+0x60>)
 800dbe4:	400b      	ands	r3, r1
 800dbe6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d107      	bne.n	800dc00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f022 0210 	bic.w	r2, r2, #16
 800dbfe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2220      	movs	r2, #32
 800dc04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	671a      	str	r2, [r3, #112]	; 0x70
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	effffffe 	.word	0xeffffffe

0800dc24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f7ff f8d8 	bl	800cdf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc48:	bf00      	nop
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc66:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2220      	movs	r2, #32
 800dc6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7ff f8b4 	bl	800cde4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc7c:	bf00      	nop
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc8c:	bf00      	nop
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dca0:	bf00      	nop
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dcb4:	bf00      	nop
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d101      	bne.n	800dcd6 <HAL_UARTEx_DisableFifoMode+0x16>
 800dcd2:	2302      	movs	r3, #2
 800dcd4:	e027      	b.n	800dd26 <HAL_UARTEx_DisableFifoMode+0x66>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2224      	movs	r2, #36	; 0x24
 800dce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f022 0201 	bic.w	r2, r2, #1
 800dcfc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dd04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2220      	movs	r2, #32
 800dd18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b084      	sub	sp, #16
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
 800dd3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d101      	bne.n	800dd4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd46:	2302      	movs	r3, #2
 800dd48:	e02d      	b.n	800dda6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2224      	movs	r2, #36	; 0x24
 800dd56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f022 0201 	bic.w	r2, r2, #1
 800dd70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	683a      	ldr	r2, [r7, #0]
 800dd82:	430a      	orrs	r2, r1
 800dd84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f850 	bl	800de2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2220      	movs	r2, #32
 800dd98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b084      	sub	sp, #16
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
 800ddb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d101      	bne.n	800ddc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddc2:	2302      	movs	r3, #2
 800ddc4:	e02d      	b.n	800de22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2224      	movs	r2, #36	; 0x24
 800ddd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f022 0201 	bic.w	r2, r2, #1
 800ddec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	430a      	orrs	r2, r1
 800de00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f812 	bl	800de2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2220      	movs	r2, #32
 800de14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
	...

0800de2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d108      	bne.n	800de4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2201      	movs	r2, #1
 800de48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de4c:	e031      	b.n	800deb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de4e:	2310      	movs	r3, #16
 800de50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de52:	2310      	movs	r3, #16
 800de54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	0e5b      	lsrs	r3, r3, #25
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	f003 0307 	and.w	r3, r3, #7
 800de64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	0f5b      	lsrs	r3, r3, #29
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	f003 0307 	and.w	r3, r3, #7
 800de74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de76:	7bbb      	ldrb	r3, [r7, #14]
 800de78:	7b3a      	ldrb	r2, [r7, #12]
 800de7a:	4911      	ldr	r1, [pc, #68]	; (800dec0 <UARTEx_SetNbDataToProcess+0x94>)
 800de7c:	5c8a      	ldrb	r2, [r1, r2]
 800de7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de82:	7b3a      	ldrb	r2, [r7, #12]
 800de84:	490f      	ldr	r1, [pc, #60]	; (800dec4 <UARTEx_SetNbDataToProcess+0x98>)
 800de86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de88:	fb93 f3f2 	sdiv	r3, r3, r2
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de94:	7bfb      	ldrb	r3, [r7, #15]
 800de96:	7b7a      	ldrb	r2, [r7, #13]
 800de98:	4909      	ldr	r1, [pc, #36]	; (800dec0 <UARTEx_SetNbDataToProcess+0x94>)
 800de9a:	5c8a      	ldrb	r2, [r1, r2]
 800de9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dea0:	7b7a      	ldrb	r2, [r7, #13]
 800dea2:	4908      	ldr	r1, [pc, #32]	; (800dec4 <UARTEx_SetNbDataToProcess+0x98>)
 800dea4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dea6:	fb93 f3f2 	sdiv	r3, r3, r2
 800deaa:	b29a      	uxth	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800deb2:	bf00      	nop
 800deb4:	3714      	adds	r7, #20
 800deb6:	46bd      	mov	sp, r7
 800deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	08012c30 	.word	0x08012c30
 800dec4:	08012c38 	.word	0x08012c38

0800dec8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dec8:	b084      	sub	sp, #16
 800deca:	b480      	push	{r7}
 800decc:	b085      	sub	sp, #20
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
 800ded2:	f107 001c 	add.w	r0, r7, #28
 800ded6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800deda:	2300      	movs	r3, #0
 800dedc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dede:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800dee0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800dee2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800dee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800dee6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800dee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800deea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800deec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800deee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	4313      	orrs	r3, r2
 800def4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	685a      	ldr	r2, [r3, #4]
 800defa:	4b07      	ldr	r3, [pc, #28]	; (800df18 <SDMMC_Init+0x50>)
 800defc:	4013      	ands	r3, r2
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	431a      	orrs	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3714      	adds	r7, #20
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	b004      	add	sp, #16
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	ffc02c00 	.word	0xffc02c00

0800df1c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	370c      	adds	r7, #12
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr

0800df36 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800df36:	b480      	push	{r7}
 800df38:	b083      	sub	sp, #12
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
 800df3e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f043 0203 	orr.w	r2, r3, #3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	370c      	adds	r7, #12
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b083      	sub	sp, #12
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 0303 	and.w	r3, r3, #3
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	370c      	adds	r7, #12
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
	...

0800df98 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dfb6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800dfbc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800dfc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	68da      	ldr	r2, [r3, #12]
 800dfce:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <SDMMC_SendCommand+0x50>)
 800dfd0:	4013      	ands	r3, r2
 800dfd2:	68fa      	ldr	r2, [r7, #12]
 800dfd4:	431a      	orrs	r2, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3714      	adds	r7, #20
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	fffee0c0 	.word	0xfffee0c0

0800dfec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	b2db      	uxtb	r3, r3
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e006:	b480      	push	{r7}
 800e008:	b085      	sub	sp, #20
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	3314      	adds	r3, #20
 800e014:	461a      	mov	r2, r3
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	4413      	add	r3, r2
 800e01a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e052:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e058:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e05e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	4313      	orrs	r3, r2
 800e064:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	431a      	orrs	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e076:	2300      	movs	r3, #0

}
 800e078:	4618      	mov	r0, r3
 800e07a:	3714      	adds	r7, #20
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e092:	2310      	movs	r3, #16
 800e094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e09a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e09c:	2300      	movs	r3, #0
 800e09e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0a6:	f107 0308 	add.w	r3, r7, #8
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7ff ff73 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e0b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0b6:	2110      	movs	r1, #16
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 fa5f 	bl	800e57c <SDMMC_GetCmdResp1>
 800e0be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0c0:	69fb      	ldr	r3, [r7, #28]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3720      	adds	r7, #32
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b088      	sub	sp, #32
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
 800e0d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e0d8:	2311      	movs	r3, #17
 800e0da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0ec:	f107 0308 	add.w	r3, r7, #8
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7ff ff50 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e0f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0fc:	2111      	movs	r1, #17
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fa3c 	bl	800e57c <SDMMC_GetCmdResp1>
 800e104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e106:	69fb      	ldr	r3, [r7, #28]
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3720      	adds	r7, #32
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b088      	sub	sp, #32
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e11e:	2312      	movs	r3, #18
 800e120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e122:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e128:	2300      	movs	r3, #0
 800e12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e12c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e132:	f107 0308 	add.w	r3, r7, #8
 800e136:	4619      	mov	r1, r3
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7ff ff2d 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e142:	2112      	movs	r1, #18
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fa19 	bl	800e57c <SDMMC_GetCmdResp1>
 800e14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e14c:	69fb      	ldr	r3, [r7, #28]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3720      	adds	r7, #32
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b088      	sub	sp, #32
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e164:	2318      	movs	r3, #24
 800e166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e16c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e16e:	2300      	movs	r3, #0
 800e170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e176:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e178:	f107 0308 	add.w	r3, r7, #8
 800e17c:	4619      	mov	r1, r3
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7ff ff0a 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e184:	f241 3288 	movw	r2, #5000	; 0x1388
 800e188:	2118      	movs	r1, #24
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f9f6 	bl	800e57c <SDMMC_GetCmdResp1>
 800e190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e192:	69fb      	ldr	r3, [r7, #28]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3720      	adds	r7, #32
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b088      	sub	sp, #32
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e1aa:	2319      	movs	r3, #25
 800e1ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1be:	f107 0308 	add.w	r3, r7, #8
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f7ff fee7 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e1ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1ce:	2119      	movs	r1, #25
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 f9d3 	bl	800e57c <SDMMC_GetCmdResp1>
 800e1d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1d8:	69fb      	ldr	r3, [r7, #28]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3720      	adds	r7, #32
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
	...

0800e1e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e1f0:	230c      	movs	r3, #12
 800e1f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e202:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e21c:	f107 0308 	add.w	r3, r7, #8
 800e220:	4619      	mov	r1, r3
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7ff feb8 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e228:	4a0b      	ldr	r2, [pc, #44]	; (800e258 <SDMMC_CmdStopTransfer+0x74>)
 800e22a:	210c      	movs	r1, #12
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 f9a5 	bl	800e57c <SDMMC_GetCmdResp1>
 800e232:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e246:	d101      	bne.n	800e24c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e248:	2300      	movs	r3, #0
 800e24a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e24c:	69fb      	ldr	r3, [r7, #28]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3720      	adds	r7, #32
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	05f5e100 	.word	0x05f5e100

0800e25c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b088      	sub	sp, #32
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e26a:	2307      	movs	r3, #7
 800e26c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e26e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e274:	2300      	movs	r3, #0
 800e276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e27c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e27e:	f107 0308 	add.w	r3, r7, #8
 800e282:	4619      	mov	r1, r3
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff fe87 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e28e:	2107      	movs	r1, #7
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 f973 	bl	800e57c <SDMMC_GetCmdResp1>
 800e296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e298:	69fb      	ldr	r3, [r7, #28]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3720      	adds	r7, #32
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b088      	sub	sp, #32
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2c0:	f107 0308 	add.w	r3, r7, #8
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff fe66 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 fb97 	bl	800ea00 <SDMMC_GetCmdError>
 800e2d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2d4:	69fb      	ldr	r3, [r7, #28]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3720      	adds	r7, #32
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b088      	sub	sp, #32
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e2e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e2ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e2ec:	2308      	movs	r3, #8
 800e2ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e300:	f107 0308 	add.w	r3, r7, #8
 800e304:	4619      	mov	r1, r3
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7ff fe46 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 fb29 	bl	800e964 <SDMMC_GetCmdResp7>
 800e312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e314:	69fb      	ldr	r3, [r7, #28]
}
 800e316:	4618      	mov	r0, r3
 800e318:	3720      	adds	r7, #32
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b088      	sub	sp, #32
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
 800e326:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e32c:	2337      	movs	r3, #55	; 0x37
 800e32e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e330:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e336:	2300      	movs	r3, #0
 800e338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e33a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e33e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e340:	f107 0308 	add.w	r3, r7, #8
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7ff fe26 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e34c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e350:	2137      	movs	r1, #55	; 0x37
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 f912 	bl	800e57c <SDMMC_GetCmdResp1>
 800e358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e35a:	69fb      	ldr	r3, [r7, #28]
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3720      	adds	r7, #32
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b088      	sub	sp, #32
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e372:	2329      	movs	r3, #41	; 0x29
 800e374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e37a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e37c:	2300      	movs	r3, #0
 800e37e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e384:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e386:	f107 0308 	add.w	r3, r7, #8
 800e38a:	4619      	mov	r1, r3
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7ff fe03 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 fa2e 	bl	800e7f4 <SDMMC_GetCmdResp3>
 800e398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e39a:	69fb      	ldr	r3, [r7, #28]
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3720      	adds	r7, #32
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b088      	sub	sp, #32
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e3b2:	2306      	movs	r3, #6
 800e3b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3c6:	f107 0308 	add.w	r3, r7, #8
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7ff fde3 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e3d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3d6:	2106      	movs	r1, #6
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 f8cf 	bl	800e57c <SDMMC_GetCmdResp1>
 800e3de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3e0:	69fb      	ldr	r3, [r7, #28]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3720      	adds	r7, #32
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b088      	sub	sp, #32
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e3f6:	2333      	movs	r3, #51	; 0x33
 800e3f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e400:	2300      	movs	r3, #0
 800e402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e40a:	f107 0308 	add.w	r3, r7, #8
 800e40e:	4619      	mov	r1, r3
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7ff fdc1 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e416:	f241 3288 	movw	r2, #5000	; 0x1388
 800e41a:	2133      	movs	r1, #51	; 0x33
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 f8ad 	bl	800e57c <SDMMC_GetCmdResp1>
 800e422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e424:	69fb      	ldr	r3, [r7, #28]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3720      	adds	r7, #32
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b088      	sub	sp, #32
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e43a:	2302      	movs	r3, #2
 800e43c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e43e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e444:	2300      	movs	r3, #0
 800e446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e44c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e44e:	f107 0308 	add.w	r3, r7, #8
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff fd9f 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f980 	bl	800e760 <SDMMC_GetCmdResp2>
 800e460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e462:	69fb      	ldr	r3, [r7, #28]
}
 800e464:	4618      	mov	r0, r3
 800e466:	3720      	adds	r7, #32
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b088      	sub	sp, #32
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e47a:	2309      	movs	r3, #9
 800e47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e47e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e484:	2300      	movs	r3, #0
 800e486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e48c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e48e:	f107 0308 	add.w	r3, r7, #8
 800e492:	4619      	mov	r1, r3
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7ff fd7f 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f960 	bl	800e760 <SDMMC_GetCmdResp2>
 800e4a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4a2:	69fb      	ldr	r3, [r7, #28]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3720      	adds	r7, #32
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b088      	sub	sp, #32
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e4ba:	2303      	movs	r3, #3
 800e4bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4ce:	f107 0308 	add.w	r3, r7, #8
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f7ff fd5f 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e4da:	683a      	ldr	r2, [r7, #0]
 800e4dc:	2103      	movs	r1, #3
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 f9c8 	bl	800e874 <SDMMC_GetCmdResp6>
 800e4e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4e6:	69fb      	ldr	r3, [r7, #28]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3720      	adds	r7, #32
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b088      	sub	sp, #32
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e4fe:	230d      	movs	r3, #13
 800e500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e502:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e508:	2300      	movs	r3, #0
 800e50a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e50c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e510:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e512:	f107 0308 	add.w	r3, r7, #8
 800e516:	4619      	mov	r1, r3
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7ff fd3d 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e51e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e522:	210d      	movs	r1, #13
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 f829 	bl	800e57c <SDMMC_GetCmdResp1>
 800e52a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e52c:	69fb      	ldr	r3, [r7, #28]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3720      	adds	r7, #32
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b088      	sub	sp, #32
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e53e:	2300      	movs	r3, #0
 800e540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e542:	230d      	movs	r3, #13
 800e544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e54a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e54c:	2300      	movs	r3, #0
 800e54e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e554:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e556:	f107 0308 	add.w	r3, r7, #8
 800e55a:	4619      	mov	r1, r3
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7ff fd1b 	bl	800df98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e562:	f241 3288 	movw	r2, #5000	; 0x1388
 800e566:	210d      	movs	r1, #13
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 f807 	bl	800e57c <SDMMC_GetCmdResp1>
 800e56e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e570:	69fb      	ldr	r3, [r7, #28]
}
 800e572:	4618      	mov	r0, r3
 800e574:	3720      	adds	r7, #32
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
	...

0800e57c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	460b      	mov	r3, r1
 800e586:	607a      	str	r2, [r7, #4]
 800e588:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e58a:	4b70      	ldr	r3, [pc, #448]	; (800e74c <SDMMC_GetCmdResp1+0x1d0>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4a70      	ldr	r2, [pc, #448]	; (800e750 <SDMMC_GetCmdResp1+0x1d4>)
 800e590:	fba2 2303 	umull	r2, r3, r2, r3
 800e594:	0a5a      	lsrs	r2, r3, #9
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	fb02 f303 	mul.w	r3, r2, r3
 800e59c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	1e5a      	subs	r2, r3, #1
 800e5a2:	61fa      	str	r2, [r7, #28]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d102      	bne.n	800e5ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e5a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5ac:	e0c9      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e5b4:	69ba      	ldr	r2, [r7, #24]
 800e5b6:	4b67      	ldr	r3, [pc, #412]	; (800e754 <SDMMC_GetCmdResp1+0x1d8>)
 800e5b8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d0ef      	beq.n	800e59e <SDMMC_GetCmdResp1+0x22>
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1ea      	bne.n	800e59e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5cc:	f003 0304 	and.w	r3, r3, #4
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d004      	beq.n	800e5de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2204      	movs	r2, #4
 800e5d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5da:	2304      	movs	r3, #4
 800e5dc:	e0b1      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e2:	f003 0301 	and.w	r3, r3, #1
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d004      	beq.n	800e5f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e0a6      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	4a58      	ldr	r2, [pc, #352]	; (800e758 <SDMMC_GetCmdResp1+0x1dc>)
 800e5f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f7ff fcf6 	bl	800dfec <SDMMC_GetCommandResponse>
 800e600:	4603      	mov	r3, r0
 800e602:	461a      	mov	r2, r3
 800e604:	7afb      	ldrb	r3, [r7, #11]
 800e606:	4293      	cmp	r3, r2
 800e608:	d001      	beq.n	800e60e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e60a:	2301      	movs	r3, #1
 800e60c:	e099      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e60e:	2100      	movs	r1, #0
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f7ff fcf8 	bl	800e006 <SDMMC_GetResponse>
 800e616:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	4b50      	ldr	r3, [pc, #320]	; (800e75c <SDMMC_GetCmdResp1+0x1e0>)
 800e61c:	4013      	ands	r3, r2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e622:	2300      	movs	r3, #0
 800e624:	e08d      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	da02      	bge.n	800e632 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e62c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e630:	e087      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d001      	beq.n	800e640 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e63c:	2340      	movs	r3, #64	; 0x40
 800e63e:	e080      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e646:	2b00      	cmp	r3, #0
 800e648:	d001      	beq.n	800e64e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e64a:	2380      	movs	r3, #128	; 0x80
 800e64c:	e079      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e654:	2b00      	cmp	r3, #0
 800e656:	d002      	beq.n	800e65e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e65c:	e071      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e664:	2b00      	cmp	r3, #0
 800e666:	d002      	beq.n	800e66e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e66c:	e069      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e674:	2b00      	cmp	r3, #0
 800e676:	d002      	beq.n	800e67e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e67c:	e061      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e684:	2b00      	cmp	r3, #0
 800e686:	d002      	beq.n	800e68e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e68c:	e059      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e694:	2b00      	cmp	r3, #0
 800e696:	d002      	beq.n	800e69e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e69c:	e051      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d002      	beq.n	800e6ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e6a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e6ac:	e049      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d002      	beq.n	800e6be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e6b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e6bc:	e041      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d002      	beq.n	800e6ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e6c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6cc:	e039      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d002      	beq.n	800e6de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e6d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e6dc:	e031      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d002      	beq.n	800e6ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e6e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e6ec:	e029      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d002      	beq.n	800e6fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e6f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e6fc:	e021      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d002      	beq.n	800e70e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e708:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e70c:	e019      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e714:	2b00      	cmp	r3, #0
 800e716:	d002      	beq.n	800e71e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e71c:	e011      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e724:	2b00      	cmp	r3, #0
 800e726:	d002      	beq.n	800e72e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e728:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e72c:	e009      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	f003 0308 	and.w	r3, r3, #8
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e738:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e73c:	e001      	b.n	800e742 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e73e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e742:	4618      	mov	r0, r3
 800e744:	3720      	adds	r7, #32
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	24000000 	.word	0x24000000
 800e750:	10624dd3 	.word	0x10624dd3
 800e754:	00200045 	.word	0x00200045
 800e758:	002000c5 	.word	0x002000c5
 800e75c:	fdffe008 	.word	0xfdffe008

0800e760 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e760:	b480      	push	{r7}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e768:	4b1f      	ldr	r3, [pc, #124]	; (800e7e8 <SDMMC_GetCmdResp2+0x88>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a1f      	ldr	r2, [pc, #124]	; (800e7ec <SDMMC_GetCmdResp2+0x8c>)
 800e76e:	fba2 2303 	umull	r2, r3, r2, r3
 800e772:	0a5b      	lsrs	r3, r3, #9
 800e774:	f241 3288 	movw	r2, #5000	; 0x1388
 800e778:	fb02 f303 	mul.w	r3, r2, r3
 800e77c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	1e5a      	subs	r2, r3, #1
 800e782:	60fa      	str	r2, [r7, #12]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d102      	bne.n	800e78e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e788:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e78c:	e026      	b.n	800e7dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e792:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d0ef      	beq.n	800e77e <SDMMC_GetCmdResp2+0x1e>
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1ea      	bne.n	800e77e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ac:	f003 0304 	and.w	r3, r3, #4
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d004      	beq.n	800e7be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2204      	movs	r2, #4
 800e7b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7ba:	2304      	movs	r3, #4
 800e7bc:	e00e      	b.n	800e7dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c2:	f003 0301 	and.w	r3, r3, #1
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d004      	beq.n	800e7d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e003      	b.n	800e7dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	4a06      	ldr	r2, [pc, #24]	; (800e7f0 <SDMMC_GetCmdResp2+0x90>)
 800e7d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e7da:	2300      	movs	r3, #0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3714      	adds	r7, #20
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr
 800e7e8:	24000000 	.word	0x24000000
 800e7ec:	10624dd3 	.word	0x10624dd3
 800e7f0:	002000c5 	.word	0x002000c5

0800e7f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e7fc:	4b1a      	ldr	r3, [pc, #104]	; (800e868 <SDMMC_GetCmdResp3+0x74>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4a1a      	ldr	r2, [pc, #104]	; (800e86c <SDMMC_GetCmdResp3+0x78>)
 800e802:	fba2 2303 	umull	r2, r3, r2, r3
 800e806:	0a5b      	lsrs	r3, r3, #9
 800e808:	f241 3288 	movw	r2, #5000	; 0x1388
 800e80c:	fb02 f303 	mul.w	r3, r2, r3
 800e810:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	1e5a      	subs	r2, r3, #1
 800e816:	60fa      	str	r2, [r7, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d102      	bne.n	800e822 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e81c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e820:	e01b      	b.n	800e85a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e826:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d0ef      	beq.n	800e812 <SDMMC_GetCmdResp3+0x1e>
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d1ea      	bne.n	800e812 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e840:	f003 0304 	and.w	r3, r3, #4
 800e844:	2b00      	cmp	r3, #0
 800e846:	d004      	beq.n	800e852 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2204      	movs	r2, #4
 800e84c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e84e:	2304      	movs	r3, #4
 800e850:	e003      	b.n	800e85a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a06      	ldr	r2, [pc, #24]	; (800e870 <SDMMC_GetCmdResp3+0x7c>)
 800e856:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3714      	adds	r7, #20
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	24000000 	.word	0x24000000
 800e86c:	10624dd3 	.word	0x10624dd3
 800e870:	002000c5 	.word	0x002000c5

0800e874 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b088      	sub	sp, #32
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	460b      	mov	r3, r1
 800e87e:	607a      	str	r2, [r7, #4]
 800e880:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e882:	4b35      	ldr	r3, [pc, #212]	; (800e958 <SDMMC_GetCmdResp6+0xe4>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a35      	ldr	r2, [pc, #212]	; (800e95c <SDMMC_GetCmdResp6+0xe8>)
 800e888:	fba2 2303 	umull	r2, r3, r2, r3
 800e88c:	0a5b      	lsrs	r3, r3, #9
 800e88e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e892:	fb02 f303 	mul.w	r3, r2, r3
 800e896:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	1e5a      	subs	r2, r3, #1
 800e89c:	61fa      	str	r2, [r7, #28]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d102      	bne.n	800e8a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8a6:	e052      	b.n	800e94e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ac:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d0ef      	beq.n	800e898 <SDMMC_GetCmdResp6+0x24>
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d1ea      	bne.n	800e898 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c6:	f003 0304 	and.w	r3, r3, #4
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d004      	beq.n	800e8d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2204      	movs	r2, #4
 800e8d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8d4:	2304      	movs	r3, #4
 800e8d6:	e03a      	b.n	800e94e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8dc:	f003 0301 	and.w	r3, r3, #1
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d004      	beq.n	800e8ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	e02f      	b.n	800e94e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f7ff fb7c 	bl	800dfec <SDMMC_GetCommandResponse>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	7afb      	ldrb	r3, [r7, #11]
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d001      	beq.n	800e902 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8fe:	2301      	movs	r3, #1
 800e900:	e025      	b.n	800e94e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	4a16      	ldr	r2, [pc, #88]	; (800e960 <SDMMC_GetCmdResp6+0xec>)
 800e906:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e908:	2100      	movs	r1, #0
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f7ff fb7b 	bl	800e006 <SDMMC_GetResponse>
 800e910:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d106      	bne.n	800e92a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	0c1b      	lsrs	r3, r3, #16
 800e920:	b29a      	uxth	r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e926:	2300      	movs	r3, #0
 800e928:	e011      	b.n	800e94e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e938:	e009      	b.n	800e94e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e948:	e001      	b.n	800e94e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e94a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3720      	adds	r7, #32
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	24000000 	.word	0x24000000
 800e95c:	10624dd3 	.word	0x10624dd3
 800e960:	002000c5 	.word	0x002000c5

0800e964 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e96c:	4b22      	ldr	r3, [pc, #136]	; (800e9f8 <SDMMC_GetCmdResp7+0x94>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a22      	ldr	r2, [pc, #136]	; (800e9fc <SDMMC_GetCmdResp7+0x98>)
 800e972:	fba2 2303 	umull	r2, r3, r2, r3
 800e976:	0a5b      	lsrs	r3, r3, #9
 800e978:	f241 3288 	movw	r2, #5000	; 0x1388
 800e97c:	fb02 f303 	mul.w	r3, r2, r3
 800e980:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	1e5a      	subs	r2, r3, #1
 800e986:	60fa      	str	r2, [r7, #12]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d102      	bne.n	800e992 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e98c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e990:	e02c      	b.n	800e9ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e996:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d0ef      	beq.n	800e982 <SDMMC_GetCmdResp7+0x1e>
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1ea      	bne.n	800e982 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9b0:	f003 0304 	and.w	r3, r3, #4
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d004      	beq.n	800e9c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2204      	movs	r2, #4
 800e9bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9be:	2304      	movs	r3, #4
 800e9c0:	e014      	b.n	800e9ec <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d004      	beq.n	800e9d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	e009      	b.n	800e9ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d002      	beq.n	800e9ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2240      	movs	r2, #64	; 0x40
 800e9e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e9ea:	2300      	movs	r3, #0

}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3714      	adds	r7, #20
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr
 800e9f8:	24000000 	.word	0x24000000
 800e9fc:	10624dd3 	.word	0x10624dd3

0800ea00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b085      	sub	sp, #20
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ea08:	4b11      	ldr	r3, [pc, #68]	; (800ea50 <SDMMC_GetCmdError+0x50>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a11      	ldr	r2, [pc, #68]	; (800ea54 <SDMMC_GetCmdError+0x54>)
 800ea0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ea12:	0a5b      	lsrs	r3, r3, #9
 800ea14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea18:	fb02 f303 	mul.w	r3, r2, r3
 800ea1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	1e5a      	subs	r2, r3, #1
 800ea22:	60fa      	str	r2, [r7, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d102      	bne.n	800ea2e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea2c:	e009      	b.n	800ea42 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d0f1      	beq.n	800ea1e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	4a06      	ldr	r2, [pc, #24]	; (800ea58 <SDMMC_GetCmdError+0x58>)
 800ea3e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop
 800ea50:	24000000 	.word	0x24000000
 800ea54:	10624dd3 	.word	0x10624dd3
 800ea58:	002000c5 	.word	0x002000c5

0800ea5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea5c:	b084      	sub	sp, #16
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b084      	sub	sp, #16
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	f107 001c 	add.w	r0, r7, #28
 800ea6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d120      	bne.n	800eab6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	68da      	ldr	r2, [r3, #12]
 800ea84:	4b2a      	ldr	r3, [pc, #168]	; (800eb30 <USB_CoreInit+0xd4>)
 800ea86:	4013      	ands	r3, r2
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ea98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d105      	bne.n	800eaaa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f001 fb14 	bl	80100d8 <USB_CoreReset>
 800eab0:	4603      	mov	r3, r0
 800eab2:	73fb      	strb	r3, [r7, #15]
 800eab4:	e01a      	b.n	800eaec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f001 fb08 	bl	80100d8 <USB_CoreReset>
 800eac8:	4603      	mov	r3, r0
 800eaca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800eacc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d106      	bne.n	800eae0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	639a      	str	r2, [r3, #56]	; 0x38
 800eade:	e005      	b.n	800eaec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800eaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d116      	bne.n	800eb20 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb00:	4b0c      	ldr	r3, [pc, #48]	; (800eb34 <USB_CoreInit+0xd8>)
 800eb02:	4313      	orrs	r3, r2
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	f043 0206 	orr.w	r2, r3, #6
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	f043 0220 	orr.w	r2, r3, #32
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800eb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eb2c:	b004      	add	sp, #16
 800eb2e:	4770      	bx	lr
 800eb30:	ffbdffbf 	.word	0xffbdffbf
 800eb34:	03ee0000 	.word	0x03ee0000

0800eb38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	4613      	mov	r3, r2
 800eb44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800eb46:	79fb      	ldrb	r3, [r7, #7]
 800eb48:	2b02      	cmp	r3, #2
 800eb4a:	d165      	bne.n	800ec18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	4a41      	ldr	r2, [pc, #260]	; (800ec54 <USB_SetTurnaroundTime+0x11c>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d906      	bls.n	800eb62 <USB_SetTurnaroundTime+0x2a>
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	4a40      	ldr	r2, [pc, #256]	; (800ec58 <USB_SetTurnaroundTime+0x120>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d202      	bcs.n	800eb62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800eb5c:	230f      	movs	r3, #15
 800eb5e:	617b      	str	r3, [r7, #20]
 800eb60:	e062      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	4a3c      	ldr	r2, [pc, #240]	; (800ec58 <USB_SetTurnaroundTime+0x120>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d306      	bcc.n	800eb78 <USB_SetTurnaroundTime+0x40>
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	4a3b      	ldr	r2, [pc, #236]	; (800ec5c <USB_SetTurnaroundTime+0x124>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d202      	bcs.n	800eb78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800eb72:	230e      	movs	r3, #14
 800eb74:	617b      	str	r3, [r7, #20]
 800eb76:	e057      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	4a38      	ldr	r2, [pc, #224]	; (800ec5c <USB_SetTurnaroundTime+0x124>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d306      	bcc.n	800eb8e <USB_SetTurnaroundTime+0x56>
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	4a37      	ldr	r2, [pc, #220]	; (800ec60 <USB_SetTurnaroundTime+0x128>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d202      	bcs.n	800eb8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800eb88:	230d      	movs	r3, #13
 800eb8a:	617b      	str	r3, [r7, #20]
 800eb8c:	e04c      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	4a33      	ldr	r2, [pc, #204]	; (800ec60 <USB_SetTurnaroundTime+0x128>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d306      	bcc.n	800eba4 <USB_SetTurnaroundTime+0x6c>
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	4a32      	ldr	r2, [pc, #200]	; (800ec64 <USB_SetTurnaroundTime+0x12c>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d802      	bhi.n	800eba4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800eb9e:	230c      	movs	r3, #12
 800eba0:	617b      	str	r3, [r7, #20]
 800eba2:	e041      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	4a2f      	ldr	r2, [pc, #188]	; (800ec64 <USB_SetTurnaroundTime+0x12c>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d906      	bls.n	800ebba <USB_SetTurnaroundTime+0x82>
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	4a2e      	ldr	r2, [pc, #184]	; (800ec68 <USB_SetTurnaroundTime+0x130>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d802      	bhi.n	800ebba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ebb4:	230b      	movs	r3, #11
 800ebb6:	617b      	str	r3, [r7, #20]
 800ebb8:	e036      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	4a2a      	ldr	r2, [pc, #168]	; (800ec68 <USB_SetTurnaroundTime+0x130>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d906      	bls.n	800ebd0 <USB_SetTurnaroundTime+0x98>
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	4a29      	ldr	r2, [pc, #164]	; (800ec6c <USB_SetTurnaroundTime+0x134>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d802      	bhi.n	800ebd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ebca:	230a      	movs	r3, #10
 800ebcc:	617b      	str	r3, [r7, #20]
 800ebce:	e02b      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	4a26      	ldr	r2, [pc, #152]	; (800ec6c <USB_SetTurnaroundTime+0x134>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d906      	bls.n	800ebe6 <USB_SetTurnaroundTime+0xae>
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	4a25      	ldr	r2, [pc, #148]	; (800ec70 <USB_SetTurnaroundTime+0x138>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d202      	bcs.n	800ebe6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ebe0:	2309      	movs	r3, #9
 800ebe2:	617b      	str	r3, [r7, #20]
 800ebe4:	e020      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	4a21      	ldr	r2, [pc, #132]	; (800ec70 <USB_SetTurnaroundTime+0x138>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d306      	bcc.n	800ebfc <USB_SetTurnaroundTime+0xc4>
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	4a20      	ldr	r2, [pc, #128]	; (800ec74 <USB_SetTurnaroundTime+0x13c>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d802      	bhi.n	800ebfc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ebf6:	2308      	movs	r3, #8
 800ebf8:	617b      	str	r3, [r7, #20]
 800ebfa:	e015      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	4a1d      	ldr	r2, [pc, #116]	; (800ec74 <USB_SetTurnaroundTime+0x13c>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d906      	bls.n	800ec12 <USB_SetTurnaroundTime+0xda>
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	4a1c      	ldr	r2, [pc, #112]	; (800ec78 <USB_SetTurnaroundTime+0x140>)
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d202      	bcs.n	800ec12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ec0c:	2307      	movs	r3, #7
 800ec0e:	617b      	str	r3, [r7, #20]
 800ec10:	e00a      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ec12:	2306      	movs	r3, #6
 800ec14:	617b      	str	r3, [r7, #20]
 800ec16:	e007      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ec18:	79fb      	ldrb	r3, [r7, #7]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d102      	bne.n	800ec24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ec1e:	2309      	movs	r3, #9
 800ec20:	617b      	str	r3, [r7, #20]
 800ec22:	e001      	b.n	800ec28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ec24:	2309      	movs	r3, #9
 800ec26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	029b      	lsls	r3, r3, #10
 800ec3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ec40:	431a      	orrs	r2, r3
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	371c      	adds	r7, #28
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr
 800ec54:	00d8acbf 	.word	0x00d8acbf
 800ec58:	00e4e1c0 	.word	0x00e4e1c0
 800ec5c:	00f42400 	.word	0x00f42400
 800ec60:	01067380 	.word	0x01067380
 800ec64:	011a499f 	.word	0x011a499f
 800ec68:	01312cff 	.word	0x01312cff
 800ec6c:	014ca43f 	.word	0x014ca43f
 800ec70:	016e3600 	.word	0x016e3600
 800ec74:	01a6ab1f 	.word	0x01a6ab1f
 800ec78:	01e84800 	.word	0x01e84800

0800ec7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	f043 0201 	orr.w	r2, r3, #1
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ec90:	2300      	movs	r3, #0
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	370c      	adds	r7, #12
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr

0800ec9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec9e:	b480      	push	{r7}
 800eca0:	b083      	sub	sp, #12
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	689b      	ldr	r3, [r3, #8]
 800ecaa:	f023 0201 	bic.w	r2, r3, #1
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	460b      	mov	r3, r1
 800ecca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ecd8:	78fb      	ldrb	r3, [r7, #3]
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d106      	bne.n	800ecec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	60da      	str	r2, [r3, #12]
 800ecea:	e00b      	b.n	800ed04 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ecec:	78fb      	ldrb	r3, [r7, #3]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d106      	bne.n	800ed00 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	60da      	str	r2, [r3, #12]
 800ecfe:	e001      	b.n	800ed04 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ed00:	2301      	movs	r3, #1
 800ed02:	e003      	b.n	800ed0c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ed04:	2032      	movs	r0, #50	; 0x32
 800ed06:	f7f2 feb5 	bl	8001a74 <HAL_Delay>

  return HAL_OK;
 800ed0a:	2300      	movs	r3, #0
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ed14:	b084      	sub	sp, #16
 800ed16:	b580      	push	{r7, lr}
 800ed18:	b086      	sub	sp, #24
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
 800ed1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ed22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ed26:	2300      	movs	r3, #0
 800ed28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ed2e:	2300      	movs	r3, #0
 800ed30:	613b      	str	r3, [r7, #16]
 800ed32:	e009      	b.n	800ed48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	3340      	adds	r3, #64	; 0x40
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	4413      	add	r3, r2
 800ed3e:	2200      	movs	r2, #0
 800ed40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	3301      	adds	r3, #1
 800ed46:	613b      	str	r3, [r7, #16]
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	2b0e      	cmp	r3, #14
 800ed4c:	d9f2      	bls.n	800ed34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ed4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d11c      	bne.n	800ed8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed62:	f043 0302 	orr.w	r3, r3, #2
 800ed66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	601a      	str	r2, [r3, #0]
 800ed8c:	e005      	b.n	800ed9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eda0:	461a      	mov	r2, r3
 800eda2:	2300      	movs	r3, #0
 800eda4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edac:	4619      	mov	r1, r3
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edb4:	461a      	mov	r2, r3
 800edb6:	680b      	ldr	r3, [r1, #0]
 800edb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800edba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d10c      	bne.n	800edda <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800edc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d104      	bne.n	800edd0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800edc6:	2100      	movs	r1, #0
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 f949 	bl	800f060 <USB_SetDevSpeed>
 800edce:	e008      	b.n	800ede2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800edd0:	2101      	movs	r1, #1
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f000 f944 	bl	800f060 <USB_SetDevSpeed>
 800edd8:	e003      	b.n	800ede2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800edda:	2103      	movs	r1, #3
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 f93f 	bl	800f060 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ede2:	2110      	movs	r1, #16
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 f8f3 	bl	800efd0 <USB_FlushTxFifo>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d001      	beq.n	800edf4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f911 	bl	800f01c <USB_FlushRxFifo>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d001      	beq.n	800ee04 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ee00:	2301      	movs	r3, #1
 800ee02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee16:	461a      	mov	r2, r3
 800ee18:	2300      	movs	r3, #0
 800ee1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee22:	461a      	mov	r2, r3
 800ee24:	2300      	movs	r3, #0
 800ee26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ee28:	2300      	movs	r3, #0
 800ee2a:	613b      	str	r3, [r7, #16]
 800ee2c:	e043      	b.n	800eeb6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	015a      	lsls	r2, r3, #5
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	4413      	add	r3, r2
 800ee36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee44:	d118      	bne.n	800ee78 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10a      	bne.n	800ee62 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	015a      	lsls	r2, r3, #5
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	4413      	add	r3, r2
 800ee54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee58:	461a      	mov	r2, r3
 800ee5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ee5e:	6013      	str	r3, [r2, #0]
 800ee60:	e013      	b.n	800ee8a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	015a      	lsls	r2, r3, #5
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	4413      	add	r3, r2
 800ee6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee6e:	461a      	mov	r2, r3
 800ee70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ee74:	6013      	str	r3, [r2, #0]
 800ee76:	e008      	b.n	800ee8a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	015a      	lsls	r2, r3, #5
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	4413      	add	r3, r2
 800ee80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee84:	461a      	mov	r2, r3
 800ee86:	2300      	movs	r3, #0
 800ee88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	015a      	lsls	r2, r3, #5
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	4413      	add	r3, r2
 800ee92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee96:	461a      	mov	r2, r3
 800ee98:	2300      	movs	r3, #0
 800ee9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	015a      	lsls	r2, r3, #5
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	4413      	add	r3, r2
 800eea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea8:	461a      	mov	r2, r3
 800eeaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eeae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	613b      	str	r3, [r7, #16]
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb8:	693a      	ldr	r2, [r7, #16]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d3b7      	bcc.n	800ee2e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eebe:	2300      	movs	r3, #0
 800eec0:	613b      	str	r3, [r7, #16]
 800eec2:	e043      	b.n	800ef4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	015a      	lsls	r2, r3, #5
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	4413      	add	r3, r2
 800eecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eeda:	d118      	bne.n	800ef0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d10a      	bne.n	800eef8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	015a      	lsls	r2, r3, #5
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	4413      	add	r3, r2
 800eeea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eeee:	461a      	mov	r2, r3
 800eef0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eef4:	6013      	str	r3, [r2, #0]
 800eef6:	e013      	b.n	800ef20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	015a      	lsls	r2, r3, #5
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	4413      	add	r3, r2
 800ef00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef04:	461a      	mov	r2, r3
 800ef06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef0a:	6013      	str	r3, [r2, #0]
 800ef0c:	e008      	b.n	800ef20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	015a      	lsls	r2, r3, #5
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	4413      	add	r3, r2
 800ef16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	015a      	lsls	r2, r3, #5
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	4413      	add	r3, r2
 800ef28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	2300      	movs	r3, #0
 800ef30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	015a      	lsls	r2, r3, #5
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	4413      	add	r3, r2
 800ef3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef3e:	461a      	mov	r2, r3
 800ef40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ef44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	613b      	str	r3, [r7, #16]
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4e:	693a      	ldr	r2, [r7, #16]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d3b7      	bcc.n	800eec4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef5a:	691b      	ldr	r3, [r3, #16]
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ef74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ef76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d105      	bne.n	800ef88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	699b      	ldr	r3, [r3, #24]
 800ef80:	f043 0210 	orr.w	r2, r3, #16
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	699a      	ldr	r2, [r3, #24]
 800ef8c:	4b0e      	ldr	r3, [pc, #56]	; (800efc8 <USB_DevInit+0x2b4>)
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ef94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d005      	beq.n	800efa6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	f043 0208 	orr.w	r2, r3, #8
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800efa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d105      	bne.n	800efb8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	699a      	ldr	r2, [r3, #24]
 800efb0:	4b06      	ldr	r3, [pc, #24]	; (800efcc <USB_DevInit+0x2b8>)
 800efb2:	4313      	orrs	r3, r2
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800efb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3718      	adds	r7, #24
 800efbe:	46bd      	mov	sp, r7
 800efc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800efc4:	b004      	add	sp, #16
 800efc6:	4770      	bx	lr
 800efc8:	803c3800 	.word	0x803c3800
 800efcc:	40000004 	.word	0x40000004

0800efd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800efda:	2300      	movs	r3, #0
 800efdc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	019b      	lsls	r3, r3, #6
 800efe2:	f043 0220 	orr.w	r2, r3, #32
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	3301      	adds	r3, #1
 800efee:	60fb      	str	r3, [r7, #12]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	4a09      	ldr	r2, [pc, #36]	; (800f018 <USB_FlushTxFifo+0x48>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d901      	bls.n	800effc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800eff8:	2303      	movs	r3, #3
 800effa:	e006      	b.n	800f00a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	691b      	ldr	r3, [r3, #16]
 800f000:	f003 0320 	and.w	r3, r3, #32
 800f004:	2b20      	cmp	r3, #32
 800f006:	d0f0      	beq.n	800efea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f008:	2300      	movs	r3, #0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr
 800f016:	bf00      	nop
 800f018:	00030d40 	.word	0x00030d40

0800f01c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2210      	movs	r2, #16
 800f02c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3301      	adds	r3, #1
 800f032:	60fb      	str	r3, [r7, #12]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4a09      	ldr	r2, [pc, #36]	; (800f05c <USB_FlushRxFifo+0x40>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d901      	bls.n	800f040 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f03c:	2303      	movs	r3, #3
 800f03e:	e006      	b.n	800f04e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	691b      	ldr	r3, [r3, #16]
 800f044:	f003 0310 	and.w	r3, r3, #16
 800f048:	2b10      	cmp	r3, #16
 800f04a:	d0f0      	beq.n	800f02e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3714      	adds	r7, #20
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	00030d40 	.word	0x00030d40

0800f060 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f060:	b480      	push	{r7}
 800f062:	b085      	sub	sp, #20
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	460b      	mov	r3, r1
 800f06a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	78fb      	ldrb	r3, [r7, #3]
 800f07a:	68f9      	ldr	r1, [r7, #12]
 800f07c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f080:	4313      	orrs	r3, r2
 800f082:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3714      	adds	r7, #20
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f092:	b480      	push	{r7}
 800f094:	b087      	sub	sp, #28
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	f003 0306 	and.w	r3, r3, #6
 800f0aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d102      	bne.n	800f0b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	75fb      	strb	r3, [r7, #23]
 800f0b6:	e00a      	b.n	800f0ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2b02      	cmp	r3, #2
 800f0bc:	d002      	beq.n	800f0c4 <USB_GetDevSpeed+0x32>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2b06      	cmp	r3, #6
 800f0c2:	d102      	bne.n	800f0ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	75fb      	strb	r3, [r7, #23]
 800f0c8:	e001      	b.n	800f0ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f0ca:	230f      	movs	r3, #15
 800f0cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	371c      	adds	r7, #28
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	785b      	ldrb	r3, [r3, #1]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d139      	bne.n	800f16c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0fe:	69da      	ldr	r2, [r3, #28]
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	f003 030f 	and.w	r3, r3, #15
 800f108:	2101      	movs	r1, #1
 800f10a:	fa01 f303 	lsl.w	r3, r1, r3
 800f10e:	b29b      	uxth	r3, r3
 800f110:	68f9      	ldr	r1, [r7, #12]
 800f112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f116:	4313      	orrs	r3, r2
 800f118:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	015a      	lsls	r2, r3, #5
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	4413      	add	r3, r2
 800f122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d153      	bne.n	800f1d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	015a      	lsls	r2, r3, #5
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	4413      	add	r3, r2
 800f138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	689b      	ldr	r3, [r3, #8]
 800f142:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	78db      	ldrb	r3, [r3, #3]
 800f14a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f14c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	059b      	lsls	r3, r3, #22
 800f152:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f154:	431a      	orrs	r2, r3
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	0159      	lsls	r1, r3, #5
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	440b      	add	r3, r1
 800f15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f162:	4619      	mov	r1, r3
 800f164:	4b20      	ldr	r3, [pc, #128]	; (800f1e8 <USB_ActivateEndpoint+0x10c>)
 800f166:	4313      	orrs	r3, r2
 800f168:	600b      	str	r3, [r1, #0]
 800f16a:	e035      	b.n	800f1d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f172:	69da      	ldr	r2, [r3, #28]
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	f003 030f 	and.w	r3, r3, #15
 800f17c:	2101      	movs	r1, #1
 800f17e:	fa01 f303 	lsl.w	r3, r1, r3
 800f182:	041b      	lsls	r3, r3, #16
 800f184:	68f9      	ldr	r1, [r7, #12]
 800f186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f18a:	4313      	orrs	r3, r2
 800f18c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	015a      	lsls	r2, r3, #5
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	4413      	add	r3, r2
 800f196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d119      	bne.n	800f1d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	015a      	lsls	r2, r3, #5
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	4413      	add	r3, r2
 800f1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	78db      	ldrb	r3, [r3, #3]
 800f1be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f1c0:	430b      	orrs	r3, r1
 800f1c2:	431a      	orrs	r2, r3
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	0159      	lsls	r1, r3, #5
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	440b      	add	r3, r1
 800f1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	4b05      	ldr	r3, [pc, #20]	; (800f1e8 <USB_ActivateEndpoint+0x10c>)
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	10008000 	.word	0x10008000

0800f1ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b085      	sub	sp, #20
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	785b      	ldrb	r3, [r3, #1]
 800f204:	2b01      	cmp	r3, #1
 800f206:	d161      	bne.n	800f2cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	015a      	lsls	r2, r3, #5
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	4413      	add	r3, r2
 800f210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f21a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f21e:	d11f      	bne.n	800f260 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	015a      	lsls	r2, r3, #5
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	4413      	add	r3, r2
 800f228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	0151      	lsls	r1, r2, #5
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	440a      	add	r2, r1
 800f236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f23a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f23e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	015a      	lsls	r2, r3, #5
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	4413      	add	r3, r2
 800f248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	68ba      	ldr	r2, [r7, #8]
 800f250:	0151      	lsls	r1, r2, #5
 800f252:	68fa      	ldr	r2, [r7, #12]
 800f254:	440a      	add	r2, r1
 800f256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f25a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f25e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	f003 030f 	and.w	r3, r3, #15
 800f270:	2101      	movs	r1, #1
 800f272:	fa01 f303 	lsl.w	r3, r1, r3
 800f276:	b29b      	uxth	r3, r3
 800f278:	43db      	mvns	r3, r3
 800f27a:	68f9      	ldr	r1, [r7, #12]
 800f27c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f280:	4013      	ands	r3, r2
 800f282:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f28a:	69da      	ldr	r2, [r3, #28]
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	f003 030f 	and.w	r3, r3, #15
 800f294:	2101      	movs	r1, #1
 800f296:	fa01 f303 	lsl.w	r3, r1, r3
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	43db      	mvns	r3, r3
 800f29e:	68f9      	ldr	r1, [r7, #12]
 800f2a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2a4:	4013      	ands	r3, r2
 800f2a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	015a      	lsls	r2, r3, #5
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	0159      	lsls	r1, r3, #5
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	440b      	add	r3, r1
 800f2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	4b35      	ldr	r3, [pc, #212]	; (800f39c <USB_DeactivateEndpoint+0x1b0>)
 800f2c6:	4013      	ands	r3, r2
 800f2c8:	600b      	str	r3, [r1, #0]
 800f2ca:	e060      	b.n	800f38e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	015a      	lsls	r2, r3, #5
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2e2:	d11f      	bne.n	800f324 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	015a      	lsls	r2, r3, #5
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	68ba      	ldr	r2, [r7, #8]
 800f2f4:	0151      	lsls	r1, r2, #5
 800f2f6:	68fa      	ldr	r2, [r7, #12]
 800f2f8:	440a      	add	r2, r1
 800f2fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f302:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	015a      	lsls	r2, r3, #5
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	4413      	add	r3, r2
 800f30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	68ba      	ldr	r2, [r7, #8]
 800f314:	0151      	lsls	r1, r2, #5
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	440a      	add	r2, r1
 800f31a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f31e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f322:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f32a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	f003 030f 	and.w	r3, r3, #15
 800f334:	2101      	movs	r1, #1
 800f336:	fa01 f303 	lsl.w	r3, r1, r3
 800f33a:	041b      	lsls	r3, r3, #16
 800f33c:	43db      	mvns	r3, r3
 800f33e:	68f9      	ldr	r1, [r7, #12]
 800f340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f344:	4013      	ands	r3, r2
 800f346:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f34e:	69da      	ldr	r2, [r3, #28]
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	f003 030f 	and.w	r3, r3, #15
 800f358:	2101      	movs	r1, #1
 800f35a:	fa01 f303 	lsl.w	r3, r1, r3
 800f35e:	041b      	lsls	r3, r3, #16
 800f360:	43db      	mvns	r3, r3
 800f362:	68f9      	ldr	r1, [r7, #12]
 800f364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f368:	4013      	ands	r3, r2
 800f36a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	015a      	lsls	r2, r3, #5
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	4413      	add	r3, r2
 800f374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	0159      	lsls	r1, r3, #5
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	440b      	add	r3, r1
 800f382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f386:	4619      	mov	r1, r3
 800f388:	4b05      	ldr	r3, [pc, #20]	; (800f3a0 <USB_DeactivateEndpoint+0x1b4>)
 800f38a:	4013      	ands	r3, r2
 800f38c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	3714      	adds	r7, #20
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr
 800f39c:	ec337800 	.word	0xec337800
 800f3a0:	eff37800 	.word	0xeff37800

0800f3a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b08a      	sub	sp, #40	; 0x28
 800f3a8:	af02      	add	r7, sp, #8
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	785b      	ldrb	r3, [r3, #1]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	f040 8163 	bne.w	800f68c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d132      	bne.n	800f434 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	015a      	lsls	r2, r3, #5
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3da:	691a      	ldr	r2, [r3, #16]
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	0159      	lsls	r1, r3, #5
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	440b      	add	r3, r1
 800f3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	4ba5      	ldr	r3, [pc, #660]	; (800f680 <USB_EPStartXfer+0x2dc>)
 800f3ec:	4013      	ands	r3, r2
 800f3ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f3f0:	69bb      	ldr	r3, [r7, #24]
 800f3f2:	015a      	lsls	r2, r3, #5
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3fc:	691b      	ldr	r3, [r3, #16]
 800f3fe:	69ba      	ldr	r2, [r7, #24]
 800f400:	0151      	lsls	r1, r2, #5
 800f402:	69fa      	ldr	r2, [r7, #28]
 800f404:	440a      	add	r2, r1
 800f406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f40a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f40e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	015a      	lsls	r2, r3, #5
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	4413      	add	r3, r2
 800f418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f41c:	691a      	ldr	r2, [r3, #16]
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	0159      	lsls	r1, r3, #5
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	440b      	add	r3, r1
 800f426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f42a:	4619      	mov	r1, r3
 800f42c:	4b95      	ldr	r3, [pc, #596]	; (800f684 <USB_EPStartXfer+0x2e0>)
 800f42e:	4013      	ands	r3, r2
 800f430:	610b      	str	r3, [r1, #16]
 800f432:	e074      	b.n	800f51e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	015a      	lsls	r2, r3, #5
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	4413      	add	r3, r2
 800f43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f440:	691a      	ldr	r2, [r3, #16]
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	0159      	lsls	r1, r3, #5
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	440b      	add	r3, r1
 800f44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f44e:	4619      	mov	r1, r3
 800f450:	4b8c      	ldr	r3, [pc, #560]	; (800f684 <USB_EPStartXfer+0x2e0>)
 800f452:	4013      	ands	r3, r2
 800f454:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	015a      	lsls	r2, r3, #5
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	4413      	add	r3, r2
 800f45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f462:	691a      	ldr	r2, [r3, #16]
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	0159      	lsls	r1, r3, #5
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	440b      	add	r3, r1
 800f46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f470:	4619      	mov	r1, r3
 800f472:	4b83      	ldr	r3, [pc, #524]	; (800f680 <USB_EPStartXfer+0x2dc>)
 800f474:	4013      	ands	r3, r2
 800f476:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	015a      	lsls	r2, r3, #5
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	4413      	add	r3, r2
 800f480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f484:	691a      	ldr	r2, [r3, #16]
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	6959      	ldr	r1, [r3, #20]
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	689b      	ldr	r3, [r3, #8]
 800f48e:	440b      	add	r3, r1
 800f490:	1e59      	subs	r1, r3, #1
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	fbb1 f3f3 	udiv	r3, r1, r3
 800f49a:	04d9      	lsls	r1, r3, #19
 800f49c:	4b7a      	ldr	r3, [pc, #488]	; (800f688 <USB_EPStartXfer+0x2e4>)
 800f49e:	400b      	ands	r3, r1
 800f4a0:	69b9      	ldr	r1, [r7, #24]
 800f4a2:	0148      	lsls	r0, r1, #5
 800f4a4:	69f9      	ldr	r1, [r7, #28]
 800f4a6:	4401      	add	r1, r0
 800f4a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	015a      	lsls	r2, r3, #5
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4bc:	691a      	ldr	r2, [r3, #16]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	695b      	ldr	r3, [r3, #20]
 800f4c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4c6:	69b9      	ldr	r1, [r7, #24]
 800f4c8:	0148      	lsls	r0, r1, #5
 800f4ca:	69f9      	ldr	r1, [r7, #28]
 800f4cc:	4401      	add	r1, r0
 800f4ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	78db      	ldrb	r3, [r3, #3]
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d11f      	bne.n	800f51e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	015a      	lsls	r2, r3, #5
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	69ba      	ldr	r2, [r7, #24]
 800f4ee:	0151      	lsls	r1, r2, #5
 800f4f0:	69fa      	ldr	r2, [r7, #28]
 800f4f2:	440a      	add	r2, r1
 800f4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f4fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	015a      	lsls	r2, r3, #5
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	4413      	add	r3, r2
 800f506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f50a:	691b      	ldr	r3, [r3, #16]
 800f50c:	69ba      	ldr	r2, [r7, #24]
 800f50e:	0151      	lsls	r1, r2, #5
 800f510:	69fa      	ldr	r2, [r7, #28]
 800f512:	440a      	add	r2, r1
 800f514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f51c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f51e:	79fb      	ldrb	r3, [r7, #7]
 800f520:	2b01      	cmp	r3, #1
 800f522:	d14b      	bne.n	800f5bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	691b      	ldr	r3, [r3, #16]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d009      	beq.n	800f540 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	015a      	lsls	r2, r3, #5
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	4413      	add	r3, r2
 800f534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f538:	461a      	mov	r2, r3
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	691b      	ldr	r3, [r3, #16]
 800f53e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	78db      	ldrb	r3, [r3, #3]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d128      	bne.n	800f59a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f54e:	689b      	ldr	r3, [r3, #8]
 800f550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f554:	2b00      	cmp	r3, #0
 800f556:	d110      	bne.n	800f57a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	015a      	lsls	r2, r3, #5
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	4413      	add	r3, r2
 800f560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	69ba      	ldr	r2, [r7, #24]
 800f568:	0151      	lsls	r1, r2, #5
 800f56a:	69fa      	ldr	r2, [r7, #28]
 800f56c:	440a      	add	r2, r1
 800f56e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f572:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f576:	6013      	str	r3, [r2, #0]
 800f578:	e00f      	b.n	800f59a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	015a      	lsls	r2, r3, #5
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	4413      	add	r3, r2
 800f582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	69ba      	ldr	r2, [r7, #24]
 800f58a:	0151      	lsls	r1, r2, #5
 800f58c:	69fa      	ldr	r2, [r7, #28]
 800f58e:	440a      	add	r2, r1
 800f590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f598:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	015a      	lsls	r2, r3, #5
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	69ba      	ldr	r2, [r7, #24]
 800f5aa:	0151      	lsls	r1, r2, #5
 800f5ac:	69fa      	ldr	r2, [r7, #28]
 800f5ae:	440a      	add	r2, r1
 800f5b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5b8:	6013      	str	r3, [r2, #0]
 800f5ba:	e133      	b.n	800f824 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	015a      	lsls	r2, r3, #5
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	69ba      	ldr	r2, [r7, #24]
 800f5cc:	0151      	lsls	r1, r2, #5
 800f5ce:	69fa      	ldr	r2, [r7, #28]
 800f5d0:	440a      	add	r2, r1
 800f5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	78db      	ldrb	r3, [r3, #3]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d015      	beq.n	800f610 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	695b      	ldr	r3, [r3, #20]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f000 811b 	beq.w	800f824 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	f003 030f 	and.w	r3, r3, #15
 800f5fe:	2101      	movs	r1, #1
 800f600:	fa01 f303 	lsl.w	r3, r1, r3
 800f604:	69f9      	ldr	r1, [r7, #28]
 800f606:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f60a:	4313      	orrs	r3, r2
 800f60c:	634b      	str	r3, [r1, #52]	; 0x34
 800f60e:	e109      	b.n	800f824 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d110      	bne.n	800f642 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f620:	69bb      	ldr	r3, [r7, #24]
 800f622:	015a      	lsls	r2, r3, #5
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	4413      	add	r3, r2
 800f628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	69ba      	ldr	r2, [r7, #24]
 800f630:	0151      	lsls	r1, r2, #5
 800f632:	69fa      	ldr	r2, [r7, #28]
 800f634:	440a      	add	r2, r1
 800f636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f63a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f63e:	6013      	str	r3, [r2, #0]
 800f640:	e00f      	b.n	800f662 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	015a      	lsls	r2, r3, #5
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	4413      	add	r3, r2
 800f64a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	69ba      	ldr	r2, [r7, #24]
 800f652:	0151      	lsls	r1, r2, #5
 800f654:	69fa      	ldr	r2, [r7, #28]
 800f656:	440a      	add	r2, r1
 800f658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f65c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f660:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	68d9      	ldr	r1, [r3, #12]
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	781a      	ldrb	r2, [r3, #0]
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	695b      	ldr	r3, [r3, #20]
 800f66e:	b298      	uxth	r0, r3
 800f670:	79fb      	ldrb	r3, [r7, #7]
 800f672:	9300      	str	r3, [sp, #0]
 800f674:	4603      	mov	r3, r0
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	f000 fa38 	bl	800faec <USB_WritePacket>
 800f67c:	e0d2      	b.n	800f824 <USB_EPStartXfer+0x480>
 800f67e:	bf00      	nop
 800f680:	e007ffff 	.word	0xe007ffff
 800f684:	fff80000 	.word	0xfff80000
 800f688:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	015a      	lsls	r2, r3, #5
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	4413      	add	r3, r2
 800f694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f698:	691a      	ldr	r2, [r3, #16]
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	0159      	lsls	r1, r3, #5
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	440b      	add	r3, r1
 800f6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	4b61      	ldr	r3, [pc, #388]	; (800f830 <USB_EPStartXfer+0x48c>)
 800f6aa:	4013      	ands	r3, r2
 800f6ac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	015a      	lsls	r2, r3, #5
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6ba:	691a      	ldr	r2, [r3, #16]
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	0159      	lsls	r1, r3, #5
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	440b      	add	r3, r1
 800f6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	4b5a      	ldr	r3, [pc, #360]	; (800f834 <USB_EPStartXfer+0x490>)
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d123      	bne.n	800f720 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	015a      	lsls	r2, r3, #5
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	4413      	add	r3, r2
 800f6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6e4:	691a      	ldr	r2, [r3, #16]
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f6ee:	69b9      	ldr	r1, [r7, #24]
 800f6f0:	0148      	lsls	r0, r1, #5
 800f6f2:	69f9      	ldr	r1, [r7, #28]
 800f6f4:	4401      	add	r1, r0
 800f6f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	015a      	lsls	r2, r3, #5
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	4413      	add	r3, r2
 800f706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f70a:	691b      	ldr	r3, [r3, #16]
 800f70c:	69ba      	ldr	r2, [r7, #24]
 800f70e:	0151      	lsls	r1, r2, #5
 800f710:	69fa      	ldr	r2, [r7, #28]
 800f712:	440a      	add	r2, r1
 800f714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f71c:	6113      	str	r3, [r2, #16]
 800f71e:	e033      	b.n	800f788 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	695a      	ldr	r2, [r3, #20]
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	4413      	add	r3, r2
 800f72a:	1e5a      	subs	r2, r3, #1
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	fbb2 f3f3 	udiv	r3, r2, r3
 800f734:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	015a      	lsls	r2, r3, #5
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	4413      	add	r3, r2
 800f73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f742:	691a      	ldr	r2, [r3, #16]
 800f744:	8afb      	ldrh	r3, [r7, #22]
 800f746:	04d9      	lsls	r1, r3, #19
 800f748:	4b3b      	ldr	r3, [pc, #236]	; (800f838 <USB_EPStartXfer+0x494>)
 800f74a:	400b      	ands	r3, r1
 800f74c:	69b9      	ldr	r1, [r7, #24]
 800f74e:	0148      	lsls	r0, r1, #5
 800f750:	69f9      	ldr	r1, [r7, #28]
 800f752:	4401      	add	r1, r0
 800f754:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f758:	4313      	orrs	r3, r2
 800f75a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f75c:	69bb      	ldr	r3, [r7, #24]
 800f75e:	015a      	lsls	r2, r3, #5
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	4413      	add	r3, r2
 800f764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f768:	691a      	ldr	r2, [r3, #16]
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	8af9      	ldrh	r1, [r7, #22]
 800f770:	fb01 f303 	mul.w	r3, r1, r3
 800f774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f778:	69b9      	ldr	r1, [r7, #24]
 800f77a:	0148      	lsls	r0, r1, #5
 800f77c:	69f9      	ldr	r1, [r7, #28]
 800f77e:	4401      	add	r1, r0
 800f780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f784:	4313      	orrs	r3, r2
 800f786:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f788:	79fb      	ldrb	r3, [r7, #7]
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d10d      	bne.n	800f7aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d009      	beq.n	800f7aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	68d9      	ldr	r1, [r3, #12]
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	015a      	lsls	r2, r3, #5
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7a6:	460a      	mov	r2, r1
 800f7a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	78db      	ldrb	r3, [r3, #3]
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	d128      	bne.n	800f804 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d110      	bne.n	800f7e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	015a      	lsls	r2, r3, #5
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	69ba      	ldr	r2, [r7, #24]
 800f7d2:	0151      	lsls	r1, r2, #5
 800f7d4:	69fa      	ldr	r2, [r7, #28]
 800f7d6:	440a      	add	r2, r1
 800f7d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f7e0:	6013      	str	r3, [r2, #0]
 800f7e2:	e00f      	b.n	800f804 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	015a      	lsls	r2, r3, #5
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	69ba      	ldr	r2, [r7, #24]
 800f7f4:	0151      	lsls	r1, r2, #5
 800f7f6:	69fa      	ldr	r2, [r7, #28]
 800f7f8:	440a      	add	r2, r1
 800f7fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f802:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f804:	69bb      	ldr	r3, [r7, #24]
 800f806:	015a      	lsls	r2, r3, #5
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	4413      	add	r3, r2
 800f80c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	69ba      	ldr	r2, [r7, #24]
 800f814:	0151      	lsls	r1, r2, #5
 800f816:	69fa      	ldr	r2, [r7, #28]
 800f818:	440a      	add	r2, r1
 800f81a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f81e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3720      	adds	r7, #32
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	fff80000 	.word	0xfff80000
 800f834:	e007ffff 	.word	0xe007ffff
 800f838:	1ff80000 	.word	0x1ff80000

0800f83c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b087      	sub	sp, #28
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	4613      	mov	r3, r2
 800f848:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	785b      	ldrb	r3, [r3, #1]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	f040 80cd 	bne.w	800f9f8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	695b      	ldr	r3, [r3, #20]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d132      	bne.n	800f8cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	015a      	lsls	r2, r3, #5
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	4413      	add	r3, r2
 800f86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f872:	691a      	ldr	r2, [r3, #16]
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	0159      	lsls	r1, r3, #5
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	440b      	add	r3, r1
 800f87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f880:	4619      	mov	r1, r3
 800f882:	4b98      	ldr	r3, [pc, #608]	; (800fae4 <USB_EP0StartXfer+0x2a8>)
 800f884:	4013      	ands	r3, r2
 800f886:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	015a      	lsls	r2, r3, #5
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	4413      	add	r3, r2
 800f890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f894:	691b      	ldr	r3, [r3, #16]
 800f896:	693a      	ldr	r2, [r7, #16]
 800f898:	0151      	lsls	r1, r2, #5
 800f89a:	697a      	ldr	r2, [r7, #20]
 800f89c:	440a      	add	r2, r1
 800f89e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f8a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	015a      	lsls	r2, r3, #5
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8b4:	691a      	ldr	r2, [r3, #16]
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	0159      	lsls	r1, r3, #5
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	440b      	add	r3, r1
 800f8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	4b88      	ldr	r3, [pc, #544]	; (800fae8 <USB_EP0StartXfer+0x2ac>)
 800f8c6:	4013      	ands	r3, r2
 800f8c8:	610b      	str	r3, [r1, #16]
 800f8ca:	e04e      	b.n	800f96a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	015a      	lsls	r2, r3, #5
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8d8:	691a      	ldr	r2, [r3, #16]
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	0159      	lsls	r1, r3, #5
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	440b      	add	r3, r1
 800f8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	4b7f      	ldr	r3, [pc, #508]	; (800fae8 <USB_EP0StartXfer+0x2ac>)
 800f8ea:	4013      	ands	r3, r2
 800f8ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	015a      	lsls	r2, r3, #5
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	4413      	add	r3, r2
 800f8f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8fa:	691a      	ldr	r2, [r3, #16]
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	0159      	lsls	r1, r3, #5
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	440b      	add	r3, r1
 800f904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f908:	4619      	mov	r1, r3
 800f90a:	4b76      	ldr	r3, [pc, #472]	; (800fae4 <USB_EP0StartXfer+0x2a8>)
 800f90c:	4013      	ands	r3, r2
 800f90e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	695a      	ldr	r2, [r3, #20]
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d903      	bls.n	800f924 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	689a      	ldr	r2, [r3, #8]
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	015a      	lsls	r2, r3, #5
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	4413      	add	r3, r2
 800f92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f930:	691b      	ldr	r3, [r3, #16]
 800f932:	693a      	ldr	r2, [r7, #16]
 800f934:	0151      	lsls	r1, r2, #5
 800f936:	697a      	ldr	r2, [r7, #20]
 800f938:	440a      	add	r2, r1
 800f93a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f93e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	015a      	lsls	r2, r3, #5
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	4413      	add	r3, r2
 800f94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f950:	691a      	ldr	r2, [r3, #16]
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	695b      	ldr	r3, [r3, #20]
 800f956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f95a:	6939      	ldr	r1, [r7, #16]
 800f95c:	0148      	lsls	r0, r1, #5
 800f95e:	6979      	ldr	r1, [r7, #20]
 800f960:	4401      	add	r1, r0
 800f962:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f966:	4313      	orrs	r3, r2
 800f968:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f96a:	79fb      	ldrb	r3, [r7, #7]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d11e      	bne.n	800f9ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d009      	beq.n	800f98c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	015a      	lsls	r2, r3, #5
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	4413      	add	r3, r2
 800f980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f984:	461a      	mov	r2, r3
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	691b      	ldr	r3, [r3, #16]
 800f98a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	015a      	lsls	r2, r3, #5
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	4413      	add	r3, r2
 800f994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	693a      	ldr	r2, [r7, #16]
 800f99c:	0151      	lsls	r1, r2, #5
 800f99e:	697a      	ldr	r2, [r7, #20]
 800f9a0:	440a      	add	r2, r1
 800f9a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f9aa:	6013      	str	r3, [r2, #0]
 800f9ac:	e092      	b.n	800fad4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	015a      	lsls	r2, r3, #5
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	693a      	ldr	r2, [r7, #16]
 800f9be:	0151      	lsls	r1, r2, #5
 800f9c0:	697a      	ldr	r2, [r7, #20]
 800f9c2:	440a      	add	r2, r1
 800f9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f9cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	695b      	ldr	r3, [r3, #20]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d07e      	beq.n	800fad4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	f003 030f 	and.w	r3, r3, #15
 800f9e6:	2101      	movs	r1, #1
 800f9e8:	fa01 f303 	lsl.w	r3, r1, r3
 800f9ec:	6979      	ldr	r1, [r7, #20]
 800f9ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	634b      	str	r3, [r1, #52]	; 0x34
 800f9f6:	e06d      	b.n	800fad4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	015a      	lsls	r2, r3, #5
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	4413      	add	r3, r2
 800fa00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa04:	691a      	ldr	r2, [r3, #16]
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	0159      	lsls	r1, r3, #5
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	440b      	add	r3, r1
 800fa0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa12:	4619      	mov	r1, r3
 800fa14:	4b34      	ldr	r3, [pc, #208]	; (800fae8 <USB_EP0StartXfer+0x2ac>)
 800fa16:	4013      	ands	r3, r2
 800fa18:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	015a      	lsls	r2, r3, #5
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	4413      	add	r3, r2
 800fa22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa26:	691a      	ldr	r2, [r3, #16]
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	0159      	lsls	r1, r3, #5
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	440b      	add	r3, r1
 800fa30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa34:	4619      	mov	r1, r3
 800fa36:	4b2b      	ldr	r3, [pc, #172]	; (800fae4 <USB_EP0StartXfer+0x2a8>)
 800fa38:	4013      	ands	r3, r2
 800fa3a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	695b      	ldr	r3, [r3, #20]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d003      	beq.n	800fa4c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	689a      	ldr	r2, [r3, #8]
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	015a      	lsls	r2, r3, #5
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	4413      	add	r3, r2
 800fa54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa58:	691b      	ldr	r3, [r3, #16]
 800fa5a:	693a      	ldr	r2, [r7, #16]
 800fa5c:	0151      	lsls	r1, r2, #5
 800fa5e:	697a      	ldr	r2, [r7, #20]
 800fa60:	440a      	add	r2, r1
 800fa62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	015a      	lsls	r2, r3, #5
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	4413      	add	r3, r2
 800fa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa78:	691a      	ldr	r2, [r3, #16]
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa82:	6939      	ldr	r1, [r7, #16]
 800fa84:	0148      	lsls	r0, r1, #5
 800fa86:	6979      	ldr	r1, [r7, #20]
 800fa88:	4401      	add	r1, r0
 800fa8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d10d      	bne.n	800fab4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d009      	beq.n	800fab4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	68d9      	ldr	r1, [r3, #12]
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	015a      	lsls	r2, r3, #5
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	4413      	add	r3, r2
 800faac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fab0:	460a      	mov	r2, r1
 800fab2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	015a      	lsls	r2, r3, #5
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	4413      	add	r3, r2
 800fabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	693a      	ldr	r2, [r7, #16]
 800fac4:	0151      	lsls	r1, r2, #5
 800fac6:	697a      	ldr	r2, [r7, #20]
 800fac8:	440a      	add	r2, r1
 800faca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800face:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fad4:	2300      	movs	r3, #0
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	371c      	adds	r7, #28
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	e007ffff 	.word	0xe007ffff
 800fae8:	fff80000 	.word	0xfff80000

0800faec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800faec:	b480      	push	{r7}
 800faee:	b089      	sub	sp, #36	; 0x24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	4611      	mov	r1, r2
 800faf8:	461a      	mov	r2, r3
 800fafa:	460b      	mov	r3, r1
 800fafc:	71fb      	strb	r3, [r7, #7]
 800fafe:	4613      	mov	r3, r2
 800fb00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800fb0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d123      	bne.n	800fb5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fb12:	88bb      	ldrh	r3, [r7, #4]
 800fb14:	3303      	adds	r3, #3
 800fb16:	089b      	lsrs	r3, r3, #2
 800fb18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	61bb      	str	r3, [r7, #24]
 800fb1e:	e018      	b.n	800fb52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fb20:	79fb      	ldrb	r3, [r7, #7]
 800fb22:	031a      	lsls	r2, r3, #12
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	4413      	add	r3, r2
 800fb28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	3301      	adds	r3, #1
 800fb38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	3301      	adds	r3, #1
 800fb44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fb4c:	69bb      	ldr	r3, [r7, #24]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	61bb      	str	r3, [r7, #24]
 800fb52:	69ba      	ldr	r2, [r7, #24]
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d3e2      	bcc.n	800fb20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fb5a:	2300      	movs	r3, #0
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3724      	adds	r7, #36	; 0x24
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b08b      	sub	sp, #44	; 0x2c
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	60b9      	str	r1, [r7, #8]
 800fb72:	4613      	mov	r3, r2
 800fb74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fb7e:	88fb      	ldrh	r3, [r7, #6]
 800fb80:	089b      	lsrs	r3, r3, #2
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fb86:	88fb      	ldrh	r3, [r7, #6]
 800fb88:	f003 0303 	and.w	r3, r3, #3
 800fb8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fb8e:	2300      	movs	r3, #0
 800fb90:	623b      	str	r3, [r7, #32]
 800fb92:	e014      	b.n	800fbbe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fb94:	69bb      	ldr	r3, [r7, #24]
 800fb96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9e:	601a      	str	r2, [r3, #0]
    pDest++;
 800fba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba2:	3301      	adds	r3, #1
 800fba4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba8:	3301      	adds	r3, #1
 800fbaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbae:	3301      	adds	r3, #1
 800fbb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fbb8:	6a3b      	ldr	r3, [r7, #32]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	623b      	str	r3, [r7, #32]
 800fbbe:	6a3a      	ldr	r2, [r7, #32]
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d3e6      	bcc.n	800fb94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fbc6:	8bfb      	ldrh	r3, [r7, #30]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d01e      	beq.n	800fc0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	f107 0310 	add.w	r3, r7, #16
 800fbdc:	6812      	ldr	r2, [r2, #0]
 800fbde:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fbe0:	693a      	ldr	r2, [r7, #16]
 800fbe2:	6a3b      	ldr	r3, [r7, #32]
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	00db      	lsls	r3, r3, #3
 800fbe8:	fa22 f303 	lsr.w	r3, r2, r3
 800fbec:	b2da      	uxtb	r2, r3
 800fbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf0:	701a      	strb	r2, [r3, #0]
      i++;
 800fbf2:	6a3b      	ldr	r3, [r7, #32]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	623b      	str	r3, [r7, #32]
      pDest++;
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fbfe:	8bfb      	ldrh	r3, [r7, #30]
 800fc00:	3b01      	subs	r3, #1
 800fc02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fc04:	8bfb      	ldrh	r3, [r7, #30]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d1ea      	bne.n	800fbe0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	372c      	adds	r7, #44	; 0x2c
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	785b      	ldrb	r3, [r3, #1]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d12c      	bne.n	800fc8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	015a      	lsls	r2, r3, #5
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	db12      	blt.n	800fc6c <USB_EPSetStall+0x54>
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d00f      	beq.n	800fc6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	015a      	lsls	r2, r3, #5
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	4413      	add	r3, r2
 800fc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	68ba      	ldr	r2, [r7, #8]
 800fc5c:	0151      	lsls	r1, r2, #5
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	440a      	add	r2, r1
 800fc62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fc6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	015a      	lsls	r2, r3, #5
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	4413      	add	r3, r2
 800fc74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	68ba      	ldr	r2, [r7, #8]
 800fc7c:	0151      	lsls	r1, r2, #5
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	440a      	add	r2, r1
 800fc82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fc8a:	6013      	str	r3, [r2, #0]
 800fc8c:	e02b      	b.n	800fce6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	015a      	lsls	r2, r3, #5
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	4413      	add	r3, r2
 800fc96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	db12      	blt.n	800fcc6 <USB_EPSetStall+0xae>
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00f      	beq.n	800fcc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	015a      	lsls	r2, r3, #5
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	4413      	add	r3, r2
 800fcae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	0151      	lsls	r1, r2, #5
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	440a      	add	r2, r1
 800fcbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fcc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	015a      	lsls	r2, r3, #5
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	4413      	add	r3, r2
 800fcce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	68ba      	ldr	r2, [r7, #8]
 800fcd6:	0151      	lsls	r1, r2, #5
 800fcd8:	68fa      	ldr	r2, [r7, #12]
 800fcda:	440a      	add	r2, r1
 800fcdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fce4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fce6:	2300      	movs	r3, #0
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	785b      	ldrb	r3, [r3, #1]
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d128      	bne.n	800fd62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	015a      	lsls	r2, r3, #5
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	4413      	add	r3, r2
 800fd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	68ba      	ldr	r2, [r7, #8]
 800fd20:	0151      	lsls	r1, r2, #5
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	440a      	add	r2, r1
 800fd26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fd2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	78db      	ldrb	r3, [r3, #3]
 800fd34:	2b03      	cmp	r3, #3
 800fd36:	d003      	beq.n	800fd40 <USB_EPClearStall+0x4c>
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	78db      	ldrb	r3, [r3, #3]
 800fd3c:	2b02      	cmp	r3, #2
 800fd3e:	d138      	bne.n	800fdb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	015a      	lsls	r2, r3, #5
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	4413      	add	r3, r2
 800fd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	68ba      	ldr	r2, [r7, #8]
 800fd50:	0151      	lsls	r1, r2, #5
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	440a      	add	r2, r1
 800fd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd5e:	6013      	str	r3, [r2, #0]
 800fd60:	e027      	b.n	800fdb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	015a      	lsls	r2, r3, #5
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	4413      	add	r3, r2
 800fd6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	0151      	lsls	r1, r2, #5
 800fd74:	68fa      	ldr	r2, [r7, #12]
 800fd76:	440a      	add	r2, r1
 800fd78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fd80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	78db      	ldrb	r3, [r3, #3]
 800fd86:	2b03      	cmp	r3, #3
 800fd88:	d003      	beq.n	800fd92 <USB_EPClearStall+0x9e>
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	78db      	ldrb	r3, [r3, #3]
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	d10f      	bne.n	800fdb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	015a      	lsls	r2, r3, #5
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	4413      	add	r3, r2
 800fd9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	0151      	lsls	r1, r2, #5
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	440a      	add	r2, r1
 800fda8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fdb2:	2300      	movs	r3, #0
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3714      	adds	r7, #20
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr

0800fdc0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	460b      	mov	r3, r1
 800fdca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	68fa      	ldr	r2, [r7, #12]
 800fdda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fdde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fde2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	78fb      	ldrb	r3, [r7, #3]
 800fdee:	011b      	lsls	r3, r3, #4
 800fdf0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fdf4:	68f9      	ldr	r1, [r7, #12]
 800fdf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fdfe:	2300      	movs	r3, #0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3714      	adds	r7, #20
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe26:	f023 0303 	bic.w	r3, r3, #3
 800fe2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	68fa      	ldr	r2, [r7, #12]
 800fe36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe3a:	f023 0302 	bic.w	r3, r3, #2
 800fe3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fe40:	2300      	movs	r3, #0
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3714      	adds	r7, #20
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr

0800fe4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fe4e:	b480      	push	{r7}
 800fe50:	b085      	sub	sp, #20
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe68:	f023 0303 	bic.w	r3, r3, #3
 800fe6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe7c:	f043 0302 	orr.w	r3, r3, #2
 800fe80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fe82:	2300      	movs	r3, #0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3714      	adds	r7, #20
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b085      	sub	sp, #20
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	695b      	ldr	r3, [r3, #20]
 800fe9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	699b      	ldr	r3, [r3, #24]
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	4013      	ands	r3, r2
 800fea6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fea8:	68fb      	ldr	r3, [r7, #12]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3714      	adds	r7, #20
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr

0800feb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800feb6:	b480      	push	{r7}
 800feb8:	b085      	sub	sp, #20
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fec8:	699b      	ldr	r3, [r3, #24]
 800feca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fed2:	69db      	ldr	r3, [r3, #28]
 800fed4:	68ba      	ldr	r2, [r7, #8]
 800fed6:	4013      	ands	r3, r2
 800fed8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	0c1b      	lsrs	r3, r3, #16
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3714      	adds	r7, #20
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr

0800feea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800feea:	b480      	push	{r7}
 800feec:	b085      	sub	sp, #20
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fefc:	699b      	ldr	r3, [r3, #24]
 800fefe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff06:	69db      	ldr	r3, [r3, #28]
 800ff08:	68ba      	ldr	r2, [r7, #8]
 800ff0a:	4013      	ands	r3, r2
 800ff0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	b29b      	uxth	r3, r3
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3714      	adds	r7, #20
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr

0800ff1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ff1e:	b480      	push	{r7}
 800ff20:	b085      	sub	sp, #20
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
 800ff26:	460b      	mov	r3, r1
 800ff28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ff2e:	78fb      	ldrb	r3, [r7, #3]
 800ff30:	015a      	lsls	r2, r3, #5
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	4413      	add	r3, r2
 800ff36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff3a:	689b      	ldr	r3, [r3, #8]
 800ff3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff44:	695b      	ldr	r3, [r3, #20]
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	4013      	ands	r3, r2
 800ff4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ff4c:	68bb      	ldr	r3, [r7, #8]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3714      	adds	r7, #20
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr

0800ff5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b087      	sub	sp, #28
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	460b      	mov	r3, r1
 800ff64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff70:	691b      	ldr	r3, [r3, #16]
 800ff72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ff7e:	78fb      	ldrb	r3, [r7, #3]
 800ff80:	f003 030f 	and.w	r3, r3, #15
 800ff84:	68fa      	ldr	r2, [r7, #12]
 800ff86:	fa22 f303 	lsr.w	r3, r2, r3
 800ff8a:	01db      	lsls	r3, r3, #7
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	693a      	ldr	r2, [r7, #16]
 800ff90:	4313      	orrs	r3, r2
 800ff92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ff94:	78fb      	ldrb	r3, [r7, #3]
 800ff96:	015a      	lsls	r2, r3, #5
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	4413      	add	r3, r2
 800ff9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa0:	689b      	ldr	r3, [r3, #8]
 800ffa2:	693a      	ldr	r2, [r7, #16]
 800ffa4:	4013      	ands	r3, r2
 800ffa6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ffa8:	68bb      	ldr	r3, [r7, #8]
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	371c      	adds	r7, #28
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr

0800ffb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ffb6:	b480      	push	{r7}
 800ffb8:	b083      	sub	sp, #12
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	695b      	ldr	r3, [r3, #20]
 800ffc2:	f003 0301 	and.w	r3, r3, #1
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	370c      	adds	r7, #12
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr
	...

0800ffd4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b085      	sub	sp, #20
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffee:	4619      	mov	r1, r3
 800fff0:	4b09      	ldr	r3, [pc, #36]	; (8010018 <USB_ActivateSetup+0x44>)
 800fff2:	4013      	ands	r3, r2
 800fff4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	68fa      	ldr	r2, [r7, #12]
 8010000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010008:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801000a:	2300      	movs	r3, #0
}
 801000c:	4618      	mov	r0, r3
 801000e:	3714      	adds	r7, #20
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr
 8010018:	fffff800 	.word	0xfffff800

0801001c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801001c:	b480      	push	{r7}
 801001e:	b087      	sub	sp, #28
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	460b      	mov	r3, r1
 8010026:	607a      	str	r2, [r7, #4]
 8010028:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	333c      	adds	r3, #60	; 0x3c
 8010032:	3304      	adds	r3, #4
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	4a26      	ldr	r2, [pc, #152]	; (80100d4 <USB_EP0_OutStart+0xb8>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d90a      	bls.n	8010056 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801004c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010050:	d101      	bne.n	8010056 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010052:	2300      	movs	r3, #0
 8010054:	e037      	b.n	80100c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801005c:	461a      	mov	r2, r3
 801005e:	2300      	movs	r3, #0
 8010060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010068:	691b      	ldr	r3, [r3, #16]
 801006a:	697a      	ldr	r2, [r7, #20]
 801006c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010070:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	697a      	ldr	r2, [r7, #20]
 8010080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010084:	f043 0318 	orr.w	r3, r3, #24
 8010088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010090:	691b      	ldr	r3, [r3, #16]
 8010092:	697a      	ldr	r2, [r7, #20]
 8010094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010098:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801009c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801009e:	7afb      	ldrb	r3, [r7, #11]
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d10f      	bne.n	80100c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100aa:	461a      	mov	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	697a      	ldr	r2, [r7, #20]
 80100ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80100c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80100c4:	2300      	movs	r3, #0
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	371c      	adds	r7, #28
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr
 80100d2:	bf00      	nop
 80100d4:	4f54300a 	.word	0x4f54300a

080100d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80100d8:	b480      	push	{r7}
 80100da:	b085      	sub	sp, #20
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80100e0:	2300      	movs	r3, #0
 80100e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	3301      	adds	r3, #1
 80100e8:	60fb      	str	r3, [r7, #12]
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	4a13      	ldr	r2, [pc, #76]	; (801013c <USB_CoreReset+0x64>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d901      	bls.n	80100f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80100f2:	2303      	movs	r3, #3
 80100f4:	e01b      	b.n	801012e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	691b      	ldr	r3, [r3, #16]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	daf2      	bge.n	80100e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80100fe:	2300      	movs	r3, #0
 8010100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	f043 0201 	orr.w	r2, r3, #1
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	3301      	adds	r3, #1
 8010112:	60fb      	str	r3, [r7, #12]
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	4a09      	ldr	r2, [pc, #36]	; (801013c <USB_CoreReset+0x64>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d901      	bls.n	8010120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801011c:	2303      	movs	r3, #3
 801011e:	e006      	b.n	801012e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	691b      	ldr	r3, [r3, #16]
 8010124:	f003 0301 	and.w	r3, r3, #1
 8010128:	2b01      	cmp	r3, #1
 801012a:	d0f0      	beq.n	801010e <USB_CoreReset+0x36>

  return HAL_OK;
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	3714      	adds	r7, #20
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	00030d40 	.word	0x00030d40

08010140 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010144:	4904      	ldr	r1, [pc, #16]	; (8010158 <MX_FATFS_Init+0x18>)
 8010146:	4805      	ldr	r0, [pc, #20]	; (801015c <MX_FATFS_Init+0x1c>)
 8010148:	f001 fea0 	bl	8011e8c <FATFS_LinkDriver>
 801014c:	4603      	mov	r3, r0
 801014e:	461a      	mov	r2, r3
 8010150:	4b03      	ldr	r3, [pc, #12]	; (8010160 <MX_FATFS_Init+0x20>)
 8010152:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010154:	bf00      	nop
 8010156:	bd80      	pop	{r7, pc}
 8010158:	240005b4 	.word	0x240005b4
 801015c:	08012c40 	.word	0x08012c40
 8010160:	240005b0 	.word	0x240005b0

08010164 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801016a:	2300      	movs	r3, #0
 801016c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801016e:	f000 f885 	bl	801027c <BSP_SD_IsDetected>
 8010172:	4603      	mov	r3, r0
 8010174:	2b01      	cmp	r3, #1
 8010176:	d001      	beq.n	801017c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010178:	2302      	movs	r3, #2
 801017a:	e012      	b.n	80101a2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801017c:	480b      	ldr	r0, [pc, #44]	; (80101ac <BSP_SD_Init+0x48>)
 801017e:	f7f9 fdb5 	bl	8009cec <HAL_SD_Init>
 8010182:	4603      	mov	r3, r0
 8010184:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010186:	79fb      	ldrb	r3, [r7, #7]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d109      	bne.n	80101a0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801018c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010190:	4806      	ldr	r0, [pc, #24]	; (80101ac <BSP_SD_Init+0x48>)
 8010192:	f7fa fc59 	bl	800aa48 <HAL_SD_ConfigWideBusOperation>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d001      	beq.n	80101a0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801019c:	2301      	movs	r3, #1
 801019e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80101a0:	79fb      	ldrb	r3, [r7, #7]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3708      	adds	r7, #8
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	240002d4 	.word	0x240002d4

080101b0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80101bc:	2300      	movs	r3, #0
 80101be:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	68ba      	ldr	r2, [r7, #8]
 80101c4:	68f9      	ldr	r1, [r7, #12]
 80101c6:	4806      	ldr	r0, [pc, #24]	; (80101e0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80101c8:	f7f9 fea8 	bl	8009f1c <HAL_SD_ReadBlocks_DMA>
 80101cc:	4603      	mov	r3, r0
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d001      	beq.n	80101d6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80101d2:	2301      	movs	r3, #1
 80101d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80101d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3718      	adds	r7, #24
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	240002d4 	.word	0x240002d4

080101e4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b086      	sub	sp, #24
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80101f0:	2300      	movs	r3, #0
 80101f2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	68ba      	ldr	r2, [r7, #8]
 80101f8:	68f9      	ldr	r1, [r7, #12]
 80101fa:	4806      	ldr	r0, [pc, #24]	; (8010214 <BSP_SD_WriteBlocks_DMA+0x30>)
 80101fc:	f7f9 ff36 	bl	800a06c <HAL_SD_WriteBlocks_DMA>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d001      	beq.n	801020a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801020a:	7dfb      	ldrb	r3, [r7, #23]
}
 801020c:	4618      	mov	r0, r3
 801020e:	3718      	adds	r7, #24
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	240002d4 	.word	0x240002d4

08010218 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801021c:	4805      	ldr	r0, [pc, #20]	; (8010234 <BSP_SD_GetCardState+0x1c>)
 801021e:	f7fa fd23 	bl	800ac68 <HAL_SD_GetCardState>
 8010222:	4603      	mov	r3, r0
 8010224:	2b04      	cmp	r3, #4
 8010226:	bf14      	ite	ne
 8010228:	2301      	movne	r3, #1
 801022a:	2300      	moveq	r3, #0
 801022c:	b2db      	uxtb	r3, r3
}
 801022e:	4618      	mov	r0, r3
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	240002d4 	.word	0x240002d4

08010238 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010240:	6879      	ldr	r1, [r7, #4]
 8010242:	4803      	ldr	r0, [pc, #12]	; (8010250 <BSP_SD_GetCardInfo+0x18>)
 8010244:	f7fa fbd4 	bl	800a9f0 <HAL_SD_GetCardInfo>
}
 8010248:	bf00      	nop
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	240002d4 	.word	0x240002d4

08010254 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801025c:	f000 f984 	bl	8010568 <BSP_SD_WriteCpltCallback>
}
 8010260:	bf00      	nop
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010270:	f000 f986 	bl	8010580 <BSP_SD_ReadCpltCallback>
}
 8010274:	bf00      	nop
 8010276:	3708      	adds	r7, #8
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010282:	2301      	movs	r3, #1
 8010284:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8010286:	79fb      	ldrb	r3, [r7, #7]
 8010288:	b2db      	uxtb	r3, r3
}
 801028a:	4618      	mov	r0, r3
 801028c:	370c      	adds	r7, #12
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr

08010296 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b084      	sub	sp, #16
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801029e:	f7f1 fbdd 	bl	8001a5c <HAL_GetTick>
 80102a2:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80102a4:	e006      	b.n	80102b4 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80102a6:	f7ff ffb7 	bl	8010218 <BSP_SD_GetCardState>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d101      	bne.n	80102b4 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80102b0:	2300      	movs	r3, #0
 80102b2:	e009      	b.n	80102c8 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80102b4:	f7f1 fbd2 	bl	8001a5c <HAL_GetTick>
 80102b8:	4602      	mov	r2, r0
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	1ad3      	subs	r3, r2, r3
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d8f0      	bhi.n	80102a6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80102c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	4603      	mov	r3, r0
 80102d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80102da:	4b0b      	ldr	r3, [pc, #44]	; (8010308 <SD_CheckStatus+0x38>)
 80102dc:	2201      	movs	r2, #1
 80102de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80102e0:	f7ff ff9a 	bl	8010218 <BSP_SD_GetCardState>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d107      	bne.n	80102fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80102ea:	4b07      	ldr	r3, [pc, #28]	; (8010308 <SD_CheckStatus+0x38>)
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	f023 0301 	bic.w	r3, r3, #1
 80102f4:	b2da      	uxtb	r2, r3
 80102f6:	4b04      	ldr	r3, [pc, #16]	; (8010308 <SD_CheckStatus+0x38>)
 80102f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80102fa:	4b03      	ldr	r3, [pc, #12]	; (8010308 <SD_CheckStatus+0x38>)
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	b2db      	uxtb	r3, r3
}
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	24000021 	.word	0x24000021

0801030c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	4603      	mov	r3, r0
 8010314:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010316:	f7ff ff25 	bl	8010164 <BSP_SD_Init>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d107      	bne.n	8010330 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010320:	79fb      	ldrb	r3, [r7, #7]
 8010322:	4618      	mov	r0, r3
 8010324:	f7ff ffd4 	bl	80102d0 <SD_CheckStatus>
 8010328:	4603      	mov	r3, r0
 801032a:	461a      	mov	r2, r3
 801032c:	4b04      	ldr	r3, [pc, #16]	; (8010340 <SD_initialize+0x34>)
 801032e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010330:	4b03      	ldr	r3, [pc, #12]	; (8010340 <SD_initialize+0x34>)
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	b2db      	uxtb	r3, r3
}
 8010336:	4618      	mov	r0, r3
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	24000021 	.word	0x24000021

08010344 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	4603      	mov	r3, r0
 801034c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801034e:	79fb      	ldrb	r3, [r7, #7]
 8010350:	4618      	mov	r0, r3
 8010352:	f7ff ffbd 	bl	80102d0 <SD_CheckStatus>
 8010356:	4603      	mov	r3, r0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3708      	adds	r7, #8
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b086      	sub	sp, #24
 8010364:	af00      	add	r7, sp, #0
 8010366:	60b9      	str	r1, [r7, #8]
 8010368:	607a      	str	r2, [r7, #4]
 801036a:	603b      	str	r3, [r7, #0]
 801036c:	4603      	mov	r3, r0
 801036e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010370:	2301      	movs	r3, #1
 8010372:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010374:	f247 5030 	movw	r0, #30000	; 0x7530
 8010378:	f7ff ff8d 	bl	8010296 <SD_CheckStatusWithTimeout>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	da01      	bge.n	8010386 <SD_read+0x26>
  {
    return res;
 8010382:	7dfb      	ldrb	r3, [r7, #23]
 8010384:	e03b      	b.n	80103fe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010386:	683a      	ldr	r2, [r7, #0]
 8010388:	6879      	ldr	r1, [r7, #4]
 801038a:	68b8      	ldr	r0, [r7, #8]
 801038c:	f7ff ff10 	bl	80101b0 <BSP_SD_ReadBlocks_DMA>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d132      	bne.n	80103fc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010396:	4b1c      	ldr	r3, [pc, #112]	; (8010408 <SD_read+0xa8>)
 8010398:	2200      	movs	r2, #0
 801039a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801039c:	f7f1 fb5e 	bl	8001a5c <HAL_GetTick>
 80103a0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80103a2:	bf00      	nop
 80103a4:	4b18      	ldr	r3, [pc, #96]	; (8010408 <SD_read+0xa8>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d108      	bne.n	80103be <SD_read+0x5e>
 80103ac:	f7f1 fb56 	bl	8001a5c <HAL_GetTick>
 80103b0:	4602      	mov	r2, r0
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	f247 522f 	movw	r2, #29999	; 0x752f
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d9f2      	bls.n	80103a4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80103be:	4b12      	ldr	r3, [pc, #72]	; (8010408 <SD_read+0xa8>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d102      	bne.n	80103cc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80103c6:	2301      	movs	r3, #1
 80103c8:	75fb      	strb	r3, [r7, #23]
 80103ca:	e017      	b.n	80103fc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80103cc:	4b0e      	ldr	r3, [pc, #56]	; (8010408 <SD_read+0xa8>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80103d2:	f7f1 fb43 	bl	8001a5c <HAL_GetTick>
 80103d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103d8:	e007      	b.n	80103ea <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80103da:	f7ff ff1d 	bl	8010218 <BSP_SD_GetCardState>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d102      	bne.n	80103ea <SD_read+0x8a>
          {
            res = RES_OK;
 80103e4:	2300      	movs	r3, #0
 80103e6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80103e8:	e008      	b.n	80103fc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103ea:	f7f1 fb37 	bl	8001a5c <HAL_GetTick>
 80103ee:	4602      	mov	r2, r0
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	1ad3      	subs	r3, r2, r3
 80103f4:	f247 522f 	movw	r2, #29999	; 0x752f
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d9ee      	bls.n	80103da <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80103fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3718      	adds	r7, #24
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	24000220 	.word	0x24000220

0801040c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b086      	sub	sp, #24
 8010410:	af00      	add	r7, sp, #0
 8010412:	60b9      	str	r1, [r7, #8]
 8010414:	607a      	str	r2, [r7, #4]
 8010416:	603b      	str	r3, [r7, #0]
 8010418:	4603      	mov	r3, r0
 801041a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801041c:	2301      	movs	r3, #1
 801041e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010420:	4b24      	ldr	r3, [pc, #144]	; (80104b4 <SD_write+0xa8>)
 8010422:	2200      	movs	r2, #0
 8010424:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010426:	f247 5030 	movw	r0, #30000	; 0x7530
 801042a:	f7ff ff34 	bl	8010296 <SD_CheckStatusWithTimeout>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	da01      	bge.n	8010438 <SD_write+0x2c>
  {
    return res;
 8010434:	7dfb      	ldrb	r3, [r7, #23]
 8010436:	e038      	b.n	80104aa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010438:	683a      	ldr	r2, [r7, #0]
 801043a:	6879      	ldr	r1, [r7, #4]
 801043c:	68b8      	ldr	r0, [r7, #8]
 801043e:	f7ff fed1 	bl	80101e4 <BSP_SD_WriteBlocks_DMA>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d12f      	bne.n	80104a8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010448:	f7f1 fb08 	bl	8001a5c <HAL_GetTick>
 801044c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801044e:	bf00      	nop
 8010450:	4b18      	ldr	r3, [pc, #96]	; (80104b4 <SD_write+0xa8>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d108      	bne.n	801046a <SD_write+0x5e>
 8010458:	f7f1 fb00 	bl	8001a5c <HAL_GetTick>
 801045c:	4602      	mov	r2, r0
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	1ad3      	subs	r3, r2, r3
 8010462:	f247 522f 	movw	r2, #29999	; 0x752f
 8010466:	4293      	cmp	r3, r2
 8010468:	d9f2      	bls.n	8010450 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801046a:	4b12      	ldr	r3, [pc, #72]	; (80104b4 <SD_write+0xa8>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d102      	bne.n	8010478 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010472:	2301      	movs	r3, #1
 8010474:	75fb      	strb	r3, [r7, #23]
 8010476:	e017      	b.n	80104a8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010478:	4b0e      	ldr	r3, [pc, #56]	; (80104b4 <SD_write+0xa8>)
 801047a:	2200      	movs	r2, #0
 801047c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801047e:	f7f1 faed 	bl	8001a5c <HAL_GetTick>
 8010482:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010484:	e007      	b.n	8010496 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010486:	f7ff fec7 	bl	8010218 <BSP_SD_GetCardState>
 801048a:	4603      	mov	r3, r0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d102      	bne.n	8010496 <SD_write+0x8a>
          {
            res = RES_OK;
 8010490:	2300      	movs	r3, #0
 8010492:	75fb      	strb	r3, [r7, #23]
            break;
 8010494:	e008      	b.n	80104a8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010496:	f7f1 fae1 	bl	8001a5c <HAL_GetTick>
 801049a:	4602      	mov	r2, r0
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80104a4:	4293      	cmp	r3, r2
 80104a6:	d9ee      	bls.n	8010486 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80104a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3718      	adds	r7, #24
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	2400021c 	.word	0x2400021c

080104b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b08c      	sub	sp, #48	; 0x30
 80104bc:	af00      	add	r7, sp, #0
 80104be:	4603      	mov	r3, r0
 80104c0:	603a      	str	r2, [r7, #0]
 80104c2:	71fb      	strb	r3, [r7, #7]
 80104c4:	460b      	mov	r3, r1
 80104c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80104c8:	2301      	movs	r3, #1
 80104ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80104ce:	4b25      	ldr	r3, [pc, #148]	; (8010564 <SD_ioctl+0xac>)
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	f003 0301 	and.w	r3, r3, #1
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d001      	beq.n	80104e0 <SD_ioctl+0x28>
 80104dc:	2303      	movs	r3, #3
 80104de:	e03c      	b.n	801055a <SD_ioctl+0xa2>

  switch (cmd)
 80104e0:	79bb      	ldrb	r3, [r7, #6]
 80104e2:	2b03      	cmp	r3, #3
 80104e4:	d834      	bhi.n	8010550 <SD_ioctl+0x98>
 80104e6:	a201      	add	r2, pc, #4	; (adr r2, 80104ec <SD_ioctl+0x34>)
 80104e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104ec:	080104fd 	.word	0x080104fd
 80104f0:	08010505 	.word	0x08010505
 80104f4:	0801051d 	.word	0x0801051d
 80104f8:	08010537 	.word	0x08010537
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80104fc:	2300      	movs	r3, #0
 80104fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010502:	e028      	b.n	8010556 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010504:	f107 0308 	add.w	r3, r7, #8
 8010508:	4618      	mov	r0, r3
 801050a:	f7ff fe95 	bl	8010238 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801050e:	6a3a      	ldr	r2, [r7, #32]
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010514:	2300      	movs	r3, #0
 8010516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801051a:	e01c      	b.n	8010556 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801051c:	f107 0308 	add.w	r3, r7, #8
 8010520:	4618      	mov	r0, r3
 8010522:	f7ff fe89 	bl	8010238 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010528:	b29a      	uxth	r2, r3
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801052e:	2300      	movs	r3, #0
 8010530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010534:	e00f      	b.n	8010556 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010536:	f107 0308 	add.w	r3, r7, #8
 801053a:	4618      	mov	r0, r3
 801053c:	f7ff fe7c 	bl	8010238 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010542:	0a5a      	lsrs	r2, r3, #9
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010548:	2300      	movs	r3, #0
 801054a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801054e:	e002      	b.n	8010556 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010550:	2304      	movs	r3, #4
 8010552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801055a:	4618      	mov	r0, r3
 801055c:	3730      	adds	r7, #48	; 0x30
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	24000021 	.word	0x24000021

08010568 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010568:	b480      	push	{r7}
 801056a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801056c:	4b03      	ldr	r3, [pc, #12]	; (801057c <BSP_SD_WriteCpltCallback+0x14>)
 801056e:	2201      	movs	r2, #1
 8010570:	601a      	str	r2, [r3, #0]
}
 8010572:	bf00      	nop
 8010574:	46bd      	mov	sp, r7
 8010576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057a:	4770      	bx	lr
 801057c:	2400021c 	.word	0x2400021c

08010580 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010580:	b480      	push	{r7}
 8010582:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010584:	4b03      	ldr	r3, [pc, #12]	; (8010594 <BSP_SD_ReadCpltCallback+0x14>)
 8010586:	2201      	movs	r2, #1
 8010588:	601a      	str	r2, [r3, #0]
}
 801058a:	bf00      	nop
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr
 8010594:	24000220 	.word	0x24000220

08010598 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	460b      	mov	r3, r1
 80105a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80105a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80105a8:	f002 fa1a 	bl	80129e0 <malloc>
 80105ac:	4603      	mov	r3, r0
 80105ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d105      	bne.n	80105c2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2200      	movs	r2, #0
 80105ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80105be:	2302      	movs	r3, #2
 80105c0:	e066      	b.n	8010690 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	7c1b      	ldrb	r3, [r3, #16]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d119      	bne.n	8010606 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80105d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105d6:	2202      	movs	r2, #2
 80105d8:	2181      	movs	r1, #129	; 0x81
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f002 f887 	bl	80126ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80105e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105ea:	2202      	movs	r2, #2
 80105ec:	2101      	movs	r1, #1
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f002 f87d 	bl	80126ee <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2201      	movs	r2, #1
 80105f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2210      	movs	r2, #16
 8010600:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010604:	e016      	b.n	8010634 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010606:	2340      	movs	r3, #64	; 0x40
 8010608:	2202      	movs	r2, #2
 801060a:	2181      	movs	r1, #129	; 0x81
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f002 f86e 	bl	80126ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2201      	movs	r2, #1
 8010616:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010618:	2340      	movs	r3, #64	; 0x40
 801061a:	2202      	movs	r2, #2
 801061c:	2101      	movs	r1, #1
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f002 f865 	bl	80126ee <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2201      	movs	r2, #1
 8010628:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2210      	movs	r2, #16
 8010630:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010634:	2308      	movs	r3, #8
 8010636:	2203      	movs	r2, #3
 8010638:	2182      	movs	r1, #130	; 0x82
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f002 f857 	bl	80126ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2201      	movs	r2, #1
 8010644:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2200      	movs	r2, #0
 8010656:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2200      	movs	r2, #0
 801065e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	7c1b      	ldrb	r3, [r3, #16]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d109      	bne.n	801067e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010674:	2101      	movs	r1, #1
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f002 f928 	bl	80128cc <USBD_LL_PrepareReceive>
 801067c:	e007      	b.n	801068e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010684:	2340      	movs	r3, #64	; 0x40
 8010686:	2101      	movs	r1, #1
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f002 f91f 	bl	80128cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801068e:	2300      	movs	r3, #0
}
 8010690:	4618      	mov	r0, r3
 8010692:	3710      	adds	r7, #16
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	460b      	mov	r3, r1
 80106a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80106a4:	2300      	movs	r3, #0
 80106a6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80106a8:	2181      	movs	r1, #129	; 0x81
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f002 f845 	bl	801273a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80106b6:	2101      	movs	r1, #1
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f002 f83e 	bl	801273a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2200      	movs	r2, #0
 80106c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80106c6:	2182      	movs	r1, #130	; 0x82
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f002 f836 	bl	801273a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2200      	movs	r2, #0
 80106da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00e      	beq.n	8010706 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106f8:	4618      	mov	r0, r3
 80106fa:	f002 f979 	bl	80129f0 <free>
    pdev->pClassData = NULL;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2200      	movs	r2, #0
 8010702:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010706:	7bfb      	ldrb	r3, [r7, #15]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3710      	adds	r7, #16
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010720:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010722:	2300      	movs	r3, #0
 8010724:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010726:	2300      	movs	r3, #0
 8010728:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801072a:	2300      	movs	r3, #0
 801072c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010736:	2b00      	cmp	r3, #0
 8010738:	d03a      	beq.n	80107b0 <USBD_CDC_Setup+0xa0>
 801073a:	2b20      	cmp	r3, #32
 801073c:	f040 809a 	bne.w	8010874 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	88db      	ldrh	r3, [r3, #6]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d029      	beq.n	801079c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	b25b      	sxtb	r3, r3
 801074e:	2b00      	cmp	r3, #0
 8010750:	da11      	bge.n	8010776 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010758:	689b      	ldr	r3, [r3, #8]
 801075a:	683a      	ldr	r2, [r7, #0]
 801075c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 801075e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010760:	683a      	ldr	r2, [r7, #0]
 8010762:	88d2      	ldrh	r2, [r2, #6]
 8010764:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010766:	6939      	ldr	r1, [r7, #16]
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	88db      	ldrh	r3, [r3, #6]
 801076c:	461a      	mov	r2, r3
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f001 fabf 	bl	8011cf2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010774:	e085      	b.n	8010882 <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	785a      	ldrb	r2, [r3, #1]
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	88db      	ldrh	r3, [r3, #6]
 8010784:	b2da      	uxtb	r2, r3
 8010786:	693b      	ldr	r3, [r7, #16]
 8010788:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801078c:	6939      	ldr	r1, [r7, #16]
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	88db      	ldrh	r3, [r3, #6]
 8010792:	461a      	mov	r2, r3
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f001 fad8 	bl	8011d4a <USBD_CtlPrepareRx>
    break;
 801079a:	e072      	b.n	8010882 <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107a2:	689b      	ldr	r3, [r3, #8]
 80107a4:	683a      	ldr	r2, [r7, #0]
 80107a6:	7850      	ldrb	r0, [r2, #1]
 80107a8:	2200      	movs	r2, #0
 80107aa:	6839      	ldr	r1, [r7, #0]
 80107ac:	4798      	blx	r3
    break;
 80107ae:	e068      	b.n	8010882 <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	785b      	ldrb	r3, [r3, #1]
 80107b4:	2b0b      	cmp	r3, #11
 80107b6:	d852      	bhi.n	801085e <USBD_CDC_Setup+0x14e>
 80107b8:	a201      	add	r2, pc, #4	; (adr r2, 80107c0 <USBD_CDC_Setup+0xb0>)
 80107ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107be:	bf00      	nop
 80107c0:	080107f1 	.word	0x080107f1
 80107c4:	0801086d 	.word	0x0801086d
 80107c8:	0801085f 	.word	0x0801085f
 80107cc:	0801085f 	.word	0x0801085f
 80107d0:	0801085f 	.word	0x0801085f
 80107d4:	0801085f 	.word	0x0801085f
 80107d8:	0801085f 	.word	0x0801085f
 80107dc:	0801085f 	.word	0x0801085f
 80107e0:	0801085f 	.word	0x0801085f
 80107e4:	0801085f 	.word	0x0801085f
 80107e8:	0801081b 	.word	0x0801081b
 80107ec:	08010845 	.word	0x08010845
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	2b03      	cmp	r3, #3
 80107fa:	d107      	bne.n	801080c <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80107fc:	f107 030c 	add.w	r3, r7, #12
 8010800:	2202      	movs	r2, #2
 8010802:	4619      	mov	r1, r3
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f001 fa74 	bl	8011cf2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801080a:	e032      	b.n	8010872 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 801080c:	6839      	ldr	r1, [r7, #0]
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f001 f9fe 	bl	8011c10 <USBD_CtlError>
        ret = USBD_FAIL;
 8010814:	2303      	movs	r3, #3
 8010816:	75fb      	strb	r3, [r7, #23]
      break;
 8010818:	e02b      	b.n	8010872 <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010820:	b2db      	uxtb	r3, r3
 8010822:	2b03      	cmp	r3, #3
 8010824:	d107      	bne.n	8010836 <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010826:	f107 030f 	add.w	r3, r7, #15
 801082a:	2201      	movs	r2, #1
 801082c:	4619      	mov	r1, r3
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f001 fa5f 	bl	8011cf2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010834:	e01d      	b.n	8010872 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 8010836:	6839      	ldr	r1, [r7, #0]
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f001 f9e9 	bl	8011c10 <USBD_CtlError>
        ret = USBD_FAIL;
 801083e:	2303      	movs	r3, #3
 8010840:	75fb      	strb	r3, [r7, #23]
      break;
 8010842:	e016      	b.n	8010872 <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801084a:	b2db      	uxtb	r3, r3
 801084c:	2b03      	cmp	r3, #3
 801084e:	d00f      	beq.n	8010870 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 8010850:	6839      	ldr	r1, [r7, #0]
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f001 f9dc 	bl	8011c10 <USBD_CtlError>
        ret = USBD_FAIL;
 8010858:	2303      	movs	r3, #3
 801085a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801085c:	e008      	b.n	8010870 <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 801085e:	6839      	ldr	r1, [r7, #0]
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f001 f9d5 	bl	8011c10 <USBD_CtlError>
      ret = USBD_FAIL;
 8010866:	2303      	movs	r3, #3
 8010868:	75fb      	strb	r3, [r7, #23]
      break;
 801086a:	e002      	b.n	8010872 <USBD_CDC_Setup+0x162>
      break;
 801086c:	bf00      	nop
 801086e:	e008      	b.n	8010882 <USBD_CDC_Setup+0x172>
      break;
 8010870:	bf00      	nop
    }
    break;
 8010872:	e006      	b.n	8010882 <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 8010874:	6839      	ldr	r1, [r7, #0]
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f001 f9ca 	bl	8011c10 <USBD_CtlError>
    ret = USBD_FAIL;
 801087c:	2303      	movs	r3, #3
 801087e:	75fb      	strb	r3, [r7, #23]
    break;
 8010880:	bf00      	nop
  }

  return (uint8_t)ret;
 8010882:	7dfb      	ldrb	r3, [r7, #23]
}
 8010884:	4618      	mov	r0, r3
 8010886:	3718      	adds	r7, #24
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	460b      	mov	r3, r1
 8010896:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801089e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80108aa:	2303      	movs	r3, #3
 80108ac:	e049      	b.n	8010942 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80108b6:	78fa      	ldrb	r2, [r7, #3]
 80108b8:	6879      	ldr	r1, [r7, #4]
 80108ba:	4613      	mov	r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	4413      	add	r3, r2
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	440b      	add	r3, r1
 80108c4:	3318      	adds	r3, #24
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d029      	beq.n	8010920 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80108cc:	78fa      	ldrb	r2, [r7, #3]
 80108ce:	6879      	ldr	r1, [r7, #4]
 80108d0:	4613      	mov	r3, r2
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	4413      	add	r3, r2
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	440b      	add	r3, r1
 80108da:	3318      	adds	r3, #24
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	78f9      	ldrb	r1, [r7, #3]
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	460b      	mov	r3, r1
 80108e4:	00db      	lsls	r3, r3, #3
 80108e6:	1a5b      	subs	r3, r3, r1
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	4403      	add	r3, r0
 80108ec:	3344      	adds	r3, #68	; 0x44
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80108f4:	fb03 f301 	mul.w	r3, r3, r1
 80108f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d110      	bne.n	8010920 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80108fe:	78fa      	ldrb	r2, [r7, #3]
 8010900:	6879      	ldr	r1, [r7, #4]
 8010902:	4613      	mov	r3, r2
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	4413      	add	r3, r2
 8010908:	009b      	lsls	r3, r3, #2
 801090a:	440b      	add	r3, r1
 801090c:	3318      	adds	r3, #24
 801090e:	2200      	movs	r2, #0
 8010910:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010912:	78f9      	ldrb	r1, [r7, #3]
 8010914:	2300      	movs	r3, #0
 8010916:	2200      	movs	r2, #0
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f001 ffb6 	bl	801288a <USBD_LL_Transmit>
 801091e:	e00f      	b.n	8010940 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	2200      	movs	r2, #0
 8010924:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801092e:	691b      	ldr	r3, [r3, #16]
 8010930:	68ba      	ldr	r2, [r7, #8]
 8010932:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010936:	68ba      	ldr	r2, [r7, #8]
 8010938:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801093c:	78fa      	ldrb	r2, [r7, #3]
 801093e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8010940:	2300      	movs	r3, #0
}
 8010942:	4618      	mov	r0, r3
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b084      	sub	sp, #16
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
 8010952:	460b      	mov	r3, r1
 8010954:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801095c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010964:	2b00      	cmp	r3, #0
 8010966:	d101      	bne.n	801096c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010968:	2303      	movs	r3, #3
 801096a:	e015      	b.n	8010998 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801096c:	78fb      	ldrb	r3, [r7, #3]
 801096e:	4619      	mov	r1, r3
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f001 ffcc 	bl	801290e <USBD_LL_GetRxDataSize>
 8010976:	4602      	mov	r2, r0
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010984:	68db      	ldr	r3, [r3, #12]
 8010986:	68fa      	ldr	r2, [r7, #12]
 8010988:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010992:	4611      	mov	r1, r2
 8010994:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010996:	2300      	movs	r3, #0
}
 8010998:	4618      	mov	r0, r3
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d015      	beq.n	80109e6 <USBD_CDC_EP0_RxReady+0x46>
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80109c0:	2bff      	cmp	r3, #255	; 0xff
 80109c2:	d010      	beq.n	80109e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109ca:	689b      	ldr	r3, [r3, #8]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80109d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80109d4:	68fa      	ldr	r2, [r7, #12]
 80109d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80109da:	b292      	uxth	r2, r2
 80109dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	22ff      	movs	r2, #255	; 0xff
 80109e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80109e6:	2300      	movs	r3, #0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3710      	adds	r7, #16
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b083      	sub	sp, #12
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2243      	movs	r2, #67	; 0x43
 80109fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80109fe:	4b03      	ldr	r3, [pc, #12]	; (8010a0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	370c      	adds	r7, #12
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr
 8010a0c:	240000ac 	.word	0x240000ac

08010a10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2243      	movs	r2, #67	; 0x43
 8010a1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010a1e:	4b03      	ldr	r3, [pc, #12]	; (8010a2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	370c      	adds	r7, #12
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr
 8010a2c:	24000068 	.word	0x24000068

08010a30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2243      	movs	r2, #67	; 0x43
 8010a3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010a3e:	4b03      	ldr	r3, [pc, #12]	; (8010a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr
 8010a4c:	240000f0 	.word	0x240000f0

08010a50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b083      	sub	sp, #12
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	220a      	movs	r2, #10
 8010a5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010a5e:	4b03      	ldr	r3, [pc, #12]	; (8010a6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr
 8010a6c:	24000024 	.word	0x24000024

08010a70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d101      	bne.n	8010a84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010a80:	2303      	movs	r3, #3
 8010a82:	e004      	b.n	8010a8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	683a      	ldr	r2, [r7, #0]
 8010a88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010a8c:	2300      	movs	r3, #0
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	370c      	adds	r7, #12
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr

08010a9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010a9a:	b480      	push	{r7}
 8010a9c:	b087      	sub	sp, #28
 8010a9e:	af00      	add	r7, sp, #0
 8010aa0:	60f8      	str	r0, [r7, #12]
 8010aa2:	60b9      	str	r1, [r7, #8]
 8010aa4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010aac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	68ba      	ldr	r2, [r7, #8]
 8010ab2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010abe:	2300      	movs	r3, #0
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	371c      	adds	r7, #28
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010acc:	b480      	push	{r7}
 8010ace:	b085      	sub	sp, #20
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010adc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	683a      	ldr	r2, [r7, #0]
 8010ae2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010ae6:	2300      	movs	r3, #0
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3714      	adds	r7, #20
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010b04:	2301      	movs	r3, #1
 8010b06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d101      	bne.n	8010b16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010b12:	2303      	movs	r3, #3
 8010b14:	e01a      	b.n	8010b4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d114      	bne.n	8010b4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	2201      	movs	r2, #1
 8010b24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b3e:	2181      	movs	r1, #129	; 0x81
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f001 fea2 	bl	801288a <USBD_LL_Transmit>

    ret = USBD_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3710      	adds	r7, #16
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d101      	bne.n	8010b72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010b6e:	2303      	movs	r3, #3
 8010b70:	e016      	b.n	8010ba0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	7c1b      	ldrb	r3, [r3, #16]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d109      	bne.n	8010b8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b84:	2101      	movs	r1, #1
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f001 fea0 	bl	80128cc <USBD_LL_PrepareReceive>
 8010b8c:	e007      	b.n	8010b9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b94:	2340      	movs	r3, #64	; 0x40
 8010b96:	2101      	movs	r1, #1
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f001 fe97 	bl	80128cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010b9e:	2300      	movs	r3, #0
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3710      	adds	r7, #16
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b086      	sub	sp, #24
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	4613      	mov	r3, r2
 8010bb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d101      	bne.n	8010bc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010bbc:	2303      	movs	r3, #3
 8010bbe:	e025      	b.n	8010c0c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d003      	beq.n	8010bd2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d003      	beq.n	8010be4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2200      	movs	r2, #0
 8010be0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d003      	beq.n	8010bf2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	68ba      	ldr	r2, [r7, #8]
 8010bee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	79fa      	ldrb	r2, [r7, #7]
 8010bfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f001 fd09 	bl	8012618 <USBD_LL_Init>
 8010c06:	4603      	mov	r3, r0
 8010c08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3718      	adds	r7, #24
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d101      	bne.n	8010c2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010c28:	2303      	movs	r3, #3
 8010c2a:	e010      	b.n	8010c4e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	683a      	ldr	r2, [r7, #0]
 8010c30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c3c:	f107 020e 	add.w	r2, r7, #14
 8010c40:	4610      	mov	r0, r2
 8010c42:	4798      	blx	r3
 8010c44:	4602      	mov	r2, r0
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8010c4c:	2300      	movs	r3, #0
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3710      	adds	r7, #16
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b082      	sub	sp, #8
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f001 fd2a 	bl	80126b8 <USBD_LL_Start>
 8010c64:	4603      	mov	r3, r0
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3708      	adds	r7, #8
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010c6e:	b480      	push	{r7}
 8010c70:	b083      	sub	sp, #12
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010c76:	2300      	movs	r3, #0
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	370c      	adds	r7, #12
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010c90:	2303      	movs	r3, #3
 8010c92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d009      	beq.n	8010cb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	78fa      	ldrb	r2, [r7, #3]
 8010ca8:	4611      	mov	r1, r2
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	4798      	blx	r3
 8010cae:	4603      	mov	r3, r0
 8010cb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d007      	beq.n	8010ce2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	78fa      	ldrb	r2, [r7, #3]
 8010cdc:	4611      	mov	r1, r2
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	4798      	blx	r3
  }

  return USBD_OK;
 8010ce2:	2300      	movs	r3, #0
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010cfc:	6839      	ldr	r1, [r7, #0]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f000 ff4c 	bl	8011b9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2201      	movs	r2, #1
 8010d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010d12:	461a      	mov	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010d20:	f003 031f 	and.w	r3, r3, #31
 8010d24:	2b02      	cmp	r3, #2
 8010d26:	d01a      	beq.n	8010d5e <USBD_LL_SetupStage+0x72>
 8010d28:	2b02      	cmp	r3, #2
 8010d2a:	d822      	bhi.n	8010d72 <USBD_LL_SetupStage+0x86>
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <USBD_LL_SetupStage+0x4a>
 8010d30:	2b01      	cmp	r3, #1
 8010d32:	d00a      	beq.n	8010d4a <USBD_LL_SetupStage+0x5e>
 8010d34:	e01d      	b.n	8010d72 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 fa20 	bl	8011184 <USBD_StdDevReq>
 8010d44:	4603      	mov	r3, r0
 8010d46:	73fb      	strb	r3, [r7, #15]
      break;
 8010d48:	e020      	b.n	8010d8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010d50:	4619      	mov	r1, r3
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 fa84 	bl	8011260 <USBD_StdItfReq>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8010d5c:	e016      	b.n	8010d8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010d64:	4619      	mov	r1, r3
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 fac3 	bl	80112f2 <USBD_StdEPReq>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8010d70:	e00c      	b.n	8010d8c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010d78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	4619      	mov	r1, r3
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	f001 fcf9 	bl	8012778 <USBD_LL_StallEP>
 8010d86:	4603      	mov	r3, r0
 8010d88:	73fb      	strb	r3, [r7, #15]
      break;
 8010d8a:	bf00      	nop
  }

  return ret;
 8010d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3710      	adds	r7, #16
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010d96:	b580      	push	{r7, lr}
 8010d98:	b086      	sub	sp, #24
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	60f8      	str	r0, [r7, #12]
 8010d9e:	460b      	mov	r3, r1
 8010da0:	607a      	str	r2, [r7, #4]
 8010da2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010da4:	7afb      	ldrb	r3, [r7, #11]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d138      	bne.n	8010e1c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010db0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010db8:	2b03      	cmp	r3, #3
 8010dba:	d14c      	bne.n	8010e56 <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	689a      	ldr	r2, [r3, #8]
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d913      	bls.n	8010df0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	689a      	ldr	r2, [r3, #8]
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	1ad2      	subs	r2, r2, r3
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	68da      	ldr	r2, [r3, #12]
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	689b      	ldr	r3, [r3, #8]
 8010dde:	4293      	cmp	r3, r2
 8010de0:	bf28      	it	cs
 8010de2:	4613      	movcs	r3, r2
 8010de4:	461a      	mov	r2, r3
 8010de6:	6879      	ldr	r1, [r7, #4]
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	f000 ffcb 	bl	8011d84 <USBD_CtlContinueRx>
 8010dee:	e032      	b.n	8010e56 <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010df6:	691b      	ldr	r3, [r3, #16]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d00b      	beq.n	8010e14 <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e02:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010e04:	2b03      	cmp	r3, #3
 8010e06:	d105      	bne.n	8010e14 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e0e:	691b      	ldr	r3, [r3, #16]
 8010e10:	68f8      	ldr	r0, [r7, #12]
 8010e12:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f000 ffc6 	bl	8011da6 <USBD_CtlSendStatus>
 8010e1a:	e01c      	b.n	8010e56 <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e22:	699b      	ldr	r3, [r3, #24]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d014      	beq.n	8010e52 <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e2e:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 8010e30:	2b03      	cmp	r3, #3
 8010e32:	d10e      	bne.n	8010e52 <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e3a:	699b      	ldr	r3, [r3, #24]
 8010e3c:	7afa      	ldrb	r2, [r7, #11]
 8010e3e:	4611      	mov	r1, r2
 8010e40:	68f8      	ldr	r0, [r7, #12]
 8010e42:	4798      	blx	r3
 8010e44:	4603      	mov	r3, r0
 8010e46:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010e48:	7dfb      	ldrb	r3, [r7, #23]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d003      	beq.n	8010e56 <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 8010e4e:	7dfb      	ldrb	r3, [r7, #23]
 8010e50:	e002      	b.n	8010e58 <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010e52:	2303      	movs	r3, #3
 8010e54:	e000      	b.n	8010e58 <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 8010e56:	2300      	movs	r3, #0
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3718      	adds	r7, #24
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b086      	sub	sp, #24
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	460b      	mov	r3, r1
 8010e6a:	607a      	str	r2, [r7, #4]
 8010e6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010e6e:	7afb      	ldrb	r3, [r7, #11]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d16b      	bne.n	8010f4c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	3314      	adds	r3, #20
 8010e78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010e80:	2b02      	cmp	r3, #2
 8010e82:	d156      	bne.n	8010f32 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	689a      	ldr	r2, [r3, #8]
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d914      	bls.n	8010eba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	689a      	ldr	r2, [r3, #8]
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	1ad2      	subs	r2, r2, r3
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	689b      	ldr	r3, [r3, #8]
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	6879      	ldr	r1, [r7, #4]
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f000 ff3e 	bl	8011d28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010eac:	2300      	movs	r3, #0
 8010eae:	2200      	movs	r2, #0
 8010eb0:	2100      	movs	r1, #0
 8010eb2:	68f8      	ldr	r0, [r7, #12]
 8010eb4:	f001 fd0a 	bl	80128cc <USBD_LL_PrepareReceive>
 8010eb8:	e03b      	b.n	8010f32 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	68da      	ldr	r2, [r3, #12]
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	689b      	ldr	r3, [r3, #8]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d11c      	bne.n	8010f00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	685a      	ldr	r2, [r3, #4]
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d316      	bcc.n	8010f00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	685a      	ldr	r2, [r3, #4]
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d20f      	bcs.n	8010f00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	68f8      	ldr	r0, [r7, #12]
 8010ee6:	f000 ff1f 	bl	8011d28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2200      	movs	r2, #0
 8010eee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	2100      	movs	r1, #0
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f001 fce7 	bl	80128cc <USBD_LL_PrepareReceive>
 8010efe:	e018      	b.n	8010f32 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00b      	beq.n	8010f24 <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f12:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010f14:	2b03      	cmp	r3, #3
 8010f16:	d105      	bne.n	8010f24 <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f24:	2180      	movs	r1, #128	; 0x80
 8010f26:	68f8      	ldr	r0, [r7, #12]
 8010f28:	f001 fc26 	bl	8012778 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f000 ff4d 	bl	8011dcc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d124      	bne.n	8010f86 <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 8010f3c:	68f8      	ldr	r0, [r7, #12]
 8010f3e:	f7ff fe96 	bl	8010c6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2200      	movs	r2, #0
 8010f46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010f4a:	e01c      	b.n	8010f86 <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f52:	695b      	ldr	r3, [r3, #20]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d014      	beq.n	8010f82 <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f5e:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 8010f60:	2b03      	cmp	r3, #3
 8010f62:	d10e      	bne.n	8010f82 <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f6a:	695b      	ldr	r3, [r3, #20]
 8010f6c:	7afa      	ldrb	r2, [r7, #11]
 8010f6e:	4611      	mov	r1, r2
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	4798      	blx	r3
 8010f74:	4603      	mov	r3, r0
 8010f76:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d003      	beq.n	8010f86 <USBD_LL_DataInStage+0x126>
    {
      return ret;
 8010f7e:	7dfb      	ldrb	r3, [r7, #23]
 8010f80:	e002      	b.n	8010f88 <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010f82:	2303      	movs	r3, #3
 8010f84:	e000      	b.n	8010f88 <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3718      	adds	r7, #24
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2200      	movs	r2, #0
 8010fac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d009      	beq.n	8010fd4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	6852      	ldr	r2, [r2, #4]
 8010fcc:	b2d2      	uxtb	r2, r2
 8010fce:	4611      	mov	r1, r2
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010fd4:	2340      	movs	r3, #64	; 0x40
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	2100      	movs	r1, #0
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f001 fb87 	bl	80126ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2240      	movs	r2, #64	; 0x40
 8010fec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ff0:	2340      	movs	r3, #64	; 0x40
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	2180      	movs	r1, #128	; 0x80
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f001 fb79 	bl	80126ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2201      	movs	r2, #1
 8011000:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2240      	movs	r2, #64	; 0x40
 8011006:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011008:	2300      	movs	r3, #0
}
 801100a:	4618      	mov	r0, r3
 801100c:	3708      	adds	r7, #8
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}

08011012 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011012:	b480      	push	{r7}
 8011014:	b083      	sub	sp, #12
 8011016:	af00      	add	r7, sp, #0
 8011018:	6078      	str	r0, [r7, #4]
 801101a:	460b      	mov	r3, r1
 801101c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	78fa      	ldrb	r2, [r7, #3]
 8011022:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011024:	2300      	movs	r3, #0
}
 8011026:	4618      	mov	r0, r3
 8011028:	370c      	adds	r7, #12
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr

08011032 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011032:	b480      	push	{r7}
 8011034:	b083      	sub	sp, #12
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011040:	b2da      	uxtb	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2204      	movs	r2, #4
 801104c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011050:	2300      	movs	r3, #0
}
 8011052:	4618      	mov	r0, r3
 8011054:	370c      	adds	r7, #12
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr

0801105e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801105e:	b480      	push	{r7}
 8011060:	b083      	sub	sp, #12
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801106c:	b2db      	uxtb	r3, r3
 801106e:	2b04      	cmp	r3, #4
 8011070:	d106      	bne.n	8011080 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011078:	b2da      	uxtb	r2, r3
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011080:	2300      	movs	r3, #0
}
 8011082:	4618      	mov	r0, r3
 8011084:	370c      	adds	r7, #12
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr

0801108e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801108e:	b580      	push	{r7, lr}
 8011090:	b082      	sub	sp, #8
 8011092:	af00      	add	r7, sp, #0
 8011094:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801109c:	b2db      	uxtb	r3, r3
 801109e:	2b03      	cmp	r3, #3
 80110a0:	d10b      	bne.n	80110ba <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110a8:	69db      	ldr	r3, [r3, #28]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d005      	beq.n	80110ba <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110b4:	69db      	ldr	r3, [r3, #28]
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80110ba:	2300      	movs	r3, #0
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3708      	adds	r7, #8
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	460b      	mov	r3, r1
 80110ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	370c      	adds	r7, #12
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr

080110de <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80110de:	b480      	push	{r7}
 80110e0:	b083      	sub	sp, #12
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	460b      	mov	r3, r1
 80110e8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80110ea:	2300      	movs	r3, #0
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	370c      	adds	r7, #12
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011100:	2300      	movs	r3, #0
}
 8011102:	4618      	mov	r0, r3
 8011104:	370c      	adds	r7, #12
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b082      	sub	sp, #8
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2201      	movs	r2, #1
 801111a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011124:	2b00      	cmp	r3, #0
 8011126:	d009      	beq.n	801113c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	6852      	ldr	r2, [r2, #4]
 8011134:	b2d2      	uxtb	r2, r2
 8011136:	4611      	mov	r1, r2
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	4798      	blx	r3
  }

  return USBD_OK;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}

08011146 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011146:	b480      	push	{r7}
 8011148:	b087      	sub	sp, #28
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	3301      	adds	r3, #1
 801115c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011164:	8a3b      	ldrh	r3, [r7, #16]
 8011166:	021b      	lsls	r3, r3, #8
 8011168:	b21a      	sxth	r2, r3
 801116a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801116e:	4313      	orrs	r3, r2
 8011170:	b21b      	sxth	r3, r3
 8011172:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011174:	89fb      	ldrh	r3, [r7, #14]
}
 8011176:	4618      	mov	r0, r3
 8011178:	371c      	adds	r7, #28
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr
	...

08011184 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801118e:	2300      	movs	r3, #0
 8011190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801119a:	2b40      	cmp	r3, #64	; 0x40
 801119c:	d005      	beq.n	80111aa <USBD_StdDevReq+0x26>
 801119e:	2b40      	cmp	r3, #64	; 0x40
 80111a0:	d853      	bhi.n	801124a <USBD_StdDevReq+0xc6>
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00b      	beq.n	80111be <USBD_StdDevReq+0x3a>
 80111a6:	2b20      	cmp	r3, #32
 80111a8:	d14f      	bne.n	801124a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111b0:	689b      	ldr	r3, [r3, #8]
 80111b2:	6839      	ldr	r1, [r7, #0]
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	4798      	blx	r3
 80111b8:	4603      	mov	r3, r0
 80111ba:	73fb      	strb	r3, [r7, #15]
    break;
 80111bc:	e04a      	b.n	8011254 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	785b      	ldrb	r3, [r3, #1]
 80111c2:	2b09      	cmp	r3, #9
 80111c4:	d83b      	bhi.n	801123e <USBD_StdDevReq+0xba>
 80111c6:	a201      	add	r2, pc, #4	; (adr r2, 80111cc <USBD_StdDevReq+0x48>)
 80111c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111cc:	08011221 	.word	0x08011221
 80111d0:	08011235 	.word	0x08011235
 80111d4:	0801123f 	.word	0x0801123f
 80111d8:	0801122b 	.word	0x0801122b
 80111dc:	0801123f 	.word	0x0801123f
 80111e0:	080111ff 	.word	0x080111ff
 80111e4:	080111f5 	.word	0x080111f5
 80111e8:	0801123f 	.word	0x0801123f
 80111ec:	08011217 	.word	0x08011217
 80111f0:	08011209 	.word	0x08011209
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80111f4:	6839      	ldr	r1, [r7, #0]
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 f9dc 	bl	80115b4 <USBD_GetDescriptor>
      break;
 80111fc:	e024      	b.n	8011248 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80111fe:	6839      	ldr	r1, [r7, #0]
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 fb41 	bl	8011888 <USBD_SetAddress>
      break;
 8011206:	e01f      	b.n	8011248 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011208:	6839      	ldr	r1, [r7, #0]
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 fb80 	bl	8011910 <USBD_SetConfig>
 8011210:	4603      	mov	r3, r0
 8011212:	73fb      	strb	r3, [r7, #15]
      break;
 8011214:	e018      	b.n	8011248 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011216:	6839      	ldr	r1, [r7, #0]
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f000 fc1f 	bl	8011a5c <USBD_GetConfig>
      break;
 801121e:	e013      	b.n	8011248 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011220:	6839      	ldr	r1, [r7, #0]
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f000 fc50 	bl	8011ac8 <USBD_GetStatus>
      break;
 8011228:	e00e      	b.n	8011248 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801122a:	6839      	ldr	r1, [r7, #0]
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f000 fc7f 	bl	8011b30 <USBD_SetFeature>
      break;
 8011232:	e009      	b.n	8011248 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011234:	6839      	ldr	r1, [r7, #0]
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f000 fc8e 	bl	8011b58 <USBD_ClrFeature>
      break;
 801123c:	e004      	b.n	8011248 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801123e:	6839      	ldr	r1, [r7, #0]
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f000 fce5 	bl	8011c10 <USBD_CtlError>
      break;
 8011246:	bf00      	nop
    }
    break;
 8011248:	e004      	b.n	8011254 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801124a:	6839      	ldr	r1, [r7, #0]
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f000 fcdf 	bl	8011c10 <USBD_CtlError>
    break;
 8011252:	bf00      	nop
  }

  return ret;
 8011254:	7bfb      	ldrb	r3, [r7, #15]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3710      	adds	r7, #16
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop

08011260 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801126a:	2300      	movs	r3, #0
 801126c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011276:	2b40      	cmp	r3, #64	; 0x40
 8011278:	d005      	beq.n	8011286 <USBD_StdItfReq+0x26>
 801127a:	2b40      	cmp	r3, #64	; 0x40
 801127c:	d82f      	bhi.n	80112de <USBD_StdItfReq+0x7e>
 801127e:	2b00      	cmp	r3, #0
 8011280:	d001      	beq.n	8011286 <USBD_StdItfReq+0x26>
 8011282:	2b20      	cmp	r3, #32
 8011284:	d12b      	bne.n	80112de <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801128c:	b2db      	uxtb	r3, r3
 801128e:	3b01      	subs	r3, #1
 8011290:	2b02      	cmp	r3, #2
 8011292:	d81d      	bhi.n	80112d0 <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	889b      	ldrh	r3, [r3, #4]
 8011298:	b2db      	uxtb	r3, r3
 801129a:	2b01      	cmp	r3, #1
 801129c:	d813      	bhi.n	80112c6 <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	6839      	ldr	r1, [r7, #0]
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	4798      	blx	r3
 80112ac:	4603      	mov	r3, r0
 80112ae:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	88db      	ldrh	r3, [r3, #6]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d110      	bne.n	80112da <USBD_StdItfReq+0x7a>
 80112b8:	7bfb      	ldrb	r3, [r7, #15]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d10d      	bne.n	80112da <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f000 fd71 	bl	8011da6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80112c4:	e009      	b.n	80112da <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 80112c6:	6839      	ldr	r1, [r7, #0]
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f000 fca1 	bl	8011c10 <USBD_CtlError>
      break;
 80112ce:	e004      	b.n	80112da <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 80112d0:	6839      	ldr	r1, [r7, #0]
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f000 fc9c 	bl	8011c10 <USBD_CtlError>
      break;
 80112d8:	e000      	b.n	80112dc <USBD_StdItfReq+0x7c>
      break;
 80112da:	bf00      	nop
    }
    break;
 80112dc:	e004      	b.n	80112e8 <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 80112de:	6839      	ldr	r1, [r7, #0]
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f000 fc95 	bl	8011c10 <USBD_CtlError>
    break;
 80112e6:	bf00      	nop
  }

  return ret;
 80112e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b084      	sub	sp, #16
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80112fc:	2300      	movs	r3, #0
 80112fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	889b      	ldrh	r3, [r3, #4]
 8011304:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801130e:	2b40      	cmp	r3, #64	; 0x40
 8011310:	d007      	beq.n	8011322 <USBD_StdEPReq+0x30>
 8011312:	2b40      	cmp	r3, #64	; 0x40
 8011314:	f200 8143 	bhi.w	801159e <USBD_StdEPReq+0x2ac>
 8011318:	2b00      	cmp	r3, #0
 801131a:	d00c      	beq.n	8011336 <USBD_StdEPReq+0x44>
 801131c:	2b20      	cmp	r3, #32
 801131e:	f040 813e 	bne.w	801159e <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	6839      	ldr	r1, [r7, #0]
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	4798      	blx	r3
 8011330:	4603      	mov	r3, r0
 8011332:	73fb      	strb	r3, [r7, #15]
    break;
 8011334:	e138      	b.n	80115a8 <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	785b      	ldrb	r3, [r3, #1]
 801133a:	2b03      	cmp	r3, #3
 801133c:	d007      	beq.n	801134e <USBD_StdEPReq+0x5c>
 801133e:	2b03      	cmp	r3, #3
 8011340:	f300 8127 	bgt.w	8011592 <USBD_StdEPReq+0x2a0>
 8011344:	2b00      	cmp	r3, #0
 8011346:	d07d      	beq.n	8011444 <USBD_StdEPReq+0x152>
 8011348:	2b01      	cmp	r3, #1
 801134a:	d03c      	beq.n	80113c6 <USBD_StdEPReq+0xd4>
 801134c:	e121      	b.n	8011592 <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011354:	b2db      	uxtb	r3, r3
 8011356:	2b02      	cmp	r3, #2
 8011358:	d002      	beq.n	8011360 <USBD_StdEPReq+0x6e>
 801135a:	2b03      	cmp	r3, #3
 801135c:	d016      	beq.n	801138c <USBD_StdEPReq+0x9a>
 801135e:	e02c      	b.n	80113ba <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011360:	7bbb      	ldrb	r3, [r7, #14]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00d      	beq.n	8011382 <USBD_StdEPReq+0x90>
 8011366:	7bbb      	ldrb	r3, [r7, #14]
 8011368:	2b80      	cmp	r3, #128	; 0x80
 801136a:	d00a      	beq.n	8011382 <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 801136c:	7bbb      	ldrb	r3, [r7, #14]
 801136e:	4619      	mov	r1, r3
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f001 fa01 	bl	8012778 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011376:	2180      	movs	r1, #128	; 0x80
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f001 f9fd 	bl	8012778 <USBD_LL_StallEP>
 801137e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011380:	e020      	b.n	80113c4 <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 8011382:	6839      	ldr	r1, [r7, #0]
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f000 fc43 	bl	8011c10 <USBD_CtlError>
        break;
 801138a:	e01b      	b.n	80113c4 <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	885b      	ldrh	r3, [r3, #2]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d10e      	bne.n	80113b2 <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011394:	7bbb      	ldrb	r3, [r7, #14]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00b      	beq.n	80113b2 <USBD_StdEPReq+0xc0>
 801139a:	7bbb      	ldrb	r3, [r7, #14]
 801139c:	2b80      	cmp	r3, #128	; 0x80
 801139e:	d008      	beq.n	80113b2 <USBD_StdEPReq+0xc0>
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	88db      	ldrh	r3, [r3, #6]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d104      	bne.n	80113b2 <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80113a8:	7bbb      	ldrb	r3, [r7, #14]
 80113aa:	4619      	mov	r1, r3
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f001 f9e3 	bl	8012778 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f000 fcf7 	bl	8011da6 <USBD_CtlSendStatus>

        break;
 80113b8:	e004      	b.n	80113c4 <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 80113ba:	6839      	ldr	r1, [r7, #0]
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f000 fc27 	bl	8011c10 <USBD_CtlError>
        break;
 80113c2:	bf00      	nop
      }
      break;
 80113c4:	e0ea      	b.n	801159c <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	2b02      	cmp	r3, #2
 80113d0:	d002      	beq.n	80113d8 <USBD_StdEPReq+0xe6>
 80113d2:	2b03      	cmp	r3, #3
 80113d4:	d016      	beq.n	8011404 <USBD_StdEPReq+0x112>
 80113d6:	e02e      	b.n	8011436 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80113d8:	7bbb      	ldrb	r3, [r7, #14]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00d      	beq.n	80113fa <USBD_StdEPReq+0x108>
 80113de:	7bbb      	ldrb	r3, [r7, #14]
 80113e0:	2b80      	cmp	r3, #128	; 0x80
 80113e2:	d00a      	beq.n	80113fa <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80113e4:	7bbb      	ldrb	r3, [r7, #14]
 80113e6:	4619      	mov	r1, r3
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f001 f9c5 	bl	8012778 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80113ee:	2180      	movs	r1, #128	; 0x80
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f001 f9c1 	bl	8012778 <USBD_LL_StallEP>
 80113f6:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80113f8:	e023      	b.n	8011442 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 80113fa:	6839      	ldr	r1, [r7, #0]
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f000 fc07 	bl	8011c10 <USBD_CtlError>
        break;
 8011402:	e01e      	b.n	8011442 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	885b      	ldrh	r3, [r3, #2]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d119      	bne.n	8011440 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801140c:	7bbb      	ldrb	r3, [r7, #14]
 801140e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011412:	2b00      	cmp	r3, #0
 8011414:	d004      	beq.n	8011420 <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011416:	7bbb      	ldrb	r3, [r7, #14]
 8011418:	4619      	mov	r1, r3
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f001 f9cb 	bl	80127b6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f000 fcc0 	bl	8011da6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	6839      	ldr	r1, [r7, #0]
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	4798      	blx	r3
        }
        break;
 8011434:	e004      	b.n	8011440 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8011436:	6839      	ldr	r1, [r7, #0]
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 fbe9 	bl	8011c10 <USBD_CtlError>
        break;
 801143e:	e000      	b.n	8011442 <USBD_StdEPReq+0x150>
        break;
 8011440:	bf00      	nop
      }
      break;
 8011442:	e0ab      	b.n	801159c <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801144a:	b2db      	uxtb	r3, r3
 801144c:	2b02      	cmp	r3, #2
 801144e:	d002      	beq.n	8011456 <USBD_StdEPReq+0x164>
 8011450:	2b03      	cmp	r3, #3
 8011452:	d032      	beq.n	80114ba <USBD_StdEPReq+0x1c8>
 8011454:	e097      	b.n	8011586 <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011456:	7bbb      	ldrb	r3, [r7, #14]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d007      	beq.n	801146c <USBD_StdEPReq+0x17a>
 801145c:	7bbb      	ldrb	r3, [r7, #14]
 801145e:	2b80      	cmp	r3, #128	; 0x80
 8011460:	d004      	beq.n	801146c <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 8011462:	6839      	ldr	r1, [r7, #0]
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 fbd3 	bl	8011c10 <USBD_CtlError>
          break;
 801146a:	e091      	b.n	8011590 <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801146c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011470:	2b00      	cmp	r3, #0
 8011472:	da0b      	bge.n	801148c <USBD_StdEPReq+0x19a>
 8011474:	7bbb      	ldrb	r3, [r7, #14]
 8011476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801147a:	4613      	mov	r3, r2
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	4413      	add	r3, r2
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	3310      	adds	r3, #16
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	4413      	add	r3, r2
 8011488:	3304      	adds	r3, #4
 801148a:	e00b      	b.n	80114a4 <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 801148c:	7bbb      	ldrb	r3, [r7, #14]
 801148e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011492:	4613      	mov	r3, r2
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	4413      	add	r3, r2
 8011498:	009b      	lsls	r3, r3, #2
 801149a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801149e:	687a      	ldr	r2, [r7, #4]
 80114a0:	4413      	add	r3, r2
 80114a2:	3304      	adds	r3, #4
 80114a4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	2200      	movs	r2, #0
 80114aa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2202      	movs	r2, #2
 80114b0:	4619      	mov	r1, r3
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f000 fc1d 	bl	8011cf2 <USBD_CtlSendData>
        break;
 80114b8:	e06a      	b.n	8011590 <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80114ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	da11      	bge.n	80114e6 <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80114c2:	7bbb      	ldrb	r3, [r7, #14]
 80114c4:	f003 020f 	and.w	r2, r3, #15
 80114c8:	6879      	ldr	r1, [r7, #4]
 80114ca:	4613      	mov	r3, r2
 80114cc:	009b      	lsls	r3, r3, #2
 80114ce:	4413      	add	r3, r2
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	440b      	add	r3, r1
 80114d4:	3324      	adds	r3, #36	; 0x24
 80114d6:	881b      	ldrh	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d117      	bne.n	801150c <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 80114dc:	6839      	ldr	r1, [r7, #0]
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f000 fb96 	bl	8011c10 <USBD_CtlError>
            break;
 80114e4:	e054      	b.n	8011590 <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80114e6:	7bbb      	ldrb	r3, [r7, #14]
 80114e8:	f003 020f 	and.w	r2, r3, #15
 80114ec:	6879      	ldr	r1, [r7, #4]
 80114ee:	4613      	mov	r3, r2
 80114f0:	009b      	lsls	r3, r3, #2
 80114f2:	4413      	add	r3, r2
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	440b      	add	r3, r1
 80114f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80114fc:	881b      	ldrh	r3, [r3, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d104      	bne.n	801150c <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 8011502:	6839      	ldr	r1, [r7, #0]
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f000 fb83 	bl	8011c10 <USBD_CtlError>
            break;
 801150a:	e041      	b.n	8011590 <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801150c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011510:	2b00      	cmp	r3, #0
 8011512:	da0b      	bge.n	801152c <USBD_StdEPReq+0x23a>
 8011514:	7bbb      	ldrb	r3, [r7, #14]
 8011516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801151a:	4613      	mov	r3, r2
 801151c:	009b      	lsls	r3, r3, #2
 801151e:	4413      	add	r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	3310      	adds	r3, #16
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	4413      	add	r3, r2
 8011528:	3304      	adds	r3, #4
 801152a:	e00b      	b.n	8011544 <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 801152c:	7bbb      	ldrb	r3, [r7, #14]
 801152e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011532:	4613      	mov	r3, r2
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	4413      	add	r3, r2
 8011538:	009b      	lsls	r3, r3, #2
 801153a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	4413      	add	r3, r2
 8011542:	3304      	adds	r3, #4
 8011544:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011546:	7bbb      	ldrb	r3, [r7, #14]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d002      	beq.n	8011552 <USBD_StdEPReq+0x260>
 801154c:	7bbb      	ldrb	r3, [r7, #14]
 801154e:	2b80      	cmp	r3, #128	; 0x80
 8011550:	d103      	bne.n	801155a <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	2200      	movs	r2, #0
 8011556:	601a      	str	r2, [r3, #0]
 8011558:	e00e      	b.n	8011578 <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801155a:	7bbb      	ldrb	r3, [r7, #14]
 801155c:	4619      	mov	r1, r3
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f001 f948 	bl	80127f4 <USBD_LL_IsStallEP>
 8011564:	4603      	mov	r3, r0
 8011566:	2b00      	cmp	r3, #0
 8011568:	d003      	beq.n	8011572 <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	2201      	movs	r2, #1
 801156e:	601a      	str	r2, [r3, #0]
 8011570:	e002      	b.n	8011578 <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	2200      	movs	r2, #0
 8011576:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	2202      	movs	r2, #2
 801157c:	4619      	mov	r1, r3
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f000 fbb7 	bl	8011cf2 <USBD_CtlSendData>
          break;
 8011584:	e004      	b.n	8011590 <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 8011586:	6839      	ldr	r1, [r7, #0]
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f000 fb41 	bl	8011c10 <USBD_CtlError>
        break;
 801158e:	bf00      	nop
      }
      break;
 8011590:	e004      	b.n	801159c <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f000 fb3b 	bl	8011c10 <USBD_CtlError>
      break;
 801159a:	bf00      	nop
    }
    break;
 801159c:	e004      	b.n	80115a8 <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 801159e:	6839      	ldr	r1, [r7, #0]
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f000 fb35 	bl	8011c10 <USBD_CtlError>
    break;
 80115a6:	bf00      	nop
  }

  return ret;
 80115a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
	...

080115b4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80115be:	2300      	movs	r3, #0
 80115c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80115c2:	2300      	movs	r3, #0
 80115c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80115c6:	2300      	movs	r3, #0
 80115c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	885b      	ldrh	r3, [r3, #2]
 80115ce:	0a1b      	lsrs	r3, r3, #8
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	3b01      	subs	r3, #1
 80115d4:	2b06      	cmp	r3, #6
 80115d6:	f200 8128 	bhi.w	801182a <USBD_GetDescriptor+0x276>
 80115da:	a201      	add	r2, pc, #4	; (adr r2, 80115e0 <USBD_GetDescriptor+0x2c>)
 80115dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e0:	080115fd 	.word	0x080115fd
 80115e4:	08011615 	.word	0x08011615
 80115e8:	08011655 	.word	0x08011655
 80115ec:	0801182b 	.word	0x0801182b
 80115f0:	0801182b 	.word	0x0801182b
 80115f4:	080117cb 	.word	0x080117cb
 80115f8:	080117f7 	.word	0x080117f7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	7c12      	ldrb	r2, [r2, #16]
 8011608:	f107 0108 	add.w	r1, r7, #8
 801160c:	4610      	mov	r0, r2
 801160e:	4798      	blx	r3
 8011610:	60f8      	str	r0, [r7, #12]
    break;
 8011612:	e112      	b.n	801183a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	7c1b      	ldrb	r3, [r3, #16]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d10d      	bne.n	8011638 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011624:	f107 0208 	add.w	r2, r7, #8
 8011628:	4610      	mov	r0, r2
 801162a:	4798      	blx	r3
 801162c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	3301      	adds	r3, #1
 8011632:	2202      	movs	r2, #2
 8011634:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011636:	e100      	b.n	801183a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011640:	f107 0208 	add.w	r2, r7, #8
 8011644:	4610      	mov	r0, r2
 8011646:	4798      	blx	r3
 8011648:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	3301      	adds	r3, #1
 801164e:	2202      	movs	r2, #2
 8011650:	701a      	strb	r2, [r3, #0]
    break;
 8011652:	e0f2      	b.n	801183a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	885b      	ldrh	r3, [r3, #2]
 8011658:	b2db      	uxtb	r3, r3
 801165a:	2b05      	cmp	r3, #5
 801165c:	f200 80ac 	bhi.w	80117b8 <USBD_GetDescriptor+0x204>
 8011660:	a201      	add	r2, pc, #4	; (adr r2, 8011668 <USBD_GetDescriptor+0xb4>)
 8011662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011666:	bf00      	nop
 8011668:	08011681 	.word	0x08011681
 801166c:	080116b5 	.word	0x080116b5
 8011670:	080116e9 	.word	0x080116e9
 8011674:	0801171d 	.word	0x0801171d
 8011678:	08011751 	.word	0x08011751
 801167c:	08011785 	.word	0x08011785
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d00b      	beq.n	80116a4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	7c12      	ldrb	r2, [r2, #16]
 8011698:	f107 0108 	add.w	r1, r7, #8
 801169c:	4610      	mov	r0, r2
 801169e:	4798      	blx	r3
 80116a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80116a2:	e091      	b.n	80117c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80116a4:	6839      	ldr	r1, [r7, #0]
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f000 fab2 	bl	8011c10 <USBD_CtlError>
        err++;
 80116ac:	7afb      	ldrb	r3, [r7, #11]
 80116ae:	3301      	adds	r3, #1
 80116b0:	72fb      	strb	r3, [r7, #11]
      break;
 80116b2:	e089      	b.n	80117c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00b      	beq.n	80116d8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116c6:	689b      	ldr	r3, [r3, #8]
 80116c8:	687a      	ldr	r2, [r7, #4]
 80116ca:	7c12      	ldrb	r2, [r2, #16]
 80116cc:	f107 0108 	add.w	r1, r7, #8
 80116d0:	4610      	mov	r0, r2
 80116d2:	4798      	blx	r3
 80116d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80116d6:	e077      	b.n	80117c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80116d8:	6839      	ldr	r1, [r7, #0]
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f000 fa98 	bl	8011c10 <USBD_CtlError>
        err++;
 80116e0:	7afb      	ldrb	r3, [r7, #11]
 80116e2:	3301      	adds	r3, #1
 80116e4:	72fb      	strb	r3, [r7, #11]
      break;
 80116e6:	e06f      	b.n	80117c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00b      	beq.n	801170c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	7c12      	ldrb	r2, [r2, #16]
 8011700:	f107 0108 	add.w	r1, r7, #8
 8011704:	4610      	mov	r0, r2
 8011706:	4798      	blx	r3
 8011708:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801170a:	e05d      	b.n	80117c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801170c:	6839      	ldr	r1, [r7, #0]
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 fa7e 	bl	8011c10 <USBD_CtlError>
        err++;
 8011714:	7afb      	ldrb	r3, [r7, #11]
 8011716:	3301      	adds	r3, #1
 8011718:	72fb      	strb	r3, [r7, #11]
      break;
 801171a:	e055      	b.n	80117c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d00b      	beq.n	8011740 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801172e:	691b      	ldr	r3, [r3, #16]
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	7c12      	ldrb	r2, [r2, #16]
 8011734:	f107 0108 	add.w	r1, r7, #8
 8011738:	4610      	mov	r0, r2
 801173a:	4798      	blx	r3
 801173c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801173e:	e043      	b.n	80117c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011740:	6839      	ldr	r1, [r7, #0]
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f000 fa64 	bl	8011c10 <USBD_CtlError>
        err++;
 8011748:	7afb      	ldrb	r3, [r7, #11]
 801174a:	3301      	adds	r3, #1
 801174c:	72fb      	strb	r3, [r7, #11]
      break;
 801174e:	e03b      	b.n	80117c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011756:	695b      	ldr	r3, [r3, #20]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00b      	beq.n	8011774 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011762:	695b      	ldr	r3, [r3, #20]
 8011764:	687a      	ldr	r2, [r7, #4]
 8011766:	7c12      	ldrb	r2, [r2, #16]
 8011768:	f107 0108 	add.w	r1, r7, #8
 801176c:	4610      	mov	r0, r2
 801176e:	4798      	blx	r3
 8011770:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011772:	e029      	b.n	80117c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011774:	6839      	ldr	r1, [r7, #0]
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 fa4a 	bl	8011c10 <USBD_CtlError>
        err++;
 801177c:	7afb      	ldrb	r3, [r7, #11]
 801177e:	3301      	adds	r3, #1
 8011780:	72fb      	strb	r3, [r7, #11]
      break;
 8011782:	e021      	b.n	80117c8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801178a:	699b      	ldr	r3, [r3, #24]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d00b      	beq.n	80117a8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011796:	699b      	ldr	r3, [r3, #24]
 8011798:	687a      	ldr	r2, [r7, #4]
 801179a:	7c12      	ldrb	r2, [r2, #16]
 801179c:	f107 0108 	add.w	r1, r7, #8
 80117a0:	4610      	mov	r0, r2
 80117a2:	4798      	blx	r3
 80117a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80117a6:	e00f      	b.n	80117c8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80117a8:	6839      	ldr	r1, [r7, #0]
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f000 fa30 	bl	8011c10 <USBD_CtlError>
        err++;
 80117b0:	7afb      	ldrb	r3, [r7, #11]
 80117b2:	3301      	adds	r3, #1
 80117b4:	72fb      	strb	r3, [r7, #11]
      break;
 80117b6:	e007      	b.n	80117c8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80117b8:	6839      	ldr	r1, [r7, #0]
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f000 fa28 	bl	8011c10 <USBD_CtlError>
      err++;
 80117c0:	7afb      	ldrb	r3, [r7, #11]
 80117c2:	3301      	adds	r3, #1
 80117c4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80117c6:	bf00      	nop
    }
    break;
 80117c8:	e037      	b.n	801183a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	7c1b      	ldrb	r3, [r3, #16]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d109      	bne.n	80117e6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117da:	f107 0208 	add.w	r2, r7, #8
 80117de:	4610      	mov	r0, r2
 80117e0:	4798      	blx	r3
 80117e2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80117e4:	e029      	b.n	801183a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80117e6:	6839      	ldr	r1, [r7, #0]
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f000 fa11 	bl	8011c10 <USBD_CtlError>
      err++;
 80117ee:	7afb      	ldrb	r3, [r7, #11]
 80117f0:	3301      	adds	r3, #1
 80117f2:	72fb      	strb	r3, [r7, #11]
    break;
 80117f4:	e021      	b.n	801183a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	7c1b      	ldrb	r3, [r3, #16]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d10d      	bne.n	801181a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011806:	f107 0208 	add.w	r2, r7, #8
 801180a:	4610      	mov	r0, r2
 801180c:	4798      	blx	r3
 801180e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	3301      	adds	r3, #1
 8011814:	2207      	movs	r2, #7
 8011816:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011818:	e00f      	b.n	801183a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801181a:	6839      	ldr	r1, [r7, #0]
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f000 f9f7 	bl	8011c10 <USBD_CtlError>
      err++;
 8011822:	7afb      	ldrb	r3, [r7, #11]
 8011824:	3301      	adds	r3, #1
 8011826:	72fb      	strb	r3, [r7, #11]
    break;
 8011828:	e007      	b.n	801183a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 801182a:	6839      	ldr	r1, [r7, #0]
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 f9ef 	bl	8011c10 <USBD_CtlError>
    err++;
 8011832:	7afb      	ldrb	r3, [r7, #11]
 8011834:	3301      	adds	r3, #1
 8011836:	72fb      	strb	r3, [r7, #11]
    break;
 8011838:	bf00      	nop
  }

  if (err != 0U)
 801183a:	7afb      	ldrb	r3, [r7, #11]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d11e      	bne.n	801187e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	88db      	ldrh	r3, [r3, #6]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d016      	beq.n	8011876 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011848:	893b      	ldrh	r3, [r7, #8]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00e      	beq.n	801186c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	88da      	ldrh	r2, [r3, #6]
 8011852:	893b      	ldrh	r3, [r7, #8]
 8011854:	4293      	cmp	r3, r2
 8011856:	bf28      	it	cs
 8011858:	4613      	movcs	r3, r2
 801185a:	b29b      	uxth	r3, r3
 801185c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801185e:	893b      	ldrh	r3, [r7, #8]
 8011860:	461a      	mov	r2, r3
 8011862:	68f9      	ldr	r1, [r7, #12]
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 fa44 	bl	8011cf2 <USBD_CtlSendData>
 801186a:	e009      	b.n	8011880 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 801186c:	6839      	ldr	r1, [r7, #0]
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f000 f9ce 	bl	8011c10 <USBD_CtlError>
 8011874:	e004      	b.n	8011880 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 fa95 	bl	8011da6 <USBD_CtlSendStatus>
 801187c:	e000      	b.n	8011880 <USBD_GetDescriptor+0x2cc>
    return;
 801187e:	bf00      	nop
    }
  }
}
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop

08011888 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	889b      	ldrh	r3, [r3, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d131      	bne.n	80118fe <USBD_SetAddress+0x76>
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	88db      	ldrh	r3, [r3, #6]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d12d      	bne.n	80118fe <USBD_SetAddress+0x76>
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	885b      	ldrh	r3, [r3, #2]
 80118a6:	2b7f      	cmp	r3, #127	; 0x7f
 80118a8:	d829      	bhi.n	80118fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	885b      	ldrh	r3, [r3, #2]
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118bc:	b2db      	uxtb	r3, r3
 80118be:	2b03      	cmp	r3, #3
 80118c0:	d104      	bne.n	80118cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80118c2:	6839      	ldr	r1, [r7, #0]
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f000 f9a3 	bl	8011c10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118ca:	e01d      	b.n	8011908 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	7bfa      	ldrb	r2, [r7, #15]
 80118d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
 80118d6:	4619      	mov	r1, r3
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 ffb7 	bl	801284c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 fa61 	bl	8011da6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80118e4:	7bfb      	ldrb	r3, [r7, #15]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d004      	beq.n	80118f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2202      	movs	r2, #2
 80118ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118f2:	e009      	b.n	8011908 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2201      	movs	r2, #1
 80118f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118fc:	e004      	b.n	8011908 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80118fe:	6839      	ldr	r1, [r7, #0]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f000 f985 	bl	8011c10 <USBD_CtlError>
  }
}
 8011906:	bf00      	nop
 8011908:	bf00      	nop
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801191a:	2300      	movs	r3, #0
 801191c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	885b      	ldrh	r3, [r3, #2]
 8011922:	b2da      	uxtb	r2, r3
 8011924:	4b4c      	ldr	r3, [pc, #304]	; (8011a58 <USBD_SetConfig+0x148>)
 8011926:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011928:	4b4b      	ldr	r3, [pc, #300]	; (8011a58 <USBD_SetConfig+0x148>)
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	2b01      	cmp	r3, #1
 801192e:	d905      	bls.n	801193c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011930:	6839      	ldr	r1, [r7, #0]
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f000 f96c 	bl	8011c10 <USBD_CtlError>
    return USBD_FAIL;
 8011938:	2303      	movs	r3, #3
 801193a:	e088      	b.n	8011a4e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011942:	b2db      	uxtb	r3, r3
 8011944:	2b02      	cmp	r3, #2
 8011946:	d002      	beq.n	801194e <USBD_SetConfig+0x3e>
 8011948:	2b03      	cmp	r3, #3
 801194a:	d025      	beq.n	8011998 <USBD_SetConfig+0x88>
 801194c:	e071      	b.n	8011a32 <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801194e:	4b42      	ldr	r3, [pc, #264]	; (8011a58 <USBD_SetConfig+0x148>)
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d01c      	beq.n	8011990 <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 8011956:	4b40      	ldr	r3, [pc, #256]	; (8011a58 <USBD_SetConfig+0x148>)
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	461a      	mov	r2, r3
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011960:	4b3d      	ldr	r3, [pc, #244]	; (8011a58 <USBD_SetConfig+0x148>)
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	4619      	mov	r1, r3
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f7ff f98c 	bl	8010c84 <USBD_SetClassConfig>
 801196c:	4603      	mov	r3, r0
 801196e:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011970:	7bfb      	ldrb	r3, [r7, #15]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d004      	beq.n	8011980 <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 8011976:	6839      	ldr	r1, [r7, #0]
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 f949 	bl	8011c10 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801197e:	e065      	b.n	8011a4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f000 fa10 	bl	8011da6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2203      	movs	r2, #3
 801198a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801198e:	e05d      	b.n	8011a4c <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f000 fa08 	bl	8011da6 <USBD_CtlSendStatus>
    break;
 8011996:	e059      	b.n	8011a4c <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8011998:	4b2f      	ldr	r3, [pc, #188]	; (8011a58 <USBD_SetConfig+0x148>)
 801199a:	781b      	ldrb	r3, [r3, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d112      	bne.n	80119c6 <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2202      	movs	r2, #2
 80119a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80119a8:	4b2b      	ldr	r3, [pc, #172]	; (8011a58 <USBD_SetConfig+0x148>)
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	461a      	mov	r2, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80119b2:	4b29      	ldr	r3, [pc, #164]	; (8011a58 <USBD_SetConfig+0x148>)
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	4619      	mov	r1, r3
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f7ff f97f 	bl	8010cbc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 f9f1 	bl	8011da6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80119c4:	e042      	b.n	8011a4c <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 80119c6:	4b24      	ldr	r3, [pc, #144]	; (8011a58 <USBD_SetConfig+0x148>)
 80119c8:	781b      	ldrb	r3, [r3, #0]
 80119ca:	461a      	mov	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d02a      	beq.n	8011a2a <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	b2db      	uxtb	r3, r3
 80119da:	4619      	mov	r1, r3
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7ff f96d 	bl	8010cbc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80119e2:	4b1d      	ldr	r3, [pc, #116]	; (8011a58 <USBD_SetConfig+0x148>)
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	461a      	mov	r2, r3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80119ec:	4b1a      	ldr	r3, [pc, #104]	; (8011a58 <USBD_SetConfig+0x148>)
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	4619      	mov	r1, r3
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f7ff f946 	bl	8010c84 <USBD_SetClassConfig>
 80119f8:	4603      	mov	r3, r0
 80119fa:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80119fc:	7bfb      	ldrb	r3, [r7, #15]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d00f      	beq.n	8011a22 <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 8011a02:	6839      	ldr	r1, [r7, #0]
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 f903 	bl	8011c10 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	4619      	mov	r1, r3
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7ff f952 	bl	8010cbc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2202      	movs	r2, #2
 8011a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011a20:	e014      	b.n	8011a4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f9bf 	bl	8011da6 <USBD_CtlSendStatus>
    break;
 8011a28:	e010      	b.n	8011a4c <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 f9bb 	bl	8011da6 <USBD_CtlSendStatus>
    break;
 8011a30:	e00c      	b.n	8011a4c <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 8011a32:	6839      	ldr	r1, [r7, #0]
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f000 f8eb 	bl	8011c10 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011a3a:	4b07      	ldr	r3, [pc, #28]	; (8011a58 <USBD_SetConfig+0x148>)
 8011a3c:	781b      	ldrb	r3, [r3, #0]
 8011a3e:	4619      	mov	r1, r3
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f7ff f93b 	bl	8010cbc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8011a46:	2303      	movs	r3, #3
 8011a48:	73fb      	strb	r3, [r7, #15]
    break;
 8011a4a:	bf00      	nop
  }

  return ret;
 8011a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
 8011a56:	bf00      	nop
 8011a58:	24000224 	.word	0x24000224

08011a5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	88db      	ldrh	r3, [r3, #6]
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d004      	beq.n	8011a78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011a6e:	6839      	ldr	r1, [r7, #0]
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 f8cd 	bl	8011c10 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8011a76:	e023      	b.n	8011ac0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	2b02      	cmp	r3, #2
 8011a82:	dc02      	bgt.n	8011a8a <USBD_GetConfig+0x2e>
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	dc03      	bgt.n	8011a90 <USBD_GetConfig+0x34>
 8011a88:	e015      	b.n	8011ab6 <USBD_GetConfig+0x5a>
 8011a8a:	2b03      	cmp	r3, #3
 8011a8c:	d00b      	beq.n	8011aa6 <USBD_GetConfig+0x4a>
 8011a8e:	e012      	b.n	8011ab6 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2200      	movs	r2, #0
 8011a94:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	3308      	adds	r3, #8
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f000 f927 	bl	8011cf2 <USBD_CtlSendData>
      break;
 8011aa4:	e00c      	b.n	8011ac0 <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	3304      	adds	r3, #4
 8011aaa:	2201      	movs	r2, #1
 8011aac:	4619      	mov	r1, r3
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f000 f91f 	bl	8011cf2 <USBD_CtlSendData>
      break;
 8011ab4:	e004      	b.n	8011ac0 <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 8011ab6:	6839      	ldr	r1, [r7, #0]
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f000 f8a9 	bl	8011c10 <USBD_CtlError>
      break;
 8011abe:	bf00      	nop
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	3b01      	subs	r3, #1
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d81e      	bhi.n	8011b1e <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	88db      	ldrh	r3, [r3, #6]
 8011ae4:	2b02      	cmp	r3, #2
 8011ae6:	d004      	beq.n	8011af2 <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 8011ae8:	6839      	ldr	r1, [r7, #0]
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 f890 	bl	8011c10 <USBD_CtlError>
      break;
 8011af0:	e01a      	b.n	8011b28 <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2201      	movs	r2, #1
 8011af6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d005      	beq.n	8011b0e <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	f043 0202 	orr.w	r2, r3, #2
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	330c      	adds	r3, #12
 8011b12:	2202      	movs	r2, #2
 8011b14:	4619      	mov	r1, r3
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f000 f8eb 	bl	8011cf2 <USBD_CtlSendData>
    break;
 8011b1c:	e004      	b.n	8011b28 <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 8011b1e:	6839      	ldr	r1, [r7, #0]
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f000 f875 	bl	8011c10 <USBD_CtlError>
    break;
 8011b26:	bf00      	nop
  }
}
 8011b28:	bf00      	nop
 8011b2a:	3708      	adds	r7, #8
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	885b      	ldrh	r3, [r3, #2]
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d106      	bne.n	8011b50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2201      	movs	r2, #1
 8011b46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f000 f92b 	bl	8011da6 <USBD_CtlSendStatus>
  }
}
 8011b50:	bf00      	nop
 8011b52:	3708      	adds	r7, #8
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	3b01      	subs	r3, #1
 8011b6c:	2b02      	cmp	r3, #2
 8011b6e:	d80b      	bhi.n	8011b88 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	885b      	ldrh	r3, [r3, #2]
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d10c      	bne.n	8011b92 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f000 f910 	bl	8011da6 <USBD_CtlSendStatus>
      }
      break;
 8011b86:	e004      	b.n	8011b92 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011b88:	6839      	ldr	r1, [r7, #0]
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f000 f840 	bl	8011c10 <USBD_CtlError>
      break;
 8011b90:	e000      	b.n	8011b94 <USBD_ClrFeature+0x3c>
      break;
 8011b92:	bf00      	nop
  }
}
 8011b94:	bf00      	nop
 8011b96:	3708      	adds	r7, #8
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}

08011b9c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	781a      	ldrb	r2, [r3, #0]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	781a      	ldrb	r2, [r3, #0]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011bc6:	68f8      	ldr	r0, [r7, #12]
 8011bc8:	f7ff fabd 	bl	8011146 <SWAPBYTE>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	461a      	mov	r2, r3
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011be0:	68f8      	ldr	r0, [r7, #12]
 8011be2:	f7ff fab0 	bl	8011146 <SWAPBYTE>
 8011be6:	4603      	mov	r3, r0
 8011be8:	461a      	mov	r2, r3
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011bfa:	68f8      	ldr	r0, [r7, #12]
 8011bfc:	f7ff faa3 	bl	8011146 <SWAPBYTE>
 8011c00:	4603      	mov	r3, r0
 8011c02:	461a      	mov	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	80da      	strh	r2, [r3, #6]
}
 8011c08:	bf00      	nop
 8011c0a:	3710      	adds	r7, #16
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c1a:	2180      	movs	r1, #128	; 0x80
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f000 fdab 	bl	8012778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011c22:	2100      	movs	r1, #0
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f000 fda7 	bl	8012778 <USBD_LL_StallEP>
}
 8011c2a:	bf00      	nop
 8011c2c:	3708      	adds	r7, #8
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}

08011c32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011c32:	b580      	push	{r7, lr}
 8011c34:	b086      	sub	sp, #24
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	60f8      	str	r0, [r7, #12]
 8011c3a:	60b9      	str	r1, [r7, #8]
 8011c3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d036      	beq.n	8011cb6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011c4c:	6938      	ldr	r0, [r7, #16]
 8011c4e:	f000 f836 	bl	8011cbe <USBD_GetLen>
 8011c52:	4603      	mov	r3, r0
 8011c54:	3301      	adds	r3, #1
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	005b      	lsls	r3, r3, #1
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011c60:	7dfb      	ldrb	r3, [r7, #23]
 8011c62:	68ba      	ldr	r2, [r7, #8]
 8011c64:	4413      	add	r3, r2
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	7812      	ldrb	r2, [r2, #0]
 8011c6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8011c6c:	7dfb      	ldrb	r3, [r7, #23]
 8011c6e:	3301      	adds	r3, #1
 8011c70:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011c72:	7dfb      	ldrb	r3, [r7, #23]
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	4413      	add	r3, r2
 8011c78:	2203      	movs	r2, #3
 8011c7a:	701a      	strb	r2, [r3, #0]
  idx++;
 8011c7c:	7dfb      	ldrb	r3, [r7, #23]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011c82:	e013      	b.n	8011cac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011c84:	7dfb      	ldrb	r3, [r7, #23]
 8011c86:	68ba      	ldr	r2, [r7, #8]
 8011c88:	4413      	add	r3, r2
 8011c8a:	693a      	ldr	r2, [r7, #16]
 8011c8c:	7812      	ldrb	r2, [r2, #0]
 8011c8e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	3301      	adds	r3, #1
 8011c94:	613b      	str	r3, [r7, #16]
    idx++;
 8011c96:	7dfb      	ldrb	r3, [r7, #23]
 8011c98:	3301      	adds	r3, #1
 8011c9a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011c9c:	7dfb      	ldrb	r3, [r7, #23]
 8011c9e:	68ba      	ldr	r2, [r7, #8]
 8011ca0:	4413      	add	r3, r2
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	701a      	strb	r2, [r3, #0]
    idx++;
 8011ca6:	7dfb      	ldrb	r3, [r7, #23]
 8011ca8:	3301      	adds	r3, #1
 8011caa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1e7      	bne.n	8011c84 <USBD_GetString+0x52>
 8011cb4:	e000      	b.n	8011cb8 <USBD_GetString+0x86>
    return;
 8011cb6:	bf00      	nop
  }
}
 8011cb8:	3718      	adds	r7, #24
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011cbe:	b480      	push	{r7}
 8011cc0:	b085      	sub	sp, #20
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011cce:	e005      	b.n	8011cdc <USBD_GetLen+0x1e>
  {
    len++;
 8011cd0:	7bfb      	ldrb	r3, [r7, #15]
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	3301      	adds	r3, #1
 8011cda:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1f5      	bne.n	8011cd0 <USBD_GetLen+0x12>
  }

  return len;
 8011ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr

08011cf2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b084      	sub	sp, #16
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	60f8      	str	r0, [r7, #12]
 8011cfa:	60b9      	str	r1, [r7, #8]
 8011cfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2202      	movs	r2, #2
 8011d02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	68ba      	ldr	r2, [r7, #8]
 8011d16:	2100      	movs	r1, #0
 8011d18:	68f8      	ldr	r0, [r7, #12]
 8011d1a:	f000 fdb6 	bl	801288a <USBD_LL_Transmit>

  return USBD_OK;
 8011d1e:	2300      	movs	r3, #0
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3710      	adds	r7, #16
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	68ba      	ldr	r2, [r7, #8]
 8011d38:	2100      	movs	r1, #0
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f000 fda5 	bl	801288a <USBD_LL_Transmit>

  return USBD_OK;
 8011d40:	2300      	movs	r3, #0
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3710      	adds	r7, #16
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}

08011d4a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011d4a:	b580      	push	{r7, lr}
 8011d4c:	b084      	sub	sp, #16
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	60f8      	str	r0, [r7, #12]
 8011d52:	60b9      	str	r1, [r7, #8]
 8011d54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2203      	movs	r2, #3
 8011d5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	687a      	ldr	r2, [r7, #4]
 8011d62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	687a      	ldr	r2, [r7, #4]
 8011d6a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	68ba      	ldr	r2, [r7, #8]
 8011d72:	2100      	movs	r1, #0
 8011d74:	68f8      	ldr	r0, [r7, #12]
 8011d76:	f000 fda9 	bl	80128cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d7a:	2300      	movs	r3, #0
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	60b9      	str	r1, [r7, #8]
 8011d8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	68ba      	ldr	r2, [r7, #8]
 8011d94:	2100      	movs	r1, #0
 8011d96:	68f8      	ldr	r0, [r7, #12]
 8011d98:	f000 fd98 	bl	80128cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d9c:	2300      	movs	r3, #0
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3710      	adds	r7, #16
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}

08011da6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011da6:	b580      	push	{r7, lr}
 8011da8:	b082      	sub	sp, #8
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2204      	movs	r2, #4
 8011db2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011db6:	2300      	movs	r3, #0
 8011db8:	2200      	movs	r2, #0
 8011dba:	2100      	movs	r1, #0
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f000 fd64 	bl	801288a <USBD_LL_Transmit>

  return USBD_OK;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3708      	adds	r7, #8
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2205      	movs	r2, #5
 8011dd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ddc:	2300      	movs	r3, #0
 8011dde:	2200      	movs	r2, #0
 8011de0:	2100      	movs	r1, #0
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 fd72 	bl	80128cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011de8:	2300      	movs	r3, #0
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3708      	adds	r7, #8
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
	...

08011df4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b087      	sub	sp, #28
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	60b9      	str	r1, [r7, #8]
 8011dfe:	4613      	mov	r3, r2
 8011e00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011e02:	2301      	movs	r3, #1
 8011e04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011e06:	2300      	movs	r3, #0
 8011e08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011e0a:	4b1f      	ldr	r3, [pc, #124]	; (8011e88 <FATFS_LinkDriverEx+0x94>)
 8011e0c:	7a5b      	ldrb	r3, [r3, #9]
 8011e0e:	b2db      	uxtb	r3, r3
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d131      	bne.n	8011e78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011e14:	4b1c      	ldr	r3, [pc, #112]	; (8011e88 <FATFS_LinkDriverEx+0x94>)
 8011e16:	7a5b      	ldrb	r3, [r3, #9]
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	4b1a      	ldr	r3, [pc, #104]	; (8011e88 <FATFS_LinkDriverEx+0x94>)
 8011e1e:	2100      	movs	r1, #0
 8011e20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011e22:	4b19      	ldr	r3, [pc, #100]	; (8011e88 <FATFS_LinkDriverEx+0x94>)
 8011e24:	7a5b      	ldrb	r3, [r3, #9]
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	4a17      	ldr	r2, [pc, #92]	; (8011e88 <FATFS_LinkDriverEx+0x94>)
 8011e2a:	009b      	lsls	r3, r3, #2
 8011e2c:	4413      	add	r3, r2
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011e32:	4b15      	ldr	r3, [pc, #84]	; (8011e88 <FATFS_LinkDriverEx+0x94>)
 8011e34:	7a5b      	ldrb	r3, [r3, #9]
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	461a      	mov	r2, r3
 8011e3a:	4b13      	ldr	r3, [pc, #76]	; (8011e88 <FATFS_LinkDriverEx+0x94>)
 8011e3c:	4413      	add	r3, r2
 8011e3e:	79fa      	ldrb	r2, [r7, #7]
 8011e40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011e42:	4b11      	ldr	r3, [pc, #68]	; (8011e88 <FATFS_LinkDriverEx+0x94>)
 8011e44:	7a5b      	ldrb	r3, [r3, #9]
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	1c5a      	adds	r2, r3, #1
 8011e4a:	b2d1      	uxtb	r1, r2
 8011e4c:	4a0e      	ldr	r2, [pc, #56]	; (8011e88 <FATFS_LinkDriverEx+0x94>)
 8011e4e:	7251      	strb	r1, [r2, #9]
 8011e50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011e52:	7dbb      	ldrb	r3, [r7, #22]
 8011e54:	3330      	adds	r3, #48	; 0x30
 8011e56:	b2da      	uxtb	r2, r3
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	3301      	adds	r3, #1
 8011e60:	223a      	movs	r2, #58	; 0x3a
 8011e62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	3302      	adds	r3, #2
 8011e68:	222f      	movs	r2, #47	; 0x2f
 8011e6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	3303      	adds	r3, #3
 8011e70:	2200      	movs	r2, #0
 8011e72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	371c      	adds	r7, #28
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e84:	4770      	bx	lr
 8011e86:	bf00      	nop
 8011e88:	24000228 	.word	0x24000228

08011e8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011e96:	2200      	movs	r2, #0
 8011e98:	6839      	ldr	r1, [r7, #0]
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f7ff ffaa 	bl	8011df4 <FATFS_LinkDriverEx>
 8011ea0:	4603      	mov	r3, r0
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
	...

08011eac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	4913      	ldr	r1, [pc, #76]	; (8011f00 <MX_USB_DEVICE_Init+0x54>)
 8011eb4:	4813      	ldr	r0, [pc, #76]	; (8011f04 <MX_USB_DEVICE_Init+0x58>)
 8011eb6:	f7fe fe77 	bl	8010ba8 <USBD_Init>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d001      	beq.n	8011ec4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011ec0:	f7ef f828 	bl	8000f14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011ec4:	4910      	ldr	r1, [pc, #64]	; (8011f08 <MX_USB_DEVICE_Init+0x5c>)
 8011ec6:	480f      	ldr	r0, [pc, #60]	; (8011f04 <MX_USB_DEVICE_Init+0x58>)
 8011ec8:	f7fe fea4 	bl	8010c14 <USBD_RegisterClass>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d001      	beq.n	8011ed6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011ed2:	f7ef f81f 	bl	8000f14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011ed6:	490d      	ldr	r1, [pc, #52]	; (8011f0c <MX_USB_DEVICE_Init+0x60>)
 8011ed8:	480a      	ldr	r0, [pc, #40]	; (8011f04 <MX_USB_DEVICE_Init+0x58>)
 8011eda:	f7fe fdc9 	bl	8010a70 <USBD_CDC_RegisterInterface>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d001      	beq.n	8011ee8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011ee4:	f7ef f816 	bl	8000f14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011ee8:	4806      	ldr	r0, [pc, #24]	; (8011f04 <MX_USB_DEVICE_Init+0x58>)
 8011eea:	f7fe feb4 	bl	8010c56 <USBD_Start>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d001      	beq.n	8011ef8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011ef4:	f7ef f80e 	bl	8000f14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011ef8:	f7f4 fd84 	bl	8006a04 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011efc:	bf00      	nop
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	24000148 	.word	0x24000148
 8011f04:	2400261c 	.word	0x2400261c
 8011f08:	24000030 	.word	0x24000030
 8011f0c:	24000134 	.word	0x24000134

08011f10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011f14:	2200      	movs	r2, #0
 8011f16:	4905      	ldr	r1, [pc, #20]	; (8011f2c <CDC_Init_FS+0x1c>)
 8011f18:	4805      	ldr	r0, [pc, #20]	; (8011f30 <CDC_Init_FS+0x20>)
 8011f1a:	f7fe fdbe 	bl	8010a9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011f1e:	4905      	ldr	r1, [pc, #20]	; (8011f34 <CDC_Init_FS+0x24>)
 8011f20:	4803      	ldr	r0, [pc, #12]	; (8011f30 <CDC_Init_FS+0x20>)
 8011f22:	f7fe fdd3 	bl	8010acc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011f26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	240030ec 	.word	0x240030ec
 8011f30:	2400261c 	.word	0x2400261c
 8011f34:	240028ec 	.word	0x240028ec

08011f38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011f3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr

08011f48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011f48:	b480      	push	{r7}
 8011f4a:	b083      	sub	sp, #12
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	4603      	mov	r3, r0
 8011f50:	6039      	str	r1, [r7, #0]
 8011f52:	71fb      	strb	r3, [r7, #7]
 8011f54:	4613      	mov	r3, r2
 8011f56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011f58:	79fb      	ldrb	r3, [r7, #7]
 8011f5a:	2b23      	cmp	r3, #35	; 0x23
 8011f5c:	f200 808c 	bhi.w	8012078 <CDC_Control_FS+0x130>
 8011f60:	a201      	add	r2, pc, #4	; (adr r2, 8011f68 <CDC_Control_FS+0x20>)
 8011f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f66:	bf00      	nop
 8011f68:	08012079 	.word	0x08012079
 8011f6c:	08012079 	.word	0x08012079
 8011f70:	08012079 	.word	0x08012079
 8011f74:	08012079 	.word	0x08012079
 8011f78:	08012079 	.word	0x08012079
 8011f7c:	08012079 	.word	0x08012079
 8011f80:	08012079 	.word	0x08012079
 8011f84:	08012079 	.word	0x08012079
 8011f88:	08012079 	.word	0x08012079
 8011f8c:	08012079 	.word	0x08012079
 8011f90:	08012079 	.word	0x08012079
 8011f94:	08012079 	.word	0x08012079
 8011f98:	08012079 	.word	0x08012079
 8011f9c:	08012079 	.word	0x08012079
 8011fa0:	08012079 	.word	0x08012079
 8011fa4:	08012079 	.word	0x08012079
 8011fa8:	08012079 	.word	0x08012079
 8011fac:	08012079 	.word	0x08012079
 8011fb0:	08012079 	.word	0x08012079
 8011fb4:	08012079 	.word	0x08012079
 8011fb8:	08012079 	.word	0x08012079
 8011fbc:	08012079 	.word	0x08012079
 8011fc0:	08012079 	.word	0x08012079
 8011fc4:	08012079 	.word	0x08012079
 8011fc8:	08012079 	.word	0x08012079
 8011fcc:	08012079 	.word	0x08012079
 8011fd0:	08012079 	.word	0x08012079
 8011fd4:	08012079 	.word	0x08012079
 8011fd8:	08012079 	.word	0x08012079
 8011fdc:	08012079 	.word	0x08012079
 8011fe0:	08012079 	.word	0x08012079
 8011fe4:	08012079 	.word	0x08012079
 8011fe8:	08011ff9 	.word	0x08011ff9
 8011fec:	08012033 	.word	0x08012033
 8011ff0:	08012079 	.word	0x08012079
 8011ff4:	08012079 	.word	0x08012079
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	781a      	ldrb	r2, [r3, #0]
 8011ffc:	4b22      	ldr	r3, [pc, #136]	; (8012088 <CDC_Control_FS+0x140>)
 8011ffe:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	785a      	ldrb	r2, [r3, #1]
 8012004:	4b20      	ldr	r3, [pc, #128]	; (8012088 <CDC_Control_FS+0x140>)
 8012006:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	789a      	ldrb	r2, [r3, #2]
 801200c:	4b1e      	ldr	r3, [pc, #120]	; (8012088 <CDC_Control_FS+0x140>)
 801200e:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	78da      	ldrb	r2, [r3, #3]
 8012014:	4b1c      	ldr	r3, [pc, #112]	; (8012088 <CDC_Control_FS+0x140>)
 8012016:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	791a      	ldrb	r2, [r3, #4]
 801201c:	4b1a      	ldr	r3, [pc, #104]	; (8012088 <CDC_Control_FS+0x140>)
 801201e:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	795a      	ldrb	r2, [r3, #5]
 8012024:	4b18      	ldr	r3, [pc, #96]	; (8012088 <CDC_Control_FS+0x140>)
 8012026:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	799a      	ldrb	r2, [r3, #6]
 801202c:	4b16      	ldr	r3, [pc, #88]	; (8012088 <CDC_Control_FS+0x140>)
 801202e:	719a      	strb	r2, [r3, #6]

    break;
 8012030:	e023      	b.n	801207a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 8012032:	4b15      	ldr	r3, [pc, #84]	; (8012088 <CDC_Control_FS+0x140>)
 8012034:	781a      	ldrb	r2, [r3, #0]
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	3301      	adds	r3, #1
 801203e:	4a12      	ldr	r2, [pc, #72]	; (8012088 <CDC_Control_FS+0x140>)
 8012040:	7852      	ldrb	r2, [r2, #1]
 8012042:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	3302      	adds	r3, #2
 8012048:	4a0f      	ldr	r2, [pc, #60]	; (8012088 <CDC_Control_FS+0x140>)
 801204a:	7892      	ldrb	r2, [r2, #2]
 801204c:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	3303      	adds	r3, #3
 8012052:	4a0d      	ldr	r2, [pc, #52]	; (8012088 <CDC_Control_FS+0x140>)
 8012054:	78d2      	ldrb	r2, [r2, #3]
 8012056:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	3304      	adds	r3, #4
 801205c:	4a0a      	ldr	r2, [pc, #40]	; (8012088 <CDC_Control_FS+0x140>)
 801205e:	7912      	ldrb	r2, [r2, #4]
 8012060:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	3305      	adds	r3, #5
 8012066:	4a08      	ldr	r2, [pc, #32]	; (8012088 <CDC_Control_FS+0x140>)
 8012068:	7952      	ldrb	r2, [r2, #5]
 801206a:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	3306      	adds	r3, #6
 8012070:	4a05      	ldr	r2, [pc, #20]	; (8012088 <CDC_Control_FS+0x140>)
 8012072:	7992      	ldrb	r2, [r2, #6]
 8012074:	701a      	strb	r2, [r3, #0]

    break;
 8012076:	e000      	b.n	801207a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012078:	bf00      	nop
  }

  return (USBD_OK);
 801207a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801207c:	4618      	mov	r0, r3
 801207e:	370c      	adds	r7, #12
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr
 8012088:	240038ec 	.word	0x240038ec

0801208c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012096:	6879      	ldr	r1, [r7, #4]
 8012098:	4809      	ldr	r0, [pc, #36]	; (80120c0 <CDC_Receive_FS+0x34>)
 801209a:	f7fe fd17 	bl	8010acc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801209e:	4808      	ldr	r0, [pc, #32]	; (80120c0 <CDC_Receive_FS+0x34>)
 80120a0:	f7fe fd58 	bl	8010b54 <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 80120aa:	89fb      	ldrh	r3, [r7, #14]
 80120ac:	4619      	mov	r1, r3
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f000 f808 	bl	80120c4 <CDC_Transmit_FS>
  return (USBD_OK);
 80120b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3710      	adds	r7, #16
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	2400261c 	.word	0x2400261c

080120c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b084      	sub	sp, #16
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	460b      	mov	r3, r1
 80120ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80120d0:	2300      	movs	r3, #0
 80120d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80120d4:	4b0d      	ldr	r3, [pc, #52]	; (801210c <CDC_Transmit_FS+0x48>)
 80120d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80120da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d001      	beq.n	80120ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80120e6:	2301      	movs	r3, #1
 80120e8:	e00b      	b.n	8012102 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80120ea:	887b      	ldrh	r3, [r7, #2]
 80120ec:	461a      	mov	r2, r3
 80120ee:	6879      	ldr	r1, [r7, #4]
 80120f0:	4806      	ldr	r0, [pc, #24]	; (801210c <CDC_Transmit_FS+0x48>)
 80120f2:	f7fe fcd2 	bl	8010a9a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80120f6:	4805      	ldr	r0, [pc, #20]	; (801210c <CDC_Transmit_FS+0x48>)
 80120f8:	f7fe fcfc 	bl	8010af4 <USBD_CDC_TransmitPacket>
 80120fc:	4603      	mov	r3, r0
 80120fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012100:	7bfb      	ldrb	r3, [r7, #15]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	2400261c 	.word	0x2400261c

08012110 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012110:	b480      	push	{r7}
 8012112:	b087      	sub	sp, #28
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	4613      	mov	r3, r2
 801211c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801211e:	2300      	movs	r3, #0
 8012120:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012122:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012126:	4618      	mov	r0, r3
 8012128:	371c      	adds	r7, #28
 801212a:	46bd      	mov	sp, r7
 801212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012130:	4770      	bx	lr
	...

08012134 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012134:	b480      	push	{r7}
 8012136:	b083      	sub	sp, #12
 8012138:	af00      	add	r7, sp, #0
 801213a:	4603      	mov	r3, r0
 801213c:	6039      	str	r1, [r7, #0]
 801213e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	2212      	movs	r2, #18
 8012144:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012146:	4b03      	ldr	r3, [pc, #12]	; (8012154 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012148:	4618      	mov	r0, r3
 801214a:	370c      	adds	r7, #12
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr
 8012154:	24000164 	.word	0x24000164

08012158 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	4603      	mov	r3, r0
 8012160:	6039      	str	r1, [r7, #0]
 8012162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	2204      	movs	r2, #4
 8012168:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801216a:	4b03      	ldr	r3, [pc, #12]	; (8012178 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801216c:	4618      	mov	r0, r3
 801216e:	370c      	adds	r7, #12
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr
 8012178:	24000178 	.word	0x24000178

0801217c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	4603      	mov	r3, r0
 8012184:	6039      	str	r1, [r7, #0]
 8012186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012188:	79fb      	ldrb	r3, [r7, #7]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d105      	bne.n	801219a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	4907      	ldr	r1, [pc, #28]	; (80121b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8012192:	4808      	ldr	r0, [pc, #32]	; (80121b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8012194:	f7ff fd4d 	bl	8011c32 <USBD_GetString>
 8012198:	e004      	b.n	80121a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801219a:	683a      	ldr	r2, [r7, #0]
 801219c:	4904      	ldr	r1, [pc, #16]	; (80121b0 <USBD_FS_ProductStrDescriptor+0x34>)
 801219e:	4805      	ldr	r0, [pc, #20]	; (80121b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80121a0:	f7ff fd47 	bl	8011c32 <USBD_GetString>
  }
  return USBD_StrDesc;
 80121a4:	4b02      	ldr	r3, [pc, #8]	; (80121b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	3708      	adds	r7, #8
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	240038f4 	.word	0x240038f4
 80121b4:	08012bb8 	.word	0x08012bb8

080121b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	4603      	mov	r3, r0
 80121c0:	6039      	str	r1, [r7, #0]
 80121c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80121c4:	683a      	ldr	r2, [r7, #0]
 80121c6:	4904      	ldr	r1, [pc, #16]	; (80121d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80121c8:	4804      	ldr	r0, [pc, #16]	; (80121dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80121ca:	f7ff fd32 	bl	8011c32 <USBD_GetString>
  return USBD_StrDesc;
 80121ce:	4b02      	ldr	r3, [pc, #8]	; (80121d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	240038f4 	.word	0x240038f4
 80121dc:	08012bd0 	.word	0x08012bd0

080121e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	4603      	mov	r3, r0
 80121e8:	6039      	str	r1, [r7, #0]
 80121ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	221a      	movs	r2, #26
 80121f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80121f2:	f000 f843 	bl	801227c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80121f6:	4b02      	ldr	r3, [pc, #8]	; (8012200 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3708      	adds	r7, #8
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	2400017c 	.word	0x2400017c

08012204 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	4603      	mov	r3, r0
 801220c:	6039      	str	r1, [r7, #0]
 801220e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012210:	79fb      	ldrb	r3, [r7, #7]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d105      	bne.n	8012222 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012216:	683a      	ldr	r2, [r7, #0]
 8012218:	4907      	ldr	r1, [pc, #28]	; (8012238 <USBD_FS_ConfigStrDescriptor+0x34>)
 801221a:	4808      	ldr	r0, [pc, #32]	; (801223c <USBD_FS_ConfigStrDescriptor+0x38>)
 801221c:	f7ff fd09 	bl	8011c32 <USBD_GetString>
 8012220:	e004      	b.n	801222c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012222:	683a      	ldr	r2, [r7, #0]
 8012224:	4904      	ldr	r1, [pc, #16]	; (8012238 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012226:	4805      	ldr	r0, [pc, #20]	; (801223c <USBD_FS_ConfigStrDescriptor+0x38>)
 8012228:	f7ff fd03 	bl	8011c32 <USBD_GetString>
  }
  return USBD_StrDesc;
 801222c:	4b02      	ldr	r3, [pc, #8]	; (8012238 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801222e:	4618      	mov	r0, r3
 8012230:	3708      	adds	r7, #8
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	240038f4 	.word	0x240038f4
 801223c:	08012be4 	.word	0x08012be4

08012240 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	4603      	mov	r3, r0
 8012248:	6039      	str	r1, [r7, #0]
 801224a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801224c:	79fb      	ldrb	r3, [r7, #7]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d105      	bne.n	801225e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012252:	683a      	ldr	r2, [r7, #0]
 8012254:	4907      	ldr	r1, [pc, #28]	; (8012274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012256:	4808      	ldr	r0, [pc, #32]	; (8012278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012258:	f7ff fceb 	bl	8011c32 <USBD_GetString>
 801225c:	e004      	b.n	8012268 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801225e:	683a      	ldr	r2, [r7, #0]
 8012260:	4904      	ldr	r1, [pc, #16]	; (8012274 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012262:	4805      	ldr	r0, [pc, #20]	; (8012278 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012264:	f7ff fce5 	bl	8011c32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012268:	4b02      	ldr	r3, [pc, #8]	; (8012274 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801226a:	4618      	mov	r0, r3
 801226c:	3708      	adds	r7, #8
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	240038f4 	.word	0x240038f4
 8012278:	08012bf0 	.word	0x08012bf0

0801227c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012282:	4b0f      	ldr	r3, [pc, #60]	; (80122c0 <Get_SerialNum+0x44>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012288:	4b0e      	ldr	r3, [pc, #56]	; (80122c4 <Get_SerialNum+0x48>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801228e:	4b0e      	ldr	r3, [pc, #56]	; (80122c8 <Get_SerialNum+0x4c>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012294:	68fa      	ldr	r2, [r7, #12]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	4413      	add	r3, r2
 801229a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d009      	beq.n	80122b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80122a2:	2208      	movs	r2, #8
 80122a4:	4909      	ldr	r1, [pc, #36]	; (80122cc <Get_SerialNum+0x50>)
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f000 f814 	bl	80122d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80122ac:	2204      	movs	r2, #4
 80122ae:	4908      	ldr	r1, [pc, #32]	; (80122d0 <Get_SerialNum+0x54>)
 80122b0:	68b8      	ldr	r0, [r7, #8]
 80122b2:	f000 f80f 	bl	80122d4 <IntToUnicode>
  }
}
 80122b6:	bf00      	nop
 80122b8:	3710      	adds	r7, #16
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	1ff1e800 	.word	0x1ff1e800
 80122c4:	1ff1e804 	.word	0x1ff1e804
 80122c8:	1ff1e808 	.word	0x1ff1e808
 80122cc:	2400017e 	.word	0x2400017e
 80122d0:	2400018e 	.word	0x2400018e

080122d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b087      	sub	sp, #28
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	60b9      	str	r1, [r7, #8]
 80122de:	4613      	mov	r3, r2
 80122e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80122e2:	2300      	movs	r3, #0
 80122e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80122e6:	2300      	movs	r3, #0
 80122e8:	75fb      	strb	r3, [r7, #23]
 80122ea:	e027      	b.n	801233c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	0f1b      	lsrs	r3, r3, #28
 80122f0:	2b09      	cmp	r3, #9
 80122f2:	d80b      	bhi.n	801230c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	0f1b      	lsrs	r3, r3, #28
 80122f8:	b2da      	uxtb	r2, r3
 80122fa:	7dfb      	ldrb	r3, [r7, #23]
 80122fc:	005b      	lsls	r3, r3, #1
 80122fe:	4619      	mov	r1, r3
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	440b      	add	r3, r1
 8012304:	3230      	adds	r2, #48	; 0x30
 8012306:	b2d2      	uxtb	r2, r2
 8012308:	701a      	strb	r2, [r3, #0]
 801230a:	e00a      	b.n	8012322 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	0f1b      	lsrs	r3, r3, #28
 8012310:	b2da      	uxtb	r2, r3
 8012312:	7dfb      	ldrb	r3, [r7, #23]
 8012314:	005b      	lsls	r3, r3, #1
 8012316:	4619      	mov	r1, r3
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	440b      	add	r3, r1
 801231c:	3237      	adds	r2, #55	; 0x37
 801231e:	b2d2      	uxtb	r2, r2
 8012320:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	011b      	lsls	r3, r3, #4
 8012326:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012328:	7dfb      	ldrb	r3, [r7, #23]
 801232a:	005b      	lsls	r3, r3, #1
 801232c:	3301      	adds	r3, #1
 801232e:	68ba      	ldr	r2, [r7, #8]
 8012330:	4413      	add	r3, r2
 8012332:	2200      	movs	r2, #0
 8012334:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012336:	7dfb      	ldrb	r3, [r7, #23]
 8012338:	3301      	adds	r3, #1
 801233a:	75fb      	strb	r3, [r7, #23]
 801233c:	7dfa      	ldrb	r2, [r7, #23]
 801233e:	79fb      	ldrb	r3, [r7, #7]
 8012340:	429a      	cmp	r2, r3
 8012342:	d3d3      	bcc.n	80122ec <IntToUnicode+0x18>
  }
}
 8012344:	bf00      	nop
 8012346:	bf00      	nop
 8012348:	371c      	adds	r7, #28
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr
	...

08012354 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b0b8      	sub	sp, #224	; 0xe0
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801235c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012360:	2200      	movs	r2, #0
 8012362:	601a      	str	r2, [r3, #0]
 8012364:	605a      	str	r2, [r3, #4]
 8012366:	609a      	str	r2, [r3, #8]
 8012368:	60da      	str	r2, [r3, #12]
 801236a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801236c:	f107 0310 	add.w	r3, r7, #16
 8012370:	22bc      	movs	r2, #188	; 0xbc
 8012372:	2100      	movs	r1, #0
 8012374:	4618      	mov	r0, r3
 8012376:	f000 fb43 	bl	8012a00 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	4a2a      	ldr	r2, [pc, #168]	; (8012428 <HAL_PCD_MspInit+0xd4>)
 8012380:	4293      	cmp	r3, r2
 8012382:	d14c      	bne.n	801241e <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012384:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012388:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801238a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801238e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012392:	f107 0310 	add.w	r3, r7, #16
 8012396:	4618      	mov	r0, r3
 8012398:	f7f5 fb22 	bl	80079e0 <HAL_RCCEx_PeriphCLKConfig>
 801239c:	4603      	mov	r3, r0
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d001      	beq.n	80123a6 <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 80123a2:	f7ee fdb7 	bl	8000f14 <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80123a6:	4b21      	ldr	r3, [pc, #132]	; (801242c <HAL_PCD_MspInit+0xd8>)
 80123a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80123ac:	4a1f      	ldr	r2, [pc, #124]	; (801242c <HAL_PCD_MspInit+0xd8>)
 80123ae:	f043 0301 	orr.w	r3, r3, #1
 80123b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80123b6:	4b1d      	ldr	r3, [pc, #116]	; (801242c <HAL_PCD_MspInit+0xd8>)
 80123b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80123bc:	f003 0301 	and.w	r3, r3, #1
 80123c0:	60fb      	str	r3, [r7, #12]
 80123c2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80123c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80123c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80123cc:	2302      	movs	r3, #2
 80123ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123d2:	2300      	movs	r3, #0
 80123d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80123d8:	2300      	movs	r3, #0
 80123da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80123de:	230a      	movs	r3, #10
 80123e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80123e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80123e8:	4619      	mov	r1, r3
 80123ea:	4811      	ldr	r0, [pc, #68]	; (8012430 <HAL_PCD_MspInit+0xdc>)
 80123ec:	f7f1 ff30 	bl	8004250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80123f0:	4b0e      	ldr	r3, [pc, #56]	; (801242c <HAL_PCD_MspInit+0xd8>)
 80123f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80123f6:	4a0d      	ldr	r2, [pc, #52]	; (801242c <HAL_PCD_MspInit+0xd8>)
 80123f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80123fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012400:	4b0a      	ldr	r3, [pc, #40]	; (801242c <HAL_PCD_MspInit+0xd8>)
 8012402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801240a:	60bb      	str	r3, [r7, #8]
 801240c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801240e:	2200      	movs	r2, #0
 8012410:	2100      	movs	r1, #0
 8012412:	2065      	movs	r0, #101	; 0x65
 8012414:	f7ef fc39 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012418:	2065      	movs	r0, #101	; 0x65
 801241a:	f7ef fc50 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801241e:	bf00      	nop
 8012420:	37e0      	adds	r7, #224	; 0xe0
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	40080000 	.word	0x40080000
 801242c:	58024400 	.word	0x58024400
 8012430:	58020000 	.word	0x58020000

08012434 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012448:	4619      	mov	r1, r3
 801244a:	4610      	mov	r0, r2
 801244c:	f7fe fc4e 	bl	8010cec <USBD_LL_SetupStage>
}
 8012450:	bf00      	nop
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	460b      	mov	r3, r1
 8012462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801246a:	78fa      	ldrb	r2, [r7, #3]
 801246c:	6879      	ldr	r1, [r7, #4]
 801246e:	4613      	mov	r3, r2
 8012470:	00db      	lsls	r3, r3, #3
 8012472:	1a9b      	subs	r3, r3, r2
 8012474:	009b      	lsls	r3, r3, #2
 8012476:	440b      	add	r3, r1
 8012478:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	78fb      	ldrb	r3, [r7, #3]
 8012480:	4619      	mov	r1, r3
 8012482:	f7fe fc88 	bl	8010d96 <USBD_LL_DataOutStage>
}
 8012486:	bf00      	nop
 8012488:	3708      	adds	r7, #8
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}

0801248e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801248e:	b580      	push	{r7, lr}
 8012490:	b082      	sub	sp, #8
 8012492:	af00      	add	r7, sp, #0
 8012494:	6078      	str	r0, [r7, #4]
 8012496:	460b      	mov	r3, r1
 8012498:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80124a0:	78fa      	ldrb	r2, [r7, #3]
 80124a2:	6879      	ldr	r1, [r7, #4]
 80124a4:	4613      	mov	r3, r2
 80124a6:	00db      	lsls	r3, r3, #3
 80124a8:	1a9b      	subs	r3, r3, r2
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	440b      	add	r3, r1
 80124ae:	3348      	adds	r3, #72	; 0x48
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	78fb      	ldrb	r3, [r7, #3]
 80124b4:	4619      	mov	r1, r3
 80124b6:	f7fe fcd3 	bl	8010e60 <USBD_LL_DataInStage>
}
 80124ba:	bf00      	nop
 80124bc:	3708      	adds	r7, #8
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b082      	sub	sp, #8
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80124d0:	4618      	mov	r0, r3
 80124d2:	f7fe fddc 	bl	801108e <USBD_LL_SOF>
}
 80124d6:	bf00      	nop
 80124d8:	3708      	adds	r7, #8
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124de:	b580      	push	{r7, lr}
 80124e0:	b084      	sub	sp, #16
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80124e6:	2301      	movs	r3, #1
 80124e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	68db      	ldr	r3, [r3, #12]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d102      	bne.n	80124f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80124f2:	2300      	movs	r3, #0
 80124f4:	73fb      	strb	r3, [r7, #15]
 80124f6:	e008      	b.n	801250a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	2b02      	cmp	r3, #2
 80124fe:	d102      	bne.n	8012506 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012500:	2301      	movs	r3, #1
 8012502:	73fb      	strb	r3, [r7, #15]
 8012504:	e001      	b.n	801250a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012506:	f7ee fd05 	bl	8000f14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012510:	7bfa      	ldrb	r2, [r7, #15]
 8012512:	4611      	mov	r1, r2
 8012514:	4618      	mov	r0, r3
 8012516:	f7fe fd7c 	bl	8011012 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012520:	4618      	mov	r0, r3
 8012522:	f7fe fd35 	bl	8010f90 <USBD_LL_Reset>
}
 8012526:	bf00      	nop
 8012528:	3710      	adds	r7, #16
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
	...

08012530 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801253e:	4618      	mov	r0, r3
 8012540:	f7fe fd77 	bl	8011032 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	687a      	ldr	r2, [r7, #4]
 8012550:	6812      	ldr	r2, [r2, #0]
 8012552:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012556:	f043 0301 	orr.w	r3, r3, #1
 801255a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6a1b      	ldr	r3, [r3, #32]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d005      	beq.n	8012570 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012564:	4b04      	ldr	r3, [pc, #16]	; (8012578 <HAL_PCD_SuspendCallback+0x48>)
 8012566:	691b      	ldr	r3, [r3, #16]
 8012568:	4a03      	ldr	r2, [pc, #12]	; (8012578 <HAL_PCD_SuspendCallback+0x48>)
 801256a:	f043 0306 	orr.w	r3, r3, #6
 801256e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012570:	bf00      	nop
 8012572:	3708      	adds	r7, #8
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}
 8012578:	e000ed00 	.word	0xe000ed00

0801257c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801258a:	4618      	mov	r0, r3
 801258c:	f7fe fd67 	bl	801105e <USBD_LL_Resume>
}
 8012590:	bf00      	nop
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	460b      	mov	r3, r1
 80125a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80125aa:	78fa      	ldrb	r2, [r7, #3]
 80125ac:	4611      	mov	r1, r2
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fe fd95 	bl	80110de <USBD_LL_IsoOUTIncomplete>
}
 80125b4:	bf00      	nop
 80125b6:	3708      	adds	r7, #8
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	460b      	mov	r3, r1
 80125c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80125ce:	78fa      	ldrb	r2, [r7, #3]
 80125d0:	4611      	mov	r1, r2
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7fe fd76 	bl	80110c4 <USBD_LL_IsoINIncomplete>
}
 80125d8:	bf00      	nop
 80125da:	3708      	adds	r7, #8
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fe fd82 	bl	80110f8 <USBD_LL_DevConnected>
}
 80125f4:	bf00      	nop
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801260a:	4618      	mov	r0, r3
 801260c:	f7fe fd7f 	bl	801110e <USBD_LL_DevDisconnected>
}
 8012610:	bf00      	nop
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d13e      	bne.n	80126a6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012628:	4a21      	ldr	r2, [pc, #132]	; (80126b0 <USBD_LL_Init+0x98>)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	4a1f      	ldr	r2, [pc, #124]	; (80126b0 <USBD_LL_Init+0x98>)
 8012634:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012638:	4b1d      	ldr	r3, [pc, #116]	; (80126b0 <USBD_LL_Init+0x98>)
 801263a:	4a1e      	ldr	r2, [pc, #120]	; (80126b4 <USBD_LL_Init+0x9c>)
 801263c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801263e:	4b1c      	ldr	r3, [pc, #112]	; (80126b0 <USBD_LL_Init+0x98>)
 8012640:	2209      	movs	r2, #9
 8012642:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012644:	4b1a      	ldr	r3, [pc, #104]	; (80126b0 <USBD_LL_Init+0x98>)
 8012646:	2202      	movs	r2, #2
 8012648:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801264a:	4b19      	ldr	r3, [pc, #100]	; (80126b0 <USBD_LL_Init+0x98>)
 801264c:	2200      	movs	r2, #0
 801264e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012650:	4b17      	ldr	r3, [pc, #92]	; (80126b0 <USBD_LL_Init+0x98>)
 8012652:	2202      	movs	r2, #2
 8012654:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012656:	4b16      	ldr	r3, [pc, #88]	; (80126b0 <USBD_LL_Init+0x98>)
 8012658:	2200      	movs	r2, #0
 801265a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801265c:	4b14      	ldr	r3, [pc, #80]	; (80126b0 <USBD_LL_Init+0x98>)
 801265e:	2200      	movs	r2, #0
 8012660:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012662:	4b13      	ldr	r3, [pc, #76]	; (80126b0 <USBD_LL_Init+0x98>)
 8012664:	2200      	movs	r2, #0
 8012666:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012668:	4b11      	ldr	r3, [pc, #68]	; (80126b0 <USBD_LL_Init+0x98>)
 801266a:	2200      	movs	r2, #0
 801266c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801266e:	4b10      	ldr	r3, [pc, #64]	; (80126b0 <USBD_LL_Init+0x98>)
 8012670:	2200      	movs	r2, #0
 8012672:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012674:	4b0e      	ldr	r3, [pc, #56]	; (80126b0 <USBD_LL_Init+0x98>)
 8012676:	2200      	movs	r2, #0
 8012678:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801267a:	480d      	ldr	r0, [pc, #52]	; (80126b0 <USBD_LL_Init+0x98>)
 801267c:	f7f2 ff8c 	bl	8005598 <HAL_PCD_Init>
 8012680:	4603      	mov	r3, r0
 8012682:	2b00      	cmp	r3, #0
 8012684:	d001      	beq.n	801268a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012686:	f7ee fc45 	bl	8000f14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801268a:	2180      	movs	r1, #128	; 0x80
 801268c:	4808      	ldr	r0, [pc, #32]	; (80126b0 <USBD_LL_Init+0x98>)
 801268e:	f7f4 f91e 	bl	80068ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012692:	2240      	movs	r2, #64	; 0x40
 8012694:	2100      	movs	r1, #0
 8012696:	4806      	ldr	r0, [pc, #24]	; (80126b0 <USBD_LL_Init+0x98>)
 8012698:	f7f4 f8d2 	bl	8006840 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801269c:	2280      	movs	r2, #128	; 0x80
 801269e:	2101      	movs	r1, #1
 80126a0:	4803      	ldr	r0, [pc, #12]	; (80126b0 <USBD_LL_Init+0x98>)
 80126a2:	f7f4 f8cd 	bl	8006840 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80126a6:	2300      	movs	r3, #0
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3708      	adds	r7, #8
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}
 80126b0:	24003af4 	.word	0x24003af4
 80126b4:	40080000 	.word	0x40080000

080126b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126c0:	2300      	movs	r3, #0
 80126c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126c4:	2300      	movs	r3, #0
 80126c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7f3 f886 	bl	80057e0 <HAL_PCD_Start>
 80126d4:	4603      	mov	r3, r0
 80126d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126d8:	7bfb      	ldrb	r3, [r7, #15]
 80126da:	4618      	mov	r0, r3
 80126dc:	f000 f92a 	bl	8012934 <USBD_Get_USB_Status>
 80126e0:	4603      	mov	r3, r0
 80126e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3710      	adds	r7, #16
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}

080126ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80126ee:	b580      	push	{r7, lr}
 80126f0:	b084      	sub	sp, #16
 80126f2:	af00      	add	r7, sp, #0
 80126f4:	6078      	str	r0, [r7, #4]
 80126f6:	4608      	mov	r0, r1
 80126f8:	4611      	mov	r1, r2
 80126fa:	461a      	mov	r2, r3
 80126fc:	4603      	mov	r3, r0
 80126fe:	70fb      	strb	r3, [r7, #3]
 8012700:	460b      	mov	r3, r1
 8012702:	70bb      	strb	r3, [r7, #2]
 8012704:	4613      	mov	r3, r2
 8012706:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012708:	2300      	movs	r3, #0
 801270a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801270c:	2300      	movs	r3, #0
 801270e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012716:	78bb      	ldrb	r3, [r7, #2]
 8012718:	883a      	ldrh	r2, [r7, #0]
 801271a:	78f9      	ldrb	r1, [r7, #3]
 801271c:	f7f3 fc97 	bl	800604e <HAL_PCD_EP_Open>
 8012720:	4603      	mov	r3, r0
 8012722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012724:	7bfb      	ldrb	r3, [r7, #15]
 8012726:	4618      	mov	r0, r3
 8012728:	f000 f904 	bl	8012934 <USBD_Get_USB_Status>
 801272c:	4603      	mov	r3, r0
 801272e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012730:	7bbb      	ldrb	r3, [r7, #14]
}
 8012732:	4618      	mov	r0, r3
 8012734:	3710      	adds	r7, #16
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}

0801273a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801273a:	b580      	push	{r7, lr}
 801273c:	b084      	sub	sp, #16
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
 8012742:	460b      	mov	r3, r1
 8012744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012746:	2300      	movs	r3, #0
 8012748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801274a:	2300      	movs	r3, #0
 801274c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012754:	78fa      	ldrb	r2, [r7, #3]
 8012756:	4611      	mov	r1, r2
 8012758:	4618      	mov	r0, r3
 801275a:	f7f3 fce0 	bl	800611e <HAL_PCD_EP_Close>
 801275e:	4603      	mov	r3, r0
 8012760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012762:	7bfb      	ldrb	r3, [r7, #15]
 8012764:	4618      	mov	r0, r3
 8012766:	f000 f8e5 	bl	8012934 <USBD_Get_USB_Status>
 801276a:	4603      	mov	r3, r0
 801276c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801276e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012770:	4618      	mov	r0, r3
 8012772:	3710      	adds	r7, #16
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b084      	sub	sp, #16
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	460b      	mov	r3, r1
 8012782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012784:	2300      	movs	r3, #0
 8012786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012788:	2300      	movs	r3, #0
 801278a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012792:	78fa      	ldrb	r2, [r7, #3]
 8012794:	4611      	mov	r1, r2
 8012796:	4618      	mov	r0, r3
 8012798:	f7f3 fdb8 	bl	800630c <HAL_PCD_EP_SetStall>
 801279c:	4603      	mov	r3, r0
 801279e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127a0:	7bfb      	ldrb	r3, [r7, #15]
 80127a2:	4618      	mov	r0, r3
 80127a4:	f000 f8c6 	bl	8012934 <USBD_Get_USB_Status>
 80127a8:	4603      	mov	r3, r0
 80127aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b084      	sub	sp, #16
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	460b      	mov	r3, r1
 80127c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127c2:	2300      	movs	r3, #0
 80127c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127c6:	2300      	movs	r3, #0
 80127c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80127d0:	78fa      	ldrb	r2, [r7, #3]
 80127d2:	4611      	mov	r1, r2
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7f3 fdfd 	bl	80063d4 <HAL_PCD_EP_ClrStall>
 80127da:	4603      	mov	r3, r0
 80127dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127de:	7bfb      	ldrb	r3, [r7, #15]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f000 f8a7 	bl	8012934 <USBD_Get_USB_Status>
 80127e6:	4603      	mov	r3, r0
 80127e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3710      	adds	r7, #16
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127f4:	b480      	push	{r7}
 80127f6:	b085      	sub	sp, #20
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	460b      	mov	r3, r1
 80127fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012806:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801280c:	2b00      	cmp	r3, #0
 801280e:	da0b      	bge.n	8012828 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012810:	78fb      	ldrb	r3, [r7, #3]
 8012812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012816:	68f9      	ldr	r1, [r7, #12]
 8012818:	4613      	mov	r3, r2
 801281a:	00db      	lsls	r3, r3, #3
 801281c:	1a9b      	subs	r3, r3, r2
 801281e:	009b      	lsls	r3, r3, #2
 8012820:	440b      	add	r3, r1
 8012822:	333e      	adds	r3, #62	; 0x3e
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	e00b      	b.n	8012840 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012828:	78fb      	ldrb	r3, [r7, #3]
 801282a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801282e:	68f9      	ldr	r1, [r7, #12]
 8012830:	4613      	mov	r3, r2
 8012832:	00db      	lsls	r3, r3, #3
 8012834:	1a9b      	subs	r3, r3, r2
 8012836:	009b      	lsls	r3, r3, #2
 8012838:	440b      	add	r3, r1
 801283a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801283e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012840:	4618      	mov	r0, r3
 8012842:	3714      	adds	r7, #20
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	460b      	mov	r3, r1
 8012856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012858:	2300      	movs	r3, #0
 801285a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801285c:	2300      	movs	r3, #0
 801285e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012866:	78fa      	ldrb	r2, [r7, #3]
 8012868:	4611      	mov	r1, r2
 801286a:	4618      	mov	r0, r3
 801286c:	f7f3 fbca 	bl	8006004 <HAL_PCD_SetAddress>
 8012870:	4603      	mov	r3, r0
 8012872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012874:	7bfb      	ldrb	r3, [r7, #15]
 8012876:	4618      	mov	r0, r3
 8012878:	f000 f85c 	bl	8012934 <USBD_Get_USB_Status>
 801287c:	4603      	mov	r3, r0
 801287e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012880:	7bbb      	ldrb	r3, [r7, #14]
}
 8012882:	4618      	mov	r0, r3
 8012884:	3710      	adds	r7, #16
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801288a:	b580      	push	{r7, lr}
 801288c:	b086      	sub	sp, #24
 801288e:	af00      	add	r7, sp, #0
 8012890:	60f8      	str	r0, [r7, #12]
 8012892:	607a      	str	r2, [r7, #4]
 8012894:	603b      	str	r3, [r7, #0]
 8012896:	460b      	mov	r3, r1
 8012898:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801289a:	2300      	movs	r3, #0
 801289c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801289e:	2300      	movs	r3, #0
 80128a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80128a8:	7af9      	ldrb	r1, [r7, #11]
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	f7f3 fce3 	bl	8006278 <HAL_PCD_EP_Transmit>
 80128b2:	4603      	mov	r3, r0
 80128b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128b6:	7dfb      	ldrb	r3, [r7, #23]
 80128b8:	4618      	mov	r0, r3
 80128ba:	f000 f83b 	bl	8012934 <USBD_Get_USB_Status>
 80128be:	4603      	mov	r3, r0
 80128c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80128c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3718      	adds	r7, #24
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}

080128cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b086      	sub	sp, #24
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	607a      	str	r2, [r7, #4]
 80128d6:	603b      	str	r3, [r7, #0]
 80128d8:	460b      	mov	r3, r1
 80128da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128dc:	2300      	movs	r3, #0
 80128de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128e0:	2300      	movs	r3, #0
 80128e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80128ea:	7af9      	ldrb	r1, [r7, #11]
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	f7f3 fc5f 	bl	80061b2 <HAL_PCD_EP_Receive>
 80128f4:	4603      	mov	r3, r0
 80128f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128f8:	7dfb      	ldrb	r3, [r7, #23]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f000 f81a 	bl	8012934 <USBD_Get_USB_Status>
 8012900:	4603      	mov	r3, r0
 8012902:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012904:	7dbb      	ldrb	r3, [r7, #22]
}
 8012906:	4618      	mov	r0, r3
 8012908:	3718      	adds	r7, #24
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}

0801290e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801290e:	b580      	push	{r7, lr}
 8012910:	b082      	sub	sp, #8
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	460b      	mov	r3, r1
 8012918:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012920:	78fa      	ldrb	r2, [r7, #3]
 8012922:	4611      	mov	r1, r2
 8012924:	4618      	mov	r0, r3
 8012926:	f7f3 fc8f 	bl	8006248 <HAL_PCD_EP_GetRxCount>
 801292a:	4603      	mov	r3, r0
}
 801292c:	4618      	mov	r0, r3
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012934:	b480      	push	{r7}
 8012936:	b085      	sub	sp, #20
 8012938:	af00      	add	r7, sp, #0
 801293a:	4603      	mov	r3, r0
 801293c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801293e:	2300      	movs	r3, #0
 8012940:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012942:	79fb      	ldrb	r3, [r7, #7]
 8012944:	2b03      	cmp	r3, #3
 8012946:	d817      	bhi.n	8012978 <USBD_Get_USB_Status+0x44>
 8012948:	a201      	add	r2, pc, #4	; (adr r2, 8012950 <USBD_Get_USB_Status+0x1c>)
 801294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801294e:	bf00      	nop
 8012950:	08012961 	.word	0x08012961
 8012954:	08012967 	.word	0x08012967
 8012958:	0801296d 	.word	0x0801296d
 801295c:	08012973 	.word	0x08012973
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012960:	2300      	movs	r3, #0
 8012962:	73fb      	strb	r3, [r7, #15]
    break;
 8012964:	e00b      	b.n	801297e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012966:	2303      	movs	r3, #3
 8012968:	73fb      	strb	r3, [r7, #15]
    break;
 801296a:	e008      	b.n	801297e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801296c:	2301      	movs	r3, #1
 801296e:	73fb      	strb	r3, [r7, #15]
    break;
 8012970:	e005      	b.n	801297e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012972:	2303      	movs	r3, #3
 8012974:	73fb      	strb	r3, [r7, #15]
    break;
 8012976:	e002      	b.n	801297e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012978:	2303      	movs	r3, #3
 801297a:	73fb      	strb	r3, [r7, #15]
    break;
 801297c:	bf00      	nop
  }
  return usb_status;
 801297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012980:	4618      	mov	r0, r3
 8012982:	3714      	adds	r7, #20
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr

0801298c <__errno>:
 801298c:	4b01      	ldr	r3, [pc, #4]	; (8012994 <__errno+0x8>)
 801298e:	6818      	ldr	r0, [r3, #0]
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	24000198 	.word	0x24000198

08012998 <__libc_init_array>:
 8012998:	b570      	push	{r4, r5, r6, lr}
 801299a:	4d0d      	ldr	r5, [pc, #52]	; (80129d0 <__libc_init_array+0x38>)
 801299c:	4c0d      	ldr	r4, [pc, #52]	; (80129d4 <__libc_init_array+0x3c>)
 801299e:	1b64      	subs	r4, r4, r5
 80129a0:	10a4      	asrs	r4, r4, #2
 80129a2:	2600      	movs	r6, #0
 80129a4:	42a6      	cmp	r6, r4
 80129a6:	d109      	bne.n	80129bc <__libc_init_array+0x24>
 80129a8:	4d0b      	ldr	r5, [pc, #44]	; (80129d8 <__libc_init_array+0x40>)
 80129aa:	4c0c      	ldr	r4, [pc, #48]	; (80129dc <__libc_init_array+0x44>)
 80129ac:	f000 f8f8 	bl	8012ba0 <_init>
 80129b0:	1b64      	subs	r4, r4, r5
 80129b2:	10a4      	asrs	r4, r4, #2
 80129b4:	2600      	movs	r6, #0
 80129b6:	42a6      	cmp	r6, r4
 80129b8:	d105      	bne.n	80129c6 <__libc_init_array+0x2e>
 80129ba:	bd70      	pop	{r4, r5, r6, pc}
 80129bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80129c0:	4798      	blx	r3
 80129c2:	3601      	adds	r6, #1
 80129c4:	e7ee      	b.n	80129a4 <__libc_init_array+0xc>
 80129c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80129ca:	4798      	blx	r3
 80129cc:	3601      	adds	r6, #1
 80129ce:	e7f2      	b.n	80129b6 <__libc_init_array+0x1e>
 80129d0:	08012cbc 	.word	0x08012cbc
 80129d4:	08012cbc 	.word	0x08012cbc
 80129d8:	08012cbc 	.word	0x08012cbc
 80129dc:	08012cc0 	.word	0x08012cc0

080129e0 <malloc>:
 80129e0:	4b02      	ldr	r3, [pc, #8]	; (80129ec <malloc+0xc>)
 80129e2:	4601      	mov	r1, r0
 80129e4:	6818      	ldr	r0, [r3, #0]
 80129e6:	f000 b863 	b.w	8012ab0 <_malloc_r>
 80129ea:	bf00      	nop
 80129ec:	24000198 	.word	0x24000198

080129f0 <free>:
 80129f0:	4b02      	ldr	r3, [pc, #8]	; (80129fc <free+0xc>)
 80129f2:	4601      	mov	r1, r0
 80129f4:	6818      	ldr	r0, [r3, #0]
 80129f6:	f000 b80b 	b.w	8012a10 <_free_r>
 80129fa:	bf00      	nop
 80129fc:	24000198 	.word	0x24000198

08012a00 <memset>:
 8012a00:	4402      	add	r2, r0
 8012a02:	4603      	mov	r3, r0
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d100      	bne.n	8012a0a <memset+0xa>
 8012a08:	4770      	bx	lr
 8012a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8012a0e:	e7f9      	b.n	8012a04 <memset+0x4>

08012a10 <_free_r>:
 8012a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a12:	2900      	cmp	r1, #0
 8012a14:	d048      	beq.n	8012aa8 <_free_r+0x98>
 8012a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a1a:	9001      	str	r0, [sp, #4]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8012a22:	bfb8      	it	lt
 8012a24:	18e4      	addlt	r4, r4, r3
 8012a26:	f000 f8af 	bl	8012b88 <__malloc_lock>
 8012a2a:	4a20      	ldr	r2, [pc, #128]	; (8012aac <_free_r+0x9c>)
 8012a2c:	9801      	ldr	r0, [sp, #4]
 8012a2e:	6813      	ldr	r3, [r2, #0]
 8012a30:	4615      	mov	r5, r2
 8012a32:	b933      	cbnz	r3, 8012a42 <_free_r+0x32>
 8012a34:	6063      	str	r3, [r4, #4]
 8012a36:	6014      	str	r4, [r2, #0]
 8012a38:	b003      	add	sp, #12
 8012a3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a3e:	f000 b8a9 	b.w	8012b94 <__malloc_unlock>
 8012a42:	42a3      	cmp	r3, r4
 8012a44:	d90b      	bls.n	8012a5e <_free_r+0x4e>
 8012a46:	6821      	ldr	r1, [r4, #0]
 8012a48:	1862      	adds	r2, r4, r1
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	bf04      	itt	eq
 8012a4e:	681a      	ldreq	r2, [r3, #0]
 8012a50:	685b      	ldreq	r3, [r3, #4]
 8012a52:	6063      	str	r3, [r4, #4]
 8012a54:	bf04      	itt	eq
 8012a56:	1852      	addeq	r2, r2, r1
 8012a58:	6022      	streq	r2, [r4, #0]
 8012a5a:	602c      	str	r4, [r5, #0]
 8012a5c:	e7ec      	b.n	8012a38 <_free_r+0x28>
 8012a5e:	461a      	mov	r2, r3
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	b10b      	cbz	r3, 8012a68 <_free_r+0x58>
 8012a64:	42a3      	cmp	r3, r4
 8012a66:	d9fa      	bls.n	8012a5e <_free_r+0x4e>
 8012a68:	6811      	ldr	r1, [r2, #0]
 8012a6a:	1855      	adds	r5, r2, r1
 8012a6c:	42a5      	cmp	r5, r4
 8012a6e:	d10b      	bne.n	8012a88 <_free_r+0x78>
 8012a70:	6824      	ldr	r4, [r4, #0]
 8012a72:	4421      	add	r1, r4
 8012a74:	1854      	adds	r4, r2, r1
 8012a76:	42a3      	cmp	r3, r4
 8012a78:	6011      	str	r1, [r2, #0]
 8012a7a:	d1dd      	bne.n	8012a38 <_free_r+0x28>
 8012a7c:	681c      	ldr	r4, [r3, #0]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	6053      	str	r3, [r2, #4]
 8012a82:	4421      	add	r1, r4
 8012a84:	6011      	str	r1, [r2, #0]
 8012a86:	e7d7      	b.n	8012a38 <_free_r+0x28>
 8012a88:	d902      	bls.n	8012a90 <_free_r+0x80>
 8012a8a:	230c      	movs	r3, #12
 8012a8c:	6003      	str	r3, [r0, #0]
 8012a8e:	e7d3      	b.n	8012a38 <_free_r+0x28>
 8012a90:	6825      	ldr	r5, [r4, #0]
 8012a92:	1961      	adds	r1, r4, r5
 8012a94:	428b      	cmp	r3, r1
 8012a96:	bf04      	itt	eq
 8012a98:	6819      	ldreq	r1, [r3, #0]
 8012a9a:	685b      	ldreq	r3, [r3, #4]
 8012a9c:	6063      	str	r3, [r4, #4]
 8012a9e:	bf04      	itt	eq
 8012aa0:	1949      	addeq	r1, r1, r5
 8012aa2:	6021      	streq	r1, [r4, #0]
 8012aa4:	6054      	str	r4, [r2, #4]
 8012aa6:	e7c7      	b.n	8012a38 <_free_r+0x28>
 8012aa8:	b003      	add	sp, #12
 8012aaa:	bd30      	pop	{r4, r5, pc}
 8012aac:	24000234 	.word	0x24000234

08012ab0 <_malloc_r>:
 8012ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ab2:	1ccd      	adds	r5, r1, #3
 8012ab4:	f025 0503 	bic.w	r5, r5, #3
 8012ab8:	3508      	adds	r5, #8
 8012aba:	2d0c      	cmp	r5, #12
 8012abc:	bf38      	it	cc
 8012abe:	250c      	movcc	r5, #12
 8012ac0:	2d00      	cmp	r5, #0
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	db01      	blt.n	8012aca <_malloc_r+0x1a>
 8012ac6:	42a9      	cmp	r1, r5
 8012ac8:	d903      	bls.n	8012ad2 <_malloc_r+0x22>
 8012aca:	230c      	movs	r3, #12
 8012acc:	6033      	str	r3, [r6, #0]
 8012ace:	2000      	movs	r0, #0
 8012ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ad2:	f000 f859 	bl	8012b88 <__malloc_lock>
 8012ad6:	4921      	ldr	r1, [pc, #132]	; (8012b5c <_malloc_r+0xac>)
 8012ad8:	680a      	ldr	r2, [r1, #0]
 8012ada:	4614      	mov	r4, r2
 8012adc:	b99c      	cbnz	r4, 8012b06 <_malloc_r+0x56>
 8012ade:	4f20      	ldr	r7, [pc, #128]	; (8012b60 <_malloc_r+0xb0>)
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	b923      	cbnz	r3, 8012aee <_malloc_r+0x3e>
 8012ae4:	4621      	mov	r1, r4
 8012ae6:	4630      	mov	r0, r6
 8012ae8:	f000 f83c 	bl	8012b64 <_sbrk_r>
 8012aec:	6038      	str	r0, [r7, #0]
 8012aee:	4629      	mov	r1, r5
 8012af0:	4630      	mov	r0, r6
 8012af2:	f000 f837 	bl	8012b64 <_sbrk_r>
 8012af6:	1c43      	adds	r3, r0, #1
 8012af8:	d123      	bne.n	8012b42 <_malloc_r+0x92>
 8012afa:	230c      	movs	r3, #12
 8012afc:	6033      	str	r3, [r6, #0]
 8012afe:	4630      	mov	r0, r6
 8012b00:	f000 f848 	bl	8012b94 <__malloc_unlock>
 8012b04:	e7e3      	b.n	8012ace <_malloc_r+0x1e>
 8012b06:	6823      	ldr	r3, [r4, #0]
 8012b08:	1b5b      	subs	r3, r3, r5
 8012b0a:	d417      	bmi.n	8012b3c <_malloc_r+0x8c>
 8012b0c:	2b0b      	cmp	r3, #11
 8012b0e:	d903      	bls.n	8012b18 <_malloc_r+0x68>
 8012b10:	6023      	str	r3, [r4, #0]
 8012b12:	441c      	add	r4, r3
 8012b14:	6025      	str	r5, [r4, #0]
 8012b16:	e004      	b.n	8012b22 <_malloc_r+0x72>
 8012b18:	6863      	ldr	r3, [r4, #4]
 8012b1a:	42a2      	cmp	r2, r4
 8012b1c:	bf0c      	ite	eq
 8012b1e:	600b      	streq	r3, [r1, #0]
 8012b20:	6053      	strne	r3, [r2, #4]
 8012b22:	4630      	mov	r0, r6
 8012b24:	f000 f836 	bl	8012b94 <__malloc_unlock>
 8012b28:	f104 000b 	add.w	r0, r4, #11
 8012b2c:	1d23      	adds	r3, r4, #4
 8012b2e:	f020 0007 	bic.w	r0, r0, #7
 8012b32:	1ac2      	subs	r2, r0, r3
 8012b34:	d0cc      	beq.n	8012ad0 <_malloc_r+0x20>
 8012b36:	1a1b      	subs	r3, r3, r0
 8012b38:	50a3      	str	r3, [r4, r2]
 8012b3a:	e7c9      	b.n	8012ad0 <_malloc_r+0x20>
 8012b3c:	4622      	mov	r2, r4
 8012b3e:	6864      	ldr	r4, [r4, #4]
 8012b40:	e7cc      	b.n	8012adc <_malloc_r+0x2c>
 8012b42:	1cc4      	adds	r4, r0, #3
 8012b44:	f024 0403 	bic.w	r4, r4, #3
 8012b48:	42a0      	cmp	r0, r4
 8012b4a:	d0e3      	beq.n	8012b14 <_malloc_r+0x64>
 8012b4c:	1a21      	subs	r1, r4, r0
 8012b4e:	4630      	mov	r0, r6
 8012b50:	f000 f808 	bl	8012b64 <_sbrk_r>
 8012b54:	3001      	adds	r0, #1
 8012b56:	d1dd      	bne.n	8012b14 <_malloc_r+0x64>
 8012b58:	e7cf      	b.n	8012afa <_malloc_r+0x4a>
 8012b5a:	bf00      	nop
 8012b5c:	24000234 	.word	0x24000234
 8012b60:	24000238 	.word	0x24000238

08012b64 <_sbrk_r>:
 8012b64:	b538      	push	{r3, r4, r5, lr}
 8012b66:	4d06      	ldr	r5, [pc, #24]	; (8012b80 <_sbrk_r+0x1c>)
 8012b68:	2300      	movs	r3, #0
 8012b6a:	4604      	mov	r4, r0
 8012b6c:	4608      	mov	r0, r1
 8012b6e:	602b      	str	r3, [r5, #0]
 8012b70:	f7ee fb26 	bl	80011c0 <_sbrk>
 8012b74:	1c43      	adds	r3, r0, #1
 8012b76:	d102      	bne.n	8012b7e <_sbrk_r+0x1a>
 8012b78:	682b      	ldr	r3, [r5, #0]
 8012b7a:	b103      	cbz	r3, 8012b7e <_sbrk_r+0x1a>
 8012b7c:	6023      	str	r3, [r4, #0]
 8012b7e:	bd38      	pop	{r3, r4, r5, pc}
 8012b80:	24003f08 	.word	0x24003f08

08012b84 <__retarget_lock_acquire_recursive>:
 8012b84:	4770      	bx	lr

08012b86 <__retarget_lock_release_recursive>:
 8012b86:	4770      	bx	lr

08012b88 <__malloc_lock>:
 8012b88:	4801      	ldr	r0, [pc, #4]	; (8012b90 <__malloc_lock+0x8>)
 8012b8a:	f7ff bffb 	b.w	8012b84 <__retarget_lock_acquire_recursive>
 8012b8e:	bf00      	nop
 8012b90:	24003f00 	.word	0x24003f00

08012b94 <__malloc_unlock>:
 8012b94:	4801      	ldr	r0, [pc, #4]	; (8012b9c <__malloc_unlock+0x8>)
 8012b96:	f7ff bff6 	b.w	8012b86 <__retarget_lock_release_recursive>
 8012b9a:	bf00      	nop
 8012b9c:	24003f00 	.word	0x24003f00

08012ba0 <_init>:
 8012ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ba2:	bf00      	nop
 8012ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ba6:	bc08      	pop	{r3}
 8012ba8:	469e      	mov	lr, r3
 8012baa:	4770      	bx	lr

08012bac <_fini>:
 8012bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bae:	bf00      	nop
 8012bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bb2:	bc08      	pop	{r3}
 8012bb4:	469e      	mov	lr, r3
 8012bb6:	4770      	bx	lr
