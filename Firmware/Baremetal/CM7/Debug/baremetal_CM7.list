
baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b38  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001dd0  08001dd0  00011dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001de0  08001de0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001de0  08001de0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001de0  08001de0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001de0  08001de0  00011de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001de4  08001de4  00011de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  08001de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000024  08001e0c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000090  08001e0c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f149  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea0  00000000  00000000  0002f19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00031040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00031738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037273  00000000  00000000  00031d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000080fa  00000000  00000000  00068feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016d642  00000000  00000000  000710e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001de727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a0c  00000000  00000000  001de77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001db8 	.word	0x08001db8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	08001db8 	.word	0x08001db8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_DMA_Init+0x50>)
 8000414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000418:	4a10      	ldr	r2, [pc, #64]	; (800045c <MX_DMA_Init+0x50>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_DMA_Init+0x50>)
 8000424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000428:	f003 0301 	and.w	r3, r3, #1
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MX_DMA_Init+0x50>)
 8000432:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000436:	4a09      	ldr	r2, [pc, #36]	; (800045c <MX_DMA_Init+0x50>)
 8000438:	f043 0302 	orr.w	r3, r3, #2
 800043c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_DMA_Init+0x50>)
 8000442:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	58024400 	.word	0x58024400

08000460 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <MX_GPIO_Init+0x30>)
 8000468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046c:	4a08      	ldr	r2, [pc, #32]	; (8000490 <MX_GPIO_Init+0x30>)
 800046e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_GPIO_Init+0x30>)
 8000478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	687b      	ldr	r3, [r7, #4]

}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	58024400 	.word	0x58024400

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
 MPU_Config();
 800049a:	f000 f9e1 	bl	8000860 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800049e:	4b55      	ldr	r3, [pc, #340]	; (80005f4 <main+0x160>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d11b      	bne.n	80004e2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004aa:	f3bf 8f4f 	dsb	sy
}
 80004ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b0:	f3bf 8f6f 	isb	sy
}
 80004b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004b6:	4b4f      	ldr	r3, [pc, #316]	; (80005f4 <main+0x160>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004be:	f3bf 8f4f 	dsb	sy
}
 80004c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004c4:	f3bf 8f6f 	isb	sy
}
 80004c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004ca:	4b4a      	ldr	r3, [pc, #296]	; (80005f4 <main+0x160>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a49      	ldr	r2, [pc, #292]	; (80005f4 <main+0x160>)
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004d6:	f3bf 8f4f 	dsb	sy
}
 80004da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004dc:	f3bf 8f6f 	isb	sy
}
 80004e0:	e000      	b.n	80004e4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004e4:	4b43      	ldr	r3, [pc, #268]	; (80005f4 <main+0x160>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d138      	bne.n	8000562 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004f0:	4b40      	ldr	r3, [pc, #256]	; (80005f4 <main+0x160>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004f8:	f3bf 8f4f 	dsb	sy
}
 80004fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004fe:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <main+0x160>)
 8000500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000504:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	0b5b      	lsrs	r3, r3, #13
 800050a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800050e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	08db      	lsrs	r3, r3, #3
 8000514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000518:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	015a      	lsls	r2, r3, #5
 800051e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000522:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000524:	68ba      	ldr	r2, [r7, #8]
 8000526:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000528:	4932      	ldr	r1, [pc, #200]	; (80005f4 <main+0x160>)
 800052a:	4313      	orrs	r3, r2
 800052c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	1e5a      	subs	r2, r3, #1
 8000534:	60ba      	str	r2, [r7, #8]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1ef      	bne.n	800051a <main+0x86>
    } while(sets-- != 0U);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	1e5a      	subs	r2, r3, #1
 800053e:	60fa      	str	r2, [r7, #12]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1e5      	bne.n	8000510 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000544:	f3bf 8f4f 	dsb	sy
}
 8000548:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <main+0x160>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <main+0x160>)
 8000550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000554:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000556:	f3bf 8f4f 	dsb	sy
}
 800055a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055c:	f3bf 8f6f 	isb	sy
}
 8000560:	e000      	b.n	8000564 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000562:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000568:	617b      	str	r3, [r7, #20]

  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 800056a:	e000      	b.n	800056e <main+0xda>
 800056c:	bf00      	nop
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <main+0x164>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f8      	bne.n	800056c <main+0xd8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fa2b 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f8f5 	bl	800076c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <main+0x164>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <main+0x164>)
 800058a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800058e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <main+0x164>)
 8000594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 fc15 	bl	8000dd0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80005a6:	2100      	movs	r1, #0
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fc2b 	bl	8000e04 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80005b4:	bf00      	nop
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <main+0x164>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d104      	bne.n	80005cc <main+0x138>
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	1e5a      	subs	r2, r3, #1
 80005c6:	617a      	str	r2, [r7, #20]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	dcf4      	bgt.n	80005b6 <main+0x122>
if ( timeout < 0 )
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	da01      	bge.n	80005d6 <main+0x142>
{
Error_Handler();
 80005d2:	f000 f98b 	bl	80008ec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f7ff ff43 	bl	8000460 <MX_GPIO_Init>
  MX_DMA_Init();
 80005da:	f7ff ff17 	bl	800040c <MX_DMA_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      ReadGPS();
 80005de:	f000 f80d 	bl	80005fc <ReadGPS>
      ReadMag();
 80005e2:	f000 f841 	bl	8000668 <ReadMag>
      ReadAcc();
 80005e6:	f000 f861 	bl	80006ac <ReadAcc>
      ReadBaro();
 80005ea:	f000 f881 	bl	80006f0 <ReadBaro>
      ReadGyro();
 80005ee:	f000 f89b 	bl	8000728 <ReadGyro>
      ReadGPS();
 80005f2:	e7f4      	b.n	80005de <main+0x14a>
 80005f4:	e000ed00 	.word	0xe000ed00
 80005f8:	58024400 	.word	0x58024400

080005fc <ReadGPS>:
}



void ReadGPS(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fbe5 	bl	8000dd0 <HAL_HSEM_FastTake>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d122      	bne.n	8000652 <ReadGPS+0x56>
      {
        gps_values.gps_latitude = gps_values_m7->gps_latitude;
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <ReadGPS+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <ReadGPS+0x68>)
 8000614:	6013      	str	r3, [r2, #0]
        gps_values.gps_longitude = gps_values_m7->gps_longitude;
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <ReadGPS+0x64>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4a11      	ldr	r2, [pc, #68]	; (8000664 <ReadGPS+0x68>)
 800061e:	6053      	str	r3, [r2, #4]
        gps_values.gps_altitude = gps_values_m7->gps_altitude;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <ReadGPS+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <ReadGPS+0x68>)
 8000628:	6093      	str	r3, [r2, #8]
        gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <ReadGPS+0x64>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <ReadGPS+0x68>)
 8000632:	60d3      	str	r3, [r2, #12]
        gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <ReadGPS+0x64>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <ReadGPS+0x68>)
 800063c:	6113      	str	r3, [r2, #16]
        gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <ReadGPS+0x64>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <ReadGPS+0x68>)
 8000646:	6153      	str	r3, [r2, #20]
        gps_values.gps_satellites = gps_values_m7->gps_satellites;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <ReadGPS+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <ReadGPS+0x68>)
 8000650:	61d3      	str	r3, [r2, #28]
      }
      HAL_HSEM_Release(HSEM_ID_0,0);
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fbd5 	bl	8000e04 <HAL_HSEM_Release>

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	24000018 	.word	0x24000018
 8000664:	24000040 	.word	0x24000040

08000668 <ReadMag>:

void ReadMag(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 800066c:	2000      	movs	r0, #0
 800066e:	f000 fbaf 	bl	8000dd0 <HAL_HSEM_FastTake>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d10e      	bne.n	8000696 <ReadMag+0x2e>
  {
    mag_values.imu_mag_x = mag_values_m7->imu_mag_x;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <ReadMag+0x3c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <ReadMag+0x40>)
 8000680:	6013      	str	r3, [r2, #0]
    mag_values.imu_mag_y = mag_values_m7->imu_mag_y;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <ReadMag+0x3c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <ReadMag+0x40>)
 800068a:	6053      	str	r3, [r2, #4]
    mag_values.imu_mag_z = mag_values_m7->imu_mag_z;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <ReadMag+0x3c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <ReadMag+0x40>)
 8000694:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000696:	2100      	movs	r1, #0
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fbb3 	bl	8000e04 <HAL_HSEM_Release>

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	24000010 	.word	0x24000010
 80006a8:	24000080 	.word	0x24000080

080006ac <ReadAcc>:
void ReadAcc(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 fb8d 	bl	8000dd0 <HAL_HSEM_FastTake>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10e      	bne.n	80006da <ReadAcc+0x2e>
  {
      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <ReadAcc+0x3c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <ReadAcc+0x40>)
 80006c4:	6013      	str	r3, [r2, #0]
      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <ReadAcc+0x3c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <ReadAcc+0x40>)
 80006ce:	6053      	str	r3, [r2, #4]
      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ReadAcc+0x3c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <ReadAcc+0x40>)
 80006d8:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 80006da:	2100      	movs	r1, #0
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 fb91 	bl	8000e04 <HAL_HSEM_Release>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	24000008 	.word	0x24000008
 80006ec:	24000068 	.word	0x24000068

080006f0 <ReadBaro>:
void ReadBaro(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fb6b 	bl	8000dd0 <HAL_HSEM_FastTake>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d109      	bne.n	8000714 <ReadBaro+0x24>
  {
     baro_values.baro_altitude = baro_values_m7->baro_altitude;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <ReadBaro+0x30>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <ReadBaro+0x34>)
 8000708:	6053      	str	r3, [r2, #4]
     baro_values.baro_pressure = baro_values_m7->baro_pressure;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <ReadBaro+0x30>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <ReadBaro+0x34>)
 8000712:	6013      	str	r3, [r2, #0]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000714:	2100      	movs	r1, #0
 8000716:	2000      	movs	r0, #0
 8000718:	f000 fb74 	bl	8000e04 <HAL_HSEM_Release>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	24000014 	.word	0x24000014
 8000724:	24000060 	.word	0x24000060

08000728 <ReadGyro>:
void ReadGyro(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fb4f 	bl	8000dd0 <HAL_HSEM_FastTake>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10e      	bne.n	8000756 <ReadGyro+0x2e>
  {
     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <ReadGyro+0x3c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <ReadGyro+0x40>)
 8000740:	6013      	str	r3, [r2, #0]
     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <ReadGyro+0x3c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <ReadGyro+0x40>)
 800074a:	6053      	str	r3, [r2, #4]
     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <ReadGyro+0x3c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <ReadGyro+0x40>)
 8000754:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000756:	2100      	movs	r1, #0
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fb53 	bl	8000e04 <HAL_HSEM_Release>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2400000c 	.word	0x2400000c
 8000768:	24000074 	.word	0x24000074

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	; 0x70
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	224c      	movs	r2, #76	; 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fb14 	bl	8001da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fb0e 	bl	8001da8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078c:	2002      	movs	r0, #2
 800078e:	f000 fb4d 	bl	8000e2c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <SystemClock_Config+0xec>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <SystemClock_Config+0xec>)
 800079c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <SystemClock_Config+0xec>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <SystemClock_Config+0xf0>)
 80007ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b0:	4a2a      	ldr	r2, [pc, #168]	; (800085c <SystemClock_Config+0xf0>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <SystemClock_Config+0xf0>)
 80007ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c4:	bf00      	nop
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <SystemClock_Config+0xec>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007d2:	d1f8      	bne.n	80007c6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80007ea:	233c      	movs	r3, #60	; 0x3c
 80007ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007f2:	2305      	movs	r3, #5
 80007f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007fa:	230c      	movs	r3, #12
 80007fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007fe:	2300      	movs	r3, #0
 8000800:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fb68 	bl	8000ee0 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000816:	f000 f869 	bl	80008ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	233f      	movs	r3, #63	; 0x3f
 800081c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000826:	2308      	movs	r3, #8
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800082a:	2340      	movs	r3, #64	; 0x40
 800082c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2104      	movs	r1, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f000 ff5d 	bl	8001700 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800084c:	f000 f84e 	bl	80008ec <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3770      	adds	r7, #112	; 0x70
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	58024800 	.word	0x58024800
 800085c:	58000400 	.word	0x58000400

08000860 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000872:	f000 fa31 	bl	8000cd8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000876:	2301      	movs	r3, #1
 8000878:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800087a:	2300      	movs	r3, #0
 800087c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800087e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000882:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000884:	2312      	movs	r3, #18
 8000886:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000888:	2300      	movs	r3, #0
 800088a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800088c:	2300      	movs	r3, #0
 800088e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000890:	2303      	movs	r3, #3
 8000892:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008a4:	463b      	mov	r3, r7
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fa4e 	bl	8000d48 <HAL_MPU_ConfigRegion>

  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 80008b0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80008b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80008b6:	230f      	movs	r3, #15
 80008b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008be:	2300      	movs	r3, #0
 80008c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008c2:	2303      	movs	r3, #3
 80008c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008c6:	2301      	movs	r3, #1
 80008c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80008d2:	2301      	movs	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008d6:	463b      	mov	r3, r7
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fa35 	bl	8000d48 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008de:	2004      	movs	r0, #4
 80008e0:	f000 fa12 	bl	8000d08 <HAL_MPU_Enable>

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_MspInit+0x30>)
 8000900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000904:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x30>)
 8000906:	f043 0302 	orr.w	r3, r3, #2
 800090a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x30>)
 8000910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	58024400 	.word	0x58024400

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f89e 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f7ff fca8 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f001 f9d7 	bl	8001d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b2:	f7ff fd6f 	bl	8000494 <main>
  bx  lr
 80009b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b8:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80009bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009c0:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 80009c4:	08001de8 	.word	0x08001de8
  ldr r2, =_sbss
 80009c8:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 80009cc:	24000090 	.word	0x24000090

080009d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC3_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009da:	2003      	movs	r0, #3
 80009dc:	f000 f94a 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009e0:	f001 f844 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80009e4:	4602      	mov	r2, r0
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_Init+0x68>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	0a1b      	lsrs	r3, r3, #8
 80009ec:	f003 030f 	and.w	r3, r3, #15
 80009f0:	4913      	ldr	r1, [pc, #76]	; (8000a40 <HAL_Init+0x6c>)
 80009f2:	5ccb      	ldrb	r3, [r1, r3]
 80009f4:	f003 031f 	and.w	r3, r3, #31
 80009f8:	fa22 f303 	lsr.w	r3, r2, r3
 80009fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_Init+0x68>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_Init+0x6c>)
 8000a08:	5cd3      	ldrb	r3, [r2, r3]
 8000a0a:	f003 031f 	and.w	r3, r3, #31
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	fa22 f303 	lsr.w	r3, r2, r3
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <HAL_Init+0x70>)
 8000a16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_Init+0x74>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f814 	bl	8000a4c <HAL_InitTick>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e002      	b.n	8000a34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2e:	f7ff ff63 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	08001dd0 	.word	0x08001dd0
 8000a44:	24000004 	.word	0x24000004
 8000a48:	24000000 	.word	0x24000000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_InitTick+0x60>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e021      	b.n	8000aa4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_InitTick+0x64>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_InitTick+0x60>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f921 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f8f9 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <HAL_InitTick+0x68>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	24000020 	.word	0x24000020
 8000ab0:	24000000 	.word	0x24000000
 8000ab4:	2400001c 	.word	0x2400001c

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	24000020 	.word	0x24000020
 8000adc:	2400008c 	.word	0x2400008c

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2400008c 	.word	0x2400008c

08000af8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetREVID+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	0c1b      	lsrs	r3, r3, #16
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	5c001000 	.word	0x5c001000

08000b10 <__NVIC_SetPriorityGrouping>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <__NVIC_SetPriorityGrouping+0x40>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x40>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00
 8000b54:	05fa0000 	.word	0x05fa0000

08000b58 <__NVIC_GetPriorityGrouping>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_SetPriority>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff47 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff5e 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff90 	bl	8000bc8 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5f 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffb2 	bl	8000c30 <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000cdc:	f3bf 8f5f 	dmb	sy
}
 8000ce0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_MPU_Disable+0x28>)
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_MPU_Disable+0x28>)
 8000ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_MPU_Disable+0x2c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00
 8000d04:	e000ed90 	.word	0xe000ed90

08000d08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_MPU_Enable+0x38>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_MPU_Enable+0x3c>)
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <HAL_MPU_Enable+0x3c>)
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d24:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d26:	f3bf 8f4f 	dsb	sy
}
 8000d2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d2c:	f3bf 8f6f 	isb	sy
}
 8000d30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed90 	.word	0xe000ed90
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	785a      	ldrb	r2, [r3, #1]
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_MPU_ConfigRegion+0x84>)
 8000d56:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d029      	beq.n	8000db4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000d60:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <HAL_MPU_ConfigRegion+0x84>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7b1b      	ldrb	r3, [r3, #12]
 8000d6c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7adb      	ldrb	r3, [r3, #11]
 8000d72:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7a9b      	ldrb	r3, [r3, #10]
 8000d7a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7b5b      	ldrb	r3, [r3, #13]
 8000d82:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7b9b      	ldrb	r3, [r3, #14]
 8000d8a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7bdb      	ldrb	r3, [r3, #15]
 8000d92:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7a5b      	ldrb	r3, [r3, #9]
 8000d9a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7a1b      	ldrb	r3, [r3, #8]
 8000da2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000da4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000dae:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000db0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000db2:	e005      	b.n	8000dc0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_MPU_ConfigRegion+0x84>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_MPU_ConfigRegion+0x84>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed90 	.word	0xe000ed90

08000dd0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_HSEM_FastTake+0x2c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3320      	adds	r3, #32
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_HSEM_FastTake+0x30>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d101      	bne.n	8000dec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e000      	b.n	8000dee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	58026400 	.word	0x58026400
 8000e00:	80000300 	.word	0x80000300

08000e04 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000e0e:	4906      	ldr	r1, [pc, #24]	; (8000e28 <HAL_HSEM_Release+0x24>)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	58026400 	.word	0x58026400

08000e2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <HAL_PWREx_ConfigSupply+0xb0>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	2b06      	cmp	r3, #6
 8000e3e:	d00a      	beq.n	8000e56 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_PWREx_ConfigSupply+0xb0>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d001      	beq.n	8000e52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e040      	b.n	8000ed4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e03e      	b.n	8000ed4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <HAL_PWREx_ConfigSupply+0xb0>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000e5e:	491f      	ldr	r1, [pc, #124]	; (8000edc <HAL_PWREx_ConfigSupply+0xb0>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000e66:	f7ff fe3b 	bl	8000ae0 <HAL_GetTick>
 8000e6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000e6c:	e009      	b.n	8000e82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000e6e:	f7ff fe37 	bl	8000ae0 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e7c:	d901      	bls.n	8000e82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e028      	b.n	8000ed4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_PWREx_ConfigSupply+0xb0>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e8e:	d1ee      	bne.n	8000e6e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b1e      	cmp	r3, #30
 8000e94:	d008      	beq.n	8000ea8 <HAL_PWREx_ConfigSupply+0x7c>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b2e      	cmp	r3, #46	; 0x2e
 8000e9a:	d005      	beq.n	8000ea8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b1d      	cmp	r3, #29
 8000ea0:	d002      	beq.n	8000ea8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b2d      	cmp	r3, #45	; 0x2d
 8000ea6:	d114      	bne.n	8000ed2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000ea8:	f7ff fe1a 	bl	8000ae0 <HAL_GetTick>
 8000eac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000eae:	e009      	b.n	8000ec4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000eb0:	f7ff fe16 	bl	8000ae0 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ebe:	d901      	bls.n	8000ec4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e007      	b.n	8000ed4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_PWREx_ConfigSupply+0xb0>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d1ee      	bne.n	8000eb0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024800 	.word	0x58024800

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08c      	sub	sp, #48	; 0x30
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e3ff      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8087 	beq.w	800100e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f00:	4b99      	ldr	r3, [pc, #612]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f0a:	4b97      	ldr	r3, [pc, #604]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d007      	beq.n	8000f26 <HAL_RCC_OscConfig+0x46>
 8000f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f18:	2b18      	cmp	r3, #24
 8000f1a:	d110      	bne.n	8000f3e <HAL_RCC_OscConfig+0x5e>
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d10b      	bne.n	8000f3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f26:	4b90      	ldr	r3, [pc, #576]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d06c      	beq.n	800100c <HAL_RCC_OscConfig+0x12c>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d168      	bne.n	800100c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e3d9      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f46:	d106      	bne.n	8000f56 <HAL_RCC_OscConfig+0x76>
 8000f48:	4b87      	ldr	r3, [pc, #540]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a86      	ldr	r2, [pc, #536]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e02e      	b.n	8000fb4 <HAL_RCC_OscConfig+0xd4>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x98>
 8000f5e:	4b82      	ldr	r3, [pc, #520]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a81      	ldr	r2, [pc, #516]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b7f      	ldr	r3, [pc, #508]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a7e      	ldr	r2, [pc, #504]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e01d      	b.n	8000fb4 <HAL_RCC_OscConfig+0xd4>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0xbc>
 8000f82:	4b79      	ldr	r3, [pc, #484]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a78      	ldr	r2, [pc, #480]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b76      	ldr	r3, [pc, #472]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a75      	ldr	r2, [pc, #468]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e00b      	b.n	8000fb4 <HAL_RCC_OscConfig+0xd4>
 8000f9c:	4b72      	ldr	r3, [pc, #456]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a71      	ldr	r2, [pc, #452]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a6e      	ldr	r2, [pc, #440]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fd90 	bl	8000ae0 <HAL_GetTick>
 8000fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fd8c 	bl	8000ae0 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	; 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e38d      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fd6:	4b64      	ldr	r3, [pc, #400]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xe4>
 8000fe2:	e014      	b.n	800100e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fd7c 	bl	8000ae0 <HAL_GetTick>
 8000fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff fd78 	bl	8000ae0 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	; 0x64
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e379      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ffe:	4b5a      	ldr	r3, [pc, #360]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x10c>
 800100a:	e000      	b.n	800100e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 80ae 	beq.w	8001178 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101c:	4b52      	ldr	r3, [pc, #328]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001024:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001026:	4b50      	ldr	r3, [pc, #320]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d007      	beq.n	8001042 <HAL_RCC_OscConfig+0x162>
 8001032:	6a3b      	ldr	r3, [r7, #32]
 8001034:	2b18      	cmp	r3, #24
 8001036:	d13a      	bne.n	80010ae <HAL_RCC_OscConfig+0x1ce>
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d135      	bne.n	80010ae <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <HAL_RCC_OscConfig+0x17a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e34b      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	f7ff fd4d 	bl	8000af8 <HAL_GetREVID>
 800105e:	4603      	mov	r3, r0
 8001060:	f241 0203 	movw	r2, #4099	; 0x1003
 8001064:	4293      	cmp	r3, r2
 8001066:	d817      	bhi.n	8001098 <HAL_RCC_OscConfig+0x1b8>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	2b40      	cmp	r3, #64	; 0x40
 800106e:	d108      	bne.n	8001082 <HAL_RCC_OscConfig+0x1a2>
 8001070:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001078:	4a3b      	ldr	r2, [pc, #236]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 800107a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001080:	e07a      	b.n	8001178 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	031b      	lsls	r3, r3, #12
 8001090:	4935      	ldr	r1, [pc, #212]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001096:	e06f      	b.n	8001178 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001098:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	061b      	lsls	r3, r3, #24
 80010a6:	4930      	ldr	r1, [pc, #192]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ac:	e064      	b.n	8001178 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d045      	beq.n	8001142 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 0219 	bic.w	r2, r3, #25
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	4929      	ldr	r1, [pc, #164]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c8:	f7ff fd0a 	bl	8000ae0 <HAL_GetTick>
 80010cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fd06 	bl	8000ae0 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e307      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ee:	f7ff fd03 	bl	8000af8 <HAL_GetREVID>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d817      	bhi.n	800112c <HAL_RCC_OscConfig+0x24c>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	2b40      	cmp	r3, #64	; 0x40
 8001102:	d108      	bne.n	8001116 <HAL_RCC_OscConfig+0x236>
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800110c:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 800110e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001112:	6053      	str	r3, [r2, #4]
 8001114:	e030      	b.n	8001178 <HAL_RCC_OscConfig+0x298>
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	031b      	lsls	r3, r3, #12
 8001124:	4910      	ldr	r1, [pc, #64]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
 800112a:	e025      	b.n	8001178 <HAL_RCC_OscConfig+0x298>
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	061b      	lsls	r3, r3, #24
 800113a:	490b      	ldr	r1, [pc, #44]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
 8001140:	e01a      	b.n	8001178 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_RCC_OscConfig+0x288>)
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114e:	f7ff fcc7 	bl	8000ae0 <HAL_GetTick>
 8001152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fcc3 	bl	8000ae0 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d903      	bls.n	800116c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e2c4      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
 8001168:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800116c:	4ba4      	ldr	r3, [pc, #656]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ee      	bne.n	8001156 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80a9 	beq.w	80012d8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001186:	4b9e      	ldr	r3, [pc, #632]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800118e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001190:	4b9b      	ldr	r3, [pc, #620]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2b08      	cmp	r3, #8
 800119a:	d007      	beq.n	80011ac <HAL_RCC_OscConfig+0x2cc>
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2b18      	cmp	r3, #24
 80011a0:	d13a      	bne.n	8001218 <HAL_RCC_OscConfig+0x338>
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d135      	bne.n	8001218 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011ac:	4b94      	ldr	r3, [pc, #592]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_OscConfig+0x2e4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	2b80      	cmp	r3, #128	; 0x80
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e296      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011c4:	f7ff fc98 	bl	8000af8 <HAL_GetREVID>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d817      	bhi.n	8001202 <HAL_RCC_OscConfig+0x322>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	d108      	bne.n	80011ec <HAL_RCC_OscConfig+0x30c>
 80011da:	4b89      	ldr	r3, [pc, #548]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80011e2:	4a87      	ldr	r2, [pc, #540]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80011e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011ea:	e075      	b.n	80012d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011ec:	4b84      	ldr	r3, [pc, #528]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	069b      	lsls	r3, r3, #26
 80011fa:	4981      	ldr	r1, [pc, #516]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001200:	e06a      	b.n	80012d8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001202:	4b7f      	ldr	r3, [pc, #508]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	061b      	lsls	r3, r3, #24
 8001210:	497b      	ldr	r1, [pc, #492]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001212:	4313      	orrs	r3, r2
 8001214:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001216:	e05f      	b.n	80012d8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d042      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001220:	4b77      	ldr	r3, [pc, #476]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a76      	ldr	r2, [pc, #472]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff fc58 	bl	8000ae0 <HAL_GetTick>
 8001230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001234:	f7ff fc54 	bl	8000ae0 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e255      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001246:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001252:	f7ff fc51 	bl	8000af8 <HAL_GetREVID>
 8001256:	4603      	mov	r3, r0
 8001258:	f241 0203 	movw	r2, #4099	; 0x1003
 800125c:	4293      	cmp	r3, r2
 800125e:	d817      	bhi.n	8001290 <HAL_RCC_OscConfig+0x3b0>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	2b20      	cmp	r3, #32
 8001266:	d108      	bne.n	800127a <HAL_RCC_OscConfig+0x39a>
 8001268:	4b65      	ldr	r3, [pc, #404]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001270:	4a63      	ldr	r2, [pc, #396]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001276:	6053      	str	r3, [r2, #4]
 8001278:	e02e      	b.n	80012d8 <HAL_RCC_OscConfig+0x3f8>
 800127a:	4b61      	ldr	r3, [pc, #388]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	069b      	lsls	r3, r3, #26
 8001288:	495d      	ldr	r1, [pc, #372]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e023      	b.n	80012d8 <HAL_RCC_OscConfig+0x3f8>
 8001290:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	061b      	lsls	r3, r3, #24
 800129e:	4958      	ldr	r1, [pc, #352]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	60cb      	str	r3, [r1, #12]
 80012a4:	e018      	b.n	80012d8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80012a6:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a55      	ldr	r2, [pc, #340]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80012ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b2:	f7ff fc15 	bl	8000ae0 <HAL_GetTick>
 80012b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80012ba:	f7ff fc11 	bl	8000ae0 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e212      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012cc:	4b4c      	ldr	r3, [pc, #304]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d036      	beq.n	8001352 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d019      	beq.n	8001320 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ec:	4b44      	ldr	r3, [pc, #272]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80012ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f0:	4a43      	ldr	r2, [pc, #268]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fbf2 	bl	8000ae0 <HAL_GetTick>
 80012fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fbee 	bl	8000ae0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1ef      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x420>
 800131e:	e018      	b.n	8001352 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001320:	4b37      	ldr	r3, [pc, #220]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001324:	4a36      	ldr	r2, [pc, #216]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff fbd8 	bl	8000ae0 <HAL_GetTick>
 8001330:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fbd4 	bl	8000ae0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1d5      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	2b00      	cmp	r3, #0
 800135c:	d036      	beq.n	80013cc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d019      	beq.n	800139a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 800136c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001370:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001372:	f7ff fbb5 	bl	8000ae0 <HAL_GetTick>
 8001376:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800137a:	f7ff fbb1 	bl	8000ae0 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1b2      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x49a>
 8001398:	e018      	b.n	80013cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a18      	ldr	r2, [pc, #96]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80013a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fb9b 	bl	8000ae0 <HAL_GetTick>
 80013aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80013ae:	f7ff fb97 	bl	8000ae0 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e198      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_RCC_OscConfig+0x520>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8085 	beq.w	80014e4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_RCC_OscConfig+0x524>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_RCC_OscConfig+0x524>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80013e6:	f7ff fb7b 	bl	8000ae0 <HAL_GetTick>
 80013ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80013ec:	e00c      	b.n	8001408 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7ff fb77 	bl	8000ae0 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	d905      	bls.n	8001408 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e178      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
 8001400:	58024400 	.word	0x58024400
 8001404:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001408:	4b96      	ldr	r3, [pc, #600]	; (8001664 <HAL_RCC_OscConfig+0x784>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0ec      	beq.n	80013ee <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x54a>
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a91      	ldr	r2, [pc, #580]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
 8001428:	e02d      	b.n	8001486 <HAL_RCC_OscConfig+0x5a6>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x56c>
 8001432:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	4a8c      	ldr	r2, [pc, #560]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6713      	str	r3, [r2, #112]	; 0x70
 800143e:	4b8a      	ldr	r3, [pc, #552]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	4a89      	ldr	r2, [pc, #548]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	e01c      	b.n	8001486 <HAL_RCC_OscConfig+0x5a6>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b05      	cmp	r3, #5
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0x58e>
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001458:	4a83      	ldr	r2, [pc, #524]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6713      	str	r3, [r2, #112]	; 0x70
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	4a80      	ldr	r2, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	e00b      	b.n	8001486 <HAL_RCC_OscConfig+0x5a6>
 800146e:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	4a7d      	ldr	r2, [pc, #500]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6713      	str	r3, [r2, #112]	; 0x70
 800147a:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	4a7a      	ldr	r2, [pc, #488]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001480:	f023 0304 	bic.w	r3, r3, #4
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d015      	beq.n	80014ba <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148e:	f7ff fb27 	bl	8000ae0 <HAL_GetTick>
 8001492:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001494:	e00a      	b.n	80014ac <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff fb23 	bl	8000ae0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e122      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ac:	4b6e      	ldr	r3, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0ee      	beq.n	8001496 <HAL_RCC_OscConfig+0x5b6>
 80014b8:	e014      	b.n	80014e4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff fb11 	bl	8000ae0 <HAL_GetTick>
 80014be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014c0:	e00a      	b.n	80014d8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f7ff fb0d 	bl	8000ae0 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e10c      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014d8:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ee      	bne.n	80014c2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8101 	beq.w	80016f0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80014ee:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014f6:	2b18      	cmp	r3, #24
 80014f8:	f000 80bc 	beq.w	8001674 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	2b02      	cmp	r3, #2
 8001502:	f040 8095 	bne.w	8001630 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001506:	4b58      	ldr	r3, [pc, #352]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 800150c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fae5 	bl	8000ae0 <HAL_GetTick>
 8001516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fae1 	bl	8000ae0 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e0e2      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800152c:	4b4e      	ldr	r3, [pc, #312]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001538:	4b4b      	ldr	r3, [pc, #300]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 800153a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153c:	4b4b      	ldr	r3, [pc, #300]	; (800166c <HAL_RCC_OscConfig+0x78c>)
 800153e:	4013      	ands	r3, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	430a      	orrs	r2, r1
 800154c:	4946      	ldr	r1, [pc, #280]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 800154e:	4313      	orrs	r3, r2
 8001550:	628b      	str	r3, [r1, #40]	; 0x28
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	3b01      	subs	r3, #1
 8001558:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	3b01      	subs	r3, #1
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	b29b      	uxth	r3, r3
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156c:	3b01      	subs	r3, #1
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157a:	3b01      	subs	r3, #1
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001582:	4939      	ldr	r1, [pc, #228]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001584:	4313      	orrs	r3, r2
 8001586:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001588:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	4a36      	ldr	r2, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001594:	4b34      	ldr	r3, [pc, #208]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001598:	4b35      	ldr	r3, [pc, #212]	; (8001670 <HAL_RCC_OscConfig+0x790>)
 800159a:	4013      	ands	r3, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	4931      	ldr	r1, [pc, #196]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	f023 020c 	bic.w	r2, r3, #12
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	492c      	ldr	r1, [pc, #176]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	f023 0202 	bic.w	r2, r3, #2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4928      	ldr	r1, [pc, #160]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	4a25      	ldr	r2, [pc, #148]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fa6a 	bl	8000ae0 <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fa66 	bl	8000ae0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e067      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x730>
 800162e:	e05f      	b.n	80016f0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800163a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fa50 	bl	8000ae0 <HAL_GetTick>
 8001640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fa4c 	bl	8000ae0 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e04d      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <HAL_RCC_OscConfig+0x788>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x764>
 8001662:	e045      	b.n	80016f0 <HAL_RCC_OscConfig+0x810>
 8001664:	58024800 	.word	0x58024800
 8001668:	58024400 	.word	0x58024400
 800166c:	fffffc0c 	.word	0xfffffc0c
 8001670:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_RCC_OscConfig+0x81c>)
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_RCC_OscConfig+0x81c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	2b01      	cmp	r3, #1
 8001686:	d031      	beq.n	80016ec <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f003 0203 	and.w	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d12a      	bne.n	80016ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d122      	bne.n	80016ec <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d11a      	bne.n	80016ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	0a5b      	lsrs	r3, r3, #9
 80016ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d111      	bne.n	80016ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d108      	bne.n	80016ec <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	0e1b      	lsrs	r3, r3, #24
 80016de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3730      	adds	r7, #48	; 0x30
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	58024400 	.word	0x58024400

08001700 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e19c      	b.n	8001a4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b8a      	ldr	r3, [pc, #552]	; (8001940 <HAL_RCC_ClockConfig+0x240>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d910      	bls.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b87      	ldr	r3, [pc, #540]	; (8001940 <HAL_RCC_ClockConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 020f 	bic.w	r2, r3, #15
 800172a:	4985      	ldr	r1, [pc, #532]	; (8001940 <HAL_RCC_ClockConfig+0x240>)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b83      	ldr	r3, [pc, #524]	; (8001940 <HAL_RCC_ClockConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e184      	b.n	8001a4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d010      	beq.n	8001772 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800175c:	429a      	cmp	r2, r3
 800175e:	d908      	bls.n	8001772 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001760:	4b78      	ldr	r3, [pc, #480]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4975      	ldr	r1, [pc, #468]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 800176e:	4313      	orrs	r3, r2
 8001770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d010      	beq.n	80017a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800178a:	429a      	cmp	r2, r3
 800178c:	d908      	bls.n	80017a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800178e:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	496a      	ldr	r1, [pc, #424]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 800179c:	4313      	orrs	r3, r2
 800179e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d010      	beq.n	80017ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	4b64      	ldr	r3, [pc, #400]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d908      	bls.n	80017ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017bc:	4b61      	ldr	r3, [pc, #388]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	495e      	ldr	r1, [pc, #376]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d010      	beq.n	80017fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	4b59      	ldr	r3, [pc, #356]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d908      	bls.n	80017fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80017ea:	4b56      	ldr	r3, [pc, #344]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4953      	ldr	r1, [pc, #332]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d010      	beq.n	800182a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	429a      	cmp	r2, r3
 8001816:	d908      	bls.n	800182a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001818:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f023 020f 	bic.w	r2, r3, #15
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4947      	ldr	r1, [pc, #284]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001826:	4313      	orrs	r3, r2
 8001828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d055      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4940      	ldr	r1, [pc, #256]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001844:	4313      	orrs	r3, r2
 8001846:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d107      	bne.n	8001860 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001850:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d121      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0f6      	b.n	8001a4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d107      	bne.n	8001878 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d115      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0ea      	b.n	8001a4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0de      	b.n	8001a4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001890:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0d6      	b.n	8001a4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f023 0207 	bic.w	r2, r3, #7
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4925      	ldr	r1, [pc, #148]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff f915 	bl	8000ae0 <HAL_GetTick>
 80018b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ba:	f7ff f911 	bl	8000ae0 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0be      	b.n	8001a4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	429a      	cmp	r2, r3
 80018e0:	d1eb      	bne.n	80018ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d010      	beq.n	8001910 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d208      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f023 020f 	bic.w	r2, r3, #15
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	490e      	ldr	r1, [pc, #56]	; (8001944 <HAL_RCC_ClockConfig+0x244>)
 800190c:	4313      	orrs	r3, r2
 800190e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_ClockConfig+0x240>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d214      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_RCC_ClockConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 020f 	bic.w	r2, r3, #15
 8001926:	4906      	ldr	r1, [pc, #24]	; (8001940 <HAL_RCC_ClockConfig+0x240>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_RCC_ClockConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e086      	b.n	8001a4e <HAL_RCC_ClockConfig+0x34e>
 8001940:	52002000 	.word	0x52002000
 8001944:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d010      	beq.n	8001976 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001960:	429a      	cmp	r2, r3
 8001962:	d208      	bcs.n	8001976 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	4939      	ldr	r1, [pc, #228]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 8001972:	4313      	orrs	r3, r2
 8001974:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d010      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800198e:	429a      	cmp	r2, r3
 8001990:	d208      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	492e      	ldr	r1, [pc, #184]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d010      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019bc:	429a      	cmp	r2, r3
 80019be:	d208      	bcs.n	80019d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4922      	ldr	r1, [pc, #136]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d010      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d208      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4917      	ldr	r1, [pc, #92]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a00:	f000 f834 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	4912      	ldr	r1, [pc, #72]	; (8001a5c <HAL_RCC_ClockConfig+0x35c>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x358>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_RCC_ClockConfig+0x35c>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_RCC_ClockConfig+0x360>)
 8001a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_RCC_ClockConfig+0x364>)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_RCC_ClockConfig+0x368>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f802 	bl	8000a4c <HAL_InitTick>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	08001dd0 	.word	0x08001dd0
 8001a60:	24000004 	.word	0x24000004
 8001a64:	24000000 	.word	0x24000000
 8001a68:	2400001c 	.word	0x2400001c

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a72:	4bb3      	ldr	r3, [pc, #716]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a7a:	2b18      	cmp	r3, #24
 8001a7c:	f200 8155 	bhi.w	8001d2a <HAL_RCC_GetSysClockFreq+0x2be>
 8001a80:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001aed 	.word	0x08001aed
 8001a8c:	08001d2b 	.word	0x08001d2b
 8001a90:	08001d2b 	.word	0x08001d2b
 8001a94:	08001d2b 	.word	0x08001d2b
 8001a98:	08001d2b 	.word	0x08001d2b
 8001a9c:	08001d2b 	.word	0x08001d2b
 8001aa0:	08001d2b 	.word	0x08001d2b
 8001aa4:	08001d2b 	.word	0x08001d2b
 8001aa8:	08001b13 	.word	0x08001b13
 8001aac:	08001d2b 	.word	0x08001d2b
 8001ab0:	08001d2b 	.word	0x08001d2b
 8001ab4:	08001d2b 	.word	0x08001d2b
 8001ab8:	08001d2b 	.word	0x08001d2b
 8001abc:	08001d2b 	.word	0x08001d2b
 8001ac0:	08001d2b 	.word	0x08001d2b
 8001ac4:	08001d2b 	.word	0x08001d2b
 8001ac8:	08001b19 	.word	0x08001b19
 8001acc:	08001d2b 	.word	0x08001d2b
 8001ad0:	08001d2b 	.word	0x08001d2b
 8001ad4:	08001d2b 	.word	0x08001d2b
 8001ad8:	08001d2b 	.word	0x08001d2b
 8001adc:	08001d2b 	.word	0x08001d2b
 8001ae0:	08001d2b 	.word	0x08001d2b
 8001ae4:	08001d2b 	.word	0x08001d2b
 8001ae8:	08001b1f 	.word	0x08001b1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001aec:	4b94      	ldr	r3, [pc, #592]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001af8:	4b91      	ldr	r3, [pc, #580]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	4a90      	ldr	r2, [pc, #576]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001b0a:	e111      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001b0c:	4b8d      	ldr	r3, [pc, #564]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b0e:	61bb      	str	r3, [r7, #24]
    break;
 8001b10:	e10e      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001b12:	4b8d      	ldr	r3, [pc, #564]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b14:	61bb      	str	r3, [r7, #24]
    break;
 8001b16:	e10b      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001b18:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001b1a:	61bb      	str	r3, [r7, #24]
    break;
 8001b1c:	e108      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001b1e:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001b28:	4b85      	ldr	r3, [pc, #532]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001b34:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001b3e:	4b80      	ldr	r3, [pc, #512]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b42:	08db      	lsrs	r3, r3, #3
 8001b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80e1 	beq.w	8001d24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	f000 8083 	beq.w	8001c70 <HAL_RCC_GetSysClockFreq+0x204>
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	f200 80a1 	bhi.w	8001cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x114>
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d056      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001b7e:	e099      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b80:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d02d      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b8c:	4b6c      	ldr	r3, [pc, #432]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	4a6b      	ldr	r2, [pc, #428]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bb6:	4b62      	ldr	r3, [pc, #392]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001be6:	e087      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001d54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bfa:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c2a:	e065      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c3e:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c6e:	e043      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001d5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001cb2:	e021      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001cf6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	0a5b      	lsrs	r3, r3, #9
 8001cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d02:	3301      	adds	r3, #1
 8001d04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d1c:	ee17 3a90 	vmov	r3, s15
 8001d20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001d22:	e005      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
    break;
 8001d28:	e002      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d2c:	61bb      	str	r3, [r7, #24]
    break;
 8001d2e:	bf00      	nop
  }

  return sysclockfreq;
 8001d30:	69bb      	ldr	r3, [r7, #24]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	58024400 	.word	0x58024400
 8001d44:	03d09000 	.word	0x03d09000
 8001d48:	003d0900 	.word	0x003d0900
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	46000000 	.word	0x46000000
 8001d54:	4c742400 	.word	0x4c742400
 8001d58:	4a742400 	.word	0x4a742400
 8001d5c:	4b742400 	.word	0x4b742400

08001d60 <__libc_init_array>:
 8001d60:	b570      	push	{r4, r5, r6, lr}
 8001d62:	4d0d      	ldr	r5, [pc, #52]	; (8001d98 <__libc_init_array+0x38>)
 8001d64:	4c0d      	ldr	r4, [pc, #52]	; (8001d9c <__libc_init_array+0x3c>)
 8001d66:	1b64      	subs	r4, r4, r5
 8001d68:	10a4      	asrs	r4, r4, #2
 8001d6a:	2600      	movs	r6, #0
 8001d6c:	42a6      	cmp	r6, r4
 8001d6e:	d109      	bne.n	8001d84 <__libc_init_array+0x24>
 8001d70:	4d0b      	ldr	r5, [pc, #44]	; (8001da0 <__libc_init_array+0x40>)
 8001d72:	4c0c      	ldr	r4, [pc, #48]	; (8001da4 <__libc_init_array+0x44>)
 8001d74:	f000 f820 	bl	8001db8 <_init>
 8001d78:	1b64      	subs	r4, r4, r5
 8001d7a:	10a4      	asrs	r4, r4, #2
 8001d7c:	2600      	movs	r6, #0
 8001d7e:	42a6      	cmp	r6, r4
 8001d80:	d105      	bne.n	8001d8e <__libc_init_array+0x2e>
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
 8001d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d88:	4798      	blx	r3
 8001d8a:	3601      	adds	r6, #1
 8001d8c:	e7ee      	b.n	8001d6c <__libc_init_array+0xc>
 8001d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d92:	4798      	blx	r3
 8001d94:	3601      	adds	r6, #1
 8001d96:	e7f2      	b.n	8001d7e <__libc_init_array+0x1e>
 8001d98:	08001de0 	.word	0x08001de0
 8001d9c:	08001de0 	.word	0x08001de0
 8001da0:	08001de0 	.word	0x08001de0
 8001da4:	08001de4 	.word	0x08001de4

08001da8 <memset>:
 8001da8:	4402      	add	r2, r0
 8001daa:	4603      	mov	r3, r0
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d100      	bne.n	8001db2 <memset+0xa>
 8001db0:	4770      	bx	lr
 8001db2:	f803 1b01 	strb.w	r1, [r3], #1
 8001db6:	e7f9      	b.n	8001dac <memset+0x4>

08001db8 <_init>:
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	bf00      	nop
 8001dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dbe:	bc08      	pop	{r3}
 8001dc0:	469e      	mov	lr, r3
 8001dc2:	4770      	bx	lr

08001dc4 <_fini>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	bf00      	nop
 8001dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dca:	bc08      	pop	{r3}
 8001dcc:	469e      	mov	lr, r3
 8001dce:	4770      	bx	lr
