
baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e60  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08013100  08013100  00023100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131d8  080131d8  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080131d8  080131d8  000231d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131e0  080131e0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131e0  080131e0  000231e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080131e4  080131e4  000231e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  080131e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cc4  240001e8  080133d0  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  24003eac  080133d0  00033eac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004637f  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007528  00000000  00000000  00076595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f0  00000000  00000000  0007dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e78  00000000  00000000  0007fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041909  00000000  00000000  00081a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f1d8  00000000  00000000  000c3331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018f10c  00000000  00000000  000f2509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00281615  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d18  00000000  00000000  00281668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080130e8 	.word	0x080130e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	080130e8 	.word	0x080130e8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_DMA_Init+0x6c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c8:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_DMA_Init+0x6c>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_DMA_Init+0x6c>)
 80007d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_DMA_Init+0x6c>)
 80007e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <MX_DMA_Init+0x6c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA_Init+0x6c>)
 80007f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2010      	movs	r0, #16
 8000804:	f001 f9c1 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000808:	2010      	movs	r0, #16
 800080a:	f001 f9d8 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2011      	movs	r0, #17
 8000814:	f001 f9b9 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000818:	2011      	movs	r0, #17
 800081a:	f001 f9d0 	bl	8001bbe <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	58024400 	.word	0x58024400

0800082c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	4a35      	ldr	r2, [pc, #212]	; (8000910 <MX_GPIO_Init+0xe4>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	61fb      	str	r3, [r7, #28]
 800084e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000856:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000860:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	4a26      	ldr	r2, [pc, #152]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_GPIO_Init+0xe4>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_GPIO_Init+0xe4>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000904:	f000 f806 	bl	8000914 <GPIO_Port_Config>

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58024400 	.word	0x58024400

08000914 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	4827      	ldr	r0, [pc, #156]	; (80009cc <GPIO_Port_Config+0xb8>)
 800092e:	f003 fdbf 	bl	80044b0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <GPIO_Port_Config+0xb8>)
 8000948:	f003 fc02 	bl	8004150 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	481e      	ldr	r0, [pc, #120]	; (80009cc <GPIO_Port_Config+0xb8>)
 8000954:	f003 fdac 	bl	80044b0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4817      	ldr	r0, [pc, #92]	; (80009cc <GPIO_Port_Config+0xb8>)
 8000970:	f003 fbee 	bl	8004150 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <GPIO_Port_Config+0xbc>)
 800097c:	f003 fd98 	bl	80044b0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4619      	mov	r1, r3
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <GPIO_Port_Config+0xbc>)
 8000998:	f003 fbda 	bl	8004150 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <GPIO_Port_Config+0xbc>)
 80009a4:	f003 fd84 	bl	80044b0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80009a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <GPIO_Port_Config+0xbc>)
 80009c0:	f003 fbc6 	bl	8004150 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58021000 	.word	0x58021000
 80009d0:	58021400 	.word	0x58021400

080009d4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_I2C2_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_I2C2_Init+0x7c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a10:	f003 fd96 	bl	8004540 <HAL_I2C_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f000 fa35 	bl	8000e88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a22:	f004 fca2 	bl	800536a <HAL_I2CEx_ConfigAnalogFilter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f000 fa2c 	bl	8000e88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a34:	f004 fce4 	bl	8005400 <HAL_I2CEx_ConfigDigitalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 fa23 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	24000228 	.word	0x24000228
 8000a4c:	40005800 	.word	0x40005800
 8000a50:	307075b1 	.word	0x307075b1

08000a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0b8      	sub	sp, #224	; 0xe0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	22bc      	movs	r2, #188	; 0xbc
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f011 ff01 	bl	801287c <memset>
  if(i2cHandle->Instance==I2C2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	; (8000b34 <HAL_I2C_MspInit+0xe0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d152      	bne.n	8000b2a <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a84:	2308      	movs	r3, #8
 8000a86:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4618      	mov	r0, r3
 8000a94:	f006 fee2 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a9e:	f000 f9f3 	bl	8000e88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ac0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ada:	2304      	movs	r3, #4
 8000adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <HAL_I2C_MspInit+0xe8>)
 8000ae8:	f003 fb32 	bl	8004150 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2021      	movs	r0, #33	; 0x21
 8000b10:	f001 f83b 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b14:	2021      	movs	r0, #33	; 0x21
 8000b16:	f001 f852 	bl	8001bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2022      	movs	r0, #34	; 0x22
 8000b20:	f001 f833 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b24:	2022      	movs	r0, #34	; 0x22
 8000b26:	f001 f84a 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	37e0      	adds	r7, #224	; 0xe0
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40005800 	.word	0x40005800
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	58020400 	.word	0x58020400

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b46:	f000 f959 	bl	8000dfc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b4a:	4b65      	ldr	r3, [pc, #404]	; (8000ce0 <main+0x1a0>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d11b      	bne.n	8000b8e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b56:	f3bf 8f4f 	dsb	sy
}
 8000b5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b5c:	f3bf 8f6f 	isb	sy
}
 8000b60:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b62:	4b5f      	ldr	r3, [pc, #380]	; (8000ce0 <main+0x1a0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6a:	f3bf 8f4f 	dsb	sy
}
 8000b6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b70:	f3bf 8f6f 	isb	sy
}
 8000b74:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b76:	4b5a      	ldr	r3, [pc, #360]	; (8000ce0 <main+0x1a0>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a59      	ldr	r2, [pc, #356]	; (8000ce0 <main+0x1a0>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b82:	f3bf 8f4f 	dsb	sy
}
 8000b86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b88:	f3bf 8f6f 	isb	sy
}
 8000b8c:	e000      	b.n	8000b90 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b8e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b90:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <main+0x1a0>)
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d138      	bne.n	8000c0e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b9c:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <main+0x1a0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba4:	f3bf 8f4f 	dsb	sy
}
 8000ba8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000baa:	4b4d      	ldr	r3, [pc, #308]	; (8000ce0 <main+0x1a0>)
 8000bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bb0:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	0b5b      	lsrs	r3, r3, #13
 8000bb6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bba:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bc4:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	015a      	lsls	r2, r3, #5
 8000bca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bd4:	4942      	ldr	r1, [pc, #264]	; (8000ce0 <main+0x1a0>)
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	60fa      	str	r2, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ef      	bne.n	8000bc6 <main+0x86>
    } while(sets-- != 0U);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	613a      	str	r2, [r7, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1e5      	bne.n	8000bbc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf0:	f3bf 8f4f 	dsb	sy
}
 8000bf4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bf6:	4b3a      	ldr	r3, [pc, #232]	; (8000ce0 <main+0x1a0>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a39      	ldr	r2, [pc, #228]	; (8000ce0 <main+0x1a0>)
 8000bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c02:	f3bf 8f4f 	dsb	sy
}
 8000c06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c08:	f3bf 8f6f 	isb	sy
}
 8000c0c:	e000      	b.n	8000c10 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c0e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c14:	61fb      	str	r3, [r7, #28]

  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000c16:	e000      	b.n	8000c1a <main+0xda>
 8000c18:	bf00      	nop
 8000c1a:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <main+0x1a4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f8      	bne.n	8000c18 <main+0xd8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 fe13 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f85f 	bl	8000cec <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <main+0x1a4>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <main+0x1a4>)
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <main+0x1a4>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f003 fc49 	bl	80044e4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2000      	movs	r0, #0
 8000c56:	f003 fc5f 	bl	8004518 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c60:	bf00      	nop
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <main+0x1a4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d104      	bne.n	8000c78 <main+0x138>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	61fa      	str	r2, [r7, #28]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dcf4      	bgt.n	8000c62 <main+0x122>
if ( timeout < 0 )
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da01      	bge.n	8000c82 <main+0x142>
{
Error_Handler();
 8000c7e:	f000 f903 	bl	8000e88 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c82:	f7ff fdd3 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c86:	f7ff fd99 	bl	80007bc <MX_DMA_Init>
  MX_I2C2_Init();
 8000c8a:	f7ff fea3 	bl	80009d4 <MX_I2C2_Init>
 // MX_SDMMC1_SD_Init();
  MX_TIM1_Init();
 8000c8e:	f000 fa87 	bl	80011a0 <MX_TIM1_Init>
  MX_UART4_Init();
 8000c92:	f000 fbf3 	bl	800147c <MX_UART4_Init>
  MX_FATFS_Init();
 8000c96:	f00f f991 	bl	800ffbc <MX_FATFS_Init>
  MX_UART7_Init();
 8000c9a:	f000 fc3f 	bl	800151c <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000c9e:	f011 f843 	bl	8011d28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
 char txBuf[8];
 uint8_t count = 1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	76fb      	strb	r3, [r7, #27]
//     ReadMag();
//     ReadAcc();
//     ReadBaro();
//     ReadGyro();

    sprintf(txBuf, "%u\r\n", count);
 8000ca6:	7efa      	ldrb	r2, [r7, #27]
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	490f      	ldr	r1, [pc, #60]	; (8000ce8 <main+0x1a8>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f011 fea7 	bl	8012a00 <siprintf>
    count++;
 8000cb2:	7efb      	ldrb	r3, [r7, #27]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	76fb      	strb	r3, [r7, #27]

    if(count > 100)
 8000cb8:	7efb      	ldrb	r3, [r7, #27]
 8000cba:	2b64      	cmp	r3, #100	; 0x64
 8000cbc:	d901      	bls.n	8000cc2 <main+0x182>
    {
      count = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	76fb      	strb	r3, [r7, #27]
    }

    CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fb0b 	bl	80002e0 <strlen>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f011 f934 	bl	8011f40 <CDC_Transmit_FS>

    HAL_Delay(100);
 8000cd8:	2064      	movs	r0, #100	; 0x64
 8000cda:	f000 fe4b 	bl	8001974 <HAL_Delay>
    sprintf(txBuf, "%u\r\n", count);
 8000cde:	e7e2      	b.n	8000ca6 <main+0x166>
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	08013100 	.word	0x08013100

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b09c      	sub	sp, #112	; 0x70
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	224c      	movs	r2, #76	; 0x4c
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f011 fdbe 	bl	801287c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2220      	movs	r2, #32
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f011 fdb8 	bl	801287c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f005 fd9f 	bl	8006850 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <SystemClock_Config+0x104>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a35      	ldr	r2, [pc, #212]	; (8000df0 <SystemClock_Config+0x104>)
 8000d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <SystemClock_Config+0x104>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <SystemClock_Config+0x108>)
 8000d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d30:	4a30      	ldr	r2, [pc, #192]	; (8000df4 <SystemClock_Config+0x108>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d38:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <SystemClock_Config+0x108>)
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d44:	bf00      	nop
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <SystemClock_Config+0x104>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d52:	d1f8      	bne.n	8000d46 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <SystemClock_Config+0x10c>)
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f023 0303 	bic.w	r3, r3, #3
 8000d5c:	4a26      	ldr	r2, [pc, #152]	; (8000df8 <SystemClock_Config+0x10c>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d64:	2321      	movs	r3, #33	; 0x21
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d72:	2302      	movs	r3, #2
 8000d74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d76:	2302      	movs	r3, #2
 8000d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d7e:	233c      	movs	r3, #60	; 0x3c
 8000d80:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000d86:	230f      	movs	r3, #15
 8000d88:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f005 fdc0 	bl	8006924 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000daa:	f000 f86d 	bl	8000e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	233f      	movs	r3, #63	; 0x3f
 8000db0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2303      	movs	r3, #3
 8000db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dba:	2308      	movs	r3, #8
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dbe:	2340      	movs	r3, #64	; 0x40
 8000dc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dc2:	2340      	movs	r3, #64	; 0x40
 8000dc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dcc:	2340      	movs	r3, #64	; 0x40
 8000dce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f006 f9b5 	bl	8007144 <HAL_RCC_ClockConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000de0:	f000 f852 	bl	8000e88 <Error_Handler>
  }

  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000de4:	f005 fd8e 	bl	8006904 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000de8:	bf00      	nop
 8000dea:	3770      	adds	r7, #112	; 0x70
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58024800 	.word	0x58024800
 8000df4:	58000400 	.word	0x58000400
 8000df8:	58024400 	.word	0x58024400

08000dfc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e02:	463b      	mov	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e0e:	f000 fef1 	bl	8001bf4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e12:	2301      	movs	r3, #1
 8000e14:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000e1a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000e1e:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000e20:	2312      	movs	r3, #18
 8000e22:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e40:	463b      	mov	r3, r7
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 ff0e 	bl	8001c64 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000e4c:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000e50:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000e52:	230f      	movs	r3, #15
 8000e54:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e62:	2301      	movs	r3, #1
 8000e64:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e66:	2301      	movs	r3, #1
 8000e68:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e72:	463b      	mov	r3, r7
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fef5 	bl	8001c64 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f000 fed2 	bl	8001c24 <HAL_MPU_Enable>
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x8>
	...

08000e94 <HAL_SD_MspInit>:
  /* USER CODE END SDMMC1_Init 2 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0ba      	sub	sp, #232	; 0xe8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	22bc      	movs	r2, #188	; 0xbc
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f011 fce1 	bl	801287c <memset>
  if(sdHandle->Instance==SDMMC1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a3b      	ldr	r2, [pc, #236]	; (8000fac <HAL_SD_MspInit+0x118>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d16e      	bne.n	8000fa2 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f006 fcc2 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000ede:	f7ff ffd3 	bl	8000e88 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ee2:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <HAL_SD_MspInit+0x11c>)
 8000ee4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ee8:	4a31      	ldr	r2, [pc, #196]	; (8000fb0 <HAL_SD_MspInit+0x11c>)
 8000eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <HAL_SD_MspInit+0x11c>)
 8000ef4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <HAL_SD_MspInit+0x11c>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	4a2a      	ldr	r2, [pc, #168]	; (8000fb0 <HAL_SD_MspInit+0x11c>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_SD_MspInit+0x11c>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_SD_MspInit+0x11c>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <HAL_SD_MspInit+0x11c>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_SD_MspInit+0x11c>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f3c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f56:	230c      	movs	r3, #12
 8000f58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <HAL_SD_MspInit+0x120>)
 8000f64:	f003 f8f4 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f80:	230c      	movs	r3, #12
 8000f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <HAL_SD_MspInit+0x124>)
 8000f8e:	f003 f8df 	bl	8004150 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2031      	movs	r0, #49	; 0x31
 8000f98:	f000 fdf7 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000f9c:	2031      	movs	r0, #49	; 0x31
 8000f9e:	f000 fe0e 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	37e8      	adds	r7, #232	; 0xe8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	52007000 	.word	0x52007000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	58020800 	.word	0x58020800
 8000fb8:	58020c00 	.word	0x58020c00

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_MspInit+0x30>)
 8000fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_MspInit+0x30>)
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_MspInit+0x30>)
 8000fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	58024400 	.word	0x58024400

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 fc7a 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DMA1_Stream5_IRQHandler+0x10>)
 800104a:	f001 ff0d 	bl	8002e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000444 	.word	0x24000444

08001058 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <DMA1_Stream6_IRQHandler+0x10>)
 800105e:	f001 ff03 	bl	8002e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	240003cc 	.word	0x240003cc

0800106c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <TIM1_BRK_IRQHandler+0x10>)
 8001072:	f00a fa6b 	bl	800b54c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	240002f0 	.word	0x240002f0

08001080 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM1_UP_IRQHandler+0x10>)
 8001086:	f00a fa61 	bl	800b54c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	240002f0 	.word	0x240002f0

08001094 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <TIM1_TRG_COM_IRQHandler+0x10>)
 800109a:	f00a fa57 	bl	800b54c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240002f0 	.word	0x240002f0

080010a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <TIM1_CC_IRQHandler+0x10>)
 80010ae:	f00a fa4d 	bl	800b54c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	240002f0 	.word	0x240002f0

080010bc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <I2C2_EV_IRQHandler+0x10>)
 80010c2:	f003 facd 	bl	8004660 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	24000228 	.word	0x24000228

080010d0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <I2C2_ER_IRQHandler+0x10>)
 80010d6:	f003 fadd 	bl	8004694 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	24000228 	.word	0x24000228

080010e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <SDMMC1_IRQHandler+0x10>)
 80010ea:	f008 ffa5 	bl	800a038 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	24000274 	.word	0x24000274

080010f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <UART4_IRQHandler+0x10>)
 80010fe:	f00b faf5 	bl	800c6ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	240004bc 	.word	0x240004bc

0800110c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <UART7_IRQHandler+0x10>)
 8001112:	f00b faeb 	bl	800c6ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2400033c 	.word	0x2400033c

08001120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <OTG_FS_IRQHandler+0x10>)
 8001126:	f004 fb0e 	bl	8005746 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	24003a94 	.word	0x24003a94

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f011 fb50 	bl	8012808 <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	24040000 	.word	0x24040000
 8001194:	00004000 	.word	0x00004000
 8001198:	24000204 	.word	0x24000204
 800119c:	24003eb0 	.word	0x24003eb0

080011a0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09a      	sub	sp, #104	; 0x68
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	222c      	movs	r2, #44	; 0x2c
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f011 fb4e 	bl	801287c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e0:	4b55      	ldr	r3, [pc, #340]	; (8001338 <MX_TIM1_Init+0x198>)
 80011e2:	4a56      	ldr	r2, [pc, #344]	; (800133c <MX_TIM1_Init+0x19c>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011e6:	4b54      	ldr	r3, [pc, #336]	; (8001338 <MX_TIM1_Init+0x198>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b52      	ldr	r3, [pc, #328]	; (8001338 <MX_TIM1_Init+0x198>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011f2:	4b51      	ldr	r3, [pc, #324]	; (8001338 <MX_TIM1_Init+0x198>)
 80011f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b4f      	ldr	r3, [pc, #316]	; (8001338 <MX_TIM1_Init+0x198>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001200:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <MX_TIM1_Init+0x198>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <MX_TIM1_Init+0x198>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800120c:	484a      	ldr	r0, [pc, #296]	; (8001338 <MX_TIM1_Init+0x198>)
 800120e:	f00a f8e5 	bl	800b3dc <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001218:	f7ff fe36 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001222:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001226:	4619      	mov	r1, r3
 8001228:	4843      	ldr	r0, [pc, #268]	; (8001338 <MX_TIM1_Init+0x198>)
 800122a:	f00a fbbf 	bl	800b9ac <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001234:	f7ff fe28 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001238:	483f      	ldr	r0, [pc, #252]	; (8001338 <MX_TIM1_Init+0x198>)
 800123a:	f00a f926 	bl	800b48a <HAL_TIM_PWM_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001244:	f7ff fe20 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001254:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001258:	4619      	mov	r1, r3
 800125a:	4837      	ldr	r0, [pc, #220]	; (8001338 <MX_TIM1_Init+0x198>)
 800125c:	f00b f8d2 	bl	800c404 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001266:	f7ff fe0f 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126a:	2360      	movs	r3, #96	; 0x60
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001272:	2300      	movs	r3, #0
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001276:	2300      	movs	r3, #0
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	482a      	ldr	r0, [pc, #168]	; (8001338 <MX_TIM1_Init+0x198>)
 8001290:	f00a fa7c 	bl	800b78c <HAL_TIM_PWM_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800129a:	f7ff fdf5 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	2204      	movs	r2, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4824      	ldr	r0, [pc, #144]	; (8001338 <MX_TIM1_Init+0x198>)
 80012a8:	f00a fa70 	bl	800b78c <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80012b2:	f7ff fde9 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ba:	2208      	movs	r2, #8
 80012bc:	4619      	mov	r1, r3
 80012be:	481e      	ldr	r0, [pc, #120]	; (8001338 <MX_TIM1_Init+0x198>)
 80012c0:	f00a fa64 	bl	800b78c <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80012ca:	f7ff fddd 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d2:	220c      	movs	r2, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	4818      	ldr	r0, [pc, #96]	; (8001338 <MX_TIM1_Init+0x198>)
 80012d8:	f00a fa58 	bl	800b78c <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80012e2:	f7ff fdd1 	bl	8000e88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <MX_TIM1_Init+0x198>)
 800131c:	f00b f8fa 	bl	800c514 <HAL_TIMEx_ConfigBreakDeadTime>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001326:	f7ff fdaf 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <MX_TIM1_Init+0x198>)
 800132c:	f000 f848 	bl	80013c0 <HAL_TIM_MspPostInit>

}
 8001330:	bf00      	nop
 8001332:	3768      	adds	r7, #104	; 0x68
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	240002f0 	.word	0x240002f0
 800133c:	40010000 	.word	0x40010000

08001340 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_TIM_Base_MspInit+0x78>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12e      	bne.n	80013b0 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_TIM_Base_MspInit+0x7c>)
 8001354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_TIM_Base_MspInit+0x7c>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_TIM_Base_MspInit+0x7c>)
 8001364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2018      	movs	r0, #24
 8001376:	f000 fc08 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800137a:	2018      	movs	r0, #24
 800137c:	f000 fc1f 	bl	8001bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2019      	movs	r0, #25
 8001386:	f000 fc00 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800138a:	2019      	movs	r0, #25
 800138c:	f000 fc17 	bl	8001bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	201a      	movs	r0, #26
 8001396:	f000 fbf8 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800139a:	201a      	movs	r0, #26
 800139c:	f000 fc0f 	bl	8001bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	201b      	movs	r0, #27
 80013a6:	f000 fbf0 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013aa:	201b      	movs	r0, #27
 80013ac:	f000 fc07 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40010000 	.word	0x40010000
 80013bc:	58024400 	.word	0x58024400

080013c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_TIM_MspPostInit+0xac>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d13f      	bne.n	8001462 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_TIM_MspPostInit+0xb0>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <HAL_TIM_MspPostInit+0xb0>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_TIM_MspPostInit+0xb0>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_TIM_MspPostInit+0xb0>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <HAL_TIM_MspPostInit+0xb0>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_TIM_MspPostInit+0xb0>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800141e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	480e      	ldr	r0, [pc, #56]	; (8001474 <HAL_TIM_MspPostInit+0xb4>)
 800143c:	f002 fe88 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001452:	2301      	movs	r3, #1
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4806      	ldr	r0, [pc, #24]	; (8001478 <HAL_TIM_MspPostInit+0xb8>)
 800145e:	f002 fe77 	bl	8004150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40010000 	.word	0x40010000
 8001470:	58024400 	.word	0x58024400
 8001474:	58021000 	.word	0x58021000
 8001478:	58020000 	.word	0x58020000

0800147c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001480:	4b23      	ldr	r3, [pc, #140]	; (8001510 <MX_UART4_Init+0x94>)
 8001482:	4a24      	ldr	r2, [pc, #144]	; (8001514 <MX_UART4_Init+0x98>)
 8001484:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_UART4_Init+0x94>)
 8001488:	4a23      	ldr	r2, [pc, #140]	; (8001518 <MX_UART4_Init+0x9c>)
 800148a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <MX_UART4_Init+0x94>)
 800148e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001492:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_UART4_Init+0x94>)
 8001496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <MX_UART4_Init+0x94>)
 800149e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_UART4_Init+0x94>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_UART4_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_UART4_Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_UART4_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_UART4_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_UART4_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014c8:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_UART4_Init+0x94>)
 80014ca:	f00b f8bf 	bl	800c64c <HAL_UART_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 80014d4:	f7ff fcd8 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d8:	2100      	movs	r1, #0
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <MX_UART4_Init+0x94>)
 80014dc:	f00c fb67 	bl	800dbae <HAL_UARTEx_SetTxFifoThreshold>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 80014e6:	f7ff fccf 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <MX_UART4_Init+0x94>)
 80014ee:	f00c fb9c 	bl	800dc2a <HAL_UARTEx_SetRxFifoThreshold>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_UART4_Init+0x80>
  {
    Error_Handler();
 80014f8:	f7ff fcc6 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_UART4_Init+0x94>)
 80014fe:	f00c fb1d 	bl	800db3c <HAL_UARTEx_DisableFifoMode>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8001508:	f7ff fcbe 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	240004bc 	.word	0x240004bc
 8001514:	40004c00 	.word	0x40004c00
 8001518:	000186a0 	.word	0x000186a0

0800151c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <MX_UART7_Init+0x90>)
 8001522:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <MX_UART7_Init+0x94>)
 8001524:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_UART7_Init+0x90>)
 8001528:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800152c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_UART7_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_UART7_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MX_UART7_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_UART7_Init+0x90>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_UART7_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_UART7_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_UART7_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_UART7_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_UART7_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001564:	4811      	ldr	r0, [pc, #68]	; (80015ac <MX_UART7_Init+0x90>)
 8001566:	f00b f871 	bl	800c64c <HAL_UART_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001570:	f7ff fc8a 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001574:	2100      	movs	r1, #0
 8001576:	480d      	ldr	r0, [pc, #52]	; (80015ac <MX_UART7_Init+0x90>)
 8001578:	f00c fb19 	bl	800dbae <HAL_UARTEx_SetTxFifoThreshold>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001582:	f7ff fc81 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001586:	2100      	movs	r1, #0
 8001588:	4808      	ldr	r0, [pc, #32]	; (80015ac <MX_UART7_Init+0x90>)
 800158a:	f00c fb4e 	bl	800dc2a <HAL_UARTEx_SetRxFifoThreshold>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001594:	f7ff fc78 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <MX_UART7_Init+0x90>)
 800159a:	f00c facf 	bl	800db3c <HAL_UARTEx_DisableFifoMode>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80015a4:	f7ff fc70 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2400033c 	.word	0x2400033c
 80015b0:	40007800 	.word	0x40007800

080015b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0ba      	sub	sp, #232	; 0xe8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	22bc      	movs	r2, #188	; 0xbc
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f011 f951 	bl	801287c <memset>
  if(uartHandle->Instance==UART4)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a7e      	ldr	r2, [pc, #504]	; (80017d8 <HAL_UART_MspInit+0x224>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d14a      	bne.n	800167a <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ee:	f107 0318 	add.w	r3, r7, #24
 80015f2:	4618      	mov	r0, r3
 80015f4:	f006 f932 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015fe:	f7ff fc43 	bl	8000e88 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_UART_MspInit+0x228>)
 8001604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001608:	4a74      	ldr	r2, [pc, #464]	; (80017dc <HAL_UART_MspInit+0x228>)
 800160a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800160e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001612:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_UART_MspInit+0x228>)
 8001614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b6e      	ldr	r3, [pc, #440]	; (80017dc <HAL_UART_MspInit+0x228>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	4a6d      	ldr	r2, [pc, #436]	; (80017dc <HAL_UART_MspInit+0x228>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001630:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <HAL_UART_MspInit+0x228>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800163e:	2303      	movs	r3, #3
 8001640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001656:	2308      	movs	r3, #8
 8001658:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001660:	4619      	mov	r1, r3
 8001662:	485f      	ldr	r0, [pc, #380]	; (80017e0 <HAL_UART_MspInit+0x22c>)
 8001664:	f002 fd74 	bl	8004150 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2034      	movs	r0, #52	; 0x34
 800166e:	f000 fa8c 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001672:	2034      	movs	r0, #52	; 0x34
 8001674:	f000 faa3 	bl	8001bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001678:	e0a9      	b.n	80017ce <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==UART7)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a59      	ldr	r2, [pc, #356]	; (80017e4 <HAL_UART_MspInit+0x230>)
 8001680:	4293      	cmp	r3, r2
 8001682:	f040 80a4 	bne.w	80017ce <HAL_UART_MspInit+0x21a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001686:	2302      	movs	r3, #2
 8001688:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	4618      	mov	r0, r3
 8001696:	f006 f8e1 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80016a0:	f7ff fbf2 	bl	8000e88 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80016a4:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_UART_MspInit+0x228>)
 80016a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016aa:	4a4c      	ldr	r2, [pc, #304]	; (80017dc <HAL_UART_MspInit+0x228>)
 80016ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016b4:	4b49      	ldr	r3, [pc, #292]	; (80017dc <HAL_UART_MspInit+0x228>)
 80016b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_UART_MspInit+0x228>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c8:	4a44      	ldr	r2, [pc, #272]	; (80017dc <HAL_UART_MspInit+0x228>)
 80016ca:	f043 0320 	orr.w	r3, r3, #32
 80016ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_UART_MspInit+0x228>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e0:	23c0      	movs	r3, #192	; 0xc0
 80016e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80016f8:	2307      	movs	r3, #7
 80016fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001702:	4619      	mov	r1, r3
 8001704:	4838      	ldr	r0, [pc, #224]	; (80017e8 <HAL_UART_MspInit+0x234>)
 8001706:	f002 fd23 	bl	8004150 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_UART_MspInit+0x238>)
 800170c:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <HAL_UART_MspInit+0x23c>)
 800170e:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_UART_MspInit+0x238>)
 8001712:	224f      	movs	r2, #79	; 0x4f
 8001714:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_UART_MspInit+0x238>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_UART_MspInit+0x238>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_UART_MspInit+0x238>)
 8001724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001728:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_UART_MspInit+0x238>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001730:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <HAL_UART_MspInit+0x238>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_UART_MspInit+0x238>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_UART_MspInit+0x238>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_UART_MspInit+0x238>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001748:	4828      	ldr	r0, [pc, #160]	; (80017ec <HAL_UART_MspInit+0x238>)
 800174a:	f000 facf 	bl	8001cec <HAL_DMA_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001754:	f7ff fb98 	bl	8000e88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_UART_MspInit+0x238>)
 800175c:	67da      	str	r2, [r3, #124]	; 0x7c
 800175e:	4a23      	ldr	r2, [pc, #140]	; (80017ec <HAL_UART_MspInit+0x238>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_UART_MspInit+0x240>)
 8001766:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <HAL_UART_MspInit+0x244>)
 8001768:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_UART_MspInit+0x240>)
 800176c:	2250      	movs	r2, #80	; 0x50
 800176e:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_UART_MspInit+0x240>)
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_UART_MspInit+0x240>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_UART_MspInit+0x240>)
 800177e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001782:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_UART_MspInit+0x240>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_UART_MspInit+0x240>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_UART_MspInit+0x240>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_UART_MspInit+0x240>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_UART_MspInit+0x240>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <HAL_UART_MspInit+0x240>)
 80017a4:	f000 faa2 	bl	8001cec <HAL_DMA_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80017ae:	f7ff fb6b 	bl	8000e88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_UART_MspInit+0x240>)
 80017b6:	679a      	str	r2, [r3, #120]	; 0x78
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_UART_MspInit+0x240>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2052      	movs	r0, #82	; 0x52
 80017c4:	f000 f9e1 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80017c8:	2052      	movs	r0, #82	; 0x52
 80017ca:	f000 f9f8 	bl	8001bbe <HAL_NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	37e8      	adds	r7, #232	; 0xe8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40004c00 	.word	0x40004c00
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58020000 	.word	0x58020000
 80017e4:	40007800 	.word	0x40007800
 80017e8:	58021400 	.word	0x58021400
 80017ec:	24000444 	.word	0x24000444
 80017f0:	40020088 	.word	0x40020088
 80017f4:	240003cc 	.word	0x240003cc
 80017f8:	400200a0 	.word	0x400200a0

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001800:	f7fe ff42 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001806:	490d      	ldr	r1, [pc, #52]	; (800183c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800181c:	4c0a      	ldr	r4, [pc, #40]	; (8001848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182a:	f010 fff3 	bl	8012814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7ff f987 	bl	8000b40 <main>
  bx  lr
 8001832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001838:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800183c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001840:	080131e8 	.word	0x080131e8
  ldr r2, =_sbss
 8001844:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001848:	24003eac 	.word	0x24003eac

0800184c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC3_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001856:	2003      	movs	r0, #3
 8001858:	f000 f98c 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800185c:	f005 fe28 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_Init+0x68>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	4913      	ldr	r1, [pc, #76]	; (80018bc <HAL_Init+0x6c>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
 8001878:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_Init+0x68>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_Init+0x6c>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_Init+0x70>)
 8001892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_Init+0x74>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f814 	bl	80018c8 <HAL_InitTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e002      	b.n	80018b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018aa:	f7ff fb87 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	58024400 	.word	0x58024400
 80018bc:	08013150 	.word	0x08013150
 80018c0:	24000004 	.word	0x24000004
 80018c4:	24000000 	.word	0x24000000

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_InitTick+0x60>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e021      	b.n	8001920 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_InitTick+0x64>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_InitTick+0x60>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f971 	bl	8001bda <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 f93b 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x68>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2400000c 	.word	0x2400000c
 800192c:	24000000 	.word	0x24000000
 8001930:	24000008 	.word	0x24000008

08001934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	2400000c 	.word	0x2400000c
 8001958:	2400054c 	.word	0x2400054c

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2400054c 	.word	0x2400054c

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff ffee 	bl	800195c <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffde 	bl	800195c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2400000c 	.word	0x2400000c

080019bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetREVID+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0c1b      	lsrs	r3, r3, #16
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	5c001000 	.word	0x5c001000

080019d4 <__NVIC_SetPriorityGrouping>:
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <__NVIC_SetPriorityGrouping+0x40>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <__NVIC_SetPriorityGrouping+0x40>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00
 8001a18:	05fa0000 	.word	0x05fa0000

08001a1c <__NVIC_GetPriorityGrouping>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <__NVIC_EnableIRQ+0x38>)
 8001a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff29 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff40 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff90 	bl	8001ac8 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5f 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff33 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa4 	bl	8001b30 <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bf8:	f3bf 8f5f 	dmb	sy
}
 8001bfc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_MPU_Disable+0x28>)
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_MPU_Disable+0x28>)
 8001c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c08:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_MPU_Disable+0x2c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00
 8001c20:	e000ed90 	.word	0xe000ed90

08001c24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <HAL_MPU_Enable+0x38>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_MPU_Enable+0x3c>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_MPU_Enable+0x3c>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c42:	f3bf 8f4f 	dsb	sy
}
 8001c46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c48:	f3bf 8f6f 	isb	sy
}
 8001c4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed90 	.word	0xe000ed90
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	785a      	ldrb	r2, [r3, #1]
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_MPU_ConfigRegion+0x84>)
 8001c72:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d029      	beq.n	8001cd0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_MPU_ConfigRegion+0x84>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7b1b      	ldrb	r3, [r3, #12]
 8001c88:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7adb      	ldrb	r3, [r3, #11]
 8001c8e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7a9b      	ldrb	r3, [r3, #10]
 8001c96:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7b5b      	ldrb	r3, [r3, #13]
 8001c9e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ca0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7b9b      	ldrb	r3, [r3, #14]
 8001ca6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ca8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7bdb      	ldrb	r3, [r3, #15]
 8001cae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7a5b      	ldrb	r3, [r3, #9]
 8001cb6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7a1b      	ldrb	r3, [r3, #8]
 8001cbe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cc0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ccc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001cce:	e005      	b.n	8001cdc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_MPU_ConfigRegion+0x84>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_MPU_ConfigRegion+0x84>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed90 	.word	0xe000ed90

08001cec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff fe32 	bl	800195c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e316      	b.n	8002332 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a66      	ldr	r2, [pc, #408]	; (8001ea4 <HAL_DMA_Init+0x1b8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d04a      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a65      	ldr	r2, [pc, #404]	; (8001ea8 <HAL_DMA_Init+0x1bc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d045      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a63      	ldr	r2, [pc, #396]	; (8001eac <HAL_DMA_Init+0x1c0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d040      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a62      	ldr	r2, [pc, #392]	; (8001eb0 <HAL_DMA_Init+0x1c4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d03b      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a60      	ldr	r2, [pc, #384]	; (8001eb4 <HAL_DMA_Init+0x1c8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d036      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5f      	ldr	r2, [pc, #380]	; (8001eb8 <HAL_DMA_Init+0x1cc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d031      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5d      	ldr	r2, [pc, #372]	; (8001ebc <HAL_DMA_Init+0x1d0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02c      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5c      	ldr	r2, [pc, #368]	; (8001ec0 <HAL_DMA_Init+0x1d4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d027      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <HAL_DMA_Init+0x1d8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d022      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a59      	ldr	r2, [pc, #356]	; (8001ec8 <HAL_DMA_Init+0x1dc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d01d      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_DMA_Init+0x1e0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d018      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_DMA_Init+0x1e4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a54      	ldr	r2, [pc, #336]	; (8001ed4 <HAL_DMA_Init+0x1e8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00e      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a53      	ldr	r2, [pc, #332]	; (8001ed8 <HAL_DMA_Init+0x1ec>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a51      	ldr	r2, [pc, #324]	; (8001edc <HAL_DMA_Init+0x1f0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a50      	ldr	r2, [pc, #320]	; (8001ee0 <HAL_DMA_Init+0x1f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_DMA_Init+0xbc>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_DMA_Init+0xbe>
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 813b 	beq.w	8002026 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a37      	ldr	r2, [pc, #220]	; (8001ea4 <HAL_DMA_Init+0x1b8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d04a      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <HAL_DMA_Init+0x1bc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d045      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_DMA_Init+0x1c0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d040      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a33      	ldr	r2, [pc, #204]	; (8001eb0 <HAL_DMA_Init+0x1c4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d03b      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <HAL_DMA_Init+0x1c8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d036      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <HAL_DMA_Init+0x1cc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d031      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <HAL_DMA_Init+0x1d0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02c      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <HAL_DMA_Init+0x1d4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d027      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <HAL_DMA_Init+0x1d8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d022      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2a      	ldr	r2, [pc, #168]	; (8001ec8 <HAL_DMA_Init+0x1dc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d01d      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <HAL_DMA_Init+0x1e0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d018      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <HAL_DMA_Init+0x1e4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a25      	ldr	r2, [pc, #148]	; (8001ed4 <HAL_DMA_Init+0x1e8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00e      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a24      	ldr	r2, [pc, #144]	; (8001ed8 <HAL_DMA_Init+0x1ec>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <HAL_DMA_Init+0x1f0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a21      	ldr	r2, [pc, #132]	; (8001ee0 <HAL_DMA_Init+0x1f4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <HAL_DMA_Init+0x186>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_DMA_Init+0x196>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e82:	e02f      	b.n	8001ee4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e84:	f7ff fd6a 	bl	800195c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d928      	bls.n	8001ee4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e246      	b.n	8002332 <HAL_DMA_Init+0x646>
 8001ea4:	40020010 	.word	0x40020010
 8001ea8:	40020028 	.word	0x40020028
 8001eac:	40020040 	.word	0x40020040
 8001eb0:	40020058 	.word	0x40020058
 8001eb4:	40020070 	.word	0x40020070
 8001eb8:	40020088 	.word	0x40020088
 8001ebc:	400200a0 	.word	0x400200a0
 8001ec0:	400200b8 	.word	0x400200b8
 8001ec4:	40020410 	.word	0x40020410
 8001ec8:	40020428 	.word	0x40020428
 8001ecc:	40020440 	.word	0x40020440
 8001ed0:	40020458 	.word	0x40020458
 8001ed4:	40020470 	.word	0x40020470
 8001ed8:	40020488 	.word	0x40020488
 8001edc:	400204a0 	.word	0x400204a0
 8001ee0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1c8      	bne.n	8001e84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4b83      	ldr	r3, [pc, #524]	; (800210c <HAL_DMA_Init+0x420>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d107      	bne.n	8001f48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4313      	orrs	r3, r2
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f48:	4b71      	ldr	r3, [pc, #452]	; (8002110 <HAL_DMA_Init+0x424>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b71      	ldr	r3, [pc, #452]	; (8002114 <HAL_DMA_Init+0x428>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f54:	d328      	bcc.n	8001fa8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b28      	cmp	r3, #40	; 0x28
 8001f5c:	d903      	bls.n	8001f66 <HAL_DMA_Init+0x27a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b2e      	cmp	r3, #46	; 0x2e
 8001f64:	d917      	bls.n	8001f96 <HAL_DMA_Init+0x2aa>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b3e      	cmp	r3, #62	; 0x3e
 8001f6c:	d903      	bls.n	8001f76 <HAL_DMA_Init+0x28a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b42      	cmp	r3, #66	; 0x42
 8001f74:	d90f      	bls.n	8001f96 <HAL_DMA_Init+0x2aa>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b46      	cmp	r3, #70	; 0x46
 8001f7c:	d903      	bls.n	8001f86 <HAL_DMA_Init+0x29a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b48      	cmp	r3, #72	; 0x48
 8001f84:	d907      	bls.n	8001f96 <HAL_DMA_Init+0x2aa>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b4e      	cmp	r3, #78	; 0x4e
 8001f8c:	d905      	bls.n	8001f9a <HAL_DMA_Init+0x2ae>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b52      	cmp	r3, #82	; 0x52
 8001f94:	d801      	bhi.n	8001f9a <HAL_DMA_Init+0x2ae>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_DMA_Init+0x2b0>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f023 0307 	bic.w	r3, r3, #7
 8001fbe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d117      	bne.n	8002002 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00e      	beq.n	8002002 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f001 ff29 	bl	8003e3c <DMA_CheckFifoParam>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2240      	movs	r2, #64	; 0x40
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e197      	b.n	8002332 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f001 fe64 	bl	8003cd8 <DMA_CalcBaseAndBitshift>
 8002010:	4603      	mov	r3, r0
 8002012:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	223f      	movs	r2, #63	; 0x3f
 800201e:	409a      	lsls	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e0cd      	b.n	80021c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <HAL_DMA_Init+0x42c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a39      	ldr	r2, [pc, #228]	; (800211c <HAL_DMA_Init+0x430>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01d      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a38      	ldr	r2, [pc, #224]	; (8002120 <HAL_DMA_Init+0x434>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d018      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a36      	ldr	r2, [pc, #216]	; (8002124 <HAL_DMA_Init+0x438>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a35      	ldr	r2, [pc, #212]	; (8002128 <HAL_DMA_Init+0x43c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00e      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a33      	ldr	r2, [pc, #204]	; (800212c <HAL_DMA_Init+0x440>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d009      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a32      	ldr	r2, [pc, #200]	; (8002130 <HAL_DMA_Init+0x444>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_Init+0x38a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a30      	ldr	r2, [pc, #192]	; (8002134 <HAL_DMA_Init+0x448>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_DMA_Init+0x38e>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_DMA_Init+0x390>
 800207a:	2300      	movs	r3, #0
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8097 	beq.w	80021b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a24      	ldr	r2, [pc, #144]	; (8002118 <HAL_DMA_Init+0x42c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d021      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a22      	ldr	r2, [pc, #136]	; (800211c <HAL_DMA_Init+0x430>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01c      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_DMA_Init+0x434>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d017      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_DMA_Init+0x438>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d012      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_DMA_Init+0x43c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00d      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_DMA_Init+0x440>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d008      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <HAL_DMA_Init+0x444>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <HAL_DMA_Init+0x3e4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_DMA_Init+0x448>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_DMA_Init+0x44c>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b40      	cmp	r3, #64	; 0x40
 80020f8:	d020      	beq.n	800213c <HAL_DMA_Init+0x450>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b80      	cmp	r3, #128	; 0x80
 8002100:	d102      	bne.n	8002108 <HAL_DMA_Init+0x41c>
 8002102:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002106:	e01a      	b.n	800213e <HAL_DMA_Init+0x452>
 8002108:	2300      	movs	r3, #0
 800210a:	e018      	b.n	800213e <HAL_DMA_Init+0x452>
 800210c:	fe10803f 	.word	0xfe10803f
 8002110:	5c001000 	.word	0x5c001000
 8002114:	ffff0000 	.word	0xffff0000
 8002118:	58025408 	.word	0x58025408
 800211c:	5802541c 	.word	0x5802541c
 8002120:	58025430 	.word	0x58025430
 8002124:	58025444 	.word	0x58025444
 8002128:	58025458 	.word	0x58025458
 800212c:	5802546c 	.word	0x5802546c
 8002130:	58025480 	.word	0x58025480
 8002134:	58025494 	.word	0x58025494
 8002138:	fffe000f 	.word	0xfffe000f
 800213c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68d2      	ldr	r2, [r2, #12]
 8002142:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800214c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800215c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002164:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800216c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b6e      	ldr	r3, [pc, #440]	; (800233c <HAL_DMA_Init+0x650>)
 8002184:	4413      	add	r3, r2
 8002186:	4a6e      	ldr	r2, [pc, #440]	; (8002340 <HAL_DMA_Init+0x654>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f001 fd9f 	bl	8003cd8 <DMA_CalcBaseAndBitshift>
 800219a:	4603      	mov	r3, r0
 800219c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2201      	movs	r2, #1
 80021a8:	409a      	lsls	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	e008      	b.n	80021c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0b7      	b.n	8002332 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a5f      	ldr	r2, [pc, #380]	; (8002344 <HAL_DMA_Init+0x658>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d072      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a5d      	ldr	r2, [pc, #372]	; (8002348 <HAL_DMA_Init+0x65c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d06d      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a5c      	ldr	r2, [pc, #368]	; (800234c <HAL_DMA_Init+0x660>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d068      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a5a      	ldr	r2, [pc, #360]	; (8002350 <HAL_DMA_Init+0x664>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d063      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a59      	ldr	r2, [pc, #356]	; (8002354 <HAL_DMA_Init+0x668>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d05e      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a57      	ldr	r2, [pc, #348]	; (8002358 <HAL_DMA_Init+0x66c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d059      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a56      	ldr	r2, [pc, #344]	; (800235c <HAL_DMA_Init+0x670>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d054      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a54      	ldr	r2, [pc, #336]	; (8002360 <HAL_DMA_Init+0x674>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d04f      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a53      	ldr	r2, [pc, #332]	; (8002364 <HAL_DMA_Init+0x678>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d04a      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a51      	ldr	r2, [pc, #324]	; (8002368 <HAL_DMA_Init+0x67c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d045      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a50      	ldr	r2, [pc, #320]	; (800236c <HAL_DMA_Init+0x680>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d040      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a4e      	ldr	r2, [pc, #312]	; (8002370 <HAL_DMA_Init+0x684>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d03b      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a4d      	ldr	r2, [pc, #308]	; (8002374 <HAL_DMA_Init+0x688>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d036      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a4b      	ldr	r2, [pc, #300]	; (8002378 <HAL_DMA_Init+0x68c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d031      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a4a      	ldr	r2, [pc, #296]	; (800237c <HAL_DMA_Init+0x690>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d02c      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <HAL_DMA_Init+0x694>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d027      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a47      	ldr	r2, [pc, #284]	; (8002384 <HAL_DMA_Init+0x698>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d022      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a45      	ldr	r2, [pc, #276]	; (8002388 <HAL_DMA_Init+0x69c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01d      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a44      	ldr	r2, [pc, #272]	; (800238c <HAL_DMA_Init+0x6a0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d018      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a42      	ldr	r2, [pc, #264]	; (8002390 <HAL_DMA_Init+0x6a4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a41      	ldr	r2, [pc, #260]	; (8002394 <HAL_DMA_Init+0x6a8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00e      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a3f      	ldr	r2, [pc, #252]	; (8002398 <HAL_DMA_Init+0x6ac>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d009      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a3e      	ldr	r2, [pc, #248]	; (800239c <HAL_DMA_Init+0x6b0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d004      	beq.n	80022b2 <HAL_DMA_Init+0x5c6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a3c      	ldr	r2, [pc, #240]	; (80023a0 <HAL_DMA_Init+0x6b4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_DMA_Init+0x5ca>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_DMA_Init+0x5cc>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d032      	beq.n	8002322 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f001 fe39 	bl	8003f34 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b80      	cmp	r3, #128	; 0x80
 80022c8:	d102      	bne.n	80022d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_DMA_Init+0x624>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d80c      	bhi.n	8002310 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f001 feb6 	bl	8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	e008      	b.n	8002322 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	a7fdabf8 	.word	0xa7fdabf8
 8002340:	cccccccd 	.word	0xcccccccd
 8002344:	40020010 	.word	0x40020010
 8002348:	40020028 	.word	0x40020028
 800234c:	40020040 	.word	0x40020040
 8002350:	40020058 	.word	0x40020058
 8002354:	40020070 	.word	0x40020070
 8002358:	40020088 	.word	0x40020088
 800235c:	400200a0 	.word	0x400200a0
 8002360:	400200b8 	.word	0x400200b8
 8002364:	40020410 	.word	0x40020410
 8002368:	40020428 	.word	0x40020428
 800236c:	40020440 	.word	0x40020440
 8002370:	40020458 	.word	0x40020458
 8002374:	40020470 	.word	0x40020470
 8002378:	40020488 	.word	0x40020488
 800237c:	400204a0 	.word	0x400204a0
 8002380:	400204b8 	.word	0x400204b8
 8002384:	58025408 	.word	0x58025408
 8002388:	5802541c 	.word	0x5802541c
 800238c:	58025430 	.word	0x58025430
 8002390:	58025444 	.word	0x58025444
 8002394:	58025458 	.word	0x58025458
 8002398:	5802546c 	.word	0x5802546c
 800239c:	58025480 	.word	0x58025480
 80023a0:	58025494 	.word	0x58025494

080023a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fad6 	bl	800195c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e2dc      	b.n	8002976 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d008      	beq.n	80023da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e2cd      	b.n	8002976 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a76      	ldr	r2, [pc, #472]	; (80025b8 <HAL_DMA_Abort+0x214>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04a      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a74      	ldr	r2, [pc, #464]	; (80025bc <HAL_DMA_Abort+0x218>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d045      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a73      	ldr	r2, [pc, #460]	; (80025c0 <HAL_DMA_Abort+0x21c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d040      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a71      	ldr	r2, [pc, #452]	; (80025c4 <HAL_DMA_Abort+0x220>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03b      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a70      	ldr	r2, [pc, #448]	; (80025c8 <HAL_DMA_Abort+0x224>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d036      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6e      	ldr	r2, [pc, #440]	; (80025cc <HAL_DMA_Abort+0x228>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d031      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6d      	ldr	r2, [pc, #436]	; (80025d0 <HAL_DMA_Abort+0x22c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6b      	ldr	r2, [pc, #428]	; (80025d4 <HAL_DMA_Abort+0x230>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d027      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6a      	ldr	r2, [pc, #424]	; (80025d8 <HAL_DMA_Abort+0x234>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a68      	ldr	r2, [pc, #416]	; (80025dc <HAL_DMA_Abort+0x238>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a67      	ldr	r2, [pc, #412]	; (80025e0 <HAL_DMA_Abort+0x23c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <HAL_DMA_Abort+0x240>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a64      	ldr	r2, [pc, #400]	; (80025e8 <HAL_DMA_Abort+0x244>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a62      	ldr	r2, [pc, #392]	; (80025ec <HAL_DMA_Abort+0x248>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a61      	ldr	r2, [pc, #388]	; (80025f0 <HAL_DMA_Abort+0x24c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Abort+0xd6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a5f      	ldr	r2, [pc, #380]	; (80025f4 <HAL_DMA_Abort+0x250>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_DMA_Abort+0xda>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_DMA_Abort+0xdc>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 021e 	bic.w	r2, r2, #30
 8002492:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	e00a      	b.n	80024c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 020e 	bic.w	r2, r2, #14
 80024ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <HAL_DMA_Abort+0x214>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d072      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a3a      	ldr	r2, [pc, #232]	; (80025bc <HAL_DMA_Abort+0x218>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d06d      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a39      	ldr	r2, [pc, #228]	; (80025c0 <HAL_DMA_Abort+0x21c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d068      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a37      	ldr	r2, [pc, #220]	; (80025c4 <HAL_DMA_Abort+0x220>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d063      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a36      	ldr	r2, [pc, #216]	; (80025c8 <HAL_DMA_Abort+0x224>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d05e      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a34      	ldr	r2, [pc, #208]	; (80025cc <HAL_DMA_Abort+0x228>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d059      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a33      	ldr	r2, [pc, #204]	; (80025d0 <HAL_DMA_Abort+0x22c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d054      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a31      	ldr	r2, [pc, #196]	; (80025d4 <HAL_DMA_Abort+0x230>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04f      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a30      	ldr	r2, [pc, #192]	; (80025d8 <HAL_DMA_Abort+0x234>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04a      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2e      	ldr	r2, [pc, #184]	; (80025dc <HAL_DMA_Abort+0x238>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d045      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <HAL_DMA_Abort+0x23c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d040      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <HAL_DMA_Abort+0x240>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d03b      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a2a      	ldr	r2, [pc, #168]	; (80025e8 <HAL_DMA_Abort+0x244>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d036      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a28      	ldr	r2, [pc, #160]	; (80025ec <HAL_DMA_Abort+0x248>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <HAL_DMA_Abort+0x24c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d02c      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <HAL_DMA_Abort+0x250>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d027      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <HAL_DMA_Abort+0x254>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a22      	ldr	r2, [pc, #136]	; (80025fc <HAL_DMA_Abort+0x258>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01d      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	; (8002600 <HAL_DMA_Abort+0x25c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_DMA_Abort+0x260>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_DMA_Abort+0x264>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_DMA_Abort+0x268>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_DMA_Abort+0x26c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_DMA_Abort+0x20e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_DMA_Abort+0x270>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d132      	bne.n	8002618 <HAL_DMA_Abort+0x274>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e031      	b.n	800261a <HAL_DMA_Abort+0x276>
 80025b6:	bf00      	nop
 80025b8:	40020010 	.word	0x40020010
 80025bc:	40020028 	.word	0x40020028
 80025c0:	40020040 	.word	0x40020040
 80025c4:	40020058 	.word	0x40020058
 80025c8:	40020070 	.word	0x40020070
 80025cc:	40020088 	.word	0x40020088
 80025d0:	400200a0 	.word	0x400200a0
 80025d4:	400200b8 	.word	0x400200b8
 80025d8:	40020410 	.word	0x40020410
 80025dc:	40020428 	.word	0x40020428
 80025e0:	40020440 	.word	0x40020440
 80025e4:	40020458 	.word	0x40020458
 80025e8:	40020470 	.word	0x40020470
 80025ec:	40020488 	.word	0x40020488
 80025f0:	400204a0 	.word	0x400204a0
 80025f4:	400204b8 	.word	0x400204b8
 80025f8:	58025408 	.word	0x58025408
 80025fc:	5802541c 	.word	0x5802541c
 8002600:	58025430 	.word	0x58025430
 8002604:	58025444 	.word	0x58025444
 8002608:	58025458 	.word	0x58025458
 800260c:	5802546c 	.word	0x5802546c
 8002610:	58025480 	.word	0x58025480
 8002614:	58025494 	.word	0x58025494
 8002618:	2300      	movs	r3, #0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800262c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6d      	ldr	r2, [pc, #436]	; (80027e8 <HAL_DMA_Abort+0x444>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d04a      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a6b      	ldr	r2, [pc, #428]	; (80027ec <HAL_DMA_Abort+0x448>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d045      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6a      	ldr	r2, [pc, #424]	; (80027f0 <HAL_DMA_Abort+0x44c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d040      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a68      	ldr	r2, [pc, #416]	; (80027f4 <HAL_DMA_Abort+0x450>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d03b      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a67      	ldr	r2, [pc, #412]	; (80027f8 <HAL_DMA_Abort+0x454>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d036      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a65      	ldr	r2, [pc, #404]	; (80027fc <HAL_DMA_Abort+0x458>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d031      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a64      	ldr	r2, [pc, #400]	; (8002800 <HAL_DMA_Abort+0x45c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d02c      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a62      	ldr	r2, [pc, #392]	; (8002804 <HAL_DMA_Abort+0x460>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d027      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a61      	ldr	r2, [pc, #388]	; (8002808 <HAL_DMA_Abort+0x464>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d022      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a5f      	ldr	r2, [pc, #380]	; (800280c <HAL_DMA_Abort+0x468>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01d      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5e      	ldr	r2, [pc, #376]	; (8002810 <HAL_DMA_Abort+0x46c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d018      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a5c      	ldr	r2, [pc, #368]	; (8002814 <HAL_DMA_Abort+0x470>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a5b      	ldr	r2, [pc, #364]	; (8002818 <HAL_DMA_Abort+0x474>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00e      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a59      	ldr	r2, [pc, #356]	; (800281c <HAL_DMA_Abort+0x478>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d009      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_DMA_Abort+0x47c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d004      	beq.n	80026ce <HAL_DMA_Abort+0x32a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a56      	ldr	r2, [pc, #344]	; (8002824 <HAL_DMA_Abort+0x480>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d108      	bne.n	80026e0 <HAL_DMA_Abort+0x33c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e007      	b.n	80026f0 <HAL_DMA_Abort+0x34c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026f0:	e013      	b.n	800271a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026f2:	f7ff f933 	bl	800195c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d90c      	bls.n	800271a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e12d      	b.n	8002976 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1e5      	bne.n	80026f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2f      	ldr	r2, [pc, #188]	; (80027e8 <HAL_DMA_Abort+0x444>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d04a      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2d      	ldr	r2, [pc, #180]	; (80027ec <HAL_DMA_Abort+0x448>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d045      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2c      	ldr	r2, [pc, #176]	; (80027f0 <HAL_DMA_Abort+0x44c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d040      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a2a      	ldr	r2, [pc, #168]	; (80027f4 <HAL_DMA_Abort+0x450>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d03b      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <HAL_DMA_Abort+0x454>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d036      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a27      	ldr	r2, [pc, #156]	; (80027fc <HAL_DMA_Abort+0x458>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_DMA_Abort+0x45c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d02c      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a24      	ldr	r2, [pc, #144]	; (8002804 <HAL_DMA_Abort+0x460>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d027      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a23      	ldr	r2, [pc, #140]	; (8002808 <HAL_DMA_Abort+0x464>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d022      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a21      	ldr	r2, [pc, #132]	; (800280c <HAL_DMA_Abort+0x468>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01d      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a20      	ldr	r2, [pc, #128]	; (8002810 <HAL_DMA_Abort+0x46c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d018      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <HAL_DMA_Abort+0x470>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_DMA_Abort+0x474>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1b      	ldr	r2, [pc, #108]	; (800281c <HAL_DMA_Abort+0x478>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <HAL_DMA_Abort+0x47c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_DMA_Abort+0x422>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_DMA_Abort+0x480>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_DMA_Abort+0x426>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_DMA_Abort+0x428>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02b      	beq.n	8002828 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	223f      	movs	r2, #63	; 0x3f
 80027e0:	409a      	lsls	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	e02a      	b.n	800283e <HAL_DMA_Abort+0x49a>
 80027e8:	40020010 	.word	0x40020010
 80027ec:	40020028 	.word	0x40020028
 80027f0:	40020040 	.word	0x40020040
 80027f4:	40020058 	.word	0x40020058
 80027f8:	40020070 	.word	0x40020070
 80027fc:	40020088 	.word	0x40020088
 8002800:	400200a0 	.word	0x400200a0
 8002804:	400200b8 	.word	0x400200b8
 8002808:	40020410 	.word	0x40020410
 800280c:	40020428 	.word	0x40020428
 8002810:	40020440 	.word	0x40020440
 8002814:	40020458 	.word	0x40020458
 8002818:	40020470 	.word	0x40020470
 800281c:	40020488 	.word	0x40020488
 8002820:	400204a0 	.word	0x400204a0
 8002824:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2201      	movs	r2, #1
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a4f      	ldr	r2, [pc, #316]	; (8002980 <HAL_DMA_Abort+0x5dc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d072      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <HAL_DMA_Abort+0x5e0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d06d      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a4c      	ldr	r2, [pc, #304]	; (8002988 <HAL_DMA_Abort+0x5e4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d068      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_DMA_Abort+0x5e8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d063      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a49      	ldr	r2, [pc, #292]	; (8002990 <HAL_DMA_Abort+0x5ec>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d05e      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a47      	ldr	r2, [pc, #284]	; (8002994 <HAL_DMA_Abort+0x5f0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d059      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a46      	ldr	r2, [pc, #280]	; (8002998 <HAL_DMA_Abort+0x5f4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d054      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a44      	ldr	r2, [pc, #272]	; (800299c <HAL_DMA_Abort+0x5f8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04f      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a43      	ldr	r2, [pc, #268]	; (80029a0 <HAL_DMA_Abort+0x5fc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04a      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <HAL_DMA_Abort+0x600>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d045      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <HAL_DMA_Abort+0x604>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d040      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <HAL_DMA_Abort+0x608>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d03b      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a3d      	ldr	r2, [pc, #244]	; (80029b0 <HAL_DMA_Abort+0x60c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d036      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a3b      	ldr	r2, [pc, #236]	; (80029b4 <HAL_DMA_Abort+0x610>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d031      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a3a      	ldr	r2, [pc, #232]	; (80029b8 <HAL_DMA_Abort+0x614>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d02c      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a38      	ldr	r2, [pc, #224]	; (80029bc <HAL_DMA_Abort+0x618>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d027      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a37      	ldr	r2, [pc, #220]	; (80029c0 <HAL_DMA_Abort+0x61c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <HAL_DMA_Abort+0x620>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <HAL_DMA_Abort+0x624>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a32      	ldr	r2, [pc, #200]	; (80029cc <HAL_DMA_Abort+0x628>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_DMA_Abort+0x62c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <HAL_DMA_Abort+0x630>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2e      	ldr	r2, [pc, #184]	; (80029d8 <HAL_DMA_Abort+0x634>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_DMA_Abort+0x58a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <HAL_DMA_Abort+0x638>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_DMA_Abort+0x58e>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_DMA_Abort+0x590>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002940:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00c      	beq.n	8002964 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002958:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002962:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40020010 	.word	0x40020010
 8002984:	40020028 	.word	0x40020028
 8002988:	40020040 	.word	0x40020040
 800298c:	40020058 	.word	0x40020058
 8002990:	40020070 	.word	0x40020070
 8002994:	40020088 	.word	0x40020088
 8002998:	400200a0 	.word	0x400200a0
 800299c:	400200b8 	.word	0x400200b8
 80029a0:	40020410 	.word	0x40020410
 80029a4:	40020428 	.word	0x40020428
 80029a8:	40020440 	.word	0x40020440
 80029ac:	40020458 	.word	0x40020458
 80029b0:	40020470 	.word	0x40020470
 80029b4:	40020488 	.word	0x40020488
 80029b8:	400204a0 	.word	0x400204a0
 80029bc:	400204b8 	.word	0x400204b8
 80029c0:	58025408 	.word	0x58025408
 80029c4:	5802541c 	.word	0x5802541c
 80029c8:	58025430 	.word	0x58025430
 80029cc:	58025444 	.word	0x58025444
 80029d0:	58025458 	.word	0x58025458
 80029d4:	5802546c 	.word	0x5802546c
 80029d8:	58025480 	.word	0x58025480
 80029dc:	58025494 	.word	0x58025494

080029e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e205      	b.n	8002dfe <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d004      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e1fa      	b.n	8002dfe <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a8c      	ldr	r2, [pc, #560]	; (8002c40 <HAL_DMA_Abort_IT+0x260>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d04a      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a8b      	ldr	r2, [pc, #556]	; (8002c44 <HAL_DMA_Abort_IT+0x264>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d045      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a89      	ldr	r2, [pc, #548]	; (8002c48 <HAL_DMA_Abort_IT+0x268>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d040      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a88      	ldr	r2, [pc, #544]	; (8002c4c <HAL_DMA_Abort_IT+0x26c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d03b      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a86      	ldr	r2, [pc, #536]	; (8002c50 <HAL_DMA_Abort_IT+0x270>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d036      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a85      	ldr	r2, [pc, #532]	; (8002c54 <HAL_DMA_Abort_IT+0x274>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a83      	ldr	r2, [pc, #524]	; (8002c58 <HAL_DMA_Abort_IT+0x278>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02c      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a82      	ldr	r2, [pc, #520]	; (8002c5c <HAL_DMA_Abort_IT+0x27c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d027      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a80      	ldr	r2, [pc, #512]	; (8002c60 <HAL_DMA_Abort_IT+0x280>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7f      	ldr	r2, [pc, #508]	; (8002c64 <HAL_DMA_Abort_IT+0x284>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a7d      	ldr	r2, [pc, #500]	; (8002c68 <HAL_DMA_Abort_IT+0x288>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7c      	ldr	r2, [pc, #496]	; (8002c6c <HAL_DMA_Abort_IT+0x28c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a7a      	ldr	r2, [pc, #488]	; (8002c70 <HAL_DMA_Abort_IT+0x290>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <HAL_DMA_Abort_IT+0x294>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a77      	ldr	r2, [pc, #476]	; (8002c78 <HAL_DMA_Abort_IT+0x298>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0xc8>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a76      	ldr	r2, [pc, #472]	; (8002c7c <HAL_DMA_Abort_IT+0x29c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_DMA_Abort_IT+0xcc>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_DMA_Abort_IT+0xce>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d065      	beq.n	8002b7e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a60      	ldr	r2, [pc, #384]	; (8002c40 <HAL_DMA_Abort_IT+0x260>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d04a      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a5e      	ldr	r2, [pc, #376]	; (8002c44 <HAL_DMA_Abort_IT+0x264>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d045      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a5d      	ldr	r2, [pc, #372]	; (8002c48 <HAL_DMA_Abort_IT+0x268>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d040      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a5b      	ldr	r2, [pc, #364]	; (8002c4c <HAL_DMA_Abort_IT+0x26c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d03b      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a5a      	ldr	r2, [pc, #360]	; (8002c50 <HAL_DMA_Abort_IT+0x270>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d036      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <HAL_DMA_Abort_IT+0x274>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d031      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a57      	ldr	r2, [pc, #348]	; (8002c58 <HAL_DMA_Abort_IT+0x278>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d02c      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a55      	ldr	r2, [pc, #340]	; (8002c5c <HAL_DMA_Abort_IT+0x27c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d027      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <HAL_DMA_Abort_IT+0x280>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_DMA_Abort_IT+0x284>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_DMA_Abort_IT+0x288>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d018      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a4f      	ldr	r2, [pc, #316]	; (8002c6c <HAL_DMA_Abort_IT+0x28c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a4e      	ldr	r2, [pc, #312]	; (8002c70 <HAL_DMA_Abort_IT+0x290>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_DMA_Abort_IT+0x294>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a4b      	ldr	r2, [pc, #300]	; (8002c78 <HAL_DMA_Abort_IT+0x298>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x17a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a49      	ldr	r2, [pc, #292]	; (8002c7c <HAL_DMA_Abort_IT+0x29c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d108      	bne.n	8002b6c <HAL_DMA_Abort_IT+0x18c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e147      	b.n	8002dfc <HAL_DMA_Abort_IT+0x41c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e13e      	b.n	8002dfc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 020e 	bic.w	r2, r2, #14
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <HAL_DMA_Abort_IT+0x260>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d04a      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <HAL_DMA_Abort_IT+0x264>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d045      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <HAL_DMA_Abort_IT+0x268>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d040      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <HAL_DMA_Abort_IT+0x26c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d03b      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <HAL_DMA_Abort_IT+0x270>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d036      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <HAL_DMA_Abort_IT+0x274>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_DMA_Abort_IT+0x278>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d02c      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <HAL_DMA_Abort_IT+0x27c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d027      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <HAL_DMA_Abort_IT+0x280>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_DMA_Abort_IT+0x284>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01d      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_DMA_Abort_IT+0x288>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d018      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <HAL_DMA_Abort_IT+0x28c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_DMA_Abort_IT+0x290>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_DMA_Abort_IT+0x294>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_DMA_Abort_IT+0x298>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x24e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <HAL_DMA_Abort_IT+0x29c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d128      	bne.n	8002c80 <HAL_DMA_Abort_IT+0x2a0>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e027      	b.n	8002c90 <HAL_DMA_Abort_IT+0x2b0>
 8002c40:	40020010 	.word	0x40020010
 8002c44:	40020028 	.word	0x40020028
 8002c48:	40020040 	.word	0x40020040
 8002c4c:	40020058 	.word	0x40020058
 8002c50:	40020070 	.word	0x40020070
 8002c54:	40020088 	.word	0x40020088
 8002c58:	400200a0 	.word	0x400200a0
 8002c5c:	400200b8 	.word	0x400200b8
 8002c60:	40020410 	.word	0x40020410
 8002c64:	40020428 	.word	0x40020428
 8002c68:	40020440 	.word	0x40020440
 8002c6c:	40020458 	.word	0x40020458
 8002c70:	40020470 	.word	0x40020470
 8002c74:	40020488 	.word	0x40020488
 8002c78:	400204a0 	.word	0x400204a0
 8002c7c:	400204b8 	.word	0x400204b8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a5c      	ldr	r2, [pc, #368]	; (8002e08 <HAL_DMA_Abort_IT+0x428>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d072      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5b      	ldr	r2, [pc, #364]	; (8002e0c <HAL_DMA_Abort_IT+0x42c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d06d      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a59      	ldr	r2, [pc, #356]	; (8002e10 <HAL_DMA_Abort_IT+0x430>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d068      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a58      	ldr	r2, [pc, #352]	; (8002e14 <HAL_DMA_Abort_IT+0x434>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d063      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a56      	ldr	r2, [pc, #344]	; (8002e18 <HAL_DMA_Abort_IT+0x438>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d05e      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a55      	ldr	r2, [pc, #340]	; (8002e1c <HAL_DMA_Abort_IT+0x43c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d059      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a53      	ldr	r2, [pc, #332]	; (8002e20 <HAL_DMA_Abort_IT+0x440>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d054      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a52      	ldr	r2, [pc, #328]	; (8002e24 <HAL_DMA_Abort_IT+0x444>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d04f      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a50      	ldr	r2, [pc, #320]	; (8002e28 <HAL_DMA_Abort_IT+0x448>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a4f      	ldr	r2, [pc, #316]	; (8002e2c <HAL_DMA_Abort_IT+0x44c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d045      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a4d      	ldr	r2, [pc, #308]	; (8002e30 <HAL_DMA_Abort_IT+0x450>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a4c      	ldr	r2, [pc, #304]	; (8002e34 <HAL_DMA_Abort_IT+0x454>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d03b      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a4a      	ldr	r2, [pc, #296]	; (8002e38 <HAL_DMA_Abort_IT+0x458>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a49      	ldr	r2, [pc, #292]	; (8002e3c <HAL_DMA_Abort_IT+0x45c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a47      	ldr	r2, [pc, #284]	; (8002e40 <HAL_DMA_Abort_IT+0x460>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a46      	ldr	r2, [pc, #280]	; (8002e44 <HAL_DMA_Abort_IT+0x464>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a44      	ldr	r2, [pc, #272]	; (8002e48 <HAL_DMA_Abort_IT+0x468>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <HAL_DMA_Abort_IT+0x46c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a41      	ldr	r2, [pc, #260]	; (8002e50 <HAL_DMA_Abort_IT+0x470>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <HAL_DMA_Abort_IT+0x474>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3e      	ldr	r2, [pc, #248]	; (8002e58 <HAL_DMA_Abort_IT+0x478>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <HAL_DMA_Abort_IT+0x47c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a3b      	ldr	r2, [pc, #236]	; (8002e60 <HAL_DMA_Abort_IT+0x480>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3a0>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3a      	ldr	r2, [pc, #232]	; (8002e64 <HAL_DMA_Abort_IT+0x484>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Abort_IT+0x3a4>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_DMA_Abort_IT+0x3a6>
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d028      	beq.n	8002ddc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2201      	movs	r2, #1
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002db8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40020010 	.word	0x40020010
 8002e0c:	40020028 	.word	0x40020028
 8002e10:	40020040 	.word	0x40020040
 8002e14:	40020058 	.word	0x40020058
 8002e18:	40020070 	.word	0x40020070
 8002e1c:	40020088 	.word	0x40020088
 8002e20:	400200a0 	.word	0x400200a0
 8002e24:	400200b8 	.word	0x400200b8
 8002e28:	40020410 	.word	0x40020410
 8002e2c:	40020428 	.word	0x40020428
 8002e30:	40020440 	.word	0x40020440
 8002e34:	40020458 	.word	0x40020458
 8002e38:	40020470 	.word	0x40020470
 8002e3c:	40020488 	.word	0x40020488
 8002e40:	400204a0 	.word	0x400204a0
 8002e44:	400204b8 	.word	0x400204b8
 8002e48:	58025408 	.word	0x58025408
 8002e4c:	5802541c 	.word	0x5802541c
 8002e50:	58025430 	.word	0x58025430
 8002e54:	58025444 	.word	0x58025444
 8002e58:	58025458 	.word	0x58025458
 8002e5c:	5802546c 	.word	0x5802546c
 8002e60:	58025480 	.word	0x58025480
 8002e64:	58025494 	.word	0x58025494

08002e68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e74:	4b67      	ldr	r3, [pc, #412]	; (8003014 <HAL_DMA_IRQHandler+0x1ac>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a67      	ldr	r2, [pc, #412]	; (8003018 <HAL_DMA_IRQHandler+0x1b0>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0a9b      	lsrs	r3, r3, #10
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a5f      	ldr	r2, [pc, #380]	; (800301c <HAL_DMA_IRQHandler+0x1b4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d04a      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5d      	ldr	r2, [pc, #372]	; (8003020 <HAL_DMA_IRQHandler+0x1b8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d045      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a5c      	ldr	r2, [pc, #368]	; (8003024 <HAL_DMA_IRQHandler+0x1bc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d040      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a5a      	ldr	r2, [pc, #360]	; (8003028 <HAL_DMA_IRQHandler+0x1c0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d03b      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a59      	ldr	r2, [pc, #356]	; (800302c <HAL_DMA_IRQHandler+0x1c4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d036      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a57      	ldr	r2, [pc, #348]	; (8003030 <HAL_DMA_IRQHandler+0x1c8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d031      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a56      	ldr	r2, [pc, #344]	; (8003034 <HAL_DMA_IRQHandler+0x1cc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d02c      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a54      	ldr	r2, [pc, #336]	; (8003038 <HAL_DMA_IRQHandler+0x1d0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d027      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a53      	ldr	r2, [pc, #332]	; (800303c <HAL_DMA_IRQHandler+0x1d4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d022      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a51      	ldr	r2, [pc, #324]	; (8003040 <HAL_DMA_IRQHandler+0x1d8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01d      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a50      	ldr	r2, [pc, #320]	; (8003044 <HAL_DMA_IRQHandler+0x1dc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d018      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a4e      	ldr	r2, [pc, #312]	; (8003048 <HAL_DMA_IRQHandler+0x1e0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a4d      	ldr	r2, [pc, #308]	; (800304c <HAL_DMA_IRQHandler+0x1e4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a4b      	ldr	r2, [pc, #300]	; (8003050 <HAL_DMA_IRQHandler+0x1e8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d009      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a4a      	ldr	r2, [pc, #296]	; (8003054 <HAL_DMA_IRQHandler+0x1ec>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xd2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a48      	ldr	r2, [pc, #288]	; (8003058 <HAL_DMA_IRQHandler+0x1f0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_DMA_IRQHandler+0xd6>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_DMA_IRQHandler+0xd8>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 842b 	beq.w	800379c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	2208      	movs	r2, #8
 8002f50:	409a      	lsls	r2, r3
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80a2 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2e      	ldr	r2, [pc, #184]	; (800301c <HAL_DMA_IRQHandler+0x1b4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d04a      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <HAL_DMA_IRQHandler+0x1b8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d045      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <HAL_DMA_IRQHandler+0x1bc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d040      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <HAL_DMA_IRQHandler+0x1c0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d03b      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a28      	ldr	r2, [pc, #160]	; (800302c <HAL_DMA_IRQHandler+0x1c4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d036      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a27      	ldr	r2, [pc, #156]	; (8003030 <HAL_DMA_IRQHandler+0x1c8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d031      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a25      	ldr	r2, [pc, #148]	; (8003034 <HAL_DMA_IRQHandler+0x1cc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02c      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a24      	ldr	r2, [pc, #144]	; (8003038 <HAL_DMA_IRQHandler+0x1d0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d027      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <HAL_DMA_IRQHandler+0x1d4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d022      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_DMA_IRQHandler+0x1d8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01d      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <HAL_DMA_IRQHandler+0x1dc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d018      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <HAL_DMA_IRQHandler+0x1e0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_DMA_IRQHandler+0x1e4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00e      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <HAL_DMA_IRQHandler+0x1e8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a19      	ldr	r2, [pc, #100]	; (8003054 <HAL_DMA_IRQHandler+0x1ec>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x194>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a18      	ldr	r2, [pc, #96]	; (8003058 <HAL_DMA_IRQHandler+0x1f0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d12f      	bne.n	800305c <HAL_DMA_IRQHandler+0x1f4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	e02e      	b.n	8003070 <HAL_DMA_IRQHandler+0x208>
 8003012:	bf00      	nop
 8003014:	24000000 	.word	0x24000000
 8003018:	1b4e81b5 	.word	0x1b4e81b5
 800301c:	40020010 	.word	0x40020010
 8003020:	40020028 	.word	0x40020028
 8003024:	40020040 	.word	0x40020040
 8003028:	40020058 	.word	0x40020058
 800302c:	40020070 	.word	0x40020070
 8003030:	40020088 	.word	0x40020088
 8003034:	400200a0 	.word	0x400200a0
 8003038:	400200b8 	.word	0x400200b8
 800303c:	40020410 	.word	0x40020410
 8003040:	40020428 	.word	0x40020428
 8003044:	40020440 	.word	0x40020440
 8003048:	40020458 	.word	0x40020458
 800304c:	40020470 	.word	0x40020470
 8003050:	40020488 	.word	0x40020488
 8003054:	400204a0 	.word	0x400204a0
 8003058:	400204b8 	.word	0x400204b8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d015      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2208      	movs	r2, #8
 800308e:	409a      	lsls	r2, r3
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d06e      	beq.n	8003194 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a69      	ldr	r2, [pc, #420]	; (8003260 <HAL_DMA_IRQHandler+0x3f8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d04a      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a67      	ldr	r2, [pc, #412]	; (8003264 <HAL_DMA_IRQHandler+0x3fc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d045      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a66      	ldr	r2, [pc, #408]	; (8003268 <HAL_DMA_IRQHandler+0x400>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d040      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a64      	ldr	r2, [pc, #400]	; (800326c <HAL_DMA_IRQHandler+0x404>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d03b      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a63      	ldr	r2, [pc, #396]	; (8003270 <HAL_DMA_IRQHandler+0x408>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d036      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a61      	ldr	r2, [pc, #388]	; (8003274 <HAL_DMA_IRQHandler+0x40c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d031      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a60      	ldr	r2, [pc, #384]	; (8003278 <HAL_DMA_IRQHandler+0x410>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d02c      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5e      	ldr	r2, [pc, #376]	; (800327c <HAL_DMA_IRQHandler+0x414>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d027      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5d      	ldr	r2, [pc, #372]	; (8003280 <HAL_DMA_IRQHandler+0x418>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d022      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a5b      	ldr	r2, [pc, #364]	; (8003284 <HAL_DMA_IRQHandler+0x41c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01d      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a5a      	ldr	r2, [pc, #360]	; (8003288 <HAL_DMA_IRQHandler+0x420>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d018      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_DMA_IRQHandler+0x424>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a57      	ldr	r2, [pc, #348]	; (8003290 <HAL_DMA_IRQHandler+0x428>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a55      	ldr	r2, [pc, #340]	; (8003294 <HAL_DMA_IRQHandler+0x42c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a54      	ldr	r2, [pc, #336]	; (8003298 <HAL_DMA_IRQHandler+0x430>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2ee>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_DMA_IRQHandler+0x434>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10a      	bne.n	800316c <HAL_DMA_IRQHandler+0x304>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e003      	b.n	8003174 <HAL_DMA_IRQHandler+0x30c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	f043 0202 	orr.w	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2204      	movs	r2, #4
 800319e:	409a      	lsls	r2, r3
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 808f 	beq.w	80032c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <HAL_DMA_IRQHandler+0x3f8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d04a      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <HAL_DMA_IRQHandler+0x3fc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d045      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a29      	ldr	r2, [pc, #164]	; (8003268 <HAL_DMA_IRQHandler+0x400>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d040      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a27      	ldr	r2, [pc, #156]	; (800326c <HAL_DMA_IRQHandler+0x404>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d03b      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a26      	ldr	r2, [pc, #152]	; (8003270 <HAL_DMA_IRQHandler+0x408>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d036      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a24      	ldr	r2, [pc, #144]	; (8003274 <HAL_DMA_IRQHandler+0x40c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d031      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a23      	ldr	r2, [pc, #140]	; (8003278 <HAL_DMA_IRQHandler+0x410>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d02c      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a21      	ldr	r2, [pc, #132]	; (800327c <HAL_DMA_IRQHandler+0x414>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d027      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a20      	ldr	r2, [pc, #128]	; (8003280 <HAL_DMA_IRQHandler+0x418>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d022      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_DMA_IRQHandler+0x41c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01d      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <HAL_DMA_IRQHandler+0x420>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d018      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_DMA_IRQHandler+0x424>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <HAL_DMA_IRQHandler+0x428>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00e      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_DMA_IRQHandler+0x42c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <HAL_DMA_IRQHandler+0x430>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_DMA_IRQHandler+0x3e2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a15      	ldr	r2, [pc, #84]	; (800329c <HAL_DMA_IRQHandler+0x434>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d12a      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x438>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	e023      	b.n	80032a8 <HAL_DMA_IRQHandler+0x440>
 8003260:	40020010 	.word	0x40020010
 8003264:	40020028 	.word	0x40020028
 8003268:	40020040 	.word	0x40020040
 800326c:	40020058 	.word	0x40020058
 8003270:	40020070 	.word	0x40020070
 8003274:	40020088 	.word	0x40020088
 8003278:	400200a0 	.word	0x400200a0
 800327c:	400200b8 	.word	0x400200b8
 8003280:	40020410 	.word	0x40020410
 8003284:	40020428 	.word	0x40020428
 8003288:	40020440 	.word	0x40020440
 800328c:	40020458 	.word	0x40020458
 8003290:	40020470 	.word	0x40020470
 8003294:	40020488 	.word	0x40020488
 8003298:	400204a0 	.word	0x400204a0
 800329c:	400204b8 	.word	0x400204b8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2204      	movs	r2, #4
 80032b6:	409a      	lsls	r2, r3
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2210      	movs	r2, #16
 80032d2:	409a      	lsls	r2, r3
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a6 	beq.w	800342a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a85      	ldr	r2, [pc, #532]	; (80034f8 <HAL_DMA_IRQHandler+0x690>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d04a      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a83      	ldr	r2, [pc, #524]	; (80034fc <HAL_DMA_IRQHandler+0x694>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d045      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a82      	ldr	r2, [pc, #520]	; (8003500 <HAL_DMA_IRQHandler+0x698>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d040      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a80      	ldr	r2, [pc, #512]	; (8003504 <HAL_DMA_IRQHandler+0x69c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03b      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7f      	ldr	r2, [pc, #508]	; (8003508 <HAL_DMA_IRQHandler+0x6a0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d036      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a7d      	ldr	r2, [pc, #500]	; (800350c <HAL_DMA_IRQHandler+0x6a4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d031      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7c      	ldr	r2, [pc, #496]	; (8003510 <HAL_DMA_IRQHandler+0x6a8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d02c      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a7a      	ldr	r2, [pc, #488]	; (8003514 <HAL_DMA_IRQHandler+0x6ac>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d027      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a79      	ldr	r2, [pc, #484]	; (8003518 <HAL_DMA_IRQHandler+0x6b0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a77      	ldr	r2, [pc, #476]	; (800351c <HAL_DMA_IRQHandler+0x6b4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a76      	ldr	r2, [pc, #472]	; (8003520 <HAL_DMA_IRQHandler+0x6b8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a74      	ldr	r2, [pc, #464]	; (8003524 <HAL_DMA_IRQHandler+0x6bc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a73      	ldr	r2, [pc, #460]	; (8003528 <HAL_DMA_IRQHandler+0x6c0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a71      	ldr	r2, [pc, #452]	; (800352c <HAL_DMA_IRQHandler+0x6c4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a70      	ldr	r2, [pc, #448]	; (8003530 <HAL_DMA_IRQHandler+0x6c8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_DMA_IRQHandler+0x516>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a6e      	ldr	r2, [pc, #440]	; (8003534 <HAL_DMA_IRQHandler+0x6cc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10a      	bne.n	8003394 <HAL_DMA_IRQHandler+0x52c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e009      	b.n	80033a8 <HAL_DMA_IRQHandler+0x540>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf14      	ite	ne
 80033a2:	2301      	movne	r3, #1
 80033a4:	2300      	moveq	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d03e      	beq.n	800342a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2210      	movs	r2, #16
 80033b6:	409a      	lsls	r2, r3
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d018      	beq.n	80033fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d108      	bne.n	80033ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d024      	beq.n	800342a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
 80033e8:	e01f      	b.n	800342a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01b      	beq.n	800342a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
 80033fa:	e016      	b.n	800342a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0208 	bic.w	r2, r2, #8
 8003418:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2220      	movs	r2, #32
 8003434:	409a      	lsls	r2, r3
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8110 	beq.w	8003660 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <HAL_DMA_IRQHandler+0x690>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d04a      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <HAL_DMA_IRQHandler+0x694>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d045      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_DMA_IRQHandler+0x698>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d040      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_DMA_IRQHandler+0x69c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d03b      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a26      	ldr	r2, [pc, #152]	; (8003508 <HAL_DMA_IRQHandler+0x6a0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d036      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_DMA_IRQHandler+0x6a4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d031      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a23      	ldr	r2, [pc, #140]	; (8003510 <HAL_DMA_IRQHandler+0x6a8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d02c      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a22      	ldr	r2, [pc, #136]	; (8003514 <HAL_DMA_IRQHandler+0x6ac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d027      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a20      	ldr	r2, [pc, #128]	; (8003518 <HAL_DMA_IRQHandler+0x6b0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d022      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HAL_DMA_IRQHandler+0x6b4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d01d      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_DMA_IRQHandler+0x6b8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d018      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <HAL_DMA_IRQHandler+0x6bc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <HAL_DMA_IRQHandler+0x6c0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00e      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_DMA_IRQHandler+0x6c4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d009      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <HAL_DMA_IRQHandler+0x6c8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d004      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x678>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_DMA_IRQHandler+0x6cc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d12b      	bne.n	8003538 <HAL_DMA_IRQHandler+0x6d0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	e02a      	b.n	800354c <HAL_DMA_IRQHandler+0x6e4>
 80034f6:	bf00      	nop
 80034f8:	40020010 	.word	0x40020010
 80034fc:	40020028 	.word	0x40020028
 8003500:	40020040 	.word	0x40020040
 8003504:	40020058 	.word	0x40020058
 8003508:	40020070 	.word	0x40020070
 800350c:	40020088 	.word	0x40020088
 8003510:	400200a0 	.word	0x400200a0
 8003514:	400200b8 	.word	0x400200b8
 8003518:	40020410 	.word	0x40020410
 800351c:	40020428 	.word	0x40020428
 8003520:	40020440 	.word	0x40020440
 8003524:	40020458 	.word	0x40020458
 8003528:	40020470 	.word	0x40020470
 800352c:	40020488 	.word	0x40020488
 8003530:	400204a0 	.word	0x400204a0
 8003534:	400204b8 	.word	0x400204b8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8087 	beq.w	8003660 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2220      	movs	r2, #32
 800355c:	409a      	lsls	r2, r3
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b04      	cmp	r3, #4
 800356c:	d139      	bne.n	80035e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0216 	bic.w	r2, r2, #22
 800357c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <HAL_DMA_IRQHandler+0x736>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0208 	bic.w	r2, r2, #8
 80035ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	223f      	movs	r2, #63	; 0x3f
 80035b8:	409a      	lsls	r2, r3
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 834a 	beq.w	8003c6c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
          }
          return;
 80035e0:	e344      	b.n	8003c6c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d018      	beq.n	8003622 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d108      	bne.n	8003610 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	2b00      	cmp	r3, #0
 8003604:	d02c      	beq.n	8003660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e027      	b.n	8003660 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d023      	beq.n	8003660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
 8003620:	e01e      	b.n	8003660 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10f      	bne.n	8003650 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0210 	bic.w	r2, r2, #16
 800363e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8306 	beq.w	8003c76 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8088 	beq.w	8003788 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2204      	movs	r2, #4
 800367c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a7a      	ldr	r2, [pc, #488]	; (8003870 <HAL_DMA_IRQHandler+0xa08>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d04a      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a79      	ldr	r2, [pc, #484]	; (8003874 <HAL_DMA_IRQHandler+0xa0c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d045      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a77      	ldr	r2, [pc, #476]	; (8003878 <HAL_DMA_IRQHandler+0xa10>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d040      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a76      	ldr	r2, [pc, #472]	; (800387c <HAL_DMA_IRQHandler+0xa14>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d03b      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a74      	ldr	r2, [pc, #464]	; (8003880 <HAL_DMA_IRQHandler+0xa18>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d036      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a73      	ldr	r2, [pc, #460]	; (8003884 <HAL_DMA_IRQHandler+0xa1c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d031      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a71      	ldr	r2, [pc, #452]	; (8003888 <HAL_DMA_IRQHandler+0xa20>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02c      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a70      	ldr	r2, [pc, #448]	; (800388c <HAL_DMA_IRQHandler+0xa24>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d027      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6e      	ldr	r2, [pc, #440]	; (8003890 <HAL_DMA_IRQHandler+0xa28>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d022      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6d      	ldr	r2, [pc, #436]	; (8003894 <HAL_DMA_IRQHandler+0xa2c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d01d      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a6b      	ldr	r2, [pc, #428]	; (8003898 <HAL_DMA_IRQHandler+0xa30>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d018      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6a      	ldr	r2, [pc, #424]	; (800389c <HAL_DMA_IRQHandler+0xa34>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a68      	ldr	r2, [pc, #416]	; (80038a0 <HAL_DMA_IRQHandler+0xa38>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00e      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a67      	ldr	r2, [pc, #412]	; (80038a4 <HAL_DMA_IRQHandler+0xa3c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a65      	ldr	r2, [pc, #404]	; (80038a8 <HAL_DMA_IRQHandler+0xa40>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_DMA_IRQHandler+0x8b8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a64      	ldr	r2, [pc, #400]	; (80038ac <HAL_DMA_IRQHandler+0xa44>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <HAL_DMA_IRQHandler+0x8ca>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e007      	b.n	8003742 <HAL_DMA_IRQHandler+0x8da>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3301      	adds	r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374a:	429a      	cmp	r2, r3
 800374c:	d307      	bcc.n	800375e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f2      	bne.n	8003742 <HAL_DMA_IRQHandler+0x8da>
 800375c:	e000      	b.n	8003760 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800375e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800377e:	e003      	b.n	8003788 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8272 	beq.w	8003c76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
 800379a:	e26c      	b.n	8003c76 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a43      	ldr	r2, [pc, #268]	; (80038b0 <HAL_DMA_IRQHandler+0xa48>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d022      	beq.n	80037ec <HAL_DMA_IRQHandler+0x984>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a42      	ldr	r2, [pc, #264]	; (80038b4 <HAL_DMA_IRQHandler+0xa4c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d01d      	beq.n	80037ec <HAL_DMA_IRQHandler+0x984>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a40      	ldr	r2, [pc, #256]	; (80038b8 <HAL_DMA_IRQHandler+0xa50>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d018      	beq.n	80037ec <HAL_DMA_IRQHandler+0x984>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a3f      	ldr	r2, [pc, #252]	; (80038bc <HAL_DMA_IRQHandler+0xa54>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <HAL_DMA_IRQHandler+0x984>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a3d      	ldr	r2, [pc, #244]	; (80038c0 <HAL_DMA_IRQHandler+0xa58>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_DMA_IRQHandler+0x984>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a3c      	ldr	r2, [pc, #240]	; (80038c4 <HAL_DMA_IRQHandler+0xa5c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_DMA_IRQHandler+0x984>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a3a      	ldr	r2, [pc, #232]	; (80038c8 <HAL_DMA_IRQHandler+0xa60>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <HAL_DMA_IRQHandler+0x984>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a39      	ldr	r2, [pc, #228]	; (80038cc <HAL_DMA_IRQHandler+0xa64>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x988>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_DMA_IRQHandler+0x98a>
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 823f 	beq.w	8003c76 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2204      	movs	r2, #4
 800380a:	409a      	lsls	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80cd 	beq.w	80039b0 <HAL_DMA_IRQHandler+0xb48>
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80c7 	beq.w	80039b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2204      	movs	r2, #4
 800382c:	409a      	lsls	r2, r3
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d049      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8210 	beq.w	8003c70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003858:	e20a      	b.n	8003c70 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8206 	beq.w	8003c70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800386c:	e200      	b.n	8003c70 <HAL_DMA_IRQHandler+0xe08>
 800386e:	bf00      	nop
 8003870:	40020010 	.word	0x40020010
 8003874:	40020028 	.word	0x40020028
 8003878:	40020040 	.word	0x40020040
 800387c:	40020058 	.word	0x40020058
 8003880:	40020070 	.word	0x40020070
 8003884:	40020088 	.word	0x40020088
 8003888:	400200a0 	.word	0x400200a0
 800388c:	400200b8 	.word	0x400200b8
 8003890:	40020410 	.word	0x40020410
 8003894:	40020428 	.word	0x40020428
 8003898:	40020440 	.word	0x40020440
 800389c:	40020458 	.word	0x40020458
 80038a0:	40020470 	.word	0x40020470
 80038a4:	40020488 	.word	0x40020488
 80038a8:	400204a0 	.word	0x400204a0
 80038ac:	400204b8 	.word	0x400204b8
 80038b0:	58025408 	.word	0x58025408
 80038b4:	5802541c 	.word	0x5802541c
 80038b8:	58025430 	.word	0x58025430
 80038bc:	58025444 	.word	0x58025444
 80038c0:	58025458 	.word	0x58025458
 80038c4:	5802546c 	.word	0x5802546c
 80038c8:	58025480 	.word	0x58025480
 80038cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d160      	bne.n	800399c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a8c      	ldr	r2, [pc, #560]	; (8003b10 <HAL_DMA_IRQHandler+0xca8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d04a      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a8a      	ldr	r2, [pc, #552]	; (8003b14 <HAL_DMA_IRQHandler+0xcac>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d045      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a89      	ldr	r2, [pc, #548]	; (8003b18 <HAL_DMA_IRQHandler+0xcb0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d040      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a87      	ldr	r2, [pc, #540]	; (8003b1c <HAL_DMA_IRQHandler+0xcb4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d03b      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a86      	ldr	r2, [pc, #536]	; (8003b20 <HAL_DMA_IRQHandler+0xcb8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d036      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a84      	ldr	r2, [pc, #528]	; (8003b24 <HAL_DMA_IRQHandler+0xcbc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a83      	ldr	r2, [pc, #524]	; (8003b28 <HAL_DMA_IRQHandler+0xcc0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d02c      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a81      	ldr	r2, [pc, #516]	; (8003b2c <HAL_DMA_IRQHandler+0xcc4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d027      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a80      	ldr	r2, [pc, #512]	; (8003b30 <HAL_DMA_IRQHandler+0xcc8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a7e      	ldr	r2, [pc, #504]	; (8003b34 <HAL_DMA_IRQHandler+0xccc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01d      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a7d      	ldr	r2, [pc, #500]	; (8003b38 <HAL_DMA_IRQHandler+0xcd0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a7b      	ldr	r2, [pc, #492]	; (8003b3c <HAL_DMA_IRQHandler+0xcd4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a7a      	ldr	r2, [pc, #488]	; (8003b40 <HAL_DMA_IRQHandler+0xcd8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a78      	ldr	r2, [pc, #480]	; (8003b44 <HAL_DMA_IRQHandler+0xcdc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a77      	ldr	r2, [pc, #476]	; (8003b48 <HAL_DMA_IRQHandler+0xce0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_DMA_IRQHandler+0xb12>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a75      	ldr	r2, [pc, #468]	; (8003b4c <HAL_DMA_IRQHandler+0xce4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <HAL_DMA_IRQHandler+0xb24>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0208 	bic.w	r2, r2, #8
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e007      	b.n	800399c <HAL_DMA_IRQHandler+0xb34>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0204 	bic.w	r2, r2, #4
 800399a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8165 	beq.w	8003c70 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ae:	e15f      	b.n	8003c70 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2202      	movs	r2, #2
 80039ba:	409a      	lsls	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80c5 	beq.w	8003b50 <HAL_DMA_IRQHandler+0xce8>
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80bf 	beq.w	8003b50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2202      	movs	r2, #2
 80039dc:	409a      	lsls	r2, r3
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 813a 	beq.w	8003c74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a08:	e134      	b.n	8003c74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8130 	beq.w	8003c74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a1c:	e12a      	b.n	8003c74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d168      	bne.n	8003afa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a38      	ldr	r2, [pc, #224]	; (8003b10 <HAL_DMA_IRQHandler+0xca8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d04a      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a37      	ldr	r2, [pc, #220]	; (8003b14 <HAL_DMA_IRQHandler+0xcac>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d045      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a35      	ldr	r2, [pc, #212]	; (8003b18 <HAL_DMA_IRQHandler+0xcb0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d040      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a34      	ldr	r2, [pc, #208]	; (8003b1c <HAL_DMA_IRQHandler+0xcb4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d03b      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a32      	ldr	r2, [pc, #200]	; (8003b20 <HAL_DMA_IRQHandler+0xcb8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d036      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a31      	ldr	r2, [pc, #196]	; (8003b24 <HAL_DMA_IRQHandler+0xcbc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d031      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2f      	ldr	r2, [pc, #188]	; (8003b28 <HAL_DMA_IRQHandler+0xcc0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d02c      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <HAL_DMA_IRQHandler+0xcc4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d027      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <HAL_DMA_IRQHandler+0xcc8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d022      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2b      	ldr	r2, [pc, #172]	; (8003b34 <HAL_DMA_IRQHandler+0xccc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a29      	ldr	r2, [pc, #164]	; (8003b38 <HAL_DMA_IRQHandler+0xcd0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d018      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a28      	ldr	r2, [pc, #160]	; (8003b3c <HAL_DMA_IRQHandler+0xcd4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a26      	ldr	r2, [pc, #152]	; (8003b40 <HAL_DMA_IRQHandler+0xcd8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a25      	ldr	r2, [pc, #148]	; (8003b44 <HAL_DMA_IRQHandler+0xcdc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a23      	ldr	r2, [pc, #140]	; (8003b48 <HAL_DMA_IRQHandler+0xce0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0xc60>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a22      	ldr	r2, [pc, #136]	; (8003b4c <HAL_DMA_IRQHandler+0xce4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d108      	bne.n	8003ada <HAL_DMA_IRQHandler+0xc72>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0214 	bic.w	r2, r2, #20
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e007      	b.n	8003aea <HAL_DMA_IRQHandler+0xc82>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 020a 	bic.w	r2, r2, #10
 8003ae8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80b8 	beq.w	8003c74 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b0c:	e0b2      	b.n	8003c74 <HAL_DMA_IRQHandler+0xe0c>
 8003b0e:	bf00      	nop
 8003b10:	40020010 	.word	0x40020010
 8003b14:	40020028 	.word	0x40020028
 8003b18:	40020040 	.word	0x40020040
 8003b1c:	40020058 	.word	0x40020058
 8003b20:	40020070 	.word	0x40020070
 8003b24:	40020088 	.word	0x40020088
 8003b28:	400200a0 	.word	0x400200a0
 8003b2c:	400200b8 	.word	0x400200b8
 8003b30:	40020410 	.word	0x40020410
 8003b34:	40020428 	.word	0x40020428
 8003b38:	40020440 	.word	0x40020440
 8003b3c:	40020458 	.word	0x40020458
 8003b40:	40020470 	.word	0x40020470
 8003b44:	40020488 	.word	0x40020488
 8003b48:	400204a0 	.word	0x400204a0
 8003b4c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2208      	movs	r2, #8
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8088 	beq.w	8003c76 <HAL_DMA_IRQHandler+0xe0e>
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8082 	beq.w	8003c76 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a41      	ldr	r2, [pc, #260]	; (8003c7c <HAL_DMA_IRQHandler+0xe14>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d04a      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a3f      	ldr	r2, [pc, #252]	; (8003c80 <HAL_DMA_IRQHandler+0xe18>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d045      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a3e      	ldr	r2, [pc, #248]	; (8003c84 <HAL_DMA_IRQHandler+0xe1c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d040      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <HAL_DMA_IRQHandler+0xe20>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d03b      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a3b      	ldr	r2, [pc, #236]	; (8003c8c <HAL_DMA_IRQHandler+0xe24>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d036      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a39      	ldr	r2, [pc, #228]	; (8003c90 <HAL_DMA_IRQHandler+0xe28>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d031      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_DMA_IRQHandler+0xe2c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d02c      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a36      	ldr	r2, [pc, #216]	; (8003c98 <HAL_DMA_IRQHandler+0xe30>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d027      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a35      	ldr	r2, [pc, #212]	; (8003c9c <HAL_DMA_IRQHandler+0xe34>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d022      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a33      	ldr	r2, [pc, #204]	; (8003ca0 <HAL_DMA_IRQHandler+0xe38>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01d      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <HAL_DMA_IRQHandler+0xe3c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a30      	ldr	r2, [pc, #192]	; (8003ca8 <HAL_DMA_IRQHandler+0xe40>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <HAL_DMA_IRQHandler+0xe44>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <HAL_DMA_IRQHandler+0xe48>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <HAL_DMA_IRQHandler+0xe4c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xdaa>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <HAL_DMA_IRQHandler+0xe50>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d108      	bne.n	8003c24 <HAL_DMA_IRQHandler+0xdbc>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 021c 	bic.w	r2, r2, #28
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e007      	b.n	8003c34 <HAL_DMA_IRQHandler+0xdcc>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 020e 	bic.w	r2, r2, #14
 8003c32:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
 8003c6a:	e004      	b.n	8003c76 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c6c:	bf00      	nop
 8003c6e:	e002      	b.n	8003c76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c70:	bf00      	nop
 8003c72:	e000      	b.n	8003c76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c74:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c76:	3728      	adds	r7, #40	; 0x28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40020010 	.word	0x40020010
 8003c80:	40020028 	.word	0x40020028
 8003c84:	40020040 	.word	0x40020040
 8003c88:	40020058 	.word	0x40020058
 8003c8c:	40020070 	.word	0x40020070
 8003c90:	40020088 	.word	0x40020088
 8003c94:	400200a0 	.word	0x400200a0
 8003c98:	400200b8 	.word	0x400200b8
 8003c9c:	40020410 	.word	0x40020410
 8003ca0:	40020428 	.word	0x40020428
 8003ca4:	40020440 	.word	0x40020440
 8003ca8:	40020458 	.word	0x40020458
 8003cac:	40020470 	.word	0x40020470
 8003cb0:	40020488 	.word	0x40020488
 8003cb4:	400204a0 	.word	0x400204a0
 8003cb8:	400204b8 	.word	0x400204b8

08003cbc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cca:	b2db      	uxtb	r3, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a42      	ldr	r2, [pc, #264]	; (8003df0 <DMA_CalcBaseAndBitshift+0x118>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d04a      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a41      	ldr	r2, [pc, #260]	; (8003df4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d045      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a3f      	ldr	r2, [pc, #252]	; (8003df8 <DMA_CalcBaseAndBitshift+0x120>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d040      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3e      	ldr	r2, [pc, #248]	; (8003dfc <DMA_CalcBaseAndBitshift+0x124>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d03b      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <DMA_CalcBaseAndBitshift+0x128>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d036      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a3b      	ldr	r2, [pc, #236]	; (8003e04 <DMA_CalcBaseAndBitshift+0x12c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d031      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <DMA_CalcBaseAndBitshift+0x130>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d02c      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a38      	ldr	r2, [pc, #224]	; (8003e0c <DMA_CalcBaseAndBitshift+0x134>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d027      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a36      	ldr	r2, [pc, #216]	; (8003e10 <DMA_CalcBaseAndBitshift+0x138>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d022      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a35      	ldr	r2, [pc, #212]	; (8003e14 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d01d      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a33      	ldr	r2, [pc, #204]	; (8003e18 <DMA_CalcBaseAndBitshift+0x140>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d018      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a32      	ldr	r2, [pc, #200]	; (8003e1c <DMA_CalcBaseAndBitshift+0x144>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a30      	ldr	r2, [pc, #192]	; (8003e20 <DMA_CalcBaseAndBitshift+0x148>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00e      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2f      	ldr	r2, [pc, #188]	; (8003e24 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2d      	ldr	r2, [pc, #180]	; (8003e28 <DMA_CalcBaseAndBitshift+0x150>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <DMA_CalcBaseAndBitshift+0x154>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <DMA_CalcBaseAndBitshift+0xac>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <DMA_CalcBaseAndBitshift+0xae>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d024      	beq.n	8003dd4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	3b10      	subs	r3, #16
 8003d92:	4a27      	ldr	r2, [pc, #156]	; (8003e30 <DMA_CalcBaseAndBitshift+0x158>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <DMA_CalcBaseAndBitshift+0x15c>)
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	461a      	mov	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d908      	bls.n	8003dc4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <DMA_CalcBaseAndBitshift+0x160>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	1d1a      	adds	r2, r3, #4
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	659a      	str	r2, [r3, #88]	; 0x58
 8003dc2:	e00d      	b.n	8003de0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <DMA_CalcBaseAndBitshift+0x160>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd2:	e005      	b.n	8003de0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40020010 	.word	0x40020010
 8003df4:	40020028 	.word	0x40020028
 8003df8:	40020040 	.word	0x40020040
 8003dfc:	40020058 	.word	0x40020058
 8003e00:	40020070 	.word	0x40020070
 8003e04:	40020088 	.word	0x40020088
 8003e08:	400200a0 	.word	0x400200a0
 8003e0c:	400200b8 	.word	0x400200b8
 8003e10:	40020410 	.word	0x40020410
 8003e14:	40020428 	.word	0x40020428
 8003e18:	40020440 	.word	0x40020440
 8003e1c:	40020458 	.word	0x40020458
 8003e20:	40020470 	.word	0x40020470
 8003e24:	40020488 	.word	0x40020488
 8003e28:	400204a0 	.word	0x400204a0
 8003e2c:	400204b8 	.word	0x400204b8
 8003e30:	aaaaaaab 	.word	0xaaaaaaab
 8003e34:	08013160 	.word	0x08013160
 8003e38:	fffffc00 	.word	0xfffffc00

08003e3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d120      	bne.n	8003e92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d858      	bhi.n	8003f0a <DMA_CheckFifoParam+0xce>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <DMA_CheckFifoParam+0x24>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e83 	.word	0x08003e83
 8003e68:	08003e71 	.word	0x08003e71
 8003e6c:	08003f0b 	.word	0x08003f0b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d048      	beq.n	8003f0e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e80:	e045      	b.n	8003f0e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e8a:	d142      	bne.n	8003f12 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e90:	e03f      	b.n	8003f12 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	d123      	bne.n	8003ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d838      	bhi.n	8003f16 <DMA_CheckFifoParam+0xda>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <DMA_CheckFifoParam+0x70>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ec3 	.word	0x08003ec3
 8003eb4:	08003ebd 	.word	0x08003ebd
 8003eb8:	08003ed5 	.word	0x08003ed5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
        break;
 8003ec0:	e030      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d025      	beq.n	8003f1a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ed2:	e022      	b.n	8003f1a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003edc:	d11f      	bne.n	8003f1e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ee2:	e01c      	b.n	8003f1e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d902      	bls.n	8003ef2 <DMA_CheckFifoParam+0xb6>
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d003      	beq.n	8003ef8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ef0:	e018      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ef6:	e015      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
    break;
 8003f08:	e00b      	b.n	8003f22 <DMA_CheckFifoParam+0xe6>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e00a      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e008      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f12:	bf00      	nop
 8003f14:	e006      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f16:	bf00      	nop
 8003f18:	e004      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f1a:	bf00      	nop
 8003f1c:	e002      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
    break;
 8003f22:	bf00      	nop
    }
  }

  return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop

08003f34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a38      	ldr	r2, [pc, #224]	; (8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d022      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a36      	ldr	r2, [pc, #216]	; (800402c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a35      	ldr	r2, [pc, #212]	; (8004030 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d018      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a33      	ldr	r2, [pc, #204]	; (8004034 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a32      	ldr	r2, [pc, #200]	; (8004038 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a30      	ldr	r2, [pc, #192]	; (800403c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2f      	ldr	r2, [pc, #188]	; (8004040 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	; (8004044 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01a      	beq.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	3b08      	subs	r3, #8
 8003fa4:	4a28      	ldr	r2, [pc, #160]	; (8004048 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4b26      	ldr	r3, [pc, #152]	; (800404c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a24      	ldr	r2, [pc, #144]	; (8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003fc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2201      	movs	r2, #1
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003fd0:	e024      	b.n	800401c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3b10      	subs	r3, #16
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d806      	bhi.n	8003ffa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4a1b      	ldr	r2, [pc, #108]	; (800405c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d902      	bls.n	8003ffa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	461a      	mov	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800400c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2201      	movs	r2, #1
 8004016:	409a      	lsls	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	58025408 	.word	0x58025408
 800402c:	5802541c 	.word	0x5802541c
 8004030:	58025430 	.word	0x58025430
 8004034:	58025444 	.word	0x58025444
 8004038:	58025458 	.word	0x58025458
 800403c:	5802546c 	.word	0x5802546c
 8004040:	58025480 	.word	0x58025480
 8004044:	58025494 	.word	0x58025494
 8004048:	cccccccd 	.word	0xcccccccd
 800404c:	16009600 	.word	0x16009600
 8004050:	58025880 	.word	0x58025880
 8004054:	aaaaaaab 	.word	0xaaaaaaab
 8004058:	400204b8 	.word	0x400204b8
 800405c:	4002040f 	.word	0x4002040f
 8004060:	10008200 	.word	0x10008200
 8004064:	40020880 	.word	0x40020880

08004068 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d04a      	beq.n	8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d847      	bhi.n	8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a25      	ldr	r2, [pc, #148]	; (8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d022      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a24      	ldr	r2, [pc, #144]	; (8004124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d01d      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d018      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a21      	ldr	r2, [pc, #132]	; (800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1b      	ldr	r2, [pc, #108]	; (800413c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80040d8:	2300      	movs	r3, #0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4b17      	ldr	r3, [pc, #92]	; (8004140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a15      	ldr	r2, [pc, #84]	; (8004144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80040f0:	671a      	str	r2, [r3, #112]	; 0x70
 80040f2:	e009      	b.n	8004108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4b14      	ldr	r3, [pc, #80]	; (8004148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a11      	ldr	r2, [pc, #68]	; (800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004106:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b01      	subs	r3, #1
 800410c:	2201      	movs	r2, #1
 800410e:	409a      	lsls	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	58025408 	.word	0x58025408
 8004124:	5802541c 	.word	0x5802541c
 8004128:	58025430 	.word	0x58025430
 800412c:	58025444 	.word	0x58025444
 8004130:	58025458 	.word	0x58025458
 8004134:	5802546c 	.word	0x5802546c
 8004138:	58025480 	.word	0x58025480
 800413c:	58025494 	.word	0x58025494
 8004140:	1600963f 	.word	0x1600963f
 8004144:	58025940 	.word	0x58025940
 8004148:	1000823f 	.word	0x1000823f
 800414c:	40020940 	.word	0x40020940

08004150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800415e:	4b89      	ldr	r3, [pc, #548]	; (8004384 <HAL_GPIO_Init+0x234>)
 8004160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004162:	e194      	b.n	800448e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	2101      	movs	r1, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa01 f303 	lsl.w	r3, r1, r3
 8004170:	4013      	ands	r3, r2
 8004172:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8186 	beq.w	8004488 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d00b      	beq.n	800419c <HAL_GPIO_Init+0x4c>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d007      	beq.n	800419c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004190:	2b11      	cmp	r3, #17
 8004192:	d003      	beq.n	800419c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b12      	cmp	r3, #18
 800419a:	d130      	bne.n	80041fe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	2203      	movs	r2, #3
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041d2:	2201      	movs	r2, #1
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43db      	mvns	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	f003 0201 	and.w	r2, r3, #1
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	2203      	movs	r2, #3
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0xee>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b12      	cmp	r3, #18
 800423c:	d123      	bne.n	8004286 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	08da      	lsrs	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3208      	adds	r2, #8
 8004246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	220f      	movs	r2, #15
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	08da      	lsrs	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3208      	adds	r2, #8
 8004280:	69b9      	ldr	r1, [r7, #24]
 8004282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	2203      	movs	r2, #3
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 0203 	and.w	r2, r3, #3
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80e0 	beq.w	8004488 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c8:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <HAL_GPIO_Init+0x238>)
 80042ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042ce:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <HAL_GPIO_Init+0x238>)
 80042d0:	f043 0302 	orr.w	r3, r3, #2
 80042d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80042d8:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_GPIO_Init+0x238>)
 80042da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042e6:	4a29      	ldr	r2, [pc, #164]	; (800438c <HAL_GPIO_Init+0x23c>)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	3302      	adds	r3, #2
 80042ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	220f      	movs	r2, #15
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a20      	ldr	r2, [pc, #128]	; (8004390 <HAL_GPIO_Init+0x240>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d052      	beq.n	80043b8 <HAL_GPIO_Init+0x268>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_GPIO_Init+0x244>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d031      	beq.n	800437e <HAL_GPIO_Init+0x22e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <HAL_GPIO_Init+0x248>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d02b      	beq.n	800437a <HAL_GPIO_Init+0x22a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1d      	ldr	r2, [pc, #116]	; (800439c <HAL_GPIO_Init+0x24c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d025      	beq.n	8004376 <HAL_GPIO_Init+0x226>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <HAL_GPIO_Init+0x250>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01f      	beq.n	8004372 <HAL_GPIO_Init+0x222>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <HAL_GPIO_Init+0x254>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d019      	beq.n	800436e <HAL_GPIO_Init+0x21e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <HAL_GPIO_Init+0x258>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_GPIO_Init+0x21a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a19      	ldr	r2, [pc, #100]	; (80043ac <HAL_GPIO_Init+0x25c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00d      	beq.n	8004366 <HAL_GPIO_Init+0x216>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <HAL_GPIO_Init+0x260>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <HAL_GPIO_Init+0x212>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a17      	ldr	r2, [pc, #92]	; (80043b4 <HAL_GPIO_Init+0x264>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_GPIO_Init+0x20e>
 800435a:	2309      	movs	r3, #9
 800435c:	e02d      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800435e:	230a      	movs	r3, #10
 8004360:	e02b      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004362:	2308      	movs	r3, #8
 8004364:	e029      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004366:	2307      	movs	r3, #7
 8004368:	e027      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800436a:	2306      	movs	r3, #6
 800436c:	e025      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800436e:	2305      	movs	r3, #5
 8004370:	e023      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004372:	2304      	movs	r3, #4
 8004374:	e021      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004376:	2303      	movs	r3, #3
 8004378:	e01f      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800437a:	2302      	movs	r3, #2
 800437c:	e01d      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800437e:	2301      	movs	r3, #1
 8004380:	e01b      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004382:	bf00      	nop
 8004384:	58000080 	.word	0x58000080
 8004388:	58024400 	.word	0x58024400
 800438c:	58000400 	.word	0x58000400
 8004390:	58020000 	.word	0x58020000
 8004394:	58020400 	.word	0x58020400
 8004398:	58020800 	.word	0x58020800
 800439c:	58020c00 	.word	0x58020c00
 80043a0:	58021000 	.word	0x58021000
 80043a4:	58021400 	.word	0x58021400
 80043a8:	58021800 	.word	0x58021800
 80043ac:	58021c00 	.word	0x58021c00
 80043b0:	58022000 	.word	0x58022000
 80043b4:	58022400 	.word	0x58022400
 80043b8:	2300      	movs	r3, #0
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	f002 0203 	and.w	r2, r2, #3
 80043c0:	0092      	lsls	r2, r2, #2
 80043c2:	4093      	lsls	r3, r2
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ca:	4938      	ldr	r1, [pc, #224]	; (80044ac <HAL_GPIO_Init+0x35c>)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	3302      	adds	r3, #2
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800445a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	f47f ae63 	bne.w	8004164 <HAL_GPIO_Init+0x14>
  }
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	3724      	adds	r7, #36	; 0x24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	58000400 	.word	0x58000400

080044b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
 80044bc:	4613      	mov	r3, r2
 80044be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044c0:	787b      	ldrb	r3, [r7, #1]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044cc:	e003      	b.n	80044d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044ce:	887b      	ldrh	r3, [r7, #2]
 80044d0:	041a      	lsls	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	619a      	str	r2, [r3, #24]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80044ec:	4a08      	ldr	r2, [pc, #32]	; (8004510 <HAL_HSEM_FastTake+0x2c>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3320      	adds	r3, #32
 80044f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f6:	4a07      	ldr	r2, [pc, #28]	; (8004514 <HAL_HSEM_FastTake+0x30>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d101      	bne.n	8004500 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	58026400 	.word	0x58026400
 8004514:	80000300 	.word	0x80000300

08004518 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004522:	4906      	ldr	r1, [pc, #24]	; (800453c <HAL_HSEM_Release+0x24>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	58026400 	.word	0x58026400

08004540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e07f      	b.n	8004652 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fa74 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	e006      	b.n	80045c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d104      	bne.n	80045da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6859      	ldr	r1, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b1d      	ldr	r3, [pc, #116]	; (800465c <HAL_I2C_Init+0x11c>)
 80045e6:	430b      	orrs	r3, r1
 80045e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	ea42 0103 	orr.w	r1, r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	021a      	lsls	r2, r3, #8
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69d9      	ldr	r1, [r3, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	02008000 	.word	0x02008000

08004660 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
  }
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d010      	beq.n	80046da <HAL_I2C_ER_IRQHandler+0x46>
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	09db      	lsrs	r3, r3, #7
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046d8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	0a9b      	lsrs	r3, r3, #10
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d010      	beq.n	8004708 <HAL_I2C_ER_IRQHandler+0x74>
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	09db      	lsrs	r3, r3, #7
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f043 0208 	orr.w	r2, r3, #8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004706:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	0a5b      	lsrs	r3, r3, #9
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d010      	beq.n	8004736 <HAL_I2C_ER_IRQHandler+0xa2>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	09db      	lsrs	r3, r3, #7
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	f043 0202 	orr.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004734:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 030b 	and.w	r3, r3, #11
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fc77 	bl	800503c <I2C_ITError>
  }
}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	70fb      	strb	r3, [r7, #3]
 800478a:	4613      	mov	r3, r2
 800478c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <I2C_Slave_ISR_IT+0x24>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e0ec      	b.n	80049d4 <I2C_Slave_ISR_IT+0x1fe>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <I2C_Slave_ISR_IT+0x4c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800481a:	6939      	ldr	r1, [r7, #16]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f9bf 	bl	8004ba0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d04d      	beq.n	80048ca <I2C_Slave_ISR_IT+0xf4>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d047      	beq.n	80048ca <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d128      	bne.n	8004896 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b28      	cmp	r3, #40	; 0x28
 800484e:	d108      	bne.n	8004862 <I2C_Slave_ISR_IT+0x8c>
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004856:	d104      	bne.n	8004862 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004858:	6939      	ldr	r1, [r7, #16]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fb98 	bl	8004f90 <I2C_ITListenCplt>
 8004860:	e032      	b.n	80048c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b29      	cmp	r3, #41	; 0x29
 800486c:	d10e      	bne.n	800488c <I2C_Slave_ISR_IT+0xb6>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004874:	d00a      	beq.n	800488c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2210      	movs	r2, #16
 800487c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fcd3 	bl	800522a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f92d 	bl	8004ae4 <I2C_ITSlaveSeqCplt>
 800488a:	e01d      	b.n	80048c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2210      	movs	r2, #16
 8004892:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004894:	e096      	b.n	80049c4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2210      	movs	r2, #16
 800489c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	f043 0204 	orr.w	r2, r3, #4
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <I2C_Slave_ISR_IT+0xe4>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b6:	f040 8085 	bne.w	80049c4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	4619      	mov	r1, r3
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fbbb 	bl	800503c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80048c6:	e07d      	b.n	80049c4 <I2C_Slave_ISR_IT+0x1ee>
 80048c8:	e07c      	b.n	80049c4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	089b      	lsrs	r3, r3, #2
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d030      	beq.n	8004938 <I2C_Slave_ISR_IT+0x162>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d02a      	beq.n	8004938 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d018      	beq.n	800491e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d14f      	bne.n	80049c8 <I2C_Slave_ISR_IT+0x1f2>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800492e:	d04b      	beq.n	80049c8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f8d7 	bl	8004ae4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004936:	e047      	b.n	80049c8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	08db      	lsrs	r3, r3, #3
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	08db      	lsrs	r3, r3, #3
 8004948:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800494c:	2b00      	cmp	r3, #0
 800494e:	d004      	beq.n	800495a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004950:	6939      	ldr	r1, [r7, #16]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f842 	bl	80049dc <I2C_ITAddrCplt>
 8004958:	e037      	b.n	80049ca <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d031      	beq.n	80049ca <I2C_Slave_ISR_IT+0x1f4>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d02b      	beq.n	80049ca <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d018      	beq.n	80049ae <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80049ac:	e00d      	b.n	80049ca <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049b4:	d002      	beq.n	80049bc <I2C_Slave_ISR_IT+0x1e6>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f891 	bl	8004ae4 <I2C_ITSlaveSeqCplt>
 80049c2:	e002      	b.n	80049ca <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80049c4:	bf00      	nop
 80049c6:	e000      	b.n	80049ca <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80049c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049f2:	2b28      	cmp	r3, #40	; 0x28
 80049f4:	d16a      	bne.n	8004acc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a14:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a22:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a30:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d138      	bne.n	8004aac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004a3a:	897b      	ldrh	r3, [r7, #10]
 8004a3c:	09db      	lsrs	r3, r3, #7
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	89bb      	ldrh	r3, [r7, #12]
 8004a42:	4053      	eors	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f003 0306 	and.w	r3, r3, #6
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11c      	bne.n	8004a88 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004a4e:	897b      	ldrh	r3, [r7, #10]
 8004a50:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d13b      	bne.n	8004adc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a7a:	89ba      	ldrh	r2, [r7, #12]
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff fe7c 	bl	800477e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a86:	e029      	b.n	8004adc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004a88:	893b      	ldrh	r3, [r7, #8]
 8004a8a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fc0c 	bl	80052ae <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a9e:	89ba      	ldrh	r2, [r7, #12]
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff fe6a 	bl	800477e <HAL_I2C_AddrCallback>
}
 8004aaa:	e017      	b.n	8004adc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fbfc 	bl	80052ae <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004abe:	89ba      	ldrh	r2, [r7, #12]
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fe5a 	bl	800477e <HAL_I2C_AddrCallback>
}
 8004aca:	e007      	b.n	8004adc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	0b9b      	lsrs	r3, r3, #14
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e00d      	b.n	8004b36 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	0bdb      	lsrs	r3, r3, #15
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b29      	cmp	r3, #41	; 0x29
 8004b40:	d112      	bne.n	8004b68 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2228      	movs	r2, #40	; 0x28
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2221      	movs	r2, #33	; 0x21
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b50:	2101      	movs	r1, #1
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fbab 	bl	80052ae <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff fdf8 	bl	8004756 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b66:	e017      	b.n	8004b98 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b2a      	cmp	r3, #42	; 0x2a
 8004b72:	d111      	bne.n	8004b98 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2228      	movs	r2, #40	; 0x28
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2222      	movs	r2, #34	; 0x22
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b82:	2102      	movs	r1, #2
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb92 	bl	80052ae <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fde9 	bl	800476a <HAL_I2C_SlaveRxCpltCallback>
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b21      	cmp	r3, #33	; 0x21
 8004bca:	d002      	beq.n	8004bd2 <I2C_ITSlaveCplt+0x32>
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b29      	cmp	r3, #41	; 0x29
 8004bd0:	d108      	bne.n	8004be4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004bd2:	f248 0101 	movw	r1, #32769	; 0x8001
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fb69 	bl	80052ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2221      	movs	r2, #33	; 0x21
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
 8004be2:	e00d      	b.n	8004c00 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b22      	cmp	r3, #34	; 0x22
 8004be8:	d002      	beq.n	8004bf0 <I2C_ITSlaveCplt+0x50>
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b2a      	cmp	r3, #42	; 0x2a
 8004bee:	d107      	bne.n	8004c00 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004bf0:	f248 0102 	movw	r1, #32770	; 0x8002
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fb5a 	bl	80052ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2222      	movs	r2, #34	; 0x22
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6859      	ldr	r1, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b80      	ldr	r3, [pc, #512]	; (8004e1c <I2C_ITSlaveCplt+0x27c>)
 8004c1c:	400b      	ands	r3, r1
 8004c1e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fb02 	bl	800522a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	0b9b      	lsrs	r3, r3, #14
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d07a      	beq.n	8004d28 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c40:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 8111 	beq.w	8004e6e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a73      	ldr	r2, [pc, #460]	; (8004e20 <I2C_ITSlaveCplt+0x280>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d059      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a71      	ldr	r2, [pc, #452]	; (8004e24 <I2C_ITSlaveCplt+0x284>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d053      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a6f      	ldr	r2, [pc, #444]	; (8004e28 <I2C_ITSlaveCplt+0x288>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d04d      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a6d      	ldr	r2, [pc, #436]	; (8004e2c <I2C_ITSlaveCplt+0x28c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d047      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a6b      	ldr	r2, [pc, #428]	; (8004e30 <I2C_ITSlaveCplt+0x290>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d041      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a69      	ldr	r2, [pc, #420]	; (8004e34 <I2C_ITSlaveCplt+0x294>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d03b      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a67      	ldr	r2, [pc, #412]	; (8004e38 <I2C_ITSlaveCplt+0x298>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d035      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a65      	ldr	r2, [pc, #404]	; (8004e3c <I2C_ITSlaveCplt+0x29c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d02f      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a63      	ldr	r2, [pc, #396]	; (8004e40 <I2C_ITSlaveCplt+0x2a0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d029      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a61      	ldr	r2, [pc, #388]	; (8004e44 <I2C_ITSlaveCplt+0x2a4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d023      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a5f      	ldr	r2, [pc, #380]	; (8004e48 <I2C_ITSlaveCplt+0x2a8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a5d      	ldr	r2, [pc, #372]	; (8004e4c <I2C_ITSlaveCplt+0x2ac>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d017      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5b      	ldr	r2, [pc, #364]	; (8004e50 <I2C_ITSlaveCplt+0x2b0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d011      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a59      	ldr	r2, [pc, #356]	; (8004e54 <I2C_ITSlaveCplt+0x2b4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a57      	ldr	r2, [pc, #348]	; (8004e58 <I2C_ITSlaveCplt+0x2b8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d005      	beq.n	8004d0c <I2C_ITSlaveCplt+0x16c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a55      	ldr	r2, [pc, #340]	; (8004e5c <I2C_ITSlaveCplt+0x2bc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d105      	bne.n	8004d18 <I2C_ITSlaveCplt+0x178>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	e004      	b.n	8004d22 <I2C_ITSlaveCplt+0x182>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	8553      	strh	r3, [r2, #42]	; 0x2a
 8004d26:	e0a2      	b.n	8004e6e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	0bdb      	lsrs	r3, r3, #15
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 809c 	beq.w	8004e6e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 808f 	beq.w	8004e6e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a32      	ldr	r2, [pc, #200]	; (8004e20 <I2C_ITSlaveCplt+0x280>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d059      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a30      	ldr	r2, [pc, #192]	; (8004e24 <I2C_ITSlaveCplt+0x284>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d053      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2e      	ldr	r2, [pc, #184]	; (8004e28 <I2C_ITSlaveCplt+0x288>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d04d      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <I2C_ITSlaveCplt+0x28c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d047      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <I2C_ITSlaveCplt+0x290>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d041      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a28      	ldr	r2, [pc, #160]	; (8004e34 <I2C_ITSlaveCplt+0x294>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d03b      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <I2C_ITSlaveCplt+0x298>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d035      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a24      	ldr	r2, [pc, #144]	; (8004e3c <I2C_ITSlaveCplt+0x29c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d02f      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a22      	ldr	r2, [pc, #136]	; (8004e40 <I2C_ITSlaveCplt+0x2a0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d029      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a20      	ldr	r2, [pc, #128]	; (8004e44 <I2C_ITSlaveCplt+0x2a4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d023      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1e      	ldr	r2, [pc, #120]	; (8004e48 <I2C_ITSlaveCplt+0x2a8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d01d      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1c      	ldr	r2, [pc, #112]	; (8004e4c <I2C_ITSlaveCplt+0x2ac>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d017      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1a      	ldr	r2, [pc, #104]	; (8004e50 <I2C_ITSlaveCplt+0x2b0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d011      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <I2C_ITSlaveCplt+0x2b4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <I2C_ITSlaveCplt+0x2b8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d005      	beq.n	8004e10 <I2C_ITSlaveCplt+0x270>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <I2C_ITSlaveCplt+0x2bc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d127      	bne.n	8004e60 <I2C_ITSlaveCplt+0x2c0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	e026      	b.n	8004e6a <I2C_ITSlaveCplt+0x2ca>
 8004e1c:	fe00e800 	.word	0xfe00e800
 8004e20:	40020010 	.word	0x40020010
 8004e24:	40020028 	.word	0x40020028
 8004e28:	40020040 	.word	0x40020040
 8004e2c:	40020058 	.word	0x40020058
 8004e30:	40020070 	.word	0x40020070
 8004e34:	40020088 	.word	0x40020088
 8004e38:	400200a0 	.word	0x400200a0
 8004e3c:	400200b8 	.word	0x400200b8
 8004e40:	40020410 	.word	0x40020410
 8004e44:	40020428 	.word	0x40020428
 8004e48:	40020440 	.word	0x40020440
 8004e4c:	40020458 	.word	0x40020458
 8004e50:	40020470 	.word	0x40020470
 8004e54:	40020488 	.word	0x40020488
 8004e58:	400204a0 	.word	0x400204a0
 8004e5c:	400204b8 	.word	0x400204b8
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d020      	beq.n	8004ebc <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 0304 	bic.w	r3, r3, #4
 8004e80:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	f043 0204 	orr.w	r2, r3, #4
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d010      	beq.n	8004f0a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f8a4 	bl	800503c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b28      	cmp	r3, #40	; 0x28
 8004efe:	d141      	bne.n	8004f84 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f00:	6979      	ldr	r1, [r7, #20]
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f844 	bl	8004f90 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f08:	e03c      	b.n	8004f84 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f12:	d014      	beq.n	8004f3e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff fde5 	bl	8004ae4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <I2C_ITSlaveCplt+0x3ec>)
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff fc2f 	bl	800479a <HAL_I2C_ListenCpltCallback>
}
 8004f3c:	e022      	b.n	8004f84 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b22      	cmp	r3, #34	; 0x22
 8004f48:	d10e      	bne.n	8004f68 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fc02 	bl	800476a <HAL_I2C_SlaveRxCpltCallback>
}
 8004f66:	e00d      	b.n	8004f84 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fbe9 	bl	8004756 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f84:	bf00      	nop
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	ffff0000 	.word	0xffff0000

08004f90 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <I2C_ITListenCplt+0xa8>)
 8004f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	089b      	lsrs	r3, r3, #2
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d022      	beq.n	800500e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d012      	beq.n	800500e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f043 0204 	orr.w	r2, r3, #4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800500e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f94b 	bl	80052ae <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2210      	movs	r2, #16
 800501e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fbb6 	bl	800479a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	ffff0000 	.word	0xffff0000

0800503c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a5d      	ldr	r2, [pc, #372]	; (80051d0 <I2C_ITError+0x194>)
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b28      	cmp	r3, #40	; 0x28
 8005072:	d005      	beq.n	8005080 <I2C_ITError+0x44>
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b29      	cmp	r3, #41	; 0x29
 8005078:	d002      	beq.n	8005080 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b2a      	cmp	r3, #42	; 0x2a
 800507e:	d10b      	bne.n	8005098 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005080:	2103      	movs	r1, #3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f913 	bl	80052ae <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2228      	movs	r2, #40	; 0x28
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a50      	ldr	r2, [pc, #320]	; (80051d4 <I2C_ITError+0x198>)
 8005094:	635a      	str	r2, [r3, #52]	; 0x34
 8005096:	e011      	b.n	80050bc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005098:	f248 0103 	movw	r1, #32771	; 0x8003
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f906 	bl	80052ae <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b60      	cmp	r3, #96	; 0x60
 80050ac:	d003      	beq.n	80050b6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d039      	beq.n	800513e <I2C_ITError+0x102>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b11      	cmp	r3, #17
 80050ce:	d002      	beq.n	80050d6 <I2C_ITError+0x9a>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b21      	cmp	r3, #33	; 0x21
 80050d4:	d133      	bne.n	800513e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e4:	d107      	bne.n	80050f6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fdde 	bl	8003cbc <HAL_DMA_GetState>
 8005100:	4603      	mov	r3, r0
 8005102:	2b01      	cmp	r3, #1
 8005104:	d017      	beq.n	8005136 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	4a33      	ldr	r2, [pc, #204]	; (80051d8 <I2C_ITError+0x19c>)
 800510c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd fc60 	bl	80029e0 <HAL_DMA_Abort_IT>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d04d      	beq.n	80051c2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005134:	e045      	b.n	80051c2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f850 	bl	80051dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800513c:	e041      	b.n	80051c2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d039      	beq.n	80051ba <I2C_ITError+0x17e>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b12      	cmp	r3, #18
 800514a:	d002      	beq.n	8005152 <I2C_ITError+0x116>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b22      	cmp	r3, #34	; 0x22
 8005150:	d133      	bne.n	80051ba <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005160:	d107      	bne.n	8005172 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005170:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fda0 	bl	8003cbc <HAL_DMA_GetState>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d017      	beq.n	80051b2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <I2C_ITError+0x19c>)
 8005188:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd fc22 	bl	80029e0 <HAL_DMA_Abort_IT>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051ac:	4610      	mov	r0, r2
 80051ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051b0:	e009      	b.n	80051c6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f812 	bl	80051dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051b8:	e005      	b.n	80051c6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f80e 	bl	80051dc <I2C_TreatErrorCallback>
  }
}
 80051c0:	e002      	b.n	80051c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051c6:	bf00      	nop
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	ffff0000 	.word	0xffff0000
 80051d4:	080047d7 	.word	0x080047d7
 80051d8:	08005273 	.word	0x08005273

080051dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b60      	cmp	r3, #96	; 0x60
 80051ee:	d10e      	bne.n	800520e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fadb 	bl	80047c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800520c:	e009      	b.n	8005222 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fac6 	bl	80047ae <HAL_I2C_ErrorCallback>
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d103      	bne.n	8005248 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2200      	movs	r2, #0
 8005246:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b01      	cmp	r3, #1
 8005254:	d007      	beq.n	8005266 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699a      	ldr	r2, [r3, #24]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0201 	orr.w	r2, r2, #1
 8005264:	619a      	str	r2, [r3, #24]
  }
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	2200      	movs	r2, #0
 800528e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	2200      	movs	r2, #0
 800529e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff ff9b 	bl	80051dc <I2C_TreatErrorCallback>
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80052be:	887b      	ldrh	r3, [r7, #2]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00f      	beq.n	80052e8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80052ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052dc:	2b28      	cmp	r3, #40	; 0x28
 80052de:	d003      	beq.n	80052e8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80052e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80052e8:	887b      	ldrh	r3, [r7, #2]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00f      	beq.n	8005312 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80052f8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005306:	2b28      	cmp	r3, #40	; 0x28
 8005308:	d003      	beq.n	8005312 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005310:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005312:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005316:	2b00      	cmp	r3, #0
 8005318:	da03      	bge.n	8005322 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005320:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005322:	887b      	ldrh	r3, [r7, #2]
 8005324:	2b10      	cmp	r3, #16
 8005326:	d103      	bne.n	8005330 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800532e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005330:	887b      	ldrh	r3, [r7, #2]
 8005332:	2b20      	cmp	r3, #32
 8005334:	d103      	bne.n	800533e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f043 0320 	orr.w	r3, r3, #32
 800533c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d103      	bne.n	800534c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6819      	ldr	r1, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	43da      	mvns	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	400a      	ands	r2, r1
 800535c:	601a      	str	r2, [r3, #0]
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b20      	cmp	r3, #32
 800537e:	d138      	bne.n	80053f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800538a:	2302      	movs	r3, #2
 800538c:	e032      	b.n	80053f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2224      	movs	r2, #36	; 0x24
 800539a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b20      	cmp	r3, #32
 8005414:	d139      	bne.n	800548a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005420:	2302      	movs	r3, #2
 8005422:	e033      	b.n	800548c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2224      	movs	r2, #36	; 0x24
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0201 	bic.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005452:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
  }
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549a:	b08f      	sub	sp, #60	; 0x3c
 800549c:	af0a      	add	r7, sp, #40	; 0x28
 800549e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e116      	b.n	80056d8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f00c fe83 	bl	80121d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2203      	movs	r2, #3
 80054ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f009 fb16 	bl	800eb1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	687e      	ldr	r6, [r7, #4]
 80054f6:	466d      	mov	r5, sp
 80054f8:	f106 0410 	add.w	r4, r6, #16
 80054fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005508:	e885 0003 	stmia.w	r5, {r0, r1}
 800550c:	1d33      	adds	r3, r6, #4
 800550e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005510:	6838      	ldr	r0, [r7, #0]
 8005512:	f009 f9e1 	bl	800e8d8 <USB_CoreInit>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0d7      	b.n	80056d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f009 fb04 	bl	800eb3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005534:	2300      	movs	r3, #0
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	e04a      	b.n	80055d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800553a:	7bfa      	ldrb	r2, [r7, #15]
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	333d      	adds	r3, #61	; 0x3d
 800554a:	2201      	movs	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800554e:	7bfa      	ldrb	r2, [r7, #15]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	333c      	adds	r3, #60	; 0x3c
 800555e:	7bfa      	ldrb	r2, [r7, #15]
 8005560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005562:	7bfa      	ldrb	r2, [r7, #15]
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	b298      	uxth	r0, r3
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3342      	adds	r3, #66	; 0x42
 8005576:	4602      	mov	r2, r0
 8005578:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800557a:	7bfa      	ldrb	r2, [r7, #15]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	333f      	adds	r3, #63	; 0x3f
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800558e:	7bfa      	ldrb	r2, [r7, #15]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	3344      	adds	r3, #68	; 0x44
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055a2:	7bfa      	ldrb	r2, [r7, #15]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	3348      	adds	r3, #72	; 0x48
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055b6:	7bfa      	ldrb	r2, [r7, #15]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	3350      	adds	r3, #80	; 0x50
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	3301      	adds	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
 80055d0:	7bfa      	ldrb	r2, [r7, #15]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d3af      	bcc.n	800553a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
 80055de:	e044      	b.n	800566a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055e0:	7bfa      	ldrb	r2, [r7, #15]
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055f6:	7bfa      	ldrb	r2, [r7, #15]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005608:	7bfa      	ldrb	r2, [r7, #15]
 800560a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800560c:	7bfa      	ldrb	r2, [r7, #15]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005622:	7bfa      	ldrb	r2, [r7, #15]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005638:	7bfa      	ldrb	r2, [r7, #15]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800564e:	7bfa      	ldrb	r2, [r7, #15]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	3301      	adds	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
 800566a:	7bfa      	ldrb	r2, [r7, #15]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d3b5      	bcc.n	80055e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	687e      	ldr	r6, [r7, #4]
 800567c:	466d      	mov	r5, sp
 800567e:	f106 0410 	add.w	r4, r6, #16
 8005682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800568a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800568e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005692:	1d33      	adds	r3, r6, #4
 8005694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005696:	6838      	ldr	r0, [r7, #0]
 8005698:	f009 fa7a 	bl	800eb90 <USB_DevInit>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e014      	b.n	80056d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d102      	bne.n	80056cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 f892 	bl	80067f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f00a fafa 	bl	800fcca <USB_DevDisconnect>

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_PCD_Start+0x1c>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e020      	b.n	800573e <HAL_PCD_Start+0x5e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	2b01      	cmp	r3, #1
 800570a:	d109      	bne.n	8005720 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005710:	2b01      	cmp	r3, #1
 8005712:	d005      	beq.n	8005720 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f009 f9e7 	bl	800eaf8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f00a faaa 	bl	800fc88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005746:	b590      	push	{r4, r7, lr}
 8005748:	b08d      	sub	sp, #52	; 0x34
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f00a fb68 	bl	800fe32 <USB_GetMode>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 83ca 	bne.w	8005efe <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f00a facc 	bl	800fd0c <USB_ReadInterrupts>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 83c0 	beq.w	8005efc <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f00a fac3 	bl	800fd0c <USB_ReadInterrupts>
 8005786:	4603      	mov	r3, r0
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d107      	bne.n	80057a0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f002 0202 	and.w	r2, r2, #2
 800579e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f00a fab1 	bl	800fd0c <USB_ReadInterrupts>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d161      	bne.n	8005878 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0210 	bic.w	r2, r2, #16
 80057c2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f003 020f 	and.w	r2, r3, #15
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4413      	add	r3, r2
 80057e0:	3304      	adds	r3, #4
 80057e2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	0c5b      	lsrs	r3, r3, #17
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d124      	bne.n	800583a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d035      	beq.n	8005868 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800580a:	b29b      	uxth	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	6a38      	ldr	r0, [r7, #32]
 8005810:	f00a f8e8 	bl	800f9e4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	091b      	lsrs	r3, r3, #4
 800581c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005820:	441a      	add	r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005832:	441a      	add	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	619a      	str	r2, [r3, #24]
 8005838:	e016      	b.n	8005868 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	0c5b      	lsrs	r3, r3, #17
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	2b06      	cmp	r3, #6
 8005844:	d110      	bne.n	8005868 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800584c:	2208      	movs	r2, #8
 800584e:	4619      	mov	r1, r3
 8005850:	6a38      	ldr	r0, [r7, #32]
 8005852:	f00a f8c7 	bl	800f9e4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	091b      	lsrs	r3, r3, #4
 800585e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005862:	441a      	add	r2, r3
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0210 	orr.w	r2, r2, #16
 8005876:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f00a fa45 	bl	800fd0c <USB_ReadInterrupts>
 8005882:	4603      	mov	r3, r0
 8005884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005888:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800588c:	d16e      	bne.n	800596c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f00a fa4b 	bl	800fd32 <USB_ReadDevAllOutEpInterrupt>
 800589c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800589e:	e062      	b.n	8005966 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d057      	beq.n	800595a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	4611      	mov	r1, r2
 80058b4:	4618      	mov	r0, r3
 80058b6:	f00a fa70 	bl	800fd9a <USB_ReadDevOutEPInterrupt>
 80058ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00c      	beq.n	80058e0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	461a      	mov	r2, r3
 80058d4:	2301      	movs	r3, #1
 80058d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80058d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fdde 	bl	800649c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00c      	beq.n	8005904 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f6:	461a      	mov	r2, r3
 80058f8:	2308      	movs	r3, #8
 80058fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fed8 	bl	80066b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	461a      	mov	r2, r3
 800591c:	2310      	movs	r3, #16
 800591e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	461a      	mov	r2, r3
 8005938:	2320      	movs	r3, #32
 800593a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	461a      	mov	r2, r3
 8005954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005958:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	3301      	adds	r3, #1
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	2b00      	cmp	r3, #0
 800596a:	d199      	bne.n	80058a0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f00a f9cb 	bl	800fd0c <USB_ReadInterrupts>
 8005976:	4603      	mov	r3, r0
 8005978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800597c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005980:	f040 80c0 	bne.w	8005b04 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f00a f9ec 	bl	800fd66 <USB_ReadDevAllInEpInterrupt>
 800598e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005994:	e0b2      	b.n	8005afc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80a7 	beq.w	8005af0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f00a fa12 	bl	800fdd6 <USB_ReadDevInEPInterrupt>
 80059b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d057      	beq.n	8005a6e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	2201      	movs	r2, #1
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	43db      	mvns	r3, r3
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059de:	4013      	ands	r3, r2
 80059e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	461a      	mov	r2, r3
 80059f0:	2301      	movs	r3, #1
 80059f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d132      	bne.n	8005a62 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	3348      	adds	r3, #72	; 0x48
 8005a0c:	6819      	ldr	r1, [r3, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a12:	4613      	mov	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4403      	add	r3, r0
 8005a1c:	3344      	adds	r3, #68	; 0x44
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4419      	add	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	4613      	mov	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4403      	add	r3, r0
 8005a30:	3348      	adds	r3, #72	; 0x48
 8005a32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d113      	bne.n	8005a62 <HAL_PCD_IRQHandler+0x31c>
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	3350      	adds	r3, #80	; 0x50
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	f00a fa1b 	bl	800fe98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f00c fc4e 	bl	801230a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	461a      	mov	r2, r3
 8005a86:	2308      	movs	r3, #8
 8005a88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2310      	movs	r3, #16
 8005aa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	461a      	mov	r2, r3
 8005abe:	2340      	movs	r3, #64	; 0x40
 8005ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2302      	movs	r3, #2
 8005adc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fc48 	bl	8006380 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	3301      	adds	r3, #1
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f47f af49 	bne.w	8005996 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f00a f8ff 	bl	800fd0c <USB_ReadInterrupts>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b18:	d122      	bne.n	8005b60 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d108      	bne.n	8005b4a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b40:	2100      	movs	r1, #0
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fe78 	bl	8006838 <HAL_PCDEx_LPM_Callback>
 8005b48:	e002      	b.n	8005b50 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f00c fc54 	bl	80123f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f00a f8d1 	bl	800fd0c <USB_ReadInterrupts>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b74:	d112      	bne.n	8005b9c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d102      	bne.n	8005b8c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f00c fc10 	bl	80123ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695a      	ldr	r2, [r3, #20]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f00a f8b3 	bl	800fd0c <USB_ReadInterrupts>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bb0:	d121      	bne.n	8005bf6 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005bc0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d111      	bne.n	8005bf0 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	f003 020f 	and.w	r2, r3, #15
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005be6:	2101      	movs	r1, #1
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fe25 	bl	8006838 <HAL_PCDEx_LPM_Callback>
 8005bee:	e002      	b.n	8005bf6 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f00c fbdb 	bl	80123ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f00a f886 	bl	800fd0c <USB_ReadInterrupts>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	f040 80c7 	bne.w	8005d9c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c1c:	f023 0301 	bic.w	r3, r3, #1
 8005c20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2110      	movs	r1, #16
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f009 f90f 	bl	800ee4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c32:	e056      	b.n	8005ce2 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	461a      	mov	r2, r3
 8005c42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c66:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	461a      	mov	r2, r3
 8005c96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	3301      	adds	r3, #1
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d3a3      	bcc.n	8005c34 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005cfe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d016      	beq.n	8005d36 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d18:	f043 030b 	orr.w	r3, r3, #11
 8005d1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d2e:	f043 030b 	orr.w	r3, r3, #11
 8005d32:	6453      	str	r3, [r2, #68]	; 0x44
 8005d34:	e015      	b.n	8005d62 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	695a      	ldr	r2, [r3, #20]
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d44:	4619      	mov	r1, r3
 8005d46:	f242 032b 	movw	r3, #8235	; 0x202b
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5c:	f043 030b 	orr.w	r3, r3, #11
 8005d60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d86:	461a      	mov	r2, r3
 8005d88:	f00a f886 	bl	800fe98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695a      	ldr	r2, [r3, #20]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f009 ffb3 	bl	800fd0c <USB_ReadInterrupts>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db0:	d124      	bne.n	8005dfc <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f00a f84a 	bl	800fe50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f009 f8a4 	bl	800ef0e <USB_GetDevSpeed>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681c      	ldr	r4, [r3, #0]
 8005dd2:	f001 fce7 	bl	80077a4 <HAL_RCC_GetHCLKFreq>
 8005dd6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	4620      	mov	r0, r4
 8005de2:	f008 fde7 	bl	800e9b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f00c fab7 	bl	801235a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f009 ff83 	bl	800fd0c <USB_ReadInterrupts>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d10a      	bne.n	8005e26 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f00c fa94 	bl	801233e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f002 0208 	and.w	r2, r2, #8
 8005e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f009 ff6e 	bl	800fd0c <USB_ReadInterrupts>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e3a:	d10f      	bne.n	8005e5c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f00c faf6 	bl	8012438 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695a      	ldr	r2, [r3, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f009 ff53 	bl	800fd0c <USB_ReadInterrupts>
 8005e66:	4603      	mov	r3, r0
 8005e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e70:	d10f      	bne.n	8005e92 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f00c fac9 	bl	8012414 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f009 ff38 	bl	800fd0c <USB_ReadInterrupts>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea6:	d10a      	bne.n	8005ebe <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f00c fad7 	bl	801245c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f009 ff22 	bl	800fd0c <USB_ReadInterrupts>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d115      	bne.n	8005efe <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f00c fac7 	bl	8012478 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6859      	ldr	r1, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	e000      	b.n	8005efe <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005efc:	bf00      	nop
    }
  }
}
 8005efe:	3734      	adds	r7, #52	; 0x34
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd90      	pop	{r4, r7, pc}

08005f04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_PCD_SetAddress+0x1a>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e013      	b.n	8005f46 <HAL_PCD_SetAddress+0x42>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	78fa      	ldrb	r2, [r7, #3]
 8005f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	4611      	mov	r1, r2
 8005f36:	4618      	mov	r0, r3
 8005f38:	f009 fe80 	bl	800fc3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	4608      	mov	r0, r1
 8005f58:	4611      	mov	r1, r2
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	70fb      	strb	r3, [r7, #3]
 8005f60:	460b      	mov	r3, r1
 8005f62:	803b      	strh	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	da0f      	bge.n	8005f94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	f003 020f 	and.w	r2, r3, #15
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	3338      	adds	r3, #56	; 0x38
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	4413      	add	r3, r2
 8005f88:	3304      	adds	r3, #4
 8005f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	705a      	strb	r2, [r3, #1]
 8005f92:	e00f      	b.n	8005fb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	f003 020f 	and.w	r2, r3, #15
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	4413      	add	r3, r2
 8005faa:	3304      	adds	r3, #4
 8005fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005fc0:	883a      	ldrh	r2, [r7, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	78ba      	ldrb	r2, [r7, #2]
 8005fca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d004      	beq.n	8005fde <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fde:	78bb      	ldrb	r3, [r7, #2]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d102      	bne.n	8005fea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_PCD_EP_Open+0xaa>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e00e      	b.n	8006016 <HAL_PCD_EP_Open+0xc8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68f9      	ldr	r1, [r7, #12]
 8006006:	4618      	mov	r0, r3
 8006008:	f008 ffa6 	bl	800ef58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006014:	7afb      	ldrb	r3, [r7, #11]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800602a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800602e:	2b00      	cmp	r3, #0
 8006030:	da0f      	bge.n	8006052 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	f003 020f 	and.w	r2, r3, #15
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	3338      	adds	r3, #56	; 0x38
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	4413      	add	r3, r2
 8006046:	3304      	adds	r3, #4
 8006048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	705a      	strb	r2, [r3, #1]
 8006050:	e00f      	b.n	8006072 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	f003 020f 	and.w	r2, r3, #15
 8006058:	4613      	mov	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	4413      	add	r3, r2
 8006068:	3304      	adds	r3, #4
 800606a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	b2da      	uxtb	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_PCD_EP_Close+0x6e>
 8006088:	2302      	movs	r3, #2
 800608a:	e00e      	b.n	80060aa <HAL_PCD_EP_Close+0x8c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	4618      	mov	r0, r3
 800609c:	f008 ffe4 	bl	800f068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
 80060be:	460b      	mov	r3, r1
 80060c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	f003 020f 	and.w	r2, r3, #15
 80060c8:	4613      	mov	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	3304      	adds	r3, #4
 80060da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2200      	movs	r2, #0
 80060ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060f4:	7afb      	ldrb	r3, [r7, #11]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d102      	bne.n	800610e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	461a      	mov	r2, r3
 8006124:	6979      	ldr	r1, [r7, #20]
 8006126:	f009 fac7 	bl	800f6b8 <USB_EP0StartXfer>
 800612a:	e008      	b.n	800613e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	6979      	ldr	r1, [r7, #20]
 800613a:	f009 f871 	bl	800f220 <USB_EPStartXfer>
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	f003 020f 	and.w	r2, r3, #15
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800616a:	681b      	ldr	r3, [r3, #0]
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	460b      	mov	r3, r1
 8006186:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	f003 020f 	and.w	r2, r3, #15
 800618e:	4613      	mov	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	3338      	adds	r3, #56	; 0x38
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	3304      	adds	r3, #4
 800619e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2200      	movs	r2, #0
 80061b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2201      	movs	r2, #1
 80061b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d102      	bne.n	80061d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061d2:	7afb      	ldrb	r3, [r7, #11]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	6979      	ldr	r1, [r7, #20]
 80061ea:	f009 fa65 	bl	800f6b8 <USB_EP0StartXfer>
 80061ee:	e008      	b.n	8006202 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	6979      	ldr	r1, [r7, #20]
 80061fe:	f009 f80f 	bl	800f220 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	f003 020f 	and.w	r2, r3, #15
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	429a      	cmp	r2, r3
 8006224:	d901      	bls.n	800622a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e050      	b.n	80062cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800622a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800622e:	2b00      	cmp	r3, #0
 8006230:	da0f      	bge.n	8006252 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006232:	78fb      	ldrb	r3, [r7, #3]
 8006234:	f003 020f 	and.w	r2, r3, #15
 8006238:	4613      	mov	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	3338      	adds	r3, #56	; 0x38
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4413      	add	r3, r2
 8006246:	3304      	adds	r3, #4
 8006248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	705a      	strb	r2, [r3, #1]
 8006250:	e00d      	b.n	800626e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006252:	78fa      	ldrb	r2, [r7, #3]
 8006254:	4613      	mov	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	3304      	adds	r3, #4
 8006266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	b2da      	uxtb	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_PCD_EP_SetStall+0x82>
 800628a:	2302      	movs	r3, #2
 800628c:	e01e      	b.n	80062cc <HAL_PCD_EP_SetStall+0xc0>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68f9      	ldr	r1, [r7, #12]
 800629c:	4618      	mov	r0, r3
 800629e:	f009 fbf9 	bl	800fa94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	b2d9      	uxtb	r1, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062bc:	461a      	mov	r2, r3
 80062be:	f009 fdeb 	bl	800fe98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	f003 020f 	and.w	r2, r3, #15
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d901      	bls.n	80062f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e042      	b.n	8006378 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	da0f      	bge.n	800631a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	f003 020f 	and.w	r2, r3, #15
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	3338      	adds	r3, #56	; 0x38
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	4413      	add	r3, r2
 800630e:	3304      	adds	r3, #4
 8006310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	705a      	strb	r2, [r3, #1]
 8006318:	e00f      	b.n	800633a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	f003 020f 	and.w	r2, r3, #15
 8006320:	4613      	mov	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4413      	add	r3, r2
 8006330:	3304      	adds	r3, #4
 8006332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_PCD_EP_ClrStall+0x86>
 8006356:	2302      	movs	r3, #2
 8006358:	e00e      	b.n	8006378 <HAL_PCD_EP_ClrStall+0xa4>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	4618      	mov	r0, r3
 800636a:	f009 fc01 	bl	800fb70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af02      	add	r7, sp, #8
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	4613      	mov	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	3338      	adds	r3, #56	; 0x38
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	4413      	add	r3, r2
 80063a4:	3304      	adds	r3, #4
 80063a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699a      	ldr	r2, [r3, #24]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d901      	bls.n	80063b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e06c      	b.n	8006492 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d902      	bls.n	80063d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	3303      	adds	r3, #3
 80063d8:	089b      	lsrs	r3, r3, #2
 80063da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063dc:	e02b      	b.n	8006436 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	695a      	ldr	r2, [r3, #20]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d902      	bls.n	80063fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	3303      	adds	r3, #3
 80063fe:	089b      	lsrs	r3, r3, #2
 8006400:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68d9      	ldr	r1, [r3, #12]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006412:	b2db      	uxtb	r3, r3
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4603      	mov	r3, r0
 8006418:	6978      	ldr	r0, [r7, #20]
 800641a:	f009 faa5 	bl	800f968 <USB_WritePacket>

    ep->xfer_buff  += len;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	441a      	add	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	441a      	add	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	b29b      	uxth	r3, r3
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	429a      	cmp	r2, r3
 800644a:	d809      	bhi.n	8006460 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006454:	429a      	cmp	r2, r3
 8006456:	d203      	bcs.n	8006460 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1be      	bne.n	80063de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	429a      	cmp	r2, r3
 800646a:	d811      	bhi.n	8006490 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	2201      	movs	r2, #1
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	43db      	mvns	r3, r3
 8006486:	6939      	ldr	r1, [r7, #16]
 8006488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800648c:	4013      	ands	r3, r2
 800648e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	333c      	adds	r3, #60	; 0x3c
 80064b4:	3304      	adds	r3, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	f040 80a0 	bne.w	8006614 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d015      	beq.n	800650a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a72      	ldr	r2, [pc, #456]	; (80066ac <PCD_EP_OutXfrComplete_int+0x210>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	f240 80dd 	bls.w	80066a2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80d7 	beq.w	80066a2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006500:	461a      	mov	r2, r3
 8006502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006506:	6093      	str	r3, [r2, #8]
 8006508:	e0cb      	b.n	80066a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d009      	beq.n	8006528 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	461a      	mov	r2, r3
 8006522:	2320      	movs	r3, #32
 8006524:	6093      	str	r3, [r2, #8]
 8006526:	e0bc      	b.n	80066a2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800652e:	2b00      	cmp	r3, #0
 8006530:	f040 80b7 	bne.w	80066a2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a5d      	ldr	r2, [pc, #372]	; (80066ac <PCD_EP_OutXfrComplete_int+0x210>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d90f      	bls.n	800655c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006552:	461a      	mov	r2, r3
 8006554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006558:	6093      	str	r3, [r2, #8]
 800655a:	e0a2      	b.n	80066a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800656e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	0159      	lsls	r1, r3, #5
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	440b      	add	r3, r1
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006582:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4403      	add	r3, r0
 8006592:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006596:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	1a9b      	subs	r3, r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80065aa:	6819      	ldr	r1, [r3, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4403      	add	r3, r0
 80065ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4419      	add	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	4613      	mov	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4403      	add	r3, r0
 80065d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80065d4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d114      	bne.n	8006606 <PCD_EP_OutXfrComplete_int+0x16a>
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d108      	bne.n	8006606 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065fe:	461a      	mov	r2, r3
 8006600:	2101      	movs	r1, #1
 8006602:	f009 fc49 	bl	800fe98 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f00b fe61 	bl	80122d4 <HAL_PCD_DataOutStageCallback>
 8006612:	e046      	b.n	80066a2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4a26      	ldr	r2, [pc, #152]	; (80066b0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d124      	bne.n	8006666 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	461a      	mov	r2, r3
 8006634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006638:	6093      	str	r3, [r2, #8]
 800663a:	e032      	b.n	80066a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006652:	461a      	mov	r2, r3
 8006654:	2320      	movs	r3, #32
 8006656:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f00b fe38 	bl	80122d4 <HAL_PCD_DataOutStageCallback>
 8006664:	e01d      	b.n	80066a2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d114      	bne.n	8006696 <PCD_EP_OutXfrComplete_int+0x1fa>
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d108      	bne.n	8006696 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800668e:	461a      	mov	r2, r3
 8006690:	2100      	movs	r1, #0
 8006692:	f009 fc01 	bl	800fe98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f00b fe19 	bl	80122d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	4f54300a 	.word	0x4f54300a
 80066b0:	4f54310a 	.word	0x4f54310a

080066b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	333c      	adds	r3, #60	; 0x3c
 80066cc:	3304      	adds	r3, #4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4a15      	ldr	r2, [pc, #84]	; (800673c <PCD_EP_OutSetupPacket_int+0x88>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d90e      	bls.n	8006708 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006706:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f00b fdd1 	bl	80122b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4a0a      	ldr	r2, [pc, #40]	; (800673c <PCD_EP_OutSetupPacket_int+0x88>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d90c      	bls.n	8006730 <PCD_EP_OutSetupPacket_int+0x7c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d108      	bne.n	8006730 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006728:	461a      	mov	r2, r3
 800672a:	2101      	movs	r1, #1
 800672c:	f009 fbb4 	bl	800fe98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	4f54300a 	.word	0x4f54300a

08006740 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
 800674c:	4613      	mov	r3, r2
 800674e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800675e:	883b      	ldrh	r3, [r7, #0]
 8006760:	0419      	lsls	r1, r3, #16
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	430a      	orrs	r2, r1
 800676a:	629a      	str	r2, [r3, #40]	; 0x28
 800676c:	e028      	b.n	80067c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4413      	add	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]
 8006780:	e00d      	b.n	800679e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	3340      	adds	r3, #64	; 0x40
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	3301      	adds	r3, #1
 800679c:	73fb      	strb	r3, [r7, #15]
 800679e:	7bfa      	ldrb	r2, [r7, #15]
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d3ec      	bcc.n	8006782 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80067a8:	883b      	ldrh	r3, [r7, #0]
 80067aa:	0418      	lsls	r0, r3, #16
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6819      	ldr	r1, [r3, #0]
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	4302      	orrs	r2, r0
 80067b8:	3340      	adds	r3, #64	; 0x40
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	887a      	ldrh	r2, [r7, #2]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800681e:	4b05      	ldr	r3, [pc, #20]	; (8006834 <HAL_PCDEx_ActivateLPM+0x44>)
 8006820:	4313      	orrs	r3, r2
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	10000003 	.word	0x10000003

08006838 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006858:	4b29      	ldr	r3, [pc, #164]	; (8006900 <HAL_PWREx_ConfigSupply+0xb0>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	2b06      	cmp	r3, #6
 8006862:	d00a      	beq.n	800687a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006864:	4b26      	ldr	r3, [pc, #152]	; (8006900 <HAL_PWREx_ConfigSupply+0xb0>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d001      	beq.n	8006876 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e040      	b.n	80068f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	e03e      	b.n	80068f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800687a:	4b21      	ldr	r3, [pc, #132]	; (8006900 <HAL_PWREx_ConfigSupply+0xb0>)
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006882:	491f      	ldr	r1, [pc, #124]	; (8006900 <HAL_PWREx_ConfigSupply+0xb0>)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4313      	orrs	r3, r2
 8006888:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800688a:	f7fb f867 	bl	800195c <HAL_GetTick>
 800688e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006890:	e009      	b.n	80068a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006892:	f7fb f863 	bl	800195c <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068a0:	d901      	bls.n	80068a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e028      	b.n	80068f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068a6:	4b16      	ldr	r3, [pc, #88]	; (8006900 <HAL_PWREx_ConfigSupply+0xb0>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b2:	d1ee      	bne.n	8006892 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b1e      	cmp	r3, #30
 80068b8:	d008      	beq.n	80068cc <HAL_PWREx_ConfigSupply+0x7c>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b2e      	cmp	r3, #46	; 0x2e
 80068be:	d005      	beq.n	80068cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b1d      	cmp	r3, #29
 80068c4:	d002      	beq.n	80068cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b2d      	cmp	r3, #45	; 0x2d
 80068ca:	d114      	bne.n	80068f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80068cc:	f7fb f846 	bl	800195c <HAL_GetTick>
 80068d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068d2:	e009      	b.n	80068e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068d4:	f7fb f842 	bl	800195c <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068e2:	d901      	bls.n	80068e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e007      	b.n	80068f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <HAL_PWREx_ConfigSupply+0xb0>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f4:	d1ee      	bne.n	80068d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	58024800 	.word	0x58024800

08006904 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	4a04      	ldr	r2, [pc, #16]	; (8006920 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800690e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006912:	60d3      	str	r3, [r2, #12]
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	58024800 	.word	0x58024800

08006924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08c      	sub	sp, #48	; 0x30
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e3ff      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8087 	beq.w	8006a52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006944:	4b99      	ldr	r3, [pc, #612]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800694e:	4b97      	ldr	r3, [pc, #604]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	2b10      	cmp	r3, #16
 8006958:	d007      	beq.n	800696a <HAL_RCC_OscConfig+0x46>
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	2b18      	cmp	r3, #24
 800695e:	d110      	bne.n	8006982 <HAL_RCC_OscConfig+0x5e>
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d10b      	bne.n	8006982 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800696a:	4b90      	ldr	r3, [pc, #576]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d06c      	beq.n	8006a50 <HAL_RCC_OscConfig+0x12c>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d168      	bne.n	8006a50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e3d9      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698a:	d106      	bne.n	800699a <HAL_RCC_OscConfig+0x76>
 800698c:	4b87      	ldr	r3, [pc, #540]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a86      	ldr	r2, [pc, #536]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	e02e      	b.n	80069f8 <HAL_RCC_OscConfig+0xd4>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10c      	bne.n	80069bc <HAL_RCC_OscConfig+0x98>
 80069a2:	4b82      	ldr	r3, [pc, #520]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a81      	ldr	r2, [pc, #516]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4b7f      	ldr	r3, [pc, #508]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a7e      	ldr	r2, [pc, #504]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	e01d      	b.n	80069f8 <HAL_RCC_OscConfig+0xd4>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069c4:	d10c      	bne.n	80069e0 <HAL_RCC_OscConfig+0xbc>
 80069c6:	4b79      	ldr	r3, [pc, #484]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a78      	ldr	r2, [pc, #480]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	4b76      	ldr	r3, [pc, #472]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a75      	ldr	r2, [pc, #468]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e00b      	b.n	80069f8 <HAL_RCC_OscConfig+0xd4>
 80069e0:	4b72      	ldr	r3, [pc, #456]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a71      	ldr	r2, [pc, #452]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	4b6f      	ldr	r3, [pc, #444]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a6e      	ldr	r2, [pc, #440]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 80069f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d013      	beq.n	8006a28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a00:	f7fa ffac 	bl	800195c <HAL_GetTick>
 8006a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a08:	f7fa ffa8 	bl	800195c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b64      	cmp	r3, #100	; 0x64
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e38d      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a1a:	4b64      	ldr	r3, [pc, #400]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0xe4>
 8006a26:	e014      	b.n	8006a52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fa ff98 	bl	800195c <HAL_GetTick>
 8006a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a30:	f7fa ff94 	bl	800195c <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b64      	cmp	r3, #100	; 0x64
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e379      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a42:	4b5a      	ldr	r3, [pc, #360]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x10c>
 8006a4e:	e000      	b.n	8006a52 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80ae 	beq.w	8006bbc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a60:	4b52      	ldr	r3, [pc, #328]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a6a:	4b50      	ldr	r3, [pc, #320]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <HAL_RCC_OscConfig+0x162>
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	2b18      	cmp	r3, #24
 8006a7a:	d13a      	bne.n	8006af2 <HAL_RCC_OscConfig+0x1ce>
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d135      	bne.n	8006af2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a86:	4b49      	ldr	r3, [pc, #292]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_RCC_OscConfig+0x17a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e34b      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9e:	f7fa ff8d 	bl	80019bc <HAL_GetREVID>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d817      	bhi.n	8006adc <HAL_RCC_OscConfig+0x1b8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b40      	cmp	r3, #64	; 0x40
 8006ab2:	d108      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x1a2>
 8006ab4:	4b3d      	ldr	r3, [pc, #244]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006abc:	4a3b      	ldr	r2, [pc, #236]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ac4:	e07a      	b.n	8006bbc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac6:	4b39      	ldr	r3, [pc, #228]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	031b      	lsls	r3, r3, #12
 8006ad4:	4935      	ldr	r1, [pc, #212]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ada:	e06f      	b.n	8006bbc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006adc:	4b33      	ldr	r3, [pc, #204]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	061b      	lsls	r3, r3, #24
 8006aea:	4930      	ldr	r1, [pc, #192]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006af0:	e064      	b.n	8006bbc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d045      	beq.n	8006b86 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006afa:	4b2c      	ldr	r3, [pc, #176]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 0219 	bic.w	r2, r3, #25
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4929      	ldr	r1, [pc, #164]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fa ff26 	bl	800195c <HAL_GetTick>
 8006b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b14:	f7fa ff22 	bl	800195c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e307      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b26:	4b21      	ldr	r3, [pc, #132]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b32:	f7fa ff43 	bl	80019bc <HAL_GetREVID>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d817      	bhi.n	8006b70 <HAL_RCC_OscConfig+0x24c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	d108      	bne.n	8006b5a <HAL_RCC_OscConfig+0x236>
 8006b48:	4b18      	ldr	r3, [pc, #96]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b50:	4a16      	ldr	r2, [pc, #88]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b56:	6053      	str	r3, [r2, #4]
 8006b58:	e030      	b.n	8006bbc <HAL_RCC_OscConfig+0x298>
 8006b5a:	4b14      	ldr	r3, [pc, #80]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	031b      	lsls	r3, r3, #12
 8006b68:	4910      	ldr	r1, [pc, #64]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	604b      	str	r3, [r1, #4]
 8006b6e:	e025      	b.n	8006bbc <HAL_RCC_OscConfig+0x298>
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	061b      	lsls	r3, r3, #24
 8006b7e:	490b      	ldr	r1, [pc, #44]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	604b      	str	r3, [r1, #4]
 8006b84:	e01a      	b.n	8006bbc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b86:	4b09      	ldr	r3, [pc, #36]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a08      	ldr	r2, [pc, #32]	; (8006bac <HAL_RCC_OscConfig+0x288>)
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b92:	f7fa fee3 	bl	800195c <HAL_GetTick>
 8006b96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b98:	e00a      	b.n	8006bb0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b9a:	f7fa fedf 	bl	800195c <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d903      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e2c4      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
 8006bac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bb0:	4ba4      	ldr	r3, [pc, #656]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ee      	bne.n	8006b9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80a9 	beq.w	8006d1c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bca:	4b9e      	ldr	r3, [pc, #632]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bd2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bd4:	4b9b      	ldr	r3, [pc, #620]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d007      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x2cc>
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	2b18      	cmp	r3, #24
 8006be4:	d13a      	bne.n	8006c5c <HAL_RCC_OscConfig+0x338>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d135      	bne.n	8006c5c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bf0:	4b94      	ldr	r3, [pc, #592]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_RCC_OscConfig+0x2e4>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	2b80      	cmp	r3, #128	; 0x80
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e296      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c08:	f7fa fed8 	bl	80019bc <HAL_GetREVID>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d817      	bhi.n	8006c46 <HAL_RCC_OscConfig+0x322>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d108      	bne.n	8006c30 <HAL_RCC_OscConfig+0x30c>
 8006c1e:	4b89      	ldr	r3, [pc, #548]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c26:	4a87      	ldr	r2, [pc, #540]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c2e:	e075      	b.n	8006d1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c30:	4b84      	ldr	r3, [pc, #528]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	069b      	lsls	r3, r3, #26
 8006c3e:	4981      	ldr	r1, [pc, #516]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c44:	e06a      	b.n	8006d1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c46:	4b7f      	ldr	r3, [pc, #508]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	061b      	lsls	r3, r3, #24
 8006c54:	497b      	ldr	r1, [pc, #492]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c5a:	e05f      	b.n	8006d1c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d042      	beq.n	8006cea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c64:	4b77      	ldr	r3, [pc, #476]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a76      	ldr	r2, [pc, #472]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fa fe74 	bl	800195c <HAL_GetTick>
 8006c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c78:	f7fa fe70 	bl	800195c <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e255      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c8a:	4b6e      	ldr	r3, [pc, #440]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c96:	f7fa fe91 	bl	80019bc <HAL_GetREVID>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d817      	bhi.n	8006cd4 <HAL_RCC_OscConfig+0x3b0>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d108      	bne.n	8006cbe <HAL_RCC_OscConfig+0x39a>
 8006cac:	4b65      	ldr	r3, [pc, #404]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006cb4:	4a63      	ldr	r2, [pc, #396]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cba:	6053      	str	r3, [r2, #4]
 8006cbc:	e02e      	b.n	8006d1c <HAL_RCC_OscConfig+0x3f8>
 8006cbe:	4b61      	ldr	r3, [pc, #388]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	069b      	lsls	r3, r3, #26
 8006ccc:	495d      	ldr	r1, [pc, #372]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	604b      	str	r3, [r1, #4]
 8006cd2:	e023      	b.n	8006d1c <HAL_RCC_OscConfig+0x3f8>
 8006cd4:	4b5b      	ldr	r3, [pc, #364]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	061b      	lsls	r3, r3, #24
 8006ce2:	4958      	ldr	r1, [pc, #352]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60cb      	str	r3, [r1, #12]
 8006ce8:	e018      	b.n	8006d1c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cea:	4b56      	ldr	r3, [pc, #344]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a55      	ldr	r2, [pc, #340]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf6:	f7fa fe31 	bl	800195c <HAL_GetTick>
 8006cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006cfe:	f7fa fe2d 	bl	800195c <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e212      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d10:	4b4c      	ldr	r3, [pc, #304]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d036      	beq.n	8006d96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d019      	beq.n	8006d64 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d30:	4b44      	ldr	r3, [pc, #272]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d34:	4a43      	ldr	r2, [pc, #268]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3c:	f7fa fe0e 	bl	800195c <HAL_GetTick>
 8006d40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d44:	f7fa fe0a 	bl	800195c <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e1ef      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d56:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0f0      	beq.n	8006d44 <HAL_RCC_OscConfig+0x420>
 8006d62:	e018      	b.n	8006d96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d64:	4b37      	ldr	r3, [pc, #220]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d68:	4a36      	ldr	r2, [pc, #216]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006d6a:	f023 0301 	bic.w	r3, r3, #1
 8006d6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d70:	f7fa fdf4 	bl	800195c <HAL_GetTick>
 8006d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d78:	f7fa fdf0 	bl	800195c <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e1d5      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d8a:	4b2e      	ldr	r3, [pc, #184]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f0      	bne.n	8006d78 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d036      	beq.n	8006e10 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d019      	beq.n	8006dde <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006daa:	4b26      	ldr	r3, [pc, #152]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a25      	ldr	r2, [pc, #148]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006db4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006db6:	f7fa fdd1 	bl	800195c <HAL_GetTick>
 8006dba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dbe:	f7fa fdcd 	bl	800195c <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e1b2      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dd0:	4b1c      	ldr	r3, [pc, #112]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0f0      	beq.n	8006dbe <HAL_RCC_OscConfig+0x49a>
 8006ddc:	e018      	b.n	8006e10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dde:	4b19      	ldr	r3, [pc, #100]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a18      	ldr	r2, [pc, #96]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006de8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dea:	f7fa fdb7 	bl	800195c <HAL_GetTick>
 8006dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006df2:	f7fa fdb3 	bl	800195c <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e198      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e04:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <HAL_RCC_OscConfig+0x520>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f0      	bne.n	8006df2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8085 	beq.w	8006f28 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e1e:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <HAL_RCC_OscConfig+0x524>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a09      	ldr	r2, [pc, #36]	; (8006e48 <HAL_RCC_OscConfig+0x524>)
 8006e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e2a:	f7fa fd97 	bl	800195c <HAL_GetTick>
 8006e2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e30:	e00c      	b.n	8006e4c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e32:	f7fa fd93 	bl	800195c <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b64      	cmp	r3, #100	; 0x64
 8006e3e:	d905      	bls.n	8006e4c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e178      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
 8006e44:	58024400 	.word	0x58024400
 8006e48:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e4c:	4b96      	ldr	r3, [pc, #600]	; (80070a8 <HAL_RCC_OscConfig+0x784>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0ec      	beq.n	8006e32 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d106      	bne.n	8006e6e <HAL_RCC_OscConfig+0x54a>
 8006e60:	4b92      	ldr	r3, [pc, #584]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e64:	4a91      	ldr	r2, [pc, #580]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006e66:	f043 0301 	orr.w	r3, r3, #1
 8006e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e6c:	e02d      	b.n	8006eca <HAL_RCC_OscConfig+0x5a6>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCC_OscConfig+0x56c>
 8006e76:	4b8d      	ldr	r3, [pc, #564]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	4a8c      	ldr	r2, [pc, #560]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006e7c:	f023 0301 	bic.w	r3, r3, #1
 8006e80:	6713      	str	r3, [r2, #112]	; 0x70
 8006e82:	4b8a      	ldr	r3, [pc, #552]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	4a89      	ldr	r2, [pc, #548]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006e88:	f023 0304 	bic.w	r3, r3, #4
 8006e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8e:	e01c      	b.n	8006eca <HAL_RCC_OscConfig+0x5a6>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b05      	cmp	r3, #5
 8006e96:	d10c      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x58e>
 8006e98:	4b84      	ldr	r3, [pc, #528]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9c:	4a83      	ldr	r2, [pc, #524]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006e9e:	f043 0304 	orr.w	r3, r3, #4
 8006ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea4:	4b81      	ldr	r3, [pc, #516]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea8:	4a80      	ldr	r2, [pc, #512]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb0:	e00b      	b.n	8006eca <HAL_RCC_OscConfig+0x5a6>
 8006eb2:	4b7e      	ldr	r3, [pc, #504]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	4a7d      	ldr	r2, [pc, #500]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ebe:	4b7b      	ldr	r3, [pc, #492]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	4a7a      	ldr	r2, [pc, #488]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006ec4:	f023 0304 	bic.w	r3, r3, #4
 8006ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d015      	beq.n	8006efe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed2:	f7fa fd43 	bl	800195c <HAL_GetTick>
 8006ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ed8:	e00a      	b.n	8006ef0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eda:	f7fa fd3f 	bl	800195c <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e122      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ef0:	4b6e      	ldr	r3, [pc, #440]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0ee      	beq.n	8006eda <HAL_RCC_OscConfig+0x5b6>
 8006efc:	e014      	b.n	8006f28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efe:	f7fa fd2d 	bl	800195c <HAL_GetTick>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f04:	e00a      	b.n	8006f1c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f06:	f7fa fd29 	bl	800195c <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e10c      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f1c:	4b63      	ldr	r3, [pc, #396]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1ee      	bne.n	8006f06 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8101 	beq.w	8007134 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f32:	4b5e      	ldr	r3, [pc, #376]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f3a:	2b18      	cmp	r3, #24
 8006f3c:	f000 80bc 	beq.w	80070b8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	f040 8095 	bne.w	8007074 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f4a:	4b58      	ldr	r3, [pc, #352]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a57      	ldr	r2, [pc, #348]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f56:	f7fa fd01 	bl	800195c <HAL_GetTick>
 8006f5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f5e:	f7fa fcfd 	bl	800195c <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e0e2      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f70:	4b4e      	ldr	r3, [pc, #312]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f0      	bne.n	8006f5e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f7c:	4b4b      	ldr	r3, [pc, #300]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f80:	4b4b      	ldr	r3, [pc, #300]	; (80070b0 <HAL_RCC_OscConfig+0x78c>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f8c:	0112      	lsls	r2, r2, #4
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	4946      	ldr	r1, [pc, #280]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	628b      	str	r3, [r1, #40]	; 0x28
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	025b      	lsls	r3, r3, #9
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	041b      	lsls	r3, r3, #16
 8006fb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	061b      	lsls	r3, r3, #24
 8006fc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fc6:	4939      	ldr	r1, [pc, #228]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006fcc:	4b37      	ldr	r3, [pc, #220]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	4a36      	ldr	r2, [pc, #216]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fd8:	4b34      	ldr	r3, [pc, #208]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fdc:	4b35      	ldr	r3, [pc, #212]	; (80070b4 <HAL_RCC_OscConfig+0x790>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fe4:	00d2      	lsls	r2, r2, #3
 8006fe6:	4931      	ldr	r1, [pc, #196]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fec:	4b2f      	ldr	r3, [pc, #188]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	f023 020c 	bic.w	r2, r3, #12
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	492c      	ldr	r1, [pc, #176]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ffe:	4b2b      	ldr	r3, [pc, #172]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	f023 0202 	bic.w	r2, r3, #2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	4928      	ldr	r1, [pc, #160]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 800700c:	4313      	orrs	r3, r2
 800700e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007010:	4b26      	ldr	r3, [pc, #152]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	4a25      	ldr	r2, [pc, #148]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8007016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701c:	4b23      	ldr	r3, [pc, #140]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4a22      	ldr	r2, [pc, #136]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8007022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007028:	4b20      	ldr	r3, [pc, #128]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	4a1f      	ldr	r2, [pc, #124]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 800702e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007034:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007040:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a19      	ldr	r2, [pc, #100]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8007046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800704a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7fa fc86 	bl	800195c <HAL_GetTick>
 8007050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007054:	f7fa fc82 	bl	800195c <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e067      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007066:	4b11      	ldr	r3, [pc, #68]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x730>
 8007072:	e05f      	b.n	8007134 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a0c      	ldr	r2, [pc, #48]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 800707a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800707e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fa fc6c 	bl	800195c <HAL_GetTick>
 8007084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007088:	f7fa fc68 	bl	800195c <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e04d      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800709a:	4b04      	ldr	r3, [pc, #16]	; (80070ac <HAL_RCC_OscConfig+0x788>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <HAL_RCC_OscConfig+0x764>
 80070a6:	e045      	b.n	8007134 <HAL_RCC_OscConfig+0x810>
 80070a8:	58024800 	.word	0x58024800
 80070ac:	58024400 	.word	0x58024400
 80070b0:	fffffc0c 	.word	0xfffffc0c
 80070b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80070b8:	4b21      	ldr	r3, [pc, #132]	; (8007140 <HAL_RCC_OscConfig+0x81c>)
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070be:	4b20      	ldr	r3, [pc, #128]	; (8007140 <HAL_RCC_OscConfig+0x81c>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d031      	beq.n	8007130 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f003 0203 	and.w	r2, r3, #3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d12a      	bne.n	8007130 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d122      	bne.n	8007130 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d11a      	bne.n	8007130 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	0a5b      	lsrs	r3, r3, #9
 80070fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007106:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007108:	429a      	cmp	r2, r3
 800710a:	d111      	bne.n	8007130 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	0c1b      	lsrs	r3, r3, #16
 8007110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800711a:	429a      	cmp	r2, r3
 800711c:	d108      	bne.n	8007130 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	0e1b      	lsrs	r3, r3, #24
 8007122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d001      	beq.n	8007134 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3730      	adds	r7, #48	; 0x30
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	58024400 	.word	0x58024400

08007144 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e19c      	b.n	8007492 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007158:	4b8a      	ldr	r3, [pc, #552]	; (8007384 <HAL_RCC_ClockConfig+0x240>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d910      	bls.n	8007188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007166:	4b87      	ldr	r3, [pc, #540]	; (8007384 <HAL_RCC_ClockConfig+0x240>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f023 020f 	bic.w	r2, r3, #15
 800716e:	4985      	ldr	r1, [pc, #532]	; (8007384 <HAL_RCC_ClockConfig+0x240>)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	4313      	orrs	r3, r2
 8007174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007176:	4b83      	ldr	r3, [pc, #524]	; (8007384 <HAL_RCC_ClockConfig+0x240>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 030f 	and.w	r3, r3, #15
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d001      	beq.n	8007188 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e184      	b.n	8007492 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d010      	beq.n	80071b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	4b7b      	ldr	r3, [pc, #492]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d908      	bls.n	80071b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071a4:	4b78      	ldr	r3, [pc, #480]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	4975      	ldr	r1, [pc, #468]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d010      	beq.n	80071e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	695a      	ldr	r2, [r3, #20]
 80071c6:	4b70      	ldr	r3, [pc, #448]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d908      	bls.n	80071e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071d2:	4b6d      	ldr	r3, [pc, #436]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	496a      	ldr	r1, [pc, #424]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d010      	beq.n	8007212 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	4b64      	ldr	r3, [pc, #400]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d908      	bls.n	8007212 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007200:	4b61      	ldr	r3, [pc, #388]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	495e      	ldr	r1, [pc, #376]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 800720e:	4313      	orrs	r3, r2
 8007210:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d010      	beq.n	8007240 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	69da      	ldr	r2, [r3, #28]
 8007222:	4b59      	ldr	r3, [pc, #356]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800722a:	429a      	cmp	r2, r3
 800722c:	d908      	bls.n	8007240 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800722e:	4b56      	ldr	r3, [pc, #344]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	4953      	ldr	r1, [pc, #332]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 800723c:	4313      	orrs	r3, r2
 800723e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d010      	beq.n	800726e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	4b4d      	ldr	r3, [pc, #308]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	429a      	cmp	r2, r3
 800725a:	d908      	bls.n	800726e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800725c:	4b4a      	ldr	r3, [pc, #296]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f023 020f 	bic.w	r2, r3, #15
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	4947      	ldr	r1, [pc, #284]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 800726a:	4313      	orrs	r3, r2
 800726c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d055      	beq.n	8007326 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800727a:	4b43      	ldr	r3, [pc, #268]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	4940      	ldr	r1, [pc, #256]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007288:	4313      	orrs	r3, r2
 800728a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d107      	bne.n	80072a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007294:	4b3c      	ldr	r3, [pc, #240]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d121      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e0f6      	b.n	8007492 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d107      	bne.n	80072bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072ac:	4b36      	ldr	r3, [pc, #216]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d115      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0ea      	b.n	8007492 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d107      	bne.n	80072d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072c4:	4b30      	ldr	r3, [pc, #192]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d109      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e0de      	b.n	8007492 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072d4:	4b2c      	ldr	r3, [pc, #176]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e0d6      	b.n	8007492 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072e4:	4b28      	ldr	r3, [pc, #160]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f023 0207 	bic.w	r2, r3, #7
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4925      	ldr	r1, [pc, #148]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f6:	f7fa fb31 	bl	800195c <HAL_GetTick>
 80072fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072fc:	e00a      	b.n	8007314 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072fe:	f7fa fb2d 	bl	800195c <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	f241 3288 	movw	r2, #5000	; 0x1388
 800730c:	4293      	cmp	r3, r2
 800730e:	d901      	bls.n	8007314 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e0be      	b.n	8007492 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007314:	4b1c      	ldr	r3, [pc, #112]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	429a      	cmp	r2, r3
 8007324:	d1eb      	bne.n	80072fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d010      	beq.n	8007354 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	4b14      	ldr	r3, [pc, #80]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	429a      	cmp	r2, r3
 8007340:	d208      	bcs.n	8007354 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007342:	4b11      	ldr	r3, [pc, #68]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f023 020f 	bic.w	r2, r3, #15
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	490e      	ldr	r1, [pc, #56]	; (8007388 <HAL_RCC_ClockConfig+0x244>)
 8007350:	4313      	orrs	r3, r2
 8007352:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <HAL_RCC_ClockConfig+0x240>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d214      	bcs.n	800738c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007362:	4b08      	ldr	r3, [pc, #32]	; (8007384 <HAL_RCC_ClockConfig+0x240>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f023 020f 	bic.w	r2, r3, #15
 800736a:	4906      	ldr	r1, [pc, #24]	; (8007384 <HAL_RCC_ClockConfig+0x240>)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	4313      	orrs	r3, r2
 8007370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007372:	4b04      	ldr	r3, [pc, #16]	; (8007384 <HAL_RCC_ClockConfig+0x240>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d005      	beq.n	800738c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e086      	b.n	8007492 <HAL_RCC_ClockConfig+0x34e>
 8007384:	52002000 	.word	0x52002000
 8007388:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	d010      	beq.n	80073ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691a      	ldr	r2, [r3, #16]
 800739c:	4b3f      	ldr	r3, [pc, #252]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d208      	bcs.n	80073ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073a8:	4b3c      	ldr	r3, [pc, #240]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	4939      	ldr	r1, [pc, #228]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d010      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	695a      	ldr	r2, [r3, #20]
 80073ca:	4b34      	ldr	r3, [pc, #208]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d208      	bcs.n	80073e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073d6:	4b31      	ldr	r3, [pc, #196]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	492e      	ldr	r1, [pc, #184]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d010      	beq.n	8007416 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699a      	ldr	r2, [r3, #24]
 80073f8:	4b28      	ldr	r3, [pc, #160]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007400:	429a      	cmp	r2, r3
 8007402:	d208      	bcs.n	8007416 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007404:	4b25      	ldr	r3, [pc, #148]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	4922      	ldr	r1, [pc, #136]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 8007412:	4313      	orrs	r3, r2
 8007414:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d010      	beq.n	8007444 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69da      	ldr	r2, [r3, #28]
 8007426:	4b1d      	ldr	r3, [pc, #116]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800742e:	429a      	cmp	r2, r3
 8007430:	d208      	bcs.n	8007444 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007432:	4b1a      	ldr	r3, [pc, #104]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	4917      	ldr	r1, [pc, #92]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 8007440:	4313      	orrs	r3, r2
 8007442:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007444:	f000 f834 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 8007448:	4602      	mov	r2, r0
 800744a:	4b14      	ldr	r3, [pc, #80]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	f003 030f 	and.w	r3, r3, #15
 8007454:	4912      	ldr	r1, [pc, #72]	; (80074a0 <HAL_RCC_ClockConfig+0x35c>)
 8007456:	5ccb      	ldrb	r3, [r1, r3]
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	fa22 f303 	lsr.w	r3, r2, r3
 8007460:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007462:	4b0e      	ldr	r3, [pc, #56]	; (800749c <HAL_RCC_ClockConfig+0x358>)
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f003 030f 	and.w	r3, r3, #15
 800746a:	4a0d      	ldr	r2, [pc, #52]	; (80074a0 <HAL_RCC_ClockConfig+0x35c>)
 800746c:	5cd3      	ldrb	r3, [r2, r3]
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
 8007478:	4a0a      	ldr	r2, [pc, #40]	; (80074a4 <HAL_RCC_ClockConfig+0x360>)
 800747a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800747c:	4a0a      	ldr	r2, [pc, #40]	; (80074a8 <HAL_RCC_ClockConfig+0x364>)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007482:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <HAL_RCC_ClockConfig+0x368>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f7fa fa1e 	bl	80018c8 <HAL_InitTick>
 800748c:	4603      	mov	r3, r0
 800748e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	58024400 	.word	0x58024400
 80074a0:	08013150 	.word	0x08013150
 80074a4:	24000004 	.word	0x24000004
 80074a8:	24000000 	.word	0x24000000
 80074ac:	24000008 	.word	0x24000008

080074b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b089      	sub	sp, #36	; 0x24
 80074b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074b6:	4bb3      	ldr	r3, [pc, #716]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074be:	2b18      	cmp	r3, #24
 80074c0:	f200 8155 	bhi.w	800776e <HAL_RCC_GetSysClockFreq+0x2be>
 80074c4:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	08007531 	.word	0x08007531
 80074d0:	0800776f 	.word	0x0800776f
 80074d4:	0800776f 	.word	0x0800776f
 80074d8:	0800776f 	.word	0x0800776f
 80074dc:	0800776f 	.word	0x0800776f
 80074e0:	0800776f 	.word	0x0800776f
 80074e4:	0800776f 	.word	0x0800776f
 80074e8:	0800776f 	.word	0x0800776f
 80074ec:	08007557 	.word	0x08007557
 80074f0:	0800776f 	.word	0x0800776f
 80074f4:	0800776f 	.word	0x0800776f
 80074f8:	0800776f 	.word	0x0800776f
 80074fc:	0800776f 	.word	0x0800776f
 8007500:	0800776f 	.word	0x0800776f
 8007504:	0800776f 	.word	0x0800776f
 8007508:	0800776f 	.word	0x0800776f
 800750c:	0800755d 	.word	0x0800755d
 8007510:	0800776f 	.word	0x0800776f
 8007514:	0800776f 	.word	0x0800776f
 8007518:	0800776f 	.word	0x0800776f
 800751c:	0800776f 	.word	0x0800776f
 8007520:	0800776f 	.word	0x0800776f
 8007524:	0800776f 	.word	0x0800776f
 8007528:	0800776f 	.word	0x0800776f
 800752c:	08007563 	.word	0x08007563
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007530:	4b94      	ldr	r3, [pc, #592]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800753c:	4b91      	ldr	r3, [pc, #580]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	08db      	lsrs	r3, r3, #3
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	4a90      	ldr	r2, [pc, #576]	; (8007788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007548:	fa22 f303 	lsr.w	r3, r2, r3
 800754c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800754e:	e111      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007550:	4b8d      	ldr	r3, [pc, #564]	; (8007788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007552:	61bb      	str	r3, [r7, #24]
    break;
 8007554:	e10e      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007556:	4b8d      	ldr	r3, [pc, #564]	; (800778c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007558:	61bb      	str	r3, [r7, #24]
    break;
 800755a:	e10b      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800755c:	4b8c      	ldr	r3, [pc, #560]	; (8007790 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800755e:	61bb      	str	r3, [r7, #24]
    break;
 8007560:	e108      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007562:	4b88      	ldr	r3, [pc, #544]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800756c:	4b85      	ldr	r3, [pc, #532]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007570:	091b      	lsrs	r3, r3, #4
 8007572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007576:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007578:	4b82      	ldr	r3, [pc, #520]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007582:	4b80      	ldr	r3, [pc, #512]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007586:	08db      	lsrs	r3, r3, #3
 8007588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	fb02 f303 	mul.w	r3, r2, r3
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 80e1 	beq.w	8007768 <HAL_RCC_GetSysClockFreq+0x2b8>
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	f000 8083 	beq.w	80076b4 <HAL_RCC_GetSysClockFreq+0x204>
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	f200 80a1 	bhi.w	80076f8 <HAL_RCC_GetSysClockFreq+0x248>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_RCC_GetSysClockFreq+0x114>
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d056      	beq.n	8007670 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075c2:	e099      	b.n	80076f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075c4:	4b6f      	ldr	r3, [pc, #444]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d02d      	beq.n	800762c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075d0:	4b6c      	ldr	r3, [pc, #432]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	4a6b      	ldr	r2, [pc, #428]	; (8007788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
 80075e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fa:	4b62      	ldr	r3, [pc, #392]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760a:	ed97 6a02 	vldr	s12, [r7, #8]
 800760e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007794 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800761e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007626:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800762a:	e087      	b.n	800773c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007798 <HAL_RCC_GetSysClockFreq+0x2e8>
 800763a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763e:	4b51      	ldr	r3, [pc, #324]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007652:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007794 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800766e:	e065      	b.n	800773c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800779c <HAL_RCC_GetSysClockFreq+0x2ec>
 800767e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007682:	4b40      	ldr	r3, [pc, #256]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007692:	ed97 6a02 	vldr	s12, [r7, #8]
 8007696:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800769a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076b2:	e043      	b.n	800773c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80077a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c6:	4b2f      	ldr	r3, [pc, #188]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007794 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076f6:	e021      	b.n	800773c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	eddf 6a26 	vldr	s13, [pc, #152]	; 800779c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770a:	4b1e      	ldr	r3, [pc, #120]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771a:	ed97 6a02 	vldr	s12, [r7, #8]
 800771e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007794 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800773a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800773c:	4b11      	ldr	r3, [pc, #68]	; (8007784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	0a5b      	lsrs	r3, r3, #9
 8007742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007746:	3301      	adds	r3, #1
 8007748:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007754:	edd7 6a07 	vldr	s13, [r7, #28]
 8007758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800775c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007760:	ee17 3a90 	vmov	r3, s15
 8007764:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007766:	e005      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	61bb      	str	r3, [r7, #24]
    break;
 800776c:	e002      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800776e:	4b07      	ldr	r3, [pc, #28]	; (800778c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007770:	61bb      	str	r3, [r7, #24]
    break;
 8007772:	bf00      	nop
  }

  return sysclockfreq;
 8007774:	69bb      	ldr	r3, [r7, #24]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3724      	adds	r7, #36	; 0x24
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	58024400 	.word	0x58024400
 8007788:	03d09000 	.word	0x03d09000
 800778c:	003d0900 	.word	0x003d0900
 8007790:	00f42400 	.word	0x00f42400
 8007794:	46000000 	.word	0x46000000
 8007798:	4c742400 	.word	0x4c742400
 800779c:	4a742400 	.word	0x4a742400
 80077a0:	4b742400 	.word	0x4b742400

080077a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077aa:	f7ff fe81 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 80077ae:	4602      	mov	r2, r0
 80077b0:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	0a1b      	lsrs	r3, r3, #8
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	490f      	ldr	r1, [pc, #60]	; (80077f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80077bc:	5ccb      	ldrb	r3, [r1, r3]
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	fa22 f303 	lsr.w	r3, r2, r3
 80077c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	4a09      	ldr	r2, [pc, #36]	; (80077f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80077d2:	5cd3      	ldrb	r3, [r2, r3]
 80077d4:	f003 031f 	and.w	r3, r3, #31
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	fa22 f303 	lsr.w	r3, r2, r3
 80077de:	4a07      	ldr	r2, [pc, #28]	; (80077fc <HAL_RCC_GetHCLKFreq+0x58>)
 80077e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077e2:	4a07      	ldr	r2, [pc, #28]	; (8007800 <HAL_RCC_GetHCLKFreq+0x5c>)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <HAL_RCC_GetHCLKFreq+0x58>)
 80077ea:	681b      	ldr	r3, [r3, #0]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	58024400 	.word	0x58024400
 80077f8:	08013150 	.word	0x08013150
 80077fc:	24000004 	.word	0x24000004
 8007800:	24000000 	.word	0x24000000

08007804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007808:	f7ff ffcc 	bl	80077a4 <HAL_RCC_GetHCLKFreq>
 800780c:	4602      	mov	r2, r0
 800780e:	4b06      	ldr	r3, [pc, #24]	; (8007828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	091b      	lsrs	r3, r3, #4
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	4904      	ldr	r1, [pc, #16]	; (800782c <HAL_RCC_GetPCLK1Freq+0x28>)
 800781a:	5ccb      	ldrb	r3, [r1, r3]
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007824:	4618      	mov	r0, r3
 8007826:	bd80      	pop	{r7, pc}
 8007828:	58024400 	.word	0x58024400
 800782c:	08013150 	.word	0x08013150

08007830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007834:	f7ff ffb6 	bl	80077a4 <HAL_RCC_GetHCLKFreq>
 8007838:	4602      	mov	r2, r0
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	0a1b      	lsrs	r3, r3, #8
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	4904      	ldr	r1, [pc, #16]	; (8007858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007846:	5ccb      	ldrb	r3, [r1, r3]
 8007848:	f003 031f 	and.w	r3, r3, #31
 800784c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007850:	4618      	mov	r0, r3
 8007852:	bd80      	pop	{r7, pc}
 8007854:	58024400 	.word	0x58024400
 8007858:	08013150 	.word	0x08013150

0800785c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007864:	2300      	movs	r3, #0
 8007866:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007868:	2300      	movs	r3, #0
 800786a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d03f      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800787c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007880:	d02a      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007882:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007886:	d824      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800788c:	d018      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800788e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007892:	d81e      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800789c:	d007      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800789e:	e018      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a0:	4bab      	ldr	r3, [pc, #684]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	4aaa      	ldr	r2, [pc, #680]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80078ac:	e015      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3304      	adds	r3, #4
 80078b2:	2102      	movs	r1, #2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fff3 	bl	80098a0 <RCCEx_PLL2_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80078be:	e00c      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3324      	adds	r3, #36	; 0x24
 80078c4:	2102      	movs	r1, #2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f002 f89c 	bl	8009a04 <RCCEx_PLL3_Config>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80078d0:	e003      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
      break;
 80078d6:	e000      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80078d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d109      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078e0:	4b9b      	ldr	r3, [pc, #620]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ec:	4998      	ldr	r1, [pc, #608]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	650b      	str	r3, [r1, #80]	; 0x50
 80078f2:	e001      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007900:	2b00      	cmp	r3, #0
 8007902:	d03d      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007908:	2b04      	cmp	r3, #4
 800790a:	d826      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800790c:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800790e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007912:	bf00      	nop
 8007914:	08007929 	.word	0x08007929
 8007918:	08007937 	.word	0x08007937
 800791c:	08007949 	.word	0x08007949
 8007920:	08007961 	.word	0x08007961
 8007924:	08007961 	.word	0x08007961
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007928:	4b89      	ldr	r3, [pc, #548]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	4a88      	ldr	r2, [pc, #544]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800792e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007934:	e015      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3304      	adds	r3, #4
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f001 ffaf 	bl	80098a0 <RCCEx_PLL2_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007946:	e00c      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3324      	adds	r3, #36	; 0x24
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f002 f858 	bl	8009a04 <RCCEx_PLL3_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007958:	e003      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
      break;
 800795e:	e000      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d109      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007968:	4b79      	ldr	r3, [pc, #484]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800796a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796c:	f023 0207 	bic.w	r2, r3, #7
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007974:	4976      	ldr	r1, [pc, #472]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007976:	4313      	orrs	r3, r2
 8007978:	650b      	str	r3, [r1, #80]	; 0x50
 800797a:	e001      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007988:	2b00      	cmp	r3, #0
 800798a:	d042      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007994:	d02b      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799a:	d825      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800799c:	2bc0      	cmp	r3, #192	; 0xc0
 800799e:	d028      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80079a0:	2bc0      	cmp	r3, #192	; 0xc0
 80079a2:	d821      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80079a4:	2b80      	cmp	r3, #128	; 0x80
 80079a6:	d016      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80079a8:	2b80      	cmp	r3, #128	; 0x80
 80079aa:	d81d      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80079b0:	2b40      	cmp	r3, #64	; 0x40
 80079b2:	d007      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80079b4:	e018      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b6:	4b66      	ldr	r3, [pc, #408]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	4a65      	ldr	r2, [pc, #404]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80079c2:	e017      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3304      	adds	r3, #4
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 ff68 	bl	80098a0 <RCCEx_PLL2_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80079d4:	e00e      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3324      	adds	r3, #36	; 0x24
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f002 f811 	bl	8009a04 <RCCEx_PLL3_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80079e6:	e005      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	75fb      	strb	r3, [r7, #23]
      break;
 80079ec:	e002      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80079ee:	bf00      	nop
 80079f0:	e000      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80079f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d109      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80079fa:	4b55      	ldr	r3, [pc, #340]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a06:	4952      	ldr	r1, [pc, #328]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	650b      	str	r3, [r1, #80]	; 0x50
 8007a0c:	e001      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d049      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a28:	d030      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007a2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a2e:	d82a      	bhi.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a34:	d02c      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007a36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a3a:	d824      	bhi.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a40:	d018      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a46:	d81e      	bhi.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a50:	d007      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007a52:	e018      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a54:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a3d      	ldr	r2, [pc, #244]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a60:	e017      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3304      	adds	r3, #4
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 ff19 	bl	80098a0 <RCCEx_PLL2_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a72:	e00e      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 ffc2 	bl	8009a04 <RCCEx_PLL3_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a84:	e005      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	75fb      	strb	r3, [r7, #23]
      break;
 8007a8a:	e002      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e000      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a98:	4b2d      	ldr	r3, [pc, #180]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007aa6:	492a      	ldr	r1, [pc, #168]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	658b      	str	r3, [r1, #88]	; 0x58
 8007aac:	e001      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d04c      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ac8:	d030      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007aca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ace:	d82a      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ad0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ad4:	d02c      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007ad6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ada:	d824      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007adc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ae0:	d018      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ae6:	d81e      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007af0:	d007      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007af2:	e018      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af4:	4b16      	ldr	r3, [pc, #88]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	4a15      	ldr	r2, [pc, #84]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b00:	e017      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3304      	adds	r3, #4
 8007b06:	2100      	movs	r1, #0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fec9 	bl	80098a0 <RCCEx_PLL2_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007b12:	e00e      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3324      	adds	r3, #36	; 0x24
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f001 ff72 	bl	8009a04 <RCCEx_PLL3_Config>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b24:	e005      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	75fb      	strb	r3, [r7, #23]
      break;
 8007b2a:	e002      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007b2c:	bf00      	nop
 8007b2e:	e000      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10d      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b46:	4902      	ldr	r1, [pc, #8]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	658b      	str	r3, [r1, #88]	; 0x58
 8007b4c:	e004      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007b4e:	bf00      	nop
 8007b50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d032      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b68:	2b30      	cmp	r3, #48	; 0x30
 8007b6a:	d01c      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b6c:	2b30      	cmp	r3, #48	; 0x30
 8007b6e:	d817      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d00c      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d813      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d016      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d10f      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b80:	4baf      	ldr	r3, [pc, #700]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	4aae      	ldr	r2, [pc, #696]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b8c:	e00e      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3304      	adds	r3, #4
 8007b92:	2102      	movs	r1, #2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f001 fe83 	bl	80098a0 <RCCEx_PLL2_Config>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b9e:	e005      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba4:	e002      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007ba6:	bf00      	nop
 8007ba8:	e000      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007bb2:	4ba3      	ldr	r3, [pc, #652]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bbe:	49a0      	ldr	r1, [pc, #640]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bc4:	e001      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d047      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bde:	d030      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007be4:	d82a      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007be6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bea:	d02c      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007bec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bf0:	d824      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bf6:	d018      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bfc:	d81e      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c06:	d007      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007c08:	e018      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c0a:	4b8d      	ldr	r3, [pc, #564]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	4a8c      	ldr	r2, [pc, #560]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c16:	e017      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 fe3e 	bl	80098a0 <RCCEx_PLL2_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c28:	e00e      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3324      	adds	r3, #36	; 0x24
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 fee7 	bl	8009a04 <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c3a:	e005      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c40:	e002      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007c42:	bf00      	nop
 8007c44:	e000      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d109      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c4e:	4b7c      	ldr	r3, [pc, #496]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c52:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c5a:	4979      	ldr	r1, [pc, #484]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	650b      	str	r3, [r1, #80]	; 0x50
 8007c60:	e001      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d049      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c7a:	d02e      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c80:	d828      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c86:	d02a      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007c88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c8c:	d822      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c92:	d026      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007c94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c98:	d81c      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c9e:	d010      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ca4:	d816      	bhi.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01d      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cae:	d111      	bne.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 fdf2 	bl	80098a0 <RCCEx_PLL2_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007cc0:	e012      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3324      	adds	r3, #36	; 0x24
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 fe9b 	bl	8009a04 <RCCEx_PLL3_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007cd2:	e009      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd8:	e006      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007cda:	bf00      	nop
 8007cdc:	e004      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007cde:	bf00      	nop
 8007ce0:	e002      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007ce2:	bf00      	nop
 8007ce4:	e000      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007cee:	4b54      	ldr	r3, [pc, #336]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfa:	4951      	ldr	r1, [pc, #324]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	650b      	str	r3, [r1, #80]	; 0x50
 8007d00:	e001      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d04b      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d1c:	d02e      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d22:	d828      	bhi.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d28:	d02a      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2e:	d822      	bhi.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d34:	d026      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007d36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d3a:	d81c      	bhi.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d40:	d010      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d46:	d816      	bhi.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01d      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d50:	d111      	bne.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	2101      	movs	r1, #1
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 fda1 	bl	80098a0 <RCCEx_PLL2_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007d62:	e012      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3324      	adds	r3, #36	; 0x24
 8007d68:	2101      	movs	r1, #1
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 fe4a 	bl	8009a04 <RCCEx_PLL3_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007d74:	e009      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7a:	e006      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d7c:	bf00      	nop
 8007d7e:	e004      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d80:	bf00      	nop
 8007d82:	e002      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d84:	bf00      	nop
 8007d86:	e000      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d90:	4b2b      	ldr	r3, [pc, #172]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d94:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d9e:	4928      	ldr	r1, [pc, #160]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	658b      	str	r3, [r1, #88]	; 0x58
 8007da4:	e001      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d02f      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dbe:	d00e      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc4:	d814      	bhi.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d015      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dce:	d10f      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd0:	4b1b      	ldr	r3, [pc, #108]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	4a1a      	ldr	r2, [pc, #104]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ddc:	e00c      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	2101      	movs	r1, #1
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 fd5b 	bl	80098a0 <RCCEx_PLL2_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007dee:	e003      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	75fb      	strb	r3, [r7, #23]
      break;
 8007df4:	e000      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d109      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007dfe:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0a:	490d      	ldr	r1, [pc, #52]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	650b      	str	r3, [r1, #80]	; 0x50
 8007e10:	e001      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d033      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d81c      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007e6b 	.word	0x08007e6b
 8007e34:	08007e45 	.word	0x08007e45
 8007e38:	08007e53 	.word	0x08007e53
 8007e3c:	08007e6b 	.word	0x08007e6b
 8007e40:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e44:	4bb8      	ldr	r3, [pc, #736]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	4ab7      	ldr	r2, [pc, #732]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007e50:	e00c      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3304      	adds	r3, #4
 8007e56:	2102      	movs	r1, #2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 fd21 	bl	80098a0 <RCCEx_PLL2_Config>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007e62:	e003      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	75fb      	strb	r3, [r7, #23]
      break;
 8007e68:	e000      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d109      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e72:	4bad      	ldr	r3, [pc, #692]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e76:	f023 0203 	bic.w	r2, r3, #3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	49aa      	ldr	r1, [pc, #680]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e84:	e001      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
 8007e88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8086 	beq.w	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e98:	4ba4      	ldr	r3, [pc, #656]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4aa3      	ldr	r2, [pc, #652]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ea4:	f7f9 fd5a 	bl	800195c <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eaa:	e009      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eac:	f7f9 fd56 	bl	800195c <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b64      	cmp	r3, #100	; 0x64
 8007eb8:	d902      	bls.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	75fb      	strb	r3, [r7, #23]
        break;
 8007ebe:	e005      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ec0:	4b9a      	ldr	r3, [pc, #616]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0ef      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d166      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ed2:	4b95      	ldr	r3, [pc, #596]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007edc:	4053      	eors	r3, r2
 8007ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d013      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ee6:	4b90      	ldr	r3, [pc, #576]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ef0:	4b8d      	ldr	r3, [pc, #564]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef4:	4a8c      	ldr	r2, [pc, #560]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007efa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007efc:	4b8a      	ldr	r3, [pc, #552]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f00:	4a89      	ldr	r2, [pc, #548]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f06:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f08:	4a87      	ldr	r2, [pc, #540]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f18:	d115      	bne.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1a:	f7f9 fd1f 	bl	800195c <HAL_GetTick>
 8007f1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f20:	e00b      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f22:	f7f9 fd1b 	bl	800195c <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d902      	bls.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	75fb      	strb	r3, [r7, #23]
            break;
 8007f38:	e005      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f3a:	4b7b      	ldr	r3, [pc, #492]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0ed      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d126      	bne.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f5a:	d10d      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007f5c:	4b72      	ldr	r3, [pc, #456]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f6a:	0919      	lsrs	r1, r3, #4
 8007f6c:	4b70      	ldr	r3, [pc, #448]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007f6e:	400b      	ands	r3, r1
 8007f70:	496d      	ldr	r1, [pc, #436]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	610b      	str	r3, [r1, #16]
 8007f76:	e005      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007f78:	4b6b      	ldr	r3, [pc, #428]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	4a6a      	ldr	r2, [pc, #424]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f82:	6113      	str	r3, [r2, #16]
 8007f84:	4b68      	ldr	r3, [pc, #416]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f92:	4965      	ldr	r1, [pc, #404]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	670b      	str	r3, [r1, #112]	; 0x70
 8007f98:	e004      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	75bb      	strb	r3, [r7, #22]
 8007f9e:	e001      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d07e      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fb4:	2b28      	cmp	r3, #40	; 0x28
 8007fb6:	d867      	bhi.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	0800808f 	.word	0x0800808f
 8007fc4:	08008089 	.word	0x08008089
 8007fc8:	08008089 	.word	0x08008089
 8007fcc:	08008089 	.word	0x08008089
 8007fd0:	08008089 	.word	0x08008089
 8007fd4:	08008089 	.word	0x08008089
 8007fd8:	08008089 	.word	0x08008089
 8007fdc:	08008089 	.word	0x08008089
 8007fe0:	08008065 	.word	0x08008065
 8007fe4:	08008089 	.word	0x08008089
 8007fe8:	08008089 	.word	0x08008089
 8007fec:	08008089 	.word	0x08008089
 8007ff0:	08008089 	.word	0x08008089
 8007ff4:	08008089 	.word	0x08008089
 8007ff8:	08008089 	.word	0x08008089
 8007ffc:	08008089 	.word	0x08008089
 8008000:	08008077 	.word	0x08008077
 8008004:	08008089 	.word	0x08008089
 8008008:	08008089 	.word	0x08008089
 800800c:	08008089 	.word	0x08008089
 8008010:	08008089 	.word	0x08008089
 8008014:	08008089 	.word	0x08008089
 8008018:	08008089 	.word	0x08008089
 800801c:	08008089 	.word	0x08008089
 8008020:	0800808f 	.word	0x0800808f
 8008024:	08008089 	.word	0x08008089
 8008028:	08008089 	.word	0x08008089
 800802c:	08008089 	.word	0x08008089
 8008030:	08008089 	.word	0x08008089
 8008034:	08008089 	.word	0x08008089
 8008038:	08008089 	.word	0x08008089
 800803c:	08008089 	.word	0x08008089
 8008040:	0800808f 	.word	0x0800808f
 8008044:	08008089 	.word	0x08008089
 8008048:	08008089 	.word	0x08008089
 800804c:	08008089 	.word	0x08008089
 8008050:	08008089 	.word	0x08008089
 8008054:	08008089 	.word	0x08008089
 8008058:	08008089 	.word	0x08008089
 800805c:	08008089 	.word	0x08008089
 8008060:	0800808f 	.word	0x0800808f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3304      	adds	r3, #4
 8008068:	2101      	movs	r1, #1
 800806a:	4618      	mov	r0, r3
 800806c:	f001 fc18 	bl	80098a0 <RCCEx_PLL2_Config>
 8008070:	4603      	mov	r3, r0
 8008072:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008074:	e00c      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3324      	adds	r3, #36	; 0x24
 800807a:	2101      	movs	r1, #1
 800807c:	4618      	mov	r0, r3
 800807e:	f001 fcc1 	bl	8009a04 <RCCEx_PLL3_Config>
 8008082:	4603      	mov	r3, r0
 8008084:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008086:	e003      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	75fb      	strb	r3, [r7, #23]
      break;
 800808c:	e000      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800808e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d109      	bne.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008096:	4b24      	ldr	r3, [pc, #144]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080a2:	4921      	ldr	r1, [pc, #132]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	654b      	str	r3, [r1, #84]	; 0x54
 80080a8:	e001      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d03e      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d820      	bhi.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	0800810b 	.word	0x0800810b
 80080cc:	080080e1 	.word	0x080080e1
 80080d0:	080080f3 	.word	0x080080f3
 80080d4:	0800810b 	.word	0x0800810b
 80080d8:	0800810b 	.word	0x0800810b
 80080dc:	0800810b 	.word	0x0800810b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3304      	adds	r3, #4
 80080e4:	2101      	movs	r1, #1
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 fbda 	bl	80098a0 <RCCEx_PLL2_Config>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80080f0:	e00c      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3324      	adds	r3, #36	; 0x24
 80080f6:	2101      	movs	r1, #1
 80080f8:	4618      	mov	r0, r3
 80080fa:	f001 fc83 	bl	8009a04 <RCCEx_PLL3_Config>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008102:	e003      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]
      break;
 8008108:	e000      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800810a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d110      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008112:	4b05      	ldr	r3, [pc, #20]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008116:	f023 0207 	bic.w	r2, r3, #7
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800811e:	4902      	ldr	r1, [pc, #8]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008120:	4313      	orrs	r3, r2
 8008122:	654b      	str	r3, [r1, #84]	; 0x54
 8008124:	e008      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008126:	bf00      	nop
 8008128:	58024400 	.word	0x58024400
 800812c:	58024800 	.word	0x58024800
 8008130:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d039      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814a:	2b05      	cmp	r3, #5
 800814c:	d820      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800814e:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	08008197 	.word	0x08008197
 8008158:	0800816d 	.word	0x0800816d
 800815c:	0800817f 	.word	0x0800817f
 8008160:	08008197 	.word	0x08008197
 8008164:	08008197 	.word	0x08008197
 8008168:	08008197 	.word	0x08008197
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3304      	adds	r3, #4
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f001 fb94 	bl	80098a0 <RCCEx_PLL2_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800817c:	e00c      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3324      	adds	r3, #36	; 0x24
 8008182:	2101      	movs	r1, #1
 8008184:	4618      	mov	r0, r3
 8008186:	f001 fc3d 	bl	8009a04 <RCCEx_PLL3_Config>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800818e:	e003      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	75fb      	strb	r3, [r7, #23]
      break;
 8008194:	e000      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800819e:	4bb7      	ldr	r3, [pc, #732]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a2:	f023 0207 	bic.w	r2, r3, #7
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ac:	49b3      	ldr	r1, [pc, #716]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	658b      	str	r3, [r1, #88]	; 0x58
 80081b2:	e001      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
 80081b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d04b      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081ce:	d02e      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80081d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081d4:	d828      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081da:	d02a      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80081dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e0:	d822      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80081e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081e6:	d026      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80081e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081ec:	d81c      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80081ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f2:	d010      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80081f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f8:	d816      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d01d      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80081fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008202:	d111      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3304      	adds	r3, #4
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fb48 	bl	80098a0 <RCCEx_PLL2_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008214:	e012      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3324      	adds	r3, #36	; 0x24
 800821a:	2102      	movs	r1, #2
 800821c:	4618      	mov	r0, r3
 800821e:	f001 fbf1 	bl	8009a04 <RCCEx_PLL3_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008226:	e009      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	75fb      	strb	r3, [r7, #23]
      break;
 800822c:	e006      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800822e:	bf00      	nop
 8008230:	e004      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008232:	bf00      	nop
 8008234:	e002      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008236:	bf00      	nop
 8008238:	e000      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800823a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10a      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008242:	4b8e      	ldr	r3, [pc, #568]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008246:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008250:	498a      	ldr	r1, [pc, #552]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008252:	4313      	orrs	r3, r2
 8008254:	654b      	str	r3, [r1, #84]	; 0x54
 8008256:	e001      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d04b      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800826e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008272:	d02e      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008274:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008278:	d828      	bhi.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800827e:	d02a      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008284:	d822      	bhi.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800828a:	d026      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800828c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008290:	d81c      	bhi.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008296:	d010      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800829c:	d816      	bhi.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01d      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80082a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a6:	d111      	bne.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3304      	adds	r3, #4
 80082ac:	2100      	movs	r1, #0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 faf6 	bl	80098a0 <RCCEx_PLL2_Config>
 80082b4:	4603      	mov	r3, r0
 80082b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80082b8:	e012      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3324      	adds	r3, #36	; 0x24
 80082be:	2102      	movs	r1, #2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 fb9f 	bl	8009a04 <RCCEx_PLL3_Config>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80082ca:	e009      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	75fb      	strb	r3, [r7, #23]
      break;
 80082d0:	e006      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80082d2:	bf00      	nop
 80082d4:	e004      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80082d6:	bf00      	nop
 80082d8:	e002      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80082da:	bf00      	nop
 80082dc:	e000      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80082de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10a      	bne.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80082e6:	4b65      	ldr	r3, [pc, #404]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082f4:	4961      	ldr	r1, [pc, #388]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	658b      	str	r3, [r1, #88]	; 0x58
 80082fa:	e001      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008308:	2b00      	cmp	r3, #0
 800830a:	d04b      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008312:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008316:	d02e      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008318:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800831c:	d828      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800831e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008322:	d02a      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008328:	d822      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800832a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800832e:	d026      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008330:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008334:	d81c      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800833a:	d010      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800833c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008340:	d816      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d01d      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800834a:	d111      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f001 faa4 	bl	80098a0 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800835c:	e012      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3324      	adds	r3, #36	; 0x24
 8008362:	2102      	movs	r1, #2
 8008364:	4618      	mov	r0, r3
 8008366:	f001 fb4d 	bl	8009a04 <RCCEx_PLL3_Config>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800836e:	e009      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]
      break;
 8008374:	e006      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008376:	bf00      	nop
 8008378:	e004      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800837a:	bf00      	nop
 800837c:	e002      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800837e:	bf00      	nop
 8008380:	e000      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10a      	bne.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800838a:	4b3c      	ldr	r3, [pc, #240]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800838c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008398:	4938      	ldr	r1, [pc, #224]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800839a:	4313      	orrs	r3, r2
 800839c:	658b      	str	r3, [r1, #88]	; 0x58
 800839e:	e001      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01a      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ba:	d10a      	bne.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3324      	adds	r3, #36	; 0x24
 80083c0:	2102      	movs	r1, #2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f001 fb1e 	bl	8009a04 <RCCEx_PLL3_Config>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80083d2:	4b2a      	ldr	r3, [pc, #168]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083e0:	4926      	ldr	r1, [pc, #152]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0310 	and.w	r3, r3, #16
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d01a      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083fc:	d10a      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3324      	adds	r3, #36	; 0x24
 8008402:	2102      	movs	r1, #2
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fafd 	bl	8009a04 <RCCEx_PLL3_Config>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008414:	4b19      	ldr	r3, [pc, #100]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008422:	4916      	ldr	r1, [pc, #88]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008424:	4313      	orrs	r3, r2
 8008426:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d036      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800843a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800843e:	d01f      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008444:	d817      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800844a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800844e:	d009      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008450:	e011      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3304      	adds	r3, #4
 8008456:	2100      	movs	r1, #0
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fa21 	bl	80098a0 <RCCEx_PLL2_Config>
 800845e:	4603      	mov	r3, r0
 8008460:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008462:	e00e      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3324      	adds	r3, #36	; 0x24
 8008468:	2102      	movs	r1, #2
 800846a:	4618      	mov	r0, r3
 800846c:	f001 faca 	bl	8009a04 <RCCEx_PLL3_Config>
 8008470:	4603      	mov	r3, r0
 8008472:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008474:	e005      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	75fb      	strb	r3, [r7, #23]
      break;
 800847a:	e002      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800847c:	58024400 	.word	0x58024400
      break;
 8008480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008488:	4b93      	ldr	r3, [pc, #588]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800848a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008496:	4990      	ldr	r1, [pc, #576]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008498:	4313      	orrs	r3, r2
 800849a:	658b      	str	r3, [r1, #88]	; 0x58
 800849c:	e001      	b.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d033      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084b8:	d01c      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80084ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084be:	d816      	bhi.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80084c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c4:	d003      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80084c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084ca:	d007      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80084cc:	e00f      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ce:	4b82      	ldr	r3, [pc, #520]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	4a81      	ldr	r2, [pc, #516]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80084da:	e00c      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3324      	adds	r3, #36	; 0x24
 80084e0:	2101      	movs	r1, #1
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 fa8e 	bl	8009a04 <RCCEx_PLL3_Config>
 80084e8:	4603      	mov	r3, r0
 80084ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80084ec:	e003      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	75fb      	strb	r3, [r7, #23]
      break;
 80084f2:	e000      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80084f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084fc:	4b76      	ldr	r3, [pc, #472]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008500:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850a:	4973      	ldr	r1, [pc, #460]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800850c:	4313      	orrs	r3, r2
 800850e:	654b      	str	r3, [r1, #84]	; 0x54
 8008510:	e001      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d029      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800852a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852e:	d007      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008530:	e00f      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008532:	4b69      	ldr	r3, [pc, #420]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	4a68      	ldr	r2, [pc, #416]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800853c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800853e:	e00b      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3304      	adds	r3, #4
 8008544:	2102      	movs	r1, #2
 8008546:	4618      	mov	r0, r3
 8008548:	f001 f9aa 	bl	80098a0 <RCCEx_PLL2_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008550:	e002      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	75fb      	strb	r3, [r7, #23]
      break;
 8008556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800855e:	4b5e      	ldr	r3, [pc, #376]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008562:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856a:	495b      	ldr	r1, [pc, #364]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800856c:	4313      	orrs	r3, r2
 800856e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008570:	e001      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3324      	adds	r3, #36	; 0x24
 8008586:	2102      	movs	r1, #2
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fa3b 	bl	8009a04 <RCCEx_PLL3_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d030      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ac:	d017      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80085ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085b2:	d811      	bhi.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80085b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b8:	d013      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80085ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085be:	d80b      	bhi.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d010      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80085c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c8:	d106      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085ca:	4b43      	ldr	r3, [pc, #268]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	4a42      	ldr	r2, [pc, #264]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80085d6:	e007      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	75fb      	strb	r3, [r7, #23]
      break;
 80085dc:	e004      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80085de:	bf00      	nop
 80085e0:	e002      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80085e2:	bf00      	nop
 80085e4:	e000      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80085e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d109      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085ee:	4b3a      	ldr	r3, [pc, #232]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085fa:	4937      	ldr	r1, [pc, #220]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	654b      	str	r3, [r1, #84]	; 0x54
 8008600:	e001      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008612:	4b31      	ldr	r3, [pc, #196]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008616:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	492e      	ldr	r1, [pc, #184]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008620:	4313      	orrs	r3, r2
 8008622:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d009      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008630:	4b29      	ldr	r3, [pc, #164]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800863e:	4926      	ldr	r1, [pc, #152]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008640:	4313      	orrs	r3, r2
 8008642:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008650:	4b21      	ldr	r3, [pc, #132]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008654:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800865c:	491e      	ldr	r1, [pc, #120]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800865e:	4313      	orrs	r3, r2
 8008660:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00d      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800866e:	4b1a      	ldr	r3, [pc, #104]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	4a19      	ldr	r2, [pc, #100]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008678:	6113      	str	r3, [r2, #16]
 800867a:	4b17      	ldr	r3, [pc, #92]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008684:	4914      	ldr	r1, [pc, #80]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008686:	4313      	orrs	r3, r2
 8008688:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	da08      	bge.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008692:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008696:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869e:	490e      	ldr	r1, [pc, #56]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d009      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086b0:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086be:	4906      	ldr	r1, [pc, #24]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80086c4:	7dbb      	ldrb	r3, [r7, #22]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e000      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	58024400 	.word	0x58024400

080086dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b090      	sub	sp, #64	; 0x40
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ea:	f040 8095 	bne.w	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80086ee:	4bae      	ldr	r3, [pc, #696]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80086f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	633b      	str	r3, [r7, #48]	; 0x30
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	2b04      	cmp	r3, #4
 80086fc:	f200 8088 	bhi.w	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008700:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	0800871d 	.word	0x0800871d
 800870c:	08008745 	.word	0x08008745
 8008710:	0800876d 	.word	0x0800876d
 8008714:	08008809 	.word	0x08008809
 8008718:	08008795 	.word	0x08008795

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800871c:	4ba2      	ldr	r3, [pc, #648]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008728:	d108      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800872a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800872e:	4618      	mov	r0, r3
 8008730:	f000 ff64 	bl	80095fc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008738:	f000 bc95 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008740:	f000 bc91 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008744:	4b98      	ldr	r3, [pc, #608]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800874c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008750:	d108      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008752:	f107 0318 	add.w	r3, r7, #24
 8008756:	4618      	mov	r0, r3
 8008758:	f000 fca8 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008760:	f000 bc81 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008768:	f000 bc7d 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800876c:	4b8e      	ldr	r3, [pc, #568]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008778:	d108      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800877a:	f107 030c 	add.w	r3, r7, #12
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fde8 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008788:	f000 bc6d 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008790:	f000 bc69 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008794:	4b84      	ldr	r3, [pc, #528]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800879c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800879e:	4b82      	ldr	r3, [pc, #520]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d10c      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80087aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d109      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087b0:	4b7d      	ldr	r3, [pc, #500]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	08db      	lsrs	r3, r3, #3
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	4a7c      	ldr	r2, [pc, #496]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80087bc:	fa22 f303 	lsr.w	r3, r2, r3
 80087c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087c2:	e01f      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087c4:	4b78      	ldr	r3, [pc, #480]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d0:	d106      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087d8:	d102      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80087da:	4b75      	ldr	r3, [pc, #468]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087de:	e011      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087e0:	4b71      	ldr	r3, [pc, #452]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ec:	d106      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f4:	d102      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80087f6:	4b6f      	ldr	r3, [pc, #444]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80087f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087fa:	e003      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008800:	f000 bc31 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008804:	f000 bc2f 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008808:	4b6b      	ldr	r3, [pc, #428]	; (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800880c:	f000 bc2b 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008814:	f000 bc27 	b.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800881e:	f040 8095 	bne.w	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008822:	4b61      	ldr	r3, [pc, #388]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008826:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800882a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008832:	d04d      	beq.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800883a:	f200 8084 	bhi.w	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	2bc0      	cmp	r3, #192	; 0xc0
 8008842:	d07d      	beq.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	2bc0      	cmp	r3, #192	; 0xc0
 8008848:	d87d      	bhi.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	2b80      	cmp	r3, #128	; 0x80
 800884e:	d02d      	beq.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	2b80      	cmp	r3, #128	; 0x80
 8008854:	d877      	bhi.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	2b40      	cmp	r3, #64	; 0x40
 8008860:	d012      	beq.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008862:	e070      	b.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008864:	4b50      	ldr	r3, [pc, #320]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800886c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008870:	d107      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fec0 	bl	80095fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008880:	e3f1      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008886:	e3ee      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008888:	4b47      	ldr	r3, [pc, #284]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008894:	d107      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008896:	f107 0318 	add.w	r3, r7, #24
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fc06 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088a4:	e3df      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088aa:	e3dc      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088ac:	4b3e      	ldr	r3, [pc, #248]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b8:	d107      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ba:	f107 030c 	add.w	r3, r7, #12
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fd48 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088c8:	e3cd      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088ce:	e3ca      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088d0:	4b35      	ldr	r3, [pc, #212]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088d8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088da:	4b33      	ldr	r3, [pc, #204]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0304 	and.w	r3, r3, #4
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d10c      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d109      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088ec:	4b2e      	ldr	r3, [pc, #184]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	08db      	lsrs	r3, r3, #3
 80088f2:	f003 0303 	and.w	r3, r3, #3
 80088f6:	4a2d      	ldr	r2, [pc, #180]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80088f8:	fa22 f303 	lsr.w	r3, r2, r3
 80088fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088fe:	e01e      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008900:	4b29      	ldr	r3, [pc, #164]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890c:	d106      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008914:	d102      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008916:	4b26      	ldr	r3, [pc, #152]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891a:	e010      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800891c:	4b22      	ldr	r3, [pc, #136]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008928:	d106      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008930:	d102      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008932:	4b20      	ldr	r3, [pc, #128]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008936:	e002      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800893c:	e393      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800893e:	e392      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008940:	4b1d      	ldr	r3, [pc, #116]	; (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008944:	e38f      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800894a:	e38c      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008952:	f040 80a7 	bne.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800895e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008966:	d05f      	beq.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800896e:	f200 8096 	bhi.w	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008978:	f000 808e 	beq.w	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008982:	f200 808c 	bhi.w	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800898c:	d03a      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008994:	f200 8083 	bhi.w	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00e      	beq.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089a4:	d01c      	beq.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80089a6:	e07a      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80089a8:	58024400 	.word	0x58024400
 80089ac:	03d09000 	.word	0x03d09000
 80089b0:	003d0900 	.word	0x003d0900
 80089b4:	00f42400 	.word	0x00f42400
 80089b8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089bc:	4baa      	ldr	r3, [pc, #680]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089c8:	d107      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fe14 	bl	80095fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089d8:	e345      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089de:	e342      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089e0:	4ba1      	ldr	r3, [pc, #644]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089ec:	d107      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ee:	f107 0318 	add.w	r3, r7, #24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fb5a 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089fc:	e333      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a02:	e330      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a04:	4b98      	ldr	r3, [pc, #608]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a10:	d107      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a12:	f107 030c 	add.w	r3, r7, #12
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fc9c 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a20:	e321      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a26:	e31e      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a28:	4b8f      	ldr	r3, [pc, #572]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a32:	4b8d      	ldr	r3, [pc, #564]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0304 	and.w	r3, r3, #4
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d10c      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d109      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a44:	4b88      	ldr	r3, [pc, #544]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	08db      	lsrs	r3, r3, #3
 8008a4a:	f003 0303 	and.w	r3, r3, #3
 8008a4e:	4a87      	ldr	r2, [pc, #540]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008a50:	fa22 f303 	lsr.w	r3, r2, r3
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a56:	e01e      	b.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a58:	4b83      	ldr	r3, [pc, #524]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a64:	d106      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a6c:	d102      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a6e:	4b80      	ldr	r3, [pc, #512]	; (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a72:	e010      	b.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a74:	4b7c      	ldr	r3, [pc, #496]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a80:	d106      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a88:	d102      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a8a:	4b7a      	ldr	r3, [pc, #488]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a8e:	e002      	b.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a94:	e2e7      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a96:	e2e6      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a98:	4b77      	ldr	r3, [pc, #476]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a9c:	e2e3      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa2:	e2e0      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008aaa:	f040 809c 	bne.w	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008aae:	4b6e      	ldr	r3, [pc, #440]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008abe:	d054      	beq.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ac6:	f200 808b 	bhi.w	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ad0:	f000 8083 	beq.w	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ada:	f200 8081 	bhi.w	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ae4:	d02f      	beq.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aec:	d878      	bhi.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d004      	beq.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008afa:	d012      	beq.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008afc:	e070      	b.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008afe:	4b5a      	ldr	r3, [pc, #360]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fd73 	bl	80095fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b1a:	e2a4      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b20:	e2a1      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b22:	4b51      	ldr	r3, [pc, #324]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b2e:	d107      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b30:	f107 0318 	add.w	r3, r7, #24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fab9 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008b3e:	e292      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b44:	e28f      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b46:	4b48      	ldr	r3, [pc, #288]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b52:	d107      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b54:	f107 030c 	add.w	r3, r7, #12
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fbfb 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b62:	e280      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b68:	e27d      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b6a:	4b3f      	ldr	r3, [pc, #252]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b74:	4b3c      	ldr	r3, [pc, #240]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d10c      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d109      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b86:	4b38      	ldr	r3, [pc, #224]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	08db      	lsrs	r3, r3, #3
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	4a36      	ldr	r2, [pc, #216]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008b92:	fa22 f303 	lsr.w	r3, r2, r3
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b98:	e01e      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b9a:	4b33      	ldr	r3, [pc, #204]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ba6:	d106      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bae:	d102      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008bb0:	4b2f      	ldr	r3, [pc, #188]	; (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb4:	e010      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bb6:	4b2c      	ldr	r3, [pc, #176]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bc2:	d106      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bca:	d102      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008bcc:	4b29      	ldr	r3, [pc, #164]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bd0:	e002      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008bd6:	e246      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008bd8:	e245      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bda:	4b27      	ldr	r3, [pc, #156]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bde:	e242      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be4:	e23f      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bec:	f040 80a8 	bne.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008bf0:	4b1d      	ldr	r3, [pc, #116]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008bf8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c00:	d060      	beq.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c08:	f200 8097 	bhi.w	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c12:	f000 808f 	beq.w	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c1c:	f200 808d 	bhi.w	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c26:	d03b      	beq.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c2e:	f200 8084 	bhi.w	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d004      	beq.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c3e:	d01d      	beq.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008c40:	e07b      	b.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c4e:	d107      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 fcd1 	bl	80095fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c5e:	e202      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c64:	e1ff      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c66:	bf00      	nop
 8008c68:	58024400 	.word	0x58024400
 8008c6c:	03d09000 	.word	0x03d09000
 8008c70:	003d0900 	.word	0x003d0900
 8008c74:	00f42400 	.word	0x00f42400
 8008c78:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c7c:	4ba3      	ldr	r3, [pc, #652]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c88:	d107      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8a:	f107 0318 	add.w	r3, r7, #24
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fa0c 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c98:	e1e5      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c9e:	e1e2      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ca0:	4b9a      	ldr	r3, [pc, #616]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cac:	d107      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cae:	f107 030c 	add.w	r3, r7, #12
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 fb4e 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cbc:	e1d3      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc2:	e1d0      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008cc4:	4b91      	ldr	r3, [pc, #580]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cce:	4b8f      	ldr	r3, [pc, #572]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ce0:	4b8a      	ldr	r3, [pc, #552]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	08db      	lsrs	r3, r3, #3
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	4a89      	ldr	r2, [pc, #548]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf2:	e01e      	b.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cf4:	4b85      	ldr	r3, [pc, #532]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d00:	d106      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d08:	d102      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d0a:	4b82      	ldr	r3, [pc, #520]	; (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d0e:	e010      	b.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d10:	4b7e      	ldr	r3, [pc, #504]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d1c:	d106      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d24:	d102      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d26:	4b7c      	ldr	r3, [pc, #496]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d2a:	e002      	b.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d30:	e199      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d32:	e198      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d34:	4b79      	ldr	r3, [pc, #484]	; (8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d38:	e195      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3e:	e192      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d46:	d173      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008d48:	4b70      	ldr	r3, [pc, #448]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d58:	d02f      	beq.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d60:	d863      	bhi.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d6e:	d012      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008d70:	e05b      	b.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d72:	4b66      	ldr	r3, [pc, #408]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d7e:	d107      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d80:	f107 0318 	add.w	r3, r7, #24
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 f991 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d8e:	e16a      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d94:	e167      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d96:	4b5d      	ldr	r3, [pc, #372]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008da2:	d107      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008da4:	f107 030c 	add.w	r3, r7, #12
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fad3 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008db2:	e158      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008db8:	e155      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008dba:	4b54      	ldr	r3, [pc, #336]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dc2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dc4:	4b51      	ldr	r3, [pc, #324]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d10c      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d109      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dd6:	4b4d      	ldr	r3, [pc, #308]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	08db      	lsrs	r3, r3, #3
 8008ddc:	f003 0303 	and.w	r3, r3, #3
 8008de0:	4a4b      	ldr	r2, [pc, #300]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008de2:	fa22 f303 	lsr.w	r3, r2, r3
 8008de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de8:	e01e      	b.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dea:	4b48      	ldr	r3, [pc, #288]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df6:	d106      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dfe:	d102      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e00:	4b44      	ldr	r3, [pc, #272]	; (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e04:	e010      	b.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e06:	4b41      	ldr	r3, [pc, #260]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e12:	d106      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e1a:	d102      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e1c:	4b3e      	ldr	r3, [pc, #248]	; (8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e20:	e002      	b.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e26:	e11e      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e28:	e11d      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e2e:	e11a      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e36:	d133      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008e38:	4b34      	ldr	r3, [pc, #208]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4e:	d012      	beq.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008e50:	e023      	b.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e5e:	d107      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 fbc9 	bl	80095fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e6e:	e0fa      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e74:	e0f7      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e76:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e82:	d107      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e84:	f107 0318 	add.w	r3, r7, #24
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 f90f 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e92:	e0e8      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e98:	e0e5      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9e:	e0e2      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ea6:	f040 808f 	bne.w	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008eaa:	4b18      	ldr	r3, [pc, #96]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008eb2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eba:	d075      	beq.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ec2:	d87e      	bhi.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eca:	d060      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed2:	d876      	bhi.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eda:	d045      	beq.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ee2:	d86e      	bhi.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eea:	d02b      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef2:	d866      	bhi.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f00:	d00e      	beq.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008f02:	e05e      	b.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008f04:	f000 f8bc 	bl	8009080 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f08:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008f0a:	e0ac      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	03d09000 	.word	0x03d09000
 8008f14:	003d0900 	.word	0x003d0900
 8008f18:	00f42400 	.word	0x00f42400
 8008f1c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f20:	4b53      	ldr	r3, [pc, #332]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f2c:	d107      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f2e:	f107 0318 	add.w	r3, r7, #24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 f8ba 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f3c:	e093      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f42:	e090      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f44:	4b4a      	ldr	r3, [pc, #296]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f50:	d107      	bne.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f52:	f107 030c 	add.w	r3, r7, #12
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f9fc 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f60:	e081      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f66:	e07e      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f68:	4b41      	ldr	r3, [pc, #260]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	d109      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f74:	4b3e      	ldr	r3, [pc, #248]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	08db      	lsrs	r3, r3, #3
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	4a3d      	ldr	r2, [pc, #244]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f86:	e06e      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f8c:	e06b      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f8e:	4b38      	ldr	r3, [pc, #224]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9a:	d102      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8008f9c:	4b36      	ldr	r3, [pc, #216]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fa0:	e061      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa6:	e05e      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fa8:	4b31      	ldr	r3, [pc, #196]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fb4:	d102      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8008fb6:	4b31      	ldr	r3, [pc, #196]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fba:	e054      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fc0:	e051      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fc6:	e04e      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fce:	d148      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fd8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe0:	d02a      	beq.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe8:	d838      	bhi.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d004      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ff6:	d00d      	beq.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008ff8:	e030      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ffa:	4b1d      	ldr	r3, [pc, #116]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009006:	d102      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009008:	4b1c      	ldr	r3, [pc, #112]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800900c:	e02b      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009012:	e028      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009014:	4b16      	ldr	r3, [pc, #88]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009020:	d107      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fae8 	bl	80095fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009030:	e019      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009036:	e016      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009038:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009044:	d107      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009046:	f107 0318 	add.w	r3, r7, #24
 800904a:	4618      	mov	r0, r3
 800904c:	f000 f82e 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009054:	e007      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800905a:	e004      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009060:	e001      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009068:	4618      	mov	r0, r3
 800906a:	3740      	adds	r7, #64	; 0x40
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	58024400 	.word	0x58024400
 8009074:	03d09000 	.word	0x03d09000
 8009078:	003d0900 	.word	0x003d0900
 800907c:	00f42400 	.word	0x00f42400

08009080 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009084:	f7fe fb8e 	bl	80077a4 <HAL_RCC_GetHCLKFreq>
 8009088:	4602      	mov	r2, r0
 800908a:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	091b      	lsrs	r3, r3, #4
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	4904      	ldr	r1, [pc, #16]	; (80090a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009096:	5ccb      	ldrb	r3, [r1, r3]
 8009098:	f003 031f 	and.w	r3, r3, #31
 800909c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	58024400 	.word	0x58024400
 80090a8:	08013150 	.word	0x08013150

080090ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b089      	sub	sp, #36	; 0x24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090b4:	4ba1      	ldr	r3, [pc, #644]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b8:	f003 0303 	and.w	r3, r3, #3
 80090bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80090be:	4b9f      	ldr	r3, [pc, #636]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	0b1b      	lsrs	r3, r3, #12
 80090c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090ca:	4b9c      	ldr	r3, [pc, #624]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	091b      	lsrs	r3, r3, #4
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80090d6:	4b99      	ldr	r3, [pc, #612]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090da:	08db      	lsrs	r3, r3, #3
 80090dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	fb02 f303 	mul.w	r3, r2, r3
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 8111 	beq.w	800931c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	f000 8083 	beq.w	8009208 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b02      	cmp	r3, #2
 8009106:	f200 80a1 	bhi.w	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d056      	beq.n	80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009116:	e099      	b.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009118:	4b88      	ldr	r3, [pc, #544]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b00      	cmp	r3, #0
 8009122:	d02d      	beq.n	8009180 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009124:	4b85      	ldr	r3, [pc, #532]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	08db      	lsrs	r3, r3, #3
 800912a:	f003 0303 	and.w	r3, r3, #3
 800912e:	4a84      	ldr	r2, [pc, #528]	; (8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009130:	fa22 f303 	lsr.w	r3, r2, r3
 8009134:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	ee07 3a90 	vmov	s15, r3
 800913c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914e:	4b7b      	ldr	r3, [pc, #492]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009162:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800917e:	e087      	b.n	8009290 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800918e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009192:	4b6a      	ldr	r3, [pc, #424]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091c2:	e065      	b.n	8009290 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800934c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d6:	4b59      	ldr	r3, [pc, #356]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009206:	e043      	b.n	8009290 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009212:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921a:	4b48      	ldr	r3, [pc, #288]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922a:	ed97 6a03 	vldr	s12, [r7, #12]
 800922e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800923e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800924a:	e021      	b.n	8009290 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009256:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800934c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800925a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800925e:	4b37      	ldr	r3, [pc, #220]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800926e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009272:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009344 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800927a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800927e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800928e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009290:	4b2a      	ldr	r3, [pc, #168]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	0a5b      	lsrs	r3, r3, #9
 8009296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092b6:	ee17 2a90 	vmov	r2, s15
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80092be:	4b1f      	ldr	r3, [pc, #124]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	0c1b      	lsrs	r3, r3, #16
 80092c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092c8:	ee07 3a90 	vmov	s15, r3
 80092cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80092dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092e4:	ee17 2a90 	vmov	r2, s15
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80092ec:	4b13      	ldr	r3, [pc, #76]	; (800933c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	0e1b      	lsrs	r3, r3, #24
 80092f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092f6:	ee07 3a90 	vmov	s15, r3
 80092fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009302:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009306:	edd7 6a07 	vldr	s13, [r7, #28]
 800930a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800930e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009312:	ee17 2a90 	vmov	r2, s15
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800931a:	e008      	b.n	800932e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	609a      	str	r2, [r3, #8]
}
 800932e:	bf00      	nop
 8009330:	3724      	adds	r7, #36	; 0x24
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	58024400 	.word	0x58024400
 8009340:	03d09000 	.word	0x03d09000
 8009344:	46000000 	.word	0x46000000
 8009348:	4c742400 	.word	0x4c742400
 800934c:	4a742400 	.word	0x4a742400
 8009350:	4b742400 	.word	0x4b742400

08009354 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009354:	b480      	push	{r7}
 8009356:	b089      	sub	sp, #36	; 0x24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800935c:	4ba1      	ldr	r3, [pc, #644]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800935e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009360:	f003 0303 	and.w	r3, r3, #3
 8009364:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009366:	4b9f      	ldr	r3, [pc, #636]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936a:	0d1b      	lsrs	r3, r3, #20
 800936c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009370:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009372:	4b9c      	ldr	r3, [pc, #624]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009376:	0a1b      	lsrs	r3, r3, #8
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800937e:	4b99      	ldr	r3, [pc, #612]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009382:	08db      	lsrs	r3, r3, #3
 8009384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	fb02 f303 	mul.w	r3, r2, r3
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009396:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 8111 	beq.w	80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	f000 8083 	beq.w	80094b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	f200 80a1 	bhi.w	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d003      	beq.n	80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d056      	beq.n	800946c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093be:	e099      	b.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093c0:	4b88      	ldr	r3, [pc, #544]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d02d      	beq.n	8009428 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093cc:	4b85      	ldr	r3, [pc, #532]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	08db      	lsrs	r3, r3, #3
 80093d2:	f003 0303 	and.w	r3, r3, #3
 80093d6:	4a84      	ldr	r2, [pc, #528]	; (80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093d8:	fa22 f303 	lsr.w	r3, r2, r3
 80093dc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	ee07 3a90 	vmov	s15, r3
 80093e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f6:	4b7b      	ldr	r3, [pc, #492]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009406:	ed97 6a03 	vldr	s12, [r7, #12]
 800940a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009422:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009426:	e087      	b.n	8009538 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943a:	4b6a      	ldr	r3, [pc, #424]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944a:	ed97 6a03 	vldr	s12, [r7, #12]
 800944e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800945e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009466:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800946a:	e065      	b.n	8009538 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800947a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947e:	4b59      	ldr	r3, [pc, #356]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009492:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094ae:	e043      	b.n	8009538 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c2:	4b48      	ldr	r3, [pc, #288]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094f2:	e021      	b.n	8009538 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009506:	4b37      	ldr	r3, [pc, #220]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009516:	ed97 6a03 	vldr	s12, [r7, #12]
 800951a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800951e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800952a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009532:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009536:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009538:	4b2a      	ldr	r3, [pc, #168]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	0a5b      	lsrs	r3, r3, #9
 800953e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800954e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009552:	edd7 6a07 	vldr	s13, [r7, #28]
 8009556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800955a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800955e:	ee17 2a90 	vmov	r2, s15
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009566:	4b1f      	ldr	r3, [pc, #124]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	0c1b      	lsrs	r3, r3, #16
 800956c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009570:	ee07 3a90 	vmov	s15, r3
 8009574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800957c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009580:	edd7 6a07 	vldr	s13, [r7, #28]
 8009584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800958c:	ee17 2a90 	vmov	r2, s15
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009594:	4b13      	ldr	r3, [pc, #76]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	0e1b      	lsrs	r3, r3, #24
 800959a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800959e:	ee07 3a90 	vmov	s15, r3
 80095a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80095b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095ba:	ee17 2a90 	vmov	r2, s15
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095c2:	e008      	b.n	80095d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	609a      	str	r2, [r3, #8]
}
 80095d6:	bf00      	nop
 80095d8:	3724      	adds	r7, #36	; 0x24
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	58024400 	.word	0x58024400
 80095e8:	03d09000 	.word	0x03d09000
 80095ec:	46000000 	.word	0x46000000
 80095f0:	4c742400 	.word	0x4c742400
 80095f4:	4a742400 	.word	0x4a742400
 80095f8:	4b742400 	.word	0x4b742400

080095fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b089      	sub	sp, #36	; 0x24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009604:	4ba0      	ldr	r3, [pc, #640]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800960e:	4b9e      	ldr	r3, [pc, #632]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	091b      	lsrs	r3, r3, #4
 8009614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009618:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800961a:	4b9b      	ldr	r3, [pc, #620]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009624:	4b98      	ldr	r3, [pc, #608]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009628:	08db      	lsrs	r3, r3, #3
 800962a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	fb02 f303 	mul.w	r3, r2, r3
 8009634:	ee07 3a90 	vmov	s15, r3
 8009638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	f000 8111 	beq.w	800986a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	2b02      	cmp	r3, #2
 800964c:	f000 8083 	beq.w	8009756 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	2b02      	cmp	r3, #2
 8009654:	f200 80a1 	bhi.w	800979a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d056      	beq.n	8009712 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009664:	e099      	b.n	800979a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009666:	4b88      	ldr	r3, [pc, #544]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0320 	and.w	r3, r3, #32
 800966e:	2b00      	cmp	r3, #0
 8009670:	d02d      	beq.n	80096ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009672:	4b85      	ldr	r3, [pc, #532]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	08db      	lsrs	r3, r3, #3
 8009678:	f003 0303 	and.w	r3, r3, #3
 800967c:	4a83      	ldr	r2, [pc, #524]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800967e:	fa22 f303 	lsr.w	r3, r2, r3
 8009682:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	ee07 3a90 	vmov	s15, r3
 8009694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969c:	4b7a      	ldr	r3, [pc, #488]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800969e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096cc:	e087      	b.n	80097de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	ee07 3a90 	vmov	s15, r3
 80096d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009894 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e0:	4b69      	ldr	r3, [pc, #420]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009710:	e065      	b.n	80097de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009898 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009724:	4b58      	ldr	r3, [pc, #352]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009734:	ed97 6a03 	vldr	s12, [r7, #12]
 8009738:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800973c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800974c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009750:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009754:	e043      	b.n	80097de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	ee07 3a90 	vmov	s15, r3
 800975c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009760:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800989c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009768:	4b47      	ldr	r3, [pc, #284]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800976a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009778:	ed97 6a03 	vldr	s12, [r7, #12]
 800977c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800978c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009794:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009798:	e021      	b.n	80097de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	ee07 3a90 	vmov	s15, r3
 80097a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009894 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ac:	4b36      	ldr	r3, [pc, #216]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80097c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009890 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80097de:	4b2a      	ldr	r3, [pc, #168]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	0a5b      	lsrs	r3, r3, #9
 80097e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e8:	ee07 3a90 	vmov	s15, r3
 80097ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009804:	ee17 2a90 	vmov	r2, s15
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800980c:	4b1e      	ldr	r3, [pc, #120]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800980e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009810:	0c1b      	lsrs	r3, r3, #16
 8009812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009826:	edd7 6a07 	vldr	s13, [r7, #28]
 800982a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800982e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009832:	ee17 2a90 	vmov	r2, s15
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800983a:	4b13      	ldr	r3, [pc, #76]	; (8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983e:	0e1b      	lsrs	r3, r3, #24
 8009840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009854:	edd7 6a07 	vldr	s13, [r7, #28]
 8009858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800985c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009860:	ee17 2a90 	vmov	r2, s15
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009868:	e008      	b.n	800987c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	609a      	str	r2, [r3, #8]
}
 800987c:	bf00      	nop
 800987e:	3724      	adds	r7, #36	; 0x24
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	58024400 	.word	0x58024400
 800988c:	03d09000 	.word	0x03d09000
 8009890:	46000000 	.word	0x46000000
 8009894:	4c742400 	.word	0x4c742400
 8009898:	4a742400 	.word	0x4a742400
 800989c:	4b742400 	.word	0x4b742400

080098a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098ae:	4b53      	ldr	r3, [pc, #332]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d101      	bne.n	80098be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e099      	b.n	80099f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098be:	4b4f      	ldr	r3, [pc, #316]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a4e      	ldr	r2, [pc, #312]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80098c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ca:	f7f8 f847 	bl	800195c <HAL_GetTick>
 80098ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098d0:	e008      	b.n	80098e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80098d2:	f7f8 f843 	bl	800195c <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d901      	bls.n	80098e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e086      	b.n	80099f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098e4:	4b45      	ldr	r3, [pc, #276]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1f0      	bne.n	80098d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098f0:	4b42      	ldr	r3, [pc, #264]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80098f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	031b      	lsls	r3, r3, #12
 80098fe:	493f      	ldr	r1, [pc, #252]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 8009900:	4313      	orrs	r3, r2
 8009902:	628b      	str	r3, [r1, #40]	; 0x28
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	3b01      	subs	r3, #1
 800990a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	3b01      	subs	r3, #1
 8009914:	025b      	lsls	r3, r3, #9
 8009916:	b29b      	uxth	r3, r3
 8009918:	431a      	orrs	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	3b01      	subs	r3, #1
 8009920:	041b      	lsls	r3, r3, #16
 8009922:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	3b01      	subs	r3, #1
 800992e:	061b      	lsls	r3, r3, #24
 8009930:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009934:	4931      	ldr	r1, [pc, #196]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 8009936:	4313      	orrs	r3, r2
 8009938:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800993a:	4b30      	ldr	r3, [pc, #192]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 800993c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	492d      	ldr	r1, [pc, #180]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 8009948:	4313      	orrs	r3, r2
 800994a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800994c:	4b2b      	ldr	r3, [pc, #172]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	f023 0220 	bic.w	r2, r3, #32
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	4928      	ldr	r1, [pc, #160]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 800995a:	4313      	orrs	r3, r2
 800995c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800995e:	4b27      	ldr	r3, [pc, #156]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 8009960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009962:	4a26      	ldr	r2, [pc, #152]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 8009964:	f023 0310 	bic.w	r3, r3, #16
 8009968:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800996a:	4b24      	ldr	r3, [pc, #144]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 800996c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800996e:	4b24      	ldr	r3, [pc, #144]	; (8009a00 <RCCEx_PLL2_Config+0x160>)
 8009970:	4013      	ands	r3, r2
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	69d2      	ldr	r2, [r2, #28]
 8009976:	00d2      	lsls	r2, r2, #3
 8009978:	4920      	ldr	r1, [pc, #128]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 800997a:	4313      	orrs	r3, r2
 800997c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800997e:	4b1f      	ldr	r3, [pc, #124]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 8009980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009982:	4a1e      	ldr	r2, [pc, #120]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 8009984:	f043 0310 	orr.w	r3, r3, #16
 8009988:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d106      	bne.n	800999e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009990:	4b1a      	ldr	r3, [pc, #104]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	4a19      	ldr	r2, [pc, #100]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 8009996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800999a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800999c:	e00f      	b.n	80099be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d106      	bne.n	80099b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80099a4:	4b15      	ldr	r3, [pc, #84]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	4a14      	ldr	r2, [pc, #80]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80099aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099b0:	e005      	b.n	80099be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80099b2:	4b12      	ldr	r3, [pc, #72]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80099b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b6:	4a11      	ldr	r2, [pc, #68]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80099b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80099be:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a0e      	ldr	r2, [pc, #56]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80099c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ca:	f7f7 ffc7 	bl	800195c <HAL_GetTick>
 80099ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099d0:	e008      	b.n	80099e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80099d2:	f7f7 ffc3 	bl	800195c <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d901      	bls.n	80099e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e006      	b.n	80099f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099e4:	4b05      	ldr	r3, [pc, #20]	; (80099fc <RCCEx_PLL2_Config+0x15c>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0f0      	beq.n	80099d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	58024400 	.word	0x58024400
 8009a00:	ffff0007 	.word	0xffff0007

08009a04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a12:	4b53      	ldr	r3, [pc, #332]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d101      	bne.n	8009a22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e099      	b.n	8009b56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a22:	4b4f      	ldr	r3, [pc, #316]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a4e      	ldr	r2, [pc, #312]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a2e:	f7f7 ff95 	bl	800195c <HAL_GetTick>
 8009a32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a34:	e008      	b.n	8009a48 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a36:	f7f7 ff91 	bl	800195c <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e086      	b.n	8009b56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a48:	4b45      	ldr	r3, [pc, #276]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1f0      	bne.n	8009a36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a54:	4b42      	ldr	r3, [pc, #264]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a58:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	051b      	lsls	r3, r3, #20
 8009a62:	493f      	ldr	r1, [pc, #252]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	628b      	str	r3, [r1, #40]	; 0x28
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	025b      	lsls	r3, r3, #9
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	041b      	lsls	r3, r3, #16
 8009a86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	061b      	lsls	r3, r3, #24
 8009a94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a98:	4931      	ldr	r1, [pc, #196]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a9e:	4b30      	ldr	r3, [pc, #192]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	492d      	ldr	r1, [pc, #180]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009aac:	4313      	orrs	r3, r2
 8009aae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ab0:	4b2b      	ldr	r3, [pc, #172]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	4928      	ldr	r1, [pc, #160]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ac2:	4b27      	ldr	r3, [pc, #156]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac6:	4a26      	ldr	r2, [pc, #152]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009acc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ace:	4b24      	ldr	r3, [pc, #144]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ad2:	4b24      	ldr	r3, [pc, #144]	; (8009b64 <RCCEx_PLL3_Config+0x160>)
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	69d2      	ldr	r2, [r2, #28]
 8009ada:	00d2      	lsls	r2, r2, #3
 8009adc:	4920      	ldr	r1, [pc, #128]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ae2:	4b1f      	ldr	r3, [pc, #124]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae6:	4a1e      	ldr	r2, [pc, #120]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d106      	bne.n	8009b02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009af4:	4b1a      	ldr	r3, [pc, #104]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	4a19      	ldr	r2, [pc, #100]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009afa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b00:	e00f      	b.n	8009b22 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d106      	bne.n	8009b16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b08:	4b15      	ldr	r3, [pc, #84]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0c:	4a14      	ldr	r2, [pc, #80]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009b0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b14:	e005      	b.n	8009b22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b16:	4b12      	ldr	r3, [pc, #72]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	4a11      	ldr	r2, [pc, #68]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009b1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b22:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a0e      	ldr	r2, [pc, #56]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b2e:	f7f7 ff15 	bl	800195c <HAL_GetTick>
 8009b32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b34:	e008      	b.n	8009b48 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b36:	f7f7 ff11 	bl	800195c <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d901      	bls.n	8009b48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e006      	b.n	8009b56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b48:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <RCCEx_PLL3_Config+0x15c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0f0      	beq.n	8009b36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	58024400 	.word	0x58024400
 8009b64:	ffff0007 	.word	0xffff0007

08009b68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	; 0x28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e075      	b.n	8009c66 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d105      	bne.n	8009b92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7f7 f981 	bl	8000e94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2203      	movs	r2, #3
 8009b96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f868 	bl	8009c70 <HAL_SD_InitCard>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e05d      	b.n	8009c66 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009baa:	f107 0308 	add.w	r3, r7, #8
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fda5 	bl	800a700 <HAL_SD_GetCardStatus>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e052      	b.n	8009c66 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009bc0:	7e3b      	ldrb	r3, [r7, #24]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009bc6:	7e7b      	ldrb	r3, [r7, #25]
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d10a      	bne.n	8009bea <HAL_SD_Init+0x82>
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <HAL_SD_Init+0x78>
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009be6:	659a      	str	r2, [r3, #88]	; 0x58
 8009be8:	e00b      	b.n	8009c02 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d104      	bne.n	8009bfc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bf8:	659a      	str	r2, [r3, #88]	; 0x58
 8009bfa:	e002      	b.n	8009c02 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fe5b 	bl	800a8c4 <HAL_SD_ConfigWideBusOperation>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e026      	b.n	8009c66 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009c18:	f7f7 fea0 	bl	800195c <HAL_GetTick>
 8009c1c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009c1e:	e011      	b.n	8009c44 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c20:	f7f7 fe9c 	bl	800195c <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d109      	bne.n	8009c44 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c36:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e010      	b.n	8009c66 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 ff4d 	bl	800aae4 <HAL_SD_GetCardState>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d1e7      	bne.n	8009c20 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3728      	adds	r7, #40	; 0x28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
	...

08009c70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009c70:	b590      	push	{r4, r7, lr}
 8009c72:	b08d      	sub	sp, #52	; 0x34
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009c84:	2300      	movs	r3, #0
 8009c86:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009c88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009c8c:	f7fe fd26 	bl	80086dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009c90:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d109      	bne.n	8009cac <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009ca6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e06a      	b.n	8009d82 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	0a1b      	lsrs	r3, r3, #8
 8009cb0:	4a36      	ldr	r2, [pc, #216]	; (8009d8c <HAL_SD_InitCard+0x11c>)
 8009cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb6:	091b      	lsrs	r3, r3, #4
 8009cb8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681c      	ldr	r4, [r3, #0]
 8009cbe:	466a      	mov	r2, sp
 8009cc0:	f107 0318 	add.w	r3, r7, #24
 8009cc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009cc8:	e882 0003 	stmia.w	r2, {r0, r1}
 8009ccc:	f107 030c 	add.w	r3, r7, #12
 8009cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f004 f836 	bl	800dd44 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f004 f879 	bl	800ddd4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009cee:	4a28      	ldr	r2, [pc, #160]	; (8009d90 <HAL_SD_InitCard+0x120>)
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f7 fe3b 	bl	8001974 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 ffcc 	bl	800ac9c <SD_PowerON>
 8009d04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e02e      	b.n	8009d82 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fefd 	bl	800ab24 <SD_InitCard>
 8009d2a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00b      	beq.n	8009d4a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	431a      	orrs	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e01b      	b.n	8009d82 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d52:	4618      	mov	r0, r3
 8009d54:	f004 f8d4 	bl	800df00 <SDMMC_CmdBlockLength>
 8009d58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00f      	beq.n	8009d80 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a0b      	ldr	r2, [pc, #44]	; (8009d94 <HAL_SD_InitCard+0x124>)
 8009d66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	372c      	adds	r7, #44	; 0x2c
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd90      	pop	{r4, r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	014f8b59 	.word	0x014f8b59
 8009d90:	00012110 	.word	0x00012110
 8009d94:	1fe00fff 	.word	0x1fe00fff

08009d98 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08c      	sub	sp, #48	; 0x30
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d107      	bne.n	8009dc0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e08d      	b.n	8009edc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	f040 8086 	bne.w	8009eda <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	441a      	add	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d907      	bls.n	8009df2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e074      	b.n	8009edc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2203      	movs	r2, #3
 8009df6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	025a      	lsls	r2, r3, #9
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d002      	beq.n	8009e1e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	025b      	lsls	r3, r3, #9
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e22:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	025b      	lsls	r3, r3, #9
 8009e28:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009e2a:	2390      	movs	r3, #144	; 0x90
 8009e2c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e2e:	2302      	movs	r3, #2
 8009e30:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f107 0210 	add.w	r2, r7, #16
 8009e42:	4611      	mov	r1, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f004 f82f 	bl	800dea8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e58:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2201      	movs	r2, #1
 8009e68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d90a      	bls.n	8009e86 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2282      	movs	r2, #130	; 0x82
 8009e74:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f004 f885 	bl	800df8c <SDMMC_CmdReadMultiBlock>
 8009e82:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009e84:	e009      	b.n	8009e9a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2281      	movs	r2, #129	; 0x81
 8009e8a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e92:	4618      	mov	r0, r3
 8009e94:	f004 f857 	bl	800df46 <SDMMC_CmdReadSingleBlock>
 8009e98:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d012      	beq.n	8009ec6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a0f      	ldr	r2, [pc, #60]	; (8009ee4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e00a      	b.n	8009edc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009ed4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e000      	b.n	8009edc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009eda:	2302      	movs	r3, #2
  }
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3730      	adds	r7, #48	; 0x30
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	1fe00fff 	.word	0x1fe00fff

08009ee8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08c      	sub	sp, #48	; 0x30
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d107      	bne.n	8009f10 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e08d      	b.n	800a02c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	f040 8086 	bne.w	800a02a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	441a      	add	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d907      	bls.n	8009f42 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e074      	b.n	800a02c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2203      	movs	r2, #3
 8009f46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	025a      	lsls	r2, r3, #9
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d002      	beq.n	8009f6e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6a:	025b      	lsls	r3, r3, #9
 8009f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f72:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	025b      	lsls	r3, r3, #9
 8009f78:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009f7a:	2390      	movs	r3, #144	; 0x90
 8009f7c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f107 0210 	add.w	r2, r7, #16
 8009f92:	4611      	mov	r1, r2
 8009f94:	4618      	mov	r0, r3
 8009f96:	f003 ff87 	bl	800dea8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fa8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d90a      	bls.n	8009fd6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	22a0      	movs	r2, #160	; 0xa0
 8009fc4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f004 f823 	bl	800e018 <SDMMC_CmdWriteMultiBlock>
 8009fd2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009fd4:	e009      	b.n	8009fea <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2290      	movs	r2, #144	; 0x90
 8009fda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f003 fff5 	bl	800dfd2 <SDMMC_CmdWriteSingleBlock>
 8009fe8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d012      	beq.n	800a016 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a0f      	ldr	r2, [pc, #60]	; (800a034 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009ff6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffe:	431a      	orrs	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e00a      	b.n	800a02c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a024:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	e000      	b.n	800a02c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a02a:	2302      	movs	r3, #2
  }
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3730      	adds	r7, #48	; 0x30
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	1fe00fff 	.word	0x1fe00fff

0800a038 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d008      	beq.n	800a066 <HAL_SD_IRQHandler+0x2e>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f001 f904 	bl	800b26c <SD_Read_IT>
 800a064:	e19a      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 80ac 	beq.w	800a1ce <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a07e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	4b9d      	ldr	r3, [pc, #628]	; (800a300 <HAL_SD_IRQHandler+0x2c8>)
 800a08c:	400b      	ands	r3, r1
 800a08e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a09e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ae:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d038      	beq.n	800a12c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f003 0302 	and.w	r3, r3, #2
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d104      	bne.n	800a0ce <HAL_SD_IRQHandler+0x96>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f003 0320 	and.w	r3, r3, #32
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d011      	beq.n	800a0f2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f003 ffc4 	bl	800e060 <SDMMC_CmdStopTransfer>
 800a0d8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d008      	beq.n	800a0f2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f959 	bl	800a3a4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a83      	ldr	r2, [pc, #524]	; (800a304 <HAL_SD_IRQHandler+0x2cc>)
 800a0f8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d104      	bne.n	800a11c <HAL_SD_IRQHandler+0xe4>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f003 0302 	and.w	r3, r3, #2
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d003      	beq.n	800a124 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f005 ffe1 	bl	80100e4 <HAL_SD_RxCpltCallback>
 800a122:	e13b      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f005 ffd3 	bl	80100d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a12a:	e137      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 8132 	beq.w	800a39c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2200      	movs	r2, #0
 800a13e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2200      	movs	r2, #0
 800a146:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2200      	movs	r2, #0
 800a14e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d104      	bne.n	800a164 <HAL_SD_IRQHandler+0x12c>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f003 0320 	and.w	r3, r3, #32
 800a160:	2b00      	cmp	r3, #0
 800a162:	d011      	beq.n	800a188 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f003 ff79 	bl	800e060 <SDMMC_CmdStopTransfer>
 800a16e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d008      	beq.n	800a188 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	431a      	orrs	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f90e 	bl	800a3a4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f003 0310 	and.w	r3, r3, #16
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d104      	bne.n	800a1aa <HAL_SD_IRQHandler+0x172>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f005 ff90 	bl	80100d0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d105      	bne.n	800a1c6 <HAL_SD_IRQHandler+0x18e>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f003 0302 	and.w	r3, r3, #2
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 80eb 	beq.w	800a39c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f005 ff8c 	bl	80100e4 <HAL_SD_RxCpltCallback>
}
 800a1cc:	e0e6      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d008      	beq.n	800a1ee <HAL_SD_IRQHandler+0x1b6>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f003 0308 	and.w	r3, r3, #8
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f001 f886 	bl	800b2f8 <SD_Write_IT>
 800a1ec:	e0d6      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 80a2 	beq.w	800a342 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d005      	beq.n	800a218 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a210:	f043 0202 	orr.w	r2, r3, #2
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21e:	f003 0308 	and.w	r3, r3, #8
 800a222:	2b00      	cmp	r3, #0
 800a224:	d005      	beq.n	800a232 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22a:	f043 0208 	orr.w	r2, r3, #8
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a238:	f003 0320 	and.w	r3, r3, #32
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d005      	beq.n	800a24c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a244:	f043 0220 	orr.w	r2, r3, #32
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a252:	f003 0310 	and.w	r3, r3, #16
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a25e:	f043 0210 	orr.w	r2, r3, #16
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a26      	ldr	r2, [pc, #152]	; (800a304 <HAL_SD_IRQHandler+0x2cc>)
 800a26c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a27c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68da      	ldr	r2, [r3, #12]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a28c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a29c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68da      	ldr	r2, [r3, #12]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2ac:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f003 fed4 	bl	800e060 <SDMMC_CmdStopTransfer>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68da      	ldr	r2, [r3, #12]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2d2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2dc:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f003 0308 	and.w	r3, r3, #8
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00f      	beq.n	800a308 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f854 	bl	800a3a4 <HAL_SD_ErrorCallback>
}
 800a2fc:	e04e      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
 800a2fe:	bf00      	nop
 800a300:	ffff3ec5 	.word	0xffff3ec5
 800a304:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d044      	beq.n	800a39c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a316:	2b00      	cmp	r3, #0
 800a318:	d040      	beq.n	800a39c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a328:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2200      	movs	r2, #0
 800a330:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f832 	bl	800a3a4 <HAL_SD_ErrorCallback>
}
 800a340:	e02c      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d025      	beq.n	800a39c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a358:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10c      	bne.n	800a382 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f001 f828 	bl	800b3c8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a378:	e010      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 f810 	bl	800b3a0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a380:	e00c      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f003 0320 	and.w	r3, r3, #32
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 f811 	bl	800b3b4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a392:	e003      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fff9 	bl	800b38c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a39a:	e7ff      	b.n	800a39c <HAL_SD_IRQHandler+0x364>
 800a39c:	bf00      	nop
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3c6:	0f9b      	lsrs	r3, r3, #30
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3d2:	0e9b      	lsrs	r3, r3, #26
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e4:	0e1b      	lsrs	r3, r3, #24
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	f003 0303 	and.w	r3, r3, #3
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f6:	0c1b      	lsrs	r3, r3, #16
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a402:	0a1b      	lsrs	r3, r3, #8
 800a404:	b2da      	uxtb	r2, r3
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a418:	0d1b      	lsrs	r3, r3, #20
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a424:	0c1b      	lsrs	r3, r3, #16
 800a426:	b2db      	uxtb	r3, r3
 800a428:	f003 030f 	and.w	r3, r3, #15
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a436:	0bdb      	lsrs	r3, r3, #15
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a448:	0b9b      	lsrs	r3, r3, #14
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	b2da      	uxtb	r2, r3
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a45a:	0b5b      	lsrs	r3, r3, #13
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	b2da      	uxtb	r2, r3
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a46c:	0b1b      	lsrs	r3, r3, #12
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	b2da      	uxtb	r2, r3
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2200      	movs	r2, #0
 800a47e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a484:	2b00      	cmp	r3, #0
 800a486:	d163      	bne.n	800a550 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a48c:	009a      	lsls	r2, r3, #2
 800a48e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a492:	4013      	ands	r3, r2
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a498:	0f92      	lsrs	r2, r2, #30
 800a49a:	431a      	orrs	r2, r3
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4a4:	0edb      	lsrs	r3, r3, #27
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4b6:	0e1b      	lsrs	r3, r3, #24
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	f003 0307 	and.w	r3, r3, #7
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4c8:	0d5b      	lsrs	r3, r3, #21
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	f003 0307 	and.w	r3, r3, #7
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4da:	0c9b      	lsrs	r3, r3, #18
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0307 	and.w	r3, r3, #7
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4ec:	0bdb      	lsrs	r3, r3, #15
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	f003 0307 	and.w	r3, r3, #7
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	7e1b      	ldrb	r3, [r3, #24]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 0307 	and.w	r3, r3, #7
 800a50e:	3302      	adds	r3, #2
 800a510:	2201      	movs	r2, #1
 800a512:	fa02 f303 	lsl.w	r3, r2, r3
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a51a:	fb02 f203 	mul.w	r2, r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	7a1b      	ldrb	r3, [r3, #8]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f003 030f 	and.w	r3, r3, #15
 800a52c:	2201      	movs	r2, #1
 800a52e:	409a      	lsls	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a53c:	0a52      	lsrs	r2, r2, #9
 800a53e:	fb02 f203 	mul.w	r2, r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a54c:	655a      	str	r2, [r3, #84]	; 0x54
 800a54e:	e031      	b.n	800a5b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a554:	2b01      	cmp	r3, #1
 800a556:	d11d      	bne.n	800a594 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a55c:	041b      	lsls	r3, r3, #16
 800a55e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a566:	0c1b      	lsrs	r3, r3, #16
 800a568:	431a      	orrs	r2, r3
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	3301      	adds	r3, #1
 800a574:	029a      	lsls	r2, r3, #10
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a588:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	655a      	str	r2, [r3, #84]	; 0x54
 800a592:	e00f      	b.n	800a5b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a58      	ldr	r2, [pc, #352]	; (800a6fc <HAL_SD_GetCardCSD+0x344>)
 800a59a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e09d      	b.n	800a6f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5b8:	0b9b      	lsrs	r3, r3, #14
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5ca:	09db      	lsrs	r3, r3, #7
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5ec:	0fdb      	lsrs	r3, r3, #31
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5f8:	0f5b      	lsrs	r3, r3, #29
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	f003 0303 	and.w	r3, r3, #3
 800a600:	b2da      	uxtb	r2, r3
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a60a:	0e9b      	lsrs	r3, r3, #26
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f003 0307 	and.w	r3, r3, #7
 800a612:	b2da      	uxtb	r2, r3
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a61c:	0d9b      	lsrs	r3, r3, #22
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	f003 030f 	and.w	r3, r3, #15
 800a624:	b2da      	uxtb	r2, r3
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a62e:	0d5b      	lsrs	r3, r3, #21
 800a630:	b2db      	uxtb	r3, r3
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	b2da      	uxtb	r2, r3
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a64a:	0c1b      	lsrs	r3, r3, #16
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	b2da      	uxtb	r2, r3
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a65e:	0bdb      	lsrs	r3, r3, #15
 800a660:	b2db      	uxtb	r3, r3
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	b2da      	uxtb	r2, r3
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a672:	0b9b      	lsrs	r3, r3, #14
 800a674:	b2db      	uxtb	r3, r3
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a686:	0b5b      	lsrs	r3, r3, #13
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a69a:	0b1b      	lsrs	r3, r3, #12
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 0301 	and.w	r3, r3, #1
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ae:	0a9b      	lsrs	r3, r3, #10
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	f003 0303 	and.w	r3, r3, #3
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6c2:	0a1b      	lsrs	r3, r3, #8
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6d6:	085b      	lsrs	r3, r3, #1
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	1fe00fff 	.word	0x1fe00fff

0800a700 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b094      	sub	sp, #80	; 0x50
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a710:	f107 0308 	add.w	r3, r7, #8
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fb4a 	bl	800adb0 <SD_SendSDStatus>
 800a71c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a71e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a720:	2b00      	cmp	r3, #0
 800a722:	d011      	beq.n	800a748 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a4f      	ldr	r2, [pc, #316]	; (800a868 <HAL_SD_GetCardStatus+0x168>)
 800a72a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a732:	431a      	orrs	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a746:	e070      	b.n	800a82a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	099b      	lsrs	r3, r3, #6
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	f003 0303 	and.w	r3, r3, #3
 800a752:	b2da      	uxtb	r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	095b      	lsrs	r3, r3, #5
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	b2da      	uxtb	r2, r3
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	0a1b      	lsrs	r3, r3, #8
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a772:	b29a      	uxth	r2, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	0e1b      	lsrs	r3, r3, #24
 800a778:	b29b      	uxth	r3, r3
 800a77a:	4313      	orrs	r3, r2
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	061a      	lsls	r2, r3, #24
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a78e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	0a1b      	lsrs	r3, r3, #8
 800a794:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a798:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	0e1b      	lsrs	r3, r3, #24
 800a79e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	0a1b      	lsrs	r3, r3, #8
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	0d1b      	lsrs	r3, r3, #20
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	f003 030f 	and.w	r3, r3, #15
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	0c1b      	lsrs	r3, r3, #16
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	0a9b      	lsrs	r3, r3, #10
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	0a1b      	lsrs	r3, r3, #8
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0303 	and.w	r3, r3, #3
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	091b      	lsrs	r3, r3, #4
 800a806:	b2db      	uxtb	r3, r3
 800a808:	f003 030f 	and.w	r3, r3, #15
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	b2db      	uxtb	r3, r3
 800a816:	f003 030f 	and.w	r3, r3, #15
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	0e1b      	lsrs	r3, r3, #24
 800a824:	b2da      	uxtb	r2, r3
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a832:	4618      	mov	r0, r3
 800a834:	f003 fb64 	bl	800df00 <SDMMC_CmdBlockLength>
 800a838:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00d      	beq.n	800a85c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a08      	ldr	r2, [pc, #32]	; (800a868 <HAL_SD_GetCardStatus+0x168>)
 800a846:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a84c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a85c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a860:	4618      	mov	r0, r3
 800a862:	3750      	adds	r7, #80	; 0x50
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	1fe00fff 	.word	0x1fe00fff

0800a86c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a8c4:	b590      	push	{r4, r7, lr}
 800a8c6:	b08d      	sub	sp, #52	; 0x34
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2203      	movs	r2, #3
 800a8d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e0:	2b03      	cmp	r3, #3
 800a8e2:	d02e      	beq.n	800a942 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8ea:	d106      	bne.n	800a8fa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	635a      	str	r2, [r3, #52]	; 0x34
 800a8f8:	e029      	b.n	800a94e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a900:	d10a      	bne.n	800a918 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fb4c 	bl	800afa0 <SD_WideBus_Enable>
 800a908:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a90e:	6a3b      	ldr	r3, [r7, #32]
 800a910:	431a      	orrs	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	635a      	str	r2, [r3, #52]	; 0x34
 800a916:	e01a      	b.n	800a94e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10a      	bne.n	800a934 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fb89 	bl	800b036 <SD_WideBus_Disable>
 800a924:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	431a      	orrs	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	635a      	str	r2, [r3, #52]	; 0x34
 800a932:	e00c      	b.n	800a94e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a938:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	635a      	str	r2, [r3, #52]	; 0x34
 800a940:	e005      	b.n	800a94e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a952:	2b00      	cmp	r3, #0
 800a954:	d007      	beq.n	800a966 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a5e      	ldr	r2, [pc, #376]	; (800aad4 <HAL_SD_ConfigWideBusOperation+0x210>)
 800a95c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a964:	e094      	b.n	800aa90 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a966:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a96a:	f7fd feb7 	bl	80086dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a96e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 8083 	beq.w	800aa7e <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	695a      	ldr	r2, [r3, #20]
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	4950      	ldr	r1, [pc, #320]	; (800aad8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a996:	fba1 1303 	umull	r1, r3, r1, r3
 800a99a:	0e1b      	lsrs	r3, r3, #24
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d303      	bcc.n	800a9a8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	61bb      	str	r3, [r7, #24]
 800a9a6:	e05a      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9b0:	d103      	bne.n	800a9ba <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	61bb      	str	r3, [r7, #24]
 800a9b8:	e051      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9c2:	d126      	bne.n	800aa12 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10e      	bne.n	800a9ea <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	4a43      	ldr	r2, [pc, #268]	; (800aadc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d906      	bls.n	800a9e2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	4a40      	ldr	r2, [pc, #256]	; (800aad8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a9d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9dc:	0e5b      	lsrs	r3, r3, #25
 800a9de:	61bb      	str	r3, [r7, #24]
 800a9e0:	e03d      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	61bb      	str	r3, [r7, #24]
 800a9e8:	e039      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	69fa      	ldr	r2, [r7, #28]
 800a9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f6:	4a39      	ldr	r2, [pc, #228]	; (800aadc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d906      	bls.n	800aa0a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	4a36      	ldr	r2, [pc, #216]	; (800aad8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aa00:	fba2 2303 	umull	r2, r3, r2, r3
 800aa04:	0e5b      	lsrs	r3, r3, #25
 800aa06:	61bb      	str	r3, [r7, #24]
 800aa08:	e029      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	61bb      	str	r3, [r7, #24]
 800aa10:	e025      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10e      	bne.n	800aa38 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	4a30      	ldr	r2, [pc, #192]	; (800aae0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d906      	bls.n	800aa30 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	4a2c      	ldr	r2, [pc, #176]	; (800aad8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aa26:	fba2 2303 	umull	r2, r3, r2, r3
 800aa2a:	0e1b      	lsrs	r3, r3, #24
 800aa2c:	61bb      	str	r3, [r7, #24]
 800aa2e:	e016      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	e012      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	69fa      	ldr	r2, [r7, #28]
 800aa40:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa44:	4a26      	ldr	r2, [pc, #152]	; (800aae0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d906      	bls.n	800aa58 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	4a22      	ldr	r2, [pc, #136]	; (800aad8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aa4e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa52:	0e1b      	lsrs	r3, r3, #24
 800aa54:	61bb      	str	r3, [r7, #24]
 800aa56:	e002      	b.n	800aa5e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681c      	ldr	r4, [r3, #0]
 800aa62:	466a      	mov	r2, sp
 800aa64:	f107 0314 	add.w	r3, r7, #20
 800aa68:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa6c:	e882 0003 	stmia.w	r2, {r0, r1}
 800aa70:	f107 0308 	add.w	r3, r7, #8
 800aa74:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa76:	4620      	mov	r0, r4
 800aa78:	f003 f964 	bl	800dd44 <SDMMC_Init>
 800aa7c:	e008      	b.n	800aa90 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f003 fa31 	bl	800df00 <SDMMC_CmdBlockLength>
 800aa9e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00c      	beq.n	800aac0 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a0a      	ldr	r2, [pc, #40]	; (800aad4 <HAL_SD_ConfigWideBusOperation+0x210>)
 800aaac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	431a      	orrs	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800aac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aacc:	4618      	mov	r0, r3
 800aace:	372c      	adds	r7, #44	; 0x2c
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd90      	pop	{r4, r7, pc}
 800aad4:	1fe00fff 	.word	0x1fe00fff
 800aad8:	55e63b89 	.word	0x55e63b89
 800aadc:	02faf080 	.word	0x02faf080
 800aae0:	017d7840 	.word	0x017d7840

0800aae4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aaf0:	f107 030c 	add.w	r3, r7, #12
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fa2a 	bl	800af50 <SD_SendStatus>
 800aafc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d005      	beq.n	800ab10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	0a5b      	lsrs	r3, r3, #9
 800ab14:	f003 030f 	and.w	r3, r3, #15
 800ab18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ab1a:	693b      	ldr	r3, [r7, #16]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b090      	sub	sp, #64	; 0x40
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f003 f95e 	bl	800ddf6 <SDMMC_GetPowerState>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ab44:	e0a5      	b.n	800ac92 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4a:	2b03      	cmp	r3, #3
 800ab4c:	d02e      	beq.n	800abac <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f003 fba9 	bl	800e2aa <SDMMC_CmdSendCID>
 800ab58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <SD_InitCard+0x40>
    {
      return errorstate;
 800ab60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab62:	e096      	b.n	800ac92 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f003 f989 	bl	800de82 <SDMMC_GetResponse>
 800ab70:	4602      	mov	r2, r0
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2104      	movs	r1, #4
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f003 f980 	bl	800de82 <SDMMC_GetResponse>
 800ab82:	4602      	mov	r2, r0
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2108      	movs	r1, #8
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f003 f977 	bl	800de82 <SDMMC_GetResponse>
 800ab94:	4602      	mov	r2, r0
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	210c      	movs	r1, #12
 800aba0:	4618      	mov	r0, r3
 800aba2:	f003 f96e 	bl	800de82 <SDMMC_GetResponse>
 800aba6:	4602      	mov	r2, r0
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d00d      	beq.n	800abd0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f107 020e 	add.w	r2, r7, #14
 800abbc:	4611      	mov	r1, r2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f003 fbb2 	bl	800e328 <SDMMC_CmdSetRelAdd>
 800abc4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800abc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <SD_InitCard+0xac>
    {
      return errorstate;
 800abcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abce:	e060      	b.n	800ac92 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d036      	beq.n	800ac46 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800abd8:	89fb      	ldrh	r3, [r7, #14]
 800abda:	461a      	mov	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe8:	041b      	lsls	r3, r3, #16
 800abea:	4619      	mov	r1, r3
 800abec:	4610      	mov	r0, r2
 800abee:	f003 fb7b 	bl	800e2e8 <SDMMC_CmdSendCSD>
 800abf2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800abf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <SD_InitCard+0xda>
    {
      return errorstate;
 800abfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfc:	e049      	b.n	800ac92 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2100      	movs	r1, #0
 800ac04:	4618      	mov	r0, r3
 800ac06:	f003 f93c 	bl	800de82 <SDMMC_GetResponse>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2104      	movs	r1, #4
 800ac16:	4618      	mov	r0, r3
 800ac18:	f003 f933 	bl	800de82 <SDMMC_GetResponse>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2108      	movs	r1, #8
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f003 f92a 	bl	800de82 <SDMMC_GetResponse>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	210c      	movs	r1, #12
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f003 f921 	bl	800de82 <SDMMC_GetResponse>
 800ac40:	4602      	mov	r2, r0
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2104      	movs	r1, #4
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f003 f918 	bl	800de82 <SDMMC_GetResponse>
 800ac52:	4603      	mov	r3, r0
 800ac54:	0d1a      	lsrs	r2, r3, #20
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ac5a:	f107 0310 	add.w	r3, r7, #16
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7ff fba9 	bl	800a3b8 <HAL_SD_GetCardCSD>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac70:	e00f      	b.n	800ac92 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac7a:	041b      	lsls	r3, r3, #16
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f003 fa2a 	bl	800e0d8 <SDMMC_CmdSelDesel>
 800ac84:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <SD_InitCard+0x16c>
  {
    return errorstate;
 800ac8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8e:	e000      	b.n	800ac92 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3740      	adds	r7, #64	; 0x40
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
	...

0800ac9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aca4:	2300      	movs	r3, #0
 800aca6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800acac:	2300      	movs	r3, #0
 800acae:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f003 fa32 	bl	800e11e <SDMMC_CmdGoIdleState>
 800acba:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	e06e      	b.n	800ada4 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4618      	mov	r0, r3
 800accc:	f003 fa45 	bl	800e15a <SDMMC_CmdOperCond>
 800acd0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00d      	beq.n	800acf4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f003 fa1b 	bl	800e11e <SDMMC_CmdGoIdleState>
 800ace8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d004      	beq.n	800acfa <SD_PowerON+0x5e>
    {
      return errorstate;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	e057      	b.n	800ada4 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d137      	bne.n	800ad72 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2100      	movs	r1, #0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f003 fa46 	bl	800e19a <SDMMC_CmdAppCommand>
 800ad0e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d02d      	beq.n	800ad72 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad1a:	e043      	b.n	800ada4 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2100      	movs	r1, #0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f003 fa39 	bl	800e19a <SDMMC_CmdAppCommand>
 800ad28:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d001      	beq.n	800ad34 <SD_PowerON+0x98>
    {
      return errorstate;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	e037      	b.n	800ada4 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	491c      	ldr	r1, [pc, #112]	; (800adac <SD_PowerON+0x110>)
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f003 fa50 	bl	800e1e0 <SDMMC_CmdAppOperCommand>
 800ad40:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad4c:	e02a      	b.n	800ada4 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2100      	movs	r1, #0
 800ad54:	4618      	mov	r0, r3
 800ad56:	f003 f894 	bl	800de82 <SDMMC_GetResponse>
 800ad5a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	0fdb      	lsrs	r3, r3, #31
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d101      	bne.n	800ad68 <SD_PowerON+0xcc>
 800ad64:	2301      	movs	r3, #1
 800ad66:	e000      	b.n	800ad6a <SD_PowerON+0xce>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	613b      	str	r3, [r7, #16]

    count++;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d802      	bhi.n	800ad82 <SD_PowerON+0xe6>
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0cc      	beq.n	800ad1c <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d902      	bls.n	800ad92 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ad8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad90:	e008      	b.n	800ada4 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3718      	adds	r7, #24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	c1100000 	.word	0xc1100000

0800adb0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08c      	sub	sp, #48	; 0x30
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800adba:	f7f6 fdcf 	bl	800195c <HAL_GetTick>
 800adbe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2100      	movs	r1, #0
 800adca:	4618      	mov	r0, r3
 800adcc:	f003 f859 	bl	800de82 <SDMMC_GetResponse>
 800add0:	4603      	mov	r3, r0
 800add2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800add6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adda:	d102      	bne.n	800ade2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800addc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ade0:	e0b0      	b.n	800af44 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2140      	movs	r1, #64	; 0x40
 800ade8:	4618      	mov	r0, r3
 800adea:	f003 f889 	bl	800df00 <SDMMC_CmdBlockLength>
 800adee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d005      	beq.n	800ae02 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	e0a0      	b.n	800af44 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae0a:	041b      	lsls	r3, r3, #16
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	f003 f9c3 	bl	800e19a <SDMMC_CmdAppCommand>
 800ae14:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae16:	6a3b      	ldr	r3, [r7, #32]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d005      	beq.n	800ae28 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	e08d      	b.n	800af44 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ae2e:	2340      	movs	r3, #64	; 0x40
 800ae30:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ae32:	2360      	movs	r3, #96	; 0x60
 800ae34:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ae36:	2302      	movs	r3, #2
 800ae38:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f107 0208 	add.w	r2, r7, #8
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f003 f82b 	bl	800dea8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f003 faab 	bl	800e3b2 <SDMMC_CmdStatusRegister>
 800ae5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d02b      	beq.n	800aebc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	e069      	b.n	800af44 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d013      	beq.n	800aea6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800ae7e:	2300      	movs	r3, #0
 800ae80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae82:	e00d      	b.n	800aea0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f002 ff85 	bl	800dd98 <SDMMC_ReadFIFO>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	601a      	str	r2, [r3, #0]
        pData++;
 800ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae96:	3304      	adds	r3, #4
 800ae98:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800ae9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea2:	2b07      	cmp	r3, #7
 800aea4:	d9ee      	bls.n	800ae84 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aea6:	f7f6 fd59 	bl	800195c <HAL_GetTick>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	1ad3      	subs	r3, r2, r3
 800aeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb4:	d102      	bne.n	800aebc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aeb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aeba:	e043      	b.n	800af44 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d0d2      	beq.n	800ae70 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed0:	f003 0308 	and.w	r3, r3, #8
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aed8:	2308      	movs	r3, #8
 800aeda:	e033      	b.n	800af44 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aeea:	2302      	movs	r3, #2
 800aeec:	e02a      	b.n	800af44 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef4:	f003 0320 	and.w	r3, r3, #32
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d017      	beq.n	800af2c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800aefc:	2320      	movs	r3, #32
 800aefe:	e021      	b.n	800af44 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	f002 ff47 	bl	800dd98 <SDMMC_ReadFIFO>
 800af0a:	4602      	mov	r2, r0
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	601a      	str	r2, [r3, #0]
    pData++;
 800af10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af12:	3304      	adds	r3, #4
 800af14:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af16:	f7f6 fd21 	bl	800195c <HAL_GetTick>
 800af1a:	4602      	mov	r2, r0
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af24:	d102      	bne.n	800af2c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af2a:	e00b      	b.n	800af44 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1e2      	bne.n	800af00 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a03      	ldr	r2, [pc, #12]	; (800af4c <SD_SendSDStatus+0x19c>)
 800af40:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3730      	adds	r7, #48	; 0x30
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	18000f3a 	.word	0x18000f3a

0800af50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d102      	bne.n	800af66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800af60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af64:	e018      	b.n	800af98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	4619      	mov	r1, r3
 800af72:	4610      	mov	r0, r2
 800af74:	f003 f9fa 	bl	800e36c <SDMMC_CmdSendStatus>
 800af78:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <SD_SendStatus+0x34>
  {
    return errorstate;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	e009      	b.n	800af98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2100      	movs	r1, #0
 800af8a:	4618      	mov	r0, r3
 800af8c:	f002 ff79 	bl	800de82 <SDMMC_GetResponse>
 800af90:	4602      	mov	r2, r0
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800afa8:	2300      	movs	r3, #0
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	2300      	movs	r3, #0
 800afae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2100      	movs	r1, #0
 800afb6:	4618      	mov	r0, r3
 800afb8:	f002 ff63 	bl	800de82 <SDMMC_GetResponse>
 800afbc:	4603      	mov	r3, r0
 800afbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afc6:	d102      	bne.n	800afce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afcc:	e02f      	b.n	800b02e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800afce:	f107 030c 	add.w	r3, r7, #12
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f879 	bl	800b0cc <SD_FindSCR>
 800afda:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	e023      	b.n	800b02e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01c      	beq.n	800b02a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff8:	041b      	lsls	r3, r3, #16
 800affa:	4619      	mov	r1, r3
 800affc:	4610      	mov	r0, r2
 800affe:	f003 f8cc 	bl	800e19a <SDMMC_CmdAppCommand>
 800b002:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	e00f      	b.n	800b02e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2102      	movs	r1, #2
 800b014:	4618      	mov	r0, r3
 800b016:	f003 f903 	bl	800e220 <SDMMC_CmdBusWidth>
 800b01a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	e003      	b.n	800b02e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b026:	2300      	movs	r3, #0
 800b028:	e001      	b.n	800b02e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b02a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b086      	sub	sp, #24
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	2300      	movs	r3, #0
 800b044:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2100      	movs	r1, #0
 800b04c:	4618      	mov	r0, r3
 800b04e:	f002 ff18 	bl	800de82 <SDMMC_GetResponse>
 800b052:	4603      	mov	r3, r0
 800b054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b058:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b05c:	d102      	bne.n	800b064 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b05e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b062:	e02f      	b.n	800b0c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b064:	f107 030c 	add.w	r3, r7, #12
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f82e 	bl	800b0cc <SD_FindSCR>
 800b070:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	e023      	b.n	800b0c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b082:	2b00      	cmp	r3, #0
 800b084:	d01c      	beq.n	800b0c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b08e:	041b      	lsls	r3, r3, #16
 800b090:	4619      	mov	r1, r3
 800b092:	4610      	mov	r0, r2
 800b094:	f003 f881 	bl	800e19a <SDMMC_CmdAppCommand>
 800b098:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	e00f      	b.n	800b0c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f003 f8b8 	bl	800e220 <SDMMC_CmdBusWidth>
 800b0b0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	e003      	b.n	800b0c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e001      	b.n	800b0c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08e      	sub	sp, #56	; 0x38
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b0d6:	f7f6 fc41 	bl	800195c <HAL_GetTick>
 800b0da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	60bb      	str	r3, [r7, #8]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2108      	movs	r1, #8
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f002 ff04 	bl	800df00 <SDMMC_CmdBlockLength>
 800b0f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	e0ad      	b.n	800b260 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10c:	041b      	lsls	r3, r3, #16
 800b10e:	4619      	mov	r1, r3
 800b110:	4610      	mov	r0, r2
 800b112:	f003 f842 	bl	800e19a <SDMMC_CmdAppCommand>
 800b116:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	e09e      	b.n	800b260 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b122:	f04f 33ff 	mov.w	r3, #4294967295
 800b126:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b128:	2308      	movs	r3, #8
 800b12a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b12c:	2330      	movs	r3, #48	; 0x30
 800b12e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b130:	2302      	movs	r3, #2
 800b132:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b134:	2300      	movs	r3, #0
 800b136:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b138:	2301      	movs	r3, #1
 800b13a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f107 0210 	add.w	r2, r7, #16
 800b144:	4611      	mov	r1, r2
 800b146:	4618      	mov	r0, r3
 800b148:	f002 feae 	bl	800dea8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4618      	mov	r0, r3
 800b152:	f003 f888 	bl	800e266 <SDMMC_CmdSendSCR>
 800b156:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d027      	beq.n	800b1ae <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	e07e      	b.n	800b260 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d113      	bne.n	800b198 <SD_FindSCR+0xcc>
 800b170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b172:	2b00      	cmp	r3, #0
 800b174:	d110      	bne.n	800b198 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f002 fe0c 	bl	800dd98 <SDMMC_ReadFIFO>
 800b180:	4603      	mov	r3, r0
 800b182:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4618      	mov	r0, r3
 800b18a:	f002 fe05 	bl	800dd98 <SDMMC_ReadFIFO>
 800b18e:	4603      	mov	r3, r0
 800b190:	60fb      	str	r3, [r7, #12]
      index++;
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	3301      	adds	r3, #1
 800b196:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b198:	f7f6 fbe0 	bl	800195c <HAL_GetTick>
 800b19c:	4602      	mov	r2, r0
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a6:	d102      	bne.n	800b1ae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b1a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1ac:	e058      	b.n	800b260 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1b4:	f240 532a 	movw	r3, #1322	; 0x52a
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0d1      	beq.n	800b162 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c4:	f003 0308 	and.w	r3, r3, #8
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d005      	beq.n	800b1d8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b1d4:	2308      	movs	r3, #8
 800b1d6:	e043      	b.n	800b260 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1de:	f003 0302 	and.w	r3, r3, #2
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d005      	beq.n	800b1f2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e036      	b.n	800b260 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f8:	f003 0320 	and.w	r3, r3, #32
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d005      	beq.n	800b20c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2220      	movs	r2, #32
 800b206:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b208:	2320      	movs	r3, #32
 800b20a:	e029      	b.n	800b260 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a15      	ldr	r2, [pc, #84]	; (800b268 <SD_FindSCR+0x19c>)
 800b212:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	061a      	lsls	r2, r3, #24
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	021b      	lsls	r3, r3, #8
 800b21c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b220:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	0a1b      	lsrs	r3, r3, #8
 800b226:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b22a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	0e1b      	lsrs	r3, r3, #24
 800b230:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b234:	601a      	str	r2, [r3, #0]
    scr++;
 800b236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b238:	3304      	adds	r3, #4
 800b23a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	061a      	lsls	r2, r3, #24
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	021b      	lsls	r3, r3, #8
 800b244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b248:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	0a1b      	lsrs	r3, r3, #8
 800b24e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b252:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	0e1b      	lsrs	r3, r3, #24
 800b258:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3738      	adds	r7, #56	; 0x38
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	18000f3a 	.word	0x18000f3a

0800b26c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27e:	2b1f      	cmp	r3, #31
 800b280:	d936      	bls.n	800b2f0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]
 800b286:	e027      	b.n	800b2d8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f002 fd83 	bl	800dd98 <SDMMC_ReadFIFO>
 800b292:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	b2da      	uxtb	r2, r3
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	0a1b      	lsrs	r3, r3, #8
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	0c1b      	lsrs	r3, r3, #16
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	0e1b      	lsrs	r3, r3, #24
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	2b07      	cmp	r3, #7
 800b2dc:	d9d4      	bls.n	800b288 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	693a      	ldr	r2, [r7, #16]
 800b2e2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e8:	f1a3 0220 	sub.w	r2, r3, #32
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b2f0:	bf00      	nop
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	69db      	ldr	r3, [r3, #28]
 800b304:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	2b1f      	cmp	r3, #31
 800b30c:	d93a      	bls.n	800b384 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]
 800b312:	e02b      	b.n	800b36c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	3301      	adds	r3, #1
 800b31e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	021a      	lsls	r2, r3, #8
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4313      	orrs	r3, r2
 800b32a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	3301      	adds	r3, #1
 800b330:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	041a      	lsls	r2, r3, #16
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	3301      	adds	r3, #1
 800b342:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	061a      	lsls	r2, r3, #24
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	3301      	adds	r3, #1
 800b354:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f107 020c 	add.w	r2, r7, #12
 800b35e:	4611      	mov	r1, r2
 800b360:	4618      	mov	r0, r3
 800b362:	f002 fd26 	bl	800ddb2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	3301      	adds	r3, #1
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2b07      	cmp	r3, #7
 800b370:	d9d0      	bls.n	800b314 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a1b      	ldr	r3, [r3, #32]
 800b37c:	f1a3 0220 	sub.w	r2, r3, #32
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	621a      	str	r2, [r3, #32]
  }
}
 800b384:	bf00      	nop
 800b386:	3718      	adds	r7, #24
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d101      	bne.n	800b3ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e049      	b.n	800b482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7f5 ff9c 	bl	8001340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2202      	movs	r2, #2
 800b40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3304      	adds	r3, #4
 800b418:	4619      	mov	r1, r3
 800b41a:	4610      	mov	r0, r2
 800b41c:	f000 fbec 	bl	800bbf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e049      	b.n	800b530 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d106      	bne.n	800b4b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f841 	bl	800b538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	f000 fb95 	bl	800bbf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d122      	bne.n	800b5a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f003 0302 	and.w	r3, r3, #2
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d11b      	bne.n	800b5a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f06f 0202 	mvn.w	r2, #2
 800b578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2201      	movs	r2, #1
 800b57e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	f003 0303 	and.w	r3, r3, #3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fb14 	bl	800bbbc <HAL_TIM_IC_CaptureCallback>
 800b594:	e005      	b.n	800b5a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fb06 	bl	800bba8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fb17 	bl	800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	f003 0304 	and.w	r3, r3, #4
 800b5b2:	2b04      	cmp	r3, #4
 800b5b4:	d122      	bne.n	800b5fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	f003 0304 	and.w	r3, r3, #4
 800b5c0:	2b04      	cmp	r3, #4
 800b5c2:	d11b      	bne.n	800b5fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f06f 0204 	mvn.w	r2, #4
 800b5cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 faea 	bl	800bbbc <HAL_TIM_IC_CaptureCallback>
 800b5e8:	e005      	b.n	800b5f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fadc 	bl	800bba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 faed 	bl	800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	f003 0308 	and.w	r3, r3, #8
 800b606:	2b08      	cmp	r3, #8
 800b608:	d122      	bne.n	800b650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	f003 0308 	and.w	r3, r3, #8
 800b614:	2b08      	cmp	r3, #8
 800b616:	d11b      	bne.n	800b650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f06f 0208 	mvn.w	r2, #8
 800b620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2204      	movs	r2, #4
 800b626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	f003 0303 	and.w	r3, r3, #3
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fac0 	bl	800bbbc <HAL_TIM_IC_CaptureCallback>
 800b63c:	e005      	b.n	800b64a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fab2 	bl	800bba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fac3 	bl	800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	f003 0310 	and.w	r3, r3, #16
 800b65a:	2b10      	cmp	r3, #16
 800b65c:	d122      	bne.n	800b6a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	f003 0310 	and.w	r3, r3, #16
 800b668:	2b10      	cmp	r3, #16
 800b66a:	d11b      	bne.n	800b6a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f06f 0210 	mvn.w	r2, #16
 800b674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2208      	movs	r2, #8
 800b67a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fa96 	bl	800bbbc <HAL_TIM_IC_CaptureCallback>
 800b690:	e005      	b.n	800b69e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fa88 	bl	800bba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fa99 	bl	800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d10e      	bne.n	800b6d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d107      	bne.n	800b6d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f06f 0201 	mvn.w	r2, #1
 800b6c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fa62 	bl	800bb94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6da:	2b80      	cmp	r3, #128	; 0x80
 800b6dc:	d10e      	bne.n	800b6fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e8:	2b80      	cmp	r3, #128	; 0x80
 800b6ea:	d107      	bne.n	800b6fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 ff94 	bl	800c624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b70a:	d10e      	bne.n	800b72a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b716:	2b80      	cmp	r3, #128	; 0x80
 800b718:	d107      	bne.n	800b72a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 ff87 	bl	800c638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b734:	2b40      	cmp	r3, #64	; 0x40
 800b736:	d10e      	bne.n	800b756 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b742:	2b40      	cmp	r3, #64	; 0x40
 800b744:	d107      	bne.n	800b756 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b74e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fa47 	bl	800bbe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	f003 0320 	and.w	r3, r3, #32
 800b760:	2b20      	cmp	r3, #32
 800b762:	d10e      	bne.n	800b782 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f003 0320 	and.w	r3, r3, #32
 800b76e:	2b20      	cmp	r3, #32
 800b770:	d107      	bne.n	800b782 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f06f 0220 	mvn.w	r2, #32
 800b77a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 ff47 	bl	800c610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b782:	bf00      	nop
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
	...

0800b78c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d101      	bne.n	800b7a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	e0fd      	b.n	800b9a2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b14      	cmp	r3, #20
 800b7b2:	f200 80f0 	bhi.w	800b996 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b7b6:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b811 	.word	0x0800b811
 800b7c0:	0800b997 	.word	0x0800b997
 800b7c4:	0800b997 	.word	0x0800b997
 800b7c8:	0800b997 	.word	0x0800b997
 800b7cc:	0800b851 	.word	0x0800b851
 800b7d0:	0800b997 	.word	0x0800b997
 800b7d4:	0800b997 	.word	0x0800b997
 800b7d8:	0800b997 	.word	0x0800b997
 800b7dc:	0800b893 	.word	0x0800b893
 800b7e0:	0800b997 	.word	0x0800b997
 800b7e4:	0800b997 	.word	0x0800b997
 800b7e8:	0800b997 	.word	0x0800b997
 800b7ec:	0800b8d3 	.word	0x0800b8d3
 800b7f0:	0800b997 	.word	0x0800b997
 800b7f4:	0800b997 	.word	0x0800b997
 800b7f8:	0800b997 	.word	0x0800b997
 800b7fc:	0800b915 	.word	0x0800b915
 800b800:	0800b997 	.word	0x0800b997
 800b804:	0800b997 	.word	0x0800b997
 800b808:	0800b997 	.word	0x0800b997
 800b80c:	0800b955 	.word	0x0800b955
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	4618      	mov	r0, r3
 800b818:	f000 fa88 	bl	800bd2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	699a      	ldr	r2, [r3, #24]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f042 0208 	orr.w	r2, r2, #8
 800b82a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	699a      	ldr	r2, [r3, #24]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f022 0204 	bic.w	r2, r2, #4
 800b83a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6999      	ldr	r1, [r3, #24]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	691a      	ldr	r2, [r3, #16]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	430a      	orrs	r2, r1
 800b84c:	619a      	str	r2, [r3, #24]
      break;
 800b84e:	e0a3      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68b9      	ldr	r1, [r7, #8]
 800b856:	4618      	mov	r0, r3
 800b858:	f000 faf8 	bl	800be4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	699a      	ldr	r2, [r3, #24]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b86a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	699a      	ldr	r2, [r3, #24]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b87a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6999      	ldr	r1, [r3, #24]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	021a      	lsls	r2, r3, #8
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	430a      	orrs	r2, r1
 800b88e:	619a      	str	r2, [r3, #24]
      break;
 800b890:	e082      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68b9      	ldr	r1, [r7, #8]
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 fb61 	bl	800bf60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	69da      	ldr	r2, [r3, #28]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f042 0208 	orr.w	r2, r2, #8
 800b8ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	69da      	ldr	r2, [r3, #28]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f022 0204 	bic.w	r2, r2, #4
 800b8bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	69d9      	ldr	r1, [r3, #28]
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	691a      	ldr	r2, [r3, #16]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	61da      	str	r2, [r3, #28]
      break;
 800b8d0:	e062      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68b9      	ldr	r1, [r7, #8]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 fbc7 	bl	800c06c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	69da      	ldr	r2, [r3, #28]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	69da      	ldr	r2, [r3, #28]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	69d9      	ldr	r1, [r3, #28]
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	021a      	lsls	r2, r3, #8
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	61da      	str	r2, [r3, #28]
      break;
 800b912:	e041      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68b9      	ldr	r1, [r7, #8]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 fc0e 	bl	800c13c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f042 0208 	orr.w	r2, r2, #8
 800b92e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f022 0204 	bic.w	r2, r2, #4
 800b93e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	691a      	ldr	r2, [r3, #16]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b952:	e021      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68b9      	ldr	r1, [r7, #8]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 fc50 	bl	800c200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b96e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b97e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	021a      	lsls	r2, r3, #8
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	430a      	orrs	r2, r1
 800b992:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b994:	e000      	b.n	800b998 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b996:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop

0800b9ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d101      	bne.n	800b9c4 <HAL_TIM_ConfigClockSource+0x18>
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	e0db      	b.n	800bb7c <HAL_TIM_ConfigClockSource+0x1d0>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	4b69      	ldr	r3, [pc, #420]	; (800bb84 <HAL_TIM_ConfigClockSource+0x1d8>)
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a63      	ldr	r2, [pc, #396]	; (800bb88 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	f000 80a9 	beq.w	800bb52 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba00:	4a61      	ldr	r2, [pc, #388]	; (800bb88 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	f200 80ae 	bhi.w	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba08:	4a60      	ldr	r2, [pc, #384]	; (800bb8c <HAL_TIM_ConfigClockSource+0x1e0>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	f000 80a1 	beq.w	800bb52 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba10:	4a5e      	ldr	r2, [pc, #376]	; (800bb8c <HAL_TIM_ConfigClockSource+0x1e0>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	f200 80a6 	bhi.w	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba18:	4a5d      	ldr	r2, [pc, #372]	; (800bb90 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	f000 8099 	beq.w	800bb52 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba20:	4a5b      	ldr	r2, [pc, #364]	; (800bb90 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	f200 809e 	bhi.w	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba2c:	f000 8091 	beq.w	800bb52 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba34:	f200 8096 	bhi.w	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba3c:	f000 8089 	beq.w	800bb52 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba44:	f200 808e 	bhi.w	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba4c:	d03e      	beq.n	800bacc <HAL_TIM_ConfigClockSource+0x120>
 800ba4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba52:	f200 8087 	bhi.w	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba5a:	f000 8085 	beq.w	800bb68 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba62:	d87f      	bhi.n	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba64:	2b70      	cmp	r3, #112	; 0x70
 800ba66:	d01a      	beq.n	800ba9e <HAL_TIM_ConfigClockSource+0xf2>
 800ba68:	2b70      	cmp	r3, #112	; 0x70
 800ba6a:	d87b      	bhi.n	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba6c:	2b60      	cmp	r3, #96	; 0x60
 800ba6e:	d050      	beq.n	800bb12 <HAL_TIM_ConfigClockSource+0x166>
 800ba70:	2b60      	cmp	r3, #96	; 0x60
 800ba72:	d877      	bhi.n	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba74:	2b50      	cmp	r3, #80	; 0x50
 800ba76:	d03c      	beq.n	800baf2 <HAL_TIM_ConfigClockSource+0x146>
 800ba78:	2b50      	cmp	r3, #80	; 0x50
 800ba7a:	d873      	bhi.n	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba7c:	2b40      	cmp	r3, #64	; 0x40
 800ba7e:	d058      	beq.n	800bb32 <HAL_TIM_ConfigClockSource+0x186>
 800ba80:	2b40      	cmp	r3, #64	; 0x40
 800ba82:	d86f      	bhi.n	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba84:	2b30      	cmp	r3, #48	; 0x30
 800ba86:	d064      	beq.n	800bb52 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba88:	2b30      	cmp	r3, #48	; 0x30
 800ba8a:	d86b      	bhi.n	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba8c:	2b20      	cmp	r3, #32
 800ba8e:	d060      	beq.n	800bb52 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba90:	2b20      	cmp	r3, #32
 800ba92:	d867      	bhi.n	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d05c      	beq.n	800bb52 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba98:	2b10      	cmp	r3, #16
 800ba9a:	d05a      	beq.n	800bb52 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ba9c:	e062      	b.n	800bb64 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6818      	ldr	r0, [r3, #0]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	6899      	ldr	r1, [r3, #8]
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	685a      	ldr	r2, [r3, #4]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	f000 fc89 	bl	800c3c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bac0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	609a      	str	r2, [r3, #8]
      break;
 800baca:	e04e      	b.n	800bb6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6818      	ldr	r0, [r3, #0]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	6899      	ldr	r1, [r3, #8]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	685a      	ldr	r2, [r3, #4]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	f000 fc72 	bl	800c3c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689a      	ldr	r2, [r3, #8]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800baee:	609a      	str	r2, [r3, #8]
      break;
 800baf0:	e03b      	b.n	800bb6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6818      	ldr	r0, [r3, #0]
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	6859      	ldr	r1, [r3, #4]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f000 fbe2 	bl	800c2c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2150      	movs	r1, #80	; 0x50
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 fc3c 	bl	800c388 <TIM_ITRx_SetConfig>
      break;
 800bb10:	e02b      	b.n	800bb6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6818      	ldr	r0, [r3, #0]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	6859      	ldr	r1, [r3, #4]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	f000 fc01 	bl	800c326 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2160      	movs	r1, #96	; 0x60
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 fc2c 	bl	800c388 <TIM_ITRx_SetConfig>
      break;
 800bb30:	e01b      	b.n	800bb6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	6859      	ldr	r1, [r3, #4]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	f000 fbc2 	bl	800c2c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2140      	movs	r1, #64	; 0x40
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fc1c 	bl	800c388 <TIM_ITRx_SetConfig>
      break;
 800bb50:	e00b      	b.n	800bb6a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	f000 fc13 	bl	800c388 <TIM_ITRx_SetConfig>
        break;
 800bb62:	e002      	b.n	800bb6a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bb64:	bf00      	nop
 800bb66:	e000      	b.n	800bb6a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bb68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	ffceff88 	.word	0xffceff88
 800bb88:	00100040 	.word	0x00100040
 800bb8c:	00100030 	.word	0x00100030
 800bb90:	00100020 	.word	0x00100020

0800bb94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a40      	ldr	r2, [pc, #256]	; (800bd0c <TIM_Base_SetConfig+0x114>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d013      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc16:	d00f      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a3d      	ldr	r2, [pc, #244]	; (800bd10 <TIM_Base_SetConfig+0x118>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d00b      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a3c      	ldr	r2, [pc, #240]	; (800bd14 <TIM_Base_SetConfig+0x11c>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d007      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a3b      	ldr	r2, [pc, #236]	; (800bd18 <TIM_Base_SetConfig+0x120>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d003      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a3a      	ldr	r2, [pc, #232]	; (800bd1c <TIM_Base_SetConfig+0x124>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d108      	bne.n	800bc4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a2f      	ldr	r2, [pc, #188]	; (800bd0c <TIM_Base_SetConfig+0x114>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d01f      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc58:	d01b      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a2c      	ldr	r2, [pc, #176]	; (800bd10 <TIM_Base_SetConfig+0x118>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d017      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a2b      	ldr	r2, [pc, #172]	; (800bd14 <TIM_Base_SetConfig+0x11c>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d013      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a2a      	ldr	r2, [pc, #168]	; (800bd18 <TIM_Base_SetConfig+0x120>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d00f      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a29      	ldr	r2, [pc, #164]	; (800bd1c <TIM_Base_SetConfig+0x124>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00b      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a28      	ldr	r2, [pc, #160]	; (800bd20 <TIM_Base_SetConfig+0x128>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d007      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a27      	ldr	r2, [pc, #156]	; (800bd24 <TIM_Base_SetConfig+0x12c>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d003      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a26      	ldr	r2, [pc, #152]	; (800bd28 <TIM_Base_SetConfig+0x130>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d108      	bne.n	800bca4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a10      	ldr	r2, [pc, #64]	; (800bd0c <TIM_Base_SetConfig+0x114>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d00f      	beq.n	800bcf0 <TIM_Base_SetConfig+0xf8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a12      	ldr	r2, [pc, #72]	; (800bd1c <TIM_Base_SetConfig+0x124>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d00b      	beq.n	800bcf0 <TIM_Base_SetConfig+0xf8>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a11      	ldr	r2, [pc, #68]	; (800bd20 <TIM_Base_SetConfig+0x128>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d007      	beq.n	800bcf0 <TIM_Base_SetConfig+0xf8>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a10      	ldr	r2, [pc, #64]	; (800bd24 <TIM_Base_SetConfig+0x12c>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d003      	beq.n	800bcf0 <TIM_Base_SetConfig+0xf8>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a0f      	ldr	r2, [pc, #60]	; (800bd28 <TIM_Base_SetConfig+0x130>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d103      	bne.n	800bcf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	691a      	ldr	r2, [r3, #16]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	615a      	str	r2, [r3, #20]
}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	40010000 	.word	0x40010000
 800bd10:	40000400 	.word	0x40000400
 800bd14:	40000800 	.word	0x40000800
 800bd18:	40000c00 	.word	0x40000c00
 800bd1c:	40010400 	.word	0x40010400
 800bd20:	40014000 	.word	0x40014000
 800bd24:	40014400 	.word	0x40014400
 800bd28:	40014800 	.word	0x40014800

0800bd2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a1b      	ldr	r3, [r3, #32]
 800bd3a:	f023 0201 	bic.w	r2, r3, #1
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	699b      	ldr	r3, [r3, #24]
 800bd52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4b37      	ldr	r3, [pc, #220]	; (800be34 <TIM_OC1_SetConfig+0x108>)
 800bd58:	4013      	ands	r3, r2
 800bd5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f023 0303 	bic.w	r3, r3, #3
 800bd62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f023 0302 	bic.w	r3, r3, #2
 800bd74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a2d      	ldr	r2, [pc, #180]	; (800be38 <TIM_OC1_SetConfig+0x10c>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d00f      	beq.n	800bda8 <TIM_OC1_SetConfig+0x7c>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a2c      	ldr	r2, [pc, #176]	; (800be3c <TIM_OC1_SetConfig+0x110>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d00b      	beq.n	800bda8 <TIM_OC1_SetConfig+0x7c>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a2b      	ldr	r2, [pc, #172]	; (800be40 <TIM_OC1_SetConfig+0x114>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d007      	beq.n	800bda8 <TIM_OC1_SetConfig+0x7c>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a2a      	ldr	r2, [pc, #168]	; (800be44 <TIM_OC1_SetConfig+0x118>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d003      	beq.n	800bda8 <TIM_OC1_SetConfig+0x7c>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a29      	ldr	r2, [pc, #164]	; (800be48 <TIM_OC1_SetConfig+0x11c>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d10c      	bne.n	800bdc2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	f023 0308 	bic.w	r3, r3, #8
 800bdae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f023 0304 	bic.w	r3, r3, #4
 800bdc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a1c      	ldr	r2, [pc, #112]	; (800be38 <TIM_OC1_SetConfig+0x10c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d00f      	beq.n	800bdea <TIM_OC1_SetConfig+0xbe>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a1b      	ldr	r2, [pc, #108]	; (800be3c <TIM_OC1_SetConfig+0x110>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d00b      	beq.n	800bdea <TIM_OC1_SetConfig+0xbe>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a1a      	ldr	r2, [pc, #104]	; (800be40 <TIM_OC1_SetConfig+0x114>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d007      	beq.n	800bdea <TIM_OC1_SetConfig+0xbe>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a19      	ldr	r2, [pc, #100]	; (800be44 <TIM_OC1_SetConfig+0x118>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d003      	beq.n	800bdea <TIM_OC1_SetConfig+0xbe>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a18      	ldr	r2, [pc, #96]	; (800be48 <TIM_OC1_SetConfig+0x11c>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d111      	bne.n	800be0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	4313      	orrs	r3, r2
 800be02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	685a      	ldr	r2, [r3, #4]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	621a      	str	r2, [r3, #32]
}
 800be28:	bf00      	nop
 800be2a:	371c      	adds	r7, #28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	fffeff8f 	.word	0xfffeff8f
 800be38:	40010000 	.word	0x40010000
 800be3c:	40010400 	.word	0x40010400
 800be40:	40014000 	.word	0x40014000
 800be44:	40014400 	.word	0x40014400
 800be48:	40014800 	.word	0x40014800

0800be4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	f023 0210 	bic.w	r2, r3, #16
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	4b34      	ldr	r3, [pc, #208]	; (800bf48 <TIM_OC2_SetConfig+0xfc>)
 800be78:	4013      	ands	r3, r2
 800be7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	021b      	lsls	r3, r3, #8
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f023 0320 	bic.w	r3, r3, #32
 800be96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	011b      	lsls	r3, r3, #4
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a29      	ldr	r2, [pc, #164]	; (800bf4c <TIM_OC2_SetConfig+0x100>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d003      	beq.n	800beb4 <TIM_OC2_SetConfig+0x68>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a28      	ldr	r2, [pc, #160]	; (800bf50 <TIM_OC2_SetConfig+0x104>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d10d      	bne.n	800bed0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	011b      	lsls	r3, r3, #4
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a1e      	ldr	r2, [pc, #120]	; (800bf4c <TIM_OC2_SetConfig+0x100>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d00f      	beq.n	800bef8 <TIM_OC2_SetConfig+0xac>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a1d      	ldr	r2, [pc, #116]	; (800bf50 <TIM_OC2_SetConfig+0x104>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d00b      	beq.n	800bef8 <TIM_OC2_SetConfig+0xac>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a1c      	ldr	r2, [pc, #112]	; (800bf54 <TIM_OC2_SetConfig+0x108>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d007      	beq.n	800bef8 <TIM_OC2_SetConfig+0xac>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a1b      	ldr	r2, [pc, #108]	; (800bf58 <TIM_OC2_SetConfig+0x10c>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d003      	beq.n	800bef8 <TIM_OC2_SetConfig+0xac>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a1a      	ldr	r2, [pc, #104]	; (800bf5c <TIM_OC2_SetConfig+0x110>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d113      	bne.n	800bf20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800befe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	621a      	str	r2, [r3, #32]
}
 800bf3a:	bf00      	nop
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	feff8fff 	.word	0xfeff8fff
 800bf4c:	40010000 	.word	0x40010000
 800bf50:	40010400 	.word	0x40010400
 800bf54:	40014000 	.word	0x40014000
 800bf58:	40014400 	.word	0x40014400
 800bf5c:	40014800 	.word	0x40014800

0800bf60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b087      	sub	sp, #28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	69db      	ldr	r3, [r3, #28]
 800bf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f023 0303 	bic.w	r3, r3, #3
 800bf96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	021b      	lsls	r3, r3, #8
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a27      	ldr	r2, [pc, #156]	; (800c058 <TIM_OC3_SetConfig+0xf8>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d003      	beq.n	800bfc6 <TIM_OC3_SetConfig+0x66>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a26      	ldr	r2, [pc, #152]	; (800c05c <TIM_OC3_SetConfig+0xfc>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d10d      	bne.n	800bfe2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	021b      	lsls	r3, r3, #8
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a1c      	ldr	r2, [pc, #112]	; (800c058 <TIM_OC3_SetConfig+0xf8>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d00f      	beq.n	800c00a <TIM_OC3_SetConfig+0xaa>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a1b      	ldr	r2, [pc, #108]	; (800c05c <TIM_OC3_SetConfig+0xfc>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d00b      	beq.n	800c00a <TIM_OC3_SetConfig+0xaa>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a1a      	ldr	r2, [pc, #104]	; (800c060 <TIM_OC3_SetConfig+0x100>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d007      	beq.n	800c00a <TIM_OC3_SetConfig+0xaa>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a19      	ldr	r2, [pc, #100]	; (800c064 <TIM_OC3_SetConfig+0x104>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d003      	beq.n	800c00a <TIM_OC3_SetConfig+0xaa>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a18      	ldr	r2, [pc, #96]	; (800c068 <TIM_OC3_SetConfig+0x108>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d113      	bne.n	800c032 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	011b      	lsls	r3, r3, #4
 800c020:	693a      	ldr	r2, [r7, #16]
 800c022:	4313      	orrs	r3, r2
 800c024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	011b      	lsls	r3, r3, #4
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	4313      	orrs	r3, r2
 800c030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	621a      	str	r2, [r3, #32]
}
 800c04c:	bf00      	nop
 800c04e:	371c      	adds	r7, #28
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	40010000 	.word	0x40010000
 800c05c:	40010400 	.word	0x40010400
 800c060:	40014000 	.word	0x40014000
 800c064:	40014400 	.word	0x40014400
 800c068:	40014800 	.word	0x40014800

0800c06c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b087      	sub	sp, #28
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	69db      	ldr	r3, [r3, #28]
 800c092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c09a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	021b      	lsls	r3, r3, #8
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	031b      	lsls	r3, r3, #12
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a18      	ldr	r2, [pc, #96]	; (800c128 <TIM_OC4_SetConfig+0xbc>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d00f      	beq.n	800c0ec <TIM_OC4_SetConfig+0x80>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a17      	ldr	r2, [pc, #92]	; (800c12c <TIM_OC4_SetConfig+0xc0>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d00b      	beq.n	800c0ec <TIM_OC4_SetConfig+0x80>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a16      	ldr	r2, [pc, #88]	; (800c130 <TIM_OC4_SetConfig+0xc4>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d007      	beq.n	800c0ec <TIM_OC4_SetConfig+0x80>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a15      	ldr	r2, [pc, #84]	; (800c134 <TIM_OC4_SetConfig+0xc8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d003      	beq.n	800c0ec <TIM_OC4_SetConfig+0x80>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a14      	ldr	r2, [pc, #80]	; (800c138 <TIM_OC4_SetConfig+0xcc>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d109      	bne.n	800c100 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	019b      	lsls	r3, r3, #6
 800c0fa:	697a      	ldr	r2, [r7, #20]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	685a      	ldr	r2, [r3, #4]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	693a      	ldr	r2, [r7, #16]
 800c118:	621a      	str	r2, [r3, #32]
}
 800c11a:	bf00      	nop
 800c11c:	371c      	adds	r7, #28
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	40010000 	.word	0x40010000
 800c12c:	40010400 	.word	0x40010400
 800c130:	40014000 	.word	0x40014000
 800c134:	40014400 	.word	0x40014400
 800c138:	40014800 	.word	0x40014800

0800c13c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b087      	sub	sp, #28
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a1b      	ldr	r3, [r3, #32]
 800c14a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	4313      	orrs	r3, r2
 800c174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c17c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	041b      	lsls	r3, r3, #16
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	4313      	orrs	r3, r2
 800c188:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a17      	ldr	r2, [pc, #92]	; (800c1ec <TIM_OC5_SetConfig+0xb0>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d00f      	beq.n	800c1b2 <TIM_OC5_SetConfig+0x76>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a16      	ldr	r2, [pc, #88]	; (800c1f0 <TIM_OC5_SetConfig+0xb4>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d00b      	beq.n	800c1b2 <TIM_OC5_SetConfig+0x76>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a15      	ldr	r2, [pc, #84]	; (800c1f4 <TIM_OC5_SetConfig+0xb8>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d007      	beq.n	800c1b2 <TIM_OC5_SetConfig+0x76>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a14      	ldr	r2, [pc, #80]	; (800c1f8 <TIM_OC5_SetConfig+0xbc>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d003      	beq.n	800c1b2 <TIM_OC5_SetConfig+0x76>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a13      	ldr	r2, [pc, #76]	; (800c1fc <TIM_OC5_SetConfig+0xc0>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d109      	bne.n	800c1c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	695b      	ldr	r3, [r3, #20]
 800c1be:	021b      	lsls	r3, r3, #8
 800c1c0:	697a      	ldr	r2, [r7, #20]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	621a      	str	r2, [r3, #32]
}
 800c1e0:	bf00      	nop
 800c1e2:	371c      	adds	r7, #28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	40010000 	.word	0x40010000
 800c1f0:	40010400 	.word	0x40010400
 800c1f4:	40014000 	.word	0x40014000
 800c1f8:	40014400 	.word	0x40014400
 800c1fc:	40014800 	.word	0x40014800

0800c200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c200:	b480      	push	{r7}
 800c202:	b087      	sub	sp, #28
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a1b      	ldr	r3, [r3, #32]
 800c20e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a1b      	ldr	r3, [r3, #32]
 800c21a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c22e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	021b      	lsls	r3, r3, #8
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	051b      	lsls	r3, r3, #20
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a18      	ldr	r2, [pc, #96]	; (800c2b4 <TIM_OC6_SetConfig+0xb4>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d00f      	beq.n	800c278 <TIM_OC6_SetConfig+0x78>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a17      	ldr	r2, [pc, #92]	; (800c2b8 <TIM_OC6_SetConfig+0xb8>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d00b      	beq.n	800c278 <TIM_OC6_SetConfig+0x78>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a16      	ldr	r2, [pc, #88]	; (800c2bc <TIM_OC6_SetConfig+0xbc>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d007      	beq.n	800c278 <TIM_OC6_SetConfig+0x78>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a15      	ldr	r2, [pc, #84]	; (800c2c0 <TIM_OC6_SetConfig+0xc0>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d003      	beq.n	800c278 <TIM_OC6_SetConfig+0x78>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a14      	ldr	r2, [pc, #80]	; (800c2c4 <TIM_OC6_SetConfig+0xc4>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d109      	bne.n	800c28c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c27e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	029b      	lsls	r3, r3, #10
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	4313      	orrs	r3, r2
 800c28a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	693a      	ldr	r2, [r7, #16]
 800c2a4:	621a      	str	r2, [r3, #32]
}
 800c2a6:	bf00      	nop
 800c2a8:	371c      	adds	r7, #28
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	40010000 	.word	0x40010000
 800c2b8:	40010400 	.word	0x40010400
 800c2bc:	40014000 	.word	0x40014000
 800c2c0:	40014400 	.word	0x40014400
 800c2c4:	40014800 	.word	0x40014800

0800c2c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b087      	sub	sp, #28
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6a1b      	ldr	r3, [r3, #32]
 800c2d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	f023 0201 	bic.w	r2, r3, #1
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f023 030a 	bic.w	r3, r3, #10
 800c304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	621a      	str	r2, [r3, #32]
}
 800c31a:	bf00      	nop
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c326:	b480      	push	{r7}
 800c328:	b087      	sub	sp, #28
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6a1b      	ldr	r3, [r3, #32]
 800c336:	f023 0210 	bic.w	r2, r3, #16
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	699b      	ldr	r3, [r3, #24]
 800c342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6a1b      	ldr	r3, [r3, #32]
 800c348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	031b      	lsls	r3, r3, #12
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	4313      	orrs	r3, r2
 800c35a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	011b      	lsls	r3, r3, #4
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	621a      	str	r2, [r3, #32]
}
 800c37a:	bf00      	nop
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	4b09      	ldr	r3, [pc, #36]	; (800c3c0 <TIM_ITRx_SetConfig+0x38>)
 800c39c:	4013      	ands	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	f043 0307 	orr.w	r3, r3, #7
 800c3aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	609a      	str	r2, [r3, #8]
}
 800c3b2:	bf00      	nop
 800c3b4:	3714      	adds	r7, #20
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	ffcfff8f 	.word	0xffcfff8f

0800c3c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b087      	sub	sp, #28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	021a      	lsls	r2, r3, #8
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	431a      	orrs	r2, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	697a      	ldr	r2, [r7, #20]
 800c3f6:	609a      	str	r2, [r3, #8]
}
 800c3f8:	bf00      	nop
 800c3fa:	371c      	adds	r7, #28
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c414:	2b01      	cmp	r3, #1
 800c416:	d101      	bne.n	800c41c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c418:	2302      	movs	r3, #2
 800c41a:	e068      	b.n	800c4ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2202      	movs	r2, #2
 800c428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a2e      	ldr	r2, [pc, #184]	; (800c4fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d004      	beq.n	800c450 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a2d      	ldr	r2, [pc, #180]	; (800c500 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d108      	bne.n	800c462 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c456:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	4313      	orrs	r3, r2
 800c460:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c468:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	4313      	orrs	r3, r2
 800c472:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a1e      	ldr	r2, [pc, #120]	; (800c4fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d01d      	beq.n	800c4c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c48e:	d018      	beq.n	800c4c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a1b      	ldr	r2, [pc, #108]	; (800c504 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d013      	beq.n	800c4c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a1a      	ldr	r2, [pc, #104]	; (800c508 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d00e      	beq.n	800c4c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a18      	ldr	r2, [pc, #96]	; (800c50c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d009      	beq.n	800c4c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a13      	ldr	r2, [pc, #76]	; (800c500 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d004      	beq.n	800c4c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a14      	ldr	r2, [pc, #80]	; (800c510 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d10c      	bne.n	800c4dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	40010000 	.word	0x40010000
 800c500:	40010400 	.word	0x40010400
 800c504:	40000400 	.word	0x40000400
 800c508:	40000800 	.word	0x40000800
 800c50c:	40000c00 	.word	0x40000c00
 800c510:	40001800 	.word	0x40001800

0800c514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c51e:	2300      	movs	r3, #0
 800c520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d101      	bne.n	800c530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c52c:	2302      	movs	r3, #2
 800c52e:	e065      	b.n	800c5fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	4313      	orrs	r3, r2
 800c544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	4313      	orrs	r3, r2
 800c552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	4313      	orrs	r3, r2
 800c560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	4313      	orrs	r3, r2
 800c58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c596:	4313      	orrs	r3, r2
 800c598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	699b      	ldr	r3, [r3, #24]
 800c5a4:	041b      	lsls	r3, r3, #16
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a16      	ldr	r2, [pc, #88]	; (800c608 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d004      	beq.n	800c5be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a14      	ldr	r2, [pc, #80]	; (800c60c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d115      	bne.n	800c5ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c8:	051b      	lsls	r3, r3, #20
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	69db      	ldr	r3, [r3, #28]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	6a1b      	ldr	r3, [r3, #32]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	40010000 	.word	0x40010000
 800c60c:	40010400 	.word	0x40010400

0800c610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e042      	b.n	800c6e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c664:	2b00      	cmp	r3, #0
 800c666:	d106      	bne.n	800c676 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7f4 ff9f 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2224      	movs	r2, #36	; 0x24
 800c67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f022 0201 	bic.w	r2, r2, #1
 800c68c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fb06 	bl	800cca0 <UART_SetConfig>
 800c694:	4603      	mov	r3, r0
 800c696:	2b01      	cmp	r3, #1
 800c698:	d101      	bne.n	800c69e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e022      	b.n	800c6e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d002      	beq.n	800c6ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f001 f85a 	bl	800d760 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	685a      	ldr	r2, [r3, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c6ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	689a      	ldr	r2, [r3, #8]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f042 0201 	orr.w	r2, r2, #1
 800c6da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f001 f8e1 	bl	800d8a4 <UART_CheckIdleState>
 800c6e2:	4603      	mov	r3, r0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b088      	sub	sp, #32
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c70c:	69fa      	ldr	r2, [r7, #28]
 800c70e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c712:	4013      	ands	r3, r2
 800c714:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d118      	bne.n	800c74e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	f003 0320 	and.w	r3, r3, #32
 800c722:	2b00      	cmp	r3, #0
 800c724:	d013      	beq.n	800c74e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	f003 0320 	and.w	r3, r3, #32
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d104      	bne.n	800c73a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d009      	beq.n	800c74e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f000 8282 	beq.w	800cc48 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	4798      	blx	r3
      }
      return;
 800c74c:	e27c      	b.n	800cc48 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 80ef 	beq.w	800c934 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	4b73      	ldr	r3, [pc, #460]	; (800c928 <HAL_UART_IRQHandler+0x23c>)
 800c75a:	4013      	ands	r3, r2
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d105      	bne.n	800c76c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c760:	69ba      	ldr	r2, [r7, #24]
 800c762:	4b72      	ldr	r3, [pc, #456]	; (800c92c <HAL_UART_IRQHandler+0x240>)
 800c764:	4013      	ands	r3, r2
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 80e4 	beq.w	800c934 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b00      	cmp	r3, #0
 800c774:	d010      	beq.n	800c798 <HAL_UART_IRQHandler+0xac>
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00b      	beq.n	800c798 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2201      	movs	r2, #1
 800c786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c78e:	f043 0201 	orr.w	r2, r3, #1
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	f003 0302 	and.w	r3, r3, #2
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d010      	beq.n	800c7c4 <HAL_UART_IRQHandler+0xd8>
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f003 0301 	and.w	r3, r3, #1
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00b      	beq.n	800c7c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ba:	f043 0204 	orr.w	r2, r3, #4
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	f003 0304 	and.w	r3, r3, #4
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d010      	beq.n	800c7f0 <HAL_UART_IRQHandler+0x104>
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00b      	beq.n	800c7f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2204      	movs	r2, #4
 800c7de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7e6:	f043 0202 	orr.w	r2, r3, #2
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	f003 0308 	and.w	r3, r3, #8
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d015      	beq.n	800c826 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	f003 0320 	and.w	r3, r3, #32
 800c800:	2b00      	cmp	r3, #0
 800c802:	d104      	bne.n	800c80e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	4b48      	ldr	r3, [pc, #288]	; (800c928 <HAL_UART_IRQHandler+0x23c>)
 800c808:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00b      	beq.n	800c826 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2208      	movs	r2, #8
 800c814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c81c:	f043 0208 	orr.w	r2, r3, #8
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d011      	beq.n	800c854 <HAL_UART_IRQHandler+0x168>
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00c      	beq.n	800c854 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c84a:	f043 0220 	orr.w	r2, r3, #32
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 81f6 	beq.w	800cc4c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	f003 0320 	and.w	r3, r3, #32
 800c866:	2b00      	cmp	r3, #0
 800c868:	d011      	beq.n	800c88e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	f003 0320 	and.w	r3, r3, #32
 800c870:	2b00      	cmp	r3, #0
 800c872:	d104      	bne.n	800c87e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d007      	beq.n	800c88e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c882:	2b00      	cmp	r3, #0
 800c884:	d003      	beq.n	800c88e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c894:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a0:	2b40      	cmp	r3, #64	; 0x40
 800c8a2:	d004      	beq.n	800c8ae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d031      	beq.n	800c912 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f001 f8c4 	bl	800da3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8be:	2b40      	cmp	r3, #64	; 0x40
 800c8c0:	d123      	bne.n	800c90a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	689a      	ldr	r2, [r3, #8]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d013      	beq.n	800c902 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8de:	4a14      	ldr	r2, [pc, #80]	; (800c930 <HAL_UART_IRQHandler+0x244>)
 800c8e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7f6 f87a 	bl	80029e0 <HAL_DMA_Abort_IT>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d017      	beq.n	800c922 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c900:	e00f      	b.n	800c922 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f9b6 	bl	800cc74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c908:	e00b      	b.n	800c922 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f9b2 	bl	800cc74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c910:	e007      	b.n	800c922 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f9ae 	bl	800cc74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c920:	e194      	b.n	800cc4c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c922:	bf00      	nop
    return;
 800c924:	e192      	b.n	800cc4c <HAL_UART_IRQHandler+0x560>
 800c926:	bf00      	nop
 800c928:	10000001 	.word	0x10000001
 800c92c:	04000120 	.word	0x04000120
 800c930:	0800daa1 	.word	0x0800daa1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c938:	2b01      	cmp	r3, #1
 800c93a:	f040 810f 	bne.w	800cb5c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	f003 0310 	and.w	r3, r3, #16
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 8109 	beq.w	800cb5c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	f003 0310 	and.w	r3, r3, #16
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 8103 	beq.w	800cb5c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2210      	movs	r2, #16
 800c95c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c968:	2b40      	cmp	r3, #64	; 0x40
 800c96a:	f040 80bb 	bne.w	800cae4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a96      	ldr	r2, [pc, #600]	; (800cbd0 <HAL_UART_IRQHandler+0x4e4>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d059      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a94      	ldr	r2, [pc, #592]	; (800cbd4 <HAL_UART_IRQHandler+0x4e8>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d053      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a92      	ldr	r2, [pc, #584]	; (800cbd8 <HAL_UART_IRQHandler+0x4ec>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d04d      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a90      	ldr	r2, [pc, #576]	; (800cbdc <HAL_UART_IRQHandler+0x4f0>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d047      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a8e      	ldr	r2, [pc, #568]	; (800cbe0 <HAL_UART_IRQHandler+0x4f4>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d041      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a8c      	ldr	r2, [pc, #560]	; (800cbe4 <HAL_UART_IRQHandler+0x4f8>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d03b      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a8a      	ldr	r2, [pc, #552]	; (800cbe8 <HAL_UART_IRQHandler+0x4fc>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d035      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a88      	ldr	r2, [pc, #544]	; (800cbec <HAL_UART_IRQHandler+0x500>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d02f      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a86      	ldr	r2, [pc, #536]	; (800cbf0 <HAL_UART_IRQHandler+0x504>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d029      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a84      	ldr	r2, [pc, #528]	; (800cbf4 <HAL_UART_IRQHandler+0x508>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d023      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a82      	ldr	r2, [pc, #520]	; (800cbf8 <HAL_UART_IRQHandler+0x50c>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d01d      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a80      	ldr	r2, [pc, #512]	; (800cbfc <HAL_UART_IRQHandler+0x510>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d017      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a7e      	ldr	r2, [pc, #504]	; (800cc00 <HAL_UART_IRQHandler+0x514>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d011      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a7c      	ldr	r2, [pc, #496]	; (800cc04 <HAL_UART_IRQHandler+0x518>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d00b      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a7a      	ldr	r2, [pc, #488]	; (800cc08 <HAL_UART_IRQHandler+0x51c>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d005      	beq.n	800ca2e <HAL_UART_IRQHandler+0x342>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a78      	ldr	r2, [pc, #480]	; (800cc0c <HAL_UART_IRQHandler+0x520>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d105      	bne.n	800ca3a <HAL_UART_IRQHandler+0x34e>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	e004      	b.n	800ca44 <HAL_UART_IRQHandler+0x358>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800ca46:	893b      	ldrh	r3, [r7, #8]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f000 8101 	beq.w	800cc50 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca54:	893a      	ldrh	r2, [r7, #8]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	f080 80fa 	bcs.w	800cc50 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	893a      	ldrh	r2, [r7, #8]
 800ca60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca68:	69db      	ldr	r3, [r3, #28]
 800ca6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca6e:	d02b      	beq.n	800cac8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca7e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	689a      	ldr	r2, [r3, #8]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f022 0201 	bic.w	r2, r2, #1
 800ca8e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	689a      	ldr	r2, [r3, #8]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca9e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2220      	movs	r2, #32
 800caa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f022 0210 	bic.w	r2, r2, #16
 800cabc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7f5 fc6e 	bl	80023a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	1ad3      	subs	r3, r2, r3
 800cad8:	b29b      	uxth	r3, r3
 800cada:	4619      	mov	r1, r3
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f8d3 	bl	800cc88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cae2:	e0b5      	b.n	800cc50 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 80a8 	beq.w	800cc54 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800cb04:	897b      	ldrh	r3, [r7, #10]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 80a4 	beq.w	800cc54 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cb1a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6899      	ldr	r1, [r3, #8]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	4b3a      	ldr	r3, [pc, #232]	; (800cc10 <HAL_UART_IRQHandler+0x524>)
 800cb28:	400b      	ands	r3, r1
 800cb2a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2220      	movs	r2, #32
 800cb30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f022 0210 	bic.w	r2, r2, #16
 800cb4e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb50:	897b      	ldrh	r3, [r7, #10]
 800cb52:	4619      	mov	r1, r3
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f897 	bl	800cc88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb5a:	e07b      	b.n	800cc54 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00d      	beq.n	800cb82 <HAL_UART_IRQHandler+0x496>
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d008      	beq.n	800cb82 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cb78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 ffc0 	bl	800db00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb80:	e06b      	b.n	800cc5a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d012      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d104      	bne.n	800cba0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d008      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d057      	beq.n	800cc58 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	4798      	blx	r3
    }
    return;
 800cbb0:	e052      	b.n	800cc58 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d02b      	beq.n	800cc14 <HAL_UART_IRQHandler+0x528>
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d026      	beq.n	800cc14 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 ff80 	bl	800dacc <UART_EndTransmit_IT>
    return;
 800cbcc:	e045      	b.n	800cc5a <HAL_UART_IRQHandler+0x56e>
 800cbce:	bf00      	nop
 800cbd0:	40020010 	.word	0x40020010
 800cbd4:	40020028 	.word	0x40020028
 800cbd8:	40020040 	.word	0x40020040
 800cbdc:	40020058 	.word	0x40020058
 800cbe0:	40020070 	.word	0x40020070
 800cbe4:	40020088 	.word	0x40020088
 800cbe8:	400200a0 	.word	0x400200a0
 800cbec:	400200b8 	.word	0x400200b8
 800cbf0:	40020410 	.word	0x40020410
 800cbf4:	40020428 	.word	0x40020428
 800cbf8:	40020440 	.word	0x40020440
 800cbfc:	40020458 	.word	0x40020458
 800cc00:	40020470 	.word	0x40020470
 800cc04:	40020488 	.word	0x40020488
 800cc08:	400204a0 	.word	0x400204a0
 800cc0c:	400204b8 	.word	0x400204b8
 800cc10:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d008      	beq.n	800cc30 <HAL_UART_IRQHandler+0x544>
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d003      	beq.n	800cc30 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 ff7d 	bl	800db28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc2e:	e014      	b.n	800cc5a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00f      	beq.n	800cc5a <HAL_UART_IRQHandler+0x56e>
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	da0c      	bge.n	800cc5a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 ff67 	bl	800db14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc46:	e008      	b.n	800cc5a <HAL_UART_IRQHandler+0x56e>
      return;
 800cc48:	bf00      	nop
 800cc4a:	e006      	b.n	800cc5a <HAL_UART_IRQHandler+0x56e>
    return;
 800cc4c:	bf00      	nop
 800cc4e:	e004      	b.n	800cc5a <HAL_UART_IRQHandler+0x56e>
      return;
 800cc50:	bf00      	nop
 800cc52:	e002      	b.n	800cc5a <HAL_UART_IRQHandler+0x56e>
      return;
 800cc54:	bf00      	nop
 800cc56:	e000      	b.n	800cc5a <HAL_UART_IRQHandler+0x56e>
    return;
 800cc58:	bf00      	nop
  }
}
 800cc5a:	3720      	adds	r7, #32
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cc68:	bf00      	nop
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cca0:	b5b0      	push	{r4, r5, r7, lr}
 800cca2:	b08e      	sub	sp, #56	; 0x38
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	689a      	ldr	r2, [r3, #8]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	431a      	orrs	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	695b      	ldr	r3, [r3, #20]
 800ccbc:	431a      	orrs	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	69db      	ldr	r3, [r3, #28]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	4bbf      	ldr	r3, [pc, #764]	; (800cfcc <UART_SetConfig+0x32c>)
 800ccce:	4013      	ands	r3, r2
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	6812      	ldr	r2, [r2, #0]
 800ccd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ccd6:	430b      	orrs	r3, r1
 800ccd8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	68da      	ldr	r2, [r3, #12]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	430a      	orrs	r2, r1
 800ccee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	699b      	ldr	r3, [r3, #24]
 800ccf4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4ab5      	ldr	r2, [pc, #724]	; (800cfd0 <UART_SetConfig+0x330>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d004      	beq.n	800cd0a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd06:	4313      	orrs	r3, r2
 800cd08:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689a      	ldr	r2, [r3, #8]
 800cd10:	4bb0      	ldr	r3, [pc, #704]	; (800cfd4 <UART_SetConfig+0x334>)
 800cd12:	4013      	ands	r3, r2
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	6812      	ldr	r2, [r2, #0]
 800cd18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cd1a:	430b      	orrs	r3, r1
 800cd1c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd24:	f023 010f 	bic.w	r1, r3, #15
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	430a      	orrs	r2, r1
 800cd32:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4aa7      	ldr	r2, [pc, #668]	; (800cfd8 <UART_SetConfig+0x338>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d176      	bne.n	800ce2c <UART_SetConfig+0x18c>
 800cd3e:	4ba7      	ldr	r3, [pc, #668]	; (800cfdc <UART_SetConfig+0x33c>)
 800cd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd46:	2b28      	cmp	r3, #40	; 0x28
 800cd48:	d86c      	bhi.n	800ce24 <UART_SetConfig+0x184>
 800cd4a:	a201      	add	r2, pc, #4	; (adr r2, 800cd50 <UART_SetConfig+0xb0>)
 800cd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd50:	0800cdf5 	.word	0x0800cdf5
 800cd54:	0800ce25 	.word	0x0800ce25
 800cd58:	0800ce25 	.word	0x0800ce25
 800cd5c:	0800ce25 	.word	0x0800ce25
 800cd60:	0800ce25 	.word	0x0800ce25
 800cd64:	0800ce25 	.word	0x0800ce25
 800cd68:	0800ce25 	.word	0x0800ce25
 800cd6c:	0800ce25 	.word	0x0800ce25
 800cd70:	0800cdfd 	.word	0x0800cdfd
 800cd74:	0800ce25 	.word	0x0800ce25
 800cd78:	0800ce25 	.word	0x0800ce25
 800cd7c:	0800ce25 	.word	0x0800ce25
 800cd80:	0800ce25 	.word	0x0800ce25
 800cd84:	0800ce25 	.word	0x0800ce25
 800cd88:	0800ce25 	.word	0x0800ce25
 800cd8c:	0800ce25 	.word	0x0800ce25
 800cd90:	0800ce05 	.word	0x0800ce05
 800cd94:	0800ce25 	.word	0x0800ce25
 800cd98:	0800ce25 	.word	0x0800ce25
 800cd9c:	0800ce25 	.word	0x0800ce25
 800cda0:	0800ce25 	.word	0x0800ce25
 800cda4:	0800ce25 	.word	0x0800ce25
 800cda8:	0800ce25 	.word	0x0800ce25
 800cdac:	0800ce25 	.word	0x0800ce25
 800cdb0:	0800ce0d 	.word	0x0800ce0d
 800cdb4:	0800ce25 	.word	0x0800ce25
 800cdb8:	0800ce25 	.word	0x0800ce25
 800cdbc:	0800ce25 	.word	0x0800ce25
 800cdc0:	0800ce25 	.word	0x0800ce25
 800cdc4:	0800ce25 	.word	0x0800ce25
 800cdc8:	0800ce25 	.word	0x0800ce25
 800cdcc:	0800ce25 	.word	0x0800ce25
 800cdd0:	0800ce15 	.word	0x0800ce15
 800cdd4:	0800ce25 	.word	0x0800ce25
 800cdd8:	0800ce25 	.word	0x0800ce25
 800cddc:	0800ce25 	.word	0x0800ce25
 800cde0:	0800ce25 	.word	0x0800ce25
 800cde4:	0800ce25 	.word	0x0800ce25
 800cde8:	0800ce25 	.word	0x0800ce25
 800cdec:	0800ce25 	.word	0x0800ce25
 800cdf0:	0800ce1d 	.word	0x0800ce1d
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdfa:	e222      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cdfc:	2304      	movs	r3, #4
 800cdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce02:	e21e      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce04:	2308      	movs	r3, #8
 800ce06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce0a:	e21a      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce0c:	2310      	movs	r3, #16
 800ce0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce12:	e216      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce14:	2320      	movs	r3, #32
 800ce16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce1a:	e212      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce1c:	2340      	movs	r3, #64	; 0x40
 800ce1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce22:	e20e      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce24:	2380      	movs	r3, #128	; 0x80
 800ce26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce2a:	e20a      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a6b      	ldr	r2, [pc, #428]	; (800cfe0 <UART_SetConfig+0x340>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d130      	bne.n	800ce98 <UART_SetConfig+0x1f8>
 800ce36:	4b69      	ldr	r3, [pc, #420]	; (800cfdc <UART_SetConfig+0x33c>)
 800ce38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce3a:	f003 0307 	and.w	r3, r3, #7
 800ce3e:	2b05      	cmp	r3, #5
 800ce40:	d826      	bhi.n	800ce90 <UART_SetConfig+0x1f0>
 800ce42:	a201      	add	r2, pc, #4	; (adr r2, 800ce48 <UART_SetConfig+0x1a8>)
 800ce44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce48:	0800ce61 	.word	0x0800ce61
 800ce4c:	0800ce69 	.word	0x0800ce69
 800ce50:	0800ce71 	.word	0x0800ce71
 800ce54:	0800ce79 	.word	0x0800ce79
 800ce58:	0800ce81 	.word	0x0800ce81
 800ce5c:	0800ce89 	.word	0x0800ce89
 800ce60:	2300      	movs	r3, #0
 800ce62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce66:	e1ec      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce68:	2304      	movs	r3, #4
 800ce6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce6e:	e1e8      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce70:	2308      	movs	r3, #8
 800ce72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce76:	e1e4      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce78:	2310      	movs	r3, #16
 800ce7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce7e:	e1e0      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce80:	2320      	movs	r3, #32
 800ce82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce86:	e1dc      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce88:	2340      	movs	r3, #64	; 0x40
 800ce8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce8e:	e1d8      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce90:	2380      	movs	r3, #128	; 0x80
 800ce92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce96:	e1d4      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a51      	ldr	r2, [pc, #324]	; (800cfe4 <UART_SetConfig+0x344>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d130      	bne.n	800cf04 <UART_SetConfig+0x264>
 800cea2:	4b4e      	ldr	r3, [pc, #312]	; (800cfdc <UART_SetConfig+0x33c>)
 800cea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cea6:	f003 0307 	and.w	r3, r3, #7
 800ceaa:	2b05      	cmp	r3, #5
 800ceac:	d826      	bhi.n	800cefc <UART_SetConfig+0x25c>
 800ceae:	a201      	add	r2, pc, #4	; (adr r2, 800ceb4 <UART_SetConfig+0x214>)
 800ceb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb4:	0800cecd 	.word	0x0800cecd
 800ceb8:	0800ced5 	.word	0x0800ced5
 800cebc:	0800cedd 	.word	0x0800cedd
 800cec0:	0800cee5 	.word	0x0800cee5
 800cec4:	0800ceed 	.word	0x0800ceed
 800cec8:	0800cef5 	.word	0x0800cef5
 800cecc:	2300      	movs	r3, #0
 800cece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ced2:	e1b6      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ced4:	2304      	movs	r3, #4
 800ced6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceda:	e1b2      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cedc:	2308      	movs	r3, #8
 800cede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cee2:	e1ae      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cee4:	2310      	movs	r3, #16
 800cee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceea:	e1aa      	b.n	800d242 <UART_SetConfig+0x5a2>
 800ceec:	2320      	movs	r3, #32
 800ceee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cef2:	e1a6      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cef4:	2340      	movs	r3, #64	; 0x40
 800cef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cefa:	e1a2      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cefc:	2380      	movs	r3, #128	; 0x80
 800cefe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf02:	e19e      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a37      	ldr	r2, [pc, #220]	; (800cfe8 <UART_SetConfig+0x348>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d130      	bne.n	800cf70 <UART_SetConfig+0x2d0>
 800cf0e:	4b33      	ldr	r3, [pc, #204]	; (800cfdc <UART_SetConfig+0x33c>)
 800cf10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf12:	f003 0307 	and.w	r3, r3, #7
 800cf16:	2b05      	cmp	r3, #5
 800cf18:	d826      	bhi.n	800cf68 <UART_SetConfig+0x2c8>
 800cf1a:	a201      	add	r2, pc, #4	; (adr r2, 800cf20 <UART_SetConfig+0x280>)
 800cf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf20:	0800cf39 	.word	0x0800cf39
 800cf24:	0800cf41 	.word	0x0800cf41
 800cf28:	0800cf49 	.word	0x0800cf49
 800cf2c:	0800cf51 	.word	0x0800cf51
 800cf30:	0800cf59 	.word	0x0800cf59
 800cf34:	0800cf61 	.word	0x0800cf61
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf3e:	e180      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cf40:	2304      	movs	r3, #4
 800cf42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf46:	e17c      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cf48:	2308      	movs	r3, #8
 800cf4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf4e:	e178      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cf50:	2310      	movs	r3, #16
 800cf52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf56:	e174      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cf58:	2320      	movs	r3, #32
 800cf5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf5e:	e170      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cf60:	2340      	movs	r3, #64	; 0x40
 800cf62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf66:	e16c      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cf68:	2380      	movs	r3, #128	; 0x80
 800cf6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf6e:	e168      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a1d      	ldr	r2, [pc, #116]	; (800cfec <UART_SetConfig+0x34c>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d142      	bne.n	800d000 <UART_SetConfig+0x360>
 800cf7a:	4b18      	ldr	r3, [pc, #96]	; (800cfdc <UART_SetConfig+0x33c>)
 800cf7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf7e:	f003 0307 	and.w	r3, r3, #7
 800cf82:	2b05      	cmp	r3, #5
 800cf84:	d838      	bhi.n	800cff8 <UART_SetConfig+0x358>
 800cf86:	a201      	add	r2, pc, #4	; (adr r2, 800cf8c <UART_SetConfig+0x2ec>)
 800cf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8c:	0800cfa5 	.word	0x0800cfa5
 800cf90:	0800cfad 	.word	0x0800cfad
 800cf94:	0800cfb5 	.word	0x0800cfb5
 800cf98:	0800cfbd 	.word	0x0800cfbd
 800cf9c:	0800cfc5 	.word	0x0800cfc5
 800cfa0:	0800cff1 	.word	0x0800cff1
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfaa:	e14a      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cfac:	2304      	movs	r3, #4
 800cfae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfb2:	e146      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cfb4:	2308      	movs	r3, #8
 800cfb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfba:	e142      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cfbc:	2310      	movs	r3, #16
 800cfbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfc2:	e13e      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cfc4:	2320      	movs	r3, #32
 800cfc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfca:	e13a      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cfcc:	cfff69f3 	.word	0xcfff69f3
 800cfd0:	58000c00 	.word	0x58000c00
 800cfd4:	11fff4ff 	.word	0x11fff4ff
 800cfd8:	40011000 	.word	0x40011000
 800cfdc:	58024400 	.word	0x58024400
 800cfe0:	40004400 	.word	0x40004400
 800cfe4:	40004800 	.word	0x40004800
 800cfe8:	40004c00 	.word	0x40004c00
 800cfec:	40005000 	.word	0x40005000
 800cff0:	2340      	movs	r3, #64	; 0x40
 800cff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cff6:	e124      	b.n	800d242 <UART_SetConfig+0x5a2>
 800cff8:	2380      	movs	r3, #128	; 0x80
 800cffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cffe:	e120      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4acc      	ldr	r2, [pc, #816]	; (800d338 <UART_SetConfig+0x698>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d176      	bne.n	800d0f8 <UART_SetConfig+0x458>
 800d00a:	4bcc      	ldr	r3, [pc, #816]	; (800d33c <UART_SetConfig+0x69c>)
 800d00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d00e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d012:	2b28      	cmp	r3, #40	; 0x28
 800d014:	d86c      	bhi.n	800d0f0 <UART_SetConfig+0x450>
 800d016:	a201      	add	r2, pc, #4	; (adr r2, 800d01c <UART_SetConfig+0x37c>)
 800d018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d01c:	0800d0c1 	.word	0x0800d0c1
 800d020:	0800d0f1 	.word	0x0800d0f1
 800d024:	0800d0f1 	.word	0x0800d0f1
 800d028:	0800d0f1 	.word	0x0800d0f1
 800d02c:	0800d0f1 	.word	0x0800d0f1
 800d030:	0800d0f1 	.word	0x0800d0f1
 800d034:	0800d0f1 	.word	0x0800d0f1
 800d038:	0800d0f1 	.word	0x0800d0f1
 800d03c:	0800d0c9 	.word	0x0800d0c9
 800d040:	0800d0f1 	.word	0x0800d0f1
 800d044:	0800d0f1 	.word	0x0800d0f1
 800d048:	0800d0f1 	.word	0x0800d0f1
 800d04c:	0800d0f1 	.word	0x0800d0f1
 800d050:	0800d0f1 	.word	0x0800d0f1
 800d054:	0800d0f1 	.word	0x0800d0f1
 800d058:	0800d0f1 	.word	0x0800d0f1
 800d05c:	0800d0d1 	.word	0x0800d0d1
 800d060:	0800d0f1 	.word	0x0800d0f1
 800d064:	0800d0f1 	.word	0x0800d0f1
 800d068:	0800d0f1 	.word	0x0800d0f1
 800d06c:	0800d0f1 	.word	0x0800d0f1
 800d070:	0800d0f1 	.word	0x0800d0f1
 800d074:	0800d0f1 	.word	0x0800d0f1
 800d078:	0800d0f1 	.word	0x0800d0f1
 800d07c:	0800d0d9 	.word	0x0800d0d9
 800d080:	0800d0f1 	.word	0x0800d0f1
 800d084:	0800d0f1 	.word	0x0800d0f1
 800d088:	0800d0f1 	.word	0x0800d0f1
 800d08c:	0800d0f1 	.word	0x0800d0f1
 800d090:	0800d0f1 	.word	0x0800d0f1
 800d094:	0800d0f1 	.word	0x0800d0f1
 800d098:	0800d0f1 	.word	0x0800d0f1
 800d09c:	0800d0e1 	.word	0x0800d0e1
 800d0a0:	0800d0f1 	.word	0x0800d0f1
 800d0a4:	0800d0f1 	.word	0x0800d0f1
 800d0a8:	0800d0f1 	.word	0x0800d0f1
 800d0ac:	0800d0f1 	.word	0x0800d0f1
 800d0b0:	0800d0f1 	.word	0x0800d0f1
 800d0b4:	0800d0f1 	.word	0x0800d0f1
 800d0b8:	0800d0f1 	.word	0x0800d0f1
 800d0bc:	0800d0e9 	.word	0x0800d0e9
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0c6:	e0bc      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d0c8:	2304      	movs	r3, #4
 800d0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ce:	e0b8      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d0d0:	2308      	movs	r3, #8
 800d0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0d6:	e0b4      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d0d8:	2310      	movs	r3, #16
 800d0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0de:	e0b0      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d0e0:	2320      	movs	r3, #32
 800d0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0e6:	e0ac      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d0e8:	2340      	movs	r3, #64	; 0x40
 800d0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ee:	e0a8      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d0f0:	2380      	movs	r3, #128	; 0x80
 800d0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0f6:	e0a4      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a90      	ldr	r2, [pc, #576]	; (800d340 <UART_SetConfig+0x6a0>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d130      	bne.n	800d164 <UART_SetConfig+0x4c4>
 800d102:	4b8e      	ldr	r3, [pc, #568]	; (800d33c <UART_SetConfig+0x69c>)
 800d104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d106:	f003 0307 	and.w	r3, r3, #7
 800d10a:	2b05      	cmp	r3, #5
 800d10c:	d826      	bhi.n	800d15c <UART_SetConfig+0x4bc>
 800d10e:	a201      	add	r2, pc, #4	; (adr r2, 800d114 <UART_SetConfig+0x474>)
 800d110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d114:	0800d12d 	.word	0x0800d12d
 800d118:	0800d135 	.word	0x0800d135
 800d11c:	0800d13d 	.word	0x0800d13d
 800d120:	0800d145 	.word	0x0800d145
 800d124:	0800d14d 	.word	0x0800d14d
 800d128:	0800d155 	.word	0x0800d155
 800d12c:	2300      	movs	r3, #0
 800d12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d132:	e086      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d134:	2304      	movs	r3, #4
 800d136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d13a:	e082      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d13c:	2308      	movs	r3, #8
 800d13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d142:	e07e      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d144:	2310      	movs	r3, #16
 800d146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d14a:	e07a      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d14c:	2320      	movs	r3, #32
 800d14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d152:	e076      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d154:	2340      	movs	r3, #64	; 0x40
 800d156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d15a:	e072      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d15c:	2380      	movs	r3, #128	; 0x80
 800d15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d162:	e06e      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a76      	ldr	r2, [pc, #472]	; (800d344 <UART_SetConfig+0x6a4>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d130      	bne.n	800d1d0 <UART_SetConfig+0x530>
 800d16e:	4b73      	ldr	r3, [pc, #460]	; (800d33c <UART_SetConfig+0x69c>)
 800d170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d172:	f003 0307 	and.w	r3, r3, #7
 800d176:	2b05      	cmp	r3, #5
 800d178:	d826      	bhi.n	800d1c8 <UART_SetConfig+0x528>
 800d17a:	a201      	add	r2, pc, #4	; (adr r2, 800d180 <UART_SetConfig+0x4e0>)
 800d17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d180:	0800d199 	.word	0x0800d199
 800d184:	0800d1a1 	.word	0x0800d1a1
 800d188:	0800d1a9 	.word	0x0800d1a9
 800d18c:	0800d1b1 	.word	0x0800d1b1
 800d190:	0800d1b9 	.word	0x0800d1b9
 800d194:	0800d1c1 	.word	0x0800d1c1
 800d198:	2300      	movs	r3, #0
 800d19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d19e:	e050      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d1a0:	2304      	movs	r3, #4
 800d1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1a6:	e04c      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d1a8:	2308      	movs	r3, #8
 800d1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1ae:	e048      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d1b0:	2310      	movs	r3, #16
 800d1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1b6:	e044      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d1b8:	2320      	movs	r3, #32
 800d1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1be:	e040      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d1c0:	2340      	movs	r3, #64	; 0x40
 800d1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1c6:	e03c      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d1c8:	2380      	movs	r3, #128	; 0x80
 800d1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1ce:	e038      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a5c      	ldr	r2, [pc, #368]	; (800d348 <UART_SetConfig+0x6a8>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d130      	bne.n	800d23c <UART_SetConfig+0x59c>
 800d1da:	4b58      	ldr	r3, [pc, #352]	; (800d33c <UART_SetConfig+0x69c>)
 800d1dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1de:	f003 0307 	and.w	r3, r3, #7
 800d1e2:	2b05      	cmp	r3, #5
 800d1e4:	d826      	bhi.n	800d234 <UART_SetConfig+0x594>
 800d1e6:	a201      	add	r2, pc, #4	; (adr r2, 800d1ec <UART_SetConfig+0x54c>)
 800d1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ec:	0800d205 	.word	0x0800d205
 800d1f0:	0800d20d 	.word	0x0800d20d
 800d1f4:	0800d215 	.word	0x0800d215
 800d1f8:	0800d21d 	.word	0x0800d21d
 800d1fc:	0800d225 	.word	0x0800d225
 800d200:	0800d22d 	.word	0x0800d22d
 800d204:	2302      	movs	r3, #2
 800d206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d20a:	e01a      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d20c:	2304      	movs	r3, #4
 800d20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d212:	e016      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d214:	2308      	movs	r3, #8
 800d216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d21a:	e012      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d21c:	2310      	movs	r3, #16
 800d21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d222:	e00e      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d224:	2320      	movs	r3, #32
 800d226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d22a:	e00a      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d22c:	2340      	movs	r3, #64	; 0x40
 800d22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d232:	e006      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d234:	2380      	movs	r3, #128	; 0x80
 800d236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d23a:	e002      	b.n	800d242 <UART_SetConfig+0x5a2>
 800d23c:	2380      	movs	r3, #128	; 0x80
 800d23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a40      	ldr	r2, [pc, #256]	; (800d348 <UART_SetConfig+0x6a8>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	f040 80ef 	bne.w	800d42c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d24e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d252:	2b20      	cmp	r3, #32
 800d254:	dc46      	bgt.n	800d2e4 <UART_SetConfig+0x644>
 800d256:	2b02      	cmp	r3, #2
 800d258:	f2c0 8081 	blt.w	800d35e <UART_SetConfig+0x6be>
 800d25c:	3b02      	subs	r3, #2
 800d25e:	2b1e      	cmp	r3, #30
 800d260:	d87d      	bhi.n	800d35e <UART_SetConfig+0x6be>
 800d262:	a201      	add	r2, pc, #4	; (adr r2, 800d268 <UART_SetConfig+0x5c8>)
 800d264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d268:	0800d2eb 	.word	0x0800d2eb
 800d26c:	0800d35f 	.word	0x0800d35f
 800d270:	0800d2f3 	.word	0x0800d2f3
 800d274:	0800d35f 	.word	0x0800d35f
 800d278:	0800d35f 	.word	0x0800d35f
 800d27c:	0800d35f 	.word	0x0800d35f
 800d280:	0800d303 	.word	0x0800d303
 800d284:	0800d35f 	.word	0x0800d35f
 800d288:	0800d35f 	.word	0x0800d35f
 800d28c:	0800d35f 	.word	0x0800d35f
 800d290:	0800d35f 	.word	0x0800d35f
 800d294:	0800d35f 	.word	0x0800d35f
 800d298:	0800d35f 	.word	0x0800d35f
 800d29c:	0800d35f 	.word	0x0800d35f
 800d2a0:	0800d313 	.word	0x0800d313
 800d2a4:	0800d35f 	.word	0x0800d35f
 800d2a8:	0800d35f 	.word	0x0800d35f
 800d2ac:	0800d35f 	.word	0x0800d35f
 800d2b0:	0800d35f 	.word	0x0800d35f
 800d2b4:	0800d35f 	.word	0x0800d35f
 800d2b8:	0800d35f 	.word	0x0800d35f
 800d2bc:	0800d35f 	.word	0x0800d35f
 800d2c0:	0800d35f 	.word	0x0800d35f
 800d2c4:	0800d35f 	.word	0x0800d35f
 800d2c8:	0800d35f 	.word	0x0800d35f
 800d2cc:	0800d35f 	.word	0x0800d35f
 800d2d0:	0800d35f 	.word	0x0800d35f
 800d2d4:	0800d35f 	.word	0x0800d35f
 800d2d8:	0800d35f 	.word	0x0800d35f
 800d2dc:	0800d35f 	.word	0x0800d35f
 800d2e0:	0800d351 	.word	0x0800d351
 800d2e4:	2b40      	cmp	r3, #64	; 0x40
 800d2e6:	d036      	beq.n	800d356 <UART_SetConfig+0x6b6>
 800d2e8:	e039      	b.n	800d35e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d2ea:	f7fb fec9 	bl	8009080 <HAL_RCCEx_GetD3PCLK1Freq>
 800d2ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d2f0:	e03b      	b.n	800d36a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2f2:	f107 0314 	add.w	r3, r7, #20
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fb fed8 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d300:	e033      	b.n	800d36a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d302:	f107 0308 	add.w	r3, r7, #8
 800d306:	4618      	mov	r0, r3
 800d308:	f7fc f824 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d310:	e02b      	b.n	800d36a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d312:	4b0a      	ldr	r3, [pc, #40]	; (800d33c <UART_SetConfig+0x69c>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f003 0320 	and.w	r3, r3, #32
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d009      	beq.n	800d332 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d31e:	4b07      	ldr	r3, [pc, #28]	; (800d33c <UART_SetConfig+0x69c>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	08db      	lsrs	r3, r3, #3
 800d324:	f003 0303 	and.w	r3, r3, #3
 800d328:	4a08      	ldr	r2, [pc, #32]	; (800d34c <UART_SetConfig+0x6ac>)
 800d32a:	fa22 f303 	lsr.w	r3, r2, r3
 800d32e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d330:	e01b      	b.n	800d36a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d332:	4b06      	ldr	r3, [pc, #24]	; (800d34c <UART_SetConfig+0x6ac>)
 800d334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d336:	e018      	b.n	800d36a <UART_SetConfig+0x6ca>
 800d338:	40011400 	.word	0x40011400
 800d33c:	58024400 	.word	0x58024400
 800d340:	40007800 	.word	0x40007800
 800d344:	40007c00 	.word	0x40007c00
 800d348:	58000c00 	.word	0x58000c00
 800d34c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d350:	4bc4      	ldr	r3, [pc, #784]	; (800d664 <UART_SetConfig+0x9c4>)
 800d352:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d354:	e009      	b.n	800d36a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d35a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d35c:	e005      	b.n	800d36a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d35e:	2300      	movs	r3, #0
 800d360:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d368:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f000 81da 	beq.w	800d726 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d376:	4abc      	ldr	r2, [pc, #752]	; (800d668 <UART_SetConfig+0x9c8>)
 800d378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d37c:	461a      	mov	r2, r3
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	fbb3 f3f2 	udiv	r3, r3, r2
 800d384:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	685a      	ldr	r2, [r3, #4]
 800d38a:	4613      	mov	r3, r2
 800d38c:	005b      	lsls	r3, r3, #1
 800d38e:	4413      	add	r3, r2
 800d390:	6a3a      	ldr	r2, [r7, #32]
 800d392:	429a      	cmp	r2, r3
 800d394:	d305      	bcc.n	800d3a2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d39c:	6a3a      	ldr	r2, [r7, #32]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d903      	bls.n	800d3aa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d3a8:	e1bd      	b.n	800d726 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f04f 0100 	mov.w	r1, #0
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b6:	4aac      	ldr	r2, [pc, #688]	; (800d668 <UART_SetConfig+0x9c8>)
 800d3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	f04f 0300 	mov.w	r3, #0
 800d3c2:	f7f2 ffe5 	bl	8000390 <__aeabi_uldivmod>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	f04f 0200 	mov.w	r2, #0
 800d3d2:	f04f 0300 	mov.w	r3, #0
 800d3d6:	020b      	lsls	r3, r1, #8
 800d3d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d3dc:	0202      	lsls	r2, r0, #8
 800d3de:	6879      	ldr	r1, [r7, #4]
 800d3e0:	6849      	ldr	r1, [r1, #4]
 800d3e2:	0849      	lsrs	r1, r1, #1
 800d3e4:	4608      	mov	r0, r1
 800d3e6:	f04f 0100 	mov.w	r1, #0
 800d3ea:	1814      	adds	r4, r2, r0
 800d3ec:	eb43 0501 	adc.w	r5, r3, r1
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	f04f 0300 	mov.w	r3, #0
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	f7f2 ffc7 	bl	8000390 <__aeabi_uldivmod>
 800d402:	4602      	mov	r2, r0
 800d404:	460b      	mov	r3, r1
 800d406:	4613      	mov	r3, r2
 800d408:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d410:	d308      	bcc.n	800d424 <UART_SetConfig+0x784>
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d418:	d204      	bcs.n	800d424 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d420:	60da      	str	r2, [r3, #12]
 800d422:	e180      	b.n	800d726 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d424:	2301      	movs	r3, #1
 800d426:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d42a:	e17c      	b.n	800d726 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	69db      	ldr	r3, [r3, #28]
 800d430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d434:	f040 80bf 	bne.w	800d5b6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d438:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d43c:	2b20      	cmp	r3, #32
 800d43e:	dc49      	bgt.n	800d4d4 <UART_SetConfig+0x834>
 800d440:	2b00      	cmp	r3, #0
 800d442:	db7c      	blt.n	800d53e <UART_SetConfig+0x89e>
 800d444:	2b20      	cmp	r3, #32
 800d446:	d87a      	bhi.n	800d53e <UART_SetConfig+0x89e>
 800d448:	a201      	add	r2, pc, #4	; (adr r2, 800d450 <UART_SetConfig+0x7b0>)
 800d44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44e:	bf00      	nop
 800d450:	0800d4db 	.word	0x0800d4db
 800d454:	0800d4e3 	.word	0x0800d4e3
 800d458:	0800d53f 	.word	0x0800d53f
 800d45c:	0800d53f 	.word	0x0800d53f
 800d460:	0800d4eb 	.word	0x0800d4eb
 800d464:	0800d53f 	.word	0x0800d53f
 800d468:	0800d53f 	.word	0x0800d53f
 800d46c:	0800d53f 	.word	0x0800d53f
 800d470:	0800d4fb 	.word	0x0800d4fb
 800d474:	0800d53f 	.word	0x0800d53f
 800d478:	0800d53f 	.word	0x0800d53f
 800d47c:	0800d53f 	.word	0x0800d53f
 800d480:	0800d53f 	.word	0x0800d53f
 800d484:	0800d53f 	.word	0x0800d53f
 800d488:	0800d53f 	.word	0x0800d53f
 800d48c:	0800d53f 	.word	0x0800d53f
 800d490:	0800d50b 	.word	0x0800d50b
 800d494:	0800d53f 	.word	0x0800d53f
 800d498:	0800d53f 	.word	0x0800d53f
 800d49c:	0800d53f 	.word	0x0800d53f
 800d4a0:	0800d53f 	.word	0x0800d53f
 800d4a4:	0800d53f 	.word	0x0800d53f
 800d4a8:	0800d53f 	.word	0x0800d53f
 800d4ac:	0800d53f 	.word	0x0800d53f
 800d4b0:	0800d53f 	.word	0x0800d53f
 800d4b4:	0800d53f 	.word	0x0800d53f
 800d4b8:	0800d53f 	.word	0x0800d53f
 800d4bc:	0800d53f 	.word	0x0800d53f
 800d4c0:	0800d53f 	.word	0x0800d53f
 800d4c4:	0800d53f 	.word	0x0800d53f
 800d4c8:	0800d53f 	.word	0x0800d53f
 800d4cc:	0800d53f 	.word	0x0800d53f
 800d4d0:	0800d531 	.word	0x0800d531
 800d4d4:	2b40      	cmp	r3, #64	; 0x40
 800d4d6:	d02e      	beq.n	800d536 <UART_SetConfig+0x896>
 800d4d8:	e031      	b.n	800d53e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4da:	f7fa f993 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 800d4de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d4e0:	e033      	b.n	800d54a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4e2:	f7fa f9a5 	bl	8007830 <HAL_RCC_GetPCLK2Freq>
 800d4e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d4e8:	e02f      	b.n	800d54a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4ea:	f107 0314 	add.w	r3, r7, #20
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fb fddc 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4f8:	e027      	b.n	800d54a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4fa:	f107 0308 	add.w	r3, r7, #8
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fb ff28 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d508:	e01f      	b.n	800d54a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d50a:	4b58      	ldr	r3, [pc, #352]	; (800d66c <UART_SetConfig+0x9cc>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f003 0320 	and.w	r3, r3, #32
 800d512:	2b00      	cmp	r3, #0
 800d514:	d009      	beq.n	800d52a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d516:	4b55      	ldr	r3, [pc, #340]	; (800d66c <UART_SetConfig+0x9cc>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	08db      	lsrs	r3, r3, #3
 800d51c:	f003 0303 	and.w	r3, r3, #3
 800d520:	4a53      	ldr	r2, [pc, #332]	; (800d670 <UART_SetConfig+0x9d0>)
 800d522:	fa22 f303 	lsr.w	r3, r2, r3
 800d526:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d528:	e00f      	b.n	800d54a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d52a:	4b51      	ldr	r3, [pc, #324]	; (800d670 <UART_SetConfig+0x9d0>)
 800d52c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d52e:	e00c      	b.n	800d54a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d530:	4b4c      	ldr	r3, [pc, #304]	; (800d664 <UART_SetConfig+0x9c4>)
 800d532:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d534:	e009      	b.n	800d54a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d53a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d53c:	e005      	b.n	800d54a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d53e:	2300      	movs	r3, #0
 800d540:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d548:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f000 80ea 	beq.w	800d726 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d556:	4a44      	ldr	r2, [pc, #272]	; (800d668 <UART_SetConfig+0x9c8>)
 800d558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d55c:	461a      	mov	r2, r3
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	fbb3 f3f2 	udiv	r3, r3, r2
 800d564:	005a      	lsls	r2, r3, #1
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	085b      	lsrs	r3, r3, #1
 800d56c:	441a      	add	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	fbb2 f3f3 	udiv	r3, r2, r3
 800d576:	b29b      	uxth	r3, r3
 800d578:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	2b0f      	cmp	r3, #15
 800d57e:	d916      	bls.n	800d5ae <UART_SetConfig+0x90e>
 800d580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d586:	d212      	bcs.n	800d5ae <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	f023 030f 	bic.w	r3, r3, #15
 800d590:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	085b      	lsrs	r3, r3, #1
 800d596:	b29b      	uxth	r3, r3
 800d598:	f003 0307 	and.w	r3, r3, #7
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d5aa:	60da      	str	r2, [r3, #12]
 800d5ac:	e0bb      	b.n	800d726 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d5b4:	e0b7      	b.n	800d726 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d5b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d5ba:	2b20      	cmp	r3, #32
 800d5bc:	dc4a      	bgt.n	800d654 <UART_SetConfig+0x9b4>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f2c0 8086 	blt.w	800d6d0 <UART_SetConfig+0xa30>
 800d5c4:	2b20      	cmp	r3, #32
 800d5c6:	f200 8083 	bhi.w	800d6d0 <UART_SetConfig+0xa30>
 800d5ca:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <UART_SetConfig+0x930>)
 800d5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d0:	0800d65b 	.word	0x0800d65b
 800d5d4:	0800d675 	.word	0x0800d675
 800d5d8:	0800d6d1 	.word	0x0800d6d1
 800d5dc:	0800d6d1 	.word	0x0800d6d1
 800d5e0:	0800d67d 	.word	0x0800d67d
 800d5e4:	0800d6d1 	.word	0x0800d6d1
 800d5e8:	0800d6d1 	.word	0x0800d6d1
 800d5ec:	0800d6d1 	.word	0x0800d6d1
 800d5f0:	0800d68d 	.word	0x0800d68d
 800d5f4:	0800d6d1 	.word	0x0800d6d1
 800d5f8:	0800d6d1 	.word	0x0800d6d1
 800d5fc:	0800d6d1 	.word	0x0800d6d1
 800d600:	0800d6d1 	.word	0x0800d6d1
 800d604:	0800d6d1 	.word	0x0800d6d1
 800d608:	0800d6d1 	.word	0x0800d6d1
 800d60c:	0800d6d1 	.word	0x0800d6d1
 800d610:	0800d69d 	.word	0x0800d69d
 800d614:	0800d6d1 	.word	0x0800d6d1
 800d618:	0800d6d1 	.word	0x0800d6d1
 800d61c:	0800d6d1 	.word	0x0800d6d1
 800d620:	0800d6d1 	.word	0x0800d6d1
 800d624:	0800d6d1 	.word	0x0800d6d1
 800d628:	0800d6d1 	.word	0x0800d6d1
 800d62c:	0800d6d1 	.word	0x0800d6d1
 800d630:	0800d6d1 	.word	0x0800d6d1
 800d634:	0800d6d1 	.word	0x0800d6d1
 800d638:	0800d6d1 	.word	0x0800d6d1
 800d63c:	0800d6d1 	.word	0x0800d6d1
 800d640:	0800d6d1 	.word	0x0800d6d1
 800d644:	0800d6d1 	.word	0x0800d6d1
 800d648:	0800d6d1 	.word	0x0800d6d1
 800d64c:	0800d6d1 	.word	0x0800d6d1
 800d650:	0800d6c3 	.word	0x0800d6c3
 800d654:	2b40      	cmp	r3, #64	; 0x40
 800d656:	d037      	beq.n	800d6c8 <UART_SetConfig+0xa28>
 800d658:	e03a      	b.n	800d6d0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d65a:	f7fa f8d3 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 800d65e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d660:	e03c      	b.n	800d6dc <UART_SetConfig+0xa3c>
 800d662:	bf00      	nop
 800d664:	003d0900 	.word	0x003d0900
 800d668:	08013168 	.word	0x08013168
 800d66c:	58024400 	.word	0x58024400
 800d670:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d674:	f7fa f8dc 	bl	8007830 <HAL_RCC_GetPCLK2Freq>
 800d678:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d67a:	e02f      	b.n	800d6dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d67c:	f107 0314 	add.w	r3, r7, #20
 800d680:	4618      	mov	r0, r3
 800d682:	f7fb fd13 	bl	80090ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d686:	69bb      	ldr	r3, [r7, #24]
 800d688:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d68a:	e027      	b.n	800d6dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d68c:	f107 0308 	add.w	r3, r7, #8
 800d690:	4618      	mov	r0, r3
 800d692:	f7fb fe5f 	bl	8009354 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d69a:	e01f      	b.n	800d6dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d69c:	4b2c      	ldr	r3, [pc, #176]	; (800d750 <UART_SetConfig+0xab0>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 0320 	and.w	r3, r3, #32
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d009      	beq.n	800d6bc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d6a8:	4b29      	ldr	r3, [pc, #164]	; (800d750 <UART_SetConfig+0xab0>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	08db      	lsrs	r3, r3, #3
 800d6ae:	f003 0303 	and.w	r3, r3, #3
 800d6b2:	4a28      	ldr	r2, [pc, #160]	; (800d754 <UART_SetConfig+0xab4>)
 800d6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d6ba:	e00f      	b.n	800d6dc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d6bc:	4b25      	ldr	r3, [pc, #148]	; (800d754 <UART_SetConfig+0xab4>)
 800d6be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d6c0:	e00c      	b.n	800d6dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d6c2:	4b25      	ldr	r3, [pc, #148]	; (800d758 <UART_SetConfig+0xab8>)
 800d6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d6c6:	e009      	b.n	800d6dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d6ce:	e005      	b.n	800d6dc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d6da:	bf00      	nop
    }

    if (pclk != 0U)
 800d6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d021      	beq.n	800d726 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e6:	4a1d      	ldr	r2, [pc, #116]	; (800d75c <UART_SetConfig+0xabc>)
 800d6e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	085b      	lsrs	r3, r3, #1
 800d6fa:	441a      	add	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	fbb2 f3f3 	udiv	r3, r2, r3
 800d704:	b29b      	uxth	r3, r3
 800d706:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	2b0f      	cmp	r3, #15
 800d70c:	d908      	bls.n	800d720 <UART_SetConfig+0xa80>
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d714:	d204      	bcs.n	800d720 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d71c:	60da      	str	r2, [r3, #12]
 800d71e:	e002      	b.n	800d726 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2201      	movs	r2, #1
 800d72a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2201      	movs	r2, #1
 800d732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d742:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d746:	4618      	mov	r0, r3
 800d748:	3738      	adds	r7, #56	; 0x38
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bdb0      	pop	{r4, r5, r7, pc}
 800d74e:	bf00      	nop
 800d750:	58024400 	.word	0x58024400
 800d754:	03d09000 	.word	0x03d09000
 800d758:	003d0900 	.word	0x003d0900
 800d75c:	08013168 	.word	0x08013168

0800d760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76c:	f003 0301 	and.w	r3, r3, #1
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00a      	beq.n	800d78a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	430a      	orrs	r2, r1
 800d788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d78e:	f003 0302 	and.w	r3, r3, #2
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00a      	beq.n	800d7ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b0:	f003 0304 	and.w	r3, r3, #4
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00a      	beq.n	800d7ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d2:	f003 0308 	and.w	r3, r3, #8
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00a      	beq.n	800d7f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	430a      	orrs	r2, r1
 800d7ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f4:	f003 0310 	and.w	r3, r3, #16
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00a      	beq.n	800d812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	430a      	orrs	r2, r1
 800d810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d816:	f003 0320 	and.w	r3, r3, #32
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00a      	beq.n	800d834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	430a      	orrs	r2, r1
 800d832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d01a      	beq.n	800d876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	430a      	orrs	r2, r1
 800d854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d85a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d85e:	d10a      	bne.n	800d876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	430a      	orrs	r2, r1
 800d874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00a      	beq.n	800d898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	430a      	orrs	r2, r1
 800d896:	605a      	str	r2, [r3, #4]
  }
}
 800d898:	bf00      	nop
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d8b4:	f7f4 f852 	bl	800195c <HAL_GetTick>
 800d8b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f003 0308 	and.w	r3, r3, #8
 800d8c4:	2b08      	cmp	r3, #8
 800d8c6:	d10e      	bne.n	800d8e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 f82f 	bl	800d93a <UART_WaitOnFlagUntilTimeout>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d001      	beq.n	800d8e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	e025      	b.n	800d932 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f003 0304 	and.w	r3, r3, #4
 800d8f0:	2b04      	cmp	r3, #4
 800d8f2:	d10e      	bne.n	800d912 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f819 	bl	800d93a <UART_WaitOnFlagUntilTimeout>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d001      	beq.n	800d912 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d90e:	2303      	movs	r3, #3
 800d910:	e00f      	b.n	800d932 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2220      	movs	r2, #32
 800d916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2220      	movs	r2, #32
 800d91e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b084      	sub	sp, #16
 800d93e:	af00      	add	r7, sp, #0
 800d940:	60f8      	str	r0, [r7, #12]
 800d942:	60b9      	str	r1, [r7, #8]
 800d944:	603b      	str	r3, [r7, #0]
 800d946:	4613      	mov	r3, r2
 800d948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d94a:	e062      	b.n	800da12 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d952:	d05e      	beq.n	800da12 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d954:	f7f4 f802 	bl	800195c <HAL_GetTick>
 800d958:	4602      	mov	r2, r0
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	1ad3      	subs	r3, r2, r3
 800d95e:	69ba      	ldr	r2, [r7, #24]
 800d960:	429a      	cmp	r2, r3
 800d962:	d302      	bcc.n	800d96a <UART_WaitOnFlagUntilTimeout+0x30>
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d11d      	bne.n	800d9a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d978:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	689a      	ldr	r2, [r3, #8]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f022 0201 	bic.w	r2, r2, #1
 800d988:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2220      	movs	r2, #32
 800d98e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2220      	movs	r2, #32
 800d996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d9a2:	2303      	movs	r3, #3
 800d9a4:	e045      	b.n	800da32 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f003 0304 	and.w	r3, r3, #4
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d02e      	beq.n	800da12 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	69db      	ldr	r3, [r3, #28]
 800d9ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9c2:	d126      	bne.n	800da12 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d9cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d9dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	689a      	ldr	r2, [r3, #8]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f022 0201 	bic.w	r2, r2, #1
 800d9ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2220      	movs	r2, #32
 800d9f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2220      	movs	r2, #32
 800d9fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2220      	movs	r2, #32
 800da02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2200      	movs	r2, #0
 800da0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800da0e:	2303      	movs	r3, #3
 800da10:	e00f      	b.n	800da32 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69da      	ldr	r2, [r3, #28]
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	4013      	ands	r3, r2
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	429a      	cmp	r2, r3
 800da20:	bf0c      	ite	eq
 800da22:	2301      	moveq	r3, #1
 800da24:	2300      	movne	r3, #0
 800da26:	b2db      	uxtb	r3, r3
 800da28:	461a      	mov	r2, r3
 800da2a:	79fb      	ldrb	r3, [r7, #7]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d08d      	beq.n	800d94c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
	...

0800da3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800da52:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6899      	ldr	r1, [r3, #8]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <UART_EndRxTransfer+0x60>)
 800da60:	400b      	ands	r3, r1
 800da62:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d107      	bne.n	800da7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f022 0210 	bic.w	r2, r2, #16
 800da7a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2220      	movs	r2, #32
 800da80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr
 800da9c:	effffffe 	.word	0xeffffffe

0800daa0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	f7ff f8d8 	bl	800cc74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dac4:	bf00      	nop
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dae2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2220      	movs	r2, #32
 800dae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7ff f8b4 	bl	800cc60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daf8:	bf00      	nop
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db08:	bf00      	nop
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db1c:	bf00      	nop
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db30:	bf00      	nop
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d101      	bne.n	800db52 <HAL_UARTEx_DisableFifoMode+0x16>
 800db4e:	2302      	movs	r3, #2
 800db50:	e027      	b.n	800dba2 <HAL_UARTEx_DisableFifoMode+0x66>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2224      	movs	r2, #36	; 0x24
 800db5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f022 0201 	bic.w	r2, r2, #1
 800db78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2220      	movs	r2, #32
 800db94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr

0800dbae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
 800dbb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d101      	bne.n	800dbc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbc2:	2302      	movs	r3, #2
 800dbc4:	e02d      	b.n	800dc22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2224      	movs	r2, #36	; 0x24
 800dbd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f022 0201 	bic.w	r2, r2, #1
 800dbec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	683a      	ldr	r2, [r7, #0]
 800dbfe:	430a      	orrs	r2, r1
 800dc00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f850 	bl	800dca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2220      	movs	r2, #32
 800dc14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b084      	sub	sp, #16
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d101      	bne.n	800dc42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc3e:	2302      	movs	r3, #2
 800dc40:	e02d      	b.n	800dc9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2201      	movs	r2, #1
 800dc46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2224      	movs	r2, #36	; 0x24
 800dc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f022 0201 	bic.w	r2, r2, #1
 800dc68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	683a      	ldr	r2, [r7, #0]
 800dc7a:	430a      	orrs	r2, r1
 800dc7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 f812 	bl	800dca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2220      	movs	r2, #32
 800dc90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
	...

0800dca8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d108      	bne.n	800dcca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcc8:	e031      	b.n	800dd2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcca:	2310      	movs	r3, #16
 800dccc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcce:	2310      	movs	r3, #16
 800dcd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	0e5b      	lsrs	r3, r3, #25
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f003 0307 	and.w	r3, r3, #7
 800dce0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	0f5b      	lsrs	r3, r3, #29
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	f003 0307 	and.w	r3, r3, #7
 800dcf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	7b3a      	ldrb	r2, [r7, #12]
 800dcf6:	4911      	ldr	r1, [pc, #68]	; (800dd3c <UARTEx_SetNbDataToProcess+0x94>)
 800dcf8:	5c8a      	ldrb	r2, [r1, r2]
 800dcfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dcfe:	7b3a      	ldrb	r2, [r7, #12]
 800dd00:	490f      	ldr	r1, [pc, #60]	; (800dd40 <UARTEx_SetNbDataToProcess+0x98>)
 800dd02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd04:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd10:	7bfb      	ldrb	r3, [r7, #15]
 800dd12:	7b7a      	ldrb	r2, [r7, #13]
 800dd14:	4909      	ldr	r1, [pc, #36]	; (800dd3c <UARTEx_SetNbDataToProcess+0x94>)
 800dd16:	5c8a      	ldrb	r2, [r1, r2]
 800dd18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd1c:	7b7a      	ldrb	r2, [r7, #13]
 800dd1e:	4908      	ldr	r1, [pc, #32]	; (800dd40 <UARTEx_SetNbDataToProcess+0x98>)
 800dd20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd22:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd2e:	bf00      	nop
 800dd30:	3714      	adds	r7, #20
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	08013180 	.word	0x08013180
 800dd40:	08013188 	.word	0x08013188

0800dd44 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dd44:	b084      	sub	sp, #16
 800dd46:	b480      	push	{r7}
 800dd48:	b085      	sub	sp, #20
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	f107 001c 	add.w	r0, r7, #28
 800dd52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dd56:	2300      	movs	r3, #0
 800dd58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dd5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800dd5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800dd5e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800dd62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800dd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800dd66:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800dd6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	685a      	ldr	r2, [r3, #4]
 800dd76:	4b07      	ldr	r3, [pc, #28]	; (800dd94 <SDMMC_Init+0x50>)
 800dd78:	4013      	ands	r3, r2
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	431a      	orrs	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3714      	adds	r7, #20
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	b004      	add	sp, #16
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	ffc02c00 	.word	0xffc02c00

0800dd98 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b083      	sub	sp, #12
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f043 0203 	orr.w	r2, r3, #3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800dde8:	2300      	movs	r3, #0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	370c      	adds	r7, #12
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr

0800ddf6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	b083      	sub	sp, #12
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f003 0303 	and.w	r3, r3, #3
}
 800de06:	4618      	mov	r0, r3
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
	...

0800de14 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800de32:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800de38:	431a      	orrs	r2, r3
                       Command->CPSM);
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800de3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	4313      	orrs	r3, r2
 800de44:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68da      	ldr	r2, [r3, #12]
 800de4a:	4b06      	ldr	r3, [pc, #24]	; (800de64 <SDMMC_SendCommand+0x50>)
 800de4c:	4013      	ands	r3, r2
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	431a      	orrs	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3714      	adds	r7, #20
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	fffee0c0 	.word	0xfffee0c0

0800de68 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	691b      	ldr	r3, [r3, #16]
 800de74:	b2db      	uxtb	r3, r3
}
 800de76:	4618      	mov	r0, r3
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800de82:	b480      	push	{r7}
 800de84:	b085      	sub	sp, #20
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
 800de8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	3314      	adds	r3, #20
 800de90:	461a      	mov	r2, r3
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	4413      	add	r3, r2
 800de96:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3714      	adds	r7, #20
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	685a      	ldr	r2, [r3, #4]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dece:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ded4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800deda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	4313      	orrs	r3, r2
 800dee0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	431a      	orrs	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800def2:	2300      	movs	r3, #0

}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b088      	sub	sp, #32
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800df0e:	2310      	movs	r3, #16
 800df10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df18:	2300      	movs	r3, #0
 800df1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df22:	f107 0308 	add.w	r3, r7, #8
 800df26:	4619      	mov	r1, r3
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f7ff ff73 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800df2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800df32:	2110      	movs	r1, #16
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 fa5f 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800df3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df3c:	69fb      	ldr	r3, [r7, #28]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3720      	adds	r7, #32
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b088      	sub	sp, #32
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800df54:	2311      	movs	r3, #17
 800df56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df5e:	2300      	movs	r3, #0
 800df60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df68:	f107 0308 	add.w	r3, r7, #8
 800df6c:	4619      	mov	r1, r3
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7ff ff50 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800df74:	f241 3288 	movw	r2, #5000	; 0x1388
 800df78:	2111      	movs	r1, #17
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 fa3c 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800df80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df82:	69fb      	ldr	r3, [r7, #28]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3720      	adds	r7, #32
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b088      	sub	sp, #32
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800df9a:	2312      	movs	r3, #18
 800df9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfae:	f107 0308 	add.w	r3, r7, #8
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7ff ff2d 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dfba:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfbe:	2112      	movs	r1, #18
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fa19 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800dfc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfc8:	69fb      	ldr	r3, [r7, #28]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3720      	adds	r7, #32
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b088      	sub	sp, #32
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dfe0:	2318      	movs	r3, #24
 800dfe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfea:	2300      	movs	r3, #0
 800dfec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dff4:	f107 0308 	add.w	r3, r7, #8
 800dff8:	4619      	mov	r1, r3
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f7ff ff0a 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e000:	f241 3288 	movw	r2, #5000	; 0x1388
 800e004:	2118      	movs	r1, #24
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 f9f6 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800e00c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e00e:	69fb      	ldr	r3, [r7, #28]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3720      	adds	r7, #32
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b088      	sub	sp, #32
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e026:	2319      	movs	r3, #25
 800e028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e02a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e02e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e030:	2300      	movs	r3, #0
 800e032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e038:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e03a:	f107 0308 	add.w	r3, r7, #8
 800e03e:	4619      	mov	r1, r3
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7ff fee7 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e046:	f241 3288 	movw	r2, #5000	; 0x1388
 800e04a:	2119      	movs	r1, #25
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 f9d3 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800e052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e054:	69fb      	ldr	r3, [r7, #28]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3720      	adds	r7, #32
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
	...

0800e060 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b088      	sub	sp, #32
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e068:	2300      	movs	r3, #0
 800e06a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e06c:	230c      	movs	r3, #12
 800e06e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e070:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e076:	2300      	movs	r3, #0
 800e078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e07a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e07e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e098:	f107 0308 	add.w	r3, r7, #8
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff feb8 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e0a4:	4a0b      	ldr	r2, [pc, #44]	; (800e0d4 <SDMMC_CmdStopTransfer+0x74>)
 800e0a6:	210c      	movs	r1, #12
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 f9a5 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800e0ae:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0c2:	d101      	bne.n	800e0c8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e0c8:	69fb      	ldr	r3, [r7, #28]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3720      	adds	r7, #32
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	05f5e100 	.word	0x05f5e100

0800e0d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b088      	sub	sp, #32
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e0e6:	2307      	movs	r3, #7
 800e0e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0fa:	f107 0308 	add.w	r3, r7, #8
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7ff fe87 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e106:	f241 3288 	movw	r2, #5000	; 0x1388
 800e10a:	2107      	movs	r1, #7
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 f973 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800e112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e114:	69fb      	ldr	r3, [r7, #28]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3720      	adds	r7, #32
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b088      	sub	sp, #32
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e126:	2300      	movs	r3, #0
 800e128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e12a:	2300      	movs	r3, #0
 800e12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e12e:	2300      	movs	r3, #0
 800e130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e132:	2300      	movs	r3, #0
 800e134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e13a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e13c:	f107 0308 	add.w	r3, r7, #8
 800e140:	4619      	mov	r1, r3
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7ff fe66 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 fb97 	bl	800e87c <SDMMC_GetCmdError>
 800e14e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e150:	69fb      	ldr	r3, [r7, #28]
}
 800e152:	4618      	mov	r0, r3
 800e154:	3720      	adds	r7, #32
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b088      	sub	sp, #32
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e162:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e168:	2308      	movs	r3, #8
 800e16a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e16c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e172:	2300      	movs	r3, #0
 800e174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e17a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e17c:	f107 0308 	add.w	r3, r7, #8
 800e180:	4619      	mov	r1, r3
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff fe46 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 fb29 	bl	800e7e0 <SDMMC_GetCmdResp7>
 800e18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e190:	69fb      	ldr	r3, [r7, #28]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3720      	adds	r7, #32
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b088      	sub	sp, #32
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e1a8:	2337      	movs	r3, #55	; 0x37
 800e1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1bc:	f107 0308 	add.w	r3, r7, #8
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f7ff fe26 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e1c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1cc:	2137      	movs	r1, #55	; 0x37
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 f912 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800e1d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1d6:	69fb      	ldr	r3, [r7, #28]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3720      	adds	r7, #32
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b088      	sub	sp, #32
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e1ee:	2329      	movs	r3, #41	; 0x29
 800e1f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e202:	f107 0308 	add.w	r3, r7, #8
 800e206:	4619      	mov	r1, r3
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7ff fe03 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 fa2e 	bl	800e670 <SDMMC_GetCmdResp3>
 800e214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e216:	69fb      	ldr	r3, [r7, #28]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3720      	adds	r7, #32
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b088      	sub	sp, #32
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e22e:	2306      	movs	r3, #6
 800e230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e232:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e238:	2300      	movs	r3, #0
 800e23a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e23c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e240:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e242:	f107 0308 	add.w	r3, r7, #8
 800e246:	4619      	mov	r1, r3
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f7ff fde3 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e24e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e252:	2106      	movs	r1, #6
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 f8cf 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800e25a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e25c:	69fb      	ldr	r3, [r7, #28]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3720      	adds	r7, #32
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b088      	sub	sp, #32
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e26e:	2300      	movs	r3, #0
 800e270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e272:	2333      	movs	r3, #51	; 0x33
 800e274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e27a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e27c:	2300      	movs	r3, #0
 800e27e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e284:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e286:	f107 0308 	add.w	r3, r7, #8
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7ff fdc1 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e292:	f241 3288 	movw	r2, #5000	; 0x1388
 800e296:	2133      	movs	r1, #51	; 0x33
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 f8ad 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800e29e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2a0:	69fb      	ldr	r3, [r7, #28]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3720      	adds	r7, #32
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b088      	sub	sp, #32
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e2b6:	2302      	movs	r3, #2
 800e2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e2ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e2be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2ca:	f107 0308 	add.w	r3, r7, #8
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7ff fd9f 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f980 	bl	800e5dc <SDMMC_GetCmdResp2>
 800e2dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2de:	69fb      	ldr	r3, [r7, #28]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3720      	adds	r7, #32
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b088      	sub	sp, #32
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e2f6:	2309      	movs	r3, #9
 800e2f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e2fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e2fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e300:	2300      	movs	r3, #0
 800e302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e30a:	f107 0308 	add.w	r3, r7, #8
 800e30e:	4619      	mov	r1, r3
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff fd7f 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 f960 	bl	800e5dc <SDMMC_GetCmdResp2>
 800e31c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e31e:	69fb      	ldr	r3, [r7, #28]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3720      	adds	r7, #32
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e332:	2300      	movs	r3, #0
 800e334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e336:	2303      	movs	r3, #3
 800e338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e33a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e33e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e340:	2300      	movs	r3, #0
 800e342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e34a:	f107 0308 	add.w	r3, r7, #8
 800e34e:	4619      	mov	r1, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7ff fd5f 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	2103      	movs	r1, #3
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 f9c8 	bl	800e6f0 <SDMMC_GetCmdResp6>
 800e360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e362:	69fb      	ldr	r3, [r7, #28]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3720      	adds	r7, #32
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e37a:	230d      	movs	r3, #13
 800e37c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e37e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e384:	2300      	movs	r3, #0
 800e386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e38c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e38e:	f107 0308 	add.w	r3, r7, #8
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7ff fd3d 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e39e:	210d      	movs	r1, #13
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f829 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800e3a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3a8:	69fb      	ldr	r3, [r7, #28]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3720      	adds	r7, #32
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b088      	sub	sp, #32
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e3be:	230d      	movs	r3, #13
 800e3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3d2:	f107 0308 	add.w	r3, r7, #8
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7ff fd1b 	bl	800de14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e3de:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3e2:	210d      	movs	r1, #13
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 f807 	bl	800e3f8 <SDMMC_GetCmdResp1>
 800e3ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ec:	69fb      	ldr	r3, [r7, #28]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3720      	adds	r7, #32
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
	...

0800e3f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b088      	sub	sp, #32
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	460b      	mov	r3, r1
 800e402:	607a      	str	r2, [r7, #4]
 800e404:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e406:	4b70      	ldr	r3, [pc, #448]	; (800e5c8 <SDMMC_GetCmdResp1+0x1d0>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a70      	ldr	r2, [pc, #448]	; (800e5cc <SDMMC_GetCmdResp1+0x1d4>)
 800e40c:	fba2 2303 	umull	r2, r3, r2, r3
 800e410:	0a5a      	lsrs	r2, r3, #9
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	fb02 f303 	mul.w	r3, r2, r3
 800e418:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	1e5a      	subs	r2, r3, #1
 800e41e:	61fa      	str	r2, [r7, #28]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d102      	bne.n	800e42a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e424:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e428:	e0c9      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e42e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e430:	69ba      	ldr	r2, [r7, #24]
 800e432:	4b67      	ldr	r3, [pc, #412]	; (800e5d0 <SDMMC_GetCmdResp1+0x1d8>)
 800e434:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e436:	2b00      	cmp	r3, #0
 800e438:	d0ef      	beq.n	800e41a <SDMMC_GetCmdResp1+0x22>
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1ea      	bne.n	800e41a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e448:	f003 0304 	and.w	r3, r3, #4
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d004      	beq.n	800e45a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2204      	movs	r2, #4
 800e454:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e456:	2304      	movs	r3, #4
 800e458:	e0b1      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e45e:	f003 0301 	and.w	r3, r3, #1
 800e462:	2b00      	cmp	r3, #0
 800e464:	d004      	beq.n	800e470 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2201      	movs	r2, #1
 800e46a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e46c:	2301      	movs	r3, #1
 800e46e:	e0a6      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	4a58      	ldr	r2, [pc, #352]	; (800e5d4 <SDMMC_GetCmdResp1+0x1dc>)
 800e474:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f7ff fcf6 	bl	800de68 <SDMMC_GetCommandResponse>
 800e47c:	4603      	mov	r3, r0
 800e47e:	461a      	mov	r2, r3
 800e480:	7afb      	ldrb	r3, [r7, #11]
 800e482:	4293      	cmp	r3, r2
 800e484:	d001      	beq.n	800e48a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e486:	2301      	movs	r3, #1
 800e488:	e099      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e48a:	2100      	movs	r1, #0
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f7ff fcf8 	bl	800de82 <SDMMC_GetResponse>
 800e492:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e494:	697a      	ldr	r2, [r7, #20]
 800e496:	4b50      	ldr	r3, [pc, #320]	; (800e5d8 <SDMMC_GetCmdResp1+0x1e0>)
 800e498:	4013      	ands	r3, r2
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d101      	bne.n	800e4a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	e08d      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	da02      	bge.n	800e4ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e4a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e4ac:	e087      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e4b8:	2340      	movs	r3, #64	; 0x40
 800e4ba:	e080      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e4c6:	2380      	movs	r3, #128	; 0x80
 800e4c8:	e079      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d002      	beq.n	800e4da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e4d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4d8:	e071      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d002      	beq.n	800e4ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e4e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4e8:	e069      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d002      	beq.n	800e4fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e4f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4f8:	e061      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e500:	2b00      	cmp	r3, #0
 800e502:	d002      	beq.n	800e50a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e508:	e059      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e518:	e051      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e528:	e049      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e530:	2b00      	cmp	r3, #0
 800e532:	d002      	beq.n	800e53a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e534:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e538:	e041      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e540:	2b00      	cmp	r3, #0
 800e542:	d002      	beq.n	800e54a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e548:	e039      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e558:	e031      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e564:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e568:	e029      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e570:	2b00      	cmp	r3, #0
 800e572:	d002      	beq.n	800e57a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e574:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e578:	e021      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e580:	2b00      	cmp	r3, #0
 800e582:	d002      	beq.n	800e58a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e584:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e588:	e019      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e594:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e598:	e011      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e5a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e5a8:	e009      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	f003 0308 	and.w	r3, r3, #8
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e5b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e5b8:	e001      	b.n	800e5be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e5ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3720      	adds	r7, #32
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	24000000 	.word	0x24000000
 800e5cc:	10624dd3 	.word	0x10624dd3
 800e5d0:	00200045 	.word	0x00200045
 800e5d4:	002000c5 	.word	0x002000c5
 800e5d8:	fdffe008 	.word	0xfdffe008

0800e5dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e5e4:	4b1f      	ldr	r3, [pc, #124]	; (800e664 <SDMMC_GetCmdResp2+0x88>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a1f      	ldr	r2, [pc, #124]	; (800e668 <SDMMC_GetCmdResp2+0x8c>)
 800e5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ee:	0a5b      	lsrs	r3, r3, #9
 800e5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5f4:	fb02 f303 	mul.w	r3, r2, r3
 800e5f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	1e5a      	subs	r2, r3, #1
 800e5fe:	60fa      	str	r2, [r7, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d102      	bne.n	800e60a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e608:	e026      	b.n	800e658 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e60e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e616:	2b00      	cmp	r3, #0
 800e618:	d0ef      	beq.n	800e5fa <SDMMC_GetCmdResp2+0x1e>
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1ea      	bne.n	800e5fa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e628:	f003 0304 	and.w	r3, r3, #4
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d004      	beq.n	800e63a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2204      	movs	r2, #4
 800e634:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e636:	2304      	movs	r3, #4
 800e638:	e00e      	b.n	800e658 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e63e:	f003 0301 	and.w	r3, r3, #1
 800e642:	2b00      	cmp	r3, #0
 800e644:	d004      	beq.n	800e650 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e64c:	2301      	movs	r3, #1
 800e64e:	e003      	b.n	800e658 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a06      	ldr	r2, [pc, #24]	; (800e66c <SDMMC_GetCmdResp2+0x90>)
 800e654:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3714      	adds	r7, #20
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	24000000 	.word	0x24000000
 800e668:	10624dd3 	.word	0x10624dd3
 800e66c:	002000c5 	.word	0x002000c5

0800e670 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e678:	4b1a      	ldr	r3, [pc, #104]	; (800e6e4 <SDMMC_GetCmdResp3+0x74>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a1a      	ldr	r2, [pc, #104]	; (800e6e8 <SDMMC_GetCmdResp3+0x78>)
 800e67e:	fba2 2303 	umull	r2, r3, r2, r3
 800e682:	0a5b      	lsrs	r3, r3, #9
 800e684:	f241 3288 	movw	r2, #5000	; 0x1388
 800e688:	fb02 f303 	mul.w	r3, r2, r3
 800e68c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	1e5a      	subs	r2, r3, #1
 800e692:	60fa      	str	r2, [r7, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d102      	bne.n	800e69e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e698:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e69c:	e01b      	b.n	800e6d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d0ef      	beq.n	800e68e <SDMMC_GetCmdResp3+0x1e>
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d1ea      	bne.n	800e68e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6bc:	f003 0304 	and.w	r3, r3, #4
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d004      	beq.n	800e6ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2204      	movs	r2, #4
 800e6c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6ca:	2304      	movs	r3, #4
 800e6cc:	e003      	b.n	800e6d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4a06      	ldr	r2, [pc, #24]	; (800e6ec <SDMMC_GetCmdResp3+0x7c>)
 800e6d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	24000000 	.word	0x24000000
 800e6e8:	10624dd3 	.word	0x10624dd3
 800e6ec:	002000c5 	.word	0x002000c5

0800e6f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b088      	sub	sp, #32
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	607a      	str	r2, [r7, #4]
 800e6fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e6fe:	4b35      	ldr	r3, [pc, #212]	; (800e7d4 <SDMMC_GetCmdResp6+0xe4>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a35      	ldr	r2, [pc, #212]	; (800e7d8 <SDMMC_GetCmdResp6+0xe8>)
 800e704:	fba2 2303 	umull	r2, r3, r2, r3
 800e708:	0a5b      	lsrs	r3, r3, #9
 800e70a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e70e:	fb02 f303 	mul.w	r3, r2, r3
 800e712:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	1e5a      	subs	r2, r3, #1
 800e718:	61fa      	str	r2, [r7, #28]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d102      	bne.n	800e724 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e71e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e722:	e052      	b.n	800e7ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e728:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e730:	2b00      	cmp	r3, #0
 800e732:	d0ef      	beq.n	800e714 <SDMMC_GetCmdResp6+0x24>
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1ea      	bne.n	800e714 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e742:	f003 0304 	and.w	r3, r3, #4
 800e746:	2b00      	cmp	r3, #0
 800e748:	d004      	beq.n	800e754 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2204      	movs	r2, #4
 800e74e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e750:	2304      	movs	r3, #4
 800e752:	e03a      	b.n	800e7ca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e758:	f003 0301 	and.w	r3, r3, #1
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d004      	beq.n	800e76a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2201      	movs	r2, #1
 800e764:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e766:	2301      	movs	r3, #1
 800e768:	e02f      	b.n	800e7ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7ff fb7c 	bl	800de68 <SDMMC_GetCommandResponse>
 800e770:	4603      	mov	r3, r0
 800e772:	461a      	mov	r2, r3
 800e774:	7afb      	ldrb	r3, [r7, #11]
 800e776:	4293      	cmp	r3, r2
 800e778:	d001      	beq.n	800e77e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e77a:	2301      	movs	r3, #1
 800e77c:	e025      	b.n	800e7ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	4a16      	ldr	r2, [pc, #88]	; (800e7dc <SDMMC_GetCmdResp6+0xec>)
 800e782:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e784:	2100      	movs	r1, #0
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f7ff fb7b 	bl	800de82 <SDMMC_GetResponse>
 800e78c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e794:	2b00      	cmp	r3, #0
 800e796:	d106      	bne.n	800e7a6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	0c1b      	lsrs	r3, r3, #16
 800e79c:	b29a      	uxth	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e011      	b.n	800e7ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e7b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7b4:	e009      	b.n	800e7ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e7c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7c4:	e001      	b.n	800e7ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e7c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3720      	adds	r7, #32
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	24000000 	.word	0x24000000
 800e7d8:	10624dd3 	.word	0x10624dd3
 800e7dc:	002000c5 	.word	0x002000c5

0800e7e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e7e8:	4b22      	ldr	r3, [pc, #136]	; (800e874 <SDMMC_GetCmdResp7+0x94>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a22      	ldr	r2, [pc, #136]	; (800e878 <SDMMC_GetCmdResp7+0x98>)
 800e7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e7f2:	0a5b      	lsrs	r3, r3, #9
 800e7f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7f8:	fb02 f303 	mul.w	r3, r2, r3
 800e7fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	1e5a      	subs	r2, r3, #1
 800e802:	60fa      	str	r2, [r7, #12]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d102      	bne.n	800e80e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e80c:	e02c      	b.n	800e868 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e812:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d0ef      	beq.n	800e7fe <SDMMC_GetCmdResp7+0x1e>
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1ea      	bne.n	800e7fe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e82c:	f003 0304 	and.w	r3, r3, #4
 800e830:	2b00      	cmp	r3, #0
 800e832:	d004      	beq.n	800e83e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2204      	movs	r2, #4
 800e838:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e83a:	2304      	movs	r3, #4
 800e83c:	e014      	b.n	800e868 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e842:	f003 0301 	and.w	r3, r3, #1
 800e846:	2b00      	cmp	r3, #0
 800e848:	d004      	beq.n	800e854 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2201      	movs	r2, #1
 800e84e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e850:	2301      	movs	r3, #1
 800e852:	e009      	b.n	800e868 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2240      	movs	r2, #64	; 0x40
 800e864:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e866:	2300      	movs	r3, #0

}
 800e868:	4618      	mov	r0, r3
 800e86a:	3714      	adds	r7, #20
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr
 800e874:	24000000 	.word	0x24000000
 800e878:	10624dd3 	.word	0x10624dd3

0800e87c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e884:	4b11      	ldr	r3, [pc, #68]	; (800e8cc <SDMMC_GetCmdError+0x50>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a11      	ldr	r2, [pc, #68]	; (800e8d0 <SDMMC_GetCmdError+0x54>)
 800e88a:	fba2 2303 	umull	r2, r3, r2, r3
 800e88e:	0a5b      	lsrs	r3, r3, #9
 800e890:	f241 3288 	movw	r2, #5000	; 0x1388
 800e894:	fb02 f303 	mul.w	r3, r2, r3
 800e898:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	1e5a      	subs	r2, r3, #1
 800e89e:	60fa      	str	r2, [r7, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d102      	bne.n	800e8aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8a8:	e009      	b.n	800e8be <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d0f1      	beq.n	800e89a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4a06      	ldr	r2, [pc, #24]	; (800e8d4 <SDMMC_GetCmdError+0x58>)
 800e8ba:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	24000000 	.word	0x24000000
 800e8d0:	10624dd3 	.word	0x10624dd3
 800e8d4:	002000c5 	.word	0x002000c5

0800e8d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e8d8:	b084      	sub	sp, #16
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b084      	sub	sp, #16
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	f107 001c 	add.w	r0, r7, #28
 800e8e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d120      	bne.n	800e932 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	68da      	ldr	r2, [r3, #12]
 800e900:	4b2a      	ldr	r3, [pc, #168]	; (800e9ac <USB_CoreInit+0xd4>)
 800e902:	4013      	ands	r3, r2
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e916:	2b01      	cmp	r3, #1
 800e918:	d105      	bne.n	800e926 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f001 fb14 	bl	800ff54 <USB_CoreReset>
 800e92c:	4603      	mov	r3, r0
 800e92e:	73fb      	strb	r3, [r7, #15]
 800e930:	e01a      	b.n	800e968 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f001 fb08 	bl	800ff54 <USB_CoreReset>
 800e944:	4603      	mov	r3, r0
 800e946:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e952:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	639a      	str	r2, [r3, #56]	; 0x38
 800e95a:	e005      	b.n	800e968 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e960:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d116      	bne.n	800e99c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e972:	b29a      	uxth	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e97c:	4b0c      	ldr	r3, [pc, #48]	; (800e9b0 <USB_CoreInit+0xd8>)
 800e97e:	4313      	orrs	r3, r2
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	f043 0206 	orr.w	r2, r3, #6
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	f043 0220 	orr.w	r2, r3, #32
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e9a8:	b004      	add	sp, #16
 800e9aa:	4770      	bx	lr
 800e9ac:	ffbdffbf 	.word	0xffbdffbf
 800e9b0:	03ee0000 	.word	0x03ee0000

0800e9b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b087      	sub	sp, #28
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e9c2:	79fb      	ldrb	r3, [r7, #7]
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d165      	bne.n	800ea94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	4a41      	ldr	r2, [pc, #260]	; (800ead0 <USB_SetTurnaroundTime+0x11c>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d906      	bls.n	800e9de <USB_SetTurnaroundTime+0x2a>
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	4a40      	ldr	r2, [pc, #256]	; (800ead4 <USB_SetTurnaroundTime+0x120>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d202      	bcs.n	800e9de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e9d8:	230f      	movs	r3, #15
 800e9da:	617b      	str	r3, [r7, #20]
 800e9dc:	e062      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	4a3c      	ldr	r2, [pc, #240]	; (800ead4 <USB_SetTurnaroundTime+0x120>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d306      	bcc.n	800e9f4 <USB_SetTurnaroundTime+0x40>
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	4a3b      	ldr	r2, [pc, #236]	; (800ead8 <USB_SetTurnaroundTime+0x124>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d202      	bcs.n	800e9f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e9ee:	230e      	movs	r3, #14
 800e9f0:	617b      	str	r3, [r7, #20]
 800e9f2:	e057      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	4a38      	ldr	r2, [pc, #224]	; (800ead8 <USB_SetTurnaroundTime+0x124>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d306      	bcc.n	800ea0a <USB_SetTurnaroundTime+0x56>
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	4a37      	ldr	r2, [pc, #220]	; (800eadc <USB_SetTurnaroundTime+0x128>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d202      	bcs.n	800ea0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ea04:	230d      	movs	r3, #13
 800ea06:	617b      	str	r3, [r7, #20]
 800ea08:	e04c      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	4a33      	ldr	r2, [pc, #204]	; (800eadc <USB_SetTurnaroundTime+0x128>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d306      	bcc.n	800ea20 <USB_SetTurnaroundTime+0x6c>
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	4a32      	ldr	r2, [pc, #200]	; (800eae0 <USB_SetTurnaroundTime+0x12c>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d802      	bhi.n	800ea20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ea1a:	230c      	movs	r3, #12
 800ea1c:	617b      	str	r3, [r7, #20]
 800ea1e:	e041      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	4a2f      	ldr	r2, [pc, #188]	; (800eae0 <USB_SetTurnaroundTime+0x12c>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d906      	bls.n	800ea36 <USB_SetTurnaroundTime+0x82>
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	4a2e      	ldr	r2, [pc, #184]	; (800eae4 <USB_SetTurnaroundTime+0x130>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d802      	bhi.n	800ea36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ea30:	230b      	movs	r3, #11
 800ea32:	617b      	str	r3, [r7, #20]
 800ea34:	e036      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	4a2a      	ldr	r2, [pc, #168]	; (800eae4 <USB_SetTurnaroundTime+0x130>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d906      	bls.n	800ea4c <USB_SetTurnaroundTime+0x98>
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	4a29      	ldr	r2, [pc, #164]	; (800eae8 <USB_SetTurnaroundTime+0x134>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d802      	bhi.n	800ea4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ea46:	230a      	movs	r3, #10
 800ea48:	617b      	str	r3, [r7, #20]
 800ea4a:	e02b      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	4a26      	ldr	r2, [pc, #152]	; (800eae8 <USB_SetTurnaroundTime+0x134>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d906      	bls.n	800ea62 <USB_SetTurnaroundTime+0xae>
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	4a25      	ldr	r2, [pc, #148]	; (800eaec <USB_SetTurnaroundTime+0x138>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d202      	bcs.n	800ea62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ea5c:	2309      	movs	r3, #9
 800ea5e:	617b      	str	r3, [r7, #20]
 800ea60:	e020      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	4a21      	ldr	r2, [pc, #132]	; (800eaec <USB_SetTurnaroundTime+0x138>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d306      	bcc.n	800ea78 <USB_SetTurnaroundTime+0xc4>
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	4a20      	ldr	r2, [pc, #128]	; (800eaf0 <USB_SetTurnaroundTime+0x13c>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d802      	bhi.n	800ea78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ea72:	2308      	movs	r3, #8
 800ea74:	617b      	str	r3, [r7, #20]
 800ea76:	e015      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	4a1d      	ldr	r2, [pc, #116]	; (800eaf0 <USB_SetTurnaroundTime+0x13c>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d906      	bls.n	800ea8e <USB_SetTurnaroundTime+0xda>
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	4a1c      	ldr	r2, [pc, #112]	; (800eaf4 <USB_SetTurnaroundTime+0x140>)
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d202      	bcs.n	800ea8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ea88:	2307      	movs	r3, #7
 800ea8a:	617b      	str	r3, [r7, #20]
 800ea8c:	e00a      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ea8e:	2306      	movs	r3, #6
 800ea90:	617b      	str	r3, [r7, #20]
 800ea92:	e007      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d102      	bne.n	800eaa0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ea9a:	2309      	movs	r3, #9
 800ea9c:	617b      	str	r3, [r7, #20]
 800ea9e:	e001      	b.n	800eaa4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800eaa0:	2309      	movs	r3, #9
 800eaa2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	68da      	ldr	r2, [r3, #12]
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	029b      	lsls	r3, r3, #10
 800eab8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800eabc:	431a      	orrs	r2, r3
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	371c      	adds	r7, #28
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	00d8acbf 	.word	0x00d8acbf
 800ead4:	00e4e1c0 	.word	0x00e4e1c0
 800ead8:	00f42400 	.word	0x00f42400
 800eadc:	01067380 	.word	0x01067380
 800eae0:	011a499f 	.word	0x011a499f
 800eae4:	01312cff 	.word	0x01312cff
 800eae8:	014ca43f 	.word	0x014ca43f
 800eaec:	016e3600 	.word	0x016e3600
 800eaf0:	01a6ab1f 	.word	0x01a6ab1f
 800eaf4:	01e84800 	.word	0x01e84800

0800eaf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	689b      	ldr	r3, [r3, #8]
 800eb04:	f043 0201 	orr.w	r2, r3, #1
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	370c      	adds	r7, #12
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb1a:	b480      	push	{r7}
 800eb1c:	b083      	sub	sp, #12
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	f023 0201 	bic.w	r2, r3, #1
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eb54:	78fb      	ldrb	r3, [r7, #3]
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d106      	bne.n	800eb68 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	60da      	str	r2, [r3, #12]
 800eb66:	e00b      	b.n	800eb80 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800eb68:	78fb      	ldrb	r3, [r7, #3]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d106      	bne.n	800eb7c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	60da      	str	r2, [r3, #12]
 800eb7a:	e001      	b.n	800eb80 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	e003      	b.n	800eb88 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800eb80:	2032      	movs	r0, #50	; 0x32
 800eb82:	f7f2 fef7 	bl	8001974 <HAL_Delay>

  return HAL_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb90:	b084      	sub	sp, #16
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b086      	sub	sp, #24
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
 800eb9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800eb9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eba2:	2300      	movs	r3, #0
 800eba4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ebaa:	2300      	movs	r3, #0
 800ebac:	613b      	str	r3, [r7, #16]
 800ebae:	e009      	b.n	800ebc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	3340      	adds	r3, #64	; 0x40
 800ebb6:	009b      	lsls	r3, r3, #2
 800ebb8:	4413      	add	r3, r2
 800ebba:	2200      	movs	r2, #0
 800ebbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	613b      	str	r3, [r7, #16]
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	2b0e      	cmp	r3, #14
 800ebc8:	d9f2      	bls.n	800ebb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ebca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d11c      	bne.n	800ec0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ebde:	f043 0302 	orr.w	r3, r3, #2
 800ebe2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	601a      	str	r2, [r3, #0]
 800ec08:	e005      	b.n	800ec16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	2300      	movs	r3, #0
 800ec20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec28:	4619      	mov	r1, r3
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec30:	461a      	mov	r2, r3
 800ec32:	680b      	ldr	r3, [r1, #0]
 800ec34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d10c      	bne.n	800ec56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d104      	bne.n	800ec4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ec42:	2100      	movs	r1, #0
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 f949 	bl	800eedc <USB_SetDevSpeed>
 800ec4a:	e008      	b.n	800ec5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ec4c:	2101      	movs	r1, #1
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f000 f944 	bl	800eedc <USB_SetDevSpeed>
 800ec54:	e003      	b.n	800ec5e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ec56:	2103      	movs	r1, #3
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f000 f93f 	bl	800eedc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ec5e:	2110      	movs	r1, #16
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f8f3 	bl	800ee4c <USB_FlushTxFifo>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d001      	beq.n	800ec70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 f911 	bl	800ee98 <USB_FlushRxFifo>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec86:	461a      	mov	r2, r3
 800ec88:	2300      	movs	r3, #0
 800ec8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec92:	461a      	mov	r2, r3
 800ec94:	2300      	movs	r3, #0
 800ec96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec9e:	461a      	mov	r2, r3
 800eca0:	2300      	movs	r3, #0
 800eca2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eca4:	2300      	movs	r3, #0
 800eca6:	613b      	str	r3, [r7, #16]
 800eca8:	e043      	b.n	800ed32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	015a      	lsls	r2, r3, #5
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ecbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ecc0:	d118      	bne.n	800ecf4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d10a      	bne.n	800ecde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	015a      	lsls	r2, r3, #5
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	4413      	add	r3, r2
 800ecd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ecda:	6013      	str	r3, [r2, #0]
 800ecdc:	e013      	b.n	800ed06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	015a      	lsls	r2, r3, #5
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	4413      	add	r3, r2
 800ece6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecea:	461a      	mov	r2, r3
 800ecec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ecf0:	6013      	str	r3, [r2, #0]
 800ecf2:	e008      	b.n	800ed06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	015a      	lsls	r2, r3, #5
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed00:	461a      	mov	r2, r3
 800ed02:	2300      	movs	r3, #0
 800ed04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	015a      	lsls	r2, r3, #5
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed12:	461a      	mov	r2, r3
 800ed14:	2300      	movs	r3, #0
 800ed16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	015a      	lsls	r2, r3, #5
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	4413      	add	r3, r2
 800ed20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed24:	461a      	mov	r2, r3
 800ed26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ed2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	613b      	str	r3, [r7, #16]
 800ed32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed34:	693a      	ldr	r2, [r7, #16]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d3b7      	bcc.n	800ecaa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	613b      	str	r3, [r7, #16]
 800ed3e:	e043      	b.n	800edc8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	015a      	lsls	r2, r3, #5
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	4413      	add	r3, r2
 800ed48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed56:	d118      	bne.n	800ed8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d10a      	bne.n	800ed74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	015a      	lsls	r2, r3, #5
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	4413      	add	r3, r2
 800ed66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ed70:	6013      	str	r3, [r2, #0]
 800ed72:	e013      	b.n	800ed9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	015a      	lsls	r2, r3, #5
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed80:	461a      	mov	r2, r3
 800ed82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	e008      	b.n	800ed9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	015a      	lsls	r2, r3, #5
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	4413      	add	r3, r2
 800ed92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed96:	461a      	mov	r2, r3
 800ed98:	2300      	movs	r3, #0
 800ed9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	015a      	lsls	r2, r3, #5
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	4413      	add	r3, r2
 800eda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda8:	461a      	mov	r2, r3
 800edaa:	2300      	movs	r3, #0
 800edac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	015a      	lsls	r2, r3, #5
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	4413      	add	r3, r2
 800edb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edba:	461a      	mov	r2, r3
 800edbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800edc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	3301      	adds	r3, #1
 800edc6:	613b      	str	r3, [r7, #16]
 800edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edca:	693a      	ldr	r2, [r7, #16]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d3b7      	bcc.n	800ed40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800edde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ede2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800edf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800edf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d105      	bne.n	800ee04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	f043 0210 	orr.w	r2, r3, #16
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	699a      	ldr	r2, [r3, #24]
 800ee08:	4b0e      	ldr	r3, [pc, #56]	; (800ee44 <USB_DevInit+0x2b4>)
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ee10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d005      	beq.n	800ee22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	699b      	ldr	r3, [r3, #24]
 800ee1a:	f043 0208 	orr.w	r2, r3, #8
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ee22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d105      	bne.n	800ee34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	699a      	ldr	r2, [r3, #24]
 800ee2c:	4b06      	ldr	r3, [pc, #24]	; (800ee48 <USB_DevInit+0x2b8>)
 800ee2e:	4313      	orrs	r3, r2
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ee34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee40:	b004      	add	sp, #16
 800ee42:	4770      	bx	lr
 800ee44:	803c3800 	.word	0x803c3800
 800ee48:	40000004 	.word	0x40000004

0800ee4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b085      	sub	sp, #20
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ee56:	2300      	movs	r3, #0
 800ee58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	019b      	lsls	r3, r3, #6
 800ee5e:	f043 0220 	orr.w	r2, r3, #32
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	60fb      	str	r3, [r7, #12]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	4a09      	ldr	r2, [pc, #36]	; (800ee94 <USB_FlushTxFifo+0x48>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d901      	bls.n	800ee78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ee74:	2303      	movs	r3, #3
 800ee76:	e006      	b.n	800ee86 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	691b      	ldr	r3, [r3, #16]
 800ee7c:	f003 0320 	and.w	r3, r3, #32
 800ee80:	2b20      	cmp	r3, #32
 800ee82:	d0f0      	beq.n	800ee66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ee84:	2300      	movs	r3, #0
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3714      	adds	r7, #20
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	00030d40 	.word	0x00030d40

0800ee98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800eea0:	2300      	movs	r3, #0
 800eea2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2210      	movs	r2, #16
 800eea8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3301      	adds	r3, #1
 800eeae:	60fb      	str	r3, [r7, #12]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	4a09      	ldr	r2, [pc, #36]	; (800eed8 <USB_FlushRxFifo+0x40>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d901      	bls.n	800eebc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800eeb8:	2303      	movs	r3, #3
 800eeba:	e006      	b.n	800eeca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	691b      	ldr	r3, [r3, #16]
 800eec0:	f003 0310 	and.w	r3, r3, #16
 800eec4:	2b10      	cmp	r3, #16
 800eec6:	d0f0      	beq.n	800eeaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800eec8:	2300      	movs	r3, #0
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3714      	adds	r7, #20
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	00030d40 	.word	0x00030d40

0800eedc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	460b      	mov	r3, r1
 800eee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	78fb      	ldrb	r3, [r7, #3]
 800eef6:	68f9      	ldr	r1, [r7, #12]
 800eef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eefc:	4313      	orrs	r3, r2
 800eefe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3714      	adds	r7, #20
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ef0e:	b480      	push	{r7}
 800ef10:	b087      	sub	sp, #28
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef20:	689b      	ldr	r3, [r3, #8]
 800ef22:	f003 0306 	and.w	r3, r3, #6
 800ef26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d102      	bne.n	800ef34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	75fb      	strb	r3, [r7, #23]
 800ef32:	e00a      	b.n	800ef4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2b02      	cmp	r3, #2
 800ef38:	d002      	beq.n	800ef40 <USB_GetDevSpeed+0x32>
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2b06      	cmp	r3, #6
 800ef3e:	d102      	bne.n	800ef46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ef40:	2302      	movs	r3, #2
 800ef42:	75fb      	strb	r3, [r7, #23]
 800ef44:	e001      	b.n	800ef4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ef46:	230f      	movs	r3, #15
 800ef48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ef4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	371c      	adds	r7, #28
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b085      	sub	sp, #20
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	785b      	ldrb	r3, [r3, #1]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d139      	bne.n	800efe8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef7a:	69da      	ldr	r2, [r3, #28]
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	f003 030f 	and.w	r3, r3, #15
 800ef84:	2101      	movs	r1, #1
 800ef86:	fa01 f303 	lsl.w	r3, r1, r3
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	68f9      	ldr	r1, [r7, #12]
 800ef8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef92:	4313      	orrs	r3, r2
 800ef94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	015a      	lsls	r2, r3, #5
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	4413      	add	r3, r2
 800ef9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d153      	bne.n	800f054 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	015a      	lsls	r2, r3, #5
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	4413      	add	r3, r2
 800efb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	78db      	ldrb	r3, [r3, #3]
 800efc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800efc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	059b      	lsls	r3, r3, #22
 800efce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800efd0:	431a      	orrs	r2, r3
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	0159      	lsls	r1, r3, #5
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	440b      	add	r3, r1
 800efda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efde:	4619      	mov	r1, r3
 800efe0:	4b20      	ldr	r3, [pc, #128]	; (800f064 <USB_ActivateEndpoint+0x10c>)
 800efe2:	4313      	orrs	r3, r2
 800efe4:	600b      	str	r3, [r1, #0]
 800efe6:	e035      	b.n	800f054 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efee:	69da      	ldr	r2, [r3, #28]
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	f003 030f 	and.w	r3, r3, #15
 800eff8:	2101      	movs	r1, #1
 800effa:	fa01 f303 	lsl.w	r3, r1, r3
 800effe:	041b      	lsls	r3, r3, #16
 800f000:	68f9      	ldr	r1, [r7, #12]
 800f002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f006:	4313      	orrs	r3, r2
 800f008:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	015a      	lsls	r2, r3, #5
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	4413      	add	r3, r2
 800f012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d119      	bne.n	800f054 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	015a      	lsls	r2, r3, #5
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	4413      	add	r3, r2
 800f028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	78db      	ldrb	r3, [r3, #3]
 800f03a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f03c:	430b      	orrs	r3, r1
 800f03e:	431a      	orrs	r2, r3
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	0159      	lsls	r1, r3, #5
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	440b      	add	r3, r1
 800f048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f04c:	4619      	mov	r1, r3
 800f04e:	4b05      	ldr	r3, [pc, #20]	; (800f064 <USB_ActivateEndpoint+0x10c>)
 800f050:	4313      	orrs	r3, r2
 800f052:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3714      	adds	r7, #20
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	10008000 	.word	0x10008000

0800f068 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	785b      	ldrb	r3, [r3, #1]
 800f080:	2b01      	cmp	r3, #1
 800f082:	d161      	bne.n	800f148 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	015a      	lsls	r2, r3, #5
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	4413      	add	r3, r2
 800f08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f09a:	d11f      	bne.n	800f0dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	015a      	lsls	r2, r3, #5
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	68ba      	ldr	r2, [r7, #8]
 800f0ac:	0151      	lsls	r1, r2, #5
 800f0ae:	68fa      	ldr	r2, [r7, #12]
 800f0b0:	440a      	add	r2, r1
 800f0b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f0ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	015a      	lsls	r2, r3, #5
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	0151      	lsls	r1, r2, #5
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	440a      	add	r2, r1
 800f0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	f003 030f 	and.w	r3, r3, #15
 800f0ec:	2101      	movs	r1, #1
 800f0ee:	fa01 f303 	lsl.w	r3, r1, r3
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	43db      	mvns	r3, r3
 800f0f6:	68f9      	ldr	r1, [r7, #12]
 800f0f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f0fc:	4013      	ands	r3, r2
 800f0fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f106:	69da      	ldr	r2, [r3, #28]
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	f003 030f 	and.w	r3, r3, #15
 800f110:	2101      	movs	r1, #1
 800f112:	fa01 f303 	lsl.w	r3, r1, r3
 800f116:	b29b      	uxth	r3, r3
 800f118:	43db      	mvns	r3, r3
 800f11a:	68f9      	ldr	r1, [r7, #12]
 800f11c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f120:	4013      	ands	r3, r2
 800f122:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	015a      	lsls	r2, r3, #5
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	4413      	add	r3, r2
 800f12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	0159      	lsls	r1, r3, #5
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	440b      	add	r3, r1
 800f13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f13e:	4619      	mov	r1, r3
 800f140:	4b35      	ldr	r3, [pc, #212]	; (800f218 <USB_DeactivateEndpoint+0x1b0>)
 800f142:	4013      	ands	r3, r2
 800f144:	600b      	str	r3, [r1, #0]
 800f146:	e060      	b.n	800f20a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	015a      	lsls	r2, r3, #5
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	4413      	add	r3, r2
 800f150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f15a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f15e:	d11f      	bne.n	800f1a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	015a      	lsls	r2, r3, #5
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	4413      	add	r3, r2
 800f168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	0151      	lsls	r1, r2, #5
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	440a      	add	r2, r1
 800f176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f17a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f17e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	015a      	lsls	r2, r3, #5
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	4413      	add	r3, r2
 800f188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68ba      	ldr	r2, [r7, #8]
 800f190:	0151      	lsls	r1, r2, #5
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	440a      	add	r2, r1
 800f196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f19a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f19e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	f003 030f 	and.w	r3, r3, #15
 800f1b0:	2101      	movs	r1, #1
 800f1b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f1b6:	041b      	lsls	r3, r3, #16
 800f1b8:	43db      	mvns	r3, r3
 800f1ba:	68f9      	ldr	r1, [r7, #12]
 800f1bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1c0:	4013      	ands	r3, r2
 800f1c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1ca:	69da      	ldr	r2, [r3, #28]
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	f003 030f 	and.w	r3, r3, #15
 800f1d4:	2101      	movs	r1, #1
 800f1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800f1da:	041b      	lsls	r3, r3, #16
 800f1dc:	43db      	mvns	r3, r3
 800f1de:	68f9      	ldr	r1, [r7, #12]
 800f1e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1e4:	4013      	ands	r3, r2
 800f1e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	015a      	lsls	r2, r3, #5
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	0159      	lsls	r1, r3, #5
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	440b      	add	r3, r1
 800f1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f202:	4619      	mov	r1, r3
 800f204:	4b05      	ldr	r3, [pc, #20]	; (800f21c <USB_DeactivateEndpoint+0x1b4>)
 800f206:	4013      	ands	r3, r2
 800f208:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3714      	adds	r7, #20
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr
 800f218:	ec337800 	.word	0xec337800
 800f21c:	eff37800 	.word	0xeff37800

0800f220 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b08a      	sub	sp, #40	; 0x28
 800f224:	af02      	add	r7, sp, #8
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	4613      	mov	r3, r2
 800f22c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	785b      	ldrb	r3, [r3, #1]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	f040 8163 	bne.w	800f508 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	695b      	ldr	r3, [r3, #20]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d132      	bne.n	800f2b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	015a      	lsls	r2, r3, #5
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	4413      	add	r3, r2
 800f252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f256:	691a      	ldr	r2, [r3, #16]
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	0159      	lsls	r1, r3, #5
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	440b      	add	r3, r1
 800f260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f264:	4619      	mov	r1, r3
 800f266:	4ba5      	ldr	r3, [pc, #660]	; (800f4fc <USB_EPStartXfer+0x2dc>)
 800f268:	4013      	ands	r3, r2
 800f26a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	015a      	lsls	r2, r3, #5
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	4413      	add	r3, r2
 800f274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f278:	691b      	ldr	r3, [r3, #16]
 800f27a:	69ba      	ldr	r2, [r7, #24]
 800f27c:	0151      	lsls	r1, r2, #5
 800f27e:	69fa      	ldr	r2, [r7, #28]
 800f280:	440a      	add	r2, r1
 800f282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f28a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	015a      	lsls	r2, r3, #5
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	4413      	add	r3, r2
 800f294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f298:	691a      	ldr	r2, [r3, #16]
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	0159      	lsls	r1, r3, #5
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	440b      	add	r3, r1
 800f2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	4b95      	ldr	r3, [pc, #596]	; (800f500 <USB_EPStartXfer+0x2e0>)
 800f2aa:	4013      	ands	r3, r2
 800f2ac:	610b      	str	r3, [r1, #16]
 800f2ae:	e074      	b.n	800f39a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	015a      	lsls	r2, r3, #5
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2bc:	691a      	ldr	r2, [r3, #16]
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	0159      	lsls	r1, r3, #5
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	440b      	add	r3, r1
 800f2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	4b8c      	ldr	r3, [pc, #560]	; (800f500 <USB_EPStartXfer+0x2e0>)
 800f2ce:	4013      	ands	r3, r2
 800f2d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	015a      	lsls	r2, r3, #5
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	4413      	add	r3, r2
 800f2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2de:	691a      	ldr	r2, [r3, #16]
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	0159      	lsls	r1, r3, #5
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	440b      	add	r3, r1
 800f2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	4b83      	ldr	r3, [pc, #524]	; (800f4fc <USB_EPStartXfer+0x2dc>)
 800f2f0:	4013      	ands	r3, r2
 800f2f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	015a      	lsls	r2, r3, #5
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f300:	691a      	ldr	r2, [r3, #16]
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	6959      	ldr	r1, [r3, #20]
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	440b      	add	r3, r1
 800f30c:	1e59      	subs	r1, r3, #1
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	fbb1 f3f3 	udiv	r3, r1, r3
 800f316:	04d9      	lsls	r1, r3, #19
 800f318:	4b7a      	ldr	r3, [pc, #488]	; (800f504 <USB_EPStartXfer+0x2e4>)
 800f31a:	400b      	ands	r3, r1
 800f31c:	69b9      	ldr	r1, [r7, #24]
 800f31e:	0148      	lsls	r0, r1, #5
 800f320:	69f9      	ldr	r1, [r7, #28]
 800f322:	4401      	add	r1, r0
 800f324:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f328:	4313      	orrs	r3, r2
 800f32a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	015a      	lsls	r2, r3, #5
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	4413      	add	r3, r2
 800f334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f338:	691a      	ldr	r2, [r3, #16]
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	695b      	ldr	r3, [r3, #20]
 800f33e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f342:	69b9      	ldr	r1, [r7, #24]
 800f344:	0148      	lsls	r0, r1, #5
 800f346:	69f9      	ldr	r1, [r7, #28]
 800f348:	4401      	add	r1, r0
 800f34a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f34e:	4313      	orrs	r3, r2
 800f350:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	78db      	ldrb	r3, [r3, #3]
 800f356:	2b01      	cmp	r3, #1
 800f358:	d11f      	bne.n	800f39a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f35a:	69bb      	ldr	r3, [r7, #24]
 800f35c:	015a      	lsls	r2, r3, #5
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	4413      	add	r3, r2
 800f362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f366:	691b      	ldr	r3, [r3, #16]
 800f368:	69ba      	ldr	r2, [r7, #24]
 800f36a:	0151      	lsls	r1, r2, #5
 800f36c:	69fa      	ldr	r2, [r7, #28]
 800f36e:	440a      	add	r2, r1
 800f370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f374:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f378:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	015a      	lsls	r2, r3, #5
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	4413      	add	r3, r2
 800f382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f386:	691b      	ldr	r3, [r3, #16]
 800f388:	69ba      	ldr	r2, [r7, #24]
 800f38a:	0151      	lsls	r1, r2, #5
 800f38c:	69fa      	ldr	r2, [r7, #28]
 800f38e:	440a      	add	r2, r1
 800f390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f398:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f39a:	79fb      	ldrb	r3, [r7, #7]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d14b      	bne.n	800f438 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	691b      	ldr	r3, [r3, #16]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d009      	beq.n	800f3bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	015a      	lsls	r2, r3, #5
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	691b      	ldr	r3, [r3, #16]
 800f3ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	78db      	ldrb	r3, [r3, #3]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d128      	bne.n	800f416 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d110      	bne.n	800f3f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	015a      	lsls	r2, r3, #5
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	4413      	add	r3, r2
 800f3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	69ba      	ldr	r2, [r7, #24]
 800f3e4:	0151      	lsls	r1, r2, #5
 800f3e6:	69fa      	ldr	r2, [r7, #28]
 800f3e8:	440a      	add	r2, r1
 800f3ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3f2:	6013      	str	r3, [r2, #0]
 800f3f4:	e00f      	b.n	800f416 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f3f6:	69bb      	ldr	r3, [r7, #24]
 800f3f8:	015a      	lsls	r2, r3, #5
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	69ba      	ldr	r2, [r7, #24]
 800f406:	0151      	lsls	r1, r2, #5
 800f408:	69fa      	ldr	r2, [r7, #28]
 800f40a:	440a      	add	r2, r1
 800f40c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f414:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	015a      	lsls	r2, r3, #5
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	4413      	add	r3, r2
 800f41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	69ba      	ldr	r2, [r7, #24]
 800f426:	0151      	lsls	r1, r2, #5
 800f428:	69fa      	ldr	r2, [r7, #28]
 800f42a:	440a      	add	r2, r1
 800f42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f434:	6013      	str	r3, [r2, #0]
 800f436:	e133      	b.n	800f6a0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	015a      	lsls	r2, r3, #5
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	4413      	add	r3, r2
 800f440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	69ba      	ldr	r2, [r7, #24]
 800f448:	0151      	lsls	r1, r2, #5
 800f44a:	69fa      	ldr	r2, [r7, #28]
 800f44c:	440a      	add	r2, r1
 800f44e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f456:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	78db      	ldrb	r3, [r3, #3]
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d015      	beq.n	800f48c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	695b      	ldr	r3, [r3, #20]
 800f464:	2b00      	cmp	r3, #0
 800f466:	f000 811b 	beq.w	800f6a0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	f003 030f 	and.w	r3, r3, #15
 800f47a:	2101      	movs	r1, #1
 800f47c:	fa01 f303 	lsl.w	r3, r1, r3
 800f480:	69f9      	ldr	r1, [r7, #28]
 800f482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f486:	4313      	orrs	r3, r2
 800f488:	634b      	str	r3, [r1, #52]	; 0x34
 800f48a:	e109      	b.n	800f6a0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d110      	bne.n	800f4be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	015a      	lsls	r2, r3, #5
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	4413      	add	r3, r2
 800f4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	69ba      	ldr	r2, [r7, #24]
 800f4ac:	0151      	lsls	r1, r2, #5
 800f4ae:	69fa      	ldr	r2, [r7, #28]
 800f4b0:	440a      	add	r2, r1
 800f4b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f4ba:	6013      	str	r3, [r2, #0]
 800f4bc:	e00f      	b.n	800f4de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	015a      	lsls	r2, r3, #5
 800f4c2:	69fb      	ldr	r3, [r7, #28]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	69ba      	ldr	r2, [r7, #24]
 800f4ce:	0151      	lsls	r1, r2, #5
 800f4d0:	69fa      	ldr	r2, [r7, #28]
 800f4d2:	440a      	add	r2, r1
 800f4d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	68d9      	ldr	r1, [r3, #12]
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	781a      	ldrb	r2, [r3, #0]
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	695b      	ldr	r3, [r3, #20]
 800f4ea:	b298      	uxth	r0, r3
 800f4ec:	79fb      	ldrb	r3, [r7, #7]
 800f4ee:	9300      	str	r3, [sp, #0]
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	68f8      	ldr	r0, [r7, #12]
 800f4f4:	f000 fa38 	bl	800f968 <USB_WritePacket>
 800f4f8:	e0d2      	b.n	800f6a0 <USB_EPStartXfer+0x480>
 800f4fa:	bf00      	nop
 800f4fc:	e007ffff 	.word	0xe007ffff
 800f500:	fff80000 	.word	0xfff80000
 800f504:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	015a      	lsls	r2, r3, #5
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	4413      	add	r3, r2
 800f510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f514:	691a      	ldr	r2, [r3, #16]
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	0159      	lsls	r1, r3, #5
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	440b      	add	r3, r1
 800f51e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f522:	4619      	mov	r1, r3
 800f524:	4b61      	ldr	r3, [pc, #388]	; (800f6ac <USB_EPStartXfer+0x48c>)
 800f526:	4013      	ands	r3, r2
 800f528:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	015a      	lsls	r2, r3, #5
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	4413      	add	r3, r2
 800f532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f536:	691a      	ldr	r2, [r3, #16]
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	0159      	lsls	r1, r3, #5
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	440b      	add	r3, r1
 800f540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f544:	4619      	mov	r1, r3
 800f546:	4b5a      	ldr	r3, [pc, #360]	; (800f6b0 <USB_EPStartXfer+0x490>)
 800f548:	4013      	ands	r3, r2
 800f54a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	695b      	ldr	r3, [r3, #20]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d123      	bne.n	800f59c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	015a      	lsls	r2, r3, #5
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	4413      	add	r3, r2
 800f55c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f560:	691a      	ldr	r2, [r3, #16]
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f56a:	69b9      	ldr	r1, [r7, #24]
 800f56c:	0148      	lsls	r0, r1, #5
 800f56e:	69f9      	ldr	r1, [r7, #28]
 800f570:	4401      	add	r1, r0
 800f572:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f576:	4313      	orrs	r3, r2
 800f578:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	015a      	lsls	r2, r3, #5
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	4413      	add	r3, r2
 800f582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	69ba      	ldr	r2, [r7, #24]
 800f58a:	0151      	lsls	r1, r2, #5
 800f58c:	69fa      	ldr	r2, [r7, #28]
 800f58e:	440a      	add	r2, r1
 800f590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f598:	6113      	str	r3, [r2, #16]
 800f59a:	e033      	b.n	800f604 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	695a      	ldr	r2, [r3, #20]
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	689b      	ldr	r3, [r3, #8]
 800f5a4:	4413      	add	r3, r2
 800f5a6:	1e5a      	subs	r2, r3, #1
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	015a      	lsls	r2, r3, #5
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5be:	691a      	ldr	r2, [r3, #16]
 800f5c0:	8afb      	ldrh	r3, [r7, #22]
 800f5c2:	04d9      	lsls	r1, r3, #19
 800f5c4:	4b3b      	ldr	r3, [pc, #236]	; (800f6b4 <USB_EPStartXfer+0x494>)
 800f5c6:	400b      	ands	r3, r1
 800f5c8:	69b9      	ldr	r1, [r7, #24]
 800f5ca:	0148      	lsls	r0, r1, #5
 800f5cc:	69f9      	ldr	r1, [r7, #28]
 800f5ce:	4401      	add	r1, r0
 800f5d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	015a      	lsls	r2, r3, #5
 800f5dc:	69fb      	ldr	r3, [r7, #28]
 800f5de:	4413      	add	r3, r2
 800f5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5e4:	691a      	ldr	r2, [r3, #16]
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	8af9      	ldrh	r1, [r7, #22]
 800f5ec:	fb01 f303 	mul.w	r3, r1, r3
 800f5f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f5f4:	69b9      	ldr	r1, [r7, #24]
 800f5f6:	0148      	lsls	r0, r1, #5
 800f5f8:	69f9      	ldr	r1, [r7, #28]
 800f5fa:	4401      	add	r1, r0
 800f5fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f600:	4313      	orrs	r3, r2
 800f602:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f604:	79fb      	ldrb	r3, [r7, #7]
 800f606:	2b01      	cmp	r3, #1
 800f608:	d10d      	bne.n	800f626 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d009      	beq.n	800f626 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	68d9      	ldr	r1, [r3, #12]
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	015a      	lsls	r2, r3, #5
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	4413      	add	r3, r2
 800f61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f622:	460a      	mov	r2, r1
 800f624:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	78db      	ldrb	r3, [r3, #3]
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d128      	bne.n	800f680 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f634:	689b      	ldr	r3, [r3, #8]
 800f636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d110      	bne.n	800f660 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	015a      	lsls	r2, r3, #5
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	4413      	add	r3, r2
 800f646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	69ba      	ldr	r2, [r7, #24]
 800f64e:	0151      	lsls	r1, r2, #5
 800f650:	69fa      	ldr	r2, [r7, #28]
 800f652:	440a      	add	r2, r1
 800f654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f65c:	6013      	str	r3, [r2, #0]
 800f65e:	e00f      	b.n	800f680 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	015a      	lsls	r2, r3, #5
 800f664:	69fb      	ldr	r3, [r7, #28]
 800f666:	4413      	add	r3, r2
 800f668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	69ba      	ldr	r2, [r7, #24]
 800f670:	0151      	lsls	r1, r2, #5
 800f672:	69fa      	ldr	r2, [r7, #28]
 800f674:	440a      	add	r2, r1
 800f676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f67a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f67e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	015a      	lsls	r2, r3, #5
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	4413      	add	r3, r2
 800f688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	69ba      	ldr	r2, [r7, #24]
 800f690:	0151      	lsls	r1, r2, #5
 800f692:	69fa      	ldr	r2, [r7, #28]
 800f694:	440a      	add	r2, r1
 800f696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f69a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f69e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3720      	adds	r7, #32
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	fff80000 	.word	0xfff80000
 800f6b0:	e007ffff 	.word	0xe007ffff
 800f6b4:	1ff80000 	.word	0x1ff80000

0800f6b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	785b      	ldrb	r3, [r3, #1]
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	f040 80cd 	bne.w	800f874 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	695b      	ldr	r3, [r3, #20]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d132      	bne.n	800f748 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	015a      	lsls	r2, r3, #5
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ee:	691a      	ldr	r2, [r3, #16]
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	0159      	lsls	r1, r3, #5
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	440b      	add	r3, r1
 800f6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	4b98      	ldr	r3, [pc, #608]	; (800f960 <USB_EP0StartXfer+0x2a8>)
 800f700:	4013      	ands	r3, r2
 800f702:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	015a      	lsls	r2, r3, #5
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	4413      	add	r3, r2
 800f70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f710:	691b      	ldr	r3, [r3, #16]
 800f712:	693a      	ldr	r2, [r7, #16]
 800f714:	0151      	lsls	r1, r2, #5
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	440a      	add	r2, r1
 800f71a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f71e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	015a      	lsls	r2, r3, #5
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	4413      	add	r3, r2
 800f72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f730:	691a      	ldr	r2, [r3, #16]
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	0159      	lsls	r1, r3, #5
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	440b      	add	r3, r1
 800f73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f73e:	4619      	mov	r1, r3
 800f740:	4b88      	ldr	r3, [pc, #544]	; (800f964 <USB_EP0StartXfer+0x2ac>)
 800f742:	4013      	ands	r3, r2
 800f744:	610b      	str	r3, [r1, #16]
 800f746:	e04e      	b.n	800f7e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	015a      	lsls	r2, r3, #5
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	4413      	add	r3, r2
 800f750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f754:	691a      	ldr	r2, [r3, #16]
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	0159      	lsls	r1, r3, #5
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	440b      	add	r3, r1
 800f75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f762:	4619      	mov	r1, r3
 800f764:	4b7f      	ldr	r3, [pc, #508]	; (800f964 <USB_EP0StartXfer+0x2ac>)
 800f766:	4013      	ands	r3, r2
 800f768:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	015a      	lsls	r2, r3, #5
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	4413      	add	r3, r2
 800f772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f776:	691a      	ldr	r2, [r3, #16]
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	0159      	lsls	r1, r3, #5
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	440b      	add	r3, r1
 800f780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f784:	4619      	mov	r1, r3
 800f786:	4b76      	ldr	r3, [pc, #472]	; (800f960 <USB_EP0StartXfer+0x2a8>)
 800f788:	4013      	ands	r3, r2
 800f78a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	695a      	ldr	r2, [r3, #20]
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	689b      	ldr	r3, [r3, #8]
 800f794:	429a      	cmp	r2, r3
 800f796:	d903      	bls.n	800f7a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	689a      	ldr	r2, [r3, #8]
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	015a      	lsls	r2, r3, #5
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	693a      	ldr	r2, [r7, #16]
 800f7b0:	0151      	lsls	r1, r2, #5
 800f7b2:	697a      	ldr	r2, [r7, #20]
 800f7b4:	440a      	add	r2, r1
 800f7b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	015a      	lsls	r2, r3, #5
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7cc:	691a      	ldr	r2, [r3, #16]
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	695b      	ldr	r3, [r3, #20]
 800f7d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7d6:	6939      	ldr	r1, [r7, #16]
 800f7d8:	0148      	lsls	r0, r1, #5
 800f7da:	6979      	ldr	r1, [r7, #20]
 800f7dc:	4401      	add	r1, r0
 800f7de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f7e6:	79fb      	ldrb	r3, [r7, #7]
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d11e      	bne.n	800f82a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	691b      	ldr	r3, [r3, #16]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d009      	beq.n	800f808 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	015a      	lsls	r2, r3, #5
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	4413      	add	r3, r2
 800f7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f800:	461a      	mov	r2, r3
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	691b      	ldr	r3, [r3, #16]
 800f806:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	015a      	lsls	r2, r3, #5
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	4413      	add	r3, r2
 800f810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	693a      	ldr	r2, [r7, #16]
 800f818:	0151      	lsls	r1, r2, #5
 800f81a:	697a      	ldr	r2, [r7, #20]
 800f81c:	440a      	add	r2, r1
 800f81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f826:	6013      	str	r3, [r2, #0]
 800f828:	e092      	b.n	800f950 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	015a      	lsls	r2, r3, #5
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	4413      	add	r3, r2
 800f832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	693a      	ldr	r2, [r7, #16]
 800f83a:	0151      	lsls	r1, r2, #5
 800f83c:	697a      	ldr	r2, [r7, #20]
 800f83e:	440a      	add	r2, r1
 800f840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f844:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f848:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d07e      	beq.n	800f950 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	f003 030f 	and.w	r3, r3, #15
 800f862:	2101      	movs	r1, #1
 800f864:	fa01 f303 	lsl.w	r3, r1, r3
 800f868:	6979      	ldr	r1, [r7, #20]
 800f86a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f86e:	4313      	orrs	r3, r2
 800f870:	634b      	str	r3, [r1, #52]	; 0x34
 800f872:	e06d      	b.n	800f950 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	015a      	lsls	r2, r3, #5
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	4413      	add	r3, r2
 800f87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f880:	691a      	ldr	r2, [r3, #16]
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	0159      	lsls	r1, r3, #5
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	440b      	add	r3, r1
 800f88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f88e:	4619      	mov	r1, r3
 800f890:	4b34      	ldr	r3, [pc, #208]	; (800f964 <USB_EP0StartXfer+0x2ac>)
 800f892:	4013      	ands	r3, r2
 800f894:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	015a      	lsls	r2, r3, #5
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	4413      	add	r3, r2
 800f89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a2:	691a      	ldr	r2, [r3, #16]
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	0159      	lsls	r1, r3, #5
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	440b      	add	r3, r1
 800f8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	4b2b      	ldr	r3, [pc, #172]	; (800f960 <USB_EP0StartXfer+0x2a8>)
 800f8b4:	4013      	ands	r3, r2
 800f8b6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	695b      	ldr	r3, [r3, #20]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d003      	beq.n	800f8c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	689a      	ldr	r2, [r3, #8]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	015a      	lsls	r2, r3, #5
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d4:	691b      	ldr	r3, [r3, #16]
 800f8d6:	693a      	ldr	r2, [r7, #16]
 800f8d8:	0151      	lsls	r1, r2, #5
 800f8da:	697a      	ldr	r2, [r7, #20]
 800f8dc:	440a      	add	r2, r1
 800f8de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f8e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	015a      	lsls	r2, r3, #5
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f4:	691a      	ldr	r2, [r3, #16]
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	689b      	ldr	r3, [r3, #8]
 800f8fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f8fe:	6939      	ldr	r1, [r7, #16]
 800f900:	0148      	lsls	r0, r1, #5
 800f902:	6979      	ldr	r1, [r7, #20]
 800f904:	4401      	add	r1, r0
 800f906:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f90a:	4313      	orrs	r3, r2
 800f90c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f90e:	79fb      	ldrb	r3, [r7, #7]
 800f910:	2b01      	cmp	r3, #1
 800f912:	d10d      	bne.n	800f930 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d009      	beq.n	800f930 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	68d9      	ldr	r1, [r3, #12]
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	015a      	lsls	r2, r3, #5
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	4413      	add	r3, r2
 800f928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f92c:	460a      	mov	r2, r1
 800f92e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	015a      	lsls	r2, r3, #5
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	4413      	add	r3, r2
 800f938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	0151      	lsls	r1, r2, #5
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	440a      	add	r2, r1
 800f946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f94a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f94e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f950:	2300      	movs	r3, #0
}
 800f952:	4618      	mov	r0, r3
 800f954:	371c      	adds	r7, #28
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	e007ffff 	.word	0xe007ffff
 800f964:	fff80000 	.word	0xfff80000

0800f968 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f968:	b480      	push	{r7}
 800f96a:	b089      	sub	sp, #36	; 0x24
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	4611      	mov	r1, r2
 800f974:	461a      	mov	r2, r3
 800f976:	460b      	mov	r3, r1
 800f978:	71fb      	strb	r3, [r7, #7]
 800f97a:	4613      	mov	r3, r2
 800f97c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f986:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d123      	bne.n	800f9d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f98e:	88bb      	ldrh	r3, [r7, #4]
 800f990:	3303      	adds	r3, #3
 800f992:	089b      	lsrs	r3, r3, #2
 800f994:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f996:	2300      	movs	r3, #0
 800f998:	61bb      	str	r3, [r7, #24]
 800f99a:	e018      	b.n	800f9ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f99c:	79fb      	ldrb	r3, [r7, #7]
 800f99e:	031a      	lsls	r2, r3, #12
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	4413      	add	r3, r2
 800f9a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	69fb      	ldr	r3, [r7, #28]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	61bb      	str	r3, [r7, #24]
 800f9ce:	69ba      	ldr	r2, [r7, #24]
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d3e2      	bcc.n	800f99c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f9d6:	2300      	movs	r3, #0
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3724      	adds	r7, #36	; 0x24
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b08b      	sub	sp, #44	; 0x2c
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	60b9      	str	r1, [r7, #8]
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f9fa:	88fb      	ldrh	r3, [r7, #6]
 800f9fc:	089b      	lsrs	r3, r3, #2
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fa02:	88fb      	ldrh	r3, [r7, #6]
 800fa04:	f003 0303 	and.w	r3, r3, #3
 800fa08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	623b      	str	r3, [r7, #32]
 800fa0e:	e014      	b.n	800fa3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fa10:	69bb      	ldr	r3, [r7, #24]
 800fa12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1a:	601a      	str	r2, [r3, #0]
    pDest++;
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1e:	3301      	adds	r3, #1
 800fa20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa24:	3301      	adds	r3, #1
 800fa26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa30:	3301      	adds	r3, #1
 800fa32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fa34:	6a3b      	ldr	r3, [r7, #32]
 800fa36:	3301      	adds	r3, #1
 800fa38:	623b      	str	r3, [r7, #32]
 800fa3a:	6a3a      	ldr	r2, [r7, #32]
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d3e6      	bcc.n	800fa10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fa42:	8bfb      	ldrh	r3, [r7, #30]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d01e      	beq.n	800fa86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa52:	461a      	mov	r2, r3
 800fa54:	f107 0310 	add.w	r3, r7, #16
 800fa58:	6812      	ldr	r2, [r2, #0]
 800fa5a:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fa5c:	693a      	ldr	r2, [r7, #16]
 800fa5e:	6a3b      	ldr	r3, [r7, #32]
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	00db      	lsls	r3, r3, #3
 800fa64:	fa22 f303 	lsr.w	r3, r2, r3
 800fa68:	b2da      	uxtb	r2, r3
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	701a      	strb	r2, [r3, #0]
      i++;
 800fa6e:	6a3b      	ldr	r3, [r7, #32]
 800fa70:	3301      	adds	r3, #1
 800fa72:	623b      	str	r3, [r7, #32]
      pDest++;
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	3301      	adds	r3, #1
 800fa78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fa7a:	8bfb      	ldrh	r3, [r7, #30]
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fa80:	8bfb      	ldrh	r3, [r7, #30]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d1ea      	bne.n	800fa5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	372c      	adds	r7, #44	; 0x2c
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	785b      	ldrb	r3, [r3, #1]
 800faac:	2b01      	cmp	r3, #1
 800faae:	d12c      	bne.n	800fb0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	015a      	lsls	r2, r3, #5
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	4413      	add	r3, r2
 800fab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	db12      	blt.n	800fae8 <USB_EPSetStall+0x54>
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d00f      	beq.n	800fae8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	015a      	lsls	r2, r3, #5
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	4413      	add	r3, r2
 800fad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	68ba      	ldr	r2, [r7, #8]
 800fad8:	0151      	lsls	r1, r2, #5
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	440a      	add	r2, r1
 800fade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fae6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	015a      	lsls	r2, r3, #5
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	4413      	add	r3, r2
 800faf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	0151      	lsls	r1, r2, #5
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	440a      	add	r2, r1
 800fafe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fb06:	6013      	str	r3, [r2, #0]
 800fb08:	e02b      	b.n	800fb62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	015a      	lsls	r2, r3, #5
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	4413      	add	r3, r2
 800fb12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	db12      	blt.n	800fb42 <USB_EPSetStall+0xae>
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00f      	beq.n	800fb42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	015a      	lsls	r2, r3, #5
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	4413      	add	r3, r2
 800fb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	68ba      	ldr	r2, [r7, #8]
 800fb32:	0151      	lsls	r1, r2, #5
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	440a      	add	r2, r1
 800fb38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fb40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	015a      	lsls	r2, r3, #5
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	4413      	add	r3, r2
 800fb4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	0151      	lsls	r1, r2, #5
 800fb54:	68fa      	ldr	r2, [r7, #12]
 800fb56:	440a      	add	r2, r1
 800fb58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fb60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3714      	adds	r7, #20
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr

0800fb70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	785b      	ldrb	r3, [r3, #1]
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d128      	bne.n	800fbde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	015a      	lsls	r2, r3, #5
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	4413      	add	r3, r2
 800fb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	0151      	lsls	r1, r2, #5
 800fb9e:	68fa      	ldr	r2, [r7, #12]
 800fba0:	440a      	add	r2, r1
 800fba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fbaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	78db      	ldrb	r3, [r3, #3]
 800fbb0:	2b03      	cmp	r3, #3
 800fbb2:	d003      	beq.n	800fbbc <USB_EPClearStall+0x4c>
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	78db      	ldrb	r3, [r3, #3]
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d138      	bne.n	800fc2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	015a      	lsls	r2, r3, #5
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	4413      	add	r3, r2
 800fbc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	0151      	lsls	r1, r2, #5
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	440a      	add	r2, r1
 800fbd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbda:	6013      	str	r3, [r2, #0]
 800fbdc:	e027      	b.n	800fc2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	015a      	lsls	r2, r3, #5
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	0151      	lsls	r1, r2, #5
 800fbf0:	68fa      	ldr	r2, [r7, #12]
 800fbf2:	440a      	add	r2, r1
 800fbf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fbfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	78db      	ldrb	r3, [r3, #3]
 800fc02:	2b03      	cmp	r3, #3
 800fc04:	d003      	beq.n	800fc0e <USB_EPClearStall+0x9e>
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	78db      	ldrb	r3, [r3, #3]
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	d10f      	bne.n	800fc2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	015a      	lsls	r2, r3, #5
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4413      	add	r3, r2
 800fc16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	0151      	lsls	r1, r2, #5
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	440a      	add	r2, r1
 800fc24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fc2e:	2300      	movs	r3, #0
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3714      	adds	r7, #20
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fc5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	78fb      	ldrb	r3, [r7, #3]
 800fc6a:	011b      	lsls	r3, r3, #4
 800fc6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fc70:	68f9      	ldr	r1, [r7, #12]
 800fc72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc76:	4313      	orrs	r3, r2
 800fc78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3714      	adds	r7, #20
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fca2:	f023 0303 	bic.w	r3, r3, #3
 800fca6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	68fa      	ldr	r2, [r7, #12]
 800fcb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcb6:	f023 0302 	bic.w	r3, r3, #2
 800fcba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fcbc:	2300      	movs	r3, #0
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3714      	adds	r7, #20
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr

0800fcca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fcca:	b480      	push	{r7}
 800fccc:	b085      	sub	sp, #20
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fce4:	f023 0303 	bic.w	r3, r3, #3
 800fce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	68fa      	ldr	r2, [r7, #12]
 800fcf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcf8:	f043 0302 	orr.w	r3, r3, #2
 800fcfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3714      	adds	r7, #20
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr

0800fd0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b085      	sub	sp, #20
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	695b      	ldr	r3, [r3, #20]
 800fd18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	699b      	ldr	r3, [r3, #24]
 800fd1e:	68fa      	ldr	r2, [r7, #12]
 800fd20:	4013      	ands	r3, r2
 800fd22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fd24:	68fb      	ldr	r3, [r7, #12]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr

0800fd32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b085      	sub	sp, #20
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd44:	699b      	ldr	r3, [r3, #24]
 800fd46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd4e:	69db      	ldr	r3, [r3, #28]
 800fd50:	68ba      	ldr	r2, [r7, #8]
 800fd52:	4013      	ands	r3, r2
 800fd54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	0c1b      	lsrs	r3, r3, #16
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3714      	adds	r7, #20
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr

0800fd66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd66:	b480      	push	{r7}
 800fd68:	b085      	sub	sp, #20
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd78:	699b      	ldr	r3, [r3, #24]
 800fd7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd82:	69db      	ldr	r3, [r3, #28]
 800fd84:	68ba      	ldr	r2, [r7, #8]
 800fd86:	4013      	ands	r3, r2
 800fd88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	b29b      	uxth	r3, r3
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr

0800fd9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fd9a:	b480      	push	{r7}
 800fd9c:	b085      	sub	sp, #20
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
 800fda2:	460b      	mov	r3, r1
 800fda4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fdaa:	78fb      	ldrb	r3, [r7, #3]
 800fdac:	015a      	lsls	r2, r3, #5
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdb6:	689b      	ldr	r3, [r3, #8]
 800fdb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdc0:	695b      	ldr	r3, [r3, #20]
 800fdc2:	68ba      	ldr	r2, [r7, #8]
 800fdc4:	4013      	ands	r3, r2
 800fdc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fdc8:	68bb      	ldr	r3, [r7, #8]
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3714      	adds	r7, #20
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr

0800fdd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fdd6:	b480      	push	{r7}
 800fdd8:	b087      	sub	sp, #28
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	6078      	str	r0, [r7, #4]
 800fdde:	460b      	mov	r3, r1
 800fde0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdf8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fdfa:	78fb      	ldrb	r3, [r7, #3]
 800fdfc:	f003 030f 	and.w	r3, r3, #15
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	fa22 f303 	lsr.w	r3, r2, r3
 800fe06:	01db      	lsls	r3, r3, #7
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	693a      	ldr	r2, [r7, #16]
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fe10:	78fb      	ldrb	r3, [r7, #3]
 800fe12:	015a      	lsls	r2, r3, #5
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	4413      	add	r3, r2
 800fe18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1c:	689b      	ldr	r3, [r3, #8]
 800fe1e:	693a      	ldr	r2, [r7, #16]
 800fe20:	4013      	ands	r3, r2
 800fe22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fe24:	68bb      	ldr	r3, [r7, #8]
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	371c      	adds	r7, #28
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b083      	sub	sp, #12
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	695b      	ldr	r3, [r3, #20]
 800fe3e:	f003 0301 	and.w	r3, r3, #1
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	370c      	adds	r7, #12
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
	...

0800fe50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b085      	sub	sp, #20
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	4b09      	ldr	r3, [pc, #36]	; (800fe94 <USB_ActivateSetup+0x44>)
 800fe6e:	4013      	ands	r3, r2
 800fe70:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	68fa      	ldr	r2, [r7, #12]
 800fe7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fe86:	2300      	movs	r3, #0
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3714      	adds	r7, #20
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr
 800fe94:	fffff800 	.word	0xfffff800

0800fe98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b087      	sub	sp, #28
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	460b      	mov	r3, r1
 800fea2:	607a      	str	r2, [r7, #4]
 800fea4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	333c      	adds	r3, #60	; 0x3c
 800feae:	3304      	adds	r3, #4
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	4a26      	ldr	r2, [pc, #152]	; (800ff50 <USB_EP0_OutStart+0xb8>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d90a      	bls.n	800fed2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fecc:	d101      	bne.n	800fed2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fece:	2300      	movs	r3, #0
 800fed0:	e037      	b.n	800ff42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fed8:	461a      	mov	r2, r3
 800feda:	2300      	movs	r3, #0
 800fedc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee4:	691b      	ldr	r3, [r3, #16]
 800fee6:	697a      	ldr	r2, [r7, #20]
 800fee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	697a      	ldr	r2, [r7, #20]
 800fefc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff00:	f043 0318 	orr.w	r3, r3, #24
 800ff04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff0c:	691b      	ldr	r3, [r3, #16]
 800ff0e:	697a      	ldr	r2, [r7, #20]
 800ff10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ff18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ff1a:	7afb      	ldrb	r3, [r7, #11]
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d10f      	bne.n	800ff40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff26:	461a      	mov	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	697a      	ldr	r2, [r7, #20]
 800ff36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ff3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff40:	2300      	movs	r3, #0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	371c      	adds	r7, #28
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	4f54300a 	.word	0x4f54300a

0800ff54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b085      	sub	sp, #20
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	3301      	adds	r3, #1
 800ff64:	60fb      	str	r3, [r7, #12]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	4a13      	ldr	r2, [pc, #76]	; (800ffb8 <USB_CoreReset+0x64>)
 800ff6a:	4293      	cmp	r3, r2
 800ff6c:	d901      	bls.n	800ff72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	e01b      	b.n	800ffaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	daf2      	bge.n	800ff60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	691b      	ldr	r3, [r3, #16]
 800ff82:	f043 0201 	orr.w	r2, r3, #1
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	60fb      	str	r3, [r7, #12]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	4a09      	ldr	r2, [pc, #36]	; (800ffb8 <USB_CoreReset+0x64>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d901      	bls.n	800ff9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ff98:	2303      	movs	r3, #3
 800ff9a:	e006      	b.n	800ffaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	691b      	ldr	r3, [r3, #16]
 800ffa0:	f003 0301 	and.w	r3, r3, #1
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d0f0      	beq.n	800ff8a <USB_CoreReset+0x36>

  return HAL_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3714      	adds	r7, #20
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	00030d40 	.word	0x00030d40

0800ffbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ffc0:	4904      	ldr	r1, [pc, #16]	; (800ffd4 <MX_FATFS_Init+0x18>)
 800ffc2:	4805      	ldr	r0, [pc, #20]	; (800ffd8 <MX_FATFS_Init+0x1c>)
 800ffc4:	f001 fea0 	bl	8011d08 <FATFS_LinkDriver>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	461a      	mov	r2, r3
 800ffcc:	4b03      	ldr	r3, [pc, #12]	; (800ffdc <MX_FATFS_Init+0x20>)
 800ffce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ffd0:	bf00      	nop
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	24000554 	.word	0x24000554
 800ffd8:	08013190 	.word	0x08013190
 800ffdc:	24000550 	.word	0x24000550

0800ffe0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ffea:	f000 f885 	bl	80100f8 <BSP_SD_IsDetected>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b01      	cmp	r3, #1
 800fff2:	d001      	beq.n	800fff8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fff4:	2302      	movs	r3, #2
 800fff6:	e012      	b.n	801001e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fff8:	480b      	ldr	r0, [pc, #44]	; (8010028 <BSP_SD_Init+0x48>)
 800fffa:	f7f9 fdb5 	bl	8009b68 <HAL_SD_Init>
 800fffe:	4603      	mov	r3, r0
 8010000:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010002:	79fb      	ldrb	r3, [r7, #7]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d109      	bne.n	801001c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010008:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801000c:	4806      	ldr	r0, [pc, #24]	; (8010028 <BSP_SD_Init+0x48>)
 801000e:	f7fa fc59 	bl	800a8c4 <HAL_SD_ConfigWideBusOperation>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d001      	beq.n	801001c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010018:	2301      	movs	r3, #1
 801001a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801001c:	79fb      	ldrb	r3, [r7, #7]
}
 801001e:	4618      	mov	r0, r3
 8010020:	3708      	adds	r7, #8
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	24000274 	.word	0x24000274

0801002c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b086      	sub	sp, #24
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010038:	2300      	movs	r3, #0
 801003a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	68ba      	ldr	r2, [r7, #8]
 8010040:	68f9      	ldr	r1, [r7, #12]
 8010042:	4806      	ldr	r0, [pc, #24]	; (801005c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010044:	f7f9 fea8 	bl	8009d98 <HAL_SD_ReadBlocks_DMA>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801004e:	2301      	movs	r3, #1
 8010050:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010052:	7dfb      	ldrb	r3, [r7, #23]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3718      	adds	r7, #24
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	24000274 	.word	0x24000274

08010060 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b086      	sub	sp, #24
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801006c:	2300      	movs	r3, #0
 801006e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	68ba      	ldr	r2, [r7, #8]
 8010074:	68f9      	ldr	r1, [r7, #12]
 8010076:	4806      	ldr	r0, [pc, #24]	; (8010090 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010078:	f7f9 ff36 	bl	8009ee8 <HAL_SD_WriteBlocks_DMA>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d001      	beq.n	8010086 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010082:	2301      	movs	r3, #1
 8010084:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010086:	7dfb      	ldrb	r3, [r7, #23]
}
 8010088:	4618      	mov	r0, r3
 801008a:	3718      	adds	r7, #24
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	24000274 	.word	0x24000274

08010094 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010098:	4805      	ldr	r0, [pc, #20]	; (80100b0 <BSP_SD_GetCardState+0x1c>)
 801009a:	f7fa fd23 	bl	800aae4 <HAL_SD_GetCardState>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b04      	cmp	r3, #4
 80100a2:	bf14      	ite	ne
 80100a4:	2301      	movne	r3, #1
 80100a6:	2300      	moveq	r3, #0
 80100a8:	b2db      	uxtb	r3, r3
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	24000274 	.word	0x24000274

080100b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80100bc:	6879      	ldr	r1, [r7, #4]
 80100be:	4803      	ldr	r0, [pc, #12]	; (80100cc <BSP_SD_GetCardInfo+0x18>)
 80100c0:	f7fa fbd4 	bl	800a86c <HAL_SD_GetCardInfo>
}
 80100c4:	bf00      	nop
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	24000274 	.word	0x24000274

080100d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80100d8:	f000 f984 	bl	80103e4 <BSP_SD_WriteCpltCallback>
}
 80100dc:	bf00      	nop
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80100ec:	f000 f986 	bl	80103fc <BSP_SD_ReadCpltCallback>
}
 80100f0:	bf00      	nop
 80100f2:	3708      	adds	r7, #8
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80100fe:	2301      	movs	r3, #1
 8010100:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8010102:	79fb      	ldrb	r3, [r7, #7]
 8010104:	b2db      	uxtb	r3, r3
}
 8010106:	4618      	mov	r0, r3
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b084      	sub	sp, #16
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801011a:	f7f1 fc1f 	bl	800195c <HAL_GetTick>
 801011e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010120:	e006      	b.n	8010130 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010122:	f7ff ffb7 	bl	8010094 <BSP_SD_GetCardState>
 8010126:	4603      	mov	r3, r0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d101      	bne.n	8010130 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801012c:	2300      	movs	r3, #0
 801012e:	e009      	b.n	8010144 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010130:	f7f1 fc14 	bl	800195c <HAL_GetTick>
 8010134:	4602      	mov	r2, r0
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	429a      	cmp	r2, r3
 801013e:	d8f0      	bhi.n	8010122 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010144:	4618      	mov	r0, r3
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	4603      	mov	r3, r0
 8010154:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010156:	4b0b      	ldr	r3, [pc, #44]	; (8010184 <SD_CheckStatus+0x38>)
 8010158:	2201      	movs	r2, #1
 801015a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801015c:	f7ff ff9a 	bl	8010094 <BSP_SD_GetCardState>
 8010160:	4603      	mov	r3, r0
 8010162:	2b00      	cmp	r3, #0
 8010164:	d107      	bne.n	8010176 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010166:	4b07      	ldr	r3, [pc, #28]	; (8010184 <SD_CheckStatus+0x38>)
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	b2db      	uxtb	r3, r3
 801016c:	f023 0301 	bic.w	r3, r3, #1
 8010170:	b2da      	uxtb	r2, r3
 8010172:	4b04      	ldr	r3, [pc, #16]	; (8010184 <SD_CheckStatus+0x38>)
 8010174:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010176:	4b03      	ldr	r3, [pc, #12]	; (8010184 <SD_CheckStatus+0x38>)
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	b2db      	uxtb	r3, r3
}
 801017c:	4618      	mov	r0, r3
 801017e:	3708      	adds	r7, #8
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	2400000d 	.word	0x2400000d

08010188 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	4603      	mov	r3, r0
 8010190:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010192:	f7ff ff25 	bl	800ffe0 <BSP_SD_Init>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d107      	bne.n	80101ac <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801019c:	79fb      	ldrb	r3, [r7, #7]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7ff ffd4 	bl	801014c <SD_CheckStatus>
 80101a4:	4603      	mov	r3, r0
 80101a6:	461a      	mov	r2, r3
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <SD_initialize+0x34>)
 80101aa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80101ac:	4b03      	ldr	r3, [pc, #12]	; (80101bc <SD_initialize+0x34>)
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	b2db      	uxtb	r3, r3
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	2400000d 	.word	0x2400000d

080101c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	4603      	mov	r3, r0
 80101c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80101ca:	79fb      	ldrb	r3, [r7, #7]
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7ff ffbd 	bl	801014c <SD_CheckStatus>
 80101d2:	4603      	mov	r3, r0
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b086      	sub	sp, #24
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	60b9      	str	r1, [r7, #8]
 80101e4:	607a      	str	r2, [r7, #4]
 80101e6:	603b      	str	r3, [r7, #0]
 80101e8:	4603      	mov	r3, r0
 80101ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80101ec:	2301      	movs	r3, #1
 80101ee:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80101f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80101f4:	f7ff ff8d 	bl	8010112 <SD_CheckStatusWithTimeout>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	da01      	bge.n	8010202 <SD_read+0x26>
  {
    return res;
 80101fe:	7dfb      	ldrb	r3, [r7, #23]
 8010200:	e03b      	b.n	801027a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	6879      	ldr	r1, [r7, #4]
 8010206:	68b8      	ldr	r0, [r7, #8]
 8010208:	f7ff ff10 	bl	801002c <BSP_SD_ReadBlocks_DMA>
 801020c:	4603      	mov	r3, r0
 801020e:	2b00      	cmp	r3, #0
 8010210:	d132      	bne.n	8010278 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010212:	4b1c      	ldr	r3, [pc, #112]	; (8010284 <SD_read+0xa8>)
 8010214:	2200      	movs	r2, #0
 8010216:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010218:	f7f1 fba0 	bl	800195c <HAL_GetTick>
 801021c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801021e:	bf00      	nop
 8010220:	4b18      	ldr	r3, [pc, #96]	; (8010284 <SD_read+0xa8>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d108      	bne.n	801023a <SD_read+0x5e>
 8010228:	f7f1 fb98 	bl	800195c <HAL_GetTick>
 801022c:	4602      	mov	r2, r0
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	1ad3      	subs	r3, r2, r3
 8010232:	f247 522f 	movw	r2, #29999	; 0x752f
 8010236:	4293      	cmp	r3, r2
 8010238:	d9f2      	bls.n	8010220 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801023a:	4b12      	ldr	r3, [pc, #72]	; (8010284 <SD_read+0xa8>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d102      	bne.n	8010248 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010242:	2301      	movs	r3, #1
 8010244:	75fb      	strb	r3, [r7, #23]
 8010246:	e017      	b.n	8010278 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010248:	4b0e      	ldr	r3, [pc, #56]	; (8010284 <SD_read+0xa8>)
 801024a:	2200      	movs	r2, #0
 801024c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801024e:	f7f1 fb85 	bl	800195c <HAL_GetTick>
 8010252:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010254:	e007      	b.n	8010266 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010256:	f7ff ff1d 	bl	8010094 <BSP_SD_GetCardState>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d102      	bne.n	8010266 <SD_read+0x8a>
          {
            res = RES_OK;
 8010260:	2300      	movs	r3, #0
 8010262:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010264:	e008      	b.n	8010278 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010266:	f7f1 fb79 	bl	800195c <HAL_GetTick>
 801026a:	4602      	mov	r2, r0
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	f247 522f 	movw	r2, #29999	; 0x752f
 8010274:	4293      	cmp	r3, r2
 8010276:	d9ee      	bls.n	8010256 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010278:	7dfb      	ldrb	r3, [r7, #23]
}
 801027a:	4618      	mov	r0, r3
 801027c:	3718      	adds	r7, #24
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	2400020c 	.word	0x2400020c

08010288 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b086      	sub	sp, #24
 801028c:	af00      	add	r7, sp, #0
 801028e:	60b9      	str	r1, [r7, #8]
 8010290:	607a      	str	r2, [r7, #4]
 8010292:	603b      	str	r3, [r7, #0]
 8010294:	4603      	mov	r3, r0
 8010296:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010298:	2301      	movs	r3, #1
 801029a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801029c:	4b24      	ldr	r3, [pc, #144]	; (8010330 <SD_write+0xa8>)
 801029e:	2200      	movs	r2, #0
 80102a0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80102a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80102a6:	f7ff ff34 	bl	8010112 <SD_CheckStatusWithTimeout>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	da01      	bge.n	80102b4 <SD_write+0x2c>
  {
    return res;
 80102b0:	7dfb      	ldrb	r3, [r7, #23]
 80102b2:	e038      	b.n	8010326 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80102b4:	683a      	ldr	r2, [r7, #0]
 80102b6:	6879      	ldr	r1, [r7, #4]
 80102b8:	68b8      	ldr	r0, [r7, #8]
 80102ba:	f7ff fed1 	bl	8010060 <BSP_SD_WriteBlocks_DMA>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d12f      	bne.n	8010324 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80102c4:	f7f1 fb4a 	bl	800195c <HAL_GetTick>
 80102c8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80102ca:	bf00      	nop
 80102cc:	4b18      	ldr	r3, [pc, #96]	; (8010330 <SD_write+0xa8>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d108      	bne.n	80102e6 <SD_write+0x5e>
 80102d4:	f7f1 fb42 	bl	800195c <HAL_GetTick>
 80102d8:	4602      	mov	r2, r0
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	1ad3      	subs	r3, r2, r3
 80102de:	f247 522f 	movw	r2, #29999	; 0x752f
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d9f2      	bls.n	80102cc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80102e6:	4b12      	ldr	r3, [pc, #72]	; (8010330 <SD_write+0xa8>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d102      	bne.n	80102f4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80102ee:	2301      	movs	r3, #1
 80102f0:	75fb      	strb	r3, [r7, #23]
 80102f2:	e017      	b.n	8010324 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80102f4:	4b0e      	ldr	r3, [pc, #56]	; (8010330 <SD_write+0xa8>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80102fa:	f7f1 fb2f 	bl	800195c <HAL_GetTick>
 80102fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010300:	e007      	b.n	8010312 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010302:	f7ff fec7 	bl	8010094 <BSP_SD_GetCardState>
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d102      	bne.n	8010312 <SD_write+0x8a>
          {
            res = RES_OK;
 801030c:	2300      	movs	r3, #0
 801030e:	75fb      	strb	r3, [r7, #23]
            break;
 8010310:	e008      	b.n	8010324 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010312:	f7f1 fb23 	bl	800195c <HAL_GetTick>
 8010316:	4602      	mov	r2, r0
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010320:	4293      	cmp	r3, r2
 8010322:	d9ee      	bls.n	8010302 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010324:	7dfb      	ldrb	r3, [r7, #23]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3718      	adds	r7, #24
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	24000208 	.word	0x24000208

08010334 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b08c      	sub	sp, #48	; 0x30
 8010338:	af00      	add	r7, sp, #0
 801033a:	4603      	mov	r3, r0
 801033c:	603a      	str	r2, [r7, #0]
 801033e:	71fb      	strb	r3, [r7, #7]
 8010340:	460b      	mov	r3, r1
 8010342:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010344:	2301      	movs	r3, #1
 8010346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801034a:	4b25      	ldr	r3, [pc, #148]	; (80103e0 <SD_ioctl+0xac>)
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	b2db      	uxtb	r3, r3
 8010350:	f003 0301 	and.w	r3, r3, #1
 8010354:	2b00      	cmp	r3, #0
 8010356:	d001      	beq.n	801035c <SD_ioctl+0x28>
 8010358:	2303      	movs	r3, #3
 801035a:	e03c      	b.n	80103d6 <SD_ioctl+0xa2>

  switch (cmd)
 801035c:	79bb      	ldrb	r3, [r7, #6]
 801035e:	2b03      	cmp	r3, #3
 8010360:	d834      	bhi.n	80103cc <SD_ioctl+0x98>
 8010362:	a201      	add	r2, pc, #4	; (adr r2, 8010368 <SD_ioctl+0x34>)
 8010364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010368:	08010379 	.word	0x08010379
 801036c:	08010381 	.word	0x08010381
 8010370:	08010399 	.word	0x08010399
 8010374:	080103b3 	.word	0x080103b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010378:	2300      	movs	r3, #0
 801037a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801037e:	e028      	b.n	80103d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010380:	f107 0308 	add.w	r3, r7, #8
 8010384:	4618      	mov	r0, r3
 8010386:	f7ff fe95 	bl	80100b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801038a:	6a3a      	ldr	r2, [r7, #32]
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010390:	2300      	movs	r3, #0
 8010392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010396:	e01c      	b.n	80103d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010398:	f107 0308 	add.w	r3, r7, #8
 801039c:	4618      	mov	r0, r3
 801039e:	f7ff fe89 	bl	80100b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80103a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80103aa:	2300      	movs	r3, #0
 80103ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103b0:	e00f      	b.n	80103d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80103b2:	f107 0308 	add.w	r3, r7, #8
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7ff fe7c 	bl	80100b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80103bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103be:	0a5a      	lsrs	r2, r3, #9
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80103c4:	2300      	movs	r3, #0
 80103c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103ca:	e002      	b.n	80103d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80103cc:	2304      	movs	r3, #4
 80103ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80103d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3730      	adds	r7, #48	; 0x30
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	2400000d 	.word	0x2400000d

080103e4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80103e4:	b480      	push	{r7}
 80103e6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80103e8:	4b03      	ldr	r3, [pc, #12]	; (80103f8 <BSP_SD_WriteCpltCallback+0x14>)
 80103ea:	2201      	movs	r2, #1
 80103ec:	601a      	str	r2, [r3, #0]
}
 80103ee:	bf00      	nop
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	24000208 	.word	0x24000208

080103fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80103fc:	b480      	push	{r7}
 80103fe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010400:	4b03      	ldr	r3, [pc, #12]	; (8010410 <BSP_SD_ReadCpltCallback+0x14>)
 8010402:	2201      	movs	r2, #1
 8010404:	601a      	str	r2, [r3, #0]
}
 8010406:	bf00      	nop
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr
 8010410:	2400020c 	.word	0x2400020c

08010414 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	460b      	mov	r3, r1
 801041e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010420:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010424:	f002 fa1a 	bl	801285c <malloc>
 8010428:	4603      	mov	r3, r0
 801042a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d105      	bne.n	801043e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2200      	movs	r2, #0
 8010436:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801043a:	2302      	movs	r3, #2
 801043c:	e066      	b.n	801050c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	68fa      	ldr	r2, [r7, #12]
 8010442:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	7c1b      	ldrb	r3, [r3, #16]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d119      	bne.n	8010482 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801044e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010452:	2202      	movs	r2, #2
 8010454:	2181      	movs	r1, #129	; 0x81
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	f002 f887 	bl	801256a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2201      	movs	r2, #1
 8010460:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010466:	2202      	movs	r2, #2
 8010468:	2101      	movs	r1, #1
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f002 f87d 	bl	801256a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2210      	movs	r2, #16
 801047c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010480:	e016      	b.n	80104b0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010482:	2340      	movs	r3, #64	; 0x40
 8010484:	2202      	movs	r2, #2
 8010486:	2181      	movs	r1, #129	; 0x81
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f002 f86e 	bl	801256a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2201      	movs	r2, #1
 8010492:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010494:	2340      	movs	r3, #64	; 0x40
 8010496:	2202      	movs	r2, #2
 8010498:	2101      	movs	r1, #1
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f002 f865 	bl	801256a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2201      	movs	r2, #1
 80104a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2210      	movs	r2, #16
 80104ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80104b0:	2308      	movs	r3, #8
 80104b2:	2203      	movs	r2, #3
 80104b4:	2182      	movs	r1, #130	; 0x82
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f002 f857 	bl	801256a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2201      	movs	r2, #1
 80104c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2200      	movs	r2, #0
 80104d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2200      	movs	r2, #0
 80104da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	7c1b      	ldrb	r3, [r3, #16]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d109      	bne.n	80104fa <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80104ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104f0:	2101      	movs	r1, #1
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f002 f928 	bl	8012748 <USBD_LL_PrepareReceive>
 80104f8:	e007      	b.n	801050a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010500:	2340      	movs	r3, #64	; 0x40
 8010502:	2101      	movs	r1, #1
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f002 f91f 	bl	8012748 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801050a:	2300      	movs	r3, #0
}
 801050c:	4618      	mov	r0, r3
 801050e:	3710      	adds	r7, #16
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	460b      	mov	r3, r1
 801051e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010520:	2300      	movs	r3, #0
 8010522:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010524:	2181      	movs	r1, #129	; 0x81
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f002 f845 	bl	80125b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010532:	2101      	movs	r1, #1
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f002 f83e 	bl	80125b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2200      	movs	r2, #0
 801053e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010542:	2182      	movs	r1, #130	; 0x82
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f002 f836 	bl	80125b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00e      	beq.n	8010582 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010574:	4618      	mov	r0, r3
 8010576:	f002 f979 	bl	801286c <free>
    pdev->pClassData = NULL;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010582:	7bfb      	ldrb	r3, [r7, #15]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b086      	sub	sp, #24
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801059c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801059e:	2300      	movs	r3, #0
 80105a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80105a2:	2300      	movs	r3, #0
 80105a4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d03a      	beq.n	801062c <USBD_CDC_Setup+0xa0>
 80105b6:	2b20      	cmp	r3, #32
 80105b8:	f040 809a 	bne.w	80106f0 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	88db      	ldrh	r3, [r3, #6]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d029      	beq.n	8010618 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	b25b      	sxtb	r3, r3
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	da11      	bge.n	80105f2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80105da:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105dc:	683a      	ldr	r2, [r7, #0]
 80105de:	88d2      	ldrh	r2, [r2, #6]
 80105e0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80105e2:	6939      	ldr	r1, [r7, #16]
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	88db      	ldrh	r3, [r3, #6]
 80105e8:	461a      	mov	r2, r3
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f001 fabf 	bl	8011b6e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80105f0:	e085      	b.n	80106fe <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	785a      	ldrb	r2, [r3, #1]
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	88db      	ldrh	r3, [r3, #6]
 8010600:	b2da      	uxtb	r2, r3
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010608:	6939      	ldr	r1, [r7, #16]
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	88db      	ldrh	r3, [r3, #6]
 801060e:	461a      	mov	r2, r3
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f001 fad8 	bl	8011bc6 <USBD_CtlPrepareRx>
    break;
 8010616:	e072      	b.n	80106fe <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	683a      	ldr	r2, [r7, #0]
 8010622:	7850      	ldrb	r0, [r2, #1]
 8010624:	2200      	movs	r2, #0
 8010626:	6839      	ldr	r1, [r7, #0]
 8010628:	4798      	blx	r3
    break;
 801062a:	e068      	b.n	80106fe <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	785b      	ldrb	r3, [r3, #1]
 8010630:	2b0b      	cmp	r3, #11
 8010632:	d852      	bhi.n	80106da <USBD_CDC_Setup+0x14e>
 8010634:	a201      	add	r2, pc, #4	; (adr r2, 801063c <USBD_CDC_Setup+0xb0>)
 8010636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801063a:	bf00      	nop
 801063c:	0801066d 	.word	0x0801066d
 8010640:	080106e9 	.word	0x080106e9
 8010644:	080106db 	.word	0x080106db
 8010648:	080106db 	.word	0x080106db
 801064c:	080106db 	.word	0x080106db
 8010650:	080106db 	.word	0x080106db
 8010654:	080106db 	.word	0x080106db
 8010658:	080106db 	.word	0x080106db
 801065c:	080106db 	.word	0x080106db
 8010660:	080106db 	.word	0x080106db
 8010664:	08010697 	.word	0x08010697
 8010668:	080106c1 	.word	0x080106c1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010672:	b2db      	uxtb	r3, r3
 8010674:	2b03      	cmp	r3, #3
 8010676:	d107      	bne.n	8010688 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010678:	f107 030c 	add.w	r3, r7, #12
 801067c:	2202      	movs	r2, #2
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f001 fa74 	bl	8011b6e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010686:	e032      	b.n	80106ee <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 8010688:	6839      	ldr	r1, [r7, #0]
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f001 f9fe 	bl	8011a8c <USBD_CtlError>
        ret = USBD_FAIL;
 8010690:	2303      	movs	r3, #3
 8010692:	75fb      	strb	r3, [r7, #23]
      break;
 8010694:	e02b      	b.n	80106ee <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801069c:	b2db      	uxtb	r3, r3
 801069e:	2b03      	cmp	r3, #3
 80106a0:	d107      	bne.n	80106b2 <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80106a2:	f107 030f 	add.w	r3, r7, #15
 80106a6:	2201      	movs	r2, #1
 80106a8:	4619      	mov	r1, r3
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f001 fa5f 	bl	8011b6e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80106b0:	e01d      	b.n	80106ee <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 80106b2:	6839      	ldr	r1, [r7, #0]
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f001 f9e9 	bl	8011a8c <USBD_CtlError>
        ret = USBD_FAIL;
 80106ba:	2303      	movs	r3, #3
 80106bc:	75fb      	strb	r3, [r7, #23]
      break;
 80106be:	e016      	b.n	80106ee <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	2b03      	cmp	r3, #3
 80106ca:	d00f      	beq.n	80106ec <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 80106cc:	6839      	ldr	r1, [r7, #0]
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f001 f9dc 	bl	8011a8c <USBD_CtlError>
        ret = USBD_FAIL;
 80106d4:	2303      	movs	r3, #3
 80106d6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80106d8:	e008      	b.n	80106ec <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80106da:	6839      	ldr	r1, [r7, #0]
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f001 f9d5 	bl	8011a8c <USBD_CtlError>
      ret = USBD_FAIL;
 80106e2:	2303      	movs	r3, #3
 80106e4:	75fb      	strb	r3, [r7, #23]
      break;
 80106e6:	e002      	b.n	80106ee <USBD_CDC_Setup+0x162>
      break;
 80106e8:	bf00      	nop
 80106ea:	e008      	b.n	80106fe <USBD_CDC_Setup+0x172>
      break;
 80106ec:	bf00      	nop
    }
    break;
 80106ee:	e006      	b.n	80106fe <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 80106f0:	6839      	ldr	r1, [r7, #0]
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f001 f9ca 	bl	8011a8c <USBD_CtlError>
    ret = USBD_FAIL;
 80106f8:	2303      	movs	r3, #3
 80106fa:	75fb      	strb	r3, [r7, #23]
    break;
 80106fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80106fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3718      	adds	r7, #24
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	460b      	mov	r3, r1
 8010712:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801071a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010722:	2b00      	cmp	r3, #0
 8010724:	d101      	bne.n	801072a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010726:	2303      	movs	r3, #3
 8010728:	e049      	b.n	80107be <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010730:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010732:	78fa      	ldrb	r2, [r7, #3]
 8010734:	6879      	ldr	r1, [r7, #4]
 8010736:	4613      	mov	r3, r2
 8010738:	009b      	lsls	r3, r3, #2
 801073a:	4413      	add	r3, r2
 801073c:	009b      	lsls	r3, r3, #2
 801073e:	440b      	add	r3, r1
 8010740:	3318      	adds	r3, #24
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d029      	beq.n	801079c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010748:	78fa      	ldrb	r2, [r7, #3]
 801074a:	6879      	ldr	r1, [r7, #4]
 801074c:	4613      	mov	r3, r2
 801074e:	009b      	lsls	r3, r3, #2
 8010750:	4413      	add	r3, r2
 8010752:	009b      	lsls	r3, r3, #2
 8010754:	440b      	add	r3, r1
 8010756:	3318      	adds	r3, #24
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	78f9      	ldrb	r1, [r7, #3]
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	460b      	mov	r3, r1
 8010760:	00db      	lsls	r3, r3, #3
 8010762:	1a5b      	subs	r3, r3, r1
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4403      	add	r3, r0
 8010768:	3344      	adds	r3, #68	; 0x44
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010770:	fb03 f301 	mul.w	r3, r3, r1
 8010774:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010776:	2b00      	cmp	r3, #0
 8010778:	d110      	bne.n	801079c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801077a:	78fa      	ldrb	r2, [r7, #3]
 801077c:	6879      	ldr	r1, [r7, #4]
 801077e:	4613      	mov	r3, r2
 8010780:	009b      	lsls	r3, r3, #2
 8010782:	4413      	add	r3, r2
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	440b      	add	r3, r1
 8010788:	3318      	adds	r3, #24
 801078a:	2200      	movs	r2, #0
 801078c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801078e:	78f9      	ldrb	r1, [r7, #3]
 8010790:	2300      	movs	r3, #0
 8010792:	2200      	movs	r2, #0
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f001 ffb6 	bl	8012706 <USBD_LL_Transmit>
 801079a:	e00f      	b.n	80107bc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	2200      	movs	r2, #0
 80107a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107aa:	691b      	ldr	r3, [r3, #16]
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80107b8:	78fa      	ldrb	r2, [r7, #3]
 80107ba:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80107bc:	2300      	movs	r3, #0
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3710      	adds	r7, #16
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}

080107c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80107c6:	b580      	push	{r7, lr}
 80107c8:	b084      	sub	sp, #16
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
 80107ce:	460b      	mov	r3, r1
 80107d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d101      	bne.n	80107e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80107e4:	2303      	movs	r3, #3
 80107e6:	e015      	b.n	8010814 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80107e8:	78fb      	ldrb	r3, [r7, #3]
 80107ea:	4619      	mov	r1, r3
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f001 ffcc 	bl	801278a <USBD_LL_GetRxDataSize>
 80107f2:	4602      	mov	r2, r0
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	68fa      	ldr	r2, [r7, #12]
 8010804:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010808:	68fa      	ldr	r2, [r7, #12]
 801080a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801080e:	4611      	mov	r1, r2
 8010810:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010812:	2300      	movs	r3, #0
}
 8010814:	4618      	mov	r0, r3
 8010816:	3710      	adds	r7, #16
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b084      	sub	sp, #16
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801082a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d015      	beq.n	8010862 <USBD_CDC_EP0_RxReady+0x46>
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801083c:	2bff      	cmp	r3, #255	; 0xff
 801083e:	d010      	beq.n	8010862 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	68fa      	ldr	r2, [r7, #12]
 801084a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801084e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010850:	68fa      	ldr	r2, [r7, #12]
 8010852:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010856:	b292      	uxth	r2, r2
 8010858:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	22ff      	movs	r2, #255	; 0xff
 801085e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8010862:	2300      	movs	r3, #0
}
 8010864:	4618      	mov	r0, r3
 8010866:	3710      	adds	r7, #16
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2243      	movs	r2, #67	; 0x43
 8010878:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801087a:	4b03      	ldr	r3, [pc, #12]	; (8010888 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801087c:	4618      	mov	r0, r3
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr
 8010888:	24000098 	.word	0x24000098

0801088c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2243      	movs	r2, #67	; 0x43
 8010898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801089a:	4b03      	ldr	r3, [pc, #12]	; (80108a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801089c:	4618      	mov	r0, r3
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr
 80108a8:	24000054 	.word	0x24000054

080108ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2243      	movs	r2, #67	; 0x43
 80108b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80108ba:	4b03      	ldr	r3, [pc, #12]	; (80108c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80108bc:	4618      	mov	r0, r3
 80108be:	370c      	adds	r7, #12
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr
 80108c8:	240000dc 	.word	0x240000dc

080108cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	220a      	movs	r2, #10
 80108d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80108da:	4b03      	ldr	r3, [pc, #12]	; (80108e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80108dc:	4618      	mov	r0, r3
 80108de:	370c      	adds	r7, #12
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr
 80108e8:	24000010 	.word	0x24000010

080108ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b083      	sub	sp, #12
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d101      	bne.n	8010900 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80108fc:	2303      	movs	r3, #3
 80108fe:	e004      	b.n	801090a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	683a      	ldr	r2, [r7, #0]
 8010904:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	370c      	adds	r7, #12
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr

08010916 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010916:	b480      	push	{r7}
 8010918:	b087      	sub	sp, #28
 801091a:	af00      	add	r7, sp, #0
 801091c:	60f8      	str	r0, [r7, #12]
 801091e:	60b9      	str	r1, [r7, #8]
 8010920:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010928:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	68ba      	ldr	r2, [r7, #8]
 801092e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801093a:	2300      	movs	r3, #0
}
 801093c:	4618      	mov	r0, r3
 801093e:	371c      	adds	r7, #28
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010948:	b480      	push	{r7}
 801094a:	b085      	sub	sp, #20
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010958:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010962:	2300      	movs	r3, #0
}
 8010964:	4618      	mov	r0, r3
 8010966:	3714      	adds	r7, #20
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr

08010970 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801097e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010980:	2301      	movs	r3, #1
 8010982:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801098a:	2b00      	cmp	r3, #0
 801098c:	d101      	bne.n	8010992 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801098e:	2303      	movs	r3, #3
 8010990:	e01a      	b.n	80109c8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010998:	2b00      	cmp	r3, #0
 801099a:	d114      	bne.n	80109c6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	2201      	movs	r2, #1
 80109a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80109ba:	2181      	movs	r1, #129	; 0x81
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f001 fea2 	bl	8012706 <USBD_LL_Transmit>

    ret = USBD_OK;
 80109c2:	2300      	movs	r3, #0
 80109c4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3710      	adds	r7, #16
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d101      	bne.n	80109ee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80109ea:	2303      	movs	r3, #3
 80109ec:	e016      	b.n	8010a1c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	7c1b      	ldrb	r3, [r3, #16]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d109      	bne.n	8010a0a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80109fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a00:	2101      	movs	r1, #1
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f001 fea0 	bl	8012748 <USBD_LL_PrepareReceive>
 8010a08:	e007      	b.n	8010a1a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010a10:	2340      	movs	r3, #64	; 0x40
 8010a12:	2101      	movs	r1, #1
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f001 fe97 	bl	8012748 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010a1a:	2300      	movs	r3, #0
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3710      	adds	r7, #16
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b086      	sub	sp, #24
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	60f8      	str	r0, [r7, #12]
 8010a2c:	60b9      	str	r1, [r7, #8]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d101      	bne.n	8010a3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010a38:	2303      	movs	r3, #3
 8010a3a:	e025      	b.n	8010a88 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d003      	beq.n	8010a4e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d003      	beq.n	8010a60 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d003      	beq.n	8010a6e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	68ba      	ldr	r2, [r7, #8]
 8010a6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2201      	movs	r2, #1
 8010a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	79fa      	ldrb	r2, [r7, #7]
 8010a7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	f001 fd09 	bl	8012494 <USBD_LL_Init>
 8010a82:	4603      	mov	r3, r0
 8010a84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3718      	adds	r7, #24
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d101      	bne.n	8010aa8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010aa4:	2303      	movs	r3, #3
 8010aa6:	e010      	b.n	8010aca <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	683a      	ldr	r2, [r7, #0]
 8010aac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ab8:	f107 020e 	add.w	r2, r7, #14
 8010abc:	4610      	mov	r0, r2
 8010abe:	4798      	blx	r3
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8010ac8:	2300      	movs	r3, #0
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b082      	sub	sp, #8
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f001 fd2a 	bl	8012534 <USBD_LL_Start>
 8010ae0:	4603      	mov	r3, r0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3708      	adds	r7, #8
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}

08010aea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010aea:	b480      	push	{r7}
 8010aec:	b083      	sub	sp, #12
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010af2:	2300      	movs	r3, #0
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	460b      	mov	r3, r1
 8010b0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010b0c:	2303      	movs	r3, #3
 8010b0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d009      	beq.n	8010b2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	78fa      	ldrb	r2, [r7, #3]
 8010b24:	4611      	mov	r1, r2
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	4798      	blx	r3
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3710      	adds	r7, #16
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	460b      	mov	r3, r1
 8010b42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d007      	beq.n	8010b5e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	78fa      	ldrb	r2, [r7, #3]
 8010b58:	4611      	mov	r1, r2
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	4798      	blx	r3
  }

  return USBD_OK;
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3708      	adds	r7, #8
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b78:	6839      	ldr	r1, [r7, #0]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f000 ff4c 	bl	8011a18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2201      	movs	r2, #1
 8010b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010b8e:	461a      	mov	r2, r3
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010b9c:	f003 031f 	and.w	r3, r3, #31
 8010ba0:	2b02      	cmp	r3, #2
 8010ba2:	d01a      	beq.n	8010bda <USBD_LL_SetupStage+0x72>
 8010ba4:	2b02      	cmp	r3, #2
 8010ba6:	d822      	bhi.n	8010bee <USBD_LL_SetupStage+0x86>
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d002      	beq.n	8010bb2 <USBD_LL_SetupStage+0x4a>
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d00a      	beq.n	8010bc6 <USBD_LL_SetupStage+0x5e>
 8010bb0:	e01d      	b.n	8010bee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010bb8:	4619      	mov	r1, r3
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 fa20 	bl	8011000 <USBD_StdDevReq>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8010bc4:	e020      	b.n	8010c08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010bcc:	4619      	mov	r1, r3
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 fa84 	bl	80110dc <USBD_StdItfReq>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8010bd8:	e016      	b.n	8010c08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010be0:	4619      	mov	r1, r3
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 fac3 	bl	801116e <USBD_StdEPReq>
 8010be8:	4603      	mov	r3, r0
 8010bea:	73fb      	strb	r3, [r7, #15]
      break;
 8010bec:	e00c      	b.n	8010c08 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010bf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f001 fcf9 	bl	80125f4 <USBD_LL_StallEP>
 8010c02:	4603      	mov	r3, r0
 8010c04:	73fb      	strb	r3, [r7, #15]
      break;
 8010c06:	bf00      	nop
  }

  return ret;
 8010c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3710      	adds	r7, #16
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b086      	sub	sp, #24
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	60f8      	str	r0, [r7, #12]
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	607a      	str	r2, [r7, #4]
 8010c1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010c20:	7afb      	ldrb	r3, [r7, #11]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d138      	bne.n	8010c98 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010c2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010c34:	2b03      	cmp	r3, #3
 8010c36:	d14c      	bne.n	8010cd2 <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	689a      	ldr	r2, [r3, #8]
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d913      	bls.n	8010c6c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	689a      	ldr	r2, [r3, #8]
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	1ad2      	subs	r2, r2, r3
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	68da      	ldr	r2, [r3, #12]
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	689b      	ldr	r3, [r3, #8]
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	bf28      	it	cs
 8010c5e:	4613      	movcs	r3, r2
 8010c60:	461a      	mov	r2, r3
 8010c62:	6879      	ldr	r1, [r7, #4]
 8010c64:	68f8      	ldr	r0, [r7, #12]
 8010c66:	f000 ffcb 	bl	8011c00 <USBD_CtlContinueRx>
 8010c6a:	e032      	b.n	8010cd2 <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c72:	691b      	ldr	r3, [r3, #16]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d00b      	beq.n	8010c90 <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c7e:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010c80:	2b03      	cmp	r3, #3
 8010c82:	d105      	bne.n	8010c90 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c8a:	691b      	ldr	r3, [r3, #16]
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f000 ffc6 	bl	8011c22 <USBD_CtlSendStatus>
 8010c96:	e01c      	b.n	8010cd2 <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c9e:	699b      	ldr	r3, [r3, #24]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d014      	beq.n	8010cce <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010caa:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 8010cac:	2b03      	cmp	r3, #3
 8010cae:	d10e      	bne.n	8010cce <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cb6:	699b      	ldr	r3, [r3, #24]
 8010cb8:	7afa      	ldrb	r2, [r7, #11]
 8010cba:	4611      	mov	r1, r2
 8010cbc:	68f8      	ldr	r0, [r7, #12]
 8010cbe:	4798      	blx	r3
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010cc4:	7dfb      	ldrb	r3, [r7, #23]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d003      	beq.n	8010cd2 <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 8010cca:	7dfb      	ldrb	r3, [r7, #23]
 8010ccc:	e002      	b.n	8010cd4 <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010cce:	2303      	movs	r3, #3
 8010cd0:	e000      	b.n	8010cd4 <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3718      	adds	r7, #24
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b086      	sub	sp, #24
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	607a      	str	r2, [r7, #4]
 8010ce8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010cea:	7afb      	ldrb	r3, [r7, #11]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d16b      	bne.n	8010dc8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	3314      	adds	r3, #20
 8010cf4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	d156      	bne.n	8010dae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	689a      	ldr	r2, [r3, #8]
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	68db      	ldr	r3, [r3, #12]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d914      	bls.n	8010d36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	689a      	ldr	r2, [r3, #8]
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	1ad2      	subs	r2, r2, r3
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	689b      	ldr	r3, [r3, #8]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	6879      	ldr	r1, [r7, #4]
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f000 ff3e 	bl	8011ba4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d28:	2300      	movs	r3, #0
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	2100      	movs	r1, #0
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f001 fd0a 	bl	8012748 <USBD_LL_PrepareReceive>
 8010d34:	e03b      	b.n	8010dae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	68da      	ldr	r2, [r3, #12]
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d11c      	bne.n	8010d7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	685a      	ldr	r2, [r3, #4]
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d316      	bcc.n	8010d7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	685a      	ldr	r2, [r3, #4]
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d20f      	bcs.n	8010d7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	2100      	movs	r1, #0
 8010d60:	68f8      	ldr	r0, [r7, #12]
 8010d62:	f000 ff1f 	bl	8011ba4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d6e:	2300      	movs	r3, #0
 8010d70:	2200      	movs	r2, #0
 8010d72:	2100      	movs	r1, #0
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f001 fce7 	bl	8012748 <USBD_LL_PrepareReceive>
 8010d7a:	e018      	b.n	8010dae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d00b      	beq.n	8010da0 <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d8e:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010d90:	2b03      	cmp	r3, #3
 8010d92:	d105      	bne.n	8010da0 <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	68f8      	ldr	r0, [r7, #12]
 8010d9e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010da0:	2180      	movs	r1, #128	; 0x80
 8010da2:	68f8      	ldr	r0, [r7, #12]
 8010da4:	f001 fc26 	bl	80125f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010da8:	68f8      	ldr	r0, [r7, #12]
 8010daa:	f000 ff4d 	bl	8011c48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d124      	bne.n	8010e02 <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f7ff fe96 	bl	8010aea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010dc6:	e01c      	b.n	8010e02 <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dce:	695b      	ldr	r3, [r3, #20]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d014      	beq.n	8010dfe <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dda:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 8010ddc:	2b03      	cmp	r3, #3
 8010dde:	d10e      	bne.n	8010dfe <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010de6:	695b      	ldr	r3, [r3, #20]
 8010de8:	7afa      	ldrb	r2, [r7, #11]
 8010dea:	4611      	mov	r1, r2
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	4798      	blx	r3
 8010df0:	4603      	mov	r3, r0
 8010df2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010df4:	7dfb      	ldrb	r3, [r7, #23]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d003      	beq.n	8010e02 <USBD_LL_DataInStage+0x126>
    {
      return ret;
 8010dfa:	7dfb      	ldrb	r3, [r7, #23]
 8010dfc:	e002      	b.n	8010e04 <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010dfe:	2303      	movs	r3, #3
 8010e00:	e000      	b.n	8010e04 <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 8010e02:	2300      	movs	r3, #0
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3718      	adds	r7, #24
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2201      	movs	r2, #1
 8010e18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2200      	movs	r2, #0
 8010e28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d009      	beq.n	8010e50 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	6852      	ldr	r2, [r2, #4]
 8010e48:	b2d2      	uxtb	r2, r2
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010e50:	2340      	movs	r3, #64	; 0x40
 8010e52:	2200      	movs	r2, #0
 8010e54:	2100      	movs	r1, #0
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f001 fb87 	bl	801256a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2201      	movs	r2, #1
 8010e60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2240      	movs	r2, #64	; 0x40
 8010e68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010e6c:	2340      	movs	r3, #64	; 0x40
 8010e6e:	2200      	movs	r2, #0
 8010e70:	2180      	movs	r1, #128	; 0x80
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f001 fb79 	bl	801256a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2240      	movs	r2, #64	; 0x40
 8010e82:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3708      	adds	r7, #8
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010e8e:	b480      	push	{r7}
 8010e90:	b083      	sub	sp, #12
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	460b      	mov	r3, r1
 8010e98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	78fa      	ldrb	r2, [r7, #3]
 8010e9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010ea0:	2300      	movs	r3, #0
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	370c      	adds	r7, #12
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr

08010eae <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010eae:	b480      	push	{r7}
 8010eb0:	b083      	sub	sp, #12
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2204      	movs	r2, #4
 8010ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	370c      	adds	r7, #12
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr

08010eda <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010eda:	b480      	push	{r7}
 8010edc:	b083      	sub	sp, #12
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	2b04      	cmp	r3, #4
 8010eec:	d106      	bne.n	8010efc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010ef4:	b2da      	uxtb	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010efc:	2300      	movs	r3, #0
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	370c      	adds	r7, #12
 8010f02:	46bd      	mov	sp, r7
 8010f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f08:	4770      	bx	lr

08010f0a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b082      	sub	sp, #8
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	2b03      	cmp	r3, #3
 8010f1c:	d10b      	bne.n	8010f36 <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f24:	69db      	ldr	r3, [r3, #28]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d005      	beq.n	8010f36 <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f30:	69db      	ldr	r3, [r3, #28]
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f36:	2300      	movs	r3, #0
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3708      	adds	r7, #8
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b083      	sub	sp, #12
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	460b      	mov	r3, r1
 8010f4a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr

08010f5a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010f5a:	b480      	push	{r7}
 8010f5c:	b083      	sub	sp, #12
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]
 8010f62:	460b      	mov	r3, r1
 8010f64:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010f66:	2300      	movs	r3, #0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	370c      	adds	r7, #12
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr

08010f74 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f7c:	2300      	movs	r3, #0
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	370c      	adds	r7, #12
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr

08010f8a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b082      	sub	sp, #8
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2201      	movs	r2, #1
 8010f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d009      	beq.n	8010fb8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	6852      	ldr	r2, [r2, #4]
 8010fb0:	b2d2      	uxtb	r2, r2
 8010fb2:	4611      	mov	r1, r2
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	4798      	blx	r3
  }

  return USBD_OK;
 8010fb8:	2300      	movs	r3, #0
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010fc2:	b480      	push	{r7}
 8010fc4:	b087      	sub	sp, #28
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010fe0:	8a3b      	ldrh	r3, [r7, #16]
 8010fe2:	021b      	lsls	r3, r3, #8
 8010fe4:	b21a      	sxth	r2, r3
 8010fe6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010fea:	4313      	orrs	r3, r2
 8010fec:	b21b      	sxth	r3, r3
 8010fee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010ff0:	89fb      	ldrh	r3, [r7, #14]
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	371c      	adds	r7, #28
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr
	...

08011000 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801100a:	2300      	movs	r3, #0
 801100c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011016:	2b40      	cmp	r3, #64	; 0x40
 8011018:	d005      	beq.n	8011026 <USBD_StdDevReq+0x26>
 801101a:	2b40      	cmp	r3, #64	; 0x40
 801101c:	d853      	bhi.n	80110c6 <USBD_StdDevReq+0xc6>
 801101e:	2b00      	cmp	r3, #0
 8011020:	d00b      	beq.n	801103a <USBD_StdDevReq+0x3a>
 8011022:	2b20      	cmp	r3, #32
 8011024:	d14f      	bne.n	80110c6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801102c:	689b      	ldr	r3, [r3, #8]
 801102e:	6839      	ldr	r1, [r7, #0]
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	4798      	blx	r3
 8011034:	4603      	mov	r3, r0
 8011036:	73fb      	strb	r3, [r7, #15]
    break;
 8011038:	e04a      	b.n	80110d0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	785b      	ldrb	r3, [r3, #1]
 801103e:	2b09      	cmp	r3, #9
 8011040:	d83b      	bhi.n	80110ba <USBD_StdDevReq+0xba>
 8011042:	a201      	add	r2, pc, #4	; (adr r2, 8011048 <USBD_StdDevReq+0x48>)
 8011044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011048:	0801109d 	.word	0x0801109d
 801104c:	080110b1 	.word	0x080110b1
 8011050:	080110bb 	.word	0x080110bb
 8011054:	080110a7 	.word	0x080110a7
 8011058:	080110bb 	.word	0x080110bb
 801105c:	0801107b 	.word	0x0801107b
 8011060:	08011071 	.word	0x08011071
 8011064:	080110bb 	.word	0x080110bb
 8011068:	08011093 	.word	0x08011093
 801106c:	08011085 	.word	0x08011085
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011070:	6839      	ldr	r1, [r7, #0]
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f000 f9dc 	bl	8011430 <USBD_GetDescriptor>
      break;
 8011078:	e024      	b.n	80110c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801107a:	6839      	ldr	r1, [r7, #0]
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 fb41 	bl	8011704 <USBD_SetAddress>
      break;
 8011082:	e01f      	b.n	80110c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011084:	6839      	ldr	r1, [r7, #0]
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 fb80 	bl	801178c <USBD_SetConfig>
 801108c:	4603      	mov	r3, r0
 801108e:	73fb      	strb	r3, [r7, #15]
      break;
 8011090:	e018      	b.n	80110c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011092:	6839      	ldr	r1, [r7, #0]
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 fc1f 	bl	80118d8 <USBD_GetConfig>
      break;
 801109a:	e013      	b.n	80110c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 801109c:	6839      	ldr	r1, [r7, #0]
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 fc50 	bl	8011944 <USBD_GetStatus>
      break;
 80110a4:	e00e      	b.n	80110c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80110a6:	6839      	ldr	r1, [r7, #0]
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f000 fc7f 	bl	80119ac <USBD_SetFeature>
      break;
 80110ae:	e009      	b.n	80110c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80110b0:	6839      	ldr	r1, [r7, #0]
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 fc8e 	bl	80119d4 <USBD_ClrFeature>
      break;
 80110b8:	e004      	b.n	80110c4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80110ba:	6839      	ldr	r1, [r7, #0]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 fce5 	bl	8011a8c <USBD_CtlError>
      break;
 80110c2:	bf00      	nop
    }
    break;
 80110c4:	e004      	b.n	80110d0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80110c6:	6839      	ldr	r1, [r7, #0]
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f000 fcdf 	bl	8011a8c <USBD_CtlError>
    break;
 80110ce:	bf00      	nop
  }

  return ret;
 80110d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop

080110dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110e6:	2300      	movs	r3, #0
 80110e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110f2:	2b40      	cmp	r3, #64	; 0x40
 80110f4:	d005      	beq.n	8011102 <USBD_StdItfReq+0x26>
 80110f6:	2b40      	cmp	r3, #64	; 0x40
 80110f8:	d82f      	bhi.n	801115a <USBD_StdItfReq+0x7e>
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d001      	beq.n	8011102 <USBD_StdItfReq+0x26>
 80110fe:	2b20      	cmp	r3, #32
 8011100:	d12b      	bne.n	801115a <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011108:	b2db      	uxtb	r3, r3
 801110a:	3b01      	subs	r3, #1
 801110c:	2b02      	cmp	r3, #2
 801110e:	d81d      	bhi.n	801114c <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	889b      	ldrh	r3, [r3, #4]
 8011114:	b2db      	uxtb	r3, r3
 8011116:	2b01      	cmp	r3, #1
 8011118:	d813      	bhi.n	8011142 <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011120:	689b      	ldr	r3, [r3, #8]
 8011122:	6839      	ldr	r1, [r7, #0]
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	4798      	blx	r3
 8011128:	4603      	mov	r3, r0
 801112a:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	88db      	ldrh	r3, [r3, #6]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d110      	bne.n	8011156 <USBD_StdItfReq+0x7a>
 8011134:	7bfb      	ldrb	r3, [r7, #15]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d10d      	bne.n	8011156 <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 fd71 	bl	8011c22 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011140:	e009      	b.n	8011156 <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 8011142:	6839      	ldr	r1, [r7, #0]
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 fca1 	bl	8011a8c <USBD_CtlError>
      break;
 801114a:	e004      	b.n	8011156 <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 801114c:	6839      	ldr	r1, [r7, #0]
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f000 fc9c 	bl	8011a8c <USBD_CtlError>
      break;
 8011154:	e000      	b.n	8011158 <USBD_StdItfReq+0x7c>
      break;
 8011156:	bf00      	nop
    }
    break;
 8011158:	e004      	b.n	8011164 <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 fc95 	bl	8011a8c <USBD_CtlError>
    break;
 8011162:	bf00      	nop
  }

  return ret;
 8011164:	7bfb      	ldrb	r3, [r7, #15]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3710      	adds	r7, #16
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}

0801116e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b084      	sub	sp, #16
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
 8011176:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011178:	2300      	movs	r3, #0
 801117a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	889b      	ldrh	r3, [r3, #4]
 8011180:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801118a:	2b40      	cmp	r3, #64	; 0x40
 801118c:	d007      	beq.n	801119e <USBD_StdEPReq+0x30>
 801118e:	2b40      	cmp	r3, #64	; 0x40
 8011190:	f200 8143 	bhi.w	801141a <USBD_StdEPReq+0x2ac>
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00c      	beq.n	80111b2 <USBD_StdEPReq+0x44>
 8011198:	2b20      	cmp	r3, #32
 801119a:	f040 813e 	bne.w	801141a <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111a4:	689b      	ldr	r3, [r3, #8]
 80111a6:	6839      	ldr	r1, [r7, #0]
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	4798      	blx	r3
 80111ac:	4603      	mov	r3, r0
 80111ae:	73fb      	strb	r3, [r7, #15]
    break;
 80111b0:	e138      	b.n	8011424 <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	785b      	ldrb	r3, [r3, #1]
 80111b6:	2b03      	cmp	r3, #3
 80111b8:	d007      	beq.n	80111ca <USBD_StdEPReq+0x5c>
 80111ba:	2b03      	cmp	r3, #3
 80111bc:	f300 8127 	bgt.w	801140e <USBD_StdEPReq+0x2a0>
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d07d      	beq.n	80112c0 <USBD_StdEPReq+0x152>
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d03c      	beq.n	8011242 <USBD_StdEPReq+0xd4>
 80111c8:	e121      	b.n	801140e <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	2b02      	cmp	r3, #2
 80111d4:	d002      	beq.n	80111dc <USBD_StdEPReq+0x6e>
 80111d6:	2b03      	cmp	r3, #3
 80111d8:	d016      	beq.n	8011208 <USBD_StdEPReq+0x9a>
 80111da:	e02c      	b.n	8011236 <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111dc:	7bbb      	ldrb	r3, [r7, #14]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d00d      	beq.n	80111fe <USBD_StdEPReq+0x90>
 80111e2:	7bbb      	ldrb	r3, [r7, #14]
 80111e4:	2b80      	cmp	r3, #128	; 0x80
 80111e6:	d00a      	beq.n	80111fe <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80111e8:	7bbb      	ldrb	r3, [r7, #14]
 80111ea:	4619      	mov	r1, r3
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f001 fa01 	bl	80125f4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80111f2:	2180      	movs	r1, #128	; 0x80
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f001 f9fd 	bl	80125f4 <USBD_LL_StallEP>
 80111fa:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80111fc:	e020      	b.n	8011240 <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 80111fe:	6839      	ldr	r1, [r7, #0]
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 fc43 	bl	8011a8c <USBD_CtlError>
        break;
 8011206:	e01b      	b.n	8011240 <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	885b      	ldrh	r3, [r3, #2]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d10e      	bne.n	801122e <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011210:	7bbb      	ldrb	r3, [r7, #14]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d00b      	beq.n	801122e <USBD_StdEPReq+0xc0>
 8011216:	7bbb      	ldrb	r3, [r7, #14]
 8011218:	2b80      	cmp	r3, #128	; 0x80
 801121a:	d008      	beq.n	801122e <USBD_StdEPReq+0xc0>
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	88db      	ldrh	r3, [r3, #6]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d104      	bne.n	801122e <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011224:	7bbb      	ldrb	r3, [r7, #14]
 8011226:	4619      	mov	r1, r3
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f001 f9e3 	bl	80125f4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 fcf7 	bl	8011c22 <USBD_CtlSendStatus>

        break;
 8011234:	e004      	b.n	8011240 <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 8011236:	6839      	ldr	r1, [r7, #0]
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f000 fc27 	bl	8011a8c <USBD_CtlError>
        break;
 801123e:	bf00      	nop
      }
      break;
 8011240:	e0ea      	b.n	8011418 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011248:	b2db      	uxtb	r3, r3
 801124a:	2b02      	cmp	r3, #2
 801124c:	d002      	beq.n	8011254 <USBD_StdEPReq+0xe6>
 801124e:	2b03      	cmp	r3, #3
 8011250:	d016      	beq.n	8011280 <USBD_StdEPReq+0x112>
 8011252:	e02e      	b.n	80112b2 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011254:	7bbb      	ldrb	r3, [r7, #14]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d00d      	beq.n	8011276 <USBD_StdEPReq+0x108>
 801125a:	7bbb      	ldrb	r3, [r7, #14]
 801125c:	2b80      	cmp	r3, #128	; 0x80
 801125e:	d00a      	beq.n	8011276 <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011260:	7bbb      	ldrb	r3, [r7, #14]
 8011262:	4619      	mov	r1, r3
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f001 f9c5 	bl	80125f4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801126a:	2180      	movs	r1, #128	; 0x80
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f001 f9c1 	bl	80125f4 <USBD_LL_StallEP>
 8011272:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011274:	e023      	b.n	80112be <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8011276:	6839      	ldr	r1, [r7, #0]
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f000 fc07 	bl	8011a8c <USBD_CtlError>
        break;
 801127e:	e01e      	b.n	80112be <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	885b      	ldrh	r3, [r3, #2]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d119      	bne.n	80112bc <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011288:	7bbb      	ldrb	r3, [r7, #14]
 801128a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801128e:	2b00      	cmp	r3, #0
 8011290:	d004      	beq.n	801129c <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011292:	7bbb      	ldrb	r3, [r7, #14]
 8011294:	4619      	mov	r1, r3
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f001 f9cb 	bl	8012632 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f000 fcc0 	bl	8011c22 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112a8:	689b      	ldr	r3, [r3, #8]
 80112aa:	6839      	ldr	r1, [r7, #0]
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	4798      	blx	r3
        }
        break;
 80112b0:	e004      	b.n	80112bc <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 80112b2:	6839      	ldr	r1, [r7, #0]
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f000 fbe9 	bl	8011a8c <USBD_CtlError>
        break;
 80112ba:	e000      	b.n	80112be <USBD_StdEPReq+0x150>
        break;
 80112bc:	bf00      	nop
      }
      break;
 80112be:	e0ab      	b.n	8011418 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	d002      	beq.n	80112d2 <USBD_StdEPReq+0x164>
 80112cc:	2b03      	cmp	r3, #3
 80112ce:	d032      	beq.n	8011336 <USBD_StdEPReq+0x1c8>
 80112d0:	e097      	b.n	8011402 <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112d2:	7bbb      	ldrb	r3, [r7, #14]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d007      	beq.n	80112e8 <USBD_StdEPReq+0x17a>
 80112d8:	7bbb      	ldrb	r3, [r7, #14]
 80112da:	2b80      	cmp	r3, #128	; 0x80
 80112dc:	d004      	beq.n	80112e8 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 80112de:	6839      	ldr	r1, [r7, #0]
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f000 fbd3 	bl	8011a8c <USBD_CtlError>
          break;
 80112e6:	e091      	b.n	801140c <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	da0b      	bge.n	8011308 <USBD_StdEPReq+0x19a>
 80112f0:	7bbb      	ldrb	r3, [r7, #14]
 80112f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112f6:	4613      	mov	r3, r2
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	4413      	add	r3, r2
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	3310      	adds	r3, #16
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	4413      	add	r3, r2
 8011304:	3304      	adds	r3, #4
 8011306:	e00b      	b.n	8011320 <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011308:	7bbb      	ldrb	r3, [r7, #14]
 801130a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801130e:	4613      	mov	r3, r2
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	4413      	add	r3, r2
 8011314:	009b      	lsls	r3, r3, #2
 8011316:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	4413      	add	r3, r2
 801131e:	3304      	adds	r3, #4
 8011320:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	2200      	movs	r2, #0
 8011326:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	2202      	movs	r2, #2
 801132c:	4619      	mov	r1, r3
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 fc1d 	bl	8011b6e <USBD_CtlSendData>
        break;
 8011334:	e06a      	b.n	801140c <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801133a:	2b00      	cmp	r3, #0
 801133c:	da11      	bge.n	8011362 <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801133e:	7bbb      	ldrb	r3, [r7, #14]
 8011340:	f003 020f 	and.w	r2, r3, #15
 8011344:	6879      	ldr	r1, [r7, #4]
 8011346:	4613      	mov	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	4413      	add	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	440b      	add	r3, r1
 8011350:	3324      	adds	r3, #36	; 0x24
 8011352:	881b      	ldrh	r3, [r3, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d117      	bne.n	8011388 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 8011358:	6839      	ldr	r1, [r7, #0]
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f000 fb96 	bl	8011a8c <USBD_CtlError>
            break;
 8011360:	e054      	b.n	801140c <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011362:	7bbb      	ldrb	r3, [r7, #14]
 8011364:	f003 020f 	and.w	r2, r3, #15
 8011368:	6879      	ldr	r1, [r7, #4]
 801136a:	4613      	mov	r3, r2
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	4413      	add	r3, r2
 8011370:	009b      	lsls	r3, r3, #2
 8011372:	440b      	add	r3, r1
 8011374:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011378:	881b      	ldrh	r3, [r3, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d104      	bne.n	8011388 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 801137e:	6839      	ldr	r1, [r7, #0]
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f000 fb83 	bl	8011a8c <USBD_CtlError>
            break;
 8011386:	e041      	b.n	801140c <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801138c:	2b00      	cmp	r3, #0
 801138e:	da0b      	bge.n	80113a8 <USBD_StdEPReq+0x23a>
 8011390:	7bbb      	ldrb	r3, [r7, #14]
 8011392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011396:	4613      	mov	r3, r2
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	4413      	add	r3, r2
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	3310      	adds	r3, #16
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	4413      	add	r3, r2
 80113a4:	3304      	adds	r3, #4
 80113a6:	e00b      	b.n	80113c0 <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 80113a8:	7bbb      	ldrb	r3, [r7, #14]
 80113aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80113ae:	4613      	mov	r3, r2
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	4413      	add	r3, r2
 80113b4:	009b      	lsls	r3, r3, #2
 80113b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	4413      	add	r3, r2
 80113be:	3304      	adds	r3, #4
 80113c0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80113c2:	7bbb      	ldrb	r3, [r7, #14]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d002      	beq.n	80113ce <USBD_StdEPReq+0x260>
 80113c8:	7bbb      	ldrb	r3, [r7, #14]
 80113ca:	2b80      	cmp	r3, #128	; 0x80
 80113cc:	d103      	bne.n	80113d6 <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	2200      	movs	r2, #0
 80113d2:	601a      	str	r2, [r3, #0]
 80113d4:	e00e      	b.n	80113f4 <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80113d6:	7bbb      	ldrb	r3, [r7, #14]
 80113d8:	4619      	mov	r1, r3
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f001 f948 	bl	8012670 <USBD_LL_IsStallEP>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d003      	beq.n	80113ee <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	2201      	movs	r2, #1
 80113ea:	601a      	str	r2, [r3, #0]
 80113ec:	e002      	b.n	80113f4 <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	2200      	movs	r2, #0
 80113f2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	2202      	movs	r2, #2
 80113f8:	4619      	mov	r1, r3
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 fbb7 	bl	8011b6e <USBD_CtlSendData>
          break;
 8011400:	e004      	b.n	801140c <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 8011402:	6839      	ldr	r1, [r7, #0]
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f000 fb41 	bl	8011a8c <USBD_CtlError>
        break;
 801140a:	bf00      	nop
      }
      break;
 801140c:	e004      	b.n	8011418 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 801140e:	6839      	ldr	r1, [r7, #0]
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 fb3b 	bl	8011a8c <USBD_CtlError>
      break;
 8011416:	bf00      	nop
    }
    break;
 8011418:	e004      	b.n	8011424 <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 801141a:	6839      	ldr	r1, [r7, #0]
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 fb35 	bl	8011a8c <USBD_CtlError>
    break;
 8011422:	bf00      	nop
  }

  return ret;
 8011424:	7bfb      	ldrb	r3, [r7, #15]
}
 8011426:	4618      	mov	r0, r3
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
	...

08011430 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801143a:	2300      	movs	r3, #0
 801143c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801143e:	2300      	movs	r3, #0
 8011440:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011442:	2300      	movs	r3, #0
 8011444:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	885b      	ldrh	r3, [r3, #2]
 801144a:	0a1b      	lsrs	r3, r3, #8
 801144c:	b29b      	uxth	r3, r3
 801144e:	3b01      	subs	r3, #1
 8011450:	2b06      	cmp	r3, #6
 8011452:	f200 8128 	bhi.w	80116a6 <USBD_GetDescriptor+0x276>
 8011456:	a201      	add	r2, pc, #4	; (adr r2, 801145c <USBD_GetDescriptor+0x2c>)
 8011458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801145c:	08011479 	.word	0x08011479
 8011460:	08011491 	.word	0x08011491
 8011464:	080114d1 	.word	0x080114d1
 8011468:	080116a7 	.word	0x080116a7
 801146c:	080116a7 	.word	0x080116a7
 8011470:	08011647 	.word	0x08011647
 8011474:	08011673 	.word	0x08011673
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	7c12      	ldrb	r2, [r2, #16]
 8011484:	f107 0108 	add.w	r1, r7, #8
 8011488:	4610      	mov	r0, r2
 801148a:	4798      	blx	r3
 801148c:	60f8      	str	r0, [r7, #12]
    break;
 801148e:	e112      	b.n	80116b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	7c1b      	ldrb	r3, [r3, #16]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d10d      	bne.n	80114b4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a0:	f107 0208 	add.w	r2, r7, #8
 80114a4:	4610      	mov	r0, r2
 80114a6:	4798      	blx	r3
 80114a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	3301      	adds	r3, #1
 80114ae:	2202      	movs	r2, #2
 80114b0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80114b2:	e100      	b.n	80116b6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114bc:	f107 0208 	add.w	r2, r7, #8
 80114c0:	4610      	mov	r0, r2
 80114c2:	4798      	blx	r3
 80114c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	3301      	adds	r3, #1
 80114ca:	2202      	movs	r2, #2
 80114cc:	701a      	strb	r2, [r3, #0]
    break;
 80114ce:	e0f2      	b.n	80116b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	885b      	ldrh	r3, [r3, #2]
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	2b05      	cmp	r3, #5
 80114d8:	f200 80ac 	bhi.w	8011634 <USBD_GetDescriptor+0x204>
 80114dc:	a201      	add	r2, pc, #4	; (adr r2, 80114e4 <USBD_GetDescriptor+0xb4>)
 80114de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e2:	bf00      	nop
 80114e4:	080114fd 	.word	0x080114fd
 80114e8:	08011531 	.word	0x08011531
 80114ec:	08011565 	.word	0x08011565
 80114f0:	08011599 	.word	0x08011599
 80114f4:	080115cd 	.word	0x080115cd
 80114f8:	08011601 	.word	0x08011601
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d00b      	beq.n	8011520 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	687a      	ldr	r2, [r7, #4]
 8011512:	7c12      	ldrb	r2, [r2, #16]
 8011514:	f107 0108 	add.w	r1, r7, #8
 8011518:	4610      	mov	r0, r2
 801151a:	4798      	blx	r3
 801151c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801151e:	e091      	b.n	8011644 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011520:	6839      	ldr	r1, [r7, #0]
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 fab2 	bl	8011a8c <USBD_CtlError>
        err++;
 8011528:	7afb      	ldrb	r3, [r7, #11]
 801152a:	3301      	adds	r3, #1
 801152c:	72fb      	strb	r3, [r7, #11]
      break;
 801152e:	e089      	b.n	8011644 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00b      	beq.n	8011554 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	7c12      	ldrb	r2, [r2, #16]
 8011548:	f107 0108 	add.w	r1, r7, #8
 801154c:	4610      	mov	r0, r2
 801154e:	4798      	blx	r3
 8011550:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011552:	e077      	b.n	8011644 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011554:	6839      	ldr	r1, [r7, #0]
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 fa98 	bl	8011a8c <USBD_CtlError>
        err++;
 801155c:	7afb      	ldrb	r3, [r7, #11]
 801155e:	3301      	adds	r3, #1
 8011560:	72fb      	strb	r3, [r7, #11]
      break;
 8011562:	e06f      	b.n	8011644 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d00b      	beq.n	8011588 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	687a      	ldr	r2, [r7, #4]
 801157a:	7c12      	ldrb	r2, [r2, #16]
 801157c:	f107 0108 	add.w	r1, r7, #8
 8011580:	4610      	mov	r0, r2
 8011582:	4798      	blx	r3
 8011584:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011586:	e05d      	b.n	8011644 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011588:	6839      	ldr	r1, [r7, #0]
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f000 fa7e 	bl	8011a8c <USBD_CtlError>
        err++;
 8011590:	7afb      	ldrb	r3, [r7, #11]
 8011592:	3301      	adds	r3, #1
 8011594:	72fb      	strb	r3, [r7, #11]
      break;
 8011596:	e055      	b.n	8011644 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801159e:	691b      	ldr	r3, [r3, #16]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d00b      	beq.n	80115bc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115aa:	691b      	ldr	r3, [r3, #16]
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	7c12      	ldrb	r2, [r2, #16]
 80115b0:	f107 0108 	add.w	r1, r7, #8
 80115b4:	4610      	mov	r0, r2
 80115b6:	4798      	blx	r3
 80115b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80115ba:	e043      	b.n	8011644 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80115bc:	6839      	ldr	r1, [r7, #0]
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f000 fa64 	bl	8011a8c <USBD_CtlError>
        err++;
 80115c4:	7afb      	ldrb	r3, [r7, #11]
 80115c6:	3301      	adds	r3, #1
 80115c8:	72fb      	strb	r3, [r7, #11]
      break;
 80115ca:	e03b      	b.n	8011644 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115d2:	695b      	ldr	r3, [r3, #20]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00b      	beq.n	80115f0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115de:	695b      	ldr	r3, [r3, #20]
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	7c12      	ldrb	r2, [r2, #16]
 80115e4:	f107 0108 	add.w	r1, r7, #8
 80115e8:	4610      	mov	r0, r2
 80115ea:	4798      	blx	r3
 80115ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80115ee:	e029      	b.n	8011644 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80115f0:	6839      	ldr	r1, [r7, #0]
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f000 fa4a 	bl	8011a8c <USBD_CtlError>
        err++;
 80115f8:	7afb      	ldrb	r3, [r7, #11]
 80115fa:	3301      	adds	r3, #1
 80115fc:	72fb      	strb	r3, [r7, #11]
      break;
 80115fe:	e021      	b.n	8011644 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011606:	699b      	ldr	r3, [r3, #24]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d00b      	beq.n	8011624 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011612:	699b      	ldr	r3, [r3, #24]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	7c12      	ldrb	r2, [r2, #16]
 8011618:	f107 0108 	add.w	r1, r7, #8
 801161c:	4610      	mov	r0, r2
 801161e:	4798      	blx	r3
 8011620:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011622:	e00f      	b.n	8011644 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011624:	6839      	ldr	r1, [r7, #0]
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f000 fa30 	bl	8011a8c <USBD_CtlError>
        err++;
 801162c:	7afb      	ldrb	r3, [r7, #11]
 801162e:	3301      	adds	r3, #1
 8011630:	72fb      	strb	r3, [r7, #11]
      break;
 8011632:	e007      	b.n	8011644 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011634:	6839      	ldr	r1, [r7, #0]
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f000 fa28 	bl	8011a8c <USBD_CtlError>
      err++;
 801163c:	7afb      	ldrb	r3, [r7, #11]
 801163e:	3301      	adds	r3, #1
 8011640:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011642:	bf00      	nop
    }
    break;
 8011644:	e037      	b.n	80116b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	7c1b      	ldrb	r3, [r3, #16]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d109      	bne.n	8011662 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011656:	f107 0208 	add.w	r2, r7, #8
 801165a:	4610      	mov	r0, r2
 801165c:	4798      	blx	r3
 801165e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011660:	e029      	b.n	80116b6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011662:	6839      	ldr	r1, [r7, #0]
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 fa11 	bl	8011a8c <USBD_CtlError>
      err++;
 801166a:	7afb      	ldrb	r3, [r7, #11]
 801166c:	3301      	adds	r3, #1
 801166e:	72fb      	strb	r3, [r7, #11]
    break;
 8011670:	e021      	b.n	80116b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	7c1b      	ldrb	r3, [r3, #16]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d10d      	bne.n	8011696 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011682:	f107 0208 	add.w	r2, r7, #8
 8011686:	4610      	mov	r0, r2
 8011688:	4798      	blx	r3
 801168a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	3301      	adds	r3, #1
 8011690:	2207      	movs	r2, #7
 8011692:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011694:	e00f      	b.n	80116b6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011696:	6839      	ldr	r1, [r7, #0]
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f000 f9f7 	bl	8011a8c <USBD_CtlError>
      err++;
 801169e:	7afb      	ldrb	r3, [r7, #11]
 80116a0:	3301      	adds	r3, #1
 80116a2:	72fb      	strb	r3, [r7, #11]
    break;
 80116a4:	e007      	b.n	80116b6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80116a6:	6839      	ldr	r1, [r7, #0]
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f000 f9ef 	bl	8011a8c <USBD_CtlError>
    err++;
 80116ae:	7afb      	ldrb	r3, [r7, #11]
 80116b0:	3301      	adds	r3, #1
 80116b2:	72fb      	strb	r3, [r7, #11]
    break;
 80116b4:	bf00      	nop
  }

  if (err != 0U)
 80116b6:	7afb      	ldrb	r3, [r7, #11]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d11e      	bne.n	80116fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	88db      	ldrh	r3, [r3, #6]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d016      	beq.n	80116f2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80116c4:	893b      	ldrh	r3, [r7, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00e      	beq.n	80116e8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	88da      	ldrh	r2, [r3, #6]
 80116ce:	893b      	ldrh	r3, [r7, #8]
 80116d0:	4293      	cmp	r3, r2
 80116d2:	bf28      	it	cs
 80116d4:	4613      	movcs	r3, r2
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80116da:	893b      	ldrh	r3, [r7, #8]
 80116dc:	461a      	mov	r2, r3
 80116de:	68f9      	ldr	r1, [r7, #12]
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f000 fa44 	bl	8011b6e <USBD_CtlSendData>
 80116e6:	e009      	b.n	80116fc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80116e8:	6839      	ldr	r1, [r7, #0]
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f000 f9ce 	bl	8011a8c <USBD_CtlError>
 80116f0:	e004      	b.n	80116fc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 fa95 	bl	8011c22 <USBD_CtlSendStatus>
 80116f8:	e000      	b.n	80116fc <USBD_GetDescriptor+0x2cc>
    return;
 80116fa:	bf00      	nop
    }
  }
}
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop

08011704 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b084      	sub	sp, #16
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	889b      	ldrh	r3, [r3, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d131      	bne.n	801177a <USBD_SetAddress+0x76>
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	88db      	ldrh	r3, [r3, #6]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d12d      	bne.n	801177a <USBD_SetAddress+0x76>
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	885b      	ldrh	r3, [r3, #2]
 8011722:	2b7f      	cmp	r3, #127	; 0x7f
 8011724:	d829      	bhi.n	801177a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	885b      	ldrh	r3, [r3, #2]
 801172a:	b2db      	uxtb	r3, r3
 801172c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011730:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011738:	b2db      	uxtb	r3, r3
 801173a:	2b03      	cmp	r3, #3
 801173c:	d104      	bne.n	8011748 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801173e:	6839      	ldr	r1, [r7, #0]
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f000 f9a3 	bl	8011a8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011746:	e01d      	b.n	8011784 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	7bfa      	ldrb	r2, [r7, #15]
 801174c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011750:	7bfb      	ldrb	r3, [r7, #15]
 8011752:	4619      	mov	r1, r3
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 ffb7 	bl	80126c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f000 fa61 	bl	8011c22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011760:	7bfb      	ldrb	r3, [r7, #15]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d004      	beq.n	8011770 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2202      	movs	r2, #2
 801176a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801176e:	e009      	b.n	8011784 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2201      	movs	r2, #1
 8011774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011778:	e004      	b.n	8011784 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801177a:	6839      	ldr	r1, [r7, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 f985 	bl	8011a8c <USBD_CtlError>
  }
}
 8011782:	bf00      	nop
 8011784:	bf00      	nop
 8011786:	3710      	adds	r7, #16
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}

0801178c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011796:	2300      	movs	r3, #0
 8011798:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	885b      	ldrh	r3, [r3, #2]
 801179e:	b2da      	uxtb	r2, r3
 80117a0:	4b4c      	ldr	r3, [pc, #304]	; (80118d4 <USBD_SetConfig+0x148>)
 80117a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80117a4:	4b4b      	ldr	r3, [pc, #300]	; (80118d4 <USBD_SetConfig+0x148>)
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	2b01      	cmp	r3, #1
 80117aa:	d905      	bls.n	80117b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80117ac:	6839      	ldr	r1, [r7, #0]
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f000 f96c 	bl	8011a8c <USBD_CtlError>
    return USBD_FAIL;
 80117b4:	2303      	movs	r3, #3
 80117b6:	e088      	b.n	80118ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	2b02      	cmp	r3, #2
 80117c2:	d002      	beq.n	80117ca <USBD_SetConfig+0x3e>
 80117c4:	2b03      	cmp	r3, #3
 80117c6:	d025      	beq.n	8011814 <USBD_SetConfig+0x88>
 80117c8:	e071      	b.n	80118ae <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80117ca:	4b42      	ldr	r3, [pc, #264]	; (80118d4 <USBD_SetConfig+0x148>)
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d01c      	beq.n	801180c <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 80117d2:	4b40      	ldr	r3, [pc, #256]	; (80118d4 <USBD_SetConfig+0x148>)
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	461a      	mov	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80117dc:	4b3d      	ldr	r3, [pc, #244]	; (80118d4 <USBD_SetConfig+0x148>)
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	4619      	mov	r1, r3
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7ff f98c 	bl	8010b00 <USBD_SetClassConfig>
 80117e8:	4603      	mov	r3, r0
 80117ea:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80117ec:	7bfb      	ldrb	r3, [r7, #15]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d004      	beq.n	80117fc <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 80117f2:	6839      	ldr	r1, [r7, #0]
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f000 f949 	bl	8011a8c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80117fa:	e065      	b.n	80118c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f000 fa10 	bl	8011c22 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2203      	movs	r2, #3
 8011806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801180a:	e05d      	b.n	80118c8 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f000 fa08 	bl	8011c22 <USBD_CtlSendStatus>
    break;
 8011812:	e059      	b.n	80118c8 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8011814:	4b2f      	ldr	r3, [pc, #188]	; (80118d4 <USBD_SetConfig+0x148>)
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d112      	bne.n	8011842 <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2202      	movs	r2, #2
 8011820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8011824:	4b2b      	ldr	r3, [pc, #172]	; (80118d4 <USBD_SetConfig+0x148>)
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	461a      	mov	r2, r3
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801182e:	4b29      	ldr	r3, [pc, #164]	; (80118d4 <USBD_SetConfig+0x148>)
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	4619      	mov	r1, r3
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7ff f97f 	bl	8010b38 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 f9f1 	bl	8011c22 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011840:	e042      	b.n	80118c8 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 8011842:	4b24      	ldr	r3, [pc, #144]	; (80118d4 <USBD_SetConfig+0x148>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	461a      	mov	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	429a      	cmp	r2, r3
 801184e:	d02a      	beq.n	80118a6 <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	b2db      	uxtb	r3, r3
 8011856:	4619      	mov	r1, r3
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f7ff f96d 	bl	8010b38 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801185e:	4b1d      	ldr	r3, [pc, #116]	; (80118d4 <USBD_SetConfig+0x148>)
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	461a      	mov	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011868:	4b1a      	ldr	r3, [pc, #104]	; (80118d4 <USBD_SetConfig+0x148>)
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	4619      	mov	r1, r3
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f7ff f946 	bl	8010b00 <USBD_SetClassConfig>
 8011874:	4603      	mov	r3, r0
 8011876:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011878:	7bfb      	ldrb	r3, [r7, #15]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d00f      	beq.n	801189e <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 801187e:	6839      	ldr	r1, [r7, #0]
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f000 f903 	bl	8011a8c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	b2db      	uxtb	r3, r3
 801188c:	4619      	mov	r1, r3
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7ff f952 	bl	8010b38 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2202      	movs	r2, #2
 8011898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801189c:	e014      	b.n	80118c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f000 f9bf 	bl	8011c22 <USBD_CtlSendStatus>
    break;
 80118a4:	e010      	b.n	80118c8 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f000 f9bb 	bl	8011c22 <USBD_CtlSendStatus>
    break;
 80118ac:	e00c      	b.n	80118c8 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 80118ae:	6839      	ldr	r1, [r7, #0]
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 f8eb 	bl	8011a8c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80118b6:	4b07      	ldr	r3, [pc, #28]	; (80118d4 <USBD_SetConfig+0x148>)
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	4619      	mov	r1, r3
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7ff f93b 	bl	8010b38 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80118c2:	2303      	movs	r3, #3
 80118c4:	73fb      	strb	r3, [r7, #15]
    break;
 80118c6:	bf00      	nop
  }

  return ret;
 80118c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3710      	adds	r7, #16
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	24000210 	.word	0x24000210

080118d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	88db      	ldrh	r3, [r3, #6]
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d004      	beq.n	80118f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80118ea:	6839      	ldr	r1, [r7, #0]
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f000 f8cd 	bl	8011a8c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80118f2:	e023      	b.n	801193c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	2b02      	cmp	r3, #2
 80118fe:	dc02      	bgt.n	8011906 <USBD_GetConfig+0x2e>
 8011900:	2b00      	cmp	r3, #0
 8011902:	dc03      	bgt.n	801190c <USBD_GetConfig+0x34>
 8011904:	e015      	b.n	8011932 <USBD_GetConfig+0x5a>
 8011906:	2b03      	cmp	r3, #3
 8011908:	d00b      	beq.n	8011922 <USBD_GetConfig+0x4a>
 801190a:	e012      	b.n	8011932 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2200      	movs	r2, #0
 8011910:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	3308      	adds	r3, #8
 8011916:	2201      	movs	r2, #1
 8011918:	4619      	mov	r1, r3
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f000 f927 	bl	8011b6e <USBD_CtlSendData>
      break;
 8011920:	e00c      	b.n	801193c <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	3304      	adds	r3, #4
 8011926:	2201      	movs	r2, #1
 8011928:	4619      	mov	r1, r3
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f000 f91f 	bl	8011b6e <USBD_CtlSendData>
      break;
 8011930:	e004      	b.n	801193c <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 8011932:	6839      	ldr	r1, [r7, #0]
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f000 f8a9 	bl	8011a8c <USBD_CtlError>
      break;
 801193a:	bf00      	nop
}
 801193c:	bf00      	nop
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}

08011944 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011954:	b2db      	uxtb	r3, r3
 8011956:	3b01      	subs	r3, #1
 8011958:	2b02      	cmp	r3, #2
 801195a:	d81e      	bhi.n	801199a <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	88db      	ldrh	r3, [r3, #6]
 8011960:	2b02      	cmp	r3, #2
 8011962:	d004      	beq.n	801196e <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 8011964:	6839      	ldr	r1, [r7, #0]
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f000 f890 	bl	8011a8c <USBD_CtlError>
      break;
 801196c:	e01a      	b.n	80119a4 <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2201      	movs	r2, #1
 8011972:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801197a:	2b00      	cmp	r3, #0
 801197c:	d005      	beq.n	801198a <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	68db      	ldr	r3, [r3, #12]
 8011982:	f043 0202 	orr.w	r2, r3, #2
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	330c      	adds	r3, #12
 801198e:	2202      	movs	r2, #2
 8011990:	4619      	mov	r1, r3
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f000 f8eb 	bl	8011b6e <USBD_CtlSendData>
    break;
 8011998:	e004      	b.n	80119a4 <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 801199a:	6839      	ldr	r1, [r7, #0]
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f000 f875 	bl	8011a8c <USBD_CtlError>
    break;
 80119a2:	bf00      	nop
  }
}
 80119a4:	bf00      	nop
 80119a6:	3708      	adds	r7, #8
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}

080119ac <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b082      	sub	sp, #8
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	885b      	ldrh	r3, [r3, #2]
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	d106      	bne.n	80119cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2201      	movs	r2, #1
 80119c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 f92b 	bl	8011c22 <USBD_CtlSendStatus>
  }
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	3b01      	subs	r3, #1
 80119e8:	2b02      	cmp	r3, #2
 80119ea:	d80b      	bhi.n	8011a04 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	885b      	ldrh	r3, [r3, #2]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d10c      	bne.n	8011a0e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2200      	movs	r2, #0
 80119f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 f910 	bl	8011c22 <USBD_CtlSendStatus>
      }
      break;
 8011a02:	e004      	b.n	8011a0e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011a04:	6839      	ldr	r1, [r7, #0]
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 f840 	bl	8011a8c <USBD_CtlError>
      break;
 8011a0c:	e000      	b.n	8011a10 <USBD_ClrFeature+0x3c>
      break;
 8011a0e:	bf00      	nop
  }
}
 8011a10:	bf00      	nop
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b084      	sub	sp, #16
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	781a      	ldrb	r2, [r3, #0]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	3301      	adds	r3, #1
 8011a32:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	781a      	ldrb	r2, [r3, #0]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011a42:	68f8      	ldr	r0, [r7, #12]
 8011a44:	f7ff fabd 	bl	8010fc2 <SWAPBYTE>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	3301      	adds	r3, #1
 8011a54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	3301      	adds	r3, #1
 8011a5a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011a5c:	68f8      	ldr	r0, [r7, #12]
 8011a5e:	f7ff fab0 	bl	8010fc2 <SWAPBYTE>
 8011a62:	4603      	mov	r3, r0
 8011a64:	461a      	mov	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	3301      	adds	r3, #1
 8011a74:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f7ff faa3 	bl	8010fc2 <SWAPBYTE>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	461a      	mov	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	80da      	strh	r2, [r3, #6]
}
 8011a84:	bf00      	nop
 8011a86:	3710      	adds	r7, #16
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a96:	2180      	movs	r1, #128	; 0x80
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f000 fdab 	bl	80125f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011a9e:	2100      	movs	r1, #0
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f000 fda7 	bl	80125f4 <USBD_LL_StallEP>
}
 8011aa6:	bf00      	nop
 8011aa8:	3708      	adds	r7, #8
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}

08011aae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011aae:	b580      	push	{r7, lr}
 8011ab0:	b086      	sub	sp, #24
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	60f8      	str	r0, [r7, #12]
 8011ab6:	60b9      	str	r1, [r7, #8]
 8011ab8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011aba:	2300      	movs	r3, #0
 8011abc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d036      	beq.n	8011b32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011ac8:	6938      	ldr	r0, [r7, #16]
 8011aca:	f000 f836 	bl	8011b3a <USBD_GetLen>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	005b      	lsls	r3, r3, #1
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011adc:	7dfb      	ldrb	r3, [r7, #23]
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	7812      	ldrb	r2, [r2, #0]
 8011ae6:	701a      	strb	r2, [r3, #0]
  idx++;
 8011ae8:	7dfb      	ldrb	r3, [r7, #23]
 8011aea:	3301      	adds	r3, #1
 8011aec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011aee:	7dfb      	ldrb	r3, [r7, #23]
 8011af0:	68ba      	ldr	r2, [r7, #8]
 8011af2:	4413      	add	r3, r2
 8011af4:	2203      	movs	r2, #3
 8011af6:	701a      	strb	r2, [r3, #0]
  idx++;
 8011af8:	7dfb      	ldrb	r3, [r7, #23]
 8011afa:	3301      	adds	r3, #1
 8011afc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011afe:	e013      	b.n	8011b28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011b00:	7dfb      	ldrb	r3, [r7, #23]
 8011b02:	68ba      	ldr	r2, [r7, #8]
 8011b04:	4413      	add	r3, r2
 8011b06:	693a      	ldr	r2, [r7, #16]
 8011b08:	7812      	ldrb	r2, [r2, #0]
 8011b0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	3301      	adds	r3, #1
 8011b10:	613b      	str	r3, [r7, #16]
    idx++;
 8011b12:	7dfb      	ldrb	r3, [r7, #23]
 8011b14:	3301      	adds	r3, #1
 8011b16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011b18:	7dfb      	ldrb	r3, [r7, #23]
 8011b1a:	68ba      	ldr	r2, [r7, #8]
 8011b1c:	4413      	add	r3, r2
 8011b1e:	2200      	movs	r2, #0
 8011b20:	701a      	strb	r2, [r3, #0]
    idx++;
 8011b22:	7dfb      	ldrb	r3, [r7, #23]
 8011b24:	3301      	adds	r3, #1
 8011b26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d1e7      	bne.n	8011b00 <USBD_GetString+0x52>
 8011b30:	e000      	b.n	8011b34 <USBD_GetString+0x86>
    return;
 8011b32:	bf00      	nop
  }
}
 8011b34:	3718      	adds	r7, #24
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011b3a:	b480      	push	{r7}
 8011b3c:	b085      	sub	sp, #20
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011b42:	2300      	movs	r3, #0
 8011b44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011b4a:	e005      	b.n	8011b58 <USBD_GetLen+0x1e>
  {
    len++;
 8011b4c:	7bfb      	ldrb	r3, [r7, #15]
 8011b4e:	3301      	adds	r3, #1
 8011b50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	3301      	adds	r3, #1
 8011b56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d1f5      	bne.n	8011b4c <USBD_GetLen+0x12>
  }

  return len;
 8011b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3714      	adds	r7, #20
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011b6e:	b580      	push	{r7, lr}
 8011b70:	b084      	sub	sp, #16
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	60f8      	str	r0, [r7, #12]
 8011b76:	60b9      	str	r1, [r7, #8]
 8011b78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2202      	movs	r2, #2
 8011b7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	687a      	ldr	r2, [r7, #4]
 8011b8c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	2100      	movs	r1, #0
 8011b94:	68f8      	ldr	r0, [r7, #12]
 8011b96:	f000 fdb6 	bl	8012706 <USBD_LL_Transmit>

  return USBD_OK;
 8011b9a:	2300      	movs	r3, #0
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3710      	adds	r7, #16
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b084      	sub	sp, #16
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	60f8      	str	r0, [r7, #12]
 8011bac:	60b9      	str	r1, [r7, #8]
 8011bae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	68ba      	ldr	r2, [r7, #8]
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f000 fda5 	bl	8012706 <USBD_LL_Transmit>

  return USBD_OK;
 8011bbc:	2300      	movs	r3, #0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b084      	sub	sp, #16
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	60f8      	str	r0, [r7, #12]
 8011bce:	60b9      	str	r1, [r7, #8]
 8011bd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2203      	movs	r2, #3
 8011bd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	2100      	movs	r1, #0
 8011bf0:	68f8      	ldr	r0, [r7, #12]
 8011bf2:	f000 fda9 	bl	8012748 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bf6:	2300      	movs	r3, #0
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3710      	adds	r7, #16
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	60f8      	str	r0, [r7, #12]
 8011c08:	60b9      	str	r1, [r7, #8]
 8011c0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	68ba      	ldr	r2, [r7, #8]
 8011c10:	2100      	movs	r1, #0
 8011c12:	68f8      	ldr	r0, [r7, #12]
 8011c14:	f000 fd98 	bl	8012748 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c18:	2300      	movs	r3, #0
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b082      	sub	sp, #8
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2204      	movs	r2, #4
 8011c2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011c32:	2300      	movs	r3, #0
 8011c34:	2200      	movs	r2, #0
 8011c36:	2100      	movs	r1, #0
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f000 fd64 	bl	8012706 <USBD_LL_Transmit>

  return USBD_OK;
 8011c3e:	2300      	movs	r3, #0
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3708      	adds	r7, #8
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b082      	sub	sp, #8
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2205      	movs	r2, #5
 8011c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c58:	2300      	movs	r3, #0
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 fd72 	bl	8012748 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c64:	2300      	movs	r3, #0
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3708      	adds	r7, #8
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
	...

08011c70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b087      	sub	sp, #28
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	60b9      	str	r1, [r7, #8]
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011c82:	2300      	movs	r3, #0
 8011c84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011c86:	4b1f      	ldr	r3, [pc, #124]	; (8011d04 <FATFS_LinkDriverEx+0x94>)
 8011c88:	7a5b      	ldrb	r3, [r3, #9]
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d131      	bne.n	8011cf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011c90:	4b1c      	ldr	r3, [pc, #112]	; (8011d04 <FATFS_LinkDriverEx+0x94>)
 8011c92:	7a5b      	ldrb	r3, [r3, #9]
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	461a      	mov	r2, r3
 8011c98:	4b1a      	ldr	r3, [pc, #104]	; (8011d04 <FATFS_LinkDriverEx+0x94>)
 8011c9a:	2100      	movs	r1, #0
 8011c9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011c9e:	4b19      	ldr	r3, [pc, #100]	; (8011d04 <FATFS_LinkDriverEx+0x94>)
 8011ca0:	7a5b      	ldrb	r3, [r3, #9]
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	4a17      	ldr	r2, [pc, #92]	; (8011d04 <FATFS_LinkDriverEx+0x94>)
 8011ca6:	009b      	lsls	r3, r3, #2
 8011ca8:	4413      	add	r3, r2
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011cae:	4b15      	ldr	r3, [pc, #84]	; (8011d04 <FATFS_LinkDriverEx+0x94>)
 8011cb0:	7a5b      	ldrb	r3, [r3, #9]
 8011cb2:	b2db      	uxtb	r3, r3
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	4b13      	ldr	r3, [pc, #76]	; (8011d04 <FATFS_LinkDriverEx+0x94>)
 8011cb8:	4413      	add	r3, r2
 8011cba:	79fa      	ldrb	r2, [r7, #7]
 8011cbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011cbe:	4b11      	ldr	r3, [pc, #68]	; (8011d04 <FATFS_LinkDriverEx+0x94>)
 8011cc0:	7a5b      	ldrb	r3, [r3, #9]
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	1c5a      	adds	r2, r3, #1
 8011cc6:	b2d1      	uxtb	r1, r2
 8011cc8:	4a0e      	ldr	r2, [pc, #56]	; (8011d04 <FATFS_LinkDriverEx+0x94>)
 8011cca:	7251      	strb	r1, [r2, #9]
 8011ccc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011cce:	7dbb      	ldrb	r3, [r7, #22]
 8011cd0:	3330      	adds	r3, #48	; 0x30
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	3301      	adds	r3, #1
 8011cdc:	223a      	movs	r2, #58	; 0x3a
 8011cde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	3302      	adds	r3, #2
 8011ce4:	222f      	movs	r2, #47	; 0x2f
 8011ce6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	3303      	adds	r3, #3
 8011cec:	2200      	movs	r2, #0
 8011cee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	371c      	adds	r7, #28
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop
 8011d04:	24000214 	.word	0x24000214

08011d08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011d12:	2200      	movs	r2, #0
 8011d14:	6839      	ldr	r1, [r7, #0]
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7ff ffaa 	bl	8011c70 <FATFS_LinkDriverEx>
 8011d1c:	4603      	mov	r3, r0
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3708      	adds	r7, #8
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
	...

08011d28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	4913      	ldr	r1, [pc, #76]	; (8011d7c <MX_USB_DEVICE_Init+0x54>)
 8011d30:	4813      	ldr	r0, [pc, #76]	; (8011d80 <MX_USB_DEVICE_Init+0x58>)
 8011d32:	f7fe fe77 	bl	8010a24 <USBD_Init>
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d001      	beq.n	8011d40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011d3c:	f7ef f8a4 	bl	8000e88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011d40:	4910      	ldr	r1, [pc, #64]	; (8011d84 <MX_USB_DEVICE_Init+0x5c>)
 8011d42:	480f      	ldr	r0, [pc, #60]	; (8011d80 <MX_USB_DEVICE_Init+0x58>)
 8011d44:	f7fe fea4 	bl	8010a90 <USBD_RegisterClass>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d001      	beq.n	8011d52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011d4e:	f7ef f89b 	bl	8000e88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011d52:	490d      	ldr	r1, [pc, #52]	; (8011d88 <MX_USB_DEVICE_Init+0x60>)
 8011d54:	480a      	ldr	r0, [pc, #40]	; (8011d80 <MX_USB_DEVICE_Init+0x58>)
 8011d56:	f7fe fdc9 	bl	80108ec <USBD_CDC_RegisterInterface>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d001      	beq.n	8011d64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011d60:	f7ef f892 	bl	8000e88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011d64:	4806      	ldr	r0, [pc, #24]	; (8011d80 <MX_USB_DEVICE_Init+0x58>)
 8011d66:	f7fe feb4 	bl	8010ad2 <USBD_Start>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d001      	beq.n	8011d74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011d70:	f7ef f88a 	bl	8000e88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011d74:	f7f4 fdc6 	bl	8006904 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011d78:	bf00      	nop
 8011d7a:	bd80      	pop	{r7, pc}
 8011d7c:	24000134 	.word	0x24000134
 8011d80:	240025bc 	.word	0x240025bc
 8011d84:	2400001c 	.word	0x2400001c
 8011d88:	24000120 	.word	0x24000120

08011d8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011d90:	2200      	movs	r2, #0
 8011d92:	4905      	ldr	r1, [pc, #20]	; (8011da8 <CDC_Init_FS+0x1c>)
 8011d94:	4805      	ldr	r0, [pc, #20]	; (8011dac <CDC_Init_FS+0x20>)
 8011d96:	f7fe fdbe 	bl	8010916 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011d9a:	4905      	ldr	r1, [pc, #20]	; (8011db0 <CDC_Init_FS+0x24>)
 8011d9c:	4803      	ldr	r0, [pc, #12]	; (8011dac <CDC_Init_FS+0x20>)
 8011d9e:	f7fe fdd3 	bl	8010948 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011da2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	2400308c 	.word	0x2400308c
 8011dac:	240025bc 	.word	0x240025bc
 8011db0:	2400288c 	.word	0x2400288c

08011db4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011db4:	b480      	push	{r7}
 8011db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011db8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr

08011dc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b083      	sub	sp, #12
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	4603      	mov	r3, r0
 8011dcc:	6039      	str	r1, [r7, #0]
 8011dce:	71fb      	strb	r3, [r7, #7]
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011dd4:	79fb      	ldrb	r3, [r7, #7]
 8011dd6:	2b23      	cmp	r3, #35	; 0x23
 8011dd8:	f200 808c 	bhi.w	8011ef4 <CDC_Control_FS+0x130>
 8011ddc:	a201      	add	r2, pc, #4	; (adr r2, 8011de4 <CDC_Control_FS+0x20>)
 8011dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011de2:	bf00      	nop
 8011de4:	08011ef5 	.word	0x08011ef5
 8011de8:	08011ef5 	.word	0x08011ef5
 8011dec:	08011ef5 	.word	0x08011ef5
 8011df0:	08011ef5 	.word	0x08011ef5
 8011df4:	08011ef5 	.word	0x08011ef5
 8011df8:	08011ef5 	.word	0x08011ef5
 8011dfc:	08011ef5 	.word	0x08011ef5
 8011e00:	08011ef5 	.word	0x08011ef5
 8011e04:	08011ef5 	.word	0x08011ef5
 8011e08:	08011ef5 	.word	0x08011ef5
 8011e0c:	08011ef5 	.word	0x08011ef5
 8011e10:	08011ef5 	.word	0x08011ef5
 8011e14:	08011ef5 	.word	0x08011ef5
 8011e18:	08011ef5 	.word	0x08011ef5
 8011e1c:	08011ef5 	.word	0x08011ef5
 8011e20:	08011ef5 	.word	0x08011ef5
 8011e24:	08011ef5 	.word	0x08011ef5
 8011e28:	08011ef5 	.word	0x08011ef5
 8011e2c:	08011ef5 	.word	0x08011ef5
 8011e30:	08011ef5 	.word	0x08011ef5
 8011e34:	08011ef5 	.word	0x08011ef5
 8011e38:	08011ef5 	.word	0x08011ef5
 8011e3c:	08011ef5 	.word	0x08011ef5
 8011e40:	08011ef5 	.word	0x08011ef5
 8011e44:	08011ef5 	.word	0x08011ef5
 8011e48:	08011ef5 	.word	0x08011ef5
 8011e4c:	08011ef5 	.word	0x08011ef5
 8011e50:	08011ef5 	.word	0x08011ef5
 8011e54:	08011ef5 	.word	0x08011ef5
 8011e58:	08011ef5 	.word	0x08011ef5
 8011e5c:	08011ef5 	.word	0x08011ef5
 8011e60:	08011ef5 	.word	0x08011ef5
 8011e64:	08011e75 	.word	0x08011e75
 8011e68:	08011eaf 	.word	0x08011eaf
 8011e6c:	08011ef5 	.word	0x08011ef5
 8011e70:	08011ef5 	.word	0x08011ef5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	781a      	ldrb	r2, [r3, #0]
 8011e78:	4b22      	ldr	r3, [pc, #136]	; (8011f04 <CDC_Control_FS+0x140>)
 8011e7a:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	785a      	ldrb	r2, [r3, #1]
 8011e80:	4b20      	ldr	r3, [pc, #128]	; (8011f04 <CDC_Control_FS+0x140>)
 8011e82:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	789a      	ldrb	r2, [r3, #2]
 8011e88:	4b1e      	ldr	r3, [pc, #120]	; (8011f04 <CDC_Control_FS+0x140>)
 8011e8a:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	78da      	ldrb	r2, [r3, #3]
 8011e90:	4b1c      	ldr	r3, [pc, #112]	; (8011f04 <CDC_Control_FS+0x140>)
 8011e92:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	791a      	ldrb	r2, [r3, #4]
 8011e98:	4b1a      	ldr	r3, [pc, #104]	; (8011f04 <CDC_Control_FS+0x140>)
 8011e9a:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	795a      	ldrb	r2, [r3, #5]
 8011ea0:	4b18      	ldr	r3, [pc, #96]	; (8011f04 <CDC_Control_FS+0x140>)
 8011ea2:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	799a      	ldrb	r2, [r3, #6]
 8011ea8:	4b16      	ldr	r3, [pc, #88]	; (8011f04 <CDC_Control_FS+0x140>)
 8011eaa:	719a      	strb	r2, [r3, #6]

    break;
 8011eac:	e023      	b.n	8011ef6 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 8011eae:	4b15      	ldr	r3, [pc, #84]	; (8011f04 <CDC_Control_FS+0x140>)
 8011eb0:	781a      	ldrb	r2, [r3, #0]
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	3301      	adds	r3, #1
 8011eba:	4a12      	ldr	r2, [pc, #72]	; (8011f04 <CDC_Control_FS+0x140>)
 8011ebc:	7852      	ldrb	r2, [r2, #1]
 8011ebe:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	3302      	adds	r3, #2
 8011ec4:	4a0f      	ldr	r2, [pc, #60]	; (8011f04 <CDC_Control_FS+0x140>)
 8011ec6:	7892      	ldrb	r2, [r2, #2]
 8011ec8:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	3303      	adds	r3, #3
 8011ece:	4a0d      	ldr	r2, [pc, #52]	; (8011f04 <CDC_Control_FS+0x140>)
 8011ed0:	78d2      	ldrb	r2, [r2, #3]
 8011ed2:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	4a0a      	ldr	r2, [pc, #40]	; (8011f04 <CDC_Control_FS+0x140>)
 8011eda:	7912      	ldrb	r2, [r2, #4]
 8011edc:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	3305      	adds	r3, #5
 8011ee2:	4a08      	ldr	r2, [pc, #32]	; (8011f04 <CDC_Control_FS+0x140>)
 8011ee4:	7952      	ldrb	r2, [r2, #5]
 8011ee6:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	3306      	adds	r3, #6
 8011eec:	4a05      	ldr	r2, [pc, #20]	; (8011f04 <CDC_Control_FS+0x140>)
 8011eee:	7992      	ldrb	r2, [r2, #6]
 8011ef0:	701a      	strb	r2, [r3, #0]

    break;
 8011ef2:	e000      	b.n	8011ef6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011ef4:	bf00      	nop
  }

  return (USBD_OK);
 8011ef6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	370c      	adds	r7, #12
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr
 8011f04:	2400388c 	.word	0x2400388c

08011f08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011f12:	6879      	ldr	r1, [r7, #4]
 8011f14:	4809      	ldr	r0, [pc, #36]	; (8011f3c <CDC_Receive_FS+0x34>)
 8011f16:	f7fe fd17 	bl	8010948 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011f1a:	4808      	ldr	r0, [pc, #32]	; (8011f3c <CDC_Receive_FS+0x34>)
 8011f1c:	f7fe fd58 	bl	80109d0 <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 8011f26:	89fb      	ldrh	r3, [r7, #14]
 8011f28:	4619      	mov	r1, r3
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f000 f808 	bl	8011f40 <CDC_Transmit_FS>
  return (USBD_OK);
 8011f30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3710      	adds	r7, #16
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	240025bc 	.word	0x240025bc

08011f40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	460b      	mov	r3, r1
 8011f4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011f50:	4b0d      	ldr	r3, [pc, #52]	; (8011f88 <CDC_Transmit_FS+0x48>)
 8011f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d001      	beq.n	8011f66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011f62:	2301      	movs	r3, #1
 8011f64:	e00b      	b.n	8011f7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011f66:	887b      	ldrh	r3, [r7, #2]
 8011f68:	461a      	mov	r2, r3
 8011f6a:	6879      	ldr	r1, [r7, #4]
 8011f6c:	4806      	ldr	r0, [pc, #24]	; (8011f88 <CDC_Transmit_FS+0x48>)
 8011f6e:	f7fe fcd2 	bl	8010916 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011f72:	4805      	ldr	r0, [pc, #20]	; (8011f88 <CDC_Transmit_FS+0x48>)
 8011f74:	f7fe fcfc 	bl	8010970 <USBD_CDC_TransmitPacket>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3710      	adds	r7, #16
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	240025bc 	.word	0x240025bc

08011f8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b087      	sub	sp, #28
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	60b9      	str	r1, [r7, #8]
 8011f96:	4613      	mov	r3, r2
 8011f98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	371c      	adds	r7, #28
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fac:	4770      	bx	lr
	...

08011fb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	6039      	str	r1, [r7, #0]
 8011fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	2212      	movs	r2, #18
 8011fc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011fc2:	4b03      	ldr	r3, [pc, #12]	; (8011fd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr
 8011fd0:	24000150 	.word	0x24000150

08011fd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	4603      	mov	r3, r0
 8011fdc:	6039      	str	r1, [r7, #0]
 8011fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	2204      	movs	r2, #4
 8011fe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011fe6:	4b03      	ldr	r3, [pc, #12]	; (8011ff4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	370c      	adds	r7, #12
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr
 8011ff4:	24000164 	.word	0x24000164

08011ff8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	4603      	mov	r3, r0
 8012000:	6039      	str	r1, [r7, #0]
 8012002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012004:	79fb      	ldrb	r3, [r7, #7]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d105      	bne.n	8012016 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801200a:	683a      	ldr	r2, [r7, #0]
 801200c:	4907      	ldr	r1, [pc, #28]	; (801202c <USBD_FS_ProductStrDescriptor+0x34>)
 801200e:	4808      	ldr	r0, [pc, #32]	; (8012030 <USBD_FS_ProductStrDescriptor+0x38>)
 8012010:	f7ff fd4d 	bl	8011aae <USBD_GetString>
 8012014:	e004      	b.n	8012020 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012016:	683a      	ldr	r2, [r7, #0]
 8012018:	4904      	ldr	r1, [pc, #16]	; (801202c <USBD_FS_ProductStrDescriptor+0x34>)
 801201a:	4805      	ldr	r0, [pc, #20]	; (8012030 <USBD_FS_ProductStrDescriptor+0x38>)
 801201c:	f7ff fd47 	bl	8011aae <USBD_GetString>
  }
  return USBD_StrDesc;
 8012020:	4b02      	ldr	r3, [pc, #8]	; (801202c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012022:	4618      	mov	r0, r3
 8012024:	3708      	adds	r7, #8
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	24003894 	.word	0x24003894
 8012030:	08013108 	.word	0x08013108

08012034 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	4603      	mov	r3, r0
 801203c:	6039      	str	r1, [r7, #0]
 801203e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012040:	683a      	ldr	r2, [r7, #0]
 8012042:	4904      	ldr	r1, [pc, #16]	; (8012054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012044:	4804      	ldr	r0, [pc, #16]	; (8012058 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012046:	f7ff fd32 	bl	8011aae <USBD_GetString>
  return USBD_StrDesc;
 801204a:	4b02      	ldr	r3, [pc, #8]	; (8012054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801204c:	4618      	mov	r0, r3
 801204e:	3708      	adds	r7, #8
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	24003894 	.word	0x24003894
 8012058:	08013120 	.word	0x08013120

0801205c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	4603      	mov	r3, r0
 8012064:	6039      	str	r1, [r7, #0]
 8012066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	221a      	movs	r2, #26
 801206c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801206e:	f000 f843 	bl	80120f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012072:	4b02      	ldr	r3, [pc, #8]	; (801207c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012074:	4618      	mov	r0, r3
 8012076:	3708      	adds	r7, #8
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}
 801207c:	24000168 	.word	0x24000168

08012080 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
 8012086:	4603      	mov	r3, r0
 8012088:	6039      	str	r1, [r7, #0]
 801208a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801208c:	79fb      	ldrb	r3, [r7, #7]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d105      	bne.n	801209e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	4907      	ldr	r1, [pc, #28]	; (80120b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012096:	4808      	ldr	r0, [pc, #32]	; (80120b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012098:	f7ff fd09 	bl	8011aae <USBD_GetString>
 801209c:	e004      	b.n	80120a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801209e:	683a      	ldr	r2, [r7, #0]
 80120a0:	4904      	ldr	r1, [pc, #16]	; (80120b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80120a2:	4805      	ldr	r0, [pc, #20]	; (80120b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80120a4:	f7ff fd03 	bl	8011aae <USBD_GetString>
  }
  return USBD_StrDesc;
 80120a8:	4b02      	ldr	r3, [pc, #8]	; (80120b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
 80120b2:	bf00      	nop
 80120b4:	24003894 	.word	0x24003894
 80120b8:	08013134 	.word	0x08013134

080120bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	4603      	mov	r3, r0
 80120c4:	6039      	str	r1, [r7, #0]
 80120c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80120c8:	79fb      	ldrb	r3, [r7, #7]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d105      	bne.n	80120da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80120ce:	683a      	ldr	r2, [r7, #0]
 80120d0:	4907      	ldr	r1, [pc, #28]	; (80120f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80120d2:	4808      	ldr	r0, [pc, #32]	; (80120f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80120d4:	f7ff fceb 	bl	8011aae <USBD_GetString>
 80120d8:	e004      	b.n	80120e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80120da:	683a      	ldr	r2, [r7, #0]
 80120dc:	4904      	ldr	r1, [pc, #16]	; (80120f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80120de:	4805      	ldr	r0, [pc, #20]	; (80120f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80120e0:	f7ff fce5 	bl	8011aae <USBD_GetString>
  }
  return USBD_StrDesc;
 80120e4:	4b02      	ldr	r3, [pc, #8]	; (80120f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3708      	adds	r7, #8
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	24003894 	.word	0x24003894
 80120f4:	08013140 	.word	0x08013140

080120f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b084      	sub	sp, #16
 80120fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80120fe:	4b0f      	ldr	r3, [pc, #60]	; (801213c <Get_SerialNum+0x44>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012104:	4b0e      	ldr	r3, [pc, #56]	; (8012140 <Get_SerialNum+0x48>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801210a:	4b0e      	ldr	r3, [pc, #56]	; (8012144 <Get_SerialNum+0x4c>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012110:	68fa      	ldr	r2, [r7, #12]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4413      	add	r3, r2
 8012116:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d009      	beq.n	8012132 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801211e:	2208      	movs	r2, #8
 8012120:	4909      	ldr	r1, [pc, #36]	; (8012148 <Get_SerialNum+0x50>)
 8012122:	68f8      	ldr	r0, [r7, #12]
 8012124:	f000 f814 	bl	8012150 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012128:	2204      	movs	r2, #4
 801212a:	4908      	ldr	r1, [pc, #32]	; (801214c <Get_SerialNum+0x54>)
 801212c:	68b8      	ldr	r0, [r7, #8]
 801212e:	f000 f80f 	bl	8012150 <IntToUnicode>
  }
}
 8012132:	bf00      	nop
 8012134:	3710      	adds	r7, #16
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	1ff1e800 	.word	0x1ff1e800
 8012140:	1ff1e804 	.word	0x1ff1e804
 8012144:	1ff1e808 	.word	0x1ff1e808
 8012148:	2400016a 	.word	0x2400016a
 801214c:	2400017a 	.word	0x2400017a

08012150 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012150:	b480      	push	{r7}
 8012152:	b087      	sub	sp, #28
 8012154:	af00      	add	r7, sp, #0
 8012156:	60f8      	str	r0, [r7, #12]
 8012158:	60b9      	str	r1, [r7, #8]
 801215a:	4613      	mov	r3, r2
 801215c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801215e:	2300      	movs	r3, #0
 8012160:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012162:	2300      	movs	r3, #0
 8012164:	75fb      	strb	r3, [r7, #23]
 8012166:	e027      	b.n	80121b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	0f1b      	lsrs	r3, r3, #28
 801216c:	2b09      	cmp	r3, #9
 801216e:	d80b      	bhi.n	8012188 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	0f1b      	lsrs	r3, r3, #28
 8012174:	b2da      	uxtb	r2, r3
 8012176:	7dfb      	ldrb	r3, [r7, #23]
 8012178:	005b      	lsls	r3, r3, #1
 801217a:	4619      	mov	r1, r3
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	440b      	add	r3, r1
 8012180:	3230      	adds	r2, #48	; 0x30
 8012182:	b2d2      	uxtb	r2, r2
 8012184:	701a      	strb	r2, [r3, #0]
 8012186:	e00a      	b.n	801219e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	0f1b      	lsrs	r3, r3, #28
 801218c:	b2da      	uxtb	r2, r3
 801218e:	7dfb      	ldrb	r3, [r7, #23]
 8012190:	005b      	lsls	r3, r3, #1
 8012192:	4619      	mov	r1, r3
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	440b      	add	r3, r1
 8012198:	3237      	adds	r2, #55	; 0x37
 801219a:	b2d2      	uxtb	r2, r2
 801219c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	011b      	lsls	r3, r3, #4
 80121a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80121a4:	7dfb      	ldrb	r3, [r7, #23]
 80121a6:	005b      	lsls	r3, r3, #1
 80121a8:	3301      	adds	r3, #1
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	4413      	add	r3, r2
 80121ae:	2200      	movs	r2, #0
 80121b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80121b2:	7dfb      	ldrb	r3, [r7, #23]
 80121b4:	3301      	adds	r3, #1
 80121b6:	75fb      	strb	r3, [r7, #23]
 80121b8:	7dfa      	ldrb	r2, [r7, #23]
 80121ba:	79fb      	ldrb	r3, [r7, #7]
 80121bc:	429a      	cmp	r2, r3
 80121be:	d3d3      	bcc.n	8012168 <IntToUnicode+0x18>
  }
}
 80121c0:	bf00      	nop
 80121c2:	bf00      	nop
 80121c4:	371c      	adds	r7, #28
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr
	...

080121d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b0b8      	sub	sp, #224	; 0xe0
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80121dc:	2200      	movs	r2, #0
 80121de:	601a      	str	r2, [r3, #0]
 80121e0:	605a      	str	r2, [r3, #4]
 80121e2:	609a      	str	r2, [r3, #8]
 80121e4:	60da      	str	r2, [r3, #12]
 80121e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80121e8:	f107 0310 	add.w	r3, r7, #16
 80121ec:	22bc      	movs	r2, #188	; 0xbc
 80121ee:	2100      	movs	r1, #0
 80121f0:	4618      	mov	r0, r3
 80121f2:	f000 fb43 	bl	801287c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	4a2a      	ldr	r2, [pc, #168]	; (80122a4 <HAL_PCD_MspInit+0xd4>)
 80121fc:	4293      	cmp	r3, r2
 80121fe:	d14c      	bne.n	801229a <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012200:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012204:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012206:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801220a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801220e:	f107 0310 	add.w	r3, r7, #16
 8012212:	4618      	mov	r0, r3
 8012214:	f7f5 fb22 	bl	800785c <HAL_RCCEx_PeriphCLKConfig>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 801221e:	f7ee fe33 	bl	8000e88 <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012222:	4b21      	ldr	r3, [pc, #132]	; (80122a8 <HAL_PCD_MspInit+0xd8>)
 8012224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012228:	4a1f      	ldr	r2, [pc, #124]	; (80122a8 <HAL_PCD_MspInit+0xd8>)
 801222a:	f043 0301 	orr.w	r3, r3, #1
 801222e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012232:	4b1d      	ldr	r3, [pc, #116]	; (80122a8 <HAL_PCD_MspInit+0xd8>)
 8012234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012238:	f003 0301 	and.w	r3, r3, #1
 801223c:	60fb      	str	r3, [r7, #12]
 801223e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012240:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012248:	2302      	movs	r3, #2
 801224a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801224e:	2300      	movs	r3, #0
 8012250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012254:	2300      	movs	r3, #0
 8012256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801225a:	230a      	movs	r3, #10
 801225c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012260:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012264:	4619      	mov	r1, r3
 8012266:	4811      	ldr	r0, [pc, #68]	; (80122ac <HAL_PCD_MspInit+0xdc>)
 8012268:	f7f1 ff72 	bl	8004150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801226c:	4b0e      	ldr	r3, [pc, #56]	; (80122a8 <HAL_PCD_MspInit+0xd8>)
 801226e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012272:	4a0d      	ldr	r2, [pc, #52]	; (80122a8 <HAL_PCD_MspInit+0xd8>)
 8012274:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012278:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801227c:	4b0a      	ldr	r3, [pc, #40]	; (80122a8 <HAL_PCD_MspInit+0xd8>)
 801227e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012286:	60bb      	str	r3, [r7, #8]
 8012288:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801228a:	2200      	movs	r2, #0
 801228c:	2100      	movs	r1, #0
 801228e:	2065      	movs	r0, #101	; 0x65
 8012290:	f7ef fc7b 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012294:	2065      	movs	r0, #101	; 0x65
 8012296:	f7ef fc92 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801229a:	bf00      	nop
 801229c:	37e0      	adds	r7, #224	; 0xe0
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	40080000 	.word	0x40080000
 80122a8:	58024400 	.word	0x58024400
 80122ac:	58020000 	.word	0x58020000

080122b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80122c4:	4619      	mov	r1, r3
 80122c6:	4610      	mov	r0, r2
 80122c8:	f7fe fc4e 	bl	8010b68 <USBD_LL_SetupStage>
}
 80122cc:	bf00      	nop
 80122ce:	3708      	adds	r7, #8
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	460b      	mov	r3, r1
 80122de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80122e6:	78fa      	ldrb	r2, [r7, #3]
 80122e8:	6879      	ldr	r1, [r7, #4]
 80122ea:	4613      	mov	r3, r2
 80122ec:	00db      	lsls	r3, r3, #3
 80122ee:	1a9b      	subs	r3, r3, r2
 80122f0:	009b      	lsls	r3, r3, #2
 80122f2:	440b      	add	r3, r1
 80122f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	78fb      	ldrb	r3, [r7, #3]
 80122fc:	4619      	mov	r1, r3
 80122fe:	f7fe fc88 	bl	8010c12 <USBD_LL_DataOutStage>
}
 8012302:	bf00      	nop
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b082      	sub	sp, #8
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
 8012312:	460b      	mov	r3, r1
 8012314:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801231c:	78fa      	ldrb	r2, [r7, #3]
 801231e:	6879      	ldr	r1, [r7, #4]
 8012320:	4613      	mov	r3, r2
 8012322:	00db      	lsls	r3, r3, #3
 8012324:	1a9b      	subs	r3, r3, r2
 8012326:	009b      	lsls	r3, r3, #2
 8012328:	440b      	add	r3, r1
 801232a:	3348      	adds	r3, #72	; 0x48
 801232c:	681a      	ldr	r2, [r3, #0]
 801232e:	78fb      	ldrb	r3, [r7, #3]
 8012330:	4619      	mov	r1, r3
 8012332:	f7fe fcd3 	bl	8010cdc <USBD_LL_DataInStage>
}
 8012336:	bf00      	nop
 8012338:	3708      	adds	r7, #8
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}

0801233e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801233e:	b580      	push	{r7, lr}
 8012340:	b082      	sub	sp, #8
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801234c:	4618      	mov	r0, r3
 801234e:	f7fe fddc 	bl	8010f0a <USBD_LL_SOF>
}
 8012352:	bf00      	nop
 8012354:	3708      	adds	r7, #8
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}

0801235a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801235a:	b580      	push	{r7, lr}
 801235c:	b084      	sub	sp, #16
 801235e:	af00      	add	r7, sp, #0
 8012360:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012362:	2301      	movs	r3, #1
 8012364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d102      	bne.n	8012374 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801236e:	2300      	movs	r3, #0
 8012370:	73fb      	strb	r3, [r7, #15]
 8012372:	e008      	b.n	8012386 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	2b02      	cmp	r3, #2
 801237a:	d102      	bne.n	8012382 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801237c:	2301      	movs	r3, #1
 801237e:	73fb      	strb	r3, [r7, #15]
 8012380:	e001      	b.n	8012386 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012382:	f7ee fd81 	bl	8000e88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801238c:	7bfa      	ldrb	r2, [r7, #15]
 801238e:	4611      	mov	r1, r2
 8012390:	4618      	mov	r0, r3
 8012392:	f7fe fd7c 	bl	8010e8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801239c:	4618      	mov	r0, r3
 801239e:	f7fe fd35 	bl	8010e0c <USBD_LL_Reset>
}
 80123a2:	bf00      	nop
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
	...

080123ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7fe fd77 	bl	8010eae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	687a      	ldr	r2, [r7, #4]
 80123cc:	6812      	ldr	r2, [r2, #0]
 80123ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80123d2:	f043 0301 	orr.w	r3, r3, #1
 80123d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6a1b      	ldr	r3, [r3, #32]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d005      	beq.n	80123ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80123e0:	4b04      	ldr	r3, [pc, #16]	; (80123f4 <HAL_PCD_SuspendCallback+0x48>)
 80123e2:	691b      	ldr	r3, [r3, #16]
 80123e4:	4a03      	ldr	r2, [pc, #12]	; (80123f4 <HAL_PCD_SuspendCallback+0x48>)
 80123e6:	f043 0306 	orr.w	r3, r3, #6
 80123ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80123ec:	bf00      	nop
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	e000ed00 	.word	0xe000ed00

080123f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012406:	4618      	mov	r0, r3
 8012408:	f7fe fd67 	bl	8010eda <USBD_LL_Resume>
}
 801240c:	bf00      	nop
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	460b      	mov	r3, r1
 801241e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012426:	78fa      	ldrb	r2, [r7, #3]
 8012428:	4611      	mov	r1, r2
 801242a:	4618      	mov	r0, r3
 801242c:	f7fe fd95 	bl	8010f5a <USBD_LL_IsoOUTIncomplete>
}
 8012430:	bf00      	nop
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	460b      	mov	r3, r1
 8012442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801244a:	78fa      	ldrb	r2, [r7, #3]
 801244c:	4611      	mov	r1, r2
 801244e:	4618      	mov	r0, r3
 8012450:	f7fe fd76 	bl	8010f40 <USBD_LL_IsoINIncomplete>
}
 8012454:	bf00      	nop
 8012456:	3708      	adds	r7, #8
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801246a:	4618      	mov	r0, r3
 801246c:	f7fe fd82 	bl	8010f74 <USBD_LL_DevConnected>
}
 8012470:	bf00      	nop
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012486:	4618      	mov	r0, r3
 8012488:	f7fe fd7f 	bl	8010f8a <USBD_LL_DevDisconnected>
}
 801248c:	bf00      	nop
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d13e      	bne.n	8012522 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80124a4:	4a21      	ldr	r2, [pc, #132]	; (801252c <USBD_LL_Init+0x98>)
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	4a1f      	ldr	r2, [pc, #124]	; (801252c <USBD_LL_Init+0x98>)
 80124b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80124b4:	4b1d      	ldr	r3, [pc, #116]	; (801252c <USBD_LL_Init+0x98>)
 80124b6:	4a1e      	ldr	r2, [pc, #120]	; (8012530 <USBD_LL_Init+0x9c>)
 80124b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80124ba:	4b1c      	ldr	r3, [pc, #112]	; (801252c <USBD_LL_Init+0x98>)
 80124bc:	2209      	movs	r2, #9
 80124be:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80124c0:	4b1a      	ldr	r3, [pc, #104]	; (801252c <USBD_LL_Init+0x98>)
 80124c2:	2202      	movs	r2, #2
 80124c4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80124c6:	4b19      	ldr	r3, [pc, #100]	; (801252c <USBD_LL_Init+0x98>)
 80124c8:	2200      	movs	r2, #0
 80124ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80124cc:	4b17      	ldr	r3, [pc, #92]	; (801252c <USBD_LL_Init+0x98>)
 80124ce:	2202      	movs	r2, #2
 80124d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80124d2:	4b16      	ldr	r3, [pc, #88]	; (801252c <USBD_LL_Init+0x98>)
 80124d4:	2200      	movs	r2, #0
 80124d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80124d8:	4b14      	ldr	r3, [pc, #80]	; (801252c <USBD_LL_Init+0x98>)
 80124da:	2200      	movs	r2, #0
 80124dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80124de:	4b13      	ldr	r3, [pc, #76]	; (801252c <USBD_LL_Init+0x98>)
 80124e0:	2200      	movs	r2, #0
 80124e2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80124e4:	4b11      	ldr	r3, [pc, #68]	; (801252c <USBD_LL_Init+0x98>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80124ea:	4b10      	ldr	r3, [pc, #64]	; (801252c <USBD_LL_Init+0x98>)
 80124ec:	2200      	movs	r2, #0
 80124ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80124f0:	4b0e      	ldr	r3, [pc, #56]	; (801252c <USBD_LL_Init+0x98>)
 80124f2:	2200      	movs	r2, #0
 80124f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80124f6:	480d      	ldr	r0, [pc, #52]	; (801252c <USBD_LL_Init+0x98>)
 80124f8:	f7f2 ffce 	bl	8005498 <HAL_PCD_Init>
 80124fc:	4603      	mov	r3, r0
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d001      	beq.n	8012506 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012502:	f7ee fcc1 	bl	8000e88 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012506:	2180      	movs	r1, #128	; 0x80
 8012508:	4808      	ldr	r0, [pc, #32]	; (801252c <USBD_LL_Init+0x98>)
 801250a:	f7f4 f960 	bl	80067ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801250e:	2240      	movs	r2, #64	; 0x40
 8012510:	2100      	movs	r1, #0
 8012512:	4806      	ldr	r0, [pc, #24]	; (801252c <USBD_LL_Init+0x98>)
 8012514:	f7f4 f914 	bl	8006740 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012518:	2280      	movs	r2, #128	; 0x80
 801251a:	2101      	movs	r1, #1
 801251c:	4803      	ldr	r0, [pc, #12]	; (801252c <USBD_LL_Init+0x98>)
 801251e:	f7f4 f90f 	bl	8006740 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012522:	2300      	movs	r3, #0
}
 8012524:	4618      	mov	r0, r3
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}
 801252c:	24003a94 	.word	0x24003a94
 8012530:	40080000 	.word	0x40080000

08012534 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b084      	sub	sp, #16
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801253c:	2300      	movs	r3, #0
 801253e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012540:	2300      	movs	r3, #0
 8012542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801254a:	4618      	mov	r0, r3
 801254c:	f7f3 f8c8 	bl	80056e0 <HAL_PCD_Start>
 8012550:	4603      	mov	r3, r0
 8012552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012554:	7bfb      	ldrb	r3, [r7, #15]
 8012556:	4618      	mov	r0, r3
 8012558:	f000 f92a 	bl	80127b0 <USBD_Get_USB_Status>
 801255c:	4603      	mov	r3, r0
 801255e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012560:	7bbb      	ldrb	r3, [r7, #14]
}
 8012562:	4618      	mov	r0, r3
 8012564:	3710      	adds	r7, #16
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801256a:	b580      	push	{r7, lr}
 801256c:	b084      	sub	sp, #16
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
 8012572:	4608      	mov	r0, r1
 8012574:	4611      	mov	r1, r2
 8012576:	461a      	mov	r2, r3
 8012578:	4603      	mov	r3, r0
 801257a:	70fb      	strb	r3, [r7, #3]
 801257c:	460b      	mov	r3, r1
 801257e:	70bb      	strb	r3, [r7, #2]
 8012580:	4613      	mov	r3, r2
 8012582:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012584:	2300      	movs	r3, #0
 8012586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012588:	2300      	movs	r3, #0
 801258a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012592:	78bb      	ldrb	r3, [r7, #2]
 8012594:	883a      	ldrh	r2, [r7, #0]
 8012596:	78f9      	ldrb	r1, [r7, #3]
 8012598:	f7f3 fcd9 	bl	8005f4e <HAL_PCD_EP_Open>
 801259c:	4603      	mov	r3, r0
 801259e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125a0:	7bfb      	ldrb	r3, [r7, #15]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f000 f904 	bl	80127b0 <USBD_Get_USB_Status>
 80125a8:	4603      	mov	r3, r0
 80125aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3710      	adds	r7, #16
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}

080125b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125b6:	b580      	push	{r7, lr}
 80125b8:	b084      	sub	sp, #16
 80125ba:	af00      	add	r7, sp, #0
 80125bc:	6078      	str	r0, [r7, #4]
 80125be:	460b      	mov	r3, r1
 80125c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125c2:	2300      	movs	r3, #0
 80125c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125c6:	2300      	movs	r3, #0
 80125c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80125d0:	78fa      	ldrb	r2, [r7, #3]
 80125d2:	4611      	mov	r1, r2
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7f3 fd22 	bl	800601e <HAL_PCD_EP_Close>
 80125da:	4603      	mov	r3, r0
 80125dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125de:	7bfb      	ldrb	r3, [r7, #15]
 80125e0:	4618      	mov	r0, r3
 80125e2:	f000 f8e5 	bl	80127b0 <USBD_Get_USB_Status>
 80125e6:	4603      	mov	r3, r0
 80125e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b084      	sub	sp, #16
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	460b      	mov	r3, r1
 80125fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012600:	2300      	movs	r3, #0
 8012602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012604:	2300      	movs	r3, #0
 8012606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801260e:	78fa      	ldrb	r2, [r7, #3]
 8012610:	4611      	mov	r1, r2
 8012612:	4618      	mov	r0, r3
 8012614:	f7f3 fdfa 	bl	800620c <HAL_PCD_EP_SetStall>
 8012618:	4603      	mov	r3, r0
 801261a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801261c:	7bfb      	ldrb	r3, [r7, #15]
 801261e:	4618      	mov	r0, r3
 8012620:	f000 f8c6 	bl	80127b0 <USBD_Get_USB_Status>
 8012624:	4603      	mov	r3, r0
 8012626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012628:	7bbb      	ldrb	r3, [r7, #14]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3710      	adds	r7, #16
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}

08012632 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012632:	b580      	push	{r7, lr}
 8012634:	b084      	sub	sp, #16
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
 801263a:	460b      	mov	r3, r1
 801263c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801263e:	2300      	movs	r3, #0
 8012640:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012642:	2300      	movs	r3, #0
 8012644:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801264c:	78fa      	ldrb	r2, [r7, #3]
 801264e:	4611      	mov	r1, r2
 8012650:	4618      	mov	r0, r3
 8012652:	f7f3 fe3f 	bl	80062d4 <HAL_PCD_EP_ClrStall>
 8012656:	4603      	mov	r3, r0
 8012658:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801265a:	7bfb      	ldrb	r3, [r7, #15]
 801265c:	4618      	mov	r0, r3
 801265e:	f000 f8a7 	bl	80127b0 <USBD_Get_USB_Status>
 8012662:	4603      	mov	r3, r0
 8012664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012666:	7bbb      	ldrb	r3, [r7, #14]
}
 8012668:	4618      	mov	r0, r3
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012670:	b480      	push	{r7}
 8012672:	b085      	sub	sp, #20
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	460b      	mov	r3, r1
 801267a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012682:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012688:	2b00      	cmp	r3, #0
 801268a:	da0b      	bge.n	80126a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801268c:	78fb      	ldrb	r3, [r7, #3]
 801268e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012692:	68f9      	ldr	r1, [r7, #12]
 8012694:	4613      	mov	r3, r2
 8012696:	00db      	lsls	r3, r3, #3
 8012698:	1a9b      	subs	r3, r3, r2
 801269a:	009b      	lsls	r3, r3, #2
 801269c:	440b      	add	r3, r1
 801269e:	333e      	adds	r3, #62	; 0x3e
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	e00b      	b.n	80126bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80126a4:	78fb      	ldrb	r3, [r7, #3]
 80126a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126aa:	68f9      	ldr	r1, [r7, #12]
 80126ac:	4613      	mov	r3, r2
 80126ae:	00db      	lsls	r3, r3, #3
 80126b0:	1a9b      	subs	r3, r3, r2
 80126b2:	009b      	lsls	r3, r3, #2
 80126b4:	440b      	add	r3, r1
 80126b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80126ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3714      	adds	r7, #20
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	460b      	mov	r3, r1
 80126d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126d4:	2300      	movs	r3, #0
 80126d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126d8:	2300      	movs	r3, #0
 80126da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80126e2:	78fa      	ldrb	r2, [r7, #3]
 80126e4:	4611      	mov	r1, r2
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7f3 fc0c 	bl	8005f04 <HAL_PCD_SetAddress>
 80126ec:	4603      	mov	r3, r0
 80126ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126f0:	7bfb      	ldrb	r3, [r7, #15]
 80126f2:	4618      	mov	r0, r3
 80126f4:	f000 f85c 	bl	80127b0 <USBD_Get_USB_Status>
 80126f8:	4603      	mov	r3, r0
 80126fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3710      	adds	r7, #16
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}

08012706 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012706:	b580      	push	{r7, lr}
 8012708:	b086      	sub	sp, #24
 801270a:	af00      	add	r7, sp, #0
 801270c:	60f8      	str	r0, [r7, #12]
 801270e:	607a      	str	r2, [r7, #4]
 8012710:	603b      	str	r3, [r7, #0]
 8012712:	460b      	mov	r3, r1
 8012714:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012716:	2300      	movs	r3, #0
 8012718:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801271a:	2300      	movs	r3, #0
 801271c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012724:	7af9      	ldrb	r1, [r7, #11]
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	f7f3 fd25 	bl	8006178 <HAL_PCD_EP_Transmit>
 801272e:	4603      	mov	r3, r0
 8012730:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012732:	7dfb      	ldrb	r3, [r7, #23]
 8012734:	4618      	mov	r0, r3
 8012736:	f000 f83b 	bl	80127b0 <USBD_Get_USB_Status>
 801273a:	4603      	mov	r3, r0
 801273c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801273e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012740:	4618      	mov	r0, r3
 8012742:	3718      	adds	r7, #24
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b086      	sub	sp, #24
 801274c:	af00      	add	r7, sp, #0
 801274e:	60f8      	str	r0, [r7, #12]
 8012750:	607a      	str	r2, [r7, #4]
 8012752:	603b      	str	r3, [r7, #0]
 8012754:	460b      	mov	r3, r1
 8012756:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012758:	2300      	movs	r3, #0
 801275a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801275c:	2300      	movs	r3, #0
 801275e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012766:	7af9      	ldrb	r1, [r7, #11]
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	687a      	ldr	r2, [r7, #4]
 801276c:	f7f3 fca1 	bl	80060b2 <HAL_PCD_EP_Receive>
 8012770:	4603      	mov	r3, r0
 8012772:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012774:	7dfb      	ldrb	r3, [r7, #23]
 8012776:	4618      	mov	r0, r3
 8012778:	f000 f81a 	bl	80127b0 <USBD_Get_USB_Status>
 801277c:	4603      	mov	r3, r0
 801277e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012780:	7dbb      	ldrb	r3, [r7, #22]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3718      	adds	r7, #24
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}

0801278a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801278a:	b580      	push	{r7, lr}
 801278c:	b082      	sub	sp, #8
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
 8012792:	460b      	mov	r3, r1
 8012794:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801279c:	78fa      	ldrb	r2, [r7, #3]
 801279e:	4611      	mov	r1, r2
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7f3 fcd1 	bl	8006148 <HAL_PCD_EP_GetRxCount>
 80127a6:	4603      	mov	r3, r0
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	4603      	mov	r3, r0
 80127b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127ba:	2300      	movs	r3, #0
 80127bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80127be:	79fb      	ldrb	r3, [r7, #7]
 80127c0:	2b03      	cmp	r3, #3
 80127c2:	d817      	bhi.n	80127f4 <USBD_Get_USB_Status+0x44>
 80127c4:	a201      	add	r2, pc, #4	; (adr r2, 80127cc <USBD_Get_USB_Status+0x1c>)
 80127c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127ca:	bf00      	nop
 80127cc:	080127dd 	.word	0x080127dd
 80127d0:	080127e3 	.word	0x080127e3
 80127d4:	080127e9 	.word	0x080127e9
 80127d8:	080127ef 	.word	0x080127ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80127dc:	2300      	movs	r3, #0
 80127de:	73fb      	strb	r3, [r7, #15]
    break;
 80127e0:	e00b      	b.n	80127fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80127e2:	2303      	movs	r3, #3
 80127e4:	73fb      	strb	r3, [r7, #15]
    break;
 80127e6:	e008      	b.n	80127fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80127e8:	2301      	movs	r3, #1
 80127ea:	73fb      	strb	r3, [r7, #15]
    break;
 80127ec:	e005      	b.n	80127fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80127ee:	2303      	movs	r3, #3
 80127f0:	73fb      	strb	r3, [r7, #15]
    break;
 80127f2:	e002      	b.n	80127fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80127f4:	2303      	movs	r3, #3
 80127f6:	73fb      	strb	r3, [r7, #15]
    break;
 80127f8:	bf00      	nop
  }
  return usb_status;
 80127fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3714      	adds	r7, #20
 8012800:	46bd      	mov	sp, r7
 8012802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012806:	4770      	bx	lr

08012808 <__errno>:
 8012808:	4b01      	ldr	r3, [pc, #4]	; (8012810 <__errno+0x8>)
 801280a:	6818      	ldr	r0, [r3, #0]
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	24000184 	.word	0x24000184

08012814 <__libc_init_array>:
 8012814:	b570      	push	{r4, r5, r6, lr}
 8012816:	4d0d      	ldr	r5, [pc, #52]	; (801284c <__libc_init_array+0x38>)
 8012818:	4c0d      	ldr	r4, [pc, #52]	; (8012850 <__libc_init_array+0x3c>)
 801281a:	1b64      	subs	r4, r4, r5
 801281c:	10a4      	asrs	r4, r4, #2
 801281e:	2600      	movs	r6, #0
 8012820:	42a6      	cmp	r6, r4
 8012822:	d109      	bne.n	8012838 <__libc_init_array+0x24>
 8012824:	4d0b      	ldr	r5, [pc, #44]	; (8012854 <__libc_init_array+0x40>)
 8012826:	4c0c      	ldr	r4, [pc, #48]	; (8012858 <__libc_init_array+0x44>)
 8012828:	f000 fc5e 	bl	80130e8 <_init>
 801282c:	1b64      	subs	r4, r4, r5
 801282e:	10a4      	asrs	r4, r4, #2
 8012830:	2600      	movs	r6, #0
 8012832:	42a6      	cmp	r6, r4
 8012834:	d105      	bne.n	8012842 <__libc_init_array+0x2e>
 8012836:	bd70      	pop	{r4, r5, r6, pc}
 8012838:	f855 3b04 	ldr.w	r3, [r5], #4
 801283c:	4798      	blx	r3
 801283e:	3601      	adds	r6, #1
 8012840:	e7ee      	b.n	8012820 <__libc_init_array+0xc>
 8012842:	f855 3b04 	ldr.w	r3, [r5], #4
 8012846:	4798      	blx	r3
 8012848:	3601      	adds	r6, #1
 801284a:	e7f2      	b.n	8012832 <__libc_init_array+0x1e>
 801284c:	080131e0 	.word	0x080131e0
 8012850:	080131e0 	.word	0x080131e0
 8012854:	080131e0 	.word	0x080131e0
 8012858:	080131e4 	.word	0x080131e4

0801285c <malloc>:
 801285c:	4b02      	ldr	r3, [pc, #8]	; (8012868 <malloc+0xc>)
 801285e:	4601      	mov	r1, r0
 8012860:	6818      	ldr	r0, [r3, #0]
 8012862:	f000 b863 	b.w	801292c <_malloc_r>
 8012866:	bf00      	nop
 8012868:	24000184 	.word	0x24000184

0801286c <free>:
 801286c:	4b02      	ldr	r3, [pc, #8]	; (8012878 <free+0xc>)
 801286e:	4601      	mov	r1, r0
 8012870:	6818      	ldr	r0, [r3, #0]
 8012872:	f000 b80b 	b.w	801288c <_free_r>
 8012876:	bf00      	nop
 8012878:	24000184 	.word	0x24000184

0801287c <memset>:
 801287c:	4402      	add	r2, r0
 801287e:	4603      	mov	r3, r0
 8012880:	4293      	cmp	r3, r2
 8012882:	d100      	bne.n	8012886 <memset+0xa>
 8012884:	4770      	bx	lr
 8012886:	f803 1b01 	strb.w	r1, [r3], #1
 801288a:	e7f9      	b.n	8012880 <memset+0x4>

0801288c <_free_r>:
 801288c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801288e:	2900      	cmp	r1, #0
 8012890:	d048      	beq.n	8012924 <_free_r+0x98>
 8012892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012896:	9001      	str	r0, [sp, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	f1a1 0404 	sub.w	r4, r1, #4
 801289e:	bfb8      	it	lt
 80128a0:	18e4      	addlt	r4, r4, r3
 80128a2:	f000 f8cd 	bl	8012a40 <__malloc_lock>
 80128a6:	4a20      	ldr	r2, [pc, #128]	; (8012928 <_free_r+0x9c>)
 80128a8:	9801      	ldr	r0, [sp, #4]
 80128aa:	6813      	ldr	r3, [r2, #0]
 80128ac:	4615      	mov	r5, r2
 80128ae:	b933      	cbnz	r3, 80128be <_free_r+0x32>
 80128b0:	6063      	str	r3, [r4, #4]
 80128b2:	6014      	str	r4, [r2, #0]
 80128b4:	b003      	add	sp, #12
 80128b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128ba:	f000 b8c7 	b.w	8012a4c <__malloc_unlock>
 80128be:	42a3      	cmp	r3, r4
 80128c0:	d90b      	bls.n	80128da <_free_r+0x4e>
 80128c2:	6821      	ldr	r1, [r4, #0]
 80128c4:	1862      	adds	r2, r4, r1
 80128c6:	4293      	cmp	r3, r2
 80128c8:	bf04      	itt	eq
 80128ca:	681a      	ldreq	r2, [r3, #0]
 80128cc:	685b      	ldreq	r3, [r3, #4]
 80128ce:	6063      	str	r3, [r4, #4]
 80128d0:	bf04      	itt	eq
 80128d2:	1852      	addeq	r2, r2, r1
 80128d4:	6022      	streq	r2, [r4, #0]
 80128d6:	602c      	str	r4, [r5, #0]
 80128d8:	e7ec      	b.n	80128b4 <_free_r+0x28>
 80128da:	461a      	mov	r2, r3
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	b10b      	cbz	r3, 80128e4 <_free_r+0x58>
 80128e0:	42a3      	cmp	r3, r4
 80128e2:	d9fa      	bls.n	80128da <_free_r+0x4e>
 80128e4:	6811      	ldr	r1, [r2, #0]
 80128e6:	1855      	adds	r5, r2, r1
 80128e8:	42a5      	cmp	r5, r4
 80128ea:	d10b      	bne.n	8012904 <_free_r+0x78>
 80128ec:	6824      	ldr	r4, [r4, #0]
 80128ee:	4421      	add	r1, r4
 80128f0:	1854      	adds	r4, r2, r1
 80128f2:	42a3      	cmp	r3, r4
 80128f4:	6011      	str	r1, [r2, #0]
 80128f6:	d1dd      	bne.n	80128b4 <_free_r+0x28>
 80128f8:	681c      	ldr	r4, [r3, #0]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	6053      	str	r3, [r2, #4]
 80128fe:	4421      	add	r1, r4
 8012900:	6011      	str	r1, [r2, #0]
 8012902:	e7d7      	b.n	80128b4 <_free_r+0x28>
 8012904:	d902      	bls.n	801290c <_free_r+0x80>
 8012906:	230c      	movs	r3, #12
 8012908:	6003      	str	r3, [r0, #0]
 801290a:	e7d3      	b.n	80128b4 <_free_r+0x28>
 801290c:	6825      	ldr	r5, [r4, #0]
 801290e:	1961      	adds	r1, r4, r5
 8012910:	428b      	cmp	r3, r1
 8012912:	bf04      	itt	eq
 8012914:	6819      	ldreq	r1, [r3, #0]
 8012916:	685b      	ldreq	r3, [r3, #4]
 8012918:	6063      	str	r3, [r4, #4]
 801291a:	bf04      	itt	eq
 801291c:	1949      	addeq	r1, r1, r5
 801291e:	6021      	streq	r1, [r4, #0]
 8012920:	6054      	str	r4, [r2, #4]
 8012922:	e7c7      	b.n	80128b4 <_free_r+0x28>
 8012924:	b003      	add	sp, #12
 8012926:	bd30      	pop	{r4, r5, pc}
 8012928:	24000220 	.word	0x24000220

0801292c <_malloc_r>:
 801292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801292e:	1ccd      	adds	r5, r1, #3
 8012930:	f025 0503 	bic.w	r5, r5, #3
 8012934:	3508      	adds	r5, #8
 8012936:	2d0c      	cmp	r5, #12
 8012938:	bf38      	it	cc
 801293a:	250c      	movcc	r5, #12
 801293c:	2d00      	cmp	r5, #0
 801293e:	4606      	mov	r6, r0
 8012940:	db01      	blt.n	8012946 <_malloc_r+0x1a>
 8012942:	42a9      	cmp	r1, r5
 8012944:	d903      	bls.n	801294e <_malloc_r+0x22>
 8012946:	230c      	movs	r3, #12
 8012948:	6033      	str	r3, [r6, #0]
 801294a:	2000      	movs	r0, #0
 801294c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801294e:	f000 f877 	bl	8012a40 <__malloc_lock>
 8012952:	4921      	ldr	r1, [pc, #132]	; (80129d8 <_malloc_r+0xac>)
 8012954:	680a      	ldr	r2, [r1, #0]
 8012956:	4614      	mov	r4, r2
 8012958:	b99c      	cbnz	r4, 8012982 <_malloc_r+0x56>
 801295a:	4f20      	ldr	r7, [pc, #128]	; (80129dc <_malloc_r+0xb0>)
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	b923      	cbnz	r3, 801296a <_malloc_r+0x3e>
 8012960:	4621      	mov	r1, r4
 8012962:	4630      	mov	r0, r6
 8012964:	f000 f83c 	bl	80129e0 <_sbrk_r>
 8012968:	6038      	str	r0, [r7, #0]
 801296a:	4629      	mov	r1, r5
 801296c:	4630      	mov	r0, r6
 801296e:	f000 f837 	bl	80129e0 <_sbrk_r>
 8012972:	1c43      	adds	r3, r0, #1
 8012974:	d123      	bne.n	80129be <_malloc_r+0x92>
 8012976:	230c      	movs	r3, #12
 8012978:	6033      	str	r3, [r6, #0]
 801297a:	4630      	mov	r0, r6
 801297c:	f000 f866 	bl	8012a4c <__malloc_unlock>
 8012980:	e7e3      	b.n	801294a <_malloc_r+0x1e>
 8012982:	6823      	ldr	r3, [r4, #0]
 8012984:	1b5b      	subs	r3, r3, r5
 8012986:	d417      	bmi.n	80129b8 <_malloc_r+0x8c>
 8012988:	2b0b      	cmp	r3, #11
 801298a:	d903      	bls.n	8012994 <_malloc_r+0x68>
 801298c:	6023      	str	r3, [r4, #0]
 801298e:	441c      	add	r4, r3
 8012990:	6025      	str	r5, [r4, #0]
 8012992:	e004      	b.n	801299e <_malloc_r+0x72>
 8012994:	6863      	ldr	r3, [r4, #4]
 8012996:	42a2      	cmp	r2, r4
 8012998:	bf0c      	ite	eq
 801299a:	600b      	streq	r3, [r1, #0]
 801299c:	6053      	strne	r3, [r2, #4]
 801299e:	4630      	mov	r0, r6
 80129a0:	f000 f854 	bl	8012a4c <__malloc_unlock>
 80129a4:	f104 000b 	add.w	r0, r4, #11
 80129a8:	1d23      	adds	r3, r4, #4
 80129aa:	f020 0007 	bic.w	r0, r0, #7
 80129ae:	1ac2      	subs	r2, r0, r3
 80129b0:	d0cc      	beq.n	801294c <_malloc_r+0x20>
 80129b2:	1a1b      	subs	r3, r3, r0
 80129b4:	50a3      	str	r3, [r4, r2]
 80129b6:	e7c9      	b.n	801294c <_malloc_r+0x20>
 80129b8:	4622      	mov	r2, r4
 80129ba:	6864      	ldr	r4, [r4, #4]
 80129bc:	e7cc      	b.n	8012958 <_malloc_r+0x2c>
 80129be:	1cc4      	adds	r4, r0, #3
 80129c0:	f024 0403 	bic.w	r4, r4, #3
 80129c4:	42a0      	cmp	r0, r4
 80129c6:	d0e3      	beq.n	8012990 <_malloc_r+0x64>
 80129c8:	1a21      	subs	r1, r4, r0
 80129ca:	4630      	mov	r0, r6
 80129cc:	f000 f808 	bl	80129e0 <_sbrk_r>
 80129d0:	3001      	adds	r0, #1
 80129d2:	d1dd      	bne.n	8012990 <_malloc_r+0x64>
 80129d4:	e7cf      	b.n	8012976 <_malloc_r+0x4a>
 80129d6:	bf00      	nop
 80129d8:	24000220 	.word	0x24000220
 80129dc:	24000224 	.word	0x24000224

080129e0 <_sbrk_r>:
 80129e0:	b538      	push	{r3, r4, r5, lr}
 80129e2:	4d06      	ldr	r5, [pc, #24]	; (80129fc <_sbrk_r+0x1c>)
 80129e4:	2300      	movs	r3, #0
 80129e6:	4604      	mov	r4, r0
 80129e8:	4608      	mov	r0, r1
 80129ea:	602b      	str	r3, [r5, #0]
 80129ec:	f7ee fba2 	bl	8001134 <_sbrk>
 80129f0:	1c43      	adds	r3, r0, #1
 80129f2:	d102      	bne.n	80129fa <_sbrk_r+0x1a>
 80129f4:	682b      	ldr	r3, [r5, #0]
 80129f6:	b103      	cbz	r3, 80129fa <_sbrk_r+0x1a>
 80129f8:	6023      	str	r3, [r4, #0]
 80129fa:	bd38      	pop	{r3, r4, r5, pc}
 80129fc:	24003e9c 	.word	0x24003e9c

08012a00 <siprintf>:
 8012a00:	b40e      	push	{r1, r2, r3}
 8012a02:	b500      	push	{lr}
 8012a04:	b09c      	sub	sp, #112	; 0x70
 8012a06:	ab1d      	add	r3, sp, #116	; 0x74
 8012a08:	9002      	str	r0, [sp, #8]
 8012a0a:	9006      	str	r0, [sp, #24]
 8012a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012a10:	4809      	ldr	r0, [pc, #36]	; (8012a38 <siprintf+0x38>)
 8012a12:	9107      	str	r1, [sp, #28]
 8012a14:	9104      	str	r1, [sp, #16]
 8012a16:	4909      	ldr	r1, [pc, #36]	; (8012a3c <siprintf+0x3c>)
 8012a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a1c:	9105      	str	r1, [sp, #20]
 8012a1e:	6800      	ldr	r0, [r0, #0]
 8012a20:	9301      	str	r3, [sp, #4]
 8012a22:	a902      	add	r1, sp, #8
 8012a24:	f000 f874 	bl	8012b10 <_svfiprintf_r>
 8012a28:	9b02      	ldr	r3, [sp, #8]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	701a      	strb	r2, [r3, #0]
 8012a2e:	b01c      	add	sp, #112	; 0x70
 8012a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a34:	b003      	add	sp, #12
 8012a36:	4770      	bx	lr
 8012a38:	24000184 	.word	0x24000184
 8012a3c:	ffff0208 	.word	0xffff0208

08012a40 <__malloc_lock>:
 8012a40:	4801      	ldr	r0, [pc, #4]	; (8012a48 <__malloc_lock+0x8>)
 8012a42:	f000 baf9 	b.w	8013038 <__retarget_lock_acquire_recursive>
 8012a46:	bf00      	nop
 8012a48:	24003ea4 	.word	0x24003ea4

08012a4c <__malloc_unlock>:
 8012a4c:	4801      	ldr	r0, [pc, #4]	; (8012a54 <__malloc_unlock+0x8>)
 8012a4e:	f000 baf4 	b.w	801303a <__retarget_lock_release_recursive>
 8012a52:	bf00      	nop
 8012a54:	24003ea4 	.word	0x24003ea4

08012a58 <__ssputs_r>:
 8012a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a5c:	688e      	ldr	r6, [r1, #8]
 8012a5e:	429e      	cmp	r6, r3
 8012a60:	4682      	mov	sl, r0
 8012a62:	460c      	mov	r4, r1
 8012a64:	4690      	mov	r8, r2
 8012a66:	461f      	mov	r7, r3
 8012a68:	d838      	bhi.n	8012adc <__ssputs_r+0x84>
 8012a6a:	898a      	ldrh	r2, [r1, #12]
 8012a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a70:	d032      	beq.n	8012ad8 <__ssputs_r+0x80>
 8012a72:	6825      	ldr	r5, [r4, #0]
 8012a74:	6909      	ldr	r1, [r1, #16]
 8012a76:	eba5 0901 	sub.w	r9, r5, r1
 8012a7a:	6965      	ldr	r5, [r4, #20]
 8012a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a84:	3301      	adds	r3, #1
 8012a86:	444b      	add	r3, r9
 8012a88:	106d      	asrs	r5, r5, #1
 8012a8a:	429d      	cmp	r5, r3
 8012a8c:	bf38      	it	cc
 8012a8e:	461d      	movcc	r5, r3
 8012a90:	0553      	lsls	r3, r2, #21
 8012a92:	d531      	bpl.n	8012af8 <__ssputs_r+0xa0>
 8012a94:	4629      	mov	r1, r5
 8012a96:	f7ff ff49 	bl	801292c <_malloc_r>
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	b950      	cbnz	r0, 8012ab4 <__ssputs_r+0x5c>
 8012a9e:	230c      	movs	r3, #12
 8012aa0:	f8ca 3000 	str.w	r3, [sl]
 8012aa4:	89a3      	ldrh	r3, [r4, #12]
 8012aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012aaa:	81a3      	strh	r3, [r4, #12]
 8012aac:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ab4:	6921      	ldr	r1, [r4, #16]
 8012ab6:	464a      	mov	r2, r9
 8012ab8:	f000 fac0 	bl	801303c <memcpy>
 8012abc:	89a3      	ldrh	r3, [r4, #12]
 8012abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ac6:	81a3      	strh	r3, [r4, #12]
 8012ac8:	6126      	str	r6, [r4, #16]
 8012aca:	6165      	str	r5, [r4, #20]
 8012acc:	444e      	add	r6, r9
 8012ace:	eba5 0509 	sub.w	r5, r5, r9
 8012ad2:	6026      	str	r6, [r4, #0]
 8012ad4:	60a5      	str	r5, [r4, #8]
 8012ad6:	463e      	mov	r6, r7
 8012ad8:	42be      	cmp	r6, r7
 8012ada:	d900      	bls.n	8012ade <__ssputs_r+0x86>
 8012adc:	463e      	mov	r6, r7
 8012ade:	4632      	mov	r2, r6
 8012ae0:	6820      	ldr	r0, [r4, #0]
 8012ae2:	4641      	mov	r1, r8
 8012ae4:	f000 fab8 	bl	8013058 <memmove>
 8012ae8:	68a3      	ldr	r3, [r4, #8]
 8012aea:	6822      	ldr	r2, [r4, #0]
 8012aec:	1b9b      	subs	r3, r3, r6
 8012aee:	4432      	add	r2, r6
 8012af0:	60a3      	str	r3, [r4, #8]
 8012af2:	6022      	str	r2, [r4, #0]
 8012af4:	2000      	movs	r0, #0
 8012af6:	e7db      	b.n	8012ab0 <__ssputs_r+0x58>
 8012af8:	462a      	mov	r2, r5
 8012afa:	f000 fac7 	bl	801308c <_realloc_r>
 8012afe:	4606      	mov	r6, r0
 8012b00:	2800      	cmp	r0, #0
 8012b02:	d1e1      	bne.n	8012ac8 <__ssputs_r+0x70>
 8012b04:	6921      	ldr	r1, [r4, #16]
 8012b06:	4650      	mov	r0, sl
 8012b08:	f7ff fec0 	bl	801288c <_free_r>
 8012b0c:	e7c7      	b.n	8012a9e <__ssputs_r+0x46>
	...

08012b10 <_svfiprintf_r>:
 8012b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b14:	4698      	mov	r8, r3
 8012b16:	898b      	ldrh	r3, [r1, #12]
 8012b18:	061b      	lsls	r3, r3, #24
 8012b1a:	b09d      	sub	sp, #116	; 0x74
 8012b1c:	4607      	mov	r7, r0
 8012b1e:	460d      	mov	r5, r1
 8012b20:	4614      	mov	r4, r2
 8012b22:	d50e      	bpl.n	8012b42 <_svfiprintf_r+0x32>
 8012b24:	690b      	ldr	r3, [r1, #16]
 8012b26:	b963      	cbnz	r3, 8012b42 <_svfiprintf_r+0x32>
 8012b28:	2140      	movs	r1, #64	; 0x40
 8012b2a:	f7ff feff 	bl	801292c <_malloc_r>
 8012b2e:	6028      	str	r0, [r5, #0]
 8012b30:	6128      	str	r0, [r5, #16]
 8012b32:	b920      	cbnz	r0, 8012b3e <_svfiprintf_r+0x2e>
 8012b34:	230c      	movs	r3, #12
 8012b36:	603b      	str	r3, [r7, #0]
 8012b38:	f04f 30ff 	mov.w	r0, #4294967295
 8012b3c:	e0d1      	b.n	8012ce2 <_svfiprintf_r+0x1d2>
 8012b3e:	2340      	movs	r3, #64	; 0x40
 8012b40:	616b      	str	r3, [r5, #20]
 8012b42:	2300      	movs	r3, #0
 8012b44:	9309      	str	r3, [sp, #36]	; 0x24
 8012b46:	2320      	movs	r3, #32
 8012b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b50:	2330      	movs	r3, #48	; 0x30
 8012b52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012cfc <_svfiprintf_r+0x1ec>
 8012b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b5a:	f04f 0901 	mov.w	r9, #1
 8012b5e:	4623      	mov	r3, r4
 8012b60:	469a      	mov	sl, r3
 8012b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b66:	b10a      	cbz	r2, 8012b6c <_svfiprintf_r+0x5c>
 8012b68:	2a25      	cmp	r2, #37	; 0x25
 8012b6a:	d1f9      	bne.n	8012b60 <_svfiprintf_r+0x50>
 8012b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8012b70:	d00b      	beq.n	8012b8a <_svfiprintf_r+0x7a>
 8012b72:	465b      	mov	r3, fp
 8012b74:	4622      	mov	r2, r4
 8012b76:	4629      	mov	r1, r5
 8012b78:	4638      	mov	r0, r7
 8012b7a:	f7ff ff6d 	bl	8012a58 <__ssputs_r>
 8012b7e:	3001      	adds	r0, #1
 8012b80:	f000 80aa 	beq.w	8012cd8 <_svfiprintf_r+0x1c8>
 8012b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b86:	445a      	add	r2, fp
 8012b88:	9209      	str	r2, [sp, #36]	; 0x24
 8012b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f000 80a2 	beq.w	8012cd8 <_svfiprintf_r+0x1c8>
 8012b94:	2300      	movs	r3, #0
 8012b96:	f04f 32ff 	mov.w	r2, #4294967295
 8012b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b9e:	f10a 0a01 	add.w	sl, sl, #1
 8012ba2:	9304      	str	r3, [sp, #16]
 8012ba4:	9307      	str	r3, [sp, #28]
 8012ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012baa:	931a      	str	r3, [sp, #104]	; 0x68
 8012bac:	4654      	mov	r4, sl
 8012bae:	2205      	movs	r2, #5
 8012bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bb4:	4851      	ldr	r0, [pc, #324]	; (8012cfc <_svfiprintf_r+0x1ec>)
 8012bb6:	f7ed fb9b 	bl	80002f0 <memchr>
 8012bba:	9a04      	ldr	r2, [sp, #16]
 8012bbc:	b9d8      	cbnz	r0, 8012bf6 <_svfiprintf_r+0xe6>
 8012bbe:	06d0      	lsls	r0, r2, #27
 8012bc0:	bf44      	itt	mi
 8012bc2:	2320      	movmi	r3, #32
 8012bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bc8:	0711      	lsls	r1, r2, #28
 8012bca:	bf44      	itt	mi
 8012bcc:	232b      	movmi	r3, #43	; 0x2b
 8012bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8012bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8012bd8:	d015      	beq.n	8012c06 <_svfiprintf_r+0xf6>
 8012bda:	9a07      	ldr	r2, [sp, #28]
 8012bdc:	4654      	mov	r4, sl
 8012bde:	2000      	movs	r0, #0
 8012be0:	f04f 0c0a 	mov.w	ip, #10
 8012be4:	4621      	mov	r1, r4
 8012be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bea:	3b30      	subs	r3, #48	; 0x30
 8012bec:	2b09      	cmp	r3, #9
 8012bee:	d94e      	bls.n	8012c8e <_svfiprintf_r+0x17e>
 8012bf0:	b1b0      	cbz	r0, 8012c20 <_svfiprintf_r+0x110>
 8012bf2:	9207      	str	r2, [sp, #28]
 8012bf4:	e014      	b.n	8012c20 <_svfiprintf_r+0x110>
 8012bf6:	eba0 0308 	sub.w	r3, r0, r8
 8012bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8012bfe:	4313      	orrs	r3, r2
 8012c00:	9304      	str	r3, [sp, #16]
 8012c02:	46a2      	mov	sl, r4
 8012c04:	e7d2      	b.n	8012bac <_svfiprintf_r+0x9c>
 8012c06:	9b03      	ldr	r3, [sp, #12]
 8012c08:	1d19      	adds	r1, r3, #4
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	9103      	str	r1, [sp, #12]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	bfbb      	ittet	lt
 8012c12:	425b      	neglt	r3, r3
 8012c14:	f042 0202 	orrlt.w	r2, r2, #2
 8012c18:	9307      	strge	r3, [sp, #28]
 8012c1a:	9307      	strlt	r3, [sp, #28]
 8012c1c:	bfb8      	it	lt
 8012c1e:	9204      	strlt	r2, [sp, #16]
 8012c20:	7823      	ldrb	r3, [r4, #0]
 8012c22:	2b2e      	cmp	r3, #46	; 0x2e
 8012c24:	d10c      	bne.n	8012c40 <_svfiprintf_r+0x130>
 8012c26:	7863      	ldrb	r3, [r4, #1]
 8012c28:	2b2a      	cmp	r3, #42	; 0x2a
 8012c2a:	d135      	bne.n	8012c98 <_svfiprintf_r+0x188>
 8012c2c:	9b03      	ldr	r3, [sp, #12]
 8012c2e:	1d1a      	adds	r2, r3, #4
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	9203      	str	r2, [sp, #12]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	bfb8      	it	lt
 8012c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c3c:	3402      	adds	r4, #2
 8012c3e:	9305      	str	r3, [sp, #20]
 8012c40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012d0c <_svfiprintf_r+0x1fc>
 8012c44:	7821      	ldrb	r1, [r4, #0]
 8012c46:	2203      	movs	r2, #3
 8012c48:	4650      	mov	r0, sl
 8012c4a:	f7ed fb51 	bl	80002f0 <memchr>
 8012c4e:	b140      	cbz	r0, 8012c62 <_svfiprintf_r+0x152>
 8012c50:	2340      	movs	r3, #64	; 0x40
 8012c52:	eba0 000a 	sub.w	r0, r0, sl
 8012c56:	fa03 f000 	lsl.w	r0, r3, r0
 8012c5a:	9b04      	ldr	r3, [sp, #16]
 8012c5c:	4303      	orrs	r3, r0
 8012c5e:	3401      	adds	r4, #1
 8012c60:	9304      	str	r3, [sp, #16]
 8012c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c66:	4826      	ldr	r0, [pc, #152]	; (8012d00 <_svfiprintf_r+0x1f0>)
 8012c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c6c:	2206      	movs	r2, #6
 8012c6e:	f7ed fb3f 	bl	80002f0 <memchr>
 8012c72:	2800      	cmp	r0, #0
 8012c74:	d038      	beq.n	8012ce8 <_svfiprintf_r+0x1d8>
 8012c76:	4b23      	ldr	r3, [pc, #140]	; (8012d04 <_svfiprintf_r+0x1f4>)
 8012c78:	bb1b      	cbnz	r3, 8012cc2 <_svfiprintf_r+0x1b2>
 8012c7a:	9b03      	ldr	r3, [sp, #12]
 8012c7c:	3307      	adds	r3, #7
 8012c7e:	f023 0307 	bic.w	r3, r3, #7
 8012c82:	3308      	adds	r3, #8
 8012c84:	9303      	str	r3, [sp, #12]
 8012c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c88:	4433      	add	r3, r6
 8012c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8012c8c:	e767      	b.n	8012b5e <_svfiprintf_r+0x4e>
 8012c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c92:	460c      	mov	r4, r1
 8012c94:	2001      	movs	r0, #1
 8012c96:	e7a5      	b.n	8012be4 <_svfiprintf_r+0xd4>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	3401      	adds	r4, #1
 8012c9c:	9305      	str	r3, [sp, #20]
 8012c9e:	4619      	mov	r1, r3
 8012ca0:	f04f 0c0a 	mov.w	ip, #10
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012caa:	3a30      	subs	r2, #48	; 0x30
 8012cac:	2a09      	cmp	r2, #9
 8012cae:	d903      	bls.n	8012cb8 <_svfiprintf_r+0x1a8>
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d0c5      	beq.n	8012c40 <_svfiprintf_r+0x130>
 8012cb4:	9105      	str	r1, [sp, #20]
 8012cb6:	e7c3      	b.n	8012c40 <_svfiprintf_r+0x130>
 8012cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cbc:	4604      	mov	r4, r0
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	e7f0      	b.n	8012ca4 <_svfiprintf_r+0x194>
 8012cc2:	ab03      	add	r3, sp, #12
 8012cc4:	9300      	str	r3, [sp, #0]
 8012cc6:	462a      	mov	r2, r5
 8012cc8:	4b0f      	ldr	r3, [pc, #60]	; (8012d08 <_svfiprintf_r+0x1f8>)
 8012cca:	a904      	add	r1, sp, #16
 8012ccc:	4638      	mov	r0, r7
 8012cce:	f3af 8000 	nop.w
 8012cd2:	1c42      	adds	r2, r0, #1
 8012cd4:	4606      	mov	r6, r0
 8012cd6:	d1d6      	bne.n	8012c86 <_svfiprintf_r+0x176>
 8012cd8:	89ab      	ldrh	r3, [r5, #12]
 8012cda:	065b      	lsls	r3, r3, #25
 8012cdc:	f53f af2c 	bmi.w	8012b38 <_svfiprintf_r+0x28>
 8012ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ce2:	b01d      	add	sp, #116	; 0x74
 8012ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce8:	ab03      	add	r3, sp, #12
 8012cea:	9300      	str	r3, [sp, #0]
 8012cec:	462a      	mov	r2, r5
 8012cee:	4b06      	ldr	r3, [pc, #24]	; (8012d08 <_svfiprintf_r+0x1f8>)
 8012cf0:	a904      	add	r1, sp, #16
 8012cf2:	4638      	mov	r0, r7
 8012cf4:	f000 f87a 	bl	8012dec <_printf_i>
 8012cf8:	e7eb      	b.n	8012cd2 <_svfiprintf_r+0x1c2>
 8012cfa:	bf00      	nop
 8012cfc:	080131a4 	.word	0x080131a4
 8012d00:	080131ae 	.word	0x080131ae
 8012d04:	00000000 	.word	0x00000000
 8012d08:	08012a59 	.word	0x08012a59
 8012d0c:	080131aa 	.word	0x080131aa

08012d10 <_printf_common>:
 8012d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d14:	4616      	mov	r6, r2
 8012d16:	4699      	mov	r9, r3
 8012d18:	688a      	ldr	r2, [r1, #8]
 8012d1a:	690b      	ldr	r3, [r1, #16]
 8012d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012d20:	4293      	cmp	r3, r2
 8012d22:	bfb8      	it	lt
 8012d24:	4613      	movlt	r3, r2
 8012d26:	6033      	str	r3, [r6, #0]
 8012d28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012d2c:	4607      	mov	r7, r0
 8012d2e:	460c      	mov	r4, r1
 8012d30:	b10a      	cbz	r2, 8012d36 <_printf_common+0x26>
 8012d32:	3301      	adds	r3, #1
 8012d34:	6033      	str	r3, [r6, #0]
 8012d36:	6823      	ldr	r3, [r4, #0]
 8012d38:	0699      	lsls	r1, r3, #26
 8012d3a:	bf42      	ittt	mi
 8012d3c:	6833      	ldrmi	r3, [r6, #0]
 8012d3e:	3302      	addmi	r3, #2
 8012d40:	6033      	strmi	r3, [r6, #0]
 8012d42:	6825      	ldr	r5, [r4, #0]
 8012d44:	f015 0506 	ands.w	r5, r5, #6
 8012d48:	d106      	bne.n	8012d58 <_printf_common+0x48>
 8012d4a:	f104 0a19 	add.w	sl, r4, #25
 8012d4e:	68e3      	ldr	r3, [r4, #12]
 8012d50:	6832      	ldr	r2, [r6, #0]
 8012d52:	1a9b      	subs	r3, r3, r2
 8012d54:	42ab      	cmp	r3, r5
 8012d56:	dc26      	bgt.n	8012da6 <_printf_common+0x96>
 8012d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012d5c:	1e13      	subs	r3, r2, #0
 8012d5e:	6822      	ldr	r2, [r4, #0]
 8012d60:	bf18      	it	ne
 8012d62:	2301      	movne	r3, #1
 8012d64:	0692      	lsls	r2, r2, #26
 8012d66:	d42b      	bmi.n	8012dc0 <_printf_common+0xb0>
 8012d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d6c:	4649      	mov	r1, r9
 8012d6e:	4638      	mov	r0, r7
 8012d70:	47c0      	blx	r8
 8012d72:	3001      	adds	r0, #1
 8012d74:	d01e      	beq.n	8012db4 <_printf_common+0xa4>
 8012d76:	6823      	ldr	r3, [r4, #0]
 8012d78:	68e5      	ldr	r5, [r4, #12]
 8012d7a:	6832      	ldr	r2, [r6, #0]
 8012d7c:	f003 0306 	and.w	r3, r3, #6
 8012d80:	2b04      	cmp	r3, #4
 8012d82:	bf08      	it	eq
 8012d84:	1aad      	subeq	r5, r5, r2
 8012d86:	68a3      	ldr	r3, [r4, #8]
 8012d88:	6922      	ldr	r2, [r4, #16]
 8012d8a:	bf0c      	ite	eq
 8012d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d90:	2500      	movne	r5, #0
 8012d92:	4293      	cmp	r3, r2
 8012d94:	bfc4      	itt	gt
 8012d96:	1a9b      	subgt	r3, r3, r2
 8012d98:	18ed      	addgt	r5, r5, r3
 8012d9a:	2600      	movs	r6, #0
 8012d9c:	341a      	adds	r4, #26
 8012d9e:	42b5      	cmp	r5, r6
 8012da0:	d11a      	bne.n	8012dd8 <_printf_common+0xc8>
 8012da2:	2000      	movs	r0, #0
 8012da4:	e008      	b.n	8012db8 <_printf_common+0xa8>
 8012da6:	2301      	movs	r3, #1
 8012da8:	4652      	mov	r2, sl
 8012daa:	4649      	mov	r1, r9
 8012dac:	4638      	mov	r0, r7
 8012dae:	47c0      	blx	r8
 8012db0:	3001      	adds	r0, #1
 8012db2:	d103      	bne.n	8012dbc <_printf_common+0xac>
 8012db4:	f04f 30ff 	mov.w	r0, #4294967295
 8012db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dbc:	3501      	adds	r5, #1
 8012dbe:	e7c6      	b.n	8012d4e <_printf_common+0x3e>
 8012dc0:	18e1      	adds	r1, r4, r3
 8012dc2:	1c5a      	adds	r2, r3, #1
 8012dc4:	2030      	movs	r0, #48	; 0x30
 8012dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012dca:	4422      	add	r2, r4
 8012dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012dd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012dd4:	3302      	adds	r3, #2
 8012dd6:	e7c7      	b.n	8012d68 <_printf_common+0x58>
 8012dd8:	2301      	movs	r3, #1
 8012dda:	4622      	mov	r2, r4
 8012ddc:	4649      	mov	r1, r9
 8012dde:	4638      	mov	r0, r7
 8012de0:	47c0      	blx	r8
 8012de2:	3001      	adds	r0, #1
 8012de4:	d0e6      	beq.n	8012db4 <_printf_common+0xa4>
 8012de6:	3601      	adds	r6, #1
 8012de8:	e7d9      	b.n	8012d9e <_printf_common+0x8e>
	...

08012dec <_printf_i>:
 8012dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012df0:	460c      	mov	r4, r1
 8012df2:	4691      	mov	r9, r2
 8012df4:	7e27      	ldrb	r7, [r4, #24]
 8012df6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012df8:	2f78      	cmp	r7, #120	; 0x78
 8012dfa:	4680      	mov	r8, r0
 8012dfc:	469a      	mov	sl, r3
 8012dfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e02:	d807      	bhi.n	8012e14 <_printf_i+0x28>
 8012e04:	2f62      	cmp	r7, #98	; 0x62
 8012e06:	d80a      	bhi.n	8012e1e <_printf_i+0x32>
 8012e08:	2f00      	cmp	r7, #0
 8012e0a:	f000 80d8 	beq.w	8012fbe <_printf_i+0x1d2>
 8012e0e:	2f58      	cmp	r7, #88	; 0x58
 8012e10:	f000 80a3 	beq.w	8012f5a <_printf_i+0x16e>
 8012e14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012e1c:	e03a      	b.n	8012e94 <_printf_i+0xa8>
 8012e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012e22:	2b15      	cmp	r3, #21
 8012e24:	d8f6      	bhi.n	8012e14 <_printf_i+0x28>
 8012e26:	a001      	add	r0, pc, #4	; (adr r0, 8012e2c <_printf_i+0x40>)
 8012e28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012e2c:	08012e85 	.word	0x08012e85
 8012e30:	08012e99 	.word	0x08012e99
 8012e34:	08012e15 	.word	0x08012e15
 8012e38:	08012e15 	.word	0x08012e15
 8012e3c:	08012e15 	.word	0x08012e15
 8012e40:	08012e15 	.word	0x08012e15
 8012e44:	08012e99 	.word	0x08012e99
 8012e48:	08012e15 	.word	0x08012e15
 8012e4c:	08012e15 	.word	0x08012e15
 8012e50:	08012e15 	.word	0x08012e15
 8012e54:	08012e15 	.word	0x08012e15
 8012e58:	08012fa5 	.word	0x08012fa5
 8012e5c:	08012ec9 	.word	0x08012ec9
 8012e60:	08012f87 	.word	0x08012f87
 8012e64:	08012e15 	.word	0x08012e15
 8012e68:	08012e15 	.word	0x08012e15
 8012e6c:	08012fc7 	.word	0x08012fc7
 8012e70:	08012e15 	.word	0x08012e15
 8012e74:	08012ec9 	.word	0x08012ec9
 8012e78:	08012e15 	.word	0x08012e15
 8012e7c:	08012e15 	.word	0x08012e15
 8012e80:	08012f8f 	.word	0x08012f8f
 8012e84:	680b      	ldr	r3, [r1, #0]
 8012e86:	1d1a      	adds	r2, r3, #4
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	600a      	str	r2, [r1, #0]
 8012e8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e94:	2301      	movs	r3, #1
 8012e96:	e0a3      	b.n	8012fe0 <_printf_i+0x1f4>
 8012e98:	6825      	ldr	r5, [r4, #0]
 8012e9a:	6808      	ldr	r0, [r1, #0]
 8012e9c:	062e      	lsls	r6, r5, #24
 8012e9e:	f100 0304 	add.w	r3, r0, #4
 8012ea2:	d50a      	bpl.n	8012eba <_printf_i+0xce>
 8012ea4:	6805      	ldr	r5, [r0, #0]
 8012ea6:	600b      	str	r3, [r1, #0]
 8012ea8:	2d00      	cmp	r5, #0
 8012eaa:	da03      	bge.n	8012eb4 <_printf_i+0xc8>
 8012eac:	232d      	movs	r3, #45	; 0x2d
 8012eae:	426d      	negs	r5, r5
 8012eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012eb4:	485e      	ldr	r0, [pc, #376]	; (8013030 <_printf_i+0x244>)
 8012eb6:	230a      	movs	r3, #10
 8012eb8:	e019      	b.n	8012eee <_printf_i+0x102>
 8012eba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012ebe:	6805      	ldr	r5, [r0, #0]
 8012ec0:	600b      	str	r3, [r1, #0]
 8012ec2:	bf18      	it	ne
 8012ec4:	b22d      	sxthne	r5, r5
 8012ec6:	e7ef      	b.n	8012ea8 <_printf_i+0xbc>
 8012ec8:	680b      	ldr	r3, [r1, #0]
 8012eca:	6825      	ldr	r5, [r4, #0]
 8012ecc:	1d18      	adds	r0, r3, #4
 8012ece:	6008      	str	r0, [r1, #0]
 8012ed0:	0628      	lsls	r0, r5, #24
 8012ed2:	d501      	bpl.n	8012ed8 <_printf_i+0xec>
 8012ed4:	681d      	ldr	r5, [r3, #0]
 8012ed6:	e002      	b.n	8012ede <_printf_i+0xf2>
 8012ed8:	0669      	lsls	r1, r5, #25
 8012eda:	d5fb      	bpl.n	8012ed4 <_printf_i+0xe8>
 8012edc:	881d      	ldrh	r5, [r3, #0]
 8012ede:	4854      	ldr	r0, [pc, #336]	; (8013030 <_printf_i+0x244>)
 8012ee0:	2f6f      	cmp	r7, #111	; 0x6f
 8012ee2:	bf0c      	ite	eq
 8012ee4:	2308      	moveq	r3, #8
 8012ee6:	230a      	movne	r3, #10
 8012ee8:	2100      	movs	r1, #0
 8012eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012eee:	6866      	ldr	r6, [r4, #4]
 8012ef0:	60a6      	str	r6, [r4, #8]
 8012ef2:	2e00      	cmp	r6, #0
 8012ef4:	bfa2      	ittt	ge
 8012ef6:	6821      	ldrge	r1, [r4, #0]
 8012ef8:	f021 0104 	bicge.w	r1, r1, #4
 8012efc:	6021      	strge	r1, [r4, #0]
 8012efe:	b90d      	cbnz	r5, 8012f04 <_printf_i+0x118>
 8012f00:	2e00      	cmp	r6, #0
 8012f02:	d04d      	beq.n	8012fa0 <_printf_i+0x1b4>
 8012f04:	4616      	mov	r6, r2
 8012f06:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f0a:	fb03 5711 	mls	r7, r3, r1, r5
 8012f0e:	5dc7      	ldrb	r7, [r0, r7]
 8012f10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f14:	462f      	mov	r7, r5
 8012f16:	42bb      	cmp	r3, r7
 8012f18:	460d      	mov	r5, r1
 8012f1a:	d9f4      	bls.n	8012f06 <_printf_i+0x11a>
 8012f1c:	2b08      	cmp	r3, #8
 8012f1e:	d10b      	bne.n	8012f38 <_printf_i+0x14c>
 8012f20:	6823      	ldr	r3, [r4, #0]
 8012f22:	07df      	lsls	r7, r3, #31
 8012f24:	d508      	bpl.n	8012f38 <_printf_i+0x14c>
 8012f26:	6923      	ldr	r3, [r4, #16]
 8012f28:	6861      	ldr	r1, [r4, #4]
 8012f2a:	4299      	cmp	r1, r3
 8012f2c:	bfde      	ittt	le
 8012f2e:	2330      	movle	r3, #48	; 0x30
 8012f30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012f38:	1b92      	subs	r2, r2, r6
 8012f3a:	6122      	str	r2, [r4, #16]
 8012f3c:	f8cd a000 	str.w	sl, [sp]
 8012f40:	464b      	mov	r3, r9
 8012f42:	aa03      	add	r2, sp, #12
 8012f44:	4621      	mov	r1, r4
 8012f46:	4640      	mov	r0, r8
 8012f48:	f7ff fee2 	bl	8012d10 <_printf_common>
 8012f4c:	3001      	adds	r0, #1
 8012f4e:	d14c      	bne.n	8012fea <_printf_i+0x1fe>
 8012f50:	f04f 30ff 	mov.w	r0, #4294967295
 8012f54:	b004      	add	sp, #16
 8012f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f5a:	4835      	ldr	r0, [pc, #212]	; (8013030 <_printf_i+0x244>)
 8012f5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012f60:	6823      	ldr	r3, [r4, #0]
 8012f62:	680e      	ldr	r6, [r1, #0]
 8012f64:	061f      	lsls	r7, r3, #24
 8012f66:	f856 5b04 	ldr.w	r5, [r6], #4
 8012f6a:	600e      	str	r6, [r1, #0]
 8012f6c:	d514      	bpl.n	8012f98 <_printf_i+0x1ac>
 8012f6e:	07d9      	lsls	r1, r3, #31
 8012f70:	bf44      	itt	mi
 8012f72:	f043 0320 	orrmi.w	r3, r3, #32
 8012f76:	6023      	strmi	r3, [r4, #0]
 8012f78:	b91d      	cbnz	r5, 8012f82 <_printf_i+0x196>
 8012f7a:	6823      	ldr	r3, [r4, #0]
 8012f7c:	f023 0320 	bic.w	r3, r3, #32
 8012f80:	6023      	str	r3, [r4, #0]
 8012f82:	2310      	movs	r3, #16
 8012f84:	e7b0      	b.n	8012ee8 <_printf_i+0xfc>
 8012f86:	6823      	ldr	r3, [r4, #0]
 8012f88:	f043 0320 	orr.w	r3, r3, #32
 8012f8c:	6023      	str	r3, [r4, #0]
 8012f8e:	2378      	movs	r3, #120	; 0x78
 8012f90:	4828      	ldr	r0, [pc, #160]	; (8013034 <_printf_i+0x248>)
 8012f92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f96:	e7e3      	b.n	8012f60 <_printf_i+0x174>
 8012f98:	065e      	lsls	r6, r3, #25
 8012f9a:	bf48      	it	mi
 8012f9c:	b2ad      	uxthmi	r5, r5
 8012f9e:	e7e6      	b.n	8012f6e <_printf_i+0x182>
 8012fa0:	4616      	mov	r6, r2
 8012fa2:	e7bb      	b.n	8012f1c <_printf_i+0x130>
 8012fa4:	680b      	ldr	r3, [r1, #0]
 8012fa6:	6826      	ldr	r6, [r4, #0]
 8012fa8:	6960      	ldr	r0, [r4, #20]
 8012faa:	1d1d      	adds	r5, r3, #4
 8012fac:	600d      	str	r5, [r1, #0]
 8012fae:	0635      	lsls	r5, r6, #24
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	d501      	bpl.n	8012fb8 <_printf_i+0x1cc>
 8012fb4:	6018      	str	r0, [r3, #0]
 8012fb6:	e002      	b.n	8012fbe <_printf_i+0x1d2>
 8012fb8:	0671      	lsls	r1, r6, #25
 8012fba:	d5fb      	bpl.n	8012fb4 <_printf_i+0x1c8>
 8012fbc:	8018      	strh	r0, [r3, #0]
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	6123      	str	r3, [r4, #16]
 8012fc2:	4616      	mov	r6, r2
 8012fc4:	e7ba      	b.n	8012f3c <_printf_i+0x150>
 8012fc6:	680b      	ldr	r3, [r1, #0]
 8012fc8:	1d1a      	adds	r2, r3, #4
 8012fca:	600a      	str	r2, [r1, #0]
 8012fcc:	681e      	ldr	r6, [r3, #0]
 8012fce:	6862      	ldr	r2, [r4, #4]
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	f7ed f98c 	bl	80002f0 <memchr>
 8012fd8:	b108      	cbz	r0, 8012fde <_printf_i+0x1f2>
 8012fda:	1b80      	subs	r0, r0, r6
 8012fdc:	6060      	str	r0, [r4, #4]
 8012fde:	6863      	ldr	r3, [r4, #4]
 8012fe0:	6123      	str	r3, [r4, #16]
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fe8:	e7a8      	b.n	8012f3c <_printf_i+0x150>
 8012fea:	6923      	ldr	r3, [r4, #16]
 8012fec:	4632      	mov	r2, r6
 8012fee:	4649      	mov	r1, r9
 8012ff0:	4640      	mov	r0, r8
 8012ff2:	47d0      	blx	sl
 8012ff4:	3001      	adds	r0, #1
 8012ff6:	d0ab      	beq.n	8012f50 <_printf_i+0x164>
 8012ff8:	6823      	ldr	r3, [r4, #0]
 8012ffa:	079b      	lsls	r3, r3, #30
 8012ffc:	d413      	bmi.n	8013026 <_printf_i+0x23a>
 8012ffe:	68e0      	ldr	r0, [r4, #12]
 8013000:	9b03      	ldr	r3, [sp, #12]
 8013002:	4298      	cmp	r0, r3
 8013004:	bfb8      	it	lt
 8013006:	4618      	movlt	r0, r3
 8013008:	e7a4      	b.n	8012f54 <_printf_i+0x168>
 801300a:	2301      	movs	r3, #1
 801300c:	4632      	mov	r2, r6
 801300e:	4649      	mov	r1, r9
 8013010:	4640      	mov	r0, r8
 8013012:	47d0      	blx	sl
 8013014:	3001      	adds	r0, #1
 8013016:	d09b      	beq.n	8012f50 <_printf_i+0x164>
 8013018:	3501      	adds	r5, #1
 801301a:	68e3      	ldr	r3, [r4, #12]
 801301c:	9903      	ldr	r1, [sp, #12]
 801301e:	1a5b      	subs	r3, r3, r1
 8013020:	42ab      	cmp	r3, r5
 8013022:	dcf2      	bgt.n	801300a <_printf_i+0x21e>
 8013024:	e7eb      	b.n	8012ffe <_printf_i+0x212>
 8013026:	2500      	movs	r5, #0
 8013028:	f104 0619 	add.w	r6, r4, #25
 801302c:	e7f5      	b.n	801301a <_printf_i+0x22e>
 801302e:	bf00      	nop
 8013030:	080131b5 	.word	0x080131b5
 8013034:	080131c6 	.word	0x080131c6

08013038 <__retarget_lock_acquire_recursive>:
 8013038:	4770      	bx	lr

0801303a <__retarget_lock_release_recursive>:
 801303a:	4770      	bx	lr

0801303c <memcpy>:
 801303c:	440a      	add	r2, r1
 801303e:	4291      	cmp	r1, r2
 8013040:	f100 33ff 	add.w	r3, r0, #4294967295
 8013044:	d100      	bne.n	8013048 <memcpy+0xc>
 8013046:	4770      	bx	lr
 8013048:	b510      	push	{r4, lr}
 801304a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801304e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013052:	4291      	cmp	r1, r2
 8013054:	d1f9      	bne.n	801304a <memcpy+0xe>
 8013056:	bd10      	pop	{r4, pc}

08013058 <memmove>:
 8013058:	4288      	cmp	r0, r1
 801305a:	b510      	push	{r4, lr}
 801305c:	eb01 0402 	add.w	r4, r1, r2
 8013060:	d902      	bls.n	8013068 <memmove+0x10>
 8013062:	4284      	cmp	r4, r0
 8013064:	4623      	mov	r3, r4
 8013066:	d807      	bhi.n	8013078 <memmove+0x20>
 8013068:	1e43      	subs	r3, r0, #1
 801306a:	42a1      	cmp	r1, r4
 801306c:	d008      	beq.n	8013080 <memmove+0x28>
 801306e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013076:	e7f8      	b.n	801306a <memmove+0x12>
 8013078:	4402      	add	r2, r0
 801307a:	4601      	mov	r1, r0
 801307c:	428a      	cmp	r2, r1
 801307e:	d100      	bne.n	8013082 <memmove+0x2a>
 8013080:	bd10      	pop	{r4, pc}
 8013082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801308a:	e7f7      	b.n	801307c <memmove+0x24>

0801308c <_realloc_r>:
 801308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308e:	4607      	mov	r7, r0
 8013090:	4614      	mov	r4, r2
 8013092:	460e      	mov	r6, r1
 8013094:	b921      	cbnz	r1, 80130a0 <_realloc_r+0x14>
 8013096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801309a:	4611      	mov	r1, r2
 801309c:	f7ff bc46 	b.w	801292c <_malloc_r>
 80130a0:	b922      	cbnz	r2, 80130ac <_realloc_r+0x20>
 80130a2:	f7ff fbf3 	bl	801288c <_free_r>
 80130a6:	4625      	mov	r5, r4
 80130a8:	4628      	mov	r0, r5
 80130aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130ac:	f000 f814 	bl	80130d8 <_malloc_usable_size_r>
 80130b0:	42a0      	cmp	r0, r4
 80130b2:	d20f      	bcs.n	80130d4 <_realloc_r+0x48>
 80130b4:	4621      	mov	r1, r4
 80130b6:	4638      	mov	r0, r7
 80130b8:	f7ff fc38 	bl	801292c <_malloc_r>
 80130bc:	4605      	mov	r5, r0
 80130be:	2800      	cmp	r0, #0
 80130c0:	d0f2      	beq.n	80130a8 <_realloc_r+0x1c>
 80130c2:	4631      	mov	r1, r6
 80130c4:	4622      	mov	r2, r4
 80130c6:	f7ff ffb9 	bl	801303c <memcpy>
 80130ca:	4631      	mov	r1, r6
 80130cc:	4638      	mov	r0, r7
 80130ce:	f7ff fbdd 	bl	801288c <_free_r>
 80130d2:	e7e9      	b.n	80130a8 <_realloc_r+0x1c>
 80130d4:	4635      	mov	r5, r6
 80130d6:	e7e7      	b.n	80130a8 <_realloc_r+0x1c>

080130d8 <_malloc_usable_size_r>:
 80130d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130dc:	1f18      	subs	r0, r3, #4
 80130de:	2b00      	cmp	r3, #0
 80130e0:	bfbc      	itt	lt
 80130e2:	580b      	ldrlt	r3, [r1, r0]
 80130e4:	18c0      	addlt	r0, r0, r3
 80130e6:	4770      	bx	lr

080130e8 <_init>:
 80130e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ea:	bf00      	nop
 80130ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130ee:	bc08      	pop	{r3}
 80130f0:	469e      	mov	lr, r3
 80130f2:	4770      	bx	lr

080130f4 <_fini>:
 80130f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f6:	bf00      	nop
 80130f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130fa:	bc08      	pop	{r3}
 80130fc:	469e      	mov	lr, r3
 80130fe:	4770      	bx	lr
