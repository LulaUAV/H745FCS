
baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08015478  08015478  00025478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158f4  080158f4  00030368  2**0
                  CONTENTS
  4 .ARM          00000008  080158f4  080158f4  000258f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080158fc  080158fc  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080158fc  080158fc  000258fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015900  08015900  00025900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  24000000  08015904  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d20  24000368  08015c6c  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  24004088  08015c6c  00034088  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004741a  00000000  00000000  00030396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077c8  00000000  00000000  000777b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  0007ef78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f10  00000000  00000000  00081110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040ebc  00000000  00000000  00083020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002facd  00000000  00000000  000c3edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019047a  00000000  00000000  000f39a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00283e23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099a8  00000000  00000000  00283e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000368 	.word	0x24000368
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801545c 	.word	0x0801545c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400036c 	.word	0x2400036c
 80002dc:	0801545c 	.word	0x0801545c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_DMA_Init+0x6c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c8:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_DMA_Init+0x6c>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_DMA_Init+0x6c>)
 80007d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_DMA_Init+0x6c>)
 80007e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <MX_DMA_Init+0x6c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA_Init+0x6c>)
 80007f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2010      	movs	r0, #16
 8000804:	f001 fb2d 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000808:	2010      	movs	r0, #16
 800080a:	f001 fb44 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2011      	movs	r0, #17
 8000814:	f001 fb25 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000818:	2011      	movs	r0, #17
 800081a:	f001 fb3c 	bl	8001e96 <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	58024400 	.word	0x58024400

0800082c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	4a35      	ldr	r2, [pc, #212]	; (8000910 <MX_GPIO_Init+0xe4>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	61fb      	str	r3, [r7, #28]
 800084e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000856:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000860:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	4a26      	ldr	r2, [pc, #152]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_GPIO_Init+0xe4>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_GPIO_Init+0xe4>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000904:	f000 f806 	bl	8000914 <GPIO_Port_Config>

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58024400 	.word	0x58024400

08000914 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	4827      	ldr	r0, [pc, #156]	; (80009cc <GPIO_Port_Config+0xb8>)
 800092e:	f003 ff2b 	bl	8004788 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <GPIO_Port_Config+0xb8>)
 8000948:	f003 fd6e 	bl	8004428 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	481e      	ldr	r0, [pc, #120]	; (80009cc <GPIO_Port_Config+0xb8>)
 8000954:	f003 ff18 	bl	8004788 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4817      	ldr	r0, [pc, #92]	; (80009cc <GPIO_Port_Config+0xb8>)
 8000970:	f003 fd5a 	bl	8004428 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <GPIO_Port_Config+0xbc>)
 800097c:	f003 ff04 	bl	8004788 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4619      	mov	r1, r3
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <GPIO_Port_Config+0xbc>)
 8000998:	f003 fd46 	bl	8004428 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <GPIO_Port_Config+0xbc>)
 80009a4:	f003 fef0 	bl	8004788 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80009a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <GPIO_Port_Config+0xbc>)
 80009c0:	f003 fd32 	bl	8004428 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58021000 	.word	0x58021000
 80009d0:	58021400 	.word	0x58021400

080009d4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_I2C2_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_I2C2_Init+0x7c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a10:	f003 ff02 	bl	8004818 <HAL_I2C_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f000 fad7 	bl	8000fcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a22:	f004 fe0e 	bl	8005642 <HAL_I2CEx_ConfigAnalogFilter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f000 face 	bl	8000fcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a34:	f004 fe50 	bl	80056d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 fac5 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	240003a8 	.word	0x240003a8
 8000a4c:	40005800 	.word	0x40005800
 8000a50:	307075b1 	.word	0x307075b1

08000a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0b8      	sub	sp, #224	; 0xe0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	22bc      	movs	r2, #188	; 0xbc
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f012 f8af 	bl	8012bd8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	; (8000b34 <HAL_I2C_MspInit+0xe0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d152      	bne.n	8000b2a <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a84:	2308      	movs	r3, #8
 8000a86:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 f890 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a9e:	f000 fa95 	bl	8000fcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ac0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ada:	2304      	movs	r3, #4
 8000adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <HAL_I2C_MspInit+0xe8>)
 8000ae8:	f003 fc9e 	bl	8004428 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2021      	movs	r0, #33	; 0x21
 8000b10:	f001 f9a7 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b14:	2021      	movs	r0, #33	; 0x21
 8000b16:	f001 f9be 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2022      	movs	r0, #34	; 0x22
 8000b20:	f001 f99f 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b24:	2022      	movs	r0, #34	; 0x22
 8000b26:	f001 f9b6 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	37e0      	adds	r7, #224	; 0xe0
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40005800 	.word	0x40005800
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	58020400 	.word	0x58020400

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b46:	f000 f9fb 	bl	8000f40 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b4a:	4b5b      	ldr	r3, [pc, #364]	; (8000cb8 <main+0x178>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d11b      	bne.n	8000b8e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b56:	f3bf 8f4f 	dsb	sy
}
 8000b5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b5c:	f3bf 8f6f 	isb	sy
}
 8000b60:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b62:	4b55      	ldr	r3, [pc, #340]	; (8000cb8 <main+0x178>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6a:	f3bf 8f4f 	dsb	sy
}
 8000b6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b70:	f3bf 8f6f 	isb	sy
}
 8000b74:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b76:	4b50      	ldr	r3, [pc, #320]	; (8000cb8 <main+0x178>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a4f      	ldr	r2, [pc, #316]	; (8000cb8 <main+0x178>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b82:	f3bf 8f4f 	dsb	sy
}
 8000b86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b88:	f3bf 8f6f 	isb	sy
}
 8000b8c:	e000      	b.n	8000b90 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b8e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b90:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <main+0x178>)
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d138      	bne.n	8000c0e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b9c:	4b46      	ldr	r3, [pc, #280]	; (8000cb8 <main+0x178>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba4:	f3bf 8f4f 	dsb	sy
}
 8000ba8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000baa:	4b43      	ldr	r3, [pc, #268]	; (8000cb8 <main+0x178>)
 8000bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bb0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	0b5b      	lsrs	r3, r3, #13
 8000bb6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bba:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bc4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	015a      	lsls	r2, r3, #5
 8000bca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bd4:	4938      	ldr	r1, [pc, #224]	; (8000cb8 <main+0x178>)
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ef      	bne.n	8000bc6 <main+0x86>
    } while(sets-- != 0U);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	60fa      	str	r2, [r7, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1e5      	bne.n	8000bbc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf0:	f3bf 8f4f 	dsb	sy
}
 8000bf4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <main+0x178>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a2f      	ldr	r2, [pc, #188]	; (8000cb8 <main+0x178>)
 8000bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c02:	f3bf 8f4f 	dsb	sy
}
 8000c06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c08:	f3bf 8f6f 	isb	sy
}
 8000c0c:	e000      	b.n	8000c10 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c0e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c14:	617b      	str	r3, [r7, #20]

  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000c16:	e000      	b.n	8000c1a <main+0xda>
 8000c18:	bf00      	nop
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <main+0x17c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f8      	bne.n	8000c18 <main+0xd8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 ff7f 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f901 	bl	8000e30 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <main+0x17c>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <main+0x17c>)
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <main+0x17c>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f003 fdb5 	bl	80047bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2000      	movs	r0, #0
 8000c56:	f003 fdcb 	bl	80047f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c60:	bf00      	nop
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <main+0x17c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d104      	bne.n	8000c78 <main+0x138>
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	617a      	str	r2, [r7, #20]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dcf4      	bgt.n	8000c62 <main+0x122>
if ( timeout < 0 )
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da01      	bge.n	8000c82 <main+0x142>
{
Error_Handler();
 8000c7e:	f000 f9a5 	bl	8000fcc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c82:	f7ff fdd3 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c86:	f7ff fd99 	bl	80007bc <MX_DMA_Init>
  MX_I2C2_Init();
 8000c8a:	f7ff fea3 	bl	80009d4 <MX_I2C2_Init>
 // MX_SDMMC1_SD_Init();
  MX_TIM1_Init();
 8000c8e:	f000 fbb9 	bl	8001404 <MX_TIM1_Init>
  MX_UART4_Init();
 8000c92:	f000 fd5f 	bl	8001754 <MX_UART4_Init>
  MX_FATFS_Init();
 8000c96:	f00f fb3f 	bl	8010318 <MX_FATFS_Init>
  MX_UART7_Init();
 8000c9a:	f000 fdab 	bl	80017f4 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000c9e:	f011 f9f1 	bl	8012084 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    ReadGPS();
 8000ca2:	f000 f80d 	bl	8000cc0 <ReadGPS>
    ReadMag();
 8000ca6:	f000 f841 	bl	8000d2c <ReadMag>
     ReadAcc();
 8000caa:	f000 f861 	bl	8000d70 <ReadAcc>
    ReadBaro();
 8000cae:	f000 f881 	bl	8000db4 <ReadBaro>
    ReadGyro();
 8000cb2:	f000 f89b 	bl	8000dec <ReadGyro>
    ReadGPS();
 8000cb6:	e7f4      	b.n	8000ca2 <main+0x162>
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <ReadGPS>:
//  sprintf(logBuf, "%.4f, %.4f\r\n", acc_values.imu_acc_x, lpf_Acc_RC.output[0]);
//  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
//}

void ReadGPS(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f003 fd79 	bl	80047bc <HAL_HSEM_FastTake>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d122      	bne.n	8000d16 <ReadGPS+0x56>
      {
        gps_values.gps_latitude = gps_values_m7->gps_latitude;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <ReadGPS+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <ReadGPS+0x68>)
 8000cd8:	6013      	str	r3, [r2, #0]
        gps_values.gps_longitude = gps_values_m7->gps_longitude;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <ReadGPS+0x64>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <ReadGPS+0x68>)
 8000ce2:	6053      	str	r3, [r2, #4]
        gps_values.gps_altitude = gps_values_m7->gps_altitude;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <ReadGPS+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <ReadGPS+0x68>)
 8000cec:	6093      	str	r3, [r2, #8]
        gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <ReadGPS+0x64>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <ReadGPS+0x68>)
 8000cf6:	60d3      	str	r3, [r2, #12]
        gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <ReadGPS+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <ReadGPS+0x68>)
 8000d00:	6113      	str	r3, [r2, #16]
        gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <ReadGPS+0x64>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <ReadGPS+0x68>)
 8000d0a:	6153      	str	r3, [r2, #20]
        gps_values.gps_satellites = gps_values_m7->gps_satellites;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <ReadGPS+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <ReadGPS+0x68>)
 8000d14:	61d3      	str	r3, [r2, #28]
      }
      HAL_HSEM_Release(HSEM_ID_0,0);
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f003 fd69 	bl	80047f0 <HAL_HSEM_Release>

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000018 	.word	0x24000018
 8000d28:	24000404 	.word	0x24000404

08000d2c <ReadMag>:

void ReadMag(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000d30:	2000      	movs	r0, #0
 8000d32:	f003 fd43 	bl	80047bc <HAL_HSEM_FastTake>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10e      	bne.n	8000d5a <ReadMag+0x2e>
  {
    mag_values.imu_mag_x = mag_values_m7->imu_mag_x;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <ReadMag+0x3c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <ReadMag+0x40>)
 8000d44:	6013      	str	r3, [r2, #0]
    mag_values.imu_mag_y = mag_values_m7->imu_mag_y;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <ReadMag+0x3c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <ReadMag+0x40>)
 8000d4e:	6053      	str	r3, [r2, #4]
    mag_values.imu_mag_z = mag_values_m7->imu_mag_z;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <ReadMag+0x3c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <ReadMag+0x40>)
 8000d58:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f003 fd47 	bl	80047f0 <HAL_HSEM_Release>

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24000010 	.word	0x24000010
 8000d6c:	24000444 	.word	0x24000444

08000d70 <ReadAcc>:
void ReadAcc(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000d74:	2000      	movs	r0, #0
 8000d76:	f003 fd21 	bl	80047bc <HAL_HSEM_FastTake>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10e      	bne.n	8000d9e <ReadAcc+0x2e>
  {
      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <ReadAcc+0x3c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <ReadAcc+0x40>)
 8000d88:	6013      	str	r3, [r2, #0]
      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <ReadAcc+0x3c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <ReadAcc+0x40>)
 8000d92:	6053      	str	r3, [r2, #4]
      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <ReadAcc+0x3c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <ReadAcc+0x40>)
 8000d9c:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2000      	movs	r0, #0
 8000da2:	f003 fd25 	bl	80047f0 <HAL_HSEM_Release>
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000008 	.word	0x24000008
 8000db0:	2400042c 	.word	0x2400042c

08000db4 <ReadBaro>:
void ReadBaro(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000db8:	2000      	movs	r0, #0
 8000dba:	f003 fcff 	bl	80047bc <HAL_HSEM_FastTake>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d109      	bne.n	8000dd8 <ReadBaro+0x24>
  {
     baro_values.baro_altitude = baro_values_m7->baro_altitude;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <ReadBaro+0x30>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <ReadBaro+0x34>)
 8000dcc:	6053      	str	r3, [r2, #4]
     baro_values.baro_pressure = baro_values_m7->baro_pressure;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <ReadBaro+0x30>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <ReadBaro+0x34>)
 8000dd6:	6013      	str	r3, [r2, #0]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f003 fd08 	bl	80047f0 <HAL_HSEM_Release>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	24000014 	.word	0x24000014
 8000de8:	24000424 	.word	0x24000424

08000dec <ReadGyro>:
void ReadGyro(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f003 fce3 	bl	80047bc <HAL_HSEM_FastTake>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10e      	bne.n	8000e1a <ReadGyro+0x2e>
  {
     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <ReadGyro+0x3c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <ReadGyro+0x40>)
 8000e04:	6013      	str	r3, [r2, #0]
     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <ReadGyro+0x3c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <ReadGyro+0x40>)
 8000e0e:	6053      	str	r3, [r2, #4]
     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <ReadGyro+0x3c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <ReadGyro+0x40>)
 8000e18:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f003 fce7 	bl	80047f0 <HAL_HSEM_Release>
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2400000c 	.word	0x2400000c
 8000e2c:	24000438 	.word	0x24000438

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	; 0x70
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	224c      	movs	r2, #76	; 0x4c
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f011 feca 	bl	8012bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2220      	movs	r2, #32
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f011 fec4 	bl	8012bd8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f005 fe69 	bl	8006b28 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <SystemClock_Config+0x104>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	4a35      	ldr	r2, [pc, #212]	; (8000f34 <SystemClock_Config+0x104>)
 8000e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e64:	6193      	str	r3, [r2, #24]
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <SystemClock_Config+0x104>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <SystemClock_Config+0x108>)
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <SystemClock_Config+0x108>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <SystemClock_Config+0x108>)
 8000e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e88:	bf00      	nop
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <SystemClock_Config+0x104>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e96:	d1f8      	bne.n	8000e8a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <SystemClock_Config+0x10c>)
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	f023 0303 	bic.w	r3, r3, #3
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <SystemClock_Config+0x10c>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ea8:	2321      	movs	r3, #33	; 0x21
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ec2:	233c      	movs	r3, #60	; 0x3c
 8000ec4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000eca:	230f      	movs	r3, #15
 8000ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f005 fe8a 	bl	8006bfc <HAL_RCC_OscConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eee:	f000 f86d 	bl	8000fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef2:	233f      	movs	r3, #63	; 0x3f
 8000ef4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000efe:	2308      	movs	r3, #8
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f02:	2340      	movs	r3, #64	; 0x40
 8000f04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f10:	2340      	movs	r3, #64	; 0x40
 8000f12:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2104      	movs	r1, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 fa7f 	bl	800741c <HAL_RCC_ClockConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000f24:	f000 f852 	bl	8000fcc <Error_Handler>
  }

  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000f28:	f005 fe58 	bl	8006bdc <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000f2c:	bf00      	nop
 8000f2e:	3770      	adds	r7, #112	; 0x70
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	58024800 	.word	0x58024800
 8000f38:	58000400 	.word	0x58000400
 8000f3c:	58024400 	.word	0x58024400

08000f40 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f52:	f000 ffbb 	bl	8001ecc <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f56:	2301      	movs	r3, #1
 8000f58:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000f5e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000f62:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000f64:	2312      	movs	r3, #18
 8000f66:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f70:	2303      	movs	r3, #3
 8000f72:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f84:	463b      	mov	r3, r7
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 ffd8 	bl	8001f3c <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000f90:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000f94:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000f96:	230f      	movs	r3, #15
 8000f98:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000faa:	2301      	movs	r3, #1
 8000fac:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 ffbf 	bl	8001f3c <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fbe:	2004      	movs	r0, #4
 8000fc0:	f000 ff9c 	bl	8001efc <HAL_MPU_Enable>
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>
	...

08000fd8 <HAL_SD_MspInit>:
  /* USER CODE END SDMMC1_Init 2 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0ba      	sub	sp, #232	; 0xe8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0318 	add.w	r3, r7, #24
 8000ff4:	22bc      	movs	r2, #188	; 0xbc
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f011 fded 	bl	8012bd8 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a3b      	ldr	r2, [pc, #236]	; (80010f0 <HAL_SD_MspInit+0x118>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d16e      	bne.n	80010e6 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800100e:	2300      	movs	r3, #0
 8001010:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	4618      	mov	r0, r3
 8001018:	f006 fdce 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8001022:	f7ff ffd3 	bl	8000fcc <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_SD_MspInit+0x11c>)
 8001028:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800102c:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <HAL_SD_MspInit+0x11c>)
 800102e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001032:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001036:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HAL_SD_MspInit+0x11c>)
 8001038:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800103c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_SD_MspInit+0x11c>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	4a2a      	ldr	r2, [pc, #168]	; (80010f4 <HAL_SD_MspInit+0x11c>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <HAL_SD_MspInit+0x11c>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_SD_MspInit+0x11c>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <HAL_SD_MspInit+0x11c>)
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HAL_SD_MspInit+0x11c>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001080:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001084:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800109a:	230c      	movs	r3, #12
 800109c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <HAL_SD_MspInit+0x120>)
 80010a8:	f003 f9be 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ac:	2304      	movs	r3, #4
 80010ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80010c4:	230c      	movs	r3, #12
 80010c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ce:	4619      	mov	r1, r3
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <HAL_SD_MspInit+0x124>)
 80010d2:	f003 f9a9 	bl	8004428 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2031      	movs	r0, #49	; 0x31
 80010dc:	f000 fec1 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80010e0:	2031      	movs	r0, #49	; 0x31
 80010e2:	f000 fed8 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	37e8      	adds	r7, #232	; 0xe8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	52007000 	.word	0x52007000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58020800 	.word	0x58020800
 80010fc:	58020c00 	.word	0x58020c00

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_MspInit+0x30>)
 8001108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x30>)
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x30>)
 8001118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	58024400 	.word	0x58024400

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 fd44 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <DMA1_Stream5_IRQHandler+0x10>)
 800118e:	f001 ffd7 	bl	8003140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	24000620 	.word	0x24000620

0800119c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <DMA1_Stream6_IRQHandler+0x10>)
 80011a2:	f001 ffcd 	bl	8003140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240005a8 	.word	0x240005a8

080011b0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM1_BRK_IRQHandler+0x10>)
 80011b6:	f00a fb77 	bl	800b8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	240004cc 	.word	0x240004cc

080011c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM1_UP_IRQHandler+0x10>)
 80011ca:	f00a fb6d 	bl	800b8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	240004cc 	.word	0x240004cc

080011d8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80011de:	f00a fb63 	bl	800b8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	240004cc 	.word	0x240004cc

080011ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <TIM1_CC_IRQHandler+0x10>)
 80011f2:	f00a fb59 	bl	800b8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240004cc 	.word	0x240004cc

08001200 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <I2C2_EV_IRQHandler+0x10>)
 8001206:	f003 fb97 	bl	8004938 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	240003a8 	.word	0x240003a8

08001214 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <I2C2_ER_IRQHandler+0x10>)
 800121a:	f003 fba7 	bl	800496c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	240003a8 	.word	0x240003a8

08001228 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <SDMMC1_IRQHandler+0x10>)
 800122e:	f009 f8b1 	bl	800a394 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	24000450 	.word	0x24000450

0800123c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <UART4_IRQHandler+0x10>)
 8001242:	f00b fc01 	bl	800ca48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	24000698 	.word	0x24000698

08001250 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <UART7_IRQHandler+0x10>)
 8001256:	f00b fbf7 	bl	800ca48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	24000518 	.word	0x24000518

08001264 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <OTG_FS_IRQHandler+0x10>)
 800126a:	f004 fbd8 	bl	8005a1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	24003c70 	.word	0x24003c70

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001292:	f011 fc67 	bl	8012b64 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
	return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ba:	e7fe      	b.n	80012ba <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
	}
	return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f011 fbcc 	bl	8012b64 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	24040000 	.word	0x24040000
 80013f8:	00004000 	.word	0x00004000
 80013fc:	24000384 	.word	0x24000384
 8001400:	24004088 	.word	0x24004088

08001404 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0a4      	sub	sp, #144	; 0x90
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001424:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	222c      	movs	r2, #44	; 0x2c
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f011 fbc9 	bl	8012bd8 <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2220      	movs	r2, #32
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f011 fbc3 	bl	8012bd8 <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 8001462:	463a      	mov	r2, r7
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f006 fb63 	bl	8007b34 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d104      	bne.n	800147e <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 8001474:	f006 fb32 	bl	8007adc <HAL_RCC_GetPCLK1Freq>
 8001478:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800147c:	e005      	b.n	800148a <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 800147e:	f006 fb2d 	bl	8007adc <HAL_RCC_GetPCLK1Freq>
 8001482:	4603      	mov	r3, r0
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 800148a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800148e:	4a5f      	ldr	r2, [pc, #380]	; (800160c <MX_TIM1_Init+0x208>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	0c9b      	lsrs	r3, r3, #18
 8001496:	3301      	adds	r3, #1
 8001498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 800149c:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <MX_TIM1_Init+0x20c>)
 800149e:	4a5d      	ldr	r2, [pc, #372]	; (8001614 <MX_TIM1_Init+0x210>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 80014a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014a6:	3b01      	subs	r3, #1
 80014a8:	4a59      	ldr	r2, [pc, #356]	; (8001610 <MX_TIM1_Init+0x20c>)
 80014aa:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b58      	ldr	r3, [pc, #352]	; (8001610 <MX_TIM1_Init+0x20c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 80014b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	4a51      	ldr	r2, [pc, #324]	; (8001610 <MX_TIM1_Init+0x20c>)
 80014ca:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <MX_TIM1_Init+0x20c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d2:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <MX_TIM1_Init+0x20c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b4d      	ldr	r3, [pc, #308]	; (8001610 <MX_TIM1_Init+0x20c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014de:	484c      	ldr	r0, [pc, #304]	; (8001610 <MX_TIM1_Init+0x20c>)
 80014e0:	f00a f92a 	bl	800b738 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80014ea:	f7ff fd6f 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014f8:	4619      	mov	r1, r3
 80014fa:	4845      	ldr	r0, [pc, #276]	; (8001610 <MX_TIM1_Init+0x20c>)
 80014fc:	f00a fc04 	bl	800bd08 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001506:	f7ff fd61 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800150a:	4841      	ldr	r0, [pc, #260]	; (8001610 <MX_TIM1_Init+0x20c>)
 800150c:	f00a f96b 	bl	800b7e6 <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001516:	f7ff fd59 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001526:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800152a:	4619      	mov	r1, r3
 800152c:	4838      	ldr	r0, [pc, #224]	; (8001610 <MX_TIM1_Init+0x20c>)
 800152e:	f00b f917 	bl	800c760 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001538:	f7ff fd48 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 8001540:	2332      	movs	r3, #50	; 0x32
 8001542:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001548:	2300      	movs	r3, #0
 800154a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800155c:	2200      	movs	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	482b      	ldr	r0, [pc, #172]	; (8001610 <MX_TIM1_Init+0x20c>)
 8001562:	f00a fac1 	bl	800bae8 <HAL_TIM_PWM_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 800156c:	f7ff fd2e 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001570:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001574:	2204      	movs	r2, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4825      	ldr	r0, [pc, #148]	; (8001610 <MX_TIM1_Init+0x20c>)
 800157a:	f00a fab5 	bl	800bae8 <HAL_TIM_PWM_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001584:	f7ff fd22 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001588:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800158c:	2208      	movs	r2, #8
 800158e:	4619      	mov	r1, r3
 8001590:	481f      	ldr	r0, [pc, #124]	; (8001610 <MX_TIM1_Init+0x20c>)
 8001592:	f00a faa9 	bl	800bae8 <HAL_TIM_PWM_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 800159c:	f7ff fd16 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015a4:	220c      	movs	r2, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	4819      	ldr	r0, [pc, #100]	; (8001610 <MX_TIM1_Init+0x20c>)
 80015aa:	f00a fa9d 	bl	800bae8 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 80015b4:	f7ff fd0a 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015de:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4808      	ldr	r0, [pc, #32]	; (8001610 <MX_TIM1_Init+0x20c>)
 80015f0:	f00b f93e 	bl	800c870 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 80015fa:	f7ff fce7 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_TIM1_Init+0x20c>)
 8001600:	f000 f84a 	bl	8001698 <HAL_TIM_MspPostInit>

}
 8001604:	bf00      	nop
 8001606:	3790      	adds	r7, #144	; 0x90
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	66673335 	.word	0x66673335
 8001610:	240004cc 	.word	0x240004cc
 8001614:	40010000 	.word	0x40010000

08001618 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1a      	ldr	r2, [pc, #104]	; (8001690 <HAL_TIM_Base_MspInit+0x78>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d12e      	bne.n	8001688 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_TIM_Base_MspInit+0x7c>)
 800162c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001630:	4a18      	ldr	r2, [pc, #96]	; (8001694 <HAL_TIM_Base_MspInit+0x7c>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_TIM_Base_MspInit+0x7c>)
 800163c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2018      	movs	r0, #24
 800164e:	f000 fc08 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001652:	2018      	movs	r0, #24
 8001654:	f000 fc1f 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	2019      	movs	r0, #25
 800165e:	f000 fc00 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001662:	2019      	movs	r0, #25
 8001664:	f000 fc17 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	201a      	movs	r0, #26
 800166e:	f000 fbf8 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001672:	201a      	movs	r0, #26
 8001674:	f000 fc0f 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	201b      	movs	r0, #27
 800167e:	f000 fbf0 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001682:	201b      	movs	r0, #27
 8001684:	f000 fc07 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40010000 	.word	0x40010000
 8001694:	58024400 	.word	0x58024400

08001698 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a23      	ldr	r2, [pc, #140]	; (8001744 <HAL_TIM_MspPostInit+0xac>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d13f      	bne.n	800173a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_TIM_MspPostInit+0xb0>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <HAL_TIM_MspPostInit+0xb0>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_TIM_MspPostInit+0xb0>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_TIM_MspPostInit+0xb0>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_TIM_MspPostInit+0xb0>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_TIM_MspPostInit+0xb0>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80016f6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001708:	2301      	movs	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	480e      	ldr	r0, [pc, #56]	; (800174c <HAL_TIM_MspPostInit+0xb4>)
 8001714:	f002 fe88 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800172a:	2301      	movs	r3, #1
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4806      	ldr	r0, [pc, #24]	; (8001750 <HAL_TIM_MspPostInit+0xb8>)
 8001736:	f002 fe77 	bl	8004428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40010000 	.word	0x40010000
 8001748:	58024400 	.word	0x58024400
 800174c:	58021000 	.word	0x58021000
 8001750:	58020000 	.word	0x58020000

08001754 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <MX_UART4_Init+0x94>)
 800175a:	4a24      	ldr	r2, [pc, #144]	; (80017ec <MX_UART4_Init+0x98>)
 800175c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <MX_UART4_Init+0x94>)
 8001760:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <MX_UART4_Init+0x9c>)
 8001762:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <MX_UART4_Init+0x94>)
 8001766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_UART4_Init+0x94>)
 800176e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001772:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_UART4_Init+0x94>)
 8001776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_UART4_Init+0x94>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_UART4_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_UART4_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <MX_UART4_Init+0x94>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_UART4_Init+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <MX_UART4_Init+0x94>)
 800179c:	2200      	movs	r2, #0
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017a0:	4811      	ldr	r0, [pc, #68]	; (80017e8 <MX_UART4_Init+0x94>)
 80017a2:	f00b f901 	bl	800c9a8 <HAL_UART_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 80017ac:	f7ff fc0e 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b0:	2100      	movs	r1, #0
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_UART4_Init+0x94>)
 80017b4:	f00c fba9 	bl	800df0a <HAL_UARTEx_SetTxFifoThreshold>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 80017be:	f7ff fc05 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4808      	ldr	r0, [pc, #32]	; (80017e8 <MX_UART4_Init+0x94>)
 80017c6:	f00c fbde 	bl	800df86 <HAL_UARTEx_SetRxFifoThreshold>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 80017d0:	f7ff fbfc 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_UART4_Init+0x94>)
 80017d6:	f00c fb5f 	bl	800de98 <HAL_UARTEx_DisableFifoMode>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 80017e0:	f7ff fbf4 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	24000698 	.word	0x24000698
 80017ec:	40004c00 	.word	0x40004c00
 80017f0:	000186a0 	.word	0x000186a0

080017f4 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <MX_UART7_Init+0x90>)
 80017fa:	4a23      	ldr	r2, [pc, #140]	; (8001888 <MX_UART7_Init+0x94>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <MX_UART7_Init+0x90>)
 8001800:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001804:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_UART7_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_UART7_Init+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_UART7_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_UART7_Init+0x90>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <MX_UART7_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_UART7_Init+0x90>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_UART7_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_UART7_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <MX_UART7_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800183c:	4811      	ldr	r0, [pc, #68]	; (8001884 <MX_UART7_Init+0x90>)
 800183e:	f00b f8b3 	bl	800c9a8 <HAL_UART_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001848:	f7ff fbc0 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184c:	2100      	movs	r1, #0
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_UART7_Init+0x90>)
 8001850:	f00c fb5b 	bl	800df0a <HAL_UARTEx_SetTxFifoThreshold>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800185a:	f7ff fbb7 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800185e:	2100      	movs	r1, #0
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <MX_UART7_Init+0x90>)
 8001862:	f00c fb90 	bl	800df86 <HAL_UARTEx_SetRxFifoThreshold>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 800186c:	f7ff fbae 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_UART7_Init+0x90>)
 8001872:	f00c fb11 	bl	800de98 <HAL_UARTEx_DisableFifoMode>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800187c:	f7ff fba6 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	24000518 	.word	0x24000518
 8001888:	40007800 	.word	0x40007800

0800188c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b0ba      	sub	sp, #232	; 0xe8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	22bc      	movs	r2, #188	; 0xbc
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f011 f993 	bl	8012bd8 <memset>
  if(uartHandle->Instance==UART4)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7e      	ldr	r2, [pc, #504]	; (8001ab0 <HAL_UART_MspInit+0x224>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d14a      	bne.n	8001952 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c6:	f107 0318 	add.w	r3, r7, #24
 80018ca:	4618      	mov	r0, r3
 80018cc:	f006 f974 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018d6:	f7ff fb79 	bl	8000fcc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018da:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 80018dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018e0:	4a74      	ldr	r2, [pc, #464]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 80018e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018ea:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 80018ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b6e      	ldr	r3, [pc, #440]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	4a6d      	ldr	r2, [pc, #436]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001908:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001916:	2303      	movs	r3, #3
 8001918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800192e:	2308      	movs	r3, #8
 8001930:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001938:	4619      	mov	r1, r3
 800193a:	485f      	ldr	r0, [pc, #380]	; (8001ab8 <HAL_UART_MspInit+0x22c>)
 800193c:	f002 fd74 	bl	8004428 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2034      	movs	r0, #52	; 0x34
 8001946:	f000 fa8c 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800194a:	2034      	movs	r0, #52	; 0x34
 800194c:	f000 faa3 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001950:	e0a9      	b.n	8001aa6 <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==UART7)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a59      	ldr	r2, [pc, #356]	; (8001abc <HAL_UART_MspInit+0x230>)
 8001958:	4293      	cmp	r3, r2
 800195a:	f040 80a4 	bne.w	8001aa6 <HAL_UART_MspInit+0x21a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	4618      	mov	r0, r3
 800196e:	f006 f923 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001978:	f7ff fb28 	bl	8000fcc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800197c:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 800197e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001982:	4a4c      	ldr	r2, [pc, #304]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 8001984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001988:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 800198e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001992:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800199a:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	4a44      	ldr	r2, [pc, #272]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 80019a2:	f043 0320 	orr.w	r3, r3, #32
 80019a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019aa:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <HAL_UART_MspInit+0x228>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019b8:	23c0      	movs	r3, #192	; 0xc0
 80019ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80019d0:	2307      	movs	r3, #7
 80019d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019da:	4619      	mov	r1, r3
 80019dc:	4838      	ldr	r0, [pc, #224]	; (8001ac0 <HAL_UART_MspInit+0x234>)
 80019de:	f002 fd23 	bl	8004428 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 80019e4:	4a38      	ldr	r2, [pc, #224]	; (8001ac8 <HAL_UART_MspInit+0x23c>)
 80019e6:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 80019ea:	224f      	movs	r2, #79	; 0x4f
 80019ec:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ee:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019fa:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 80019fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a00:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a08:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001a20:	4828      	ldr	r0, [pc, #160]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 8001a22:	f000 facf 	bl	8001fc4 <HAL_DMA_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001a2c:	f7ff face 	bl	8000fcc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 8001a34:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a36:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <HAL_UART_MspInit+0x238>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_UART_MspInit+0x244>)
 8001a40:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a44:	2250      	movs	r2, #80	; 0x50
 8001a46:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a4a:	2240      	movs	r2, #64	; 0x40
 8001a4c:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5a:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001a7a:	4814      	ldr	r0, [pc, #80]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a7c:	f000 faa2 	bl	8001fc4 <HAL_DMA_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8001a86:	f7ff faa1 	bl	8000fcc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a8e:	679a      	str	r2, [r3, #120]	; 0x78
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_UART_MspInit+0x240>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2052      	movs	r0, #82	; 0x52
 8001a9c:	f000 f9e1 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001aa0:	2052      	movs	r0, #82	; 0x52
 8001aa2:	f000 f9f8 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	37e8      	adds	r7, #232	; 0xe8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40004c00 	.word	0x40004c00
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	58020000 	.word	0x58020000
 8001abc:	40007800 	.word	0x40007800
 8001ac0:	58021400 	.word	0x58021400
 8001ac4:	24000620 	.word	0x24000620
 8001ac8:	40020088 	.word	0x40020088
 8001acc:	240005a8 	.word	0x240005a8
 8001ad0:	400200a0 	.word	0x400200a0

08001ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ad8:	f7fe fdd6 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480c      	ldr	r0, [pc, #48]	; (8001b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ade:	490d      	ldr	r1, [pc, #52]	; (8001b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001af4:	4c0a      	ldr	r4, [pc, #40]	; (8001b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b02:	f011 f835 	bl	8012b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b06:	f7ff f81b 	bl	8000b40 <main>
  bx  lr
 8001b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b0c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001b10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b14:	24000368 	.word	0x24000368
  ldr r2, =_sidata
 8001b18:	08015904 	.word	0x08015904
  ldr r2, =_sbss
 8001b1c:	24000368 	.word	0x24000368
  ldr r4, =_ebss
 8001b20:	24004088 	.word	0x24004088

08001b24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC3_IRQHandler>
	...

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2e:	2003      	movs	r0, #3
 8001b30:	f000 f98c 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b34:	f005 fe28 	bl	8007788 <HAL_RCC_GetSysClockFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_Init+0x68>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	4913      	ldr	r1, [pc, #76]	; (8001b94 <HAL_Init+0x6c>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_Init+0x68>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_Init+0x6c>)
 8001b5c:	5cd3      	ldrb	r3, [r2, r3]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_Init+0x70>)
 8001b6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <HAL_Init+0x74>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f814 	bl	8001ba0 <HAL_InitTick>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e002      	b.n	8001b88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b82:	f7ff fabd 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	58024400 	.word	0x58024400
 8001b94:	080154c0 	.word	0x080154c0
 8001b98:	24000004 	.word	0x24000004
 8001b9c:	24000000 	.word	0x24000000

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_InitTick+0x60>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e021      	b.n	8001bf8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_InitTick+0x64>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_InitTick+0x60>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f971 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f93b 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x68>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	24000020 	.word	0x24000020
 8001c04:	24000000 	.word	0x24000000
 8001c08:	2400001c 	.word	0x2400001c

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	24000020 	.word	0x24000020
 8001c30:	24000728 	.word	0x24000728

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	24000728 	.word	0x24000728

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	24000020 	.word	0x24000020

08001c94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetREVID+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	5c001000 	.word	0x5c001000

08001cac <__NVIC_SetPriorityGrouping>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	05fa0000 	.word	0x05fa0000

08001cf4 <__NVIC_GetPriorityGrouping>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff40 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff90 	bl	8001da0 <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5f 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff33 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa4 	bl	8001e08 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ed0:	f3bf 8f5f 	dmb	sy
}
 8001ed4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_MPU_Disable+0x28>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <HAL_MPU_Disable+0x28>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_MPU_Disable+0x2c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	605a      	str	r2, [r3, #4]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00
 8001ef8:	e000ed90 	.word	0xe000ed90

08001efc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_MPU_Enable+0x38>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_MPU_Enable+0x3c>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <HAL_MPU_Enable+0x3c>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f1a:	f3bf 8f4f 	dsb	sy
}
 8001f1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f20:	f3bf 8f6f 	isb	sy
}
 8001f24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed90 	.word	0xe000ed90
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	785a      	ldrb	r2, [r3, #1]
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_MPU_ConfigRegion+0x84>)
 8001f4a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d029      	beq.n	8001fa8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001f54:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <HAL_MPU_ConfigRegion+0x84>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7b1b      	ldrb	r3, [r3, #12]
 8001f60:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7adb      	ldrb	r3, [r3, #11]
 8001f66:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7a9b      	ldrb	r3, [r3, #10]
 8001f6e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7b5b      	ldrb	r3, [r3, #13]
 8001f76:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7b9b      	ldrb	r3, [r3, #14]
 8001f7e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7bdb      	ldrb	r3, [r3, #15]
 8001f86:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7a5b      	ldrb	r3, [r3, #9]
 8001f8e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7a1b      	ldrb	r3, [r3, #8]
 8001f96:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f98:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa0:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fa2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001fa6:	e005      	b.n	8001fb4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_MPU_ConfigRegion+0x84>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_MPU_ConfigRegion+0x84>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed90 	.word	0xe000ed90

08001fc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff fe32 	bl	8001c34 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e316      	b.n	800260a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a66      	ldr	r2, [pc, #408]	; (800217c <HAL_DMA_Init+0x1b8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04a      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a65      	ldr	r2, [pc, #404]	; (8002180 <HAL_DMA_Init+0x1bc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d045      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a63      	ldr	r2, [pc, #396]	; (8002184 <HAL_DMA_Init+0x1c0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d040      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a62      	ldr	r2, [pc, #392]	; (8002188 <HAL_DMA_Init+0x1c4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d03b      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a60      	ldr	r2, [pc, #384]	; (800218c <HAL_DMA_Init+0x1c8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d036      	beq.n	800207c <HAL_DMA_Init+0xb8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5f      	ldr	r2, [pc, #380]	; (8002190 <HAL_DMA_Init+0x1cc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d031      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a5d      	ldr	r2, [pc, #372]	; (8002194 <HAL_DMA_Init+0x1d0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02c      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a5c      	ldr	r2, [pc, #368]	; (8002198 <HAL_DMA_Init+0x1d4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d027      	beq.n	800207c <HAL_DMA_Init+0xb8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a5a      	ldr	r2, [pc, #360]	; (800219c <HAL_DMA_Init+0x1d8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d022      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a59      	ldr	r2, [pc, #356]	; (80021a0 <HAL_DMA_Init+0x1dc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d01d      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <HAL_DMA_Init+0x1e0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d018      	beq.n	800207c <HAL_DMA_Init+0xb8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a56      	ldr	r2, [pc, #344]	; (80021a8 <HAL_DMA_Init+0x1e4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a54      	ldr	r2, [pc, #336]	; (80021ac <HAL_DMA_Init+0x1e8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00e      	beq.n	800207c <HAL_DMA_Init+0xb8>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a53      	ldr	r2, [pc, #332]	; (80021b0 <HAL_DMA_Init+0x1ec>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a51      	ldr	r2, [pc, #324]	; (80021b4 <HAL_DMA_Init+0x1f0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d004      	beq.n	800207c <HAL_DMA_Init+0xb8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <HAL_DMA_Init+0x1f4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_DMA_Init+0xbc>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_DMA_Init+0xbe>
 8002080:	2300      	movs	r3, #0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 813b 	beq.w	80022fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a37      	ldr	r2, [pc, #220]	; (800217c <HAL_DMA_Init+0x1b8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d04a      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a36      	ldr	r2, [pc, #216]	; (8002180 <HAL_DMA_Init+0x1bc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d045      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a34      	ldr	r2, [pc, #208]	; (8002184 <HAL_DMA_Init+0x1c0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d040      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a33      	ldr	r2, [pc, #204]	; (8002188 <HAL_DMA_Init+0x1c4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d03b      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a31      	ldr	r2, [pc, #196]	; (800218c <HAL_DMA_Init+0x1c8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d036      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a30      	ldr	r2, [pc, #192]	; (8002190 <HAL_DMA_Init+0x1cc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d031      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2e      	ldr	r2, [pc, #184]	; (8002194 <HAL_DMA_Init+0x1d0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02c      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2d      	ldr	r2, [pc, #180]	; (8002198 <HAL_DMA_Init+0x1d4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d027      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2b      	ldr	r2, [pc, #172]	; (800219c <HAL_DMA_Init+0x1d8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d022      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <HAL_DMA_Init+0x1dc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d01d      	beq.n	8002138 <HAL_DMA_Init+0x174>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_DMA_Init+0x1e0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d018      	beq.n	8002138 <HAL_DMA_Init+0x174>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a27      	ldr	r2, [pc, #156]	; (80021a8 <HAL_DMA_Init+0x1e4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d013      	beq.n	8002138 <HAL_DMA_Init+0x174>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a25      	ldr	r2, [pc, #148]	; (80021ac <HAL_DMA_Init+0x1e8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00e      	beq.n	8002138 <HAL_DMA_Init+0x174>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <HAL_DMA_Init+0x1ec>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d009      	beq.n	8002138 <HAL_DMA_Init+0x174>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a22      	ldr	r2, [pc, #136]	; (80021b4 <HAL_DMA_Init+0x1f0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d004      	beq.n	8002138 <HAL_DMA_Init+0x174>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <HAL_DMA_Init+0x1f4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d108      	bne.n	800214a <HAL_DMA_Init+0x186>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e007      	b.n	800215a <HAL_DMA_Init+0x196>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800215a:	e02f      	b.n	80021bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800215c:	f7ff fd6a 	bl	8001c34 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b05      	cmp	r3, #5
 8002168:	d928      	bls.n	80021bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e246      	b.n	800260a <HAL_DMA_Init+0x646>
 800217c:	40020010 	.word	0x40020010
 8002180:	40020028 	.word	0x40020028
 8002184:	40020040 	.word	0x40020040
 8002188:	40020058 	.word	0x40020058
 800218c:	40020070 	.word	0x40020070
 8002190:	40020088 	.word	0x40020088
 8002194:	400200a0 	.word	0x400200a0
 8002198:	400200b8 	.word	0x400200b8
 800219c:	40020410 	.word	0x40020410
 80021a0:	40020428 	.word	0x40020428
 80021a4:	40020440 	.word	0x40020440
 80021a8:	40020458 	.word	0x40020458
 80021ac:	40020470 	.word	0x40020470
 80021b0:	40020488 	.word	0x40020488
 80021b4:	400204a0 	.word	0x400204a0
 80021b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1c8      	bne.n	800215c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4b83      	ldr	r3, [pc, #524]	; (80023e4 <HAL_DMA_Init+0x420>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	2b04      	cmp	r3, #4
 800220e:	d107      	bne.n	8002220 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	4313      	orrs	r3, r2
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002220:	4b71      	ldr	r3, [pc, #452]	; (80023e8 <HAL_DMA_Init+0x424>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b71      	ldr	r3, [pc, #452]	; (80023ec <HAL_DMA_Init+0x428>)
 8002226:	4013      	ands	r3, r2
 8002228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800222c:	d328      	bcc.n	8002280 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b28      	cmp	r3, #40	; 0x28
 8002234:	d903      	bls.n	800223e <HAL_DMA_Init+0x27a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b2e      	cmp	r3, #46	; 0x2e
 800223c:	d917      	bls.n	800226e <HAL_DMA_Init+0x2aa>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b3e      	cmp	r3, #62	; 0x3e
 8002244:	d903      	bls.n	800224e <HAL_DMA_Init+0x28a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b42      	cmp	r3, #66	; 0x42
 800224c:	d90f      	bls.n	800226e <HAL_DMA_Init+0x2aa>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b46      	cmp	r3, #70	; 0x46
 8002254:	d903      	bls.n	800225e <HAL_DMA_Init+0x29a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b48      	cmp	r3, #72	; 0x48
 800225c:	d907      	bls.n	800226e <HAL_DMA_Init+0x2aa>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b4e      	cmp	r3, #78	; 0x4e
 8002264:	d905      	bls.n	8002272 <HAL_DMA_Init+0x2ae>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b52      	cmp	r3, #82	; 0x52
 800226c:	d801      	bhi.n	8002272 <HAL_DMA_Init+0x2ae>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_DMA_Init+0x2b0>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f023 0307 	bic.w	r3, r3, #7
 8002296:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d117      	bne.n	80022da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00e      	beq.n	80022da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f001 ff29 	bl	8004114 <DMA_CheckFifoParam>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2240      	movs	r2, #64	; 0x40
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e197      	b.n	800260a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f001 fe64 	bl	8003fb0 <DMA_CalcBaseAndBitshift>
 80022e8:	4603      	mov	r3, r0
 80022ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	223f      	movs	r2, #63	; 0x3f
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	e0cd      	b.n	800249a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <HAL_DMA_Init+0x42c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d022      	beq.n	800234e <HAL_DMA_Init+0x38a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <HAL_DMA_Init+0x430>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01d      	beq.n	800234e <HAL_DMA_Init+0x38a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a38      	ldr	r2, [pc, #224]	; (80023f8 <HAL_DMA_Init+0x434>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d018      	beq.n	800234e <HAL_DMA_Init+0x38a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a36      	ldr	r2, [pc, #216]	; (80023fc <HAL_DMA_Init+0x438>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_DMA_Init+0x38a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a35      	ldr	r2, [pc, #212]	; (8002400 <HAL_DMA_Init+0x43c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00e      	beq.n	800234e <HAL_DMA_Init+0x38a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a33      	ldr	r2, [pc, #204]	; (8002404 <HAL_DMA_Init+0x440>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d009      	beq.n	800234e <HAL_DMA_Init+0x38a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a32      	ldr	r2, [pc, #200]	; (8002408 <HAL_DMA_Init+0x444>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d004      	beq.n	800234e <HAL_DMA_Init+0x38a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a30      	ldr	r2, [pc, #192]	; (800240c <HAL_DMA_Init+0x448>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_DMA_Init+0x38e>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_DMA_Init+0x390>
 8002352:	2300      	movs	r3, #0
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8097 	beq.w	8002488 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_DMA_Init+0x42c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d021      	beq.n	80023a8 <HAL_DMA_Init+0x3e4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_DMA_Init+0x430>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01c      	beq.n	80023a8 <HAL_DMA_Init+0x3e4>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <HAL_DMA_Init+0x434>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d017      	beq.n	80023a8 <HAL_DMA_Init+0x3e4>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_DMA_Init+0x438>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d012      	beq.n	80023a8 <HAL_DMA_Init+0x3e4>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <HAL_DMA_Init+0x43c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00d      	beq.n	80023a8 <HAL_DMA_Init+0x3e4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_DMA_Init+0x440>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d008      	beq.n	80023a8 <HAL_DMA_Init+0x3e4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <HAL_DMA_Init+0x444>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <HAL_DMA_Init+0x3e4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_DMA_Init+0x448>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_DMA_Init+0x44c>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b40      	cmp	r3, #64	; 0x40
 80023d0:	d020      	beq.n	8002414 <HAL_DMA_Init+0x450>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b80      	cmp	r3, #128	; 0x80
 80023d8:	d102      	bne.n	80023e0 <HAL_DMA_Init+0x41c>
 80023da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023de:	e01a      	b.n	8002416 <HAL_DMA_Init+0x452>
 80023e0:	2300      	movs	r3, #0
 80023e2:	e018      	b.n	8002416 <HAL_DMA_Init+0x452>
 80023e4:	fe10803f 	.word	0xfe10803f
 80023e8:	5c001000 	.word	0x5c001000
 80023ec:	ffff0000 	.word	0xffff0000
 80023f0:	58025408 	.word	0x58025408
 80023f4:	5802541c 	.word	0x5802541c
 80023f8:	58025430 	.word	0x58025430
 80023fc:	58025444 	.word	0x58025444
 8002400:	58025458 	.word	0x58025458
 8002404:	5802546c 	.word	0x5802546c
 8002408:	58025480 	.word	0x58025480
 800240c:	58025494 	.word	0x58025494
 8002410:	fffe000f 	.word	0xfffe000f
 8002414:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800241c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002424:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800242c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800243c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002444:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b6e      	ldr	r3, [pc, #440]	; (8002614 <HAL_DMA_Init+0x650>)
 800245c:	4413      	add	r3, r2
 800245e:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_DMA_Init+0x654>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	009a      	lsls	r2, r3, #2
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f001 fd9f 	bl	8003fb0 <DMA_CalcBaseAndBitshift>
 8002472:	4603      	mov	r3, r0
 8002474:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2201      	movs	r2, #1
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	e008      	b.n	800249a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0b7      	b.n	800260a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a5f      	ldr	r2, [pc, #380]	; (800261c <HAL_DMA_Init+0x658>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d072      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a5d      	ldr	r2, [pc, #372]	; (8002620 <HAL_DMA_Init+0x65c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d06d      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a5c      	ldr	r2, [pc, #368]	; (8002624 <HAL_DMA_Init+0x660>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d068      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a5a      	ldr	r2, [pc, #360]	; (8002628 <HAL_DMA_Init+0x664>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d063      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a59      	ldr	r2, [pc, #356]	; (800262c <HAL_DMA_Init+0x668>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d05e      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a57      	ldr	r2, [pc, #348]	; (8002630 <HAL_DMA_Init+0x66c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d059      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a56      	ldr	r2, [pc, #344]	; (8002634 <HAL_DMA_Init+0x670>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d054      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a54      	ldr	r2, [pc, #336]	; (8002638 <HAL_DMA_Init+0x674>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d04f      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a53      	ldr	r2, [pc, #332]	; (800263c <HAL_DMA_Init+0x678>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d04a      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a51      	ldr	r2, [pc, #324]	; (8002640 <HAL_DMA_Init+0x67c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d045      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a50      	ldr	r2, [pc, #320]	; (8002644 <HAL_DMA_Init+0x680>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d040      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a4e      	ldr	r2, [pc, #312]	; (8002648 <HAL_DMA_Init+0x684>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d03b      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a4d      	ldr	r2, [pc, #308]	; (800264c <HAL_DMA_Init+0x688>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d036      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4b      	ldr	r2, [pc, #300]	; (8002650 <HAL_DMA_Init+0x68c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d031      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4a      	ldr	r2, [pc, #296]	; (8002654 <HAL_DMA_Init+0x690>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d02c      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a48      	ldr	r2, [pc, #288]	; (8002658 <HAL_DMA_Init+0x694>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d027      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_DMA_Init+0x698>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a45      	ldr	r2, [pc, #276]	; (8002660 <HAL_DMA_Init+0x69c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01d      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a44      	ldr	r2, [pc, #272]	; (8002664 <HAL_DMA_Init+0x6a0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d018      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a42      	ldr	r2, [pc, #264]	; (8002668 <HAL_DMA_Init+0x6a4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d013      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a41      	ldr	r2, [pc, #260]	; (800266c <HAL_DMA_Init+0x6a8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00e      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3f      	ldr	r2, [pc, #252]	; (8002670 <HAL_DMA_Init+0x6ac>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a3e      	ldr	r2, [pc, #248]	; (8002674 <HAL_DMA_Init+0x6b0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_DMA_Init+0x5c6>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3c      	ldr	r2, [pc, #240]	; (8002678 <HAL_DMA_Init+0x6b4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_DMA_Init+0x5ca>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_DMA_Init+0x5cc>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d032      	beq.n	80025fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f001 fe39 	bl	800420c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b80      	cmp	r3, #128	; 0x80
 80025a0:	d102      	bne.n	80025a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d010      	beq.n	80025e8 <HAL_DMA_Init+0x624>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d80c      	bhi.n	80025e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f001 feb6 	bl	8004340 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	e008      	b.n	80025fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	a7fdabf8 	.word	0xa7fdabf8
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	40020010 	.word	0x40020010
 8002620:	40020028 	.word	0x40020028
 8002624:	40020040 	.word	0x40020040
 8002628:	40020058 	.word	0x40020058
 800262c:	40020070 	.word	0x40020070
 8002630:	40020088 	.word	0x40020088
 8002634:	400200a0 	.word	0x400200a0
 8002638:	400200b8 	.word	0x400200b8
 800263c:	40020410 	.word	0x40020410
 8002640:	40020428 	.word	0x40020428
 8002644:	40020440 	.word	0x40020440
 8002648:	40020458 	.word	0x40020458
 800264c:	40020470 	.word	0x40020470
 8002650:	40020488 	.word	0x40020488
 8002654:	400204a0 	.word	0x400204a0
 8002658:	400204b8 	.word	0x400204b8
 800265c:	58025408 	.word	0x58025408
 8002660:	5802541c 	.word	0x5802541c
 8002664:	58025430 	.word	0x58025430
 8002668:	58025444 	.word	0x58025444
 800266c:	58025458 	.word	0x58025458
 8002670:	5802546c 	.word	0x5802546c
 8002674:	58025480 	.word	0x58025480
 8002678:	58025494 	.word	0x58025494

0800267c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff fad6 	bl	8001c34 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e2dc      	b.n	8002c4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d008      	beq.n	80026b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e2cd      	b.n	8002c4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a76      	ldr	r2, [pc, #472]	; (8002890 <HAL_DMA_Abort+0x214>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d04a      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a74      	ldr	r2, [pc, #464]	; (8002894 <HAL_DMA_Abort+0x218>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d045      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a73      	ldr	r2, [pc, #460]	; (8002898 <HAL_DMA_Abort+0x21c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d040      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a71      	ldr	r2, [pc, #452]	; (800289c <HAL_DMA_Abort+0x220>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d03b      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a70      	ldr	r2, [pc, #448]	; (80028a0 <HAL_DMA_Abort+0x224>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d036      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a6e      	ldr	r2, [pc, #440]	; (80028a4 <HAL_DMA_Abort+0x228>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d031      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6d      	ldr	r2, [pc, #436]	; (80028a8 <HAL_DMA_Abort+0x22c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d02c      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a6b      	ldr	r2, [pc, #428]	; (80028ac <HAL_DMA_Abort+0x230>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d027      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6a      	ldr	r2, [pc, #424]	; (80028b0 <HAL_DMA_Abort+0x234>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a68      	ldr	r2, [pc, #416]	; (80028b4 <HAL_DMA_Abort+0x238>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01d      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a67      	ldr	r2, [pc, #412]	; (80028b8 <HAL_DMA_Abort+0x23c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d018      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a65      	ldr	r2, [pc, #404]	; (80028bc <HAL_DMA_Abort+0x240>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a64      	ldr	r2, [pc, #400]	; (80028c0 <HAL_DMA_Abort+0x244>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a62      	ldr	r2, [pc, #392]	; (80028c4 <HAL_DMA_Abort+0x248>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a61      	ldr	r2, [pc, #388]	; (80028c8 <HAL_DMA_Abort+0x24c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_DMA_Abort+0xd6>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a5f      	ldr	r2, [pc, #380]	; (80028cc <HAL_DMA_Abort+0x250>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_DMA_Abort+0xda>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_DMA_Abort+0xdc>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d013      	beq.n	8002784 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 021e 	bic.w	r2, r2, #30
 800276a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e00a      	b.n	800279a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 020e 	bic.w	r2, r2, #14
 8002792:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a3c      	ldr	r2, [pc, #240]	; (8002890 <HAL_DMA_Abort+0x214>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d072      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <HAL_DMA_Abort+0x218>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d06d      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a39      	ldr	r2, [pc, #228]	; (8002898 <HAL_DMA_Abort+0x21c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d068      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a37      	ldr	r2, [pc, #220]	; (800289c <HAL_DMA_Abort+0x220>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d063      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a36      	ldr	r2, [pc, #216]	; (80028a0 <HAL_DMA_Abort+0x224>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d05e      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a34      	ldr	r2, [pc, #208]	; (80028a4 <HAL_DMA_Abort+0x228>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d059      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <HAL_DMA_Abort+0x22c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d054      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a31      	ldr	r2, [pc, #196]	; (80028ac <HAL_DMA_Abort+0x230>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d04f      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a30      	ldr	r2, [pc, #192]	; (80028b0 <HAL_DMA_Abort+0x234>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d04a      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2e      	ldr	r2, [pc, #184]	; (80028b4 <HAL_DMA_Abort+0x238>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d045      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2d      	ldr	r2, [pc, #180]	; (80028b8 <HAL_DMA_Abort+0x23c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d040      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <HAL_DMA_Abort+0x240>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d03b      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <HAL_DMA_Abort+0x244>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d036      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_DMA_Abort+0x248>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d031      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a27      	ldr	r2, [pc, #156]	; (80028c8 <HAL_DMA_Abort+0x24c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d02c      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a25      	ldr	r2, [pc, #148]	; (80028cc <HAL_DMA_Abort+0x250>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d027      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <HAL_DMA_Abort+0x254>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d022      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_DMA_Abort+0x258>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01d      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <HAL_DMA_Abort+0x25c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d018      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_DMA_Abort+0x260>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_DMA_Abort+0x264>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00e      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_DMA_Abort+0x268>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_DMA_Abort+0x26c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_DMA_Abort+0x20e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_DMA_Abort+0x270>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d132      	bne.n	80028f0 <HAL_DMA_Abort+0x274>
 800288a:	2301      	movs	r3, #1
 800288c:	e031      	b.n	80028f2 <HAL_DMA_Abort+0x276>
 800288e:	bf00      	nop
 8002890:	40020010 	.word	0x40020010
 8002894:	40020028 	.word	0x40020028
 8002898:	40020040 	.word	0x40020040
 800289c:	40020058 	.word	0x40020058
 80028a0:	40020070 	.word	0x40020070
 80028a4:	40020088 	.word	0x40020088
 80028a8:	400200a0 	.word	0x400200a0
 80028ac:	400200b8 	.word	0x400200b8
 80028b0:	40020410 	.word	0x40020410
 80028b4:	40020428 	.word	0x40020428
 80028b8:	40020440 	.word	0x40020440
 80028bc:	40020458 	.word	0x40020458
 80028c0:	40020470 	.word	0x40020470
 80028c4:	40020488 	.word	0x40020488
 80028c8:	400204a0 	.word	0x400204a0
 80028cc:	400204b8 	.word	0x400204b8
 80028d0:	58025408 	.word	0x58025408
 80028d4:	5802541c 	.word	0x5802541c
 80028d8:	58025430 	.word	0x58025430
 80028dc:	58025444 	.word	0x58025444
 80028e0:	58025458 	.word	0x58025458
 80028e4:	5802546c 	.word	0x5802546c
 80028e8:	58025480 	.word	0x58025480
 80028ec:	58025494 	.word	0x58025494
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002904:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6d      	ldr	r2, [pc, #436]	; (8002ac0 <HAL_DMA_Abort+0x444>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04a      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a6b      	ldr	r2, [pc, #428]	; (8002ac4 <HAL_DMA_Abort+0x448>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d045      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6a      	ldr	r2, [pc, #424]	; (8002ac8 <HAL_DMA_Abort+0x44c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d040      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a68      	ldr	r2, [pc, #416]	; (8002acc <HAL_DMA_Abort+0x450>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d03b      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a67      	ldr	r2, [pc, #412]	; (8002ad0 <HAL_DMA_Abort+0x454>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d036      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_DMA_Abort+0x458>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d031      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a64      	ldr	r2, [pc, #400]	; (8002ad8 <HAL_DMA_Abort+0x45c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d02c      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a62      	ldr	r2, [pc, #392]	; (8002adc <HAL_DMA_Abort+0x460>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d027      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a61      	ldr	r2, [pc, #388]	; (8002ae0 <HAL_DMA_Abort+0x464>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d022      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a5f      	ldr	r2, [pc, #380]	; (8002ae4 <HAL_DMA_Abort+0x468>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01d      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a5e      	ldr	r2, [pc, #376]	; (8002ae8 <HAL_DMA_Abort+0x46c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5c      	ldr	r2, [pc, #368]	; (8002aec <HAL_DMA_Abort+0x470>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5b      	ldr	r2, [pc, #364]	; (8002af0 <HAL_DMA_Abort+0x474>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00e      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a59      	ldr	r2, [pc, #356]	; (8002af4 <HAL_DMA_Abort+0x478>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <HAL_DMA_Abort+0x47c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_DMA_Abort+0x32a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a56      	ldr	r2, [pc, #344]	; (8002afc <HAL_DMA_Abort+0x480>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d108      	bne.n	80029b8 <HAL_DMA_Abort+0x33c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e007      	b.n	80029c8 <HAL_DMA_Abort+0x34c>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029c8:	e013      	b.n	80029f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ca:	f7ff f933 	bl	8001c34 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d90c      	bls.n	80029f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2203      	movs	r2, #3
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e12d      	b.n	8002c4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e5      	bne.n	80029ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2f      	ldr	r2, [pc, #188]	; (8002ac0 <HAL_DMA_Abort+0x444>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d04a      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ac4 <HAL_DMA_Abort+0x448>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d045      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2c      	ldr	r2, [pc, #176]	; (8002ac8 <HAL_DMA_Abort+0x44c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d040      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2a      	ldr	r2, [pc, #168]	; (8002acc <HAL_DMA_Abort+0x450>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d03b      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a29      	ldr	r2, [pc, #164]	; (8002ad0 <HAL_DMA_Abort+0x454>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d036      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <HAL_DMA_Abort+0x458>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d031      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <HAL_DMA_Abort+0x45c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d02c      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a24      	ldr	r2, [pc, #144]	; (8002adc <HAL_DMA_Abort+0x460>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d027      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_DMA_Abort+0x464>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <HAL_DMA_Abort+0x468>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01d      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <HAL_DMA_Abort+0x46c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d018      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1e      	ldr	r2, [pc, #120]	; (8002aec <HAL_DMA_Abort+0x470>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <HAL_DMA_Abort+0x474>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_DMA_Abort+0x478>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_DMA_Abort+0x47c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_DMA_Abort+0x422>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_DMA_Abort+0x480>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Abort+0x426>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_DMA_Abort+0x428>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d02b      	beq.n	8002b00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	223f      	movs	r2, #63	; 0x3f
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	e02a      	b.n	8002b16 <HAL_DMA_Abort+0x49a>
 8002ac0:	40020010 	.word	0x40020010
 8002ac4:	40020028 	.word	0x40020028
 8002ac8:	40020040 	.word	0x40020040
 8002acc:	40020058 	.word	0x40020058
 8002ad0:	40020070 	.word	0x40020070
 8002ad4:	40020088 	.word	0x40020088
 8002ad8:	400200a0 	.word	0x400200a0
 8002adc:	400200b8 	.word	0x400200b8
 8002ae0:	40020410 	.word	0x40020410
 8002ae4:	40020428 	.word	0x40020428
 8002ae8:	40020440 	.word	0x40020440
 8002aec:	40020458 	.word	0x40020458
 8002af0:	40020470 	.word	0x40020470
 8002af4:	40020488 	.word	0x40020488
 8002af8:	400204a0 	.word	0x400204a0
 8002afc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2201      	movs	r2, #1
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4f      	ldr	r2, [pc, #316]	; (8002c58 <HAL_DMA_Abort+0x5dc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d072      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a4d      	ldr	r2, [pc, #308]	; (8002c5c <HAL_DMA_Abort+0x5e0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d06d      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4c      	ldr	r2, [pc, #304]	; (8002c60 <HAL_DMA_Abort+0x5e4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d068      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_DMA_Abort+0x5e8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d063      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <HAL_DMA_Abort+0x5ec>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d05e      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a47      	ldr	r2, [pc, #284]	; (8002c6c <HAL_DMA_Abort+0x5f0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d059      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a46      	ldr	r2, [pc, #280]	; (8002c70 <HAL_DMA_Abort+0x5f4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d054      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a44      	ldr	r2, [pc, #272]	; (8002c74 <HAL_DMA_Abort+0x5f8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d04f      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a43      	ldr	r2, [pc, #268]	; (8002c78 <HAL_DMA_Abort+0x5fc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d04a      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a41      	ldr	r2, [pc, #260]	; (8002c7c <HAL_DMA_Abort+0x600>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d045      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a40      	ldr	r2, [pc, #256]	; (8002c80 <HAL_DMA_Abort+0x604>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d040      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a3e      	ldr	r2, [pc, #248]	; (8002c84 <HAL_DMA_Abort+0x608>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d03b      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3d      	ldr	r2, [pc, #244]	; (8002c88 <HAL_DMA_Abort+0x60c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d036      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3b      	ldr	r2, [pc, #236]	; (8002c8c <HAL_DMA_Abort+0x610>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d031      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3a      	ldr	r2, [pc, #232]	; (8002c90 <HAL_DMA_Abort+0x614>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d02c      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a38      	ldr	r2, [pc, #224]	; (8002c94 <HAL_DMA_Abort+0x618>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d027      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a37      	ldr	r2, [pc, #220]	; (8002c98 <HAL_DMA_Abort+0x61c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a35      	ldr	r2, [pc, #212]	; (8002c9c <HAL_DMA_Abort+0x620>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a34      	ldr	r2, [pc, #208]	; (8002ca0 <HAL_DMA_Abort+0x624>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d018      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a32      	ldr	r2, [pc, #200]	; (8002ca4 <HAL_DMA_Abort+0x628>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a31      	ldr	r2, [pc, #196]	; (8002ca8 <HAL_DMA_Abort+0x62c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <HAL_DMA_Abort+0x630>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d009      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <HAL_DMA_Abort+0x634>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_DMA_Abort+0x58a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2c      	ldr	r2, [pc, #176]	; (8002cb4 <HAL_DMA_Abort+0x638>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_DMA_Abort+0x58e>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_DMA_Abort+0x590>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00c      	beq.n	8002c3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40020010 	.word	0x40020010
 8002c5c:	40020028 	.word	0x40020028
 8002c60:	40020040 	.word	0x40020040
 8002c64:	40020058 	.word	0x40020058
 8002c68:	40020070 	.word	0x40020070
 8002c6c:	40020088 	.word	0x40020088
 8002c70:	400200a0 	.word	0x400200a0
 8002c74:	400200b8 	.word	0x400200b8
 8002c78:	40020410 	.word	0x40020410
 8002c7c:	40020428 	.word	0x40020428
 8002c80:	40020440 	.word	0x40020440
 8002c84:	40020458 	.word	0x40020458
 8002c88:	40020470 	.word	0x40020470
 8002c8c:	40020488 	.word	0x40020488
 8002c90:	400204a0 	.word	0x400204a0
 8002c94:	400204b8 	.word	0x400204b8
 8002c98:	58025408 	.word	0x58025408
 8002c9c:	5802541c 	.word	0x5802541c
 8002ca0:	58025430 	.word	0x58025430
 8002ca4:	58025444 	.word	0x58025444
 8002ca8:	58025458 	.word	0x58025458
 8002cac:	5802546c 	.word	0x5802546c
 8002cb0:	58025480 	.word	0x58025480
 8002cb4:	58025494 	.word	0x58025494

08002cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e205      	b.n	80030d6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e1fa      	b.n	80030d6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a8c      	ldr	r2, [pc, #560]	; (8002f18 <HAL_DMA_Abort_IT+0x260>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a8b      	ldr	r2, [pc, #556]	; (8002f1c <HAL_DMA_Abort_IT+0x264>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d045      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a89      	ldr	r2, [pc, #548]	; (8002f20 <HAL_DMA_Abort_IT+0x268>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a88      	ldr	r2, [pc, #544]	; (8002f24 <HAL_DMA_Abort_IT+0x26c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d03b      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a86      	ldr	r2, [pc, #536]	; (8002f28 <HAL_DMA_Abort_IT+0x270>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a85      	ldr	r2, [pc, #532]	; (8002f2c <HAL_DMA_Abort_IT+0x274>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a83      	ldr	r2, [pc, #524]	; (8002f30 <HAL_DMA_Abort_IT+0x278>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a82      	ldr	r2, [pc, #520]	; (8002f34 <HAL_DMA_Abort_IT+0x27c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a80      	ldr	r2, [pc, #512]	; (8002f38 <HAL_DMA_Abort_IT+0x280>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7f      	ldr	r2, [pc, #508]	; (8002f3c <HAL_DMA_Abort_IT+0x284>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a7d      	ldr	r2, [pc, #500]	; (8002f40 <HAL_DMA_Abort_IT+0x288>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7c      	ldr	r2, [pc, #496]	; (8002f44 <HAL_DMA_Abort_IT+0x28c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a7a      	ldr	r2, [pc, #488]	; (8002f48 <HAL_DMA_Abort_IT+0x290>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a79      	ldr	r2, [pc, #484]	; (8002f4c <HAL_DMA_Abort_IT+0x294>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a77      	ldr	r2, [pc, #476]	; (8002f50 <HAL_DMA_Abort_IT+0x298>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xc8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a76      	ldr	r2, [pc, #472]	; (8002f54 <HAL_DMA_Abort_IT+0x29c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Abort_IT+0xcc>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_DMA_Abort_IT+0xce>
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d065      	beq.n	8002e56 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a60      	ldr	r2, [pc, #384]	; (8002f18 <HAL_DMA_Abort_IT+0x260>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d04a      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5e      	ldr	r2, [pc, #376]	; (8002f1c <HAL_DMA_Abort_IT+0x264>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d045      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5d      	ldr	r2, [pc, #372]	; (8002f20 <HAL_DMA_Abort_IT+0x268>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d040      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5b      	ldr	r2, [pc, #364]	; (8002f24 <HAL_DMA_Abort_IT+0x26c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d03b      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <HAL_DMA_Abort_IT+0x270>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d036      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	; (8002f2c <HAL_DMA_Abort_IT+0x274>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d031      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_DMA_Abort_IT+0x278>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d02c      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a55      	ldr	r2, [pc, #340]	; (8002f34 <HAL_DMA_Abort_IT+0x27c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d027      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a54      	ldr	r2, [pc, #336]	; (8002f38 <HAL_DMA_Abort_IT+0x280>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d022      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a52      	ldr	r2, [pc, #328]	; (8002f3c <HAL_DMA_Abort_IT+0x284>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01d      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a51      	ldr	r2, [pc, #324]	; (8002f40 <HAL_DMA_Abort_IT+0x288>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d018      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a4f      	ldr	r2, [pc, #316]	; (8002f44 <HAL_DMA_Abort_IT+0x28c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a4e      	ldr	r2, [pc, #312]	; (8002f48 <HAL_DMA_Abort_IT+0x290>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00e      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a4c      	ldr	r2, [pc, #304]	; (8002f4c <HAL_DMA_Abort_IT+0x294>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d009      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4b      	ldr	r2, [pc, #300]	; (8002f50 <HAL_DMA_Abort_IT+0x298>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d004      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x17a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a49      	ldr	r2, [pc, #292]	; (8002f54 <HAL_DMA_Abort_IT+0x29c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d108      	bne.n	8002e44 <HAL_DMA_Abort_IT+0x18c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e147      	b.n	80030d4 <HAL_DMA_Abort_IT+0x41c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e13e      	b.n	80030d4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 020e 	bic.w	r2, r2, #14
 8002e64:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <HAL_DMA_Abort_IT+0x260>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d04a      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <HAL_DMA_Abort_IT+0x264>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d045      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_DMA_Abort_IT+0x268>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d040      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <HAL_DMA_Abort_IT+0x26c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d03b      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <HAL_DMA_Abort_IT+0x270>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d036      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <HAL_DMA_Abort_IT+0x274>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d031      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_DMA_Abort_IT+0x278>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d02c      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <HAL_DMA_Abort_IT+0x27c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d027      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <HAL_DMA_Abort_IT+0x280>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d022      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_DMA_Abort_IT+0x284>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_DMA_Abort_IT+0x288>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d018      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_DMA_Abort_IT+0x28c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_DMA_Abort_IT+0x290>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_DMA_Abort_IT+0x294>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <HAL_DMA_Abort_IT+0x298>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x24e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <HAL_DMA_Abort_IT+0x29c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d128      	bne.n	8002f58 <HAL_DMA_Abort_IT+0x2a0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e027      	b.n	8002f68 <HAL_DMA_Abort_IT+0x2b0>
 8002f18:	40020010 	.word	0x40020010
 8002f1c:	40020028 	.word	0x40020028
 8002f20:	40020040 	.word	0x40020040
 8002f24:	40020058 	.word	0x40020058
 8002f28:	40020070 	.word	0x40020070
 8002f2c:	40020088 	.word	0x40020088
 8002f30:	400200a0 	.word	0x400200a0
 8002f34:	400200b8 	.word	0x400200b8
 8002f38:	40020410 	.word	0x40020410
 8002f3c:	40020428 	.word	0x40020428
 8002f40:	40020440 	.word	0x40020440
 8002f44:	40020458 	.word	0x40020458
 8002f48:	40020470 	.word	0x40020470
 8002f4c:	40020488 	.word	0x40020488
 8002f50:	400204a0 	.word	0x400204a0
 8002f54:	400204b8 	.word	0x400204b8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5c      	ldr	r2, [pc, #368]	; (80030e0 <HAL_DMA_Abort_IT+0x428>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d072      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a5b      	ldr	r2, [pc, #364]	; (80030e4 <HAL_DMA_Abort_IT+0x42c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d06d      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a59      	ldr	r2, [pc, #356]	; (80030e8 <HAL_DMA_Abort_IT+0x430>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d068      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_DMA_Abort_IT+0x434>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d063      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a56      	ldr	r2, [pc, #344]	; (80030f0 <HAL_DMA_Abort_IT+0x438>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d05e      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a55      	ldr	r2, [pc, #340]	; (80030f4 <HAL_DMA_Abort_IT+0x43c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d059      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a53      	ldr	r2, [pc, #332]	; (80030f8 <HAL_DMA_Abort_IT+0x440>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d054      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_DMA_Abort_IT+0x444>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d04f      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a50      	ldr	r2, [pc, #320]	; (8003100 <HAL_DMA_Abort_IT+0x448>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a4f      	ldr	r2, [pc, #316]	; (8003104 <HAL_DMA_Abort_IT+0x44c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4d      	ldr	r2, [pc, #308]	; (8003108 <HAL_DMA_Abort_IT+0x450>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a4c      	ldr	r2, [pc, #304]	; (800310c <HAL_DMA_Abort_IT+0x454>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a4a      	ldr	r2, [pc, #296]	; (8003110 <HAL_DMA_Abort_IT+0x458>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a49      	ldr	r2, [pc, #292]	; (8003114 <HAL_DMA_Abort_IT+0x45c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a47      	ldr	r2, [pc, #284]	; (8003118 <HAL_DMA_Abort_IT+0x460>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a46      	ldr	r2, [pc, #280]	; (800311c <HAL_DMA_Abort_IT+0x464>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a44      	ldr	r2, [pc, #272]	; (8003120 <HAL_DMA_Abort_IT+0x468>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a43      	ldr	r2, [pc, #268]	; (8003124 <HAL_DMA_Abort_IT+0x46c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a41      	ldr	r2, [pc, #260]	; (8003128 <HAL_DMA_Abort_IT+0x470>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a40      	ldr	r2, [pc, #256]	; (800312c <HAL_DMA_Abort_IT+0x474>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a3e      	ldr	r2, [pc, #248]	; (8003130 <HAL_DMA_Abort_IT+0x478>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a3d      	ldr	r2, [pc, #244]	; (8003134 <HAL_DMA_Abort_IT+0x47c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a3b      	ldr	r2, [pc, #236]	; (8003138 <HAL_DMA_Abort_IT+0x480>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_DMA_Abort_IT+0x3a0>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a3a      	ldr	r2, [pc, #232]	; (800313c <HAL_DMA_Abort_IT+0x484>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_DMA_Abort_IT+0x3a4>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_DMA_Abort_IT+0x3a6>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d028      	beq.n	80030b4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2201      	movs	r2, #1
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003090:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40020010 	.word	0x40020010
 80030e4:	40020028 	.word	0x40020028
 80030e8:	40020040 	.word	0x40020040
 80030ec:	40020058 	.word	0x40020058
 80030f0:	40020070 	.word	0x40020070
 80030f4:	40020088 	.word	0x40020088
 80030f8:	400200a0 	.word	0x400200a0
 80030fc:	400200b8 	.word	0x400200b8
 8003100:	40020410 	.word	0x40020410
 8003104:	40020428 	.word	0x40020428
 8003108:	40020440 	.word	0x40020440
 800310c:	40020458 	.word	0x40020458
 8003110:	40020470 	.word	0x40020470
 8003114:	40020488 	.word	0x40020488
 8003118:	400204a0 	.word	0x400204a0
 800311c:	400204b8 	.word	0x400204b8
 8003120:	58025408 	.word	0x58025408
 8003124:	5802541c 	.word	0x5802541c
 8003128:	58025430 	.word	0x58025430
 800312c:	58025444 	.word	0x58025444
 8003130:	58025458 	.word	0x58025458
 8003134:	5802546c 	.word	0x5802546c
 8003138:	58025480 	.word	0x58025480
 800313c:	58025494 	.word	0x58025494

08003140 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800314c:	4b67      	ldr	r3, [pc, #412]	; (80032ec <HAL_DMA_IRQHandler+0x1ac>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a67      	ldr	r2, [pc, #412]	; (80032f0 <HAL_DMA_IRQHandler+0x1b0>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0a9b      	lsrs	r3, r3, #10
 8003158:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <HAL_DMA_IRQHandler+0x1b4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d04a      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5d      	ldr	r2, [pc, #372]	; (80032f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d045      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a5c      	ldr	r2, [pc, #368]	; (80032fc <HAL_DMA_IRQHandler+0x1bc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d040      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5a      	ldr	r2, [pc, #360]	; (8003300 <HAL_DMA_IRQHandler+0x1c0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d03b      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a59      	ldr	r2, [pc, #356]	; (8003304 <HAL_DMA_IRQHandler+0x1c4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d036      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a57      	ldr	r2, [pc, #348]	; (8003308 <HAL_DMA_IRQHandler+0x1c8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d031      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a56      	ldr	r2, [pc, #344]	; (800330c <HAL_DMA_IRQHandler+0x1cc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d02c      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a54      	ldr	r2, [pc, #336]	; (8003310 <HAL_DMA_IRQHandler+0x1d0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d027      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_DMA_IRQHandler+0x1d4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a51      	ldr	r2, [pc, #324]	; (8003318 <HAL_DMA_IRQHandler+0x1d8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01d      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a50      	ldr	r2, [pc, #320]	; (800331c <HAL_DMA_IRQHandler+0x1dc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a4e      	ldr	r2, [pc, #312]	; (8003320 <HAL_DMA_IRQHandler+0x1e0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_DMA_IRQHandler+0x1e4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <HAL_DMA_IRQHandler+0x1e8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_DMA_IRQHandler+0x1ec>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a48      	ldr	r2, [pc, #288]	; (8003330 <HAL_DMA_IRQHandler+0x1f0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_DMA_IRQHandler+0xd6>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_DMA_IRQHandler+0xd8>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 842b 	beq.w	8003a74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2208      	movs	r2, #8
 8003228:	409a      	lsls	r2, r3
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80a2 	beq.w	8003378 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2e      	ldr	r2, [pc, #184]	; (80032f4 <HAL_DMA_IRQHandler+0x1b4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d04a      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2d      	ldr	r2, [pc, #180]	; (80032f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d045      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2b      	ldr	r2, [pc, #172]	; (80032fc <HAL_DMA_IRQHandler+0x1bc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d040      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2a      	ldr	r2, [pc, #168]	; (8003300 <HAL_DMA_IRQHandler+0x1c0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d03b      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a28      	ldr	r2, [pc, #160]	; (8003304 <HAL_DMA_IRQHandler+0x1c4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d036      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a27      	ldr	r2, [pc, #156]	; (8003308 <HAL_DMA_IRQHandler+0x1c8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d031      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a25      	ldr	r2, [pc, #148]	; (800330c <HAL_DMA_IRQHandler+0x1cc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02c      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a24      	ldr	r2, [pc, #144]	; (8003310 <HAL_DMA_IRQHandler+0x1d0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d027      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <HAL_DMA_IRQHandler+0x1d4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d022      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a21      	ldr	r2, [pc, #132]	; (8003318 <HAL_DMA_IRQHandler+0x1d8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d01d      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_DMA_IRQHandler+0x1dc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d018      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_DMA_IRQHandler+0x1e0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_DMA_IRQHandler+0x1e4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00e      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_DMA_IRQHandler+0x1e8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d009      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_DMA_IRQHandler+0x1ec>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_DMA_IRQHandler+0x1f0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d12f      	bne.n	8003334 <HAL_DMA_IRQHandler+0x1f4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e02e      	b.n	8003348 <HAL_DMA_IRQHandler+0x208>
 80032ea:	bf00      	nop
 80032ec:	24000000 	.word	0x24000000
 80032f0:	1b4e81b5 	.word	0x1b4e81b5
 80032f4:	40020010 	.word	0x40020010
 80032f8:	40020028 	.word	0x40020028
 80032fc:	40020040 	.word	0x40020040
 8003300:	40020058 	.word	0x40020058
 8003304:	40020070 	.word	0x40020070
 8003308:	40020088 	.word	0x40020088
 800330c:	400200a0 	.word	0x400200a0
 8003310:	400200b8 	.word	0x400200b8
 8003314:	40020410 	.word	0x40020410
 8003318:	40020428 	.word	0x40020428
 800331c:	40020440 	.word	0x40020440
 8003320:	40020458 	.word	0x40020458
 8003324:	40020470 	.word	0x40020470
 8003328:	40020488 	.word	0x40020488
 800332c:	400204a0 	.word	0x400204a0
 8003330:	400204b8 	.word	0x400204b8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2208      	movs	r2, #8
 8003366:	409a      	lsls	r2, r3
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d06e      	beq.n	800346c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_DMA_IRQHandler+0x3f8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d04a      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a67      	ldr	r2, [pc, #412]	; (800353c <HAL_DMA_IRQHandler+0x3fc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d045      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a66      	ldr	r2, [pc, #408]	; (8003540 <HAL_DMA_IRQHandler+0x400>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d040      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a64      	ldr	r2, [pc, #400]	; (8003544 <HAL_DMA_IRQHandler+0x404>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d03b      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a63      	ldr	r2, [pc, #396]	; (8003548 <HAL_DMA_IRQHandler+0x408>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d036      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a61      	ldr	r2, [pc, #388]	; (800354c <HAL_DMA_IRQHandler+0x40c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d031      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a60      	ldr	r2, [pc, #384]	; (8003550 <HAL_DMA_IRQHandler+0x410>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d02c      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a5e      	ldr	r2, [pc, #376]	; (8003554 <HAL_DMA_IRQHandler+0x414>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d027      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5d      	ldr	r2, [pc, #372]	; (8003558 <HAL_DMA_IRQHandler+0x418>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a5b      	ldr	r2, [pc, #364]	; (800355c <HAL_DMA_IRQHandler+0x41c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a5a      	ldr	r2, [pc, #360]	; (8003560 <HAL_DMA_IRQHandler+0x420>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d018      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_DMA_IRQHandler+0x424>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a57      	ldr	r2, [pc, #348]	; (8003568 <HAL_DMA_IRQHandler+0x428>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00e      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a55      	ldr	r2, [pc, #340]	; (800356c <HAL_DMA_IRQHandler+0x42c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a54      	ldr	r2, [pc, #336]	; (8003570 <HAL_DMA_IRQHandler+0x430>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a52      	ldr	r2, [pc, #328]	; (8003574 <HAL_DMA_IRQHandler+0x434>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10a      	bne.n	8003444 <HAL_DMA_IRQHandler+0x304>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e003      	b.n	800344c <HAL_DMA_IRQHandler+0x30c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2201      	movs	r2, #1
 800345a:	409a      	lsls	r2, r3
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f043 0202 	orr.w	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2204      	movs	r2, #4
 8003476:	409a      	lsls	r2, r3
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 808f 	beq.w	80035a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_DMA_IRQHandler+0x3f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d04a      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a2a      	ldr	r2, [pc, #168]	; (800353c <HAL_DMA_IRQHandler+0x3fc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d045      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_DMA_IRQHandler+0x400>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d040      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a27      	ldr	r2, [pc, #156]	; (8003544 <HAL_DMA_IRQHandler+0x404>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d03b      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a26      	ldr	r2, [pc, #152]	; (8003548 <HAL_DMA_IRQHandler+0x408>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d036      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a24      	ldr	r2, [pc, #144]	; (800354c <HAL_DMA_IRQHandler+0x40c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d031      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a23      	ldr	r2, [pc, #140]	; (8003550 <HAL_DMA_IRQHandler+0x410>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d02c      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a21      	ldr	r2, [pc, #132]	; (8003554 <HAL_DMA_IRQHandler+0x414>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d027      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a20      	ldr	r2, [pc, #128]	; (8003558 <HAL_DMA_IRQHandler+0x418>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d022      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1e      	ldr	r2, [pc, #120]	; (800355c <HAL_DMA_IRQHandler+0x41c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01d      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_DMA_IRQHandler+0x420>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_DMA_IRQHandler+0x424>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_DMA_IRQHandler+0x428>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <HAL_DMA_IRQHandler+0x42c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a17      	ldr	r2, [pc, #92]	; (8003570 <HAL_DMA_IRQHandler+0x430>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a15      	ldr	r2, [pc, #84]	; (8003574 <HAL_DMA_IRQHandler+0x434>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d12a      	bne.n	8003578 <HAL_DMA_IRQHandler+0x438>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e023      	b.n	8003580 <HAL_DMA_IRQHandler+0x440>
 8003538:	40020010 	.word	0x40020010
 800353c:	40020028 	.word	0x40020028
 8003540:	40020040 	.word	0x40020040
 8003544:	40020058 	.word	0x40020058
 8003548:	40020070 	.word	0x40020070
 800354c:	40020088 	.word	0x40020088
 8003550:	400200a0 	.word	0x400200a0
 8003554:	400200b8 	.word	0x400200b8
 8003558:	40020410 	.word	0x40020410
 800355c:	40020428 	.word	0x40020428
 8003560:	40020440 	.word	0x40020440
 8003564:	40020458 	.word	0x40020458
 8003568:	40020470 	.word	0x40020470
 800356c:	40020488 	.word	0x40020488
 8003570:	400204a0 	.word	0x400204a0
 8003574:	400204b8 	.word	0x400204b8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2204      	movs	r2, #4
 800358e:	409a      	lsls	r2, r3
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f043 0204 	orr.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	2210      	movs	r2, #16
 80035aa:	409a      	lsls	r2, r3
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80a6 	beq.w	8003702 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a85      	ldr	r2, [pc, #532]	; (80037d0 <HAL_DMA_IRQHandler+0x690>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d04a      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a83      	ldr	r2, [pc, #524]	; (80037d4 <HAL_DMA_IRQHandler+0x694>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d045      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a82      	ldr	r2, [pc, #520]	; (80037d8 <HAL_DMA_IRQHandler+0x698>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d040      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a80      	ldr	r2, [pc, #512]	; (80037dc <HAL_DMA_IRQHandler+0x69c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d03b      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7f      	ldr	r2, [pc, #508]	; (80037e0 <HAL_DMA_IRQHandler+0x6a0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d036      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a7d      	ldr	r2, [pc, #500]	; (80037e4 <HAL_DMA_IRQHandler+0x6a4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d031      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a7c      	ldr	r2, [pc, #496]	; (80037e8 <HAL_DMA_IRQHandler+0x6a8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d02c      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a7a      	ldr	r2, [pc, #488]	; (80037ec <HAL_DMA_IRQHandler+0x6ac>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d027      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a79      	ldr	r2, [pc, #484]	; (80037f0 <HAL_DMA_IRQHandler+0x6b0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a77      	ldr	r2, [pc, #476]	; (80037f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01d      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a76      	ldr	r2, [pc, #472]	; (80037f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a74      	ldr	r2, [pc, #464]	; (80037fc <HAL_DMA_IRQHandler+0x6bc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a73      	ldr	r2, [pc, #460]	; (8003800 <HAL_DMA_IRQHandler+0x6c0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a71      	ldr	r2, [pc, #452]	; (8003804 <HAL_DMA_IRQHandler+0x6c4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a70      	ldr	r2, [pc, #448]	; (8003808 <HAL_DMA_IRQHandler+0x6c8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6e      	ldr	r2, [pc, #440]	; (800380c <HAL_DMA_IRQHandler+0x6cc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10a      	bne.n	800366c <HAL_DMA_IRQHandler+0x52c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e009      	b.n	8003680 <HAL_DMA_IRQHandler+0x540>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf14      	ite	ne
 800367a:	2301      	movne	r3, #1
 800367c:	2300      	moveq	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d03e      	beq.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2210      	movs	r2, #16
 800368e:	409a      	lsls	r2, r3
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d018      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d108      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d024      	beq.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
 80036c0:	e01f      	b.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01b      	beq.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
 80036d2:	e016      	b.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0208 	bic.w	r2, r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2220      	movs	r2, #32
 800370c:	409a      	lsls	r2, r3
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8110 	beq.w	8003938 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <HAL_DMA_IRQHandler+0x690>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d04a      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2b      	ldr	r2, [pc, #172]	; (80037d4 <HAL_DMA_IRQHandler+0x694>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d045      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <HAL_DMA_IRQHandler+0x698>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d040      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a28      	ldr	r2, [pc, #160]	; (80037dc <HAL_DMA_IRQHandler+0x69c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d03b      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_DMA_IRQHandler+0x6a0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d036      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <HAL_DMA_IRQHandler+0x6a4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d031      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <HAL_DMA_IRQHandler+0x6a8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d02c      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_DMA_IRQHandler+0x6ac>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d027      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a20      	ldr	r2, [pc, #128]	; (80037f0 <HAL_DMA_IRQHandler+0x6b0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d01d      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d018      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_DMA_IRQHandler+0x6bc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <HAL_DMA_IRQHandler+0x6c0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a19      	ldr	r2, [pc, #100]	; (8003804 <HAL_DMA_IRQHandler+0x6c4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_DMA_IRQHandler+0x6c8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_DMA_IRQHandler+0x6cc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d12b      	bne.n	8003810 <HAL_DMA_IRQHandler+0x6d0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf14      	ite	ne
 80037c6:	2301      	movne	r3, #1
 80037c8:	2300      	moveq	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e02a      	b.n	8003824 <HAL_DMA_IRQHandler+0x6e4>
 80037ce:	bf00      	nop
 80037d0:	40020010 	.word	0x40020010
 80037d4:	40020028 	.word	0x40020028
 80037d8:	40020040 	.word	0x40020040
 80037dc:	40020058 	.word	0x40020058
 80037e0:	40020070 	.word	0x40020070
 80037e4:	40020088 	.word	0x40020088
 80037e8:	400200a0 	.word	0x400200a0
 80037ec:	400200b8 	.word	0x400200b8
 80037f0:	40020410 	.word	0x40020410
 80037f4:	40020428 	.word	0x40020428
 80037f8:	40020440 	.word	0x40020440
 80037fc:	40020458 	.word	0x40020458
 8003800:	40020470 	.word	0x40020470
 8003804:	40020488 	.word	0x40020488
 8003808:	400204a0 	.word	0x400204a0
 800380c:	400204b8 	.word	0x400204b8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf14      	ite	ne
 800381e:	2301      	movne	r3, #1
 8003820:	2300      	moveq	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8087 	beq.w	8003938 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	2220      	movs	r2, #32
 8003834:	409a      	lsls	r2, r3
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b04      	cmp	r3, #4
 8003844:	d139      	bne.n	80038ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0216 	bic.w	r2, r2, #22
 8003854:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003864:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <HAL_DMA_IRQHandler+0x736>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0208 	bic.w	r2, r2, #8
 8003884:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	223f      	movs	r2, #63	; 0x3f
 8003890:	409a      	lsls	r2, r3
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 834a 	beq.w	8003f44 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
          }
          return;
 80038b8:	e344      	b.n	8003f44 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d018      	beq.n	80038fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d108      	bne.n	80038e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d02c      	beq.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
 80038e6:	e027      	b.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d023      	beq.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4798      	blx	r3
 80038f8:	e01e      	b.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10f      	bne.n	8003928 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0210 	bic.w	r2, r2, #16
 8003916:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8306 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8088 	beq.w	8003a60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2204      	movs	r2, #4
 8003954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a7a      	ldr	r2, [pc, #488]	; (8003b48 <HAL_DMA_IRQHandler+0xa08>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d04a      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a79      	ldr	r2, [pc, #484]	; (8003b4c <HAL_DMA_IRQHandler+0xa0c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d045      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a77      	ldr	r2, [pc, #476]	; (8003b50 <HAL_DMA_IRQHandler+0xa10>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d040      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a76      	ldr	r2, [pc, #472]	; (8003b54 <HAL_DMA_IRQHandler+0xa14>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d03b      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a74      	ldr	r2, [pc, #464]	; (8003b58 <HAL_DMA_IRQHandler+0xa18>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d036      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a73      	ldr	r2, [pc, #460]	; (8003b5c <HAL_DMA_IRQHandler+0xa1c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d031      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a71      	ldr	r2, [pc, #452]	; (8003b60 <HAL_DMA_IRQHandler+0xa20>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02c      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a70      	ldr	r2, [pc, #448]	; (8003b64 <HAL_DMA_IRQHandler+0xa24>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d027      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a6e      	ldr	r2, [pc, #440]	; (8003b68 <HAL_DMA_IRQHandler+0xa28>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d022      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6d      	ldr	r2, [pc, #436]	; (8003b6c <HAL_DMA_IRQHandler+0xa2c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d01d      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a6b      	ldr	r2, [pc, #428]	; (8003b70 <HAL_DMA_IRQHandler+0xa30>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d018      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6a      	ldr	r2, [pc, #424]	; (8003b74 <HAL_DMA_IRQHandler+0xa34>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a68      	ldr	r2, [pc, #416]	; (8003b78 <HAL_DMA_IRQHandler+0xa38>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00e      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a67      	ldr	r2, [pc, #412]	; (8003b7c <HAL_DMA_IRQHandler+0xa3c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d009      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a65      	ldr	r2, [pc, #404]	; (8003b80 <HAL_DMA_IRQHandler+0xa40>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a64      	ldr	r2, [pc, #400]	; (8003b84 <HAL_DMA_IRQHandler+0xa44>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <HAL_DMA_IRQHandler+0x8ca>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e007      	b.n	8003a1a <HAL_DMA_IRQHandler+0x8da>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d307      	bcc.n	8003a36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f2      	bne.n	8003a1a <HAL_DMA_IRQHandler+0x8da>
 8003a34:	e000      	b.n	8003a38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a36:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2203      	movs	r2, #3
 8003a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a56:	e003      	b.n	8003a60 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8272 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
 8003a72:	e26c      	b.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a43      	ldr	r2, [pc, #268]	; (8003b88 <HAL_DMA_IRQHandler+0xa48>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d022      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a42      	ldr	r2, [pc, #264]	; (8003b8c <HAL_DMA_IRQHandler+0xa4c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d01d      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a40      	ldr	r2, [pc, #256]	; (8003b90 <HAL_DMA_IRQHandler+0xa50>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d018      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a3f      	ldr	r2, [pc, #252]	; (8003b94 <HAL_DMA_IRQHandler+0xa54>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3d      	ldr	r2, [pc, #244]	; (8003b98 <HAL_DMA_IRQHandler+0xa58>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <HAL_DMA_IRQHandler+0xa5c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3a      	ldr	r2, [pc, #232]	; (8003ba0 <HAL_DMA_IRQHandler+0xa60>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a39      	ldr	r2, [pc, #228]	; (8003ba4 <HAL_DMA_IRQHandler+0xa64>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x988>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <HAL_DMA_IRQHandler+0x98a>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 823f 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80cd 	beq.w	8003c88 <HAL_DMA_IRQHandler+0xb48>
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80c7 	beq.w	8003c88 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2204      	movs	r2, #4
 8003b04:	409a      	lsls	r2, r3
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d049      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8210 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b30:	e20a      	b.n	8003f48 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8206 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b44:	e200      	b.n	8003f48 <HAL_DMA_IRQHandler+0xe08>
 8003b46:	bf00      	nop
 8003b48:	40020010 	.word	0x40020010
 8003b4c:	40020028 	.word	0x40020028
 8003b50:	40020040 	.word	0x40020040
 8003b54:	40020058 	.word	0x40020058
 8003b58:	40020070 	.word	0x40020070
 8003b5c:	40020088 	.word	0x40020088
 8003b60:	400200a0 	.word	0x400200a0
 8003b64:	400200b8 	.word	0x400200b8
 8003b68:	40020410 	.word	0x40020410
 8003b6c:	40020428 	.word	0x40020428
 8003b70:	40020440 	.word	0x40020440
 8003b74:	40020458 	.word	0x40020458
 8003b78:	40020470 	.word	0x40020470
 8003b7c:	40020488 	.word	0x40020488
 8003b80:	400204a0 	.word	0x400204a0
 8003b84:	400204b8 	.word	0x400204b8
 8003b88:	58025408 	.word	0x58025408
 8003b8c:	5802541c 	.word	0x5802541c
 8003b90:	58025430 	.word	0x58025430
 8003b94:	58025444 	.word	0x58025444
 8003b98:	58025458 	.word	0x58025458
 8003b9c:	5802546c 	.word	0x5802546c
 8003ba0:	58025480 	.word	0x58025480
 8003ba4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d160      	bne.n	8003c74 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a8c      	ldr	r2, [pc, #560]	; (8003de8 <HAL_DMA_IRQHandler+0xca8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a8a      	ldr	r2, [pc, #552]	; (8003dec <HAL_DMA_IRQHandler+0xcac>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a89      	ldr	r2, [pc, #548]	; (8003df0 <HAL_DMA_IRQHandler+0xcb0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a87      	ldr	r2, [pc, #540]	; (8003df4 <HAL_DMA_IRQHandler+0xcb4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a86      	ldr	r2, [pc, #536]	; (8003df8 <HAL_DMA_IRQHandler+0xcb8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a84      	ldr	r2, [pc, #528]	; (8003dfc <HAL_DMA_IRQHandler+0xcbc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a83      	ldr	r2, [pc, #524]	; (8003e00 <HAL_DMA_IRQHandler+0xcc0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a81      	ldr	r2, [pc, #516]	; (8003e04 <HAL_DMA_IRQHandler+0xcc4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_DMA_IRQHandler+0xcc8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7e      	ldr	r2, [pc, #504]	; (8003e0c <HAL_DMA_IRQHandler+0xccc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7d      	ldr	r2, [pc, #500]	; (8003e10 <HAL_DMA_IRQHandler+0xcd0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7b      	ldr	r2, [pc, #492]	; (8003e14 <HAL_DMA_IRQHandler+0xcd4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7a      	ldr	r2, [pc, #488]	; (8003e18 <HAL_DMA_IRQHandler+0xcd8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a78      	ldr	r2, [pc, #480]	; (8003e1c <HAL_DMA_IRQHandler+0xcdc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a77      	ldr	r2, [pc, #476]	; (8003e20 <HAL_DMA_IRQHandler+0xce0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a75      	ldr	r2, [pc, #468]	; (8003e24 <HAL_DMA_IRQHandler+0xce4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <HAL_DMA_IRQHandler+0xb24>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0208 	bic.w	r2, r2, #8
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e007      	b.n	8003c74 <HAL_DMA_IRQHandler+0xb34>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0204 	bic.w	r2, r2, #4
 8003c72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8165 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c86:	e15f      	b.n	8003f48 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2202      	movs	r2, #2
 8003c92:	409a      	lsls	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80c5 	beq.w	8003e28 <HAL_DMA_IRQHandler+0xce8>
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80bf 	beq.w	8003e28 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d018      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 813a 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce0:	e134      	b.n	8003f4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8130 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf4:	e12a      	b.n	8003f4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d168      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a38      	ldr	r2, [pc, #224]	; (8003de8 <HAL_DMA_IRQHandler+0xca8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d04a      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a37      	ldr	r2, [pc, #220]	; (8003dec <HAL_DMA_IRQHandler+0xcac>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d045      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <HAL_DMA_IRQHandler+0xcb0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d040      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a34      	ldr	r2, [pc, #208]	; (8003df4 <HAL_DMA_IRQHandler+0xcb4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03b      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a32      	ldr	r2, [pc, #200]	; (8003df8 <HAL_DMA_IRQHandler+0xcb8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d036      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a31      	ldr	r2, [pc, #196]	; (8003dfc <HAL_DMA_IRQHandler+0xcbc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d031      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2f      	ldr	r2, [pc, #188]	; (8003e00 <HAL_DMA_IRQHandler+0xcc0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02c      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2e      	ldr	r2, [pc, #184]	; (8003e04 <HAL_DMA_IRQHandler+0xcc4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d027      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <HAL_DMA_IRQHandler+0xcc8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d022      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <HAL_DMA_IRQHandler+0xccc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d01d      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <HAL_DMA_IRQHandler+0xcd0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d018      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a28      	ldr	r2, [pc, #160]	; (8003e14 <HAL_DMA_IRQHandler+0xcd4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_DMA_IRQHandler+0xcd8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a25      	ldr	r2, [pc, #148]	; (8003e1c <HAL_DMA_IRQHandler+0xcdc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <HAL_DMA_IRQHandler+0xce0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xc60>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <HAL_DMA_IRQHandler+0xce4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <HAL_DMA_IRQHandler+0xc72>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0214 	bic.w	r2, r2, #20
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e007      	b.n	8003dc2 <HAL_DMA_IRQHandler+0xc82>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 020a 	bic.w	r2, r2, #10
 8003dc0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80b8 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003de4:	e0b2      	b.n	8003f4c <HAL_DMA_IRQHandler+0xe0c>
 8003de6:	bf00      	nop
 8003de8:	40020010 	.word	0x40020010
 8003dec:	40020028 	.word	0x40020028
 8003df0:	40020040 	.word	0x40020040
 8003df4:	40020058 	.word	0x40020058
 8003df8:	40020070 	.word	0x40020070
 8003dfc:	40020088 	.word	0x40020088
 8003e00:	400200a0 	.word	0x400200a0
 8003e04:	400200b8 	.word	0x400200b8
 8003e08:	40020410 	.word	0x40020410
 8003e0c:	40020428 	.word	0x40020428
 8003e10:	40020440 	.word	0x40020440
 8003e14:	40020458 	.word	0x40020458
 8003e18:	40020470 	.word	0x40020470
 8003e1c:	40020488 	.word	0x40020488
 8003e20:	400204a0 	.word	0x400204a0
 8003e24:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2208      	movs	r2, #8
 8003e32:	409a      	lsls	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8088 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8082 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a41      	ldr	r2, [pc, #260]	; (8003f54 <HAL_DMA_IRQHandler+0xe14>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d04a      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <HAL_DMA_IRQHandler+0xe18>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d045      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a3e      	ldr	r2, [pc, #248]	; (8003f5c <HAL_DMA_IRQHandler+0xe1c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d040      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <HAL_DMA_IRQHandler+0xe20>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d03b      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	; (8003f64 <HAL_DMA_IRQHandler+0xe24>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d036      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a39      	ldr	r2, [pc, #228]	; (8003f68 <HAL_DMA_IRQHandler+0xe28>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d031      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a38      	ldr	r2, [pc, #224]	; (8003f6c <HAL_DMA_IRQHandler+0xe2c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d02c      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a36      	ldr	r2, [pc, #216]	; (8003f70 <HAL_DMA_IRQHandler+0xe30>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d027      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a35      	ldr	r2, [pc, #212]	; (8003f74 <HAL_DMA_IRQHandler+0xe34>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d022      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a33      	ldr	r2, [pc, #204]	; (8003f78 <HAL_DMA_IRQHandler+0xe38>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01d      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a32      	ldr	r2, [pc, #200]	; (8003f7c <HAL_DMA_IRQHandler+0xe3c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d018      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <HAL_DMA_IRQHandler+0xe40>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <HAL_DMA_IRQHandler+0xe44>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2d      	ldr	r2, [pc, #180]	; (8003f88 <HAL_DMA_IRQHandler+0xe48>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2c      	ldr	r2, [pc, #176]	; (8003f8c <HAL_DMA_IRQHandler+0xe4c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <HAL_DMA_IRQHandler+0xe50>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d108      	bne.n	8003efc <HAL_DMA_IRQHandler+0xdbc>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 021c 	bic.w	r2, r2, #28
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e007      	b.n	8003f0c <HAL_DMA_IRQHandler+0xdcc>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 020e 	bic.w	r2, r2, #14
 8003f0a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2201      	movs	r2, #1
 8003f16:	409a      	lsls	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
 8003f42:	e004      	b.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f44:	bf00      	nop
 8003f46:	e002      	b.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f4c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f4e:	3728      	adds	r7, #40	; 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40020010 	.word	0x40020010
 8003f58:	40020028 	.word	0x40020028
 8003f5c:	40020040 	.word	0x40020040
 8003f60:	40020058 	.word	0x40020058
 8003f64:	40020070 	.word	0x40020070
 8003f68:	40020088 	.word	0x40020088
 8003f6c:	400200a0 	.word	0x400200a0
 8003f70:	400200b8 	.word	0x400200b8
 8003f74:	40020410 	.word	0x40020410
 8003f78:	40020428 	.word	0x40020428
 8003f7c:	40020440 	.word	0x40020440
 8003f80:	40020458 	.word	0x40020458
 8003f84:	40020470 	.word	0x40020470
 8003f88:	40020488 	.word	0x40020488
 8003f8c:	400204a0 	.word	0x400204a0
 8003f90:	400204b8 	.word	0x400204b8

08003f94 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa2:	b2db      	uxtb	r3, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a42      	ldr	r2, [pc, #264]	; (80040c8 <DMA_CalcBaseAndBitshift+0x118>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d04a      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a41      	ldr	r2, [pc, #260]	; (80040cc <DMA_CalcBaseAndBitshift+0x11c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d045      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3f      	ldr	r2, [pc, #252]	; (80040d0 <DMA_CalcBaseAndBitshift+0x120>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d040      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <DMA_CalcBaseAndBitshift+0x124>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d03b      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3c      	ldr	r2, [pc, #240]	; (80040d8 <DMA_CalcBaseAndBitshift+0x128>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d036      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3b      	ldr	r2, [pc, #236]	; (80040dc <DMA_CalcBaseAndBitshift+0x12c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d031      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a39      	ldr	r2, [pc, #228]	; (80040e0 <DMA_CalcBaseAndBitshift+0x130>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02c      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a38      	ldr	r2, [pc, #224]	; (80040e4 <DMA_CalcBaseAndBitshift+0x134>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d027      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a36      	ldr	r2, [pc, #216]	; (80040e8 <DMA_CalcBaseAndBitshift+0x138>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d022      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a35      	ldr	r2, [pc, #212]	; (80040ec <DMA_CalcBaseAndBitshift+0x13c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d01d      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a33      	ldr	r2, [pc, #204]	; (80040f0 <DMA_CalcBaseAndBitshift+0x140>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d018      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a32      	ldr	r2, [pc, #200]	; (80040f4 <DMA_CalcBaseAndBitshift+0x144>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a30      	ldr	r2, [pc, #192]	; (80040f8 <DMA_CalcBaseAndBitshift+0x148>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a2f      	ldr	r2, [pc, #188]	; (80040fc <DMA_CalcBaseAndBitshift+0x14c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d009      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2d      	ldr	r2, [pc, #180]	; (8004100 <DMA_CalcBaseAndBitshift+0x150>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <DMA_CalcBaseAndBitshift+0xa8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2c      	ldr	r2, [pc, #176]	; (8004104 <DMA_CalcBaseAndBitshift+0x154>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <DMA_CalcBaseAndBitshift+0xac>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <DMA_CalcBaseAndBitshift+0xae>
 800405c:	2300      	movs	r3, #0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d024      	beq.n	80040ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	3b10      	subs	r3, #16
 800406a:	4a27      	ldr	r2, [pc, #156]	; (8004108 <DMA_CalcBaseAndBitshift+0x158>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	4a24      	ldr	r2, [pc, #144]	; (800410c <DMA_CalcBaseAndBitshift+0x15c>)
 800407c:	5cd3      	ldrb	r3, [r2, r3]
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d908      	bls.n	800409c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <DMA_CalcBaseAndBitshift+0x160>)
 8004092:	4013      	ands	r3, r2
 8004094:	1d1a      	adds	r2, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	659a      	str	r2, [r3, #88]	; 0x58
 800409a:	e00d      	b.n	80040b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <DMA_CalcBaseAndBitshift+0x160>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6593      	str	r3, [r2, #88]	; 0x58
 80040aa:	e005      	b.n	80040b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40020010 	.word	0x40020010
 80040cc:	40020028 	.word	0x40020028
 80040d0:	40020040 	.word	0x40020040
 80040d4:	40020058 	.word	0x40020058
 80040d8:	40020070 	.word	0x40020070
 80040dc:	40020088 	.word	0x40020088
 80040e0:	400200a0 	.word	0x400200a0
 80040e4:	400200b8 	.word	0x400200b8
 80040e8:	40020410 	.word	0x40020410
 80040ec:	40020428 	.word	0x40020428
 80040f0:	40020440 	.word	0x40020440
 80040f4:	40020458 	.word	0x40020458
 80040f8:	40020470 	.word	0x40020470
 80040fc:	40020488 	.word	0x40020488
 8004100:	400204a0 	.word	0x400204a0
 8004104:	400204b8 	.word	0x400204b8
 8004108:	aaaaaaab 	.word	0xaaaaaaab
 800410c:	080154d0 	.word	0x080154d0
 8004110:	fffffc00 	.word	0xfffffc00

08004114 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d120      	bne.n	800416a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	2b03      	cmp	r3, #3
 800412e:	d858      	bhi.n	80041e2 <DMA_CheckFifoParam+0xce>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <DMA_CheckFifoParam+0x24>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	08004149 	.word	0x08004149
 800413c:	0800415b 	.word	0x0800415b
 8004140:	08004149 	.word	0x08004149
 8004144:	080041e3 	.word	0x080041e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d048      	beq.n	80041e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004158:	e045      	b.n	80041e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004162:	d142      	bne.n	80041ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004168:	e03f      	b.n	80041ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004172:	d123      	bne.n	80041bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	2b03      	cmp	r3, #3
 800417a:	d838      	bhi.n	80041ee <DMA_CheckFifoParam+0xda>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <DMA_CheckFifoParam+0x70>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004195 	.word	0x08004195
 8004188:	0800419b 	.word	0x0800419b
 800418c:	08004195 	.word	0x08004195
 8004190:	080041ad 	.word	0x080041ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
        break;
 8004198:	e030      	b.n	80041fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d025      	beq.n	80041f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041aa:	e022      	b.n	80041f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041b4:	d11f      	bne.n	80041f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041ba:	e01c      	b.n	80041f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d902      	bls.n	80041ca <DMA_CheckFifoParam+0xb6>
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d003      	beq.n	80041d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041c8:	e018      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
        break;
 80041ce:	e015      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00e      	beq.n	80041fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
    break;
 80041e0:	e00b      	b.n	80041fa <DMA_CheckFifoParam+0xe6>
        break;
 80041e2:	bf00      	nop
 80041e4:	e00a      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
        break;
 80041e6:	bf00      	nop
 80041e8:	e008      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
        break;
 80041ea:	bf00      	nop
 80041ec:	e006      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
        break;
 80041ee:	bf00      	nop
 80041f0:	e004      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
        break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
        break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <DMA_CheckFifoParam+0xe8>
    break;
 80041fa:	bf00      	nop
    }
  }

  return status;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop

0800420c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a38      	ldr	r2, [pc, #224]	; (8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d022      	beq.n	800426a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a36      	ldr	r2, [pc, #216]	; (8004304 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01d      	beq.n	800426a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a35      	ldr	r2, [pc, #212]	; (8004308 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d018      	beq.n	800426a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a33      	ldr	r2, [pc, #204]	; (800430c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a32      	ldr	r2, [pc, #200]	; (8004310 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00e      	beq.n	800426a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a30      	ldr	r2, [pc, #192]	; (8004314 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d009      	beq.n	800426a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a2d      	ldr	r2, [pc, #180]	; (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d101      	bne.n	800426e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800426e:	2300      	movs	r3, #0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	3b08      	subs	r3, #8
 800427c:	4a28      	ldr	r2, [pc, #160]	; (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4b26      	ldr	r3, [pc, #152]	; (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	461a      	mov	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a24      	ldr	r2, [pc, #144]	; (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004298:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2201      	movs	r2, #1
 80042a2:	409a      	lsls	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042a8:	e024      	b.n	80042f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3b10      	subs	r3, #16
 80042b2:	4a1e      	ldr	r2, [pc, #120]	; (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d806      	bhi.n	80042d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d902      	bls.n	80042d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3308      	adds	r3, #8
 80042d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a16      	ldr	r2, [pc, #88]	; (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80042e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2201      	movs	r2, #1
 80042ee:	409a      	lsls	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	58025408 	.word	0x58025408
 8004304:	5802541c 	.word	0x5802541c
 8004308:	58025430 	.word	0x58025430
 800430c:	58025444 	.word	0x58025444
 8004310:	58025458 	.word	0x58025458
 8004314:	5802546c 	.word	0x5802546c
 8004318:	58025480 	.word	0x58025480
 800431c:	58025494 	.word	0x58025494
 8004320:	cccccccd 	.word	0xcccccccd
 8004324:	16009600 	.word	0x16009600
 8004328:	58025880 	.word	0x58025880
 800432c:	aaaaaaab 	.word	0xaaaaaaab
 8004330:	400204b8 	.word	0x400204b8
 8004334:	4002040f 	.word	0x4002040f
 8004338:	10008200 	.word	0x10008200
 800433c:	40020880 	.word	0x40020880

08004340 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04a      	beq.n	80043ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d847      	bhi.n	80043ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d022      	beq.n	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a24      	ldr	r2, [pc, #144]	; (80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d01d      	beq.n	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a22      	ldr	r2, [pc, #136]	; (8004400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a21      	ldr	r2, [pc, #132]	; (8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1e      	ldr	r2, [pc, #120]	; (800440c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d101      	bne.n	80043b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043b0:	2300      	movs	r3, #0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4b17      	ldr	r3, [pc, #92]	; (8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	461a      	mov	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a15      	ldr	r2, [pc, #84]	; (800441c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043c8:	671a      	str	r2, [r3, #112]	; 0x70
 80043ca:	e009      	b.n	80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a11      	ldr	r2, [pc, #68]	; (8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	58025408 	.word	0x58025408
 80043fc:	5802541c 	.word	0x5802541c
 8004400:	58025430 	.word	0x58025430
 8004404:	58025444 	.word	0x58025444
 8004408:	58025458 	.word	0x58025458
 800440c:	5802546c 	.word	0x5802546c
 8004410:	58025480 	.word	0x58025480
 8004414:	58025494 	.word	0x58025494
 8004418:	1600963f 	.word	0x1600963f
 800441c:	58025940 	.word	0x58025940
 8004420:	1000823f 	.word	0x1000823f
 8004424:	40020940 	.word	0x40020940

08004428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004436:	4b89      	ldr	r3, [pc, #548]	; (800465c <HAL_GPIO_Init+0x234>)
 8004438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800443a:	e194      	b.n	8004766 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2101      	movs	r1, #1
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	fa01 f303 	lsl.w	r3, r1, r3
 8004448:	4013      	ands	r3, r2
 800444a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8186 	beq.w	8004760 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d00b      	beq.n	8004474 <HAL_GPIO_Init+0x4c>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d007      	beq.n	8004474 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004468:	2b11      	cmp	r3, #17
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b12      	cmp	r3, #18
 8004472:	d130      	bne.n	80044d6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044aa:	2201      	movs	r2, #1
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0201 	and.w	r2, r3, #1
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	2203      	movs	r2, #3
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_Init+0xee>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b12      	cmp	r3, #18
 8004514:	d123      	bne.n	800455e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	08da      	lsrs	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3208      	adds	r2, #8
 800451e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	220f      	movs	r2, #15
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	08da      	lsrs	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3208      	adds	r2, #8
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	2203      	movs	r2, #3
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0203 	and.w	r2, r3, #3
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80e0 	beq.w	8004760 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a0:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <HAL_GPIO_Init+0x238>)
 80045a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045a6:	4a2e      	ldr	r2, [pc, #184]	; (8004660 <HAL_GPIO_Init+0x238>)
 80045a8:	f043 0302 	orr.w	r3, r3, #2
 80045ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_GPIO_Init+0x238>)
 80045b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045be:	4a29      	ldr	r2, [pc, #164]	; (8004664 <HAL_GPIO_Init+0x23c>)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	089b      	lsrs	r3, r3, #2
 80045c4:	3302      	adds	r3, #2
 80045c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	220f      	movs	r2, #15
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a20      	ldr	r2, [pc, #128]	; (8004668 <HAL_GPIO_Init+0x240>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d052      	beq.n	8004690 <HAL_GPIO_Init+0x268>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1f      	ldr	r2, [pc, #124]	; (800466c <HAL_GPIO_Init+0x244>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d031      	beq.n	8004656 <HAL_GPIO_Init+0x22e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <HAL_GPIO_Init+0x248>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d02b      	beq.n	8004652 <HAL_GPIO_Init+0x22a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_GPIO_Init+0x24c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d025      	beq.n	800464e <HAL_GPIO_Init+0x226>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <HAL_GPIO_Init+0x250>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01f      	beq.n	800464a <HAL_GPIO_Init+0x222>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1b      	ldr	r2, [pc, #108]	; (800467c <HAL_GPIO_Init+0x254>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d019      	beq.n	8004646 <HAL_GPIO_Init+0x21e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <HAL_GPIO_Init+0x258>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_GPIO_Init+0x21a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <HAL_GPIO_Init+0x25c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00d      	beq.n	800463e <HAL_GPIO_Init+0x216>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <HAL_GPIO_Init+0x260>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <HAL_GPIO_Init+0x212>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <HAL_GPIO_Init+0x264>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_GPIO_Init+0x20e>
 8004632:	2309      	movs	r3, #9
 8004634:	e02d      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 8004636:	230a      	movs	r3, #10
 8004638:	e02b      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 800463a:	2308      	movs	r3, #8
 800463c:	e029      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 800463e:	2307      	movs	r3, #7
 8004640:	e027      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 8004642:	2306      	movs	r3, #6
 8004644:	e025      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 8004646:	2305      	movs	r3, #5
 8004648:	e023      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 800464a:	2304      	movs	r3, #4
 800464c:	e021      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 800464e:	2303      	movs	r3, #3
 8004650:	e01f      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 8004652:	2302      	movs	r3, #2
 8004654:	e01d      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 8004656:	2301      	movs	r3, #1
 8004658:	e01b      	b.n	8004692 <HAL_GPIO_Init+0x26a>
 800465a:	bf00      	nop
 800465c:	58000080 	.word	0x58000080
 8004660:	58024400 	.word	0x58024400
 8004664:	58000400 	.word	0x58000400
 8004668:	58020000 	.word	0x58020000
 800466c:	58020400 	.word	0x58020400
 8004670:	58020800 	.word	0x58020800
 8004674:	58020c00 	.word	0x58020c00
 8004678:	58021000 	.word	0x58021000
 800467c:	58021400 	.word	0x58021400
 8004680:	58021800 	.word	0x58021800
 8004684:	58021c00 	.word	0x58021c00
 8004688:	58022000 	.word	0x58022000
 800468c:	58022400 	.word	0x58022400
 8004690:	2300      	movs	r3, #0
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	f002 0203 	and.w	r2, r2, #3
 8004698:	0092      	lsls	r2, r2, #2
 800469a:	4093      	lsls	r3, r2
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4313      	orrs	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046a2:	4938      	ldr	r1, [pc, #224]	; (8004784 <HAL_GPIO_Init+0x35c>)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	089b      	lsrs	r3, r3, #2
 80046a8:	3302      	adds	r3, #2
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800472a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	f47f ae63 	bne.w	800443c <HAL_GPIO_Init+0x14>
  }
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	3724      	adds	r7, #36	; 0x24
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	58000400 	.word	0x58000400

08004788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
 8004794:	4613      	mov	r3, r2
 8004796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004798:	787b      	ldrb	r3, [r7, #1]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047a4:	e003      	b.n	80047ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047a6:	887b      	ldrh	r3, [r7, #2]
 80047a8:	041a      	lsls	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	619a      	str	r2, [r3, #24]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80047c4:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <HAL_HSEM_FastTake+0x2c>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3320      	adds	r3, #32
 80047ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ce:	4a07      	ldr	r2, [pc, #28]	; (80047ec <HAL_HSEM_FastTake+0x30>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d101      	bne.n	80047d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
}
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	58026400 	.word	0x58026400
 80047ec:	80000300 	.word	0x80000300

080047f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80047fa:	4906      	ldr	r1, [pc, #24]	; (8004814 <HAL_HSEM_Release+0x24>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	58026400 	.word	0x58026400

08004818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e07f      	b.n	800492a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fc f908 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004868:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004878:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d107      	bne.n	8004892 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	e006      	b.n	80048a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800489e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d104      	bne.n	80048b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <HAL_I2C_Init+0x11c>)
 80048be:	430b      	orrs	r3, r1
 80048c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	ea42 0103 	orr.w	r1, r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	021a      	lsls	r2, r3, #8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69d9      	ldr	r1, [r3, #28]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1a      	ldr	r2, [r3, #32]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	02008000 	.word	0x02008000

08004938 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
  }
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d010      	beq.n	80049b2 <HAL_I2C_ER_IRQHandler+0x46>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	09db      	lsrs	r3, r3, #7
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	0a9b      	lsrs	r3, r3, #10
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d010      	beq.n	80049e0 <HAL_I2C_ER_IRQHandler+0x74>
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	09db      	lsrs	r3, r3, #7
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f043 0208 	orr.w	r2, r3, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	0a5b      	lsrs	r3, r3, #9
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d010      	beq.n	8004a0e <HAL_I2C_ER_IRQHandler+0xa2>
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	09db      	lsrs	r3, r3, #7
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	f043 0202 	orr.w	r2, r3, #2
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a0c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 030b 	and.w	r3, r3, #11
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fc77 	bl	8005314 <I2C_ITError>
  }
}
 8004a26:	bf00      	nop
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	70fb      	strb	r3, [r7, #3]
 8004a62:	4613      	mov	r3, r2
 8004a64:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b086      	sub	sp, #24
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <I2C_Slave_ISR_IT+0x24>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e0ec      	b.n	8004cac <I2C_Slave_ISR_IT+0x1fe>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <I2C_Slave_ISR_IT+0x4c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004af2:	6939      	ldr	r1, [r7, #16]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f9bf 	bl	8004e78 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04d      	beq.n	8004ba2 <I2C_Slave_ISR_IT+0xf4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d047      	beq.n	8004ba2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d128      	bne.n	8004b6e <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b28      	cmp	r3, #40	; 0x28
 8004b26:	d108      	bne.n	8004b3a <I2C_Slave_ISR_IT+0x8c>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b2e:	d104      	bne.n	8004b3a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b30:	6939      	ldr	r1, [r7, #16]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fb98 	bl	8005268 <I2C_ITListenCplt>
 8004b38:	e032      	b.n	8004ba0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b29      	cmp	r3, #41	; 0x29
 8004b44:	d10e      	bne.n	8004b64 <I2C_Slave_ISR_IT+0xb6>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b4c:	d00a      	beq.n	8004b64 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2210      	movs	r2, #16
 8004b54:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 fcd3 	bl	8005502 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f92d 	bl	8004dbc <I2C_ITSlaveSeqCplt>
 8004b62:	e01d      	b.n	8004ba0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b6c:	e096      	b.n	8004c9c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2210      	movs	r2, #16
 8004b74:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	f043 0204 	orr.w	r2, r3, #4
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <I2C_Slave_ISR_IT+0xe4>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b8e:	f040 8085 	bne.w	8004c9c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	4619      	mov	r1, r3
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fbbb 	bl	8005314 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b9e:	e07d      	b.n	8004c9c <I2C_Slave_ISR_IT+0x1ee>
 8004ba0:	e07c      	b.n	8004c9c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d030      	beq.n	8004c10 <I2C_Slave_ISR_IT+0x162>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d02a      	beq.n	8004c10 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d018      	beq.n	8004bf6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d14f      	bne.n	8004ca0 <I2C_Slave_ISR_IT+0x1f2>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c06:	d04b      	beq.n	8004ca0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f8d7 	bl	8004dbc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004c0e:	e047      	b.n	8004ca0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	08db      	lsrs	r3, r3, #3
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	08db      	lsrs	r3, r3, #3
 8004c20:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c28:	6939      	ldr	r1, [r7, #16]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f842 	bl	8004cb4 <I2C_ITAddrCplt>
 8004c30:	e037      	b.n	8004ca2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d031      	beq.n	8004ca2 <I2C_Slave_ISR_IT+0x1f4>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02b      	beq.n	8004ca2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d018      	beq.n	8004c86 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c84:	e00d      	b.n	8004ca2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c8c:	d002      	beq.n	8004c94 <I2C_Slave_ISR_IT+0x1e6>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f891 	bl	8004dbc <I2C_ITSlaveSeqCplt>
 8004c9a:	e002      	b.n	8004ca2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004ca0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cca:	2b28      	cmp	r3, #40	; 0x28
 8004ccc:	d16a      	bne.n	8004da4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004cec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cfa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004d08:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d138      	bne.n	8004d84 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004d12:	897b      	ldrh	r3, [r7, #10]
 8004d14:	09db      	lsrs	r3, r3, #7
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	89bb      	ldrh	r3, [r7, #12]
 8004d1a:	4053      	eors	r3, r2
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f003 0306 	and.w	r3, r3, #6
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11c      	bne.n	8004d60 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004d26:	897b      	ldrh	r3, [r7, #10]
 8004d28:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d13b      	bne.n	8004db4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2208      	movs	r2, #8
 8004d48:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d52:	89ba      	ldrh	r2, [r7, #12]
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	4619      	mov	r1, r3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff fe7c 	bl	8004a56 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d5e:	e029      	b.n	8004db4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004d60:	893b      	ldrh	r3, [r7, #8]
 8004d62:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fc0c 	bl	8005586 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d76:	89ba      	ldrh	r2, [r7, #12]
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff fe6a 	bl	8004a56 <HAL_I2C_AddrCallback>
}
 8004d82:	e017      	b.n	8004db4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fbfc 	bl	8005586 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d96:	89ba      	ldrh	r2, [r7, #12]
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fe5a 	bl	8004a56 <HAL_I2C_AddrCallback>
}
 8004da2:	e007      	b.n	8004db4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2208      	movs	r2, #8
 8004daa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	0b9b      	lsrs	r3, r3, #14
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e00d      	b.n	8004e0e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	0bdb      	lsrs	r3, r3, #15
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e0c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b29      	cmp	r3, #41	; 0x29
 8004e18:	d112      	bne.n	8004e40 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2228      	movs	r2, #40	; 0x28
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2221      	movs	r2, #33	; 0x21
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e28:	2101      	movs	r1, #1
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fbab 	bl	8005586 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fdf8 	bl	8004a2e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e3e:	e017      	b.n	8004e70 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4a:	d111      	bne.n	8004e70 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2228      	movs	r2, #40	; 0x28
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2222      	movs	r2, #34	; 0x22
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fb92 	bl	8005586 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fde9 	bl	8004a42 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e94:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b21      	cmp	r3, #33	; 0x21
 8004ea2:	d002      	beq.n	8004eaa <I2C_ITSlaveCplt+0x32>
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	2b29      	cmp	r3, #41	; 0x29
 8004ea8:	d108      	bne.n	8004ebc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004eaa:	f248 0101 	movw	r1, #32769	; 0x8001
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fb69 	bl	8005586 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2221      	movs	r2, #33	; 0x21
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8004eba:	e00d      	b.n	8004ed8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b22      	cmp	r3, #34	; 0x22
 8004ec0:	d002      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x50>
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec6:	d107      	bne.n	8004ed8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ec8:	f248 0102 	movw	r1, #32770	; 0x8002
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fb5a 	bl	8005586 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2222      	movs	r2, #34	; 0x22
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6859      	ldr	r1, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b80      	ldr	r3, [pc, #512]	; (80050f4 <I2C_ITSlaveCplt+0x27c>)
 8004ef4:	400b      	ands	r3, r1
 8004ef6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fb02 	bl	8005502 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	0b9b      	lsrs	r3, r3, #14
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d07a      	beq.n	8005000 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 8111 	beq.w	8005146 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a73      	ldr	r2, [pc, #460]	; (80050f8 <I2C_ITSlaveCplt+0x280>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d059      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a71      	ldr	r2, [pc, #452]	; (80050fc <I2C_ITSlaveCplt+0x284>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d053      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a6f      	ldr	r2, [pc, #444]	; (8005100 <I2C_ITSlaveCplt+0x288>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d04d      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a6d      	ldr	r2, [pc, #436]	; (8005104 <I2C_ITSlaveCplt+0x28c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d047      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a6b      	ldr	r2, [pc, #428]	; (8005108 <I2C_ITSlaveCplt+0x290>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d041      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a69      	ldr	r2, [pc, #420]	; (800510c <I2C_ITSlaveCplt+0x294>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d03b      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a67      	ldr	r2, [pc, #412]	; (8005110 <I2C_ITSlaveCplt+0x298>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d035      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a65      	ldr	r2, [pc, #404]	; (8005114 <I2C_ITSlaveCplt+0x29c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d02f      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a63      	ldr	r2, [pc, #396]	; (8005118 <I2C_ITSlaveCplt+0x2a0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d029      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a61      	ldr	r2, [pc, #388]	; (800511c <I2C_ITSlaveCplt+0x2a4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d023      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a5f      	ldr	r2, [pc, #380]	; (8005120 <I2C_ITSlaveCplt+0x2a8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01d      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a5d      	ldr	r2, [pc, #372]	; (8005124 <I2C_ITSlaveCplt+0x2ac>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d017      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a5b      	ldr	r2, [pc, #364]	; (8005128 <I2C_ITSlaveCplt+0x2b0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d011      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a59      	ldr	r2, [pc, #356]	; (800512c <I2C_ITSlaveCplt+0x2b4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a57      	ldr	r2, [pc, #348]	; (8005130 <I2C_ITSlaveCplt+0x2b8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d005      	beq.n	8004fe4 <I2C_ITSlaveCplt+0x16c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a55      	ldr	r2, [pc, #340]	; (8005134 <I2C_ITSlaveCplt+0x2bc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d105      	bne.n	8004ff0 <I2C_ITSlaveCplt+0x178>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	e004      	b.n	8004ffa <I2C_ITSlaveCplt+0x182>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	8553      	strh	r3, [r2, #42]	; 0x2a
 8004ffe:	e0a2      	b.n	8005146 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	0bdb      	lsrs	r3, r3, #15
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 809c 	beq.w	8005146 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800501c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 808f 	beq.w	8005146 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a32      	ldr	r2, [pc, #200]	; (80050f8 <I2C_ITSlaveCplt+0x280>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d059      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a30      	ldr	r2, [pc, #192]	; (80050fc <I2C_ITSlaveCplt+0x284>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d053      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a2e      	ldr	r2, [pc, #184]	; (8005100 <I2C_ITSlaveCplt+0x288>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d04d      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <I2C_ITSlaveCplt+0x28c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d047      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2a      	ldr	r2, [pc, #168]	; (8005108 <I2C_ITSlaveCplt+0x290>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d041      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a28      	ldr	r2, [pc, #160]	; (800510c <I2C_ITSlaveCplt+0x294>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d03b      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a26      	ldr	r2, [pc, #152]	; (8005110 <I2C_ITSlaveCplt+0x298>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d035      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a24      	ldr	r2, [pc, #144]	; (8005114 <I2C_ITSlaveCplt+0x29c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d02f      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a22      	ldr	r2, [pc, #136]	; (8005118 <I2C_ITSlaveCplt+0x2a0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d029      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a20      	ldr	r2, [pc, #128]	; (800511c <I2C_ITSlaveCplt+0x2a4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d023      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <I2C_ITSlaveCplt+0x2a8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d01d      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <I2C_ITSlaveCplt+0x2ac>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d017      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1a      	ldr	r2, [pc, #104]	; (8005128 <I2C_ITSlaveCplt+0x2b0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d011      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a18      	ldr	r2, [pc, #96]	; (800512c <I2C_ITSlaveCplt+0x2b4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00b      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <I2C_ITSlaveCplt+0x2b8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d005      	beq.n	80050e8 <I2C_ITSlaveCplt+0x270>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a14      	ldr	r2, [pc, #80]	; (8005134 <I2C_ITSlaveCplt+0x2bc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d127      	bne.n	8005138 <I2C_ITSlaveCplt+0x2c0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	e026      	b.n	8005142 <I2C_ITSlaveCplt+0x2ca>
 80050f4:	fe00e800 	.word	0xfe00e800
 80050f8:	40020010 	.word	0x40020010
 80050fc:	40020028 	.word	0x40020028
 8005100:	40020040 	.word	0x40020040
 8005104:	40020058 	.word	0x40020058
 8005108:	40020070 	.word	0x40020070
 800510c:	40020088 	.word	0x40020088
 8005110:	400200a0 	.word	0x400200a0
 8005114:	400200b8 	.word	0x400200b8
 8005118:	40020410 	.word	0x40020410
 800511c:	40020428 	.word	0x40020428
 8005120:	40020440 	.word	0x40020440
 8005124:	40020458 	.word	0x40020458
 8005128:	40020470 	.word	0x40020470
 800512c:	40020488 	.word	0x40020488
 8005130:	400204a0 	.word	0x400204a0
 8005134:	400204b8 	.word	0x400204b8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	b29b      	uxth	r3, r3
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d020      	beq.n	8005194 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	f043 0204 	orr.w	r2, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d010      	beq.n	80051e2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8a4 	bl	8005314 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b28      	cmp	r3, #40	; 0x28
 80051d6:	d141      	bne.n	800525c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80051d8:	6979      	ldr	r1, [r7, #20]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f844 	bl	8005268 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051e0:	e03c      	b.n	800525c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051ea:	d014      	beq.n	8005216 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fde5 	bl	8004dbc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <I2C_ITSlaveCplt+0x3ec>)
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fc2f 	bl	8004a72 <HAL_I2C_ListenCpltCallback>
}
 8005214:	e022      	b.n	800525c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b22      	cmp	r3, #34	; 0x22
 8005220:	d10e      	bne.n	8005240 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fc02 	bl	8004a42 <HAL_I2C_SlaveRxCpltCallback>
}
 800523e:	e00d      	b.n	800525c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fbe9 	bl	8004a2e <HAL_I2C_SlaveTxCpltCallback>
}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	ffff0000 	.word	0xffff0000

08005268 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a26      	ldr	r2, [pc, #152]	; (8005310 <I2C_ITListenCplt+0xa8>)
 8005276:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	089b      	lsrs	r3, r3, #2
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d022      	beq.n	80052e6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d012      	beq.n	80052e6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	f043 0204 	orr.w	r2, r3, #4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80052e6:	f248 0103 	movw	r1, #32771	; 0x8003
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f94b 	bl	8005586 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2210      	movs	r2, #16
 80052f6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff fbb6 	bl	8004a72 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	ffff0000 	.word	0xffff0000

08005314 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a5d      	ldr	r2, [pc, #372]	; (80054a8 <I2C_ITError+0x194>)
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	2b28      	cmp	r3, #40	; 0x28
 800534a:	d005      	beq.n	8005358 <I2C_ITError+0x44>
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b29      	cmp	r3, #41	; 0x29
 8005350:	d002      	beq.n	8005358 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2b2a      	cmp	r3, #42	; 0x2a
 8005356:	d10b      	bne.n	8005370 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005358:	2103      	movs	r1, #3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f913 	bl	8005586 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2228      	movs	r2, #40	; 0x28
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a50      	ldr	r2, [pc, #320]	; (80054ac <I2C_ITError+0x198>)
 800536c:	635a      	str	r2, [r3, #52]	; 0x34
 800536e:	e011      	b.n	8005394 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005370:	f248 0103 	movw	r1, #32771	; 0x8003
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f906 	bl	8005586 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b60      	cmp	r3, #96	; 0x60
 8005384:	d003      	beq.n	800538e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d039      	beq.n	8005416 <I2C_ITError+0x102>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b11      	cmp	r3, #17
 80053a6:	d002      	beq.n	80053ae <I2C_ITError+0x9a>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b21      	cmp	r3, #33	; 0x21
 80053ac:	d133      	bne.n	8005416 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053bc:	d107      	bne.n	80053ce <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fdde 	bl	8003f94 <HAL_DMA_GetState>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d017      	beq.n	800540e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	4a33      	ldr	r2, [pc, #204]	; (80054b0 <I2C_ITError+0x19c>)
 80053e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fd fc60 	bl	8002cb8 <HAL_DMA_Abort_IT>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d04d      	beq.n	800549a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005408:	4610      	mov	r0, r2
 800540a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800540c:	e045      	b.n	800549a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f850 	bl	80054b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005414:	e041      	b.n	800549a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d039      	beq.n	8005492 <I2C_ITError+0x17e>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b12      	cmp	r3, #18
 8005422:	d002      	beq.n	800542a <I2C_ITError+0x116>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b22      	cmp	r3, #34	; 0x22
 8005428:	d133      	bne.n	8005492 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005438:	d107      	bne.n	800544a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005448:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	4618      	mov	r0, r3
 8005450:	f7fe fda0 	bl	8003f94 <HAL_DMA_GetState>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	d017      	beq.n	800548a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <I2C_ITError+0x19c>)
 8005460:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	4618      	mov	r0, r3
 8005470:	f7fd fc22 	bl	8002cb8 <HAL_DMA_Abort_IT>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d011      	beq.n	800549e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005484:	4610      	mov	r0, r2
 8005486:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005488:	e009      	b.n	800549e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f812 	bl	80054b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005490:	e005      	b.n	800549e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f80e 	bl	80054b4 <I2C_TreatErrorCallback>
  }
}
 8005498:	e002      	b.n	80054a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800549e:	bf00      	nop
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	ffff0000 	.word	0xffff0000
 80054ac:	08004aaf 	.word	0x08004aaf
 80054b0:	0800554b 	.word	0x0800554b

080054b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b60      	cmp	r3, #96	; 0x60
 80054c6:	d10e      	bne.n	80054e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff fadb 	bl	8004a9a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054e4:	e009      	b.n	80054fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff fac6 	bl	8004a86 <HAL_I2C_ErrorCallback>
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	d103      	bne.n	8005520 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2200      	movs	r2, #0
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	d007      	beq.n	800553e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	619a      	str	r2, [r3, #24]
  }
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	2200      	movs	r2, #0
 8005566:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005574:	2200      	movs	r2, #0
 8005576:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff ff9b 	bl	80054b4 <I2C_TreatErrorCallback>
}
 800557e:	bf00      	nop
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005596:	887b      	ldrh	r3, [r7, #2]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00f      	beq.n	80055c0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80055a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055b4:	2b28      	cmp	r3, #40	; 0x28
 80055b6:	d003      	beq.n	80055c0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80055be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80055c0:	887b      	ldrh	r3, [r7, #2]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00f      	beq.n	80055ea <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80055d0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055de:	2b28      	cmp	r3, #40	; 0x28
 80055e0:	d003      	beq.n	80055ea <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80055e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80055ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	da03      	bge.n	80055fa <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80055f8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80055fa:	887b      	ldrh	r3, [r7, #2]
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d103      	bne.n	8005608 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005606:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005608:	887b      	ldrh	r3, [r7, #2]
 800560a:	2b20      	cmp	r3, #32
 800560c:	d103      	bne.n	8005616 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f043 0320 	orr.w	r3, r3, #32
 8005614:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005616:	887b      	ldrh	r3, [r7, #2]
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d103      	bne.n	8005624 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005622:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	43da      	mvns	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	400a      	ands	r2, r1
 8005634:	601a      	str	r2, [r3, #0]
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b20      	cmp	r3, #32
 8005656:	d138      	bne.n	80056ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005662:	2302      	movs	r3, #2
 8005664:	e032      	b.n	80056cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2224      	movs	r2, #36	; 0x24
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0201 	bic.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005694:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6819      	ldr	r1, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0201 	orr.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e000      	b.n	80056cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056ca:	2302      	movs	r3, #2
  }
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d139      	bne.n	8005762 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e033      	b.n	8005764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800572a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005772:	b08f      	sub	sp, #60	; 0x3c
 8005774:	af0a      	add	r7, sp, #40	; 0x28
 8005776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e116      	b.n	80059b0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f00c fec5 	bl	801252c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2203      	movs	r2, #3
 80057a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f009 fb58 	bl	800ee76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	687e      	ldr	r6, [r7, #4]
 80057ce:	466d      	mov	r5, sp
 80057d0:	f106 0410 	add.w	r4, r6, #16
 80057d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80057e4:	1d33      	adds	r3, r6, #4
 80057e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057e8:	6838      	ldr	r0, [r7, #0]
 80057ea:	f009 fa23 	bl	800ec34 <USB_CoreInit>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0d7      	b.n	80059b0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f009 fb46 	bl	800ee98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]
 8005810:	e04a      	b.n	80058a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	333d      	adds	r3, #61	; 0x3d
 8005822:	2201      	movs	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005826:	7bfa      	ldrb	r2, [r7, #15]
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	333c      	adds	r3, #60	; 0x3c
 8005836:	7bfa      	ldrb	r2, [r7, #15]
 8005838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800583a:	7bfa      	ldrb	r2, [r7, #15]
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	b298      	uxth	r0, r3
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	3342      	adds	r3, #66	; 0x42
 800584e:	4602      	mov	r2, r0
 8005850:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	333f      	adds	r3, #63	; 0x3f
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	3344      	adds	r3, #68	; 0x44
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800587a:	7bfa      	ldrb	r2, [r7, #15]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	3348      	adds	r3, #72	; 0x48
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800588e:	7bfa      	ldrb	r2, [r7, #15]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3350      	adds	r3, #80	; 0x50
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	3301      	adds	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
 80058a8:	7bfa      	ldrb	r2, [r7, #15]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d3af      	bcc.n	8005812 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
 80058b6:	e044      	b.n	8005942 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058b8:	7bfa      	ldrb	r2, [r7, #15]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058ce:	7bfa      	ldrb	r2, [r7, #15]
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80058e0:	7bfa      	ldrb	r2, [r7, #15]
 80058e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058e4:	7bfa      	ldrb	r2, [r7, #15]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058fa:	7bfa      	ldrb	r2, [r7, #15]
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005910:	7bfa      	ldrb	r2, [r7, #15]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005926:	7bfa      	ldrb	r2, [r7, #15]
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	3301      	adds	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	429a      	cmp	r2, r3
 800594a:	d3b5      	bcc.n	80058b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	687e      	ldr	r6, [r7, #4]
 8005954:	466d      	mov	r5, sp
 8005956:	f106 0410 	add.w	r4, r6, #16
 800595a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800595c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800595e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005966:	e885 0003 	stmia.w	r5, {r0, r1}
 800596a:	1d33      	adds	r3, r6, #4
 800596c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800596e:	6838      	ldr	r0, [r7, #0]
 8005970:	f009 fabc 	bl	800eeec <USB_DevInit>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e014      	b.n	80059b0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b01      	cmp	r3, #1
 800599c:	d102      	bne.n	80059a4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 f892 	bl	8006ac8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f00a fb3c 	bl	8010026 <USB_DevDisconnect>

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_PCD_Start+0x1c>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e020      	b.n	8005a16 <HAL_PCD_Start+0x5e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d109      	bne.n	80059f8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d005      	beq.n	80059f8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f009 fa29 	bl	800ee54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f00a faec 	bl	800ffe4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a1e:	b590      	push	{r4, r7, lr}
 8005a20:	b08d      	sub	sp, #52	; 0x34
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f00a fbaa 	bl	801018e <USB_GetMode>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 83ca 	bne.w	80061d6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f00a fb0e 	bl	8010068 <USB_ReadInterrupts>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 83c0 	beq.w	80061d4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f00a fb05 	bl	8010068 <USB_ReadInterrupts>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d107      	bne.n	8005a78 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f002 0202 	and.w	r2, r2, #2
 8005a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f00a faf3 	bl	8010068 <USB_ReadInterrupts>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d161      	bne.n	8005b50 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0210 	bic.w	r2, r2, #16
 8005a9a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3304      	adds	r3, #4
 8005aba:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	0c5b      	lsrs	r3, r3, #17
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d124      	bne.n	8005b12 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d035      	beq.n	8005b40 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6a38      	ldr	r0, [r7, #32]
 8005ae8:	f00a f92a 	bl	800fd40 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	091b      	lsrs	r3, r3, #4
 8005af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005af8:	441a      	add	r2, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b0a:	441a      	add	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	619a      	str	r2, [r3, #24]
 8005b10:	e016      	b.n	8005b40 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	0c5b      	lsrs	r3, r3, #17
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d110      	bne.n	8005b40 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b24:	2208      	movs	r2, #8
 8005b26:	4619      	mov	r1, r3
 8005b28:	6a38      	ldr	r0, [r7, #32]
 8005b2a:	f00a f909 	bl	800fd40 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b3a:	441a      	add	r2, r3
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0210 	orr.w	r2, r2, #16
 8005b4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f00a fa87 	bl	8010068 <USB_ReadInterrupts>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b64:	d16e      	bne.n	8005c44 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f00a fa8d 	bl	801008e <USB_ReadDevAllOutEpInterrupt>
 8005b74:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005b76:	e062      	b.n	8005c3e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d057      	beq.n	8005c32 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f00a fab2 	bl	80100f6 <USB_ReadDevOutEPInterrupt>
 8005b92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	461a      	mov	r2, r3
 8005bac:	2301      	movs	r3, #1
 8005bae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fdde 	bl	8006774 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00c      	beq.n	8005bdc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fed8 	bl	800698c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2320      	movs	r3, #32
 8005c12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c30:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	3301      	adds	r3, #1
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d199      	bne.n	8005b78 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f00a fa0d 	bl	8010068 <USB_ReadInterrupts>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c58:	f040 80c0 	bne.w	8005ddc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f00a fa2e 	bl	80100c2 <USB_ReadDevAllInEpInterrupt>
 8005c66:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005c6c:	e0b2      	b.n	8005dd4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80a7 	beq.w	8005dc8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f00a fa54 	bl	8010132 <USB_ReadDevInEPInterrupt>
 8005c8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d057      	beq.n	8005d46 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	69f9      	ldr	r1, [r7, #28]
 8005cb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2301      	movs	r3, #1
 8005cca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d132      	bne.n	8005d3a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd8:	4613      	mov	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	3348      	adds	r3, #72	; 0x48
 8005ce4:	6819      	ldr	r1, [r3, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cea:	4613      	mov	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	1a9b      	subs	r3, r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4403      	add	r3, r0
 8005cf4:	3344      	adds	r3, #68	; 0x44
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4419      	add	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4403      	add	r3, r0
 8005d08:	3348      	adds	r3, #72	; 0x48
 8005d0a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d113      	bne.n	8005d3a <HAL_PCD_IRQHandler+0x31c>
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d16:	4613      	mov	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	3350      	adds	r3, #80	; 0x50
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d108      	bne.n	8005d3a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d32:	461a      	mov	r2, r3
 8005d34:	2101      	movs	r1, #1
 8005d36:	f00a fa5d 	bl	80101f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f00c fc90 	bl	8012666 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2308      	movs	r3, #8
 8005d60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2310      	movs	r3, #16
 8005d7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d94:	461a      	mov	r2, r3
 8005d96:	2340      	movs	r3, #64	; 0x40
 8005d98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	461a      	mov	r2, r3
 8005db2:	2302      	movs	r3, #2
 8005db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fc48 	bl	8006658 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	3301      	adds	r3, #1
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f47f af49 	bne.w	8005c6e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f00a f941 	bl	8010068 <USB_ReadInterrupts>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df0:	d122      	bne.n	8005e38 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d108      	bne.n	8005e22 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e18:	2100      	movs	r1, #0
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fe78 	bl	8006b10 <HAL_PCDEx_LPM_Callback>
 8005e20:	e002      	b.n	8005e28 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f00c fc96 	bl	8012754 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f00a f913 	bl	8010068 <USB_ReadInterrupts>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4c:	d112      	bne.n	8005e74 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d102      	bne.n	8005e64 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f00c fc52 	bl	8012708 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f00a f8f5 	bl	8010068 <USB_ReadInterrupts>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e88:	d121      	bne.n	8005ece <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695a      	ldr	r2, [r3, #20]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005e98:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d111      	bne.n	8005ec8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb2:	089b      	lsrs	r3, r3, #2
 8005eb4:	f003 020f 	and.w	r2, r3, #15
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fe25 	bl	8006b10 <HAL_PCDEx_LPM_Callback>
 8005ec6:	e002      	b.n	8005ece <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f00c fc1d 	bl	8012708 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f00a f8c8 	bl	8010068 <USB_ReadInterrupts>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	f040 80c7 	bne.w	8006074 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2110      	movs	r1, #16
 8005f00:	4618      	mov	r0, r3
 8005f02:	f009 f951 	bl	800f1a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f06:	2300      	movs	r3, #0
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f0a:	e056      	b.n	8005fba <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f3e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fb2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d3a3      	bcc.n	8005f0c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005fd6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d016      	beq.n	800600e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff0:	f043 030b 	orr.w	r3, r3, #11
 8005ff4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006006:	f043 030b 	orr.w	r3, r3, #11
 800600a:	6453      	str	r3, [r2, #68]	; 0x44
 800600c:	e015      	b.n	800603a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	695a      	ldr	r2, [r3, #20]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601c:	4619      	mov	r1, r3
 800601e:	f242 032b 	movw	r3, #8235	; 0x202b
 8006022:	4313      	orrs	r3, r2
 8006024:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006034:	f043 030b 	orr.w	r3, r3, #11
 8006038:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006048:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800604c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800605e:	461a      	mov	r2, r3
 8006060:	f00a f8c8 	bl	80101f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f009 fff5 	bl	8010068 <USB_ReadInterrupts>
 800607e:	4603      	mov	r3, r0
 8006080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006088:	d124      	bne.n	80060d4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f00a f88c 	bl	80101ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	f009 f8e6 	bl	800f26a <USB_GetDevSpeed>
 800609e:	4603      	mov	r3, r0
 80060a0:	461a      	mov	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681c      	ldr	r4, [r3, #0]
 80060aa:	f001 fce7 	bl	8007a7c <HAL_RCC_GetHCLKFreq>
 80060ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	4620      	mov	r0, r4
 80060ba:	f008 fe29 	bl	800ed10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f00c faf9 	bl	80126b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80060d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f009 ffc5 	bl	8010068 <USB_ReadInterrupts>
 80060de:	4603      	mov	r3, r0
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d10a      	bne.n	80060fe <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f00c fad6 	bl	801269a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695a      	ldr	r2, [r3, #20]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f002 0208 	and.w	r2, r2, #8
 80060fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f009 ffb0 	bl	8010068 <USB_ReadInterrupts>
 8006108:	4603      	mov	r3, r0
 800610a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800610e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006112:	d10f      	bne.n	8006134 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	b2db      	uxtb	r3, r3
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f00c fb38 	bl	8012794 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f009 ff95 	bl	8010068 <USB_ReadInterrupts>
 800613e:	4603      	mov	r3, r0
 8006140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006148:	d10f      	bne.n	800616a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	b2db      	uxtb	r3, r3
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f00c fb0b 	bl	8012770 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f009 ff7a 	bl	8010068 <USB_ReadInterrupts>
 8006174:	4603      	mov	r3, r0
 8006176:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d10a      	bne.n	8006196 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f00c fb19 	bl	80127b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695a      	ldr	r2, [r3, #20]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f009 ff64 	bl	8010068 <USB_ReadInterrupts>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d115      	bne.n	80061d6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f00c fb09 	bl	80127d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6859      	ldr	r1, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	e000      	b.n	80061d6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80061d4:	bf00      	nop
    }
  }
}
 80061d6:	3734      	adds	r7, #52	; 0x34
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd90      	pop	{r4, r7, pc}

080061dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_PCD_SetAddress+0x1a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e013      	b.n	800621e <HAL_PCD_SetAddress+0x42>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	78fa      	ldrb	r2, [r7, #3]
 800620c:	4611      	mov	r1, r2
 800620e:	4618      	mov	r0, r3
 8006210:	f009 fec2 	bl	800ff98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	4608      	mov	r0, r1
 8006230:	4611      	mov	r1, r2
 8006232:	461a      	mov	r2, r3
 8006234:	4603      	mov	r3, r0
 8006236:	70fb      	strb	r3, [r7, #3]
 8006238:	460b      	mov	r3, r1
 800623a:	803b      	strh	r3, [r7, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da0f      	bge.n	800626c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	f003 020f 	and.w	r2, r3, #15
 8006252:	4613      	mov	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	3338      	adds	r3, #56	; 0x38
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	4413      	add	r3, r2
 8006260:	3304      	adds	r3, #4
 8006262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	705a      	strb	r2, [r3, #1]
 800626a:	e00f      	b.n	800628c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	f003 020f 	and.w	r2, r3, #15
 8006272:	4613      	mov	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	4413      	add	r3, r2
 8006282:	3304      	adds	r3, #4
 8006284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	b2da      	uxtb	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006298:	883a      	ldrh	r2, [r7, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	78ba      	ldrb	r2, [r7, #2]
 80062a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062b6:	78bb      	ldrb	r3, [r7, #2]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d102      	bne.n	80062c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_PCD_EP_Open+0xaa>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e00e      	b.n	80062ee <HAL_PCD_EP_Open+0xc8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68f9      	ldr	r1, [r7, #12]
 80062de:	4618      	mov	r0, r3
 80062e0:	f008 ffe8 	bl	800f2b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80062ec:	7afb      	ldrb	r3, [r7, #11]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006306:	2b00      	cmp	r3, #0
 8006308:	da0f      	bge.n	800632a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	f003 020f 	and.w	r2, r3, #15
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	3338      	adds	r3, #56	; 0x38
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	3304      	adds	r3, #4
 8006320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	705a      	strb	r2, [r3, #1]
 8006328:	e00f      	b.n	800634a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	f003 020f 	and.w	r2, r3, #15
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4413      	add	r3, r2
 8006340:	3304      	adds	r3, #4
 8006342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_PCD_EP_Close+0x6e>
 8006360:	2302      	movs	r3, #2
 8006362:	e00e      	b.n	8006382 <HAL_PCD_EP_Close+0x8c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68f9      	ldr	r1, [r7, #12]
 8006372:	4618      	mov	r0, r3
 8006374:	f009 f826 	bl	800f3c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b086      	sub	sp, #24
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
 8006396:	460b      	mov	r3, r1
 8006398:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800639a:	7afb      	ldrb	r3, [r7, #11]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	4613      	mov	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	3304      	adds	r3, #4
 80063b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2200      	movs	r2, #0
 80063c4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2200      	movs	r2, #0
 80063ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063cc:	7afb      	ldrb	r3, [r7, #11]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d102      	bne.n	80063e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063e6:	7afb      	ldrb	r3, [r7, #11]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d109      	bne.n	8006404 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	6979      	ldr	r1, [r7, #20]
 80063fe:	f009 fb09 	bl	800fa14 <USB_EP0StartXfer>
 8006402:	e008      	b.n	8006416 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	f009 f8b3 	bl	800f57c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	f003 020f 	and.w	r2, r3, #15
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006442:	681b      	ldr	r3, [r3, #0]
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	460b      	mov	r3, r1
 800645e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006460:	7afb      	ldrb	r3, [r7, #11]
 8006462:	f003 020f 	and.w	r2, r3, #15
 8006466:	4613      	mov	r3, r2
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	1a9b      	subs	r3, r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	3338      	adds	r3, #56	; 0x38
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	3304      	adds	r3, #4
 8006476:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2201      	movs	r2, #1
 800648e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006490:	7afb      	ldrb	r3, [r7, #11]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	b2da      	uxtb	r2, r3
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d102      	bne.n	80064aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064aa:	7afb      	ldrb	r3, [r7, #11]
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d109      	bne.n	80064c8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	6979      	ldr	r1, [r7, #20]
 80064c2:	f009 faa7 	bl	800fa14 <USB_EP0StartXfer>
 80064c6:	e008      	b.n	80064da <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	6979      	ldr	r1, [r7, #20]
 80064d6:	f009 f851 	bl	800f57c <USB_EPStartXfer>
  }

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	f003 020f 	and.w	r2, r3, #15
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d901      	bls.n	8006502 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e050      	b.n	80065a4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006506:	2b00      	cmp	r3, #0
 8006508:	da0f      	bge.n	800652a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	f003 020f 	and.w	r2, r3, #15
 8006510:	4613      	mov	r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	3338      	adds	r3, #56	; 0x38
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	3304      	adds	r3, #4
 8006520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	705a      	strb	r2, [r3, #1]
 8006528:	e00d      	b.n	8006546 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	4613      	mov	r3, r2
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	4413      	add	r3, r2
 800653c:	3304      	adds	r3, #4
 800653e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	b2da      	uxtb	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_PCD_EP_SetStall+0x82>
 8006562:	2302      	movs	r3, #2
 8006564:	e01e      	b.n	80065a4 <HAL_PCD_EP_SetStall+0xc0>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	4618      	mov	r0, r3
 8006576:	f009 fc3b 	bl	800fdf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	b2d9      	uxtb	r1, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006594:	461a      	mov	r2, r3
 8006596:	f009 fe2d 	bl	80101f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	f003 020f 	and.w	r2, r3, #15
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d901      	bls.n	80065ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e042      	b.n	8006650 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	da0f      	bge.n	80065f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	f003 020f 	and.w	r2, r3, #15
 80065d8:	4613      	mov	r3, r2
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	3338      	adds	r3, #56	; 0x38
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4413      	add	r3, r2
 80065e6:	3304      	adds	r3, #4
 80065e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	705a      	strb	r2, [r3, #1]
 80065f0:	e00f      	b.n	8006612 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 020f 	and.w	r2, r3, #15
 80065f8:	4613      	mov	r3, r2
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	4413      	add	r3, r2
 8006608:	3304      	adds	r3, #4
 800660a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006618:	78fb      	ldrb	r3, [r7, #3]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	b2da      	uxtb	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_PCD_EP_ClrStall+0x86>
 800662e:	2302      	movs	r3, #2
 8006630:	e00e      	b.n	8006650 <HAL_PCD_EP_ClrStall+0xa4>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	4618      	mov	r0, r3
 8006642:	f009 fc43 	bl	800fecc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af02      	add	r7, sp, #8
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	3338      	adds	r3, #56	; 0x38
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4413      	add	r3, r2
 800667c:	3304      	adds	r3, #4
 800667e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	429a      	cmp	r2, r3
 800668a:	d901      	bls.n	8006690 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e06c      	b.n	800676a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d902      	bls.n	80066ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	3303      	adds	r3, #3
 80066b0:	089b      	lsrs	r3, r3, #2
 80066b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066b4:	e02b      	b.n	800670e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d902      	bls.n	80066d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	3303      	adds	r3, #3
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68d9      	ldr	r1, [r3, #12]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4603      	mov	r3, r0
 80066f0:	6978      	ldr	r0, [r7, #20]
 80066f2:	f009 fae7 	bl	800fcc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	441a      	add	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	441a      	add	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	b29b      	uxth	r3, r3
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	429a      	cmp	r2, r3
 8006722:	d809      	bhi.n	8006738 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800672c:	429a      	cmp	r2, r3
 800672e:	d203      	bcs.n	8006738 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1be      	bne.n	80066b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	695a      	ldr	r2, [r3, #20]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	429a      	cmp	r2, r3
 8006742:	d811      	bhi.n	8006768 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	2201      	movs	r2, #1
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	43db      	mvns	r3, r3
 800675e:	6939      	ldr	r1, [r7, #16]
 8006760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006764:	4013      	ands	r3, r2
 8006766:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3720      	adds	r7, #32
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	333c      	adds	r3, #60	; 0x3c
 800678c:	3304      	adds	r3, #4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	f040 80a0 	bne.w	80068ec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d015      	beq.n	80067e2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a72      	ldr	r2, [pc, #456]	; (8006984 <PCD_EP_OutXfrComplete_int+0x210>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f240 80dd 	bls.w	800697a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80d7 	beq.w	800697a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d8:	461a      	mov	r2, r3
 80067da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067de:	6093      	str	r3, [r2, #8]
 80067e0:	e0cb      	b.n	800697a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d009      	beq.n	8006800 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	461a      	mov	r2, r3
 80067fa:	2320      	movs	r3, #32
 80067fc:	6093      	str	r3, [r2, #8]
 80067fe:	e0bc      	b.n	800697a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 80b7 	bne.w	800697a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a5d      	ldr	r2, [pc, #372]	; (8006984 <PCD_EP_OutXfrComplete_int+0x210>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d90f      	bls.n	8006834 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	461a      	mov	r2, r3
 800682c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006830:	6093      	str	r3, [r2, #8]
 8006832:	e0a2      	b.n	800697a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006846:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	0159      	lsls	r1, r3, #5
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	440b      	add	r3, r1
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800685a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4403      	add	r3, r0
 800686a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800686e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	1a9b      	subs	r3, r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	4613      	mov	r3, r2
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4403      	add	r3, r0
 8006892:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4419      	add	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4403      	add	r3, r0
 80068a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068ac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d114      	bne.n	80068de <PCD_EP_OutXfrComplete_int+0x16a>
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	1a9b      	subs	r3, r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d108      	bne.n	80068de <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068d6:	461a      	mov	r2, r3
 80068d8:	2101      	movs	r1, #1
 80068da:	f009 fc8b 	bl	80101f4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f00b fea3 	bl	8012630 <HAL_PCD_DataOutStageCallback>
 80068ea:	e046      	b.n	800697a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a26      	ldr	r2, [pc, #152]	; (8006988 <PCD_EP_OutXfrComplete_int+0x214>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d124      	bne.n	800693e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	461a      	mov	r2, r3
 800690c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006910:	6093      	str	r3, [r2, #8]
 8006912:	e032      	b.n	800697a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d008      	beq.n	8006930 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692a:	461a      	mov	r2, r3
 800692c:	2320      	movs	r3, #32
 800692e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f00b fe7a 	bl	8012630 <HAL_PCD_DataOutStageCallback>
 800693c:	e01d      	b.n	800697a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d114      	bne.n	800696e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d108      	bne.n	800696e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006966:	461a      	mov	r2, r3
 8006968:	2100      	movs	r1, #0
 800696a:	f009 fc43 	bl	80101f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f00b fe5b 	bl	8012630 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	4f54300a 	.word	0x4f54300a
 8006988:	4f54310a 	.word	0x4f54310a

0800698c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	333c      	adds	r3, #60	; 0x3c
 80069a4:	3304      	adds	r3, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <PCD_EP_OutSetupPacket_int+0x88>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d90e      	bls.n	80069e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d8:	461a      	mov	r2, r3
 80069da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f00b fe13 	bl	801260c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <PCD_EP_OutSetupPacket_int+0x88>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d90c      	bls.n	8006a08 <PCD_EP_OutSetupPacket_int+0x7c>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d108      	bne.n	8006a08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a00:	461a      	mov	r2, r3
 8006a02:	2101      	movs	r1, #1
 8006a04:	f009 fbf6 	bl	80101f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	4f54300a 	.word	0x4f54300a

08006a18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
 8006a24:	4613      	mov	r3, r2
 8006a26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d107      	bne.n	8006a46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a36:	883b      	ldrh	r3, [r7, #0]
 8006a38:	0419      	lsls	r1, r3, #16
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	629a      	str	r2, [r3, #40]	; 0x28
 8006a44:	e028      	b.n	8006a98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	0c1b      	lsrs	r3, r3, #16
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a54:	2300      	movs	r3, #0
 8006a56:	73fb      	strb	r3, [r7, #15]
 8006a58:	e00d      	b.n	8006a76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	3340      	adds	r3, #64	; 0x40
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	3301      	adds	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
 8006a76:	7bfa      	ldrb	r2, [r7, #15]
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d3ec      	bcc.n	8006a5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a80:	883b      	ldrh	r3, [r7, #0]
 8006a82:	0418      	lsls	r0, r3, #16
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6819      	ldr	r1, [r3, #0]
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	4302      	orrs	r2, r0
 8006a90:	3340      	adds	r3, #64	; 0x40
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	887a      	ldrh	r2, [r7, #2]
 8006ab8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <HAL_PCDEx_ActivateLPM+0x44>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	10000003 	.word	0x10000003

08006b10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006b30:	4b29      	ldr	r3, [pc, #164]	; (8006bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	2b06      	cmp	r3, #6
 8006b3a:	d00a      	beq.n	8006b52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b3c:	4b26      	ldr	r3, [pc, #152]	; (8006bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d001      	beq.n	8006b4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e040      	b.n	8006bd0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	e03e      	b.n	8006bd0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b52:	4b21      	ldr	r3, [pc, #132]	; (8006bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006b5a:	491f      	ldr	r1, [pc, #124]	; (8006bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b62:	f7fb f867 	bl	8001c34 <HAL_GetTick>
 8006b66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b68:	e009      	b.n	8006b7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b6a:	f7fb f863 	bl	8001c34 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b78:	d901      	bls.n	8006b7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e028      	b.n	8006bd0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b7e:	4b16      	ldr	r3, [pc, #88]	; (8006bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8a:	d1ee      	bne.n	8006b6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b1e      	cmp	r3, #30
 8006b90:	d008      	beq.n	8006ba4 <HAL_PWREx_ConfigSupply+0x7c>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b2e      	cmp	r3, #46	; 0x2e
 8006b96:	d005      	beq.n	8006ba4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b1d      	cmp	r3, #29
 8006b9c:	d002      	beq.n	8006ba4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b2d      	cmp	r3, #45	; 0x2d
 8006ba2:	d114      	bne.n	8006bce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006ba4:	f7fb f846 	bl	8001c34 <HAL_GetTick>
 8006ba8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006baa:	e009      	b.n	8006bc0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bac:	f7fb f842 	bl	8001c34 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bba:	d901      	bls.n	8006bc0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e007      	b.n	8006bd0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bcc:	d1ee      	bne.n	8006bac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	58024800 	.word	0x58024800

08006bdc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4a04      	ldr	r2, [pc, #16]	; (8006bf8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bea:	60d3      	str	r3, [r2, #12]
}
 8006bec:	bf00      	nop
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	58024800 	.word	0x58024800

08006bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08c      	sub	sp, #48	; 0x30
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e3ff      	b.n	800740e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8087 	beq.w	8006d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c1c:	4b99      	ldr	r3, [pc, #612]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c26:	4b97      	ldr	r3, [pc, #604]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	2b10      	cmp	r3, #16
 8006c30:	d007      	beq.n	8006c42 <HAL_RCC_OscConfig+0x46>
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	2b18      	cmp	r3, #24
 8006c36:	d110      	bne.n	8006c5a <HAL_RCC_OscConfig+0x5e>
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d10b      	bne.n	8006c5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c42:	4b90      	ldr	r3, [pc, #576]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d06c      	beq.n	8006d28 <HAL_RCC_OscConfig+0x12c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d168      	bne.n	8006d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e3d9      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c62:	d106      	bne.n	8006c72 <HAL_RCC_OscConfig+0x76>
 8006c64:	4b87      	ldr	r3, [pc, #540]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a86      	ldr	r2, [pc, #536]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	e02e      	b.n	8006cd0 <HAL_RCC_OscConfig+0xd4>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10c      	bne.n	8006c94 <HAL_RCC_OscConfig+0x98>
 8006c7a:	4b82      	ldr	r3, [pc, #520]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a81      	ldr	r2, [pc, #516]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	4b7f      	ldr	r3, [pc, #508]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a7e      	ldr	r2, [pc, #504]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	e01d      	b.n	8006cd0 <HAL_RCC_OscConfig+0xd4>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c9c:	d10c      	bne.n	8006cb8 <HAL_RCC_OscConfig+0xbc>
 8006c9e:	4b79      	ldr	r3, [pc, #484]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a78      	ldr	r2, [pc, #480]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	4b76      	ldr	r3, [pc, #472]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a75      	ldr	r2, [pc, #468]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e00b      	b.n	8006cd0 <HAL_RCC_OscConfig+0xd4>
 8006cb8:	4b72      	ldr	r3, [pc, #456]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a71      	ldr	r2, [pc, #452]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	4b6f      	ldr	r3, [pc, #444]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a6e      	ldr	r2, [pc, #440]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d013      	beq.n	8006d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd8:	f7fa ffac 	bl	8001c34 <HAL_GetTick>
 8006cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ce0:	f7fa ffa8 	bl	8001c34 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b64      	cmp	r3, #100	; 0x64
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e38d      	b.n	800740e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cf2:	4b64      	ldr	r3, [pc, #400]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f0      	beq.n	8006ce0 <HAL_RCC_OscConfig+0xe4>
 8006cfe:	e014      	b.n	8006d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d00:	f7fa ff98 	bl	8001c34 <HAL_GetTick>
 8006d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d08:	f7fa ff94 	bl	8001c34 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b64      	cmp	r3, #100	; 0x64
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e379      	b.n	800740e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d1a:	4b5a      	ldr	r3, [pc, #360]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f0      	bne.n	8006d08 <HAL_RCC_OscConfig+0x10c>
 8006d26:	e000      	b.n	8006d2a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 80ae 	beq.w	8006e94 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d38:	4b52      	ldr	r3, [pc, #328]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d42:	4b50      	ldr	r3, [pc, #320]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_RCC_OscConfig+0x162>
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	2b18      	cmp	r3, #24
 8006d52:	d13a      	bne.n	8006dca <HAL_RCC_OscConfig+0x1ce>
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d135      	bne.n	8006dca <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d5e:	4b49      	ldr	r3, [pc, #292]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <HAL_RCC_OscConfig+0x17a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e34b      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d76:	f7fa ff8d 	bl	8001c94 <HAL_GetREVID>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d817      	bhi.n	8006db4 <HAL_RCC_OscConfig+0x1b8>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d108      	bne.n	8006d9e <HAL_RCC_OscConfig+0x1a2>
 8006d8c:	4b3d      	ldr	r3, [pc, #244]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006d94:	4a3b      	ldr	r2, [pc, #236]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d9a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d9c:	e07a      	b.n	8006e94 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d9e:	4b39      	ldr	r3, [pc, #228]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	031b      	lsls	r3, r3, #12
 8006dac:	4935      	ldr	r1, [pc, #212]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006db2:	e06f      	b.n	8006e94 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db4:	4b33      	ldr	r3, [pc, #204]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	061b      	lsls	r3, r3, #24
 8006dc2:	4930      	ldr	r1, [pc, #192]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dc8:	e064      	b.n	8006e94 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d045      	beq.n	8006e5e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006dd2:	4b2c      	ldr	r3, [pc, #176]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f023 0219 	bic.w	r2, r3, #25
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	4929      	ldr	r1, [pc, #164]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de4:	f7fa ff26 	bl	8001c34 <HAL_GetTick>
 8006de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dec:	f7fa ff22 	bl	8001c34 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e307      	b.n	800740e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dfe:	4b21      	ldr	r3, [pc, #132]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e0a:	f7fa ff43 	bl	8001c94 <HAL_GetREVID>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d817      	bhi.n	8006e48 <HAL_RCC_OscConfig+0x24c>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d108      	bne.n	8006e32 <HAL_RCC_OscConfig+0x236>
 8006e20:	4b18      	ldr	r3, [pc, #96]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e28:	4a16      	ldr	r2, [pc, #88]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e2e:	6053      	str	r3, [r2, #4]
 8006e30:	e030      	b.n	8006e94 <HAL_RCC_OscConfig+0x298>
 8006e32:	4b14      	ldr	r3, [pc, #80]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	031b      	lsls	r3, r3, #12
 8006e40:	4910      	ldr	r1, [pc, #64]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	604b      	str	r3, [r1, #4]
 8006e46:	e025      	b.n	8006e94 <HAL_RCC_OscConfig+0x298>
 8006e48:	4b0e      	ldr	r3, [pc, #56]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	061b      	lsls	r3, r3, #24
 8006e56:	490b      	ldr	r1, [pc, #44]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	604b      	str	r3, [r1, #4]
 8006e5c:	e01a      	b.n	8006e94 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a08      	ldr	r2, [pc, #32]	; (8006e84 <HAL_RCC_OscConfig+0x288>)
 8006e64:	f023 0301 	bic.w	r3, r3, #1
 8006e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6a:	f7fa fee3 	bl	8001c34 <HAL_GetTick>
 8006e6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e70:	e00a      	b.n	8006e88 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e72:	f7fa fedf 	bl	8001c34 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d903      	bls.n	8006e88 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e2c4      	b.n	800740e <HAL_RCC_OscConfig+0x812>
 8006e84:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e88:	4ba4      	ldr	r3, [pc, #656]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1ee      	bne.n	8006e72 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80a9 	beq.w	8006ff4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ea2:	4b9e      	ldr	r3, [pc, #632]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eaa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eac:	4b9b      	ldr	r3, [pc, #620]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d007      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x2cc>
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b18      	cmp	r3, #24
 8006ebc:	d13a      	bne.n	8006f34 <HAL_RCC_OscConfig+0x338>
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d135      	bne.n	8006f34 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ec8:	4b94      	ldr	r3, [pc, #592]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x2e4>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	2b80      	cmp	r3, #128	; 0x80
 8006eda:	d001      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e296      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ee0:	f7fa fed8 	bl	8001c94 <HAL_GetREVID>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d817      	bhi.n	8006f1e <HAL_RCC_OscConfig+0x322>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d108      	bne.n	8006f08 <HAL_RCC_OscConfig+0x30c>
 8006ef6:	4b89      	ldr	r3, [pc, #548]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006efe:	4a87      	ldr	r2, [pc, #540]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f06:	e075      	b.n	8006ff4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f08:	4b84      	ldr	r3, [pc, #528]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	069b      	lsls	r3, r3, #26
 8006f16:	4981      	ldr	r1, [pc, #516]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f1c:	e06a      	b.n	8006ff4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f1e:	4b7f      	ldr	r3, [pc, #508]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	061b      	lsls	r3, r3, #24
 8006f2c:	497b      	ldr	r1, [pc, #492]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f32:	e05f      	b.n	8006ff4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d042      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f3c:	4b77      	ldr	r3, [pc, #476]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a76      	ldr	r2, [pc, #472]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fa fe74 	bl	8001c34 <HAL_GetTick>
 8006f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f50:	f7fa fe70 	bl	8001c34 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e255      	b.n	800740e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f62:	4b6e      	ldr	r3, [pc, #440]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f6e:	f7fa fe91 	bl	8001c94 <HAL_GetREVID>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d817      	bhi.n	8006fac <HAL_RCC_OscConfig+0x3b0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	d108      	bne.n	8006f96 <HAL_RCC_OscConfig+0x39a>
 8006f84:	4b65      	ldr	r3, [pc, #404]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006f8c:	4a63      	ldr	r2, [pc, #396]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f92:	6053      	str	r3, [r2, #4]
 8006f94:	e02e      	b.n	8006ff4 <HAL_RCC_OscConfig+0x3f8>
 8006f96:	4b61      	ldr	r3, [pc, #388]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	069b      	lsls	r3, r3, #26
 8006fa4:	495d      	ldr	r1, [pc, #372]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	604b      	str	r3, [r1, #4]
 8006faa:	e023      	b.n	8006ff4 <HAL_RCC_OscConfig+0x3f8>
 8006fac:	4b5b      	ldr	r3, [pc, #364]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	061b      	lsls	r3, r3, #24
 8006fba:	4958      	ldr	r1, [pc, #352]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60cb      	str	r3, [r1, #12]
 8006fc0:	e018      	b.n	8006ff4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006fc2:	4b56      	ldr	r3, [pc, #344]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a55      	ldr	r2, [pc, #340]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fce:	f7fa fe31 	bl	8001c34 <HAL_GetTick>
 8006fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006fd6:	f7fa fe2d 	bl	8001c34 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d901      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e212      	b.n	800740e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fe8:	4b4c      	ldr	r3, [pc, #304]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f0      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d036      	beq.n	800706e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d019      	beq.n	800703c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007008:	4b44      	ldr	r3, [pc, #272]	; (800711c <HAL_RCC_OscConfig+0x520>)
 800700a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800700c:	4a43      	ldr	r2, [pc, #268]	; (800711c <HAL_RCC_OscConfig+0x520>)
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007014:	f7fa fe0e 	bl	8001c34 <HAL_GetTick>
 8007018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800701c:	f7fa fe0a 	bl	8001c34 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e1ef      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800702e:	4b3b      	ldr	r3, [pc, #236]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8007030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f0      	beq.n	800701c <HAL_RCC_OscConfig+0x420>
 800703a:	e018      	b.n	800706e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800703c:	4b37      	ldr	r3, [pc, #220]	; (800711c <HAL_RCC_OscConfig+0x520>)
 800703e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007040:	4a36      	ldr	r2, [pc, #216]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007048:	f7fa fdf4 	bl	8001c34 <HAL_GetTick>
 800704c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007050:	f7fa fdf0 	bl	8001c34 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e1d5      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007062:	4b2e      	ldr	r3, [pc, #184]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8007064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b00      	cmp	r3, #0
 8007078:	d036      	beq.n	80070e8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d019      	beq.n	80070b6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007082:	4b26      	ldr	r3, [pc, #152]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a25      	ldr	r2, [pc, #148]	; (800711c <HAL_RCC_OscConfig+0x520>)
 8007088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800708c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800708e:	f7fa fdd1 	bl	8001c34 <HAL_GetTick>
 8007092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007096:	f7fa fdcd 	bl	8001c34 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e1b2      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070a8:	4b1c      	ldr	r3, [pc, #112]	; (800711c <HAL_RCC_OscConfig+0x520>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f0      	beq.n	8007096 <HAL_RCC_OscConfig+0x49a>
 80070b4:	e018      	b.n	80070e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070b6:	4b19      	ldr	r3, [pc, #100]	; (800711c <HAL_RCC_OscConfig+0x520>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a18      	ldr	r2, [pc, #96]	; (800711c <HAL_RCC_OscConfig+0x520>)
 80070bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070c2:	f7fa fdb7 	bl	8001c34 <HAL_GetTick>
 80070c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80070ca:	f7fa fdb3 	bl	8001c34 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e198      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070dc:	4b0f      	ldr	r3, [pc, #60]	; (800711c <HAL_RCC_OscConfig+0x520>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1f0      	bne.n	80070ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8085 	beq.w	8007200 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070f6:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <HAL_RCC_OscConfig+0x524>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a09      	ldr	r2, [pc, #36]	; (8007120 <HAL_RCC_OscConfig+0x524>)
 80070fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007100:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007102:	f7fa fd97 	bl	8001c34 <HAL_GetTick>
 8007106:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007108:	e00c      	b.n	8007124 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800710a:	f7fa fd93 	bl	8001c34 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b64      	cmp	r3, #100	; 0x64
 8007116:	d905      	bls.n	8007124 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e178      	b.n	800740e <HAL_RCC_OscConfig+0x812>
 800711c:	58024400 	.word	0x58024400
 8007120:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007124:	4b96      	ldr	r3, [pc, #600]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0ec      	beq.n	800710a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d106      	bne.n	8007146 <HAL_RCC_OscConfig+0x54a>
 8007138:	4b92      	ldr	r3, [pc, #584]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800713a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713c:	4a91      	ldr	r2, [pc, #580]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800713e:	f043 0301 	orr.w	r3, r3, #1
 8007142:	6713      	str	r3, [r2, #112]	; 0x70
 8007144:	e02d      	b.n	80071a2 <HAL_RCC_OscConfig+0x5a6>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10c      	bne.n	8007168 <HAL_RCC_OscConfig+0x56c>
 800714e:	4b8d      	ldr	r3, [pc, #564]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007152:	4a8c      	ldr	r2, [pc, #560]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007154:	f023 0301 	bic.w	r3, r3, #1
 8007158:	6713      	str	r3, [r2, #112]	; 0x70
 800715a:	4b8a      	ldr	r3, [pc, #552]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800715c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715e:	4a89      	ldr	r2, [pc, #548]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007160:	f023 0304 	bic.w	r3, r3, #4
 8007164:	6713      	str	r3, [r2, #112]	; 0x70
 8007166:	e01c      	b.n	80071a2 <HAL_RCC_OscConfig+0x5a6>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	2b05      	cmp	r3, #5
 800716e:	d10c      	bne.n	800718a <HAL_RCC_OscConfig+0x58e>
 8007170:	4b84      	ldr	r3, [pc, #528]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007174:	4a83      	ldr	r2, [pc, #524]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007176:	f043 0304 	orr.w	r3, r3, #4
 800717a:	6713      	str	r3, [r2, #112]	; 0x70
 800717c:	4b81      	ldr	r3, [pc, #516]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800717e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007180:	4a80      	ldr	r2, [pc, #512]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007182:	f043 0301 	orr.w	r3, r3, #1
 8007186:	6713      	str	r3, [r2, #112]	; 0x70
 8007188:	e00b      	b.n	80071a2 <HAL_RCC_OscConfig+0x5a6>
 800718a:	4b7e      	ldr	r3, [pc, #504]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	4a7d      	ldr	r2, [pc, #500]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007190:	f023 0301 	bic.w	r3, r3, #1
 8007194:	6713      	str	r3, [r2, #112]	; 0x70
 8007196:	4b7b      	ldr	r3, [pc, #492]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	4a7a      	ldr	r2, [pc, #488]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800719c:	f023 0304 	bic.w	r3, r3, #4
 80071a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d015      	beq.n	80071d6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071aa:	f7fa fd43 	bl	8001c34 <HAL_GetTick>
 80071ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071b0:	e00a      	b.n	80071c8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071b2:	f7fa fd3f 	bl	8001c34 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e122      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071c8:	4b6e      	ldr	r3, [pc, #440]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80071ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0ee      	beq.n	80071b2 <HAL_RCC_OscConfig+0x5b6>
 80071d4:	e014      	b.n	8007200 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d6:	f7fa fd2d 	bl	8001c34 <HAL_GetTick>
 80071da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071dc:	e00a      	b.n	80071f4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071de:	f7fa fd29 	bl	8001c34 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e10c      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071f4:	4b63      	ldr	r3, [pc, #396]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80071f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1ee      	bne.n	80071de <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8101 	beq.w	800740c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800720a:	4b5e      	ldr	r3, [pc, #376]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007212:	2b18      	cmp	r3, #24
 8007214:	f000 80bc 	beq.w	8007390 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	2b02      	cmp	r3, #2
 800721e:	f040 8095 	bne.w	800734c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007222:	4b58      	ldr	r3, [pc, #352]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a57      	ldr	r2, [pc, #348]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800722c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722e:	f7fa fd01 	bl	8001c34 <HAL_GetTick>
 8007232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007234:	e008      	b.n	8007248 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007236:	f7fa fcfd 	bl	8001c34 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d901      	bls.n	8007248 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e0e2      	b.n	800740e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007248:	4b4e      	ldr	r3, [pc, #312]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f0      	bne.n	8007236 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007254:	4b4b      	ldr	r3, [pc, #300]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007258:	4b4b      	ldr	r3, [pc, #300]	; (8007388 <HAL_RCC_OscConfig+0x78c>)
 800725a:	4013      	ands	r3, r2
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007264:	0112      	lsls	r2, r2, #4
 8007266:	430a      	orrs	r2, r1
 8007268:	4946      	ldr	r1, [pc, #280]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800726a:	4313      	orrs	r3, r2
 800726c:	628b      	str	r3, [r1, #40]	; 0x28
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	3b01      	subs	r3, #1
 8007274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727c:	3b01      	subs	r3, #1
 800727e:	025b      	lsls	r3, r3, #9
 8007280:	b29b      	uxth	r3, r3
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	3b01      	subs	r3, #1
 800728a:	041b      	lsls	r3, r3, #16
 800728c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	3b01      	subs	r3, #1
 8007298:	061b      	lsls	r3, r3, #24
 800729a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800729e:	4939      	ldr	r1, [pc, #228]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80072a4:	4b37      	ldr	r3, [pc, #220]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	4a36      	ldr	r2, [pc, #216]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072aa:	f023 0301 	bic.w	r3, r3, #1
 80072ae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072b0:	4b34      	ldr	r3, [pc, #208]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072b4:	4b35      	ldr	r3, [pc, #212]	; (800738c <HAL_RCC_OscConfig+0x790>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80072bc:	00d2      	lsls	r2, r2, #3
 80072be:	4931      	ldr	r1, [pc, #196]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80072c4:	4b2f      	ldr	r3, [pc, #188]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	f023 020c 	bic.w	r2, r3, #12
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d0:	492c      	ldr	r1, [pc, #176]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80072d6:	4b2b      	ldr	r3, [pc, #172]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	f023 0202 	bic.w	r2, r3, #2
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	4928      	ldr	r1, [pc, #160]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80072e8:	4b26      	ldr	r3, [pc, #152]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	4a25      	ldr	r2, [pc, #148]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072f4:	4b23      	ldr	r3, [pc, #140]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	4a22      	ldr	r2, [pc, #136]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007300:	4b20      	ldr	r3, [pc, #128]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	4a1f      	ldr	r2, [pc, #124]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800730a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800730c:	4b1d      	ldr	r3, [pc, #116]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007312:	f043 0301 	orr.w	r3, r3, #1
 8007316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007318:	4b1a      	ldr	r3, [pc, #104]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a19      	ldr	r2, [pc, #100]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800731e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007324:	f7fa fc86 	bl	8001c34 <HAL_GetTick>
 8007328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800732c:	f7fa fc82 	bl	8001c34 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e067      	b.n	800740e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800733e:	4b11      	ldr	r3, [pc, #68]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0f0      	beq.n	800732c <HAL_RCC_OscConfig+0x730>
 800734a:	e05f      	b.n	800740c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800734c:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0c      	ldr	r2, [pc, #48]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007358:	f7fa fc6c 	bl	8001c34 <HAL_GetTick>
 800735c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007360:	f7fa fc68 	bl	8001c34 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e04d      	b.n	800740e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007372:	4b04      	ldr	r3, [pc, #16]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f0      	bne.n	8007360 <HAL_RCC_OscConfig+0x764>
 800737e:	e045      	b.n	800740c <HAL_RCC_OscConfig+0x810>
 8007380:	58024800 	.word	0x58024800
 8007384:	58024400 	.word	0x58024400
 8007388:	fffffc0c 	.word	0xfffffc0c
 800738c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007390:	4b21      	ldr	r3, [pc, #132]	; (8007418 <HAL_RCC_OscConfig+0x81c>)
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007396:	4b20      	ldr	r3, [pc, #128]	; (8007418 <HAL_RCC_OscConfig+0x81c>)
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d031      	beq.n	8007408 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f003 0203 	and.w	r2, r3, #3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d12a      	bne.n	8007408 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073be:	429a      	cmp	r2, r3
 80073c0:	d122      	bne.n	8007408 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d11a      	bne.n	8007408 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	0a5b      	lsrs	r3, r3, #9
 80073d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073de:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d111      	bne.n	8007408 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	0c1b      	lsrs	r3, r3, #16
 80073e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d108      	bne.n	8007408 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	0e1b      	lsrs	r3, r3, #24
 80073fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007402:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007404:	429a      	cmp	r2, r3
 8007406:	d001      	beq.n	800740c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3730      	adds	r7, #48	; 0x30
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	58024400 	.word	0x58024400

0800741c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e19c      	b.n	800776a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007430:	4b8a      	ldr	r3, [pc, #552]	; (800765c <HAL_RCC_ClockConfig+0x240>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d910      	bls.n	8007460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743e:	4b87      	ldr	r3, [pc, #540]	; (800765c <HAL_RCC_ClockConfig+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f023 020f 	bic.w	r2, r3, #15
 8007446:	4985      	ldr	r1, [pc, #532]	; (800765c <HAL_RCC_ClockConfig+0x240>)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	4313      	orrs	r3, r2
 800744c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800744e:	4b83      	ldr	r3, [pc, #524]	; (800765c <HAL_RCC_ClockConfig+0x240>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d001      	beq.n	8007460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e184      	b.n	800776a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d010      	beq.n	800748e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	4b7b      	ldr	r3, [pc, #492]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007478:	429a      	cmp	r2, r3
 800747a:	d908      	bls.n	800748e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800747c:	4b78      	ldr	r3, [pc, #480]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	4975      	ldr	r1, [pc, #468]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 800748a:	4313      	orrs	r3, r2
 800748c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d010      	beq.n	80074bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695a      	ldr	r2, [r3, #20]
 800749e:	4b70      	ldr	r3, [pc, #448]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d908      	bls.n	80074bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074aa:	4b6d      	ldr	r3, [pc, #436]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	496a      	ldr	r1, [pc, #424]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d010      	beq.n	80074ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	4b64      	ldr	r3, [pc, #400]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d908      	bls.n	80074ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80074d8:	4b61      	ldr	r3, [pc, #388]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	495e      	ldr	r1, [pc, #376]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d010      	beq.n	8007518 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	4b59      	ldr	r3, [pc, #356]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007502:	429a      	cmp	r2, r3
 8007504:	d908      	bls.n	8007518 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007506:	4b56      	ldr	r3, [pc, #344]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	4953      	ldr	r1, [pc, #332]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007514:	4313      	orrs	r3, r2
 8007516:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d010      	beq.n	8007546 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	4b4d      	ldr	r3, [pc, #308]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	429a      	cmp	r2, r3
 8007532:	d908      	bls.n	8007546 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007534:	4b4a      	ldr	r3, [pc, #296]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	f023 020f 	bic.w	r2, r3, #15
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	4947      	ldr	r1, [pc, #284]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007542:	4313      	orrs	r3, r2
 8007544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d055      	beq.n	80075fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007552:	4b43      	ldr	r3, [pc, #268]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	4940      	ldr	r1, [pc, #256]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007560:	4313      	orrs	r3, r2
 8007562:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d107      	bne.n	800757c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800756c:	4b3c      	ldr	r3, [pc, #240]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d121      	bne.n	80075bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e0f6      	b.n	800776a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	2b03      	cmp	r3, #3
 8007582:	d107      	bne.n	8007594 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007584:	4b36      	ldr	r3, [pc, #216]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d115      	bne.n	80075bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0ea      	b.n	800776a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d107      	bne.n	80075ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800759c:	4b30      	ldr	r3, [pc, #192]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d109      	bne.n	80075bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0de      	b.n	800776a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075ac:	4b2c      	ldr	r3, [pc, #176]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e0d6      	b.n	800776a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075bc:	4b28      	ldr	r3, [pc, #160]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f023 0207 	bic.w	r2, r3, #7
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4925      	ldr	r1, [pc, #148]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ce:	f7fa fb31 	bl	8001c34 <HAL_GetTick>
 80075d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075d4:	e00a      	b.n	80075ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075d6:	f7fa fb2d 	bl	8001c34 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e0be      	b.n	800776a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ec:	4b1c      	ldr	r3, [pc, #112]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d1eb      	bne.n	80075d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d010      	beq.n	800762c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	4b14      	ldr	r3, [pc, #80]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	429a      	cmp	r2, r3
 8007618:	d208      	bcs.n	800762c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800761a:	4b11      	ldr	r3, [pc, #68]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	f023 020f 	bic.w	r2, r3, #15
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	490e      	ldr	r1, [pc, #56]	; (8007660 <HAL_RCC_ClockConfig+0x244>)
 8007628:	4313      	orrs	r3, r2
 800762a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800762c:	4b0b      	ldr	r3, [pc, #44]	; (800765c <HAL_RCC_ClockConfig+0x240>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d214      	bcs.n	8007664 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800763a:	4b08      	ldr	r3, [pc, #32]	; (800765c <HAL_RCC_ClockConfig+0x240>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f023 020f 	bic.w	r2, r3, #15
 8007642:	4906      	ldr	r1, [pc, #24]	; (800765c <HAL_RCC_ClockConfig+0x240>)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	4313      	orrs	r3, r2
 8007648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800764a:	4b04      	ldr	r3, [pc, #16]	; (800765c <HAL_RCC_ClockConfig+0x240>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d005      	beq.n	8007664 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e086      	b.n	800776a <HAL_RCC_ClockConfig+0x34e>
 800765c:	52002000 	.word	0x52002000
 8007660:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d010      	beq.n	8007692 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	4b3f      	ldr	r3, [pc, #252]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800767c:	429a      	cmp	r2, r3
 800767e:	d208      	bcs.n	8007692 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007680:	4b3c      	ldr	r3, [pc, #240]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	4939      	ldr	r1, [pc, #228]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 800768e:	4313      	orrs	r3, r2
 8007690:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d010      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	695a      	ldr	r2, [r3, #20]
 80076a2:	4b34      	ldr	r3, [pc, #208]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d208      	bcs.n	80076c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076ae:	4b31      	ldr	r3, [pc, #196]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	492e      	ldr	r1, [pc, #184]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0310 	and.w	r3, r3, #16
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d010      	beq.n	80076ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	4b28      	ldr	r3, [pc, #160]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076d8:	429a      	cmp	r2, r3
 80076da:	d208      	bcs.n	80076ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076dc:	4b25      	ldr	r3, [pc, #148]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	4922      	ldr	r1, [pc, #136]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d010      	beq.n	800771c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	69da      	ldr	r2, [r3, #28]
 80076fe:	4b1d      	ldr	r3, [pc, #116]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007706:	429a      	cmp	r2, r3
 8007708:	d208      	bcs.n	800771c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800770a:	4b1a      	ldr	r3, [pc, #104]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	4917      	ldr	r1, [pc, #92]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 8007718:	4313      	orrs	r3, r2
 800771a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800771c:	f000 f834 	bl	8007788 <HAL_RCC_GetSysClockFreq>
 8007720:	4602      	mov	r2, r0
 8007722:	4b14      	ldr	r3, [pc, #80]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	4912      	ldr	r1, [pc, #72]	; (8007778 <HAL_RCC_ClockConfig+0x35c>)
 800772e:	5ccb      	ldrb	r3, [r1, r3]
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	fa22 f303 	lsr.w	r3, r2, r3
 8007738:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800773a:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <HAL_RCC_ClockConfig+0x358>)
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	4a0d      	ldr	r2, [pc, #52]	; (8007778 <HAL_RCC_ClockConfig+0x35c>)
 8007744:	5cd3      	ldrb	r3, [r2, r3]
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	fa22 f303 	lsr.w	r3, r2, r3
 8007750:	4a0a      	ldr	r2, [pc, #40]	; (800777c <HAL_RCC_ClockConfig+0x360>)
 8007752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007754:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <HAL_RCC_ClockConfig+0x364>)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800775a:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <HAL_RCC_ClockConfig+0x368>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f7fa fa1e 	bl	8001ba0 <HAL_InitTick>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	58024400 	.word	0x58024400
 8007778:	080154c0 	.word	0x080154c0
 800777c:	24000004 	.word	0x24000004
 8007780:	24000000 	.word	0x24000000
 8007784:	2400001c 	.word	0x2400001c

08007788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007788:	b480      	push	{r7}
 800778a:	b089      	sub	sp, #36	; 0x24
 800778c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800778e:	4bb3      	ldr	r3, [pc, #716]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007796:	2b18      	cmp	r3, #24
 8007798:	f200 8155 	bhi.w	8007a46 <HAL_RCC_GetSysClockFreq+0x2be>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	08007809 	.word	0x08007809
 80077a8:	08007a47 	.word	0x08007a47
 80077ac:	08007a47 	.word	0x08007a47
 80077b0:	08007a47 	.word	0x08007a47
 80077b4:	08007a47 	.word	0x08007a47
 80077b8:	08007a47 	.word	0x08007a47
 80077bc:	08007a47 	.word	0x08007a47
 80077c0:	08007a47 	.word	0x08007a47
 80077c4:	0800782f 	.word	0x0800782f
 80077c8:	08007a47 	.word	0x08007a47
 80077cc:	08007a47 	.word	0x08007a47
 80077d0:	08007a47 	.word	0x08007a47
 80077d4:	08007a47 	.word	0x08007a47
 80077d8:	08007a47 	.word	0x08007a47
 80077dc:	08007a47 	.word	0x08007a47
 80077e0:	08007a47 	.word	0x08007a47
 80077e4:	08007835 	.word	0x08007835
 80077e8:	08007a47 	.word	0x08007a47
 80077ec:	08007a47 	.word	0x08007a47
 80077f0:	08007a47 	.word	0x08007a47
 80077f4:	08007a47 	.word	0x08007a47
 80077f8:	08007a47 	.word	0x08007a47
 80077fc:	08007a47 	.word	0x08007a47
 8007800:	08007a47 	.word	0x08007a47
 8007804:	0800783b 	.word	0x0800783b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007808:	4b94      	ldr	r3, [pc, #592]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007814:	4b91      	ldr	r3, [pc, #580]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	08db      	lsrs	r3, r3, #3
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	4a90      	ldr	r2, [pc, #576]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007820:	fa22 f303 	lsr.w	r3, r2, r3
 8007824:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007826:	e111      	b.n	8007a4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007828:	4b8d      	ldr	r3, [pc, #564]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800782a:	61bb      	str	r3, [r7, #24]
    break;
 800782c:	e10e      	b.n	8007a4c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800782e:	4b8d      	ldr	r3, [pc, #564]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007830:	61bb      	str	r3, [r7, #24]
    break;
 8007832:	e10b      	b.n	8007a4c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007834:	4b8c      	ldr	r3, [pc, #560]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007836:	61bb      	str	r3, [r7, #24]
    break;
 8007838:	e108      	b.n	8007a4c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800783a:	4b88      	ldr	r3, [pc, #544]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007844:	4b85      	ldr	r3, [pc, #532]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	091b      	lsrs	r3, r3, #4
 800784a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800784e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007850:	4b82      	ldr	r3, [pc, #520]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800785a:	4b80      	ldr	r3, [pc, #512]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800785c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785e:	08db      	lsrs	r3, r3, #3
 8007860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	fb02 f303 	mul.w	r3, r2, r3
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007872:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80e1 	beq.w	8007a40 <HAL_RCC_GetSysClockFreq+0x2b8>
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b02      	cmp	r3, #2
 8007882:	f000 8083 	beq.w	800798c <HAL_RCC_GetSysClockFreq+0x204>
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b02      	cmp	r3, #2
 800788a:	f200 80a1 	bhi.w	80079d0 <HAL_RCC_GetSysClockFreq+0x248>
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_RCC_GetSysClockFreq+0x114>
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d056      	beq.n	8007948 <HAL_RCC_GetSysClockFreq+0x1c0>
 800789a:	e099      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800789c:	4b6f      	ldr	r3, [pc, #444]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02d      	beq.n	8007904 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078a8:	4b6c      	ldr	r3, [pc, #432]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	08db      	lsrs	r3, r3, #3
 80078ae:	f003 0303 	and.w	r3, r3, #3
 80078b2:	4a6b      	ldr	r2, [pc, #428]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078b4:	fa22 f303 	lsr.w	r3, r2, r3
 80078b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	ee07 3a90 	vmov	s15, r3
 80078c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d2:	4b62      	ldr	r3, [pc, #392]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80078e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80078ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007902:	e087      	b.n	8007a14 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007a70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007916:	4b51      	ldr	r3, [pc, #324]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007926:	ed97 6a02 	vldr	s12, [r7, #8]
 800792a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800792e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007946:	e065      	b.n	8007a14 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007952:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007a74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795a:	4b40      	ldr	r3, [pc, #256]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796a:	ed97 6a02 	vldr	s12, [r7, #8]
 800796e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800798a:	e043      	b.n	8007a14 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007a78 <HAL_RCC_GetSysClockFreq+0x2f0>
 800799a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799e:	4b2f      	ldr	r3, [pc, #188]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80079b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80079b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ce:	e021      	b.n	8007a14 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007a74 <HAL_RCC_GetSysClockFreq+0x2ec>
 80079de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e2:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80079f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80079fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a12:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	0a5b      	lsrs	r3, r3, #9
 8007a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1e:	3301      	adds	r3, #1
 8007a20:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	ee07 3a90 	vmov	s15, r3
 8007a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a38:	ee17 3a90 	vmov	r3, s15
 8007a3c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007a3e:	e005      	b.n	8007a4c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61bb      	str	r3, [r7, #24]
    break;
 8007a44:	e002      	b.n	8007a4c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007a46:	4b07      	ldr	r3, [pc, #28]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a48:	61bb      	str	r3, [r7, #24]
    break;
 8007a4a:	bf00      	nop
  }

  return sysclockfreq;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3724      	adds	r7, #36	; 0x24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	58024400 	.word	0x58024400
 8007a60:	03d09000 	.word	0x03d09000
 8007a64:	003d0900 	.word	0x003d0900
 8007a68:	00f42400 	.word	0x00f42400
 8007a6c:	46000000 	.word	0x46000000
 8007a70:	4c742400 	.word	0x4c742400
 8007a74:	4a742400 	.word	0x4a742400
 8007a78:	4b742400 	.word	0x4b742400

08007a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007a82:	f7ff fe81 	bl	8007788 <HAL_RCC_GetSysClockFreq>
 8007a86:	4602      	mov	r2, r0
 8007a88:	4b10      	ldr	r3, [pc, #64]	; (8007acc <HAL_RCC_GetHCLKFreq+0x50>)
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	0a1b      	lsrs	r3, r3, #8
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	490f      	ldr	r1, [pc, #60]	; (8007ad0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a94:	5ccb      	ldrb	r3, [r1, r3]
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <HAL_RCC_GetHCLKFreq+0x50>)
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	4a09      	ldr	r2, [pc, #36]	; (8007ad0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007aaa:	5cd3      	ldrb	r3, [r2, r3]
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab6:	4a07      	ldr	r2, [pc, #28]	; (8007ad4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ab8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007aba:	4a07      	ldr	r2, [pc, #28]	; (8007ad8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	58024400 	.word	0x58024400
 8007ad0:	080154c0 	.word	0x080154c0
 8007ad4:	24000004 	.word	0x24000004
 8007ad8:	24000000 	.word	0x24000000

08007adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ae0:	f7ff ffcc 	bl	8007a7c <HAL_RCC_GetHCLKFreq>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	091b      	lsrs	r3, r3, #4
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	4904      	ldr	r1, [pc, #16]	; (8007b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007af2:	5ccb      	ldrb	r3, [r1, r3]
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	58024400 	.word	0x58024400
 8007b04:	080154c0 	.word	0x080154c0

08007b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007b0c:	f7ff ffb6 	bl	8007a7c <HAL_RCC_GetHCLKFreq>
 8007b10:	4602      	mov	r2, r0
 8007b12:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	0a1b      	lsrs	r3, r3, #8
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	4904      	ldr	r1, [pc, #16]	; (8007b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b1e:	5ccb      	ldrb	r3, [r1, r3]
 8007b20:	f003 031f 	and.w	r3, r3, #31
 8007b24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	58024400 	.word	0x58024400
 8007b30:	080154c0 	.word	0x080154c0

08007b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	223f      	movs	r2, #63	; 0x3f
 8007b42:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b44:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f003 0207 	and.w	r2, r3, #7
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007b50:	4b17      	ldr	r3, [pc, #92]	; (8007bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007b5c:	4b14      	ldr	r3, [pc, #80]	; (8007bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	f003 020f 	and.w	r2, r3, #15
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007b74:	4b0e      	ldr	r3, [pc, #56]	; (8007bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007b80:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007b8c:	4b08      	ldr	r3, [pc, #32]	; (8007bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <HAL_RCC_GetClockConfig+0x80>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 020f 	and.w	r2, r3, #15
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	58024400 	.word	0x58024400
 8007bb4:	52002000 	.word	0x52002000

08007bb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d03f      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007bdc:	d02a      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007be2:	d824      	bhi.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007be8:	d018      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bee:	d81e      	bhi.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bf8:	d007      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007bfa:	e018      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bfc:	4bab      	ldr	r3, [pc, #684]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	4aaa      	ldr	r2, [pc, #680]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007c08:	e015      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	2102      	movs	r1, #2
 8007c10:	4618      	mov	r0, r3
 8007c12:	f001 fff3 	bl	8009bfc <RCCEx_PLL2_Config>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007c1a:	e00c      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3324      	adds	r3, #36	; 0x24
 8007c20:	2102      	movs	r1, #2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f002 f89c 	bl	8009d60 <RCCEx_PLL3_Config>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007c2c:	e003      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	75fb      	strb	r3, [r7, #23]
      break;
 8007c32:	e000      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d109      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007c3c:	4b9b      	ldr	r3, [pc, #620]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c48:	4998      	ldr	r1, [pc, #608]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	650b      	str	r3, [r1, #80]	; 0x50
 8007c4e:	e001      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d03d      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d826      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c85 	.word	0x08007c85
 8007c74:	08007c93 	.word	0x08007c93
 8007c78:	08007ca5 	.word	0x08007ca5
 8007c7c:	08007cbd 	.word	0x08007cbd
 8007c80:	08007cbd 	.word	0x08007cbd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c84:	4b89      	ldr	r3, [pc, #548]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	4a88      	ldr	r2, [pc, #544]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c90:	e015      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3304      	adds	r3, #4
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 ffaf 	bl	8009bfc <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ca2:	e00c      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f002 f858 	bl	8009d60 <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cb4:	e003      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cba:	e000      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d109      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cc4:	4b79      	ldr	r3, [pc, #484]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	f023 0207 	bic.w	r2, r3, #7
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd0:	4976      	ldr	r1, [pc, #472]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	650b      	str	r3, [r1, #80]	; 0x50
 8007cd6:	e001      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d042      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf0:	d02b      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf6:	d825      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8007cfa:	d028      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007cfc:	2bc0      	cmp	r3, #192	; 0xc0
 8007cfe:	d821      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007d00:	2b80      	cmp	r3, #128	; 0x80
 8007d02:	d016      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007d04:	2b80      	cmp	r3, #128	; 0x80
 8007d06:	d81d      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007d0c:	2b40      	cmp	r3, #64	; 0x40
 8007d0e:	d007      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007d10:	e018      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d12:	4b66      	ldr	r3, [pc, #408]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	4a65      	ldr	r2, [pc, #404]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007d1e:	e017      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	2100      	movs	r1, #0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f001 ff68 	bl	8009bfc <RCCEx_PLL2_Config>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007d30:	e00e      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3324      	adds	r3, #36	; 0x24
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f002 f811 	bl	8009d60 <RCCEx_PLL3_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007d42:	e005      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	75fb      	strb	r3, [r7, #23]
      break;
 8007d48:	e002      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d109      	bne.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007d56:	4b55      	ldr	r3, [pc, #340]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d62:	4952      	ldr	r1, [pc, #328]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	650b      	str	r3, [r1, #80]	; 0x50
 8007d68:	e001      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
 8007d6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d049      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d84:	d030      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d8a:	d82a      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d90:	d02c      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007d92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d96:	d824      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d9c:	d018      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007da2:	d81e      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dac:	d007      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007dae:	e018      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db0:	4b3e      	ldr	r3, [pc, #248]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	4a3d      	ldr	r2, [pc, #244]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dbc:	e017      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 ff19 	bl	8009bfc <RCCEx_PLL2_Config>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007dce:	e00e      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 ffc2 	bl	8009d60 <RCCEx_PLL3_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007de0:	e005      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
      break;
 8007de6:	e002      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007de8:	bf00      	nop
 8007dea:	e000      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007df4:	4b2d      	ldr	r3, [pc, #180]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e02:	492a      	ldr	r1, [pc, #168]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	658b      	str	r3, [r1, #88]	; 0x58
 8007e08:	e001      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d04c      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e24:	d030      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e2a:	d82a      	bhi.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007e2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e30:	d02c      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007e32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e36:	d824      	bhi.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e3c:	d018      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e42:	d81e      	bhi.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e4c:	d007      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007e4e:	e018      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e50:	4b16      	ldr	r3, [pc, #88]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	4a15      	ldr	r2, [pc, #84]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e5c:	e017      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3304      	adds	r3, #4
 8007e62:	2100      	movs	r1, #0
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 fec9 	bl	8009bfc <RCCEx_PLL2_Config>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e6e:	e00e      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3324      	adds	r3, #36	; 0x24
 8007e74:	2100      	movs	r1, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 ff72 	bl	8009d60 <RCCEx_PLL3_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e80:	e005      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]
      break;
 8007e86:	e002      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007e88:	bf00      	nop
 8007e8a:	e000      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10d      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ea2:	4902      	ldr	r1, [pc, #8]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	658b      	str	r3, [r1, #88]	; 0x58
 8007ea8:	e004      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007eaa:	bf00      	nop
 8007eac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d032      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ec4:	2b30      	cmp	r3, #48	; 0x30
 8007ec6:	d01c      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007ec8:	2b30      	cmp	r3, #48	; 0x30
 8007eca:	d817      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d00c      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d813      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d016      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d10f      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007edc:	4baf      	ldr	r3, [pc, #700]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	4aae      	ldr	r2, [pc, #696]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007ee8:	e00e      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3304      	adds	r3, #4
 8007eee:	2102      	movs	r1, #2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 fe83 	bl	8009bfc <RCCEx_PLL2_Config>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007efa:	e005      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]
      break;
 8007f00:	e002      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007f02:	bf00      	nop
 8007f04:	e000      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f0e:	4ba3      	ldr	r3, [pc, #652]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f1a:	49a0      	ldr	r1, [pc, #640]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f20:	e001      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d047      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f3a:	d030      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f40:	d82a      	bhi.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007f42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f46:	d02c      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007f48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f4c:	d824      	bhi.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f52:	d018      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f58:	d81e      	bhi.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f62:	d007      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007f64:	e018      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f66:	4b8d      	ldr	r3, [pc, #564]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	4a8c      	ldr	r2, [pc, #560]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007f72:	e017      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3304      	adds	r3, #4
 8007f78:	2100      	movs	r1, #0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 fe3e 	bl	8009bfc <RCCEx_PLL2_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007f84:	e00e      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3324      	adds	r3, #36	; 0x24
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 fee7 	bl	8009d60 <RCCEx_PLL3_Config>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007f96:	e005      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9c:	e002      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007f9e:	bf00      	nop
 8007fa0:	e000      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d109      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007faa:	4b7c      	ldr	r3, [pc, #496]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb6:	4979      	ldr	r1, [pc, #484]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	650b      	str	r3, [r1, #80]	; 0x50
 8007fbc:	e001      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d049      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fd6:	d02e      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fdc:	d828      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007fde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fe2:	d02a      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007fe4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fe8:	d822      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007fea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fee:	d026      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007ff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ff4:	d81c      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ffa:	d010      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008000:	d816      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01d      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800800a:	d111      	bne.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	2101      	movs	r1, #1
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fdf2 	bl	8009bfc <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800801c:	e012      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3324      	adds	r3, #36	; 0x24
 8008022:	2101      	movs	r1, #1
 8008024:	4618      	mov	r0, r3
 8008026:	f001 fe9b 	bl	8009d60 <RCCEx_PLL3_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800802e:	e009      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
      break;
 8008034:	e006      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008036:	bf00      	nop
 8008038:	e004      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800803a:	bf00      	nop
 800803c:	e002      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800803e:	bf00      	nop
 8008040:	e000      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d109      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800804a:	4b54      	ldr	r3, [pc, #336]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008056:	4951      	ldr	r1, [pc, #324]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008058:	4313      	orrs	r3, r2
 800805a:	650b      	str	r3, [r1, #80]	; 0x50
 800805c:	e001      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d04b      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008078:	d02e      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800807a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800807e:	d828      	bhi.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008084:	d02a      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808a:	d822      	bhi.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800808c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008090:	d026      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008096:	d81c      	bhi.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800809c:	d010      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800809e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a2:	d816      	bhi.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01d      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80080a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ac:	d111      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3304      	adds	r3, #4
 80080b2:	2101      	movs	r1, #1
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 fda1 	bl	8009bfc <RCCEx_PLL2_Config>
 80080ba:	4603      	mov	r3, r0
 80080bc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80080be:	e012      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3324      	adds	r3, #36	; 0x24
 80080c4:	2101      	movs	r1, #1
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 fe4a 	bl	8009d60 <RCCEx_PLL3_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80080d0:	e009      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	75fb      	strb	r3, [r7, #23]
      break;
 80080d6:	e006      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80080d8:	bf00      	nop
 80080da:	e004      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80080dc:	bf00      	nop
 80080de:	e002      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80080e0:	bf00      	nop
 80080e2:	e000      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80080e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80080ec:	4b2b      	ldr	r3, [pc, #172]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080fa:	4928      	ldr	r1, [pc, #160]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	658b      	str	r3, [r1, #88]	; 0x58
 8008100:	e001      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d02f      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800811a:	d00e      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800811c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008120:	d814      	bhi.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d015      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800812a:	d10f      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800812c:	4b1b      	ldr	r3, [pc, #108]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	4a1a      	ldr	r2, [pc, #104]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008138:	e00c      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3304      	adds	r3, #4
 800813e:	2101      	movs	r1, #1
 8008140:	4618      	mov	r0, r3
 8008142:	f001 fd5b 	bl	8009bfc <RCCEx_PLL2_Config>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800814a:	e003      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	75fb      	strb	r3, [r7, #23]
      break;
 8008150:	e000      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800815a:	4b10      	ldr	r3, [pc, #64]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800815c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008166:	490d      	ldr	r1, [pc, #52]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008168:	4313      	orrs	r3, r2
 800816a:	650b      	str	r3, [r1, #80]	; 0x50
 800816c:	e001      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d033      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	2b03      	cmp	r3, #3
 8008184:	d81c      	bhi.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008186:	a201      	add	r2, pc, #4	; (adr r2, 800818c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081c7 	.word	0x080081c7
 8008190:	080081a1 	.word	0x080081a1
 8008194:	080081af 	.word	0x080081af
 8008198:	080081c7 	.word	0x080081c7
 800819c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081a0:	4bb8      	ldr	r3, [pc, #736]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a4:	4ab7      	ldr	r2, [pc, #732]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80081ac:	e00c      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3304      	adds	r3, #4
 80081b2:	2102      	movs	r1, #2
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 fd21 	bl	8009bfc <RCCEx_PLL2_Config>
 80081ba:	4603      	mov	r3, r0
 80081bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80081be:	e003      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
      break;
 80081c4:	e000      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80081c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d109      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80081ce:	4bad      	ldr	r3, [pc, #692]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d2:	f023 0203 	bic.w	r2, r3, #3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	49aa      	ldr	r1, [pc, #680]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081e0:	e001      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 8086 	beq.w	8008300 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081f4:	4ba4      	ldr	r3, [pc, #656]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4aa3      	ldr	r2, [pc, #652]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80081fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008200:	f7f9 fd18 	bl	8001c34 <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008206:	e009      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008208:	f7f9 fd14 	bl	8001c34 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b64      	cmp	r3, #100	; 0x64
 8008214:	d902      	bls.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	75fb      	strb	r3, [r7, #23]
        break;
 800821a:	e005      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800821c:	4b9a      	ldr	r3, [pc, #616]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0ef      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d166      	bne.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800822e:	4b95      	ldr	r3, [pc, #596]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008238:	4053      	eors	r3, r2
 800823a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800823e:	2b00      	cmp	r3, #0
 8008240:	d013      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008242:	4b90      	ldr	r3, [pc, #576]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800824a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800824c:	4b8d      	ldr	r3, [pc, #564]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800824e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008250:	4a8c      	ldr	r2, [pc, #560]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008256:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008258:	4b8a      	ldr	r3, [pc, #552]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825c:	4a89      	ldr	r2, [pc, #548]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800825e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008262:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008264:	4a87      	ldr	r2, [pc, #540]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008274:	d115      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008276:	f7f9 fcdd 	bl	8001c34 <HAL_GetTick>
 800827a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800827c:	e00b      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800827e:	f7f9 fcd9 	bl	8001c34 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	f241 3288 	movw	r2, #5000	; 0x1388
 800828c:	4293      	cmp	r3, r2
 800828e:	d902      	bls.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	75fb      	strb	r3, [r7, #23]
            break;
 8008294:	e005      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008296:	4b7b      	ldr	r3, [pc, #492]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0ed      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d126      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082b6:	d10d      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80082b8:	4b72      	ldr	r3, [pc, #456]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082c6:	0919      	lsrs	r1, r3, #4
 80082c8:	4b70      	ldr	r3, [pc, #448]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80082ca:	400b      	ands	r3, r1
 80082cc:	496d      	ldr	r1, [pc, #436]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	610b      	str	r3, [r1, #16]
 80082d2:	e005      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80082d4:	4b6b      	ldr	r3, [pc, #428]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	4a6a      	ldr	r2, [pc, #424]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80082de:	6113      	str	r3, [r2, #16]
 80082e0:	4b68      	ldr	r3, [pc, #416]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ee:	4965      	ldr	r1, [pc, #404]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	670b      	str	r3, [r1, #112]	; 0x70
 80082f4:	e004      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	75bb      	strb	r3, [r7, #22]
 80082fa:	e001      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d07e      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008310:	2b28      	cmp	r3, #40	; 0x28
 8008312:	d867      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	080083eb 	.word	0x080083eb
 8008320:	080083e5 	.word	0x080083e5
 8008324:	080083e5 	.word	0x080083e5
 8008328:	080083e5 	.word	0x080083e5
 800832c:	080083e5 	.word	0x080083e5
 8008330:	080083e5 	.word	0x080083e5
 8008334:	080083e5 	.word	0x080083e5
 8008338:	080083e5 	.word	0x080083e5
 800833c:	080083c1 	.word	0x080083c1
 8008340:	080083e5 	.word	0x080083e5
 8008344:	080083e5 	.word	0x080083e5
 8008348:	080083e5 	.word	0x080083e5
 800834c:	080083e5 	.word	0x080083e5
 8008350:	080083e5 	.word	0x080083e5
 8008354:	080083e5 	.word	0x080083e5
 8008358:	080083e5 	.word	0x080083e5
 800835c:	080083d3 	.word	0x080083d3
 8008360:	080083e5 	.word	0x080083e5
 8008364:	080083e5 	.word	0x080083e5
 8008368:	080083e5 	.word	0x080083e5
 800836c:	080083e5 	.word	0x080083e5
 8008370:	080083e5 	.word	0x080083e5
 8008374:	080083e5 	.word	0x080083e5
 8008378:	080083e5 	.word	0x080083e5
 800837c:	080083eb 	.word	0x080083eb
 8008380:	080083e5 	.word	0x080083e5
 8008384:	080083e5 	.word	0x080083e5
 8008388:	080083e5 	.word	0x080083e5
 800838c:	080083e5 	.word	0x080083e5
 8008390:	080083e5 	.word	0x080083e5
 8008394:	080083e5 	.word	0x080083e5
 8008398:	080083e5 	.word	0x080083e5
 800839c:	080083eb 	.word	0x080083eb
 80083a0:	080083e5 	.word	0x080083e5
 80083a4:	080083e5 	.word	0x080083e5
 80083a8:	080083e5 	.word	0x080083e5
 80083ac:	080083e5 	.word	0x080083e5
 80083b0:	080083e5 	.word	0x080083e5
 80083b4:	080083e5 	.word	0x080083e5
 80083b8:	080083e5 	.word	0x080083e5
 80083bc:	080083eb 	.word	0x080083eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3304      	adds	r3, #4
 80083c4:	2101      	movs	r1, #1
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 fc18 	bl	8009bfc <RCCEx_PLL2_Config>
 80083cc:	4603      	mov	r3, r0
 80083ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80083d0:	e00c      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	3324      	adds	r3, #36	; 0x24
 80083d6:	2101      	movs	r1, #1
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 fcc1 	bl	8009d60 <RCCEx_PLL3_Config>
 80083de:	4603      	mov	r3, r0
 80083e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80083e2:	e003      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]
      break;
 80083e8:	e000      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80083ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d109      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80083f2:	4b24      	ldr	r3, [pc, #144]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083fe:	4921      	ldr	r1, [pc, #132]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008400:	4313      	orrs	r3, r2
 8008402:	654b      	str	r3, [r1, #84]	; 0x54
 8008404:	e001      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d03e      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800841a:	2b05      	cmp	r3, #5
 800841c:	d820      	bhi.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008467 	.word	0x08008467
 8008428:	0800843d 	.word	0x0800843d
 800842c:	0800844f 	.word	0x0800844f
 8008430:	08008467 	.word	0x08008467
 8008434:	08008467 	.word	0x08008467
 8008438:	08008467 	.word	0x08008467
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3304      	adds	r3, #4
 8008440:	2101      	movs	r1, #1
 8008442:	4618      	mov	r0, r3
 8008444:	f001 fbda 	bl	8009bfc <RCCEx_PLL2_Config>
 8008448:	4603      	mov	r3, r0
 800844a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800844c:	e00c      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3324      	adds	r3, #36	; 0x24
 8008452:	2101      	movs	r1, #1
 8008454:	4618      	mov	r0, r3
 8008456:	f001 fc83 	bl	8009d60 <RCCEx_PLL3_Config>
 800845a:	4603      	mov	r3, r0
 800845c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800845e:	e003      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	75fb      	strb	r3, [r7, #23]
      break;
 8008464:	e000      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008468:	7dfb      	ldrb	r3, [r7, #23]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d110      	bne.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800846e:	4b05      	ldr	r3, [pc, #20]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	f023 0207 	bic.w	r2, r3, #7
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800847a:	4902      	ldr	r1, [pc, #8]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800847c:	4313      	orrs	r3, r2
 800847e:	654b      	str	r3, [r1, #84]	; 0x54
 8008480:	e008      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008482:	bf00      	nop
 8008484:	58024400 	.word	0x58024400
 8008488:	58024800 	.word	0x58024800
 800848c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d039      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d820      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x934>
 80084aa:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	080084f3 	.word	0x080084f3
 80084b4:	080084c9 	.word	0x080084c9
 80084b8:	080084db 	.word	0x080084db
 80084bc:	080084f3 	.word	0x080084f3
 80084c0:	080084f3 	.word	0x080084f3
 80084c4:	080084f3 	.word	0x080084f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3304      	adds	r3, #4
 80084cc:	2101      	movs	r1, #1
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 fb94 	bl	8009bfc <RCCEx_PLL2_Config>
 80084d4:	4603      	mov	r3, r0
 80084d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80084d8:	e00c      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	2101      	movs	r1, #1
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fc3d 	bl	8009d60 <RCCEx_PLL3_Config>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80084ea:	e003      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	e000      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80084f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084fa:	4bb7      	ldr	r3, [pc, #732]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fe:	f023 0207 	bic.w	r2, r3, #7
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008508:	49b3      	ldr	r1, [pc, #716]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800850a:	4313      	orrs	r3, r2
 800850c:	658b      	str	r3, [r1, #88]	; 0x58
 800850e:	e001      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008510:	7dfb      	ldrb	r3, [r7, #23]
 8008512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0320 	and.w	r3, r3, #32
 800851c:	2b00      	cmp	r3, #0
 800851e:	d04b      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800852a:	d02e      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800852c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008530:	d828      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008536:	d02a      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853c:	d822      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800853e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008542:	d026      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008544:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008548:	d81c      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800854a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800854e:	d010      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008554:	d816      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01d      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800855a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800855e:	d111      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3304      	adds	r3, #4
 8008564:	2100      	movs	r1, #0
 8008566:	4618      	mov	r0, r3
 8008568:	f001 fb48 	bl	8009bfc <RCCEx_PLL2_Config>
 800856c:	4603      	mov	r3, r0
 800856e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008570:	e012      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3324      	adds	r3, #36	; 0x24
 8008576:	2102      	movs	r1, #2
 8008578:	4618      	mov	r0, r3
 800857a:	f001 fbf1 	bl	8009d60 <RCCEx_PLL3_Config>
 800857e:	4603      	mov	r3, r0
 8008580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008582:	e009      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	75fb      	strb	r3, [r7, #23]
      break;
 8008588:	e006      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800858a:	bf00      	nop
 800858c:	e004      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800858e:	bf00      	nop
 8008590:	e002      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008592:	bf00      	nop
 8008594:	e000      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10a      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800859e:	4b8e      	ldr	r3, [pc, #568]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ac:	498a      	ldr	r1, [pc, #552]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	654b      	str	r3, [r1, #84]	; 0x54
 80085b2:	e001      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d04b      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80085ce:	d02e      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80085d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80085d4:	d828      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80085d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085da:	d02a      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80085dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e0:	d822      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80085e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085e6:	d026      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80085e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085ec:	d81c      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80085ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085f2:	d010      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80085f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085f8:	d816      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01d      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80085fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008602:	d111      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3304      	adds	r3, #4
 8008608:	2100      	movs	r1, #0
 800860a:	4618      	mov	r0, r3
 800860c:	f001 faf6 	bl	8009bfc <RCCEx_PLL2_Config>
 8008610:	4603      	mov	r3, r0
 8008612:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008614:	e012      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	3324      	adds	r3, #36	; 0x24
 800861a:	2102      	movs	r1, #2
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fb9f 	bl	8009d60 <RCCEx_PLL3_Config>
 8008622:	4603      	mov	r3, r0
 8008624:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008626:	e009      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	e006      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800862e:	bf00      	nop
 8008630:	e004      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008632:	bf00      	nop
 8008634:	e002      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008636:	bf00      	nop
 8008638:	e000      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800863a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008642:	4b65      	ldr	r3, [pc, #404]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008646:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008650:	4961      	ldr	r1, [pc, #388]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008652:	4313      	orrs	r3, r2
 8008654:	658b      	str	r3, [r1, #88]	; 0x58
 8008656:	e001      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008664:	2b00      	cmp	r3, #0
 8008666:	d04b      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800866e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008672:	d02e      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008674:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008678:	d828      	bhi.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800867a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800867e:	d02a      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008684:	d822      	bhi.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008686:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800868a:	d026      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800868c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008690:	d81c      	bhi.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008696:	d010      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800869c:	d816      	bhi.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01d      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80086a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a6:	d111      	bne.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3304      	adds	r3, #4
 80086ac:	2100      	movs	r1, #0
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 faa4 	bl	8009bfc <RCCEx_PLL2_Config>
 80086b4:	4603      	mov	r3, r0
 80086b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80086b8:	e012      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3324      	adds	r3, #36	; 0x24
 80086be:	2102      	movs	r1, #2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 fb4d 	bl	8009d60 <RCCEx_PLL3_Config>
 80086c6:	4603      	mov	r3, r0
 80086c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80086ca:	e009      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	75fb      	strb	r3, [r7, #23]
      break;
 80086d0:	e006      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80086d2:	bf00      	nop
 80086d4:	e004      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80086d6:	bf00      	nop
 80086d8:	e002      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80086de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10a      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80086e6:	4b3c      	ldr	r3, [pc, #240]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086f4:	4938      	ldr	r1, [pc, #224]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	658b      	str	r3, [r1, #88]	; 0x58
 80086fa:	e001      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0308 	and.w	r3, r3, #8
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01a      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008716:	d10a      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3324      	adds	r3, #36	; 0x24
 800871c:	2102      	movs	r1, #2
 800871e:	4618      	mov	r0, r3
 8008720:	f001 fb1e 	bl	8009d60 <RCCEx_PLL3_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800872e:	4b2a      	ldr	r3, [pc, #168]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008732:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800873c:	4926      	ldr	r1, [pc, #152]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800873e:	4313      	orrs	r3, r2
 8008740:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0310 	and.w	r3, r3, #16
 800874a:	2b00      	cmp	r3, #0
 800874c:	d01a      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008758:	d10a      	bne.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3324      	adds	r3, #36	; 0x24
 800875e:	2102      	movs	r1, #2
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fafd 	bl	8009d60 <RCCEx_PLL3_Config>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008770:	4b19      	ldr	r3, [pc, #100]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800877e:	4916      	ldr	r1, [pc, #88]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008780:	4313      	orrs	r3, r2
 8008782:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d036      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800879a:	d01f      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800879c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087a0:	d817      	bhi.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80087a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087aa:	d009      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80087ac:	e011      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3304      	adds	r3, #4
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 fa21 	bl	8009bfc <RCCEx_PLL2_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80087be:	e00e      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3324      	adds	r3, #36	; 0x24
 80087c4:	2102      	movs	r1, #2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 faca 	bl	8009d60 <RCCEx_PLL3_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80087d0:	e005      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	75fb      	strb	r3, [r7, #23]
      break;
 80087d6:	e002      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80087d8:	58024400 	.word	0x58024400
      break;
 80087dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087e4:	4b93      	ldr	r3, [pc, #588]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80087f2:	4990      	ldr	r1, [pc, #576]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	658b      	str	r3, [r1, #88]	; 0x58
 80087f8:	e001      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d033      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008810:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008814:	d01c      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008816:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800881a:	d816      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800881c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008820:	d003      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008826:	d007      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008828:	e00f      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800882a:	4b82      	ldr	r3, [pc, #520]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	4a81      	ldr	r2, [pc, #516]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008836:	e00c      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	3324      	adds	r3, #36	; 0x24
 800883c:	2101      	movs	r1, #1
 800883e:	4618      	mov	r0, r3
 8008840:	f001 fa8e 	bl	8009d60 <RCCEx_PLL3_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008848:	e003      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
      break;
 800884e:	e000      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10a      	bne.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008858:	4b76      	ldr	r3, [pc, #472]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800885a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008866:	4973      	ldr	r1, [pc, #460]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008868:	4313      	orrs	r3, r2
 800886a:	654b      	str	r3, [r1, #84]	; 0x54
 800886c:	e001      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d029      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888a:	d007      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800888c:	e00f      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800888e:	4b69      	ldr	r3, [pc, #420]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008892:	4a68      	ldr	r2, [pc, #416]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800889a:	e00b      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3304      	adds	r3, #4
 80088a0:	2102      	movs	r1, #2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 f9aa 	bl	8009bfc <RCCEx_PLL2_Config>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80088ac:	e002      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
      break;
 80088b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088ba:	4b5e      	ldr	r3, [pc, #376]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c6:	495b      	ldr	r1, [pc, #364]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80088cc:	e001      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3324      	adds	r3, #36	; 0x24
 80088e2:	2102      	movs	r1, #2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f001 fa3b 	bl	8009d60 <RCCEx_PLL3_Config>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d030      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008908:	d017      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800890a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800890e:	d811      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008914:	d013      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891a:	d80b      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d010      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008924:	d106      	bne.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008926:	4b43      	ldr	r3, [pc, #268]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	4a42      	ldr	r2, [pc, #264]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800892c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008932:	e007      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	75fb      	strb	r3, [r7, #23]
      break;
 8008938:	e004      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800893a:	bf00      	nop
 800893c:	e002      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800893e:	bf00      	nop
 8008940:	e000      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800894a:	4b3a      	ldr	r3, [pc, #232]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800894c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008956:	4937      	ldr	r1, [pc, #220]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008958:	4313      	orrs	r3, r2
 800895a:	654b      	str	r3, [r1, #84]	; 0x54
 800895c:	e001      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d008      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800896e:	4b31      	ldr	r3, [pc, #196]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008972:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897a:	492e      	ldr	r1, [pc, #184]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800897c:	4313      	orrs	r3, r2
 800897e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800898c:	4b29      	ldr	r3, [pc, #164]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800899a:	4926      	ldr	r1, [pc, #152]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800899c:	4313      	orrs	r3, r2
 800899e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d008      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089ac:	4b21      	ldr	r3, [pc, #132]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089b8:	491e      	ldr	r1, [pc, #120]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00d      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089ca:	4b1a      	ldr	r3, [pc, #104]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	4a19      	ldr	r2, [pc, #100]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089d4:	6113      	str	r3, [r2, #16]
 80089d6:	4b17      	ldr	r3, [pc, #92]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089d8:	691a      	ldr	r2, [r3, #16]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80089e0:	4914      	ldr	r1, [pc, #80]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da08      	bge.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80089ee:	4b11      	ldr	r3, [pc, #68]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089fa:	490e      	ldr	r1, [pc, #56]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a1a:	4906      	ldr	r1, [pc, #24]	; (8008a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008a20:	7dbb      	ldrb	r3, [r7, #22]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e000      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	58024400 	.word	0x58024400

08008a38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b090      	sub	sp, #64	; 0x40
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a46:	f040 8095 	bne.w	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008a4a:	4bae      	ldr	r3, [pc, #696]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	633b      	str	r3, [r7, #48]	; 0x30
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	2b04      	cmp	r3, #4
 8008a58:	f200 8088 	bhi.w	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008a5c:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a62:	bf00      	nop
 8008a64:	08008a79 	.word	0x08008a79
 8008a68:	08008aa1 	.word	0x08008aa1
 8008a6c:	08008ac9 	.word	0x08008ac9
 8008a70:	08008b65 	.word	0x08008b65
 8008a74:	08008af1 	.word	0x08008af1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a78:	4ba2      	ldr	r3, [pc, #648]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a84:	d108      	bne.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 ff64 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a94:	f000 bc95 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a9c:	f000 bc91 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aa0:	4b98      	ldr	r3, [pc, #608]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aac:	d108      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aae:	f107 0318 	add.w	r3, r7, #24
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fca8 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008abc:	f000 bc81 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac4:	f000 bc7d 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ac8:	4b8e      	ldr	r3, [pc, #568]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ad4:	d108      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ad6:	f107 030c 	add.w	r3, r7, #12
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fde8 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ae4:	f000 bc6d 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aec:	f000 bc69 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008af0:	4b84      	ldr	r3, [pc, #528]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008af8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008afa:	4b82      	ldr	r3, [pc, #520]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d10c      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d109      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b0c:	4b7d      	ldr	r3, [pc, #500]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	08db      	lsrs	r3, r3, #3
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	4a7c      	ldr	r2, [pc, #496]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008b18:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b1e:	e01f      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b20:	4b78      	ldr	r3, [pc, #480]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2c:	d106      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b34:	d102      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b36:	4b75      	ldr	r3, [pc, #468]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b3a:	e011      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b3c:	4b71      	ldr	r3, [pc, #452]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b48:	d106      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b50:	d102      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b52:	4b6f      	ldr	r3, [pc, #444]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b56:	e003      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b5c:	f000 bc31 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b60:	f000 bc2f 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b64:	4b6b      	ldr	r3, [pc, #428]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b68:	f000 bc2b 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b70:	f000 bc27 	b.w	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b7a:	f040 8095 	bne.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008b7e:	4b61      	ldr	r3, [pc, #388]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b82:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008b86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8e:	d04d      	beq.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b96:	f200 8084 	bhi.w	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	2bc0      	cmp	r3, #192	; 0xc0
 8008b9e:	d07d      	beq.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8008ba4:	d87d      	bhi.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	2b80      	cmp	r3, #128	; 0x80
 8008baa:	d02d      	beq.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bae:	2b80      	cmp	r3, #128	; 0x80
 8008bb0:	d877      	bhi.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	2b40      	cmp	r3, #64	; 0x40
 8008bbc:	d012      	beq.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008bbe:	e070      	b.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bc0:	4b50      	ldr	r3, [pc, #320]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bcc:	d107      	bne.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fec0 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bdc:	e3f1      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be2:	e3ee      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008be4:	4b47      	ldr	r3, [pc, #284]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bf0:	d107      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf2:	f107 0318 	add.w	r3, r7, #24
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fc06 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c00:	e3df      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c06:	e3dc      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c08:	4b3e      	ldr	r3, [pc, #248]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c14:	d107      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c16:	f107 030c 	add.w	r3, r7, #12
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fd48 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c24:	e3cd      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c2a:	e3ca      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c2c:	4b35      	ldr	r3, [pc, #212]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c36:	4b33      	ldr	r3, [pc, #204]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0304 	and.w	r3, r3, #4
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d10c      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d109      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c48:	4b2e      	ldr	r3, [pc, #184]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	08db      	lsrs	r3, r3, #3
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	4a2d      	ldr	r2, [pc, #180]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008c54:	fa22 f303 	lsr.w	r3, r2, r3
 8008c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c5a:	e01e      	b.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c5c:	4b29      	ldr	r3, [pc, #164]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c68:	d106      	bne.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c70:	d102      	bne.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c72:	4b26      	ldr	r3, [pc, #152]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c76:	e010      	b.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c78:	4b22      	ldr	r3, [pc, #136]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c84:	d106      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c8c:	d102      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c8e:	4b20      	ldr	r3, [pc, #128]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c92:	e002      	b.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c98:	e393      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c9a:	e392      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c9c:	4b1d      	ldr	r3, [pc, #116]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca0:	e38f      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca6:	e38c      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cae:	f040 80a7 	bne.w	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008cb2:	4b14      	ldr	r3, [pc, #80]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008cba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cc2:	d05f      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cca:	f200 8096 	bhi.w	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cd4:	f000 808e 	beq.w	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cde:	f200 808c 	bhi.w	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ce8:	d03a      	beq.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cf0:	f200 8083 	bhi.w	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00e      	beq.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d00:	d01c      	beq.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008d02:	e07a      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008d04:	58024400 	.word	0x58024400
 8008d08:	03d09000 	.word	0x03d09000
 8008d0c:	003d0900 	.word	0x003d0900
 8008d10:	00f42400 	.word	0x00f42400
 8008d14:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d18:	4baa      	ldr	r3, [pc, #680]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d24:	d107      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fe14 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d34:	e345      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3a:	e342      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d3c:	4ba1      	ldr	r3, [pc, #644]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d48:	d107      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d4a:	f107 0318 	add.w	r3, r7, #24
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fb5a 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d58:	e333      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d5e:	e330      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d60:	4b98      	ldr	r3, [pc, #608]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d6c:	d107      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d6e:	f107 030c 	add.w	r3, r7, #12
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fc9c 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d7c:	e321      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d82:	e31e      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d84:	4b8f      	ldr	r3, [pc, #572]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d8c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d8e:	4b8d      	ldr	r3, [pc, #564]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d10c      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008da0:	4b88      	ldr	r3, [pc, #544]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	08db      	lsrs	r3, r3, #3
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	4a87      	ldr	r2, [pc, #540]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db2:	e01e      	b.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008db4:	4b83      	ldr	r3, [pc, #524]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc0:	d106      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dc8:	d102      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008dca:	4b80      	ldr	r3, [pc, #512]	; (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dce:	e010      	b.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dd0:	4b7c      	ldr	r3, [pc, #496]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ddc:	d106      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008de4:	d102      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008de6:	4b7a      	ldr	r3, [pc, #488]	; (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dea:	e002      	b.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008df0:	e2e7      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008df2:	e2e6      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008df4:	4b77      	ldr	r3, [pc, #476]	; (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008df8:	e2e3      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dfe:	e2e0      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e06:	f040 809c 	bne.w	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008e0a:	4b6e      	ldr	r3, [pc, #440]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e0e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008e12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e1a:	d054      	beq.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e22:	f200 808b 	bhi.w	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e2c:	f000 8083 	beq.w	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e36:	f200 8081 	bhi.w	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e40:	d02f      	beq.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e48:	d878      	bhi.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d004      	beq.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e56:	d012      	beq.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008e58:	e070      	b.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e5a:	4b5a      	ldr	r3, [pc, #360]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e66:	d107      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fd73 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e76:	e2a4      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7c:	e2a1      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e7e:	4b51      	ldr	r3, [pc, #324]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e8a:	d107      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e8c:	f107 0318 	add.w	r3, r7, #24
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fab9 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008e9a:	e292      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ea0:	e28f      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ea2:	4b48      	ldr	r3, [pc, #288]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eae:	d107      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eb0:	f107 030c 	add.w	r3, r7, #12
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fbfb 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ebe:	e280      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec4:	e27d      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ec6:	4b3f      	ldr	r3, [pc, #252]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ece:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ed0:	4b3c      	ldr	r3, [pc, #240]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d10c      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ee2:	4b38      	ldr	r3, [pc, #224]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	08db      	lsrs	r3, r3, #3
 8008ee8:	f003 0303 	and.w	r3, r3, #3
 8008eec:	4a36      	ldr	r2, [pc, #216]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008eee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef4:	e01e      	b.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ef6:	4b33      	ldr	r3, [pc, #204]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f02:	d106      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f0a:	d102      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f0c:	4b2f      	ldr	r3, [pc, #188]	; (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f10:	e010      	b.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f12:	4b2c      	ldr	r3, [pc, #176]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f1e:	d106      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f26:	d102      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f28:	4b29      	ldr	r3, [pc, #164]	; (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f2c:	e002      	b.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f32:	e246      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f34:	e245      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f36:	4b27      	ldr	r3, [pc, #156]	; (8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f3a:	e242      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f40:	e23f      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f48:	f040 80a8 	bne.w	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008f4c:	4b1d      	ldr	r3, [pc, #116]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008f54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f5c:	d060      	beq.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f64:	f200 8097 	bhi.w	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f6e:	f000 808f 	beq.w	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f78:	f200 808d 	bhi.w	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f82:	d03b      	beq.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8a:	f200 8084 	bhi.w	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9a:	d01d      	beq.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008f9c:	e07b      	b.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008faa:	d107      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fcd1 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fba:	e202      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fc0:	e1ff      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fc2:	bf00      	nop
 8008fc4:	58024400 	.word	0x58024400
 8008fc8:	03d09000 	.word	0x03d09000
 8008fcc:	003d0900 	.word	0x003d0900
 8008fd0:	00f42400 	.word	0x00f42400
 8008fd4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fd8:	4ba3      	ldr	r3, [pc, #652]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fe4:	d107      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe6:	f107 0318 	add.w	r3, r7, #24
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 fa0c 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ff4:	e1e5      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ffa:	e1e2      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ffc:	4b9a      	ldr	r3, [pc, #616]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009008:	d107      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800900a:	f107 030c 	add.w	r3, r7, #12
 800900e:	4618      	mov	r0, r3
 8009010:	f000 fb4e 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009018:	e1d3      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800901e:	e1d0      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009020:	4b91      	ldr	r3, [pc, #580]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009028:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800902a:	4b8f      	ldr	r3, [pc, #572]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b04      	cmp	r3, #4
 8009034:	d10c      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009038:	2b00      	cmp	r3, #0
 800903a:	d109      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800903c:	4b8a      	ldr	r3, [pc, #552]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	08db      	lsrs	r3, r3, #3
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	4a89      	ldr	r2, [pc, #548]	; (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800904e:	e01e      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009050:	4b85      	ldr	r3, [pc, #532]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800905c:	d106      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800905e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009064:	d102      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009066:	4b82      	ldr	r3, [pc, #520]	; (8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800906a:	e010      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800906c:	4b7e      	ldr	r3, [pc, #504]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009078:	d106      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800907a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009080:	d102      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009082:	4b7c      	ldr	r3, [pc, #496]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009086:	e002      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800908c:	e199      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800908e:	e198      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009090:	4b79      	ldr	r3, [pc, #484]	; (8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009094:	e195      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800909a:	e192      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090a2:	d173      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80090a4:	4b70      	ldr	r3, [pc, #448]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090b4:	d02f      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80090b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090bc:	d863      	bhi.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ca:	d012      	beq.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80090cc:	e05b      	b.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ce:	4b66      	ldr	r3, [pc, #408]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090da:	d107      	bne.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090dc:	f107 0318 	add.w	r3, r7, #24
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 f991 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090ea:	e16a      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f0:	e167      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090f2:	4b5d      	ldr	r3, [pc, #372]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090fe:	d107      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009100:	f107 030c 	add.w	r3, r7, #12
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fad3 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800910e:	e158      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009114:	e155      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009116:	4b54      	ldr	r3, [pc, #336]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800911e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009120:	4b51      	ldr	r3, [pc, #324]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b04      	cmp	r3, #4
 800912a:	d10c      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800912c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009132:	4b4d      	ldr	r3, [pc, #308]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	08db      	lsrs	r3, r3, #3
 8009138:	f003 0303 	and.w	r3, r3, #3
 800913c:	4a4b      	ldr	r2, [pc, #300]	; (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800913e:	fa22 f303 	lsr.w	r3, r2, r3
 8009142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009144:	e01e      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009146:	4b48      	ldr	r3, [pc, #288]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009152:	d106      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800915a:	d102      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800915c:	4b44      	ldr	r3, [pc, #272]	; (8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009160:	e010      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009162:	4b41      	ldr	r3, [pc, #260]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800916a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800916e:	d106      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009176:	d102      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009178:	4b3e      	ldr	r3, [pc, #248]	; (8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800917c:	e002      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009182:	e11e      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009184:	e11d      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800918a:	e11a      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009192:	d133      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009194:	4b34      	ldr	r3, [pc, #208]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800919c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091aa:	d012      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80091ac:	e023      	b.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ae:	4b2e      	ldr	r3, [pc, #184]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091ba:	d107      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fbc9 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091ca:	e0fa      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091d0:	e0f7      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091d2:	4b25      	ldr	r3, [pc, #148]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091de:	d107      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e0:	f107 0318 	add.w	r3, r7, #24
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 f90f 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091ee:	e0e8      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f4:	e0e5      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091fa:	e0e2      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009202:	f040 808f 	bne.w	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009206:	4b18      	ldr	r3, [pc, #96]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800920e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009216:	d075      	beq.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800921e:	d87e      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009226:	d060      	beq.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922e:	d876      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009236:	d045      	beq.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800923e:	d86e      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009246:	d02b      	beq.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800924e:	d866      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	2b00      	cmp	r3, #0
 8009254:	d004      	beq.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800925c:	d00e      	beq.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800925e:	e05e      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009260:	f000 f8bc 	bl	80093dc <HAL_RCCEx_GetD3PCLK1Freq>
 8009264:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009266:	e0ac      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009268:	58024400 	.word	0x58024400
 800926c:	03d09000 	.word	0x03d09000
 8009270:	003d0900 	.word	0x003d0900
 8009274:	00f42400 	.word	0x00f42400
 8009278:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800927c:	4b53      	ldr	r3, [pc, #332]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009288:	d107      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800928a:	f107 0318 	add.w	r3, r7, #24
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f8ba 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009298:	e093      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800929e:	e090      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092a0:	4b4a      	ldr	r3, [pc, #296]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092ac:	d107      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ae:	f107 030c 	add.w	r3, r7, #12
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f9fc 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092bc:	e081      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c2:	e07e      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092c4:	4b41      	ldr	r3, [pc, #260]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d109      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092d0:	4b3e      	ldr	r3, [pc, #248]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	08db      	lsrs	r3, r3, #3
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	4a3d      	ldr	r2, [pc, #244]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80092dc:	fa22 f303 	lsr.w	r3, r2, r3
 80092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092e2:	e06e      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092e8:	e06b      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092ea:	4b38      	ldr	r3, [pc, #224]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f6:	d102      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80092f8:	4b36      	ldr	r3, [pc, #216]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80092fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092fc:	e061      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009302:	e05e      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009304:	4b31      	ldr	r3, [pc, #196]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800930c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009310:	d102      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009312:	4b31      	ldr	r3, [pc, #196]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009314:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009316:	e054      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800931c:	e051      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009322:	e04e      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800932a:	d148      	bne.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800932c:	4b27      	ldr	r3, [pc, #156]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800932e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009334:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800933c:	d02a      	beq.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009344:	d838      	bhi.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	2b00      	cmp	r3, #0
 800934a:	d004      	beq.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009352:	d00d      	beq.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009354:	e030      	b.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009356:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800935e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009362:	d102      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009364:	4b1c      	ldr	r3, [pc, #112]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009368:	e02b      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800936e:	e028      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009370:	4b16      	ldr	r3, [pc, #88]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800937c:	d107      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800937e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fae8 	bl	8009958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800938c:	e019      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009392:	e016      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009394:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800939c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093a0:	d107      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a2:	f107 0318 	add.w	r3, r7, #24
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 f82e 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093b0:	e007      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b6:	e004      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093bc:	e001      	b.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80093c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3740      	adds	r7, #64	; 0x40
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	58024400 	.word	0x58024400
 80093d0:	03d09000 	.word	0x03d09000
 80093d4:	003d0900 	.word	0x003d0900
 80093d8:	00f42400 	.word	0x00f42400

080093dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80093e0:	f7fe fb4c 	bl	8007a7c <HAL_RCC_GetHCLKFreq>
 80093e4:	4602      	mov	r2, r0
 80093e6:	4b06      	ldr	r3, [pc, #24]	; (8009400 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	091b      	lsrs	r3, r3, #4
 80093ec:	f003 0307 	and.w	r3, r3, #7
 80093f0:	4904      	ldr	r1, [pc, #16]	; (8009404 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80093f2:	5ccb      	ldrb	r3, [r1, r3]
 80093f4:	f003 031f 	and.w	r3, r3, #31
 80093f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	58024400 	.word	0x58024400
 8009404:	080154c0 	.word	0x080154c0

08009408 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009408:	b480      	push	{r7}
 800940a:	b089      	sub	sp, #36	; 0x24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009410:	4ba1      	ldr	r3, [pc, #644]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009414:	f003 0303 	and.w	r3, r3, #3
 8009418:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800941a:	4b9f      	ldr	r3, [pc, #636]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800941c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941e:	0b1b      	lsrs	r3, r3, #12
 8009420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009424:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009426:	4b9c      	ldr	r3, [pc, #624]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	091b      	lsrs	r3, r3, #4
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009432:	4b99      	ldr	r3, [pc, #612]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009436:	08db      	lsrs	r3, r3, #3
 8009438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	fb02 f303 	mul.w	r3, r2, r3
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8111 	beq.w	8009678 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2b02      	cmp	r3, #2
 800945a:	f000 8083 	beq.w	8009564 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	2b02      	cmp	r3, #2
 8009462:	f200 80a1 	bhi.w	80095a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d056      	beq.n	8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009472:	e099      	b.n	80095a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009474:	4b88      	ldr	r3, [pc, #544]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0320 	and.w	r3, r3, #32
 800947c:	2b00      	cmp	r3, #0
 800947e:	d02d      	beq.n	80094dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009480:	4b85      	ldr	r3, [pc, #532]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	08db      	lsrs	r3, r3, #3
 8009486:	f003 0303 	and.w	r3, r3, #3
 800948a:	4a84      	ldr	r2, [pc, #528]	; (800969c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800948c:	fa22 f303 	lsr.w	r3, r2, r3
 8009490:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	ee07 3a90 	vmov	s15, r3
 8009498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094aa:	4b7b      	ldr	r3, [pc, #492]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80094be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80094da:	e087      	b.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80094ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ee:	4b6a      	ldr	r3, [pc, #424]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009502:	eddf 5a67 	vldr	s11, [pc, #412]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800950e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800951e:	e065      	b.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800952e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009532:	4b59      	ldr	r3, [pc, #356]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953a:	ee07 3a90 	vmov	s15, r3
 800953e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009542:	ed97 6a03 	vldr	s12, [r7, #12]
 8009546:	eddf 5a56 	vldr	s11, [pc, #344]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800954a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800954e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009562:	e043      	b.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80096ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009576:	4b48      	ldr	r3, [pc, #288]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009586:	ed97 6a03 	vldr	s12, [r7, #12]
 800958a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800958e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095a6:	e021      	b.n	80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80095b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ba:	4b37      	ldr	r3, [pc, #220]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80095ec:	4b2a      	ldr	r3, [pc, #168]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	0a5b      	lsrs	r3, r3, #9
 80095f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009606:	edd7 6a07 	vldr	s13, [r7, #28]
 800960a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800960e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009612:	ee17 2a90 	vmov	r2, s15
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800961a:	4b1f      	ldr	r3, [pc, #124]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	0c1b      	lsrs	r3, r3, #16
 8009620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009624:	ee07 3a90 	vmov	s15, r3
 8009628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009634:	edd7 6a07 	vldr	s13, [r7, #28]
 8009638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800963c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009640:	ee17 2a90 	vmov	r2, s15
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009648:	4b13      	ldr	r3, [pc, #76]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	0e1b      	lsrs	r3, r3, #24
 800964e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800965e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009662:	edd7 6a07 	vldr	s13, [r7, #28]
 8009666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800966a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800966e:	ee17 2a90 	vmov	r2, s15
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009676:	e008      	b.n	800968a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	609a      	str	r2, [r3, #8]
}
 800968a:	bf00      	nop
 800968c:	3724      	adds	r7, #36	; 0x24
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	58024400 	.word	0x58024400
 800969c:	03d09000 	.word	0x03d09000
 80096a0:	46000000 	.word	0x46000000
 80096a4:	4c742400 	.word	0x4c742400
 80096a8:	4a742400 	.word	0x4a742400
 80096ac:	4b742400 	.word	0x4b742400

080096b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b089      	sub	sp, #36	; 0x24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096b8:	4ba1      	ldr	r3, [pc, #644]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80096c2:	4b9f      	ldr	r3, [pc, #636]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	0d1b      	lsrs	r3, r3, #20
 80096c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80096ce:	4b9c      	ldr	r3, [pc, #624]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80096da:	4b99      	ldr	r3, [pc, #612]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096de:	08db      	lsrs	r3, r3, #3
 80096e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 8111 	beq.w	8009920 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	2b02      	cmp	r3, #2
 8009702:	f000 8083 	beq.w	800980c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	2b02      	cmp	r3, #2
 800970a:	f200 80a1 	bhi.w	8009850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d056      	beq.n	80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800971a:	e099      	b.n	8009850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800971c:	4b88      	ldr	r3, [pc, #544]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0320 	and.w	r3, r3, #32
 8009724:	2b00      	cmp	r3, #0
 8009726:	d02d      	beq.n	8009784 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009728:	4b85      	ldr	r3, [pc, #532]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	08db      	lsrs	r3, r3, #3
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	4a84      	ldr	r2, [pc, #528]	; (8009944 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009734:	fa22 f303 	lsr.w	r3, r2, r3
 8009738:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	ee07 3a90 	vmov	s15, r3
 8009740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009752:	4b7b      	ldr	r3, [pc, #492]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975a:	ee07 3a90 	vmov	s15, r3
 800975e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009762:	ed97 6a03 	vldr	s12, [r7, #12]
 8009766:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800976a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800976e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800977a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800977e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009782:	e087      	b.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800994c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009796:	4b6a      	ldr	r3, [pc, #424]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097c6:	e065      	b.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097da:	4b59      	ldr	r3, [pc, #356]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800980a:	e043      	b.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800981a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800981e:	4b48      	ldr	r3, [pc, #288]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800982e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009832:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800983e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800984e:	e021      	b.n	8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	ee07 3a90 	vmov	s15, r3
 8009856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800985e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009862:	4b37      	ldr	r3, [pc, #220]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009872:	ed97 6a03 	vldr	s12, [r7, #12]
 8009876:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800987a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800987e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009892:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009894:	4b2a      	ldr	r3, [pc, #168]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009898:	0a5b      	lsrs	r3, r3, #9
 800989a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80098b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ba:	ee17 2a90 	vmov	r2, s15
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80098c2:	4b1f      	ldr	r3, [pc, #124]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	0c1b      	lsrs	r3, r3, #16
 80098c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098cc:	ee07 3a90 	vmov	s15, r3
 80098d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80098e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098e8:	ee17 2a90 	vmov	r2, s15
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80098f0:	4b13      	ldr	r3, [pc, #76]	; (8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	0e1b      	lsrs	r3, r3, #24
 80098f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800990a:	edd7 6a07 	vldr	s13, [r7, #28]
 800990e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009916:	ee17 2a90 	vmov	r2, s15
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800991e:	e008      	b.n	8009932 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	609a      	str	r2, [r3, #8]
}
 8009932:	bf00      	nop
 8009934:	3724      	adds	r7, #36	; 0x24
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	58024400 	.word	0x58024400
 8009944:	03d09000 	.word	0x03d09000
 8009948:	46000000 	.word	0x46000000
 800994c:	4c742400 	.word	0x4c742400
 8009950:	4a742400 	.word	0x4a742400
 8009954:	4b742400 	.word	0x4b742400

08009958 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009958:	b480      	push	{r7}
 800995a:	b089      	sub	sp, #36	; 0x24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009960:	4ba0      	ldr	r3, [pc, #640]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009964:	f003 0303 	and.w	r3, r3, #3
 8009968:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800996a:	4b9e      	ldr	r3, [pc, #632]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800996c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996e:	091b      	lsrs	r3, r3, #4
 8009970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009974:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009976:	4b9b      	ldr	r3, [pc, #620]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009980:	4b98      	ldr	r3, [pc, #608]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009984:	08db      	lsrs	r3, r3, #3
 8009986:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	fb02 f303 	mul.w	r3, r2, r3
 8009990:	ee07 3a90 	vmov	s15, r3
 8009994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009998:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 8111 	beq.w	8009bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	f000 8083 	beq.w	8009ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	f200 80a1 	bhi.w	8009af6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d056      	beq.n	8009a6e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80099c0:	e099      	b.n	8009af6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099c2:	4b88      	ldr	r3, [pc, #544]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0320 	and.w	r3, r3, #32
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d02d      	beq.n	8009a2a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099ce:	4b85      	ldr	r3, [pc, #532]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	08db      	lsrs	r3, r3, #3
 80099d4:	f003 0303 	and.w	r3, r3, #3
 80099d8:	4a83      	ldr	r2, [pc, #524]	; (8009be8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80099da:	fa22 f303 	lsr.w	r3, r2, r3
 80099de:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	ee07 3a90 	vmov	s15, r3
 80099f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f8:	4b7a      	ldr	r3, [pc, #488]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a00:	ee07 3a90 	vmov	s15, r3
 8009a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a08:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a0c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a24:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a28:	e087      	b.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a34:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3c:	4b69      	ldr	r3, [pc, #420]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a44:	ee07 3a90 	vmov	s15, r3
 8009a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a50:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a6c:	e065      	b.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	ee07 3a90 	vmov	s15, r3
 8009a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a78:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a80:	4b58      	ldr	r3, [pc, #352]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a88:	ee07 3a90 	vmov	s15, r3
 8009a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a90:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a94:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ab0:	e043      	b.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac4:	4b47      	ldr	r3, [pc, #284]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009acc:	ee07 3a90 	vmov	s15, r3
 8009ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ad8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009af4:	e021      	b.n	8009b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b00:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b08:	4b36      	ldr	r3, [pc, #216]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b10:	ee07 3a90 	vmov	s15, r3
 8009b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b18:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b38:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009b3a:	4b2a      	ldr	r3, [pc, #168]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3e:	0a5b      	lsrs	r3, r3, #9
 8009b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b44:	ee07 3a90 	vmov	s15, r3
 8009b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b60:	ee17 2a90 	vmov	r2, s15
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009b68:	4b1e      	ldr	r3, [pc, #120]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6c:	0c1b      	lsrs	r3, r3, #16
 8009b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b8e:	ee17 2a90 	vmov	r2, s15
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9a:	0e1b      	lsrs	r3, r3, #24
 8009b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba0:	ee07 3a90 	vmov	s15, r3
 8009ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bbc:	ee17 2a90 	vmov	r2, s15
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009bc4:	e008      	b.n	8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	609a      	str	r2, [r3, #8]
}
 8009bd8:	bf00      	nop
 8009bda:	3724      	adds	r7, #36	; 0x24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	58024400 	.word	0x58024400
 8009be8:	03d09000 	.word	0x03d09000
 8009bec:	46000000 	.word	0x46000000
 8009bf0:	4c742400 	.word	0x4c742400
 8009bf4:	4a742400 	.word	0x4a742400
 8009bf8:	4b742400 	.word	0x4b742400

08009bfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c0a:	4b53      	ldr	r3, [pc, #332]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0e:	f003 0303 	and.w	r3, r3, #3
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d101      	bne.n	8009c1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e099      	b.n	8009d4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009c1a:	4b4f      	ldr	r3, [pc, #316]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a4e      	ldr	r2, [pc, #312]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c26:	f7f8 f805 	bl	8001c34 <HAL_GetTick>
 8009c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c2c:	e008      	b.n	8009c40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009c2e:	f7f8 f801 	bl	8001c34 <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d901      	bls.n	8009c40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e086      	b.n	8009d4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c40:	4b45      	ldr	r3, [pc, #276]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1f0      	bne.n	8009c2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009c4c:	4b42      	ldr	r3, [pc, #264]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	031b      	lsls	r3, r3, #12
 8009c5a:	493f      	ldr	r1, [pc, #252]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	628b      	str	r3, [r1, #40]	; 0x28
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	025b      	lsls	r3, r3, #9
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	431a      	orrs	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	041b      	lsls	r3, r3, #16
 8009c7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c82:	431a      	orrs	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	061b      	lsls	r3, r3, #24
 8009c8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c90:	4931      	ldr	r1, [pc, #196]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c96:	4b30      	ldr	r3, [pc, #192]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	492d      	ldr	r1, [pc, #180]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ca8:	4b2b      	ldr	r3, [pc, #172]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	f023 0220 	bic.w	r2, r3, #32
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	4928      	ldr	r1, [pc, #160]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009cba:	4b27      	ldr	r3, [pc, #156]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbe:	4a26      	ldr	r2, [pc, #152]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cc0:	f023 0310 	bic.w	r3, r3, #16
 8009cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009cc6:	4b24      	ldr	r3, [pc, #144]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cca:	4b24      	ldr	r3, [pc, #144]	; (8009d5c <RCCEx_PLL2_Config+0x160>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	69d2      	ldr	r2, [r2, #28]
 8009cd2:	00d2      	lsls	r2, r2, #3
 8009cd4:	4920      	ldr	r1, [pc, #128]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009cda:	4b1f      	ldr	r3, [pc, #124]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cde:	4a1e      	ldr	r2, [pc, #120]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009ce0:	f043 0310 	orr.w	r3, r3, #16
 8009ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d106      	bne.n	8009cfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009cec:	4b1a      	ldr	r3, [pc, #104]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf0:	4a19      	ldr	r2, [pc, #100]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cf8:	e00f      	b.n	8009d1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d106      	bne.n	8009d0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009d00:	4b15      	ldr	r3, [pc, #84]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	4a14      	ldr	r2, [pc, #80]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d0c:	e005      	b.n	8009d1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009d0e:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d12:	4a11      	ldr	r2, [pc, #68]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009d1a:	4b0f      	ldr	r3, [pc, #60]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a0e      	ldr	r2, [pc, #56]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d26:	f7f7 ff85 	bl	8001c34 <HAL_GetTick>
 8009d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d2c:	e008      	b.n	8009d40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d2e:	f7f7 ff81 	bl	8001c34 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d901      	bls.n	8009d40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e006      	b.n	8009d4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d40:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <RCCEx_PLL2_Config+0x15c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d0f0      	beq.n	8009d2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	58024400 	.word	0x58024400
 8009d5c:	ffff0007 	.word	0xffff0007

08009d60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d6e:	4b53      	ldr	r3, [pc, #332]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d72:	f003 0303 	and.w	r3, r3, #3
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d101      	bne.n	8009d7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e099      	b.n	8009eb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d7e:	4b4f      	ldr	r3, [pc, #316]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a4e      	ldr	r2, [pc, #312]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d8a:	f7f7 ff53 	bl	8001c34 <HAL_GetTick>
 8009d8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d90:	e008      	b.n	8009da4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009d92:	f7f7 ff4f 	bl	8001c34 <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d901      	bls.n	8009da4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e086      	b.n	8009eb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009da4:	4b45      	ldr	r3, [pc, #276]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1f0      	bne.n	8009d92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009db0:	4b42      	ldr	r3, [pc, #264]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	051b      	lsls	r3, r3, #20
 8009dbe:	493f      	ldr	r1, [pc, #252]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	628b      	str	r3, [r1, #40]	; 0x28
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	025b      	lsls	r3, r3, #9
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	041b      	lsls	r3, r3, #16
 8009de2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	061b      	lsls	r3, r3, #24
 8009df0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009df4:	4931      	ldr	r1, [pc, #196]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009dfa:	4b30      	ldr	r3, [pc, #192]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	492d      	ldr	r1, [pc, #180]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009e0c:	4b2b      	ldr	r3, [pc, #172]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	4928      	ldr	r1, [pc, #160]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e1e:	4b27      	ldr	r3, [pc, #156]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	4a26      	ldr	r2, [pc, #152]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e2a:	4b24      	ldr	r3, [pc, #144]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e2e:	4b24      	ldr	r3, [pc, #144]	; (8009ec0 <RCCEx_PLL3_Config+0x160>)
 8009e30:	4013      	ands	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	69d2      	ldr	r2, [r2, #28]
 8009e36:	00d2      	lsls	r2, r2, #3
 8009e38:	4920      	ldr	r1, [pc, #128]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e3e:	4b1f      	ldr	r3, [pc, #124]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e42:	4a1e      	ldr	r2, [pc, #120]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d106      	bne.n	8009e5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e50:	4b1a      	ldr	r3, [pc, #104]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	4a19      	ldr	r2, [pc, #100]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e5c:	e00f      	b.n	8009e7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d106      	bne.n	8009e72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009e64:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	4a14      	ldr	r2, [pc, #80]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e70:	e005      	b.n	8009e7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e72:	4b12      	ldr	r3, [pc, #72]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e76:	4a11      	ldr	r2, [pc, #68]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a0e      	ldr	r2, [pc, #56]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e8a:	f7f7 fed3 	bl	8001c34 <HAL_GetTick>
 8009e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e90:	e008      	b.n	8009ea4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e92:	f7f7 fecf 	bl	8001c34 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d901      	bls.n	8009ea4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e006      	b.n	8009eb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <RCCEx_PLL3_Config+0x15c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d0f0      	beq.n	8009e92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	58024400 	.word	0x58024400
 8009ec0:	ffff0007 	.word	0xffff0007

08009ec4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e075      	b.n	8009fc2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d105      	bne.n	8009eee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7f7 f875 	bl	8000fd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f868 	bl	8009fcc <HAL_SD_InitCard>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e05d      	b.n	8009fc2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009f06:	f107 0308 	add.w	r3, r7, #8
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fda5 	bl	800aa5c <HAL_SD_GetCardStatus>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e052      	b.n	8009fc2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009f1c:	7e3b      	ldrb	r3, [r7, #24]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009f22:	7e7b      	ldrb	r3, [r7, #25]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d10a      	bne.n	8009f46 <HAL_SD_Init+0x82>
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <HAL_SD_Init+0x78>
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d004      	beq.n	8009f46 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f42:	659a      	str	r2, [r3, #88]	; 0x58
 8009f44:	e00b      	b.n	8009f5e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d104      	bne.n	8009f58 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f54:	659a      	str	r2, [r3, #88]	; 0x58
 8009f56:	e002      	b.n	8009f5e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fe5b 	bl	800ac20 <HAL_SD_ConfigWideBusOperation>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e026      	b.n	8009fc2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009f74:	f7f7 fe5e 	bl	8001c34 <HAL_GetTick>
 8009f78:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009f7a:	e011      	b.n	8009fa0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f7c:	f7f7 fe5a 	bl	8001c34 <HAL_GetTick>
 8009f80:	4602      	mov	r2, r0
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8a:	d109      	bne.n	8009fa0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f92:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e010      	b.n	8009fc2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 ff4d 	bl	800ae40 <HAL_SD_GetCardState>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b04      	cmp	r3, #4
 8009faa:	d1e7      	bne.n	8009f7c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3728      	adds	r7, #40	; 0x28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fcc:	b590      	push	{r4, r7, lr}
 8009fce:	b08d      	sub	sp, #52	; 0x34
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009fe4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009fe8:	f7fe fd26 	bl	8008a38 <HAL_RCCEx_GetPeriphCLKFreq>
 8009fec:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d109      	bne.n	800a008 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a002:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e06a      	b.n	800a0de <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	0a1b      	lsrs	r3, r3, #8
 800a00c:	4a36      	ldr	r2, [pc, #216]	; (800a0e8 <HAL_SD_InitCard+0x11c>)
 800a00e:	fba2 2303 	umull	r2, r3, r2, r3
 800a012:	091b      	lsrs	r3, r3, #4
 800a014:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681c      	ldr	r4, [r3, #0]
 800a01a:	466a      	mov	r2, sp
 800a01c:	f107 0318 	add.w	r3, r7, #24
 800a020:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a024:	e882 0003 	stmia.w	r2, {r0, r1}
 800a028:	f107 030c 	add.w	r3, r7, #12
 800a02c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a02e:	4620      	mov	r0, r4
 800a030:	f004 f836 	bl	800e0a0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f004 f879 	bl	800e130 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a044:	fbb2 f3f3 	udiv	r3, r2, r3
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a04a:	4a28      	ldr	r2, [pc, #160]	; (800a0ec <HAL_SD_InitCard+0x120>)
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a052:	3301      	adds	r3, #1
 800a054:	4618      	mov	r0, r3
 800a056:	f7f7 fdf9 	bl	8001c4c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 ffcc 	bl	800aff8 <SD_PowerON>
 800a060:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	431a      	orrs	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e02e      	b.n	800a0de <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fefd 	bl	800ae80 <SD_InitCard>
 800a086:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00b      	beq.n	800a0a6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	431a      	orrs	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e01b      	b.n	800a0de <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f004 f8d4 	bl	800e25c <SDMMC_CmdBlockLength>
 800a0b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00f      	beq.n	800a0dc <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a0b      	ldr	r2, [pc, #44]	; (800a0f0 <HAL_SD_InitCard+0x124>)
 800a0c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e000      	b.n	800a0de <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	372c      	adds	r7, #44	; 0x2c
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd90      	pop	{r4, r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	014f8b59 	.word	0x014f8b59
 800a0ec:	00012110 	.word	0x00012110
 800a0f0:	1fe00fff 	.word	0x1fe00fff

0800a0f4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b08c      	sub	sp, #48	; 0x30
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d107      	bne.n	800a11c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a110:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e08d      	b.n	800a238 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b01      	cmp	r3, #1
 800a126:	f040 8086 	bne.w	800a236 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	441a      	add	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d907      	bls.n	800a14e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a142:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e074      	b.n	800a238 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2203      	movs	r2, #3
 800a152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2200      	movs	r2, #0
 800a15c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	025a      	lsls	r2, r3, #9
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a170:	2b01      	cmp	r3, #1
 800a172:	d002      	beq.n	800a17a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	025b      	lsls	r3, r3, #9
 800a178:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a17a:	f04f 33ff 	mov.w	r3, #4294967295
 800a17e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	025b      	lsls	r3, r3, #9
 800a184:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a186:	2390      	movs	r3, #144	; 0x90
 800a188:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a18a:	2302      	movs	r3, #2
 800a18c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a18e:	2300      	movs	r3, #0
 800a190:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a192:	2300      	movs	r3, #0
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f107 0210 	add.w	r2, r7, #16
 800a19e:	4611      	mov	r1, r2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f004 f82f 	bl	800e204 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68da      	ldr	r2, [r3, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1b4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d90a      	bls.n	800a1e2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2282      	movs	r2, #130	; 0x82
 800a1d0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f004 f885 	bl	800e2e8 <SDMMC_CmdReadMultiBlock>
 800a1de:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1e0:	e009      	b.n	800a1f6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2281      	movs	r2, #129	; 0x81
 800a1e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f004 f857 	bl	800e2a2 <SDMMC_CmdReadSingleBlock>
 800a1f4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d012      	beq.n	800a222 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0f      	ldr	r2, [pc, #60]	; (800a240 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a202:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	431a      	orrs	r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e00a      	b.n	800a238 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a230:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	e000      	b.n	800a238 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a236:	2302      	movs	r3, #2
  }
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3730      	adds	r7, #48	; 0x30
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	1fe00fff 	.word	0x1fe00fff

0800a244 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08c      	sub	sp, #48	; 0x30
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d107      	bne.n	800a26c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a260:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e08d      	b.n	800a388 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b01      	cmp	r3, #1
 800a276:	f040 8086 	bne.w	800a386 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	441a      	add	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d907      	bls.n	800a29e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e074      	b.n	800a388 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2203      	movs	r2, #3
 800a2a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	025a      	lsls	r2, r3, #9
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d002      	beq.n	800a2ca <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c6:	025b      	lsls	r3, r3, #9
 800a2c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ce:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	025b      	lsls	r3, r3, #9
 800a2d4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a2d6:	2390      	movs	r3, #144	; 0x90
 800a2d8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f107 0210 	add.w	r2, r7, #16
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f003 ff87 	bl	800e204 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68da      	ldr	r2, [r3, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a304:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2201      	movs	r2, #1
 800a314:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d90a      	bls.n	800a332 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	22a0      	movs	r2, #160	; 0xa0
 800a320:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a328:	4618      	mov	r0, r3
 800a32a:	f004 f823 	bl	800e374 <SDMMC_CmdWriteMultiBlock>
 800a32e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a330:	e009      	b.n	800a346 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2290      	movs	r2, #144	; 0x90
 800a336:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a33e:	4618      	mov	r0, r3
 800a340:	f003 fff5 	bl	800e32e <SDMMC_CmdWriteSingleBlock>
 800a344:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d012      	beq.n	800a372 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a0f      	ldr	r2, [pc, #60]	; (800a390 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35a:	431a      	orrs	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e00a      	b.n	800a388 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a380:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	e000      	b.n	800a388 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a386:	2302      	movs	r3, #2
  }
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3730      	adds	r7, #48	; 0x30
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	1fe00fff 	.word	0x1fe00fff

0800a394 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d008      	beq.n	800a3c2 <HAL_SD_IRQHandler+0x2e>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f003 0308 	and.w	r3, r3, #8
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f001 f904 	bl	800b5c8 <SD_Read_IT>
 800a3c0:	e19a      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 80ac 	beq.w	800a52a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3da:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	4b9d      	ldr	r3, [pc, #628]	; (800a65c <HAL_SD_IRQHandler+0x2c8>)
 800a3e8:	400b      	ands	r3, r1
 800a3ea:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a3fa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a40a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b00      	cmp	r3, #0
 800a414:	d038      	beq.n	800a488 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f003 0302 	and.w	r3, r3, #2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d104      	bne.n	800a42a <HAL_SD_IRQHandler+0x96>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f003 0320 	and.w	r3, r3, #32
 800a426:	2b00      	cmp	r3, #0
 800a428:	d011      	beq.n	800a44e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4618      	mov	r0, r3
 800a430:	f003 ffc4 	bl	800e3bc <SDMMC_CmdStopTransfer>
 800a434:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d008      	beq.n	800a44e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	431a      	orrs	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f959 	bl	800a700 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a83      	ldr	r2, [pc, #524]	; (800a660 <HAL_SD_IRQHandler+0x2cc>)
 800a454:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d104      	bne.n	800a478 <HAL_SD_IRQHandler+0xe4>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f003 0302 	and.w	r3, r3, #2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d003      	beq.n	800a480 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f005 ffe1 	bl	8010440 <HAL_SD_RxCpltCallback>
 800a47e:	e13b      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f005 ffd3 	bl	801042c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a486:	e137      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 8132 	beq.w	800a6f8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2200      	movs	r2, #0
 800a49a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d104      	bne.n	800a4c0 <HAL_SD_IRQHandler+0x12c>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d011      	beq.n	800a4e4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f003 ff79 	bl	800e3bc <SDMMC_CmdStopTransfer>
 800a4ca:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d008      	beq.n	800a4e4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f90e 	bl	800a700 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d104      	bne.n	800a506 <HAL_SD_IRQHandler+0x172>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f003 0320 	and.w	r3, r3, #32
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f005 ff90 	bl	801042c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d105      	bne.n	800a522 <HAL_SD_IRQHandler+0x18e>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 80eb 	beq.w	800a6f8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f005 ff8c 	bl	8010440 <HAL_SD_RxCpltCallback>
}
 800a528:	e0e6      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d008      	beq.n	800a54a <HAL_SD_IRQHandler+0x1b6>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f003 0308 	and.w	r3, r3, #8
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 f886 	bl	800b654 <SD_Write_IT>
 800a548:	e0d6      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a550:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a554:	2b00      	cmp	r3, #0
 800a556:	f000 80a2 	beq.w	800a69e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a560:	f003 0302 	and.w	r3, r3, #2
 800a564:	2b00      	cmp	r3, #0
 800a566:	d005      	beq.n	800a574 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56c:	f043 0202 	orr.w	r2, r3, #2
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d005      	beq.n	800a58e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a586:	f043 0208 	orr.w	r2, r3, #8
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a0:	f043 0220 	orr.w	r2, r3, #32
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ae:	f003 0310 	and.w	r3, r3, #16
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d005      	beq.n	800a5c2 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ba:	f043 0210 	orr.w	r2, r3, #16
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a26      	ldr	r2, [pc, #152]	; (800a660 <HAL_SD_IRQHandler+0x2cc>)
 800a5c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a5d8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5e8:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a608:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f003 fed4 	bl	800e3bc <SDMMC_CmdStopTransfer>
 800a614:	4602      	mov	r2, r0
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a61a:	431a      	orrs	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a62e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a638:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f003 0308 	and.w	r3, r3, #8
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00f      	beq.n	800a664 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f854 	bl	800a700 <HAL_SD_ErrorCallback>
}
 800a658:	e04e      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
 800a65a:	bf00      	nop
 800a65c:	ffff3ec5 	.word	0xffff3ec5
 800a660:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d044      	beq.n	800a6f8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a672:	2b00      	cmp	r3, #0
 800a674:	d040      	beq.n	800a6f8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a684:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2200      	movs	r2, #0
 800a68c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f832 	bl	800a700 <HAL_SD_ErrorCallback>
}
 800a69c:	e02c      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d025      	beq.n	800a6f8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10c      	bne.n	800a6de <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 f828 	bl	800b724 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a6d4:	e010      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f001 f810 	bl	800b6fc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a6dc:	e00c      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f001 f811 	bl	800b710 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a6ee:	e003      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fff9 	bl	800b6e8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a6f6:	e7ff      	b.n	800a6f8 <HAL_SD_IRQHandler+0x364>
 800a6f8:	bf00      	nop
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a722:	0f9b      	lsrs	r3, r3, #30
 800a724:	b2da      	uxtb	r2, r3
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72e:	0e9b      	lsrs	r3, r3, #26
 800a730:	b2db      	uxtb	r3, r3
 800a732:	f003 030f 	and.w	r3, r3, #15
 800a736:	b2da      	uxtb	r2, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a740:	0e1b      	lsrs	r3, r3, #24
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0303 	and.w	r3, r3, #3
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a752:	0c1b      	lsrs	r3, r3, #16
 800a754:	b2da      	uxtb	r2, r3
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a75e:	0a1b      	lsrs	r3, r3, #8
 800a760:	b2da      	uxtb	r2, r3
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a774:	0d1b      	lsrs	r3, r3, #20
 800a776:	b29a      	uxth	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a780:	0c1b      	lsrs	r3, r3, #16
 800a782:	b2db      	uxtb	r3, r3
 800a784:	f003 030f 	and.w	r3, r3, #15
 800a788:	b2da      	uxtb	r2, r3
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a792:	0bdb      	lsrs	r3, r3, #15
 800a794:	b2db      	uxtb	r3, r3
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7a4:	0b9b      	lsrs	r3, r3, #14
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b6:	0b5b      	lsrs	r3, r3, #13
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c8:	0b1b      	lsrs	r3, r3, #12
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d163      	bne.n	800a8ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7e8:	009a      	lsls	r2, r3, #2
 800a7ea:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a7f4:	0f92      	lsrs	r2, r2, #30
 800a7f6:	431a      	orrs	r2, r3
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a800:	0edb      	lsrs	r3, r3, #27
 800a802:	b2db      	uxtb	r3, r3
 800a804:	f003 0307 	and.w	r3, r3, #7
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a812:	0e1b      	lsrs	r3, r3, #24
 800a814:	b2db      	uxtb	r3, r3
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a824:	0d5b      	lsrs	r3, r3, #21
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0307 	and.w	r3, r3, #7
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a836:	0c9b      	lsrs	r3, r3, #18
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	f003 0307 	and.w	r3, r3, #7
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a848:	0bdb      	lsrs	r3, r3, #15
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	f003 0307 	and.w	r3, r3, #7
 800a850:	b2da      	uxtb	r2, r3
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	7e1b      	ldrb	r3, [r3, #24]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 0307 	and.w	r3, r3, #7
 800a86a:	3302      	adds	r3, #2
 800a86c:	2201      	movs	r2, #1
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a876:	fb02 f203 	mul.w	r2, r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	7a1b      	ldrb	r3, [r3, #8]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 030f 	and.w	r3, r3, #15
 800a888:	2201      	movs	r2, #1
 800a88a:	409a      	lsls	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a898:	0a52      	lsrs	r2, r2, #9
 800a89a:	fb02 f203 	mul.w	r2, r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8a8:	655a      	str	r2, [r3, #84]	; 0x54
 800a8aa:	e031      	b.n	800a910 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d11d      	bne.n	800a8f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8b8:	041b      	lsls	r3, r3, #16
 800a8ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8c2:	0c1b      	lsrs	r3, r3, #16
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	029a      	lsls	r2, r3, #10
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	655a      	str	r2, [r3, #84]	; 0x54
 800a8ee:	e00f      	b.n	800a910 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a58      	ldr	r2, [pc, #352]	; (800aa58 <HAL_SD_GetCardCSD+0x344>)
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e09d      	b.n	800aa4c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a914:	0b9b      	lsrs	r3, r3, #14
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a926:	09db      	lsrs	r3, r3, #7
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a948:	0fdb      	lsrs	r3, r3, #31
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a954:	0f5b      	lsrs	r3, r3, #29
 800a956:	b2db      	uxtb	r3, r3
 800a958:	f003 0303 	and.w	r3, r3, #3
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a966:	0e9b      	lsrs	r3, r3, #26
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	f003 0307 	and.w	r3, r3, #7
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a978:	0d9b      	lsrs	r3, r3, #22
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	b2da      	uxtb	r2, r3
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a98a:	0d5b      	lsrs	r3, r3, #21
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	b2da      	uxtb	r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9a6:	0c1b      	lsrs	r3, r3, #16
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9ba:	0bdb      	lsrs	r3, r3, #15
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9ce:	0b9b      	lsrs	r3, r3, #14
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9e2:	0b5b      	lsrs	r3, r3, #13
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9f6:	0b1b      	lsrs	r3, r3, #12
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa0a:	0a9b      	lsrs	r3, r3, #10
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	f003 0303 	and.w	r3, r3, #3
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa1e:	0a1b      	lsrs	r3, r3, #8
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	f003 0303 	and.w	r3, r3, #3
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa32:	085b      	lsrs	r3, r3, #1
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	1fe00fff 	.word	0x1fe00fff

0800aa5c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b094      	sub	sp, #80	; 0x50
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800aa6c:	f107 0308 	add.w	r3, r7, #8
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fb4a 	bl	800b10c <SD_SendSDStatus>
 800aa78:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d011      	beq.n	800aaa4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a4f      	ldr	r2, [pc, #316]	; (800abc4 <HAL_SD_GetCardStatus+0x168>)
 800aa86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800aaa2:	e070      	b.n	800ab86 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	099b      	lsrs	r3, r3, #6
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	095b      	lsrs	r3, r3, #5
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	f003 0301 	and.w	r3, r3, #1
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	0a1b      	lsrs	r3, r3, #8
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aace:	b29a      	uxth	r2, r3
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	0e1b      	lsrs	r3, r3, #24
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	4313      	orrs	r3, r2
 800aad8:	b29a      	uxth	r2, r3
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	061a      	lsls	r2, r3, #24
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	021b      	lsls	r3, r3, #8
 800aae6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aaea:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	0a1b      	lsrs	r3, r3, #8
 800aaf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aaf4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	0e1b      	lsrs	r3, r3, #24
 800aafa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	0a1b      	lsrs	r3, r3, #8
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	0d1b      	lsrs	r3, r3, #20
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	f003 030f 	and.w	r3, r3, #15
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	0c1b      	lsrs	r3, r3, #16
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	4313      	orrs	r3, r2
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	0a9b      	lsrs	r3, r3, #10
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	0a1b      	lsrs	r3, r3, #8
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	f003 0303 	and.w	r3, r3, #3
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	091b      	lsrs	r3, r3, #4
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	f003 030f 	and.w	r3, r3, #15
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	0e1b      	lsrs	r3, r3, #24
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f003 fb64 	bl	800e25c <SDMMC_CmdBlockLength>
 800ab94:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00d      	beq.n	800abb8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a08      	ldr	r2, [pc, #32]	; (800abc4 <HAL_SD_GetCardStatus+0x168>)
 800aba2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aba8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800abb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3750      	adds	r7, #80	; 0x50
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	1fe00fff 	.word	0x1fe00fff

0800abc8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b08d      	sub	sp, #52	; 0x34
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2203      	movs	r2, #3
 800ac34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d02e      	beq.n	800ac9e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac46:	d106      	bne.n	800ac56 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	635a      	str	r2, [r3, #52]	; 0x34
 800ac54:	e029      	b.n	800acaa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac5c:	d10a      	bne.n	800ac74 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fb4c 	bl	800b2fc <SD_WideBus_Enable>
 800ac64:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	431a      	orrs	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	635a      	str	r2, [r3, #52]	; 0x34
 800ac72:	e01a      	b.n	800acaa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10a      	bne.n	800ac90 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fb89 	bl	800b392 <SD_WideBus_Disable>
 800ac80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	635a      	str	r2, [r3, #52]	; 0x34
 800ac8e:	e00c      	b.n	800acaa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	635a      	str	r2, [r3, #52]	; 0x34
 800ac9c:	e005      	b.n	800acaa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d007      	beq.n	800acc2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a5e      	ldr	r2, [pc, #376]	; (800ae30 <HAL_SD_ConfigWideBusOperation+0x210>)
 800acb8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acc0:	e094      	b.n	800adec <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800acc2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800acc6:	f7fd feb7 	bl	8008a38 <HAL_RCCEx_GetPeriphCLKFreq>
 800acca:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 8083 	beq.w	800adda <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	695a      	ldr	r2, [r3, #20]
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	4950      	ldr	r1, [pc, #320]	; (800ae34 <HAL_SD_ConfigWideBusOperation+0x214>)
 800acf2:	fba1 1303 	umull	r1, r3, r1, r3
 800acf6:	0e1b      	lsrs	r3, r3, #24
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d303      	bcc.n	800ad04 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	61bb      	str	r3, [r7, #24]
 800ad02:	e05a      	b.n	800adba <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad0c:	d103      	bne.n	800ad16 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	61bb      	str	r3, [r7, #24]
 800ad14:	e051      	b.n	800adba <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad1e:	d126      	bne.n	800ad6e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10e      	bne.n	800ad46 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	4a43      	ldr	r2, [pc, #268]	; (800ae38 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d906      	bls.n	800ad3e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	4a40      	ldr	r2, [pc, #256]	; (800ae34 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ad34:	fba2 2303 	umull	r2, r3, r2, r3
 800ad38:	0e5b      	lsrs	r3, r3, #25
 800ad3a:	61bb      	str	r3, [r7, #24]
 800ad3c:	e03d      	b.n	800adba <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	61bb      	str	r3, [r7, #24]
 800ad44:	e039      	b.n	800adba <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	005b      	lsls	r3, r3, #1
 800ad4c:	69fa      	ldr	r2, [r7, #28]
 800ad4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad52:	4a39      	ldr	r2, [pc, #228]	; (800ae38 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d906      	bls.n	800ad66 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	4a36      	ldr	r2, [pc, #216]	; (800ae34 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ad5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad60:	0e5b      	lsrs	r3, r3, #25
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	e029      	b.n	800adba <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	61bb      	str	r3, [r7, #24]
 800ad6c:	e025      	b.n	800adba <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10e      	bne.n	800ad94 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	4a30      	ldr	r2, [pc, #192]	; (800ae3c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d906      	bls.n	800ad8c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	4a2c      	ldr	r2, [pc, #176]	; (800ae34 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ad82:	fba2 2303 	umull	r2, r3, r2, r3
 800ad86:	0e1b      	lsrs	r3, r3, #24
 800ad88:	61bb      	str	r3, [r7, #24]
 800ad8a:	e016      	b.n	800adba <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	61bb      	str	r3, [r7, #24]
 800ad92:	e012      	b.n	800adba <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	695b      	ldr	r3, [r3, #20]
 800ad98:	005b      	lsls	r3, r3, #1
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada0:	4a26      	ldr	r2, [pc, #152]	; (800ae3c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d906      	bls.n	800adb4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	4a22      	ldr	r2, [pc, #136]	; (800ae34 <HAL_SD_ConfigWideBusOperation+0x214>)
 800adaa:	fba2 2303 	umull	r2, r3, r2, r3
 800adae:	0e1b      	lsrs	r3, r3, #24
 800adb0:	61bb      	str	r3, [r7, #24]
 800adb2:	e002      	b.n	800adba <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	695b      	ldr	r3, [r3, #20]
 800adb8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681c      	ldr	r4, [r3, #0]
 800adbe:	466a      	mov	r2, sp
 800adc0:	f107 0314 	add.w	r3, r7, #20
 800adc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800adc8:	e882 0003 	stmia.w	r2, {r0, r1}
 800adcc:	f107 0308 	add.w	r3, r7, #8
 800add0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800add2:	4620      	mov	r0, r4
 800add4:	f003 f964 	bl	800e0a0 <SDMMC_Init>
 800add8:	e008      	b.n	800adec <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800adf4:	4618      	mov	r0, r3
 800adf6:	f003 fa31 	bl	800e25c <SDMMC_CmdBlockLength>
 800adfa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00c      	beq.n	800ae1c <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a0a      	ldr	r2, [pc, #40]	; (800ae30 <HAL_SD_ConfigWideBusOperation+0x210>)
 800ae08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae0e:	6a3b      	ldr	r3, [r7, #32]
 800ae10:	431a      	orrs	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ae24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	372c      	adds	r7, #44	; 0x2c
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd90      	pop	{r4, r7, pc}
 800ae30:	1fe00fff 	.word	0x1fe00fff
 800ae34:	55e63b89 	.word	0x55e63b89
 800ae38:	02faf080 	.word	0x02faf080
 800ae3c:	017d7840 	.word	0x017d7840

0800ae40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ae4c:	f107 030c 	add.w	r3, r7, #12
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fa2a 	bl	800b2ac <SD_SendStatus>
 800ae58:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d005      	beq.n	800ae6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	431a      	orrs	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	0a5b      	lsrs	r3, r3, #9
 800ae70:	f003 030f 	and.w	r3, r3, #15
 800ae74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ae76:	693b      	ldr	r3, [r7, #16]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b090      	sub	sp, #64	; 0x40
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f003 f95e 	bl	800e152 <SDMMC_GetPowerState>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d102      	bne.n	800aea2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aea0:	e0a5      	b.n	800afee <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d02e      	beq.n	800af08 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f003 fba9 	bl	800e606 <SDMMC_CmdSendCID>
 800aeb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800aeb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <SD_InitCard+0x40>
    {
      return errorstate;
 800aebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aebe:	e096      	b.n	800afee <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2100      	movs	r1, #0
 800aec6:	4618      	mov	r0, r3
 800aec8:	f003 f989 	bl	800e1de <SDMMC_GetResponse>
 800aecc:	4602      	mov	r2, r0
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2104      	movs	r1, #4
 800aed8:	4618      	mov	r0, r3
 800aeda:	f003 f980 	bl	800e1de <SDMMC_GetResponse>
 800aede:	4602      	mov	r2, r0
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2108      	movs	r1, #8
 800aeea:	4618      	mov	r0, r3
 800aeec:	f003 f977 	bl	800e1de <SDMMC_GetResponse>
 800aef0:	4602      	mov	r2, r0
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	210c      	movs	r1, #12
 800aefc:	4618      	mov	r0, r3
 800aefe:	f003 f96e 	bl	800e1de <SDMMC_GetResponse>
 800af02:	4602      	mov	r2, r0
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0c:	2b03      	cmp	r3, #3
 800af0e:	d00d      	beq.n	800af2c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f107 020e 	add.w	r2, r7, #14
 800af18:	4611      	mov	r1, r2
 800af1a:	4618      	mov	r0, r3
 800af1c:	f003 fbb2 	bl	800e684 <SDMMC_CmdSetRelAdd>
 800af20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800af22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <SD_InitCard+0xac>
    {
      return errorstate;
 800af28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2a:	e060      	b.n	800afee <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af30:	2b03      	cmp	r3, #3
 800af32:	d036      	beq.n	800afa2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800af34:	89fb      	ldrh	r3, [r7, #14]
 800af36:	461a      	mov	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af44:	041b      	lsls	r3, r3, #16
 800af46:	4619      	mov	r1, r3
 800af48:	4610      	mov	r0, r2
 800af4a:	f003 fb7b 	bl	800e644 <SDMMC_CmdSendCSD>
 800af4e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800af50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <SD_InitCard+0xda>
    {
      return errorstate;
 800af56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af58:	e049      	b.n	800afee <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2100      	movs	r1, #0
 800af60:	4618      	mov	r0, r3
 800af62:	f003 f93c 	bl	800e1de <SDMMC_GetResponse>
 800af66:	4602      	mov	r2, r0
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2104      	movs	r1, #4
 800af72:	4618      	mov	r0, r3
 800af74:	f003 f933 	bl	800e1de <SDMMC_GetResponse>
 800af78:	4602      	mov	r2, r0
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2108      	movs	r1, #8
 800af84:	4618      	mov	r0, r3
 800af86:	f003 f92a 	bl	800e1de <SDMMC_GetResponse>
 800af8a:	4602      	mov	r2, r0
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	210c      	movs	r1, #12
 800af96:	4618      	mov	r0, r3
 800af98:	f003 f921 	bl	800e1de <SDMMC_GetResponse>
 800af9c:	4602      	mov	r2, r0
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2104      	movs	r1, #4
 800afa8:	4618      	mov	r0, r3
 800afaa:	f003 f918 	bl	800e1de <SDMMC_GetResponse>
 800afae:	4603      	mov	r3, r0
 800afb0:	0d1a      	lsrs	r2, r3, #20
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800afb6:	f107 0310 	add.w	r3, r7, #16
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7ff fba9 	bl	800a714 <HAL_SD_GetCardCSD>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800afcc:	e00f      	b.n	800afee <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afd6:	041b      	lsls	r3, r3, #16
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f003 fa2a 	bl	800e434 <SDMMC_CmdSelDesel>
 800afe0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800afe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <SD_InitCard+0x16c>
  {
    return errorstate;
 800afe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afea:	e000      	b.n	800afee <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3740      	adds	r7, #64	; 0x40
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b000:	2300      	movs	r3, #0
 800b002:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b004:	2300      	movs	r3, #0
 800b006:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b008:	2300      	movs	r3, #0
 800b00a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4618      	mov	r0, r3
 800b012:	f003 fa32 	bl	800e47a <SDMMC_CmdGoIdleState>
 800b016:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	e06e      	b.n	800b100 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4618      	mov	r0, r3
 800b028:	f003 fa45 	bl	800e4b6 <SDMMC_CmdOperCond>
 800b02c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00d      	beq.n	800b050 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f003 fa1b 	bl	800e47a <SDMMC_CmdGoIdleState>
 800b044:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d004      	beq.n	800b056 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	e057      	b.n	800b100 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d137      	bne.n	800b0ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2100      	movs	r1, #0
 800b064:	4618      	mov	r0, r3
 800b066:	f003 fa46 	bl	800e4f6 <SDMMC_CmdAppCommand>
 800b06a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d02d      	beq.n	800b0ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b072:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b076:	e043      	b.n	800b100 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2100      	movs	r1, #0
 800b07e:	4618      	mov	r0, r3
 800b080:	f003 fa39 	bl	800e4f6 <SDMMC_CmdAppCommand>
 800b084:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <SD_PowerON+0x98>
    {
      return errorstate;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	e037      	b.n	800b100 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	491c      	ldr	r1, [pc, #112]	; (800b108 <SD_PowerON+0x110>)
 800b096:	4618      	mov	r0, r3
 800b098:	f003 fa50 	bl	800e53c <SDMMC_CmdAppOperCommand>
 800b09c:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0a8:	e02a      	b.n	800b100 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f003 f894 	bl	800e1de <SDMMC_GetResponse>
 800b0b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	0fdb      	lsrs	r3, r3, #31
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d101      	bne.n	800b0c4 <SD_PowerON+0xcc>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e000      	b.n	800b0c6 <SD_PowerON+0xce>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]

    count++;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d802      	bhi.n	800b0de <SD_PowerON+0xe6>
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d0cc      	beq.n	800b078 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d902      	bls.n	800b0ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b0e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0ec:	e008      	b.n	800b100 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3718      	adds	r7, #24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	c1100000 	.word	0xc1100000

0800b10c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08c      	sub	sp, #48	; 0x30
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b116:	f7f6 fd8d 	bl	8001c34 <HAL_GetTick>
 800b11a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2100      	movs	r1, #0
 800b126:	4618      	mov	r0, r3
 800b128:	f003 f859 	bl	800e1de <SDMMC_GetResponse>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b136:	d102      	bne.n	800b13e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b138:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b13c:	e0b0      	b.n	800b2a0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2140      	movs	r1, #64	; 0x40
 800b144:	4618      	mov	r0, r3
 800b146:	f003 f889 	bl	800e25c <SDMMC_CmdBlockLength>
 800b14a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d005      	beq.n	800b15e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	e0a0      	b.n	800b2a0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b166:	041b      	lsls	r3, r3, #16
 800b168:	4619      	mov	r1, r3
 800b16a:	4610      	mov	r0, r2
 800b16c:	f003 f9c3 	bl	800e4f6 <SDMMC_CmdAppCommand>
 800b170:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d005      	beq.n	800b184 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	e08d      	b.n	800b2a0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b184:	f04f 33ff 	mov.w	r3, #4294967295
 800b188:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b18a:	2340      	movs	r3, #64	; 0x40
 800b18c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b18e:	2360      	movs	r3, #96	; 0x60
 800b190:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b192:	2302      	movs	r3, #2
 800b194:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b196:	2300      	movs	r3, #0
 800b198:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b19a:	2301      	movs	r3, #1
 800b19c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f107 0208 	add.w	r2, r7, #8
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f003 f82b 	bl	800e204 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f003 faab 	bl	800e70e <SDMMC_CmdStatusRegister>
 800b1b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1ba:	6a3b      	ldr	r3, [r7, #32]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d02b      	beq.n	800b218 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b1c8:	6a3b      	ldr	r3, [r7, #32]
 800b1ca:	e069      	b.n	800b2a0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d013      	beq.n	800b202 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b1da:	2300      	movs	r3, #0
 800b1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1de:	e00d      	b.n	800b1fc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f002 ff85 	bl	800e0f4 <SDMMC_ReadFIFO>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	601a      	str	r2, [r3, #0]
        pData++;
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fe:	2b07      	cmp	r3, #7
 800b200:	d9ee      	bls.n	800b1e0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b202:	f7f6 fd17 	bl	8001c34 <HAL_GetTick>
 800b206:	4602      	mov	r2, r0
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b210:	d102      	bne.n	800b218 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b212:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b216:	e043      	b.n	800b2a0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0d2      	beq.n	800b1cc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22c:	f003 0308 	and.w	r3, r3, #8
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b234:	2308      	movs	r3, #8
 800b236:	e033      	b.n	800b2a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23e:	f003 0302 	and.w	r3, r3, #2
 800b242:	2b00      	cmp	r3, #0
 800b244:	d001      	beq.n	800b24a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b246:	2302      	movs	r3, #2
 800b248:	e02a      	b.n	800b2a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b250:	f003 0320 	and.w	r3, r3, #32
 800b254:	2b00      	cmp	r3, #0
 800b256:	d017      	beq.n	800b288 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b258:	2320      	movs	r3, #32
 800b25a:	e021      	b.n	800b2a0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4618      	mov	r0, r3
 800b262:	f002 ff47 	bl	800e0f4 <SDMMC_ReadFIFO>
 800b266:	4602      	mov	r2, r0
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	601a      	str	r2, [r3, #0]
    pData++;
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	3304      	adds	r3, #4
 800b270:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b272:	f7f6 fcdf 	bl	8001c34 <HAL_GetTick>
 800b276:	4602      	mov	r2, r0
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b280:	d102      	bne.n	800b288 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b282:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b286:	e00b      	b.n	800b2a0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b28e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e2      	bne.n	800b25c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a03      	ldr	r2, [pc, #12]	; (800b2a8 <SD_SendSDStatus+0x19c>)
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3730      	adds	r7, #48	; 0x30
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	18000f3a 	.word	0x18000f3a

0800b2ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d102      	bne.n	800b2c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b2bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2c0:	e018      	b.n	800b2f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ca:	041b      	lsls	r3, r3, #16
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	f003 f9fa 	bl	800e6c8 <SDMMC_CmdSendStatus>
 800b2d4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	e009      	b.n	800b2f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f002 ff79 	bl	800e1de <SDMMC_GetResponse>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b304:	2300      	movs	r3, #0
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	2300      	movs	r3, #0
 800b30a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2100      	movs	r1, #0
 800b312:	4618      	mov	r0, r3
 800b314:	f002 ff63 	bl	800e1de <SDMMC_GetResponse>
 800b318:	4603      	mov	r3, r0
 800b31a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b31e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b322:	d102      	bne.n	800b32a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b328:	e02f      	b.n	800b38a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b32a:	f107 030c 	add.w	r3, r7, #12
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f879 	bl	800b428 <SD_FindSCR>
 800b336:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	e023      	b.n	800b38a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d01c      	beq.n	800b386 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b354:	041b      	lsls	r3, r3, #16
 800b356:	4619      	mov	r1, r3
 800b358:	4610      	mov	r0, r2
 800b35a:	f003 f8cc 	bl	800e4f6 <SDMMC_CmdAppCommand>
 800b35e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	e00f      	b.n	800b38a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2102      	movs	r1, #2
 800b370:	4618      	mov	r0, r3
 800b372:	f003 f903 	bl	800e57c <SDMMC_CmdBusWidth>
 800b376:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	e003      	b.n	800b38a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b382:	2300      	movs	r3, #0
 800b384:	e001      	b.n	800b38a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b386:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b086      	sub	sp, #24
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f002 ff18 	bl	800e1de <SDMMC_GetResponse>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3b8:	d102      	bne.n	800b3c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b3ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3be:	e02f      	b.n	800b420 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b3c0:	f107 030c 	add.w	r3, r7, #12
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f82e 	bl	800b428 <SD_FindSCR>
 800b3cc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d001      	beq.n	800b3d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	e023      	b.n	800b420 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d01c      	beq.n	800b41c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ea:	041b      	lsls	r3, r3, #16
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	f003 f881 	bl	800e4f6 <SDMMC_CmdAppCommand>
 800b3f4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	e00f      	b.n	800b420 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2100      	movs	r1, #0
 800b406:	4618      	mov	r0, r3
 800b408:	f003 f8b8 	bl	800e57c <SDMMC_CmdBusWidth>
 800b40c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	e003      	b.n	800b420 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b418:	2300      	movs	r3, #0
 800b41a:	e001      	b.n	800b420 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b41c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08e      	sub	sp, #56	; 0x38
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b432:	f7f6 fbff 	bl	8001c34 <HAL_GetTick>
 800b436:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b438:	2300      	movs	r3, #0
 800b43a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b43c:	2300      	movs	r3, #0
 800b43e:	60bb      	str	r3, [r7, #8]
 800b440:	2300      	movs	r3, #0
 800b442:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2108      	movs	r1, #8
 800b44e:	4618      	mov	r0, r3
 800b450:	f002 ff04 	bl	800e25c <SDMMC_CmdBlockLength>
 800b454:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45e:	e0ad      	b.n	800b5bc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b468:	041b      	lsls	r3, r3, #16
 800b46a:	4619      	mov	r1, r3
 800b46c:	4610      	mov	r0, r2
 800b46e:	f003 f842 	bl	800e4f6 <SDMMC_CmdAppCommand>
 800b472:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47c:	e09e      	b.n	800b5bc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b47e:	f04f 33ff 	mov.w	r3, #4294967295
 800b482:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b484:	2308      	movs	r3, #8
 800b486:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b488:	2330      	movs	r3, #48	; 0x30
 800b48a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b48c:	2302      	movs	r3, #2
 800b48e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b490:	2300      	movs	r3, #0
 800b492:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b494:	2301      	movs	r3, #1
 800b496:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f107 0210 	add.w	r2, r7, #16
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f002 feae 	bl	800e204 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f003 f888 	bl	800e5c2 <SDMMC_CmdSendSCR>
 800b4b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d027      	beq.n	800b50a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	e07e      	b.n	800b5bc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d113      	bne.n	800b4f4 <SD_FindSCR+0xcc>
 800b4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d110      	bne.n	800b4f4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f002 fe0c 	bl	800e0f4 <SDMMC_ReadFIFO>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f002 fe05 	bl	800e0f4 <SDMMC_ReadFIFO>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	60fb      	str	r3, [r7, #12]
      index++;
 800b4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b4f4:	f7f6 fb9e 	bl	8001c34 <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b502:	d102      	bne.n	800b50a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b504:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b508:	e058      	b.n	800b5bc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b510:	f240 532a 	movw	r3, #1322	; 0x52a
 800b514:	4013      	ands	r3, r2
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0d1      	beq.n	800b4be <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b520:	f003 0308 	and.w	r3, r3, #8
 800b524:	2b00      	cmp	r3, #0
 800b526:	d005      	beq.n	800b534 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2208      	movs	r2, #8
 800b52e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b530:	2308      	movs	r3, #8
 800b532:	e043      	b.n	800b5bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53a:	f003 0302 	and.w	r3, r3, #2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d005      	beq.n	800b54e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2202      	movs	r2, #2
 800b548:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b54a:	2302      	movs	r3, #2
 800b54c:	e036      	b.n	800b5bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b554:	f003 0320 	and.w	r3, r3, #32
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d005      	beq.n	800b568 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2220      	movs	r2, #32
 800b562:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b564:	2320      	movs	r3, #32
 800b566:	e029      	b.n	800b5bc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a15      	ldr	r2, [pc, #84]	; (800b5c4 <SD_FindSCR+0x19c>)
 800b56e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	061a      	lsls	r2, r3, #24
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	021b      	lsls	r3, r3, #8
 800b578:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b57c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	0a1b      	lsrs	r3, r3, #8
 800b582:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b586:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	0e1b      	lsrs	r3, r3, #24
 800b58c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b590:	601a      	str	r2, [r3, #0]
    scr++;
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	3304      	adds	r3, #4
 800b596:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	061a      	lsls	r2, r3, #24
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	021b      	lsls	r3, r3, #8
 800b5a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b5a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	0a1b      	lsrs	r3, r3, #8
 800b5aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b5ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	0e1b      	lsrs	r3, r3, #24
 800b5b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3738      	adds	r7, #56	; 0x38
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	18000f3a 	.word	0x18000f3a

0800b5c8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5da:	2b1f      	cmp	r3, #31
 800b5dc:	d936      	bls.n	800b64c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b5de:	2300      	movs	r3, #0
 800b5e0:	617b      	str	r3, [r7, #20]
 800b5e2:	e027      	b.n	800b634 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f002 fd83 	bl	800e0f4 <SDMMC_ReadFIFO>
 800b5ee:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	0a1b      	lsrs	r3, r3, #8
 800b602:	b2da      	uxtb	r2, r3
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	3301      	adds	r3, #1
 800b60c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	0c1b      	lsrs	r3, r3, #16
 800b612:	b2da      	uxtb	r2, r3
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	3301      	adds	r3, #1
 800b61c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	0e1b      	lsrs	r3, r3, #24
 800b622:	b2da      	uxtb	r2, r3
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	3301      	adds	r3, #1
 800b62c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	3301      	adds	r3, #1
 800b632:	617b      	str	r3, [r7, #20]
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2b07      	cmp	r3, #7
 800b638:	d9d4      	bls.n	800b5e4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b644:	f1a3 0220 	sub.w	r2, r3, #32
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b64c:	bf00      	nop
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	2b1f      	cmp	r3, #31
 800b668:	d93a      	bls.n	800b6e0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b66a:	2300      	movs	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]
 800b66e:	e02b      	b.n	800b6c8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	3301      	adds	r3, #1
 800b67a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	021a      	lsls	r2, r3, #8
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	4313      	orrs	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	3301      	adds	r3, #1
 800b68c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	041a      	lsls	r2, r3, #16
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4313      	orrs	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	3301      	adds	r3, #1
 800b69e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	061a      	lsls	r2, r3, #24
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f107 020c 	add.w	r2, r7, #12
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f002 fd26 	bl	800e10e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	617b      	str	r3, [r7, #20]
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b07      	cmp	r3, #7
 800b6cc:	d9d0      	bls.n	800b670 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a1b      	ldr	r3, [r3, #32]
 800b6d8:	f1a3 0220 	sub.w	r2, r3, #32
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	621a      	str	r2, [r3, #32]
  }
}
 800b6e0:	bf00      	nop
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e049      	b.n	800b7de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d106      	bne.n	800b764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7f5 ff5a 	bl	8001618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2202      	movs	r2, #2
 800b768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3304      	adds	r3, #4
 800b774:	4619      	mov	r1, r3
 800b776:	4610      	mov	r0, r2
 800b778:	f000 fbec 	bl	800bf54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e049      	b.n	800b88c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d106      	bne.n	800b812 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f841 	bl	800b894 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2202      	movs	r2, #2
 800b816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	3304      	adds	r3, #4
 800b822:	4619      	mov	r1, r3
 800b824:	4610      	mov	r0, r2
 800b826:	f000 fb95 	bl	800bf54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	f003 0302 	and.w	r3, r3, #2
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d122      	bne.n	800b904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	f003 0302 	and.w	r3, r3, #2
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d11b      	bne.n	800b904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f06f 0202 	mvn.w	r2, #2
 800b8d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	f003 0303 	and.w	r3, r3, #3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d003      	beq.n	800b8f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fb14 	bl	800bf18 <HAL_TIM_IC_CaptureCallback>
 800b8f0:	e005      	b.n	800b8fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fb06 	bl	800bf04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fb17 	bl	800bf2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	f003 0304 	and.w	r3, r3, #4
 800b90e:	2b04      	cmp	r3, #4
 800b910:	d122      	bne.n	800b958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	f003 0304 	and.w	r3, r3, #4
 800b91c:	2b04      	cmp	r3, #4
 800b91e:	d11b      	bne.n	800b958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f06f 0204 	mvn.w	r2, #4
 800b928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2202      	movs	r2, #2
 800b92e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 faea 	bl	800bf18 <HAL_TIM_IC_CaptureCallback>
 800b944:	e005      	b.n	800b952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fadc 	bl	800bf04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 faed 	bl	800bf2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	f003 0308 	and.w	r3, r3, #8
 800b962:	2b08      	cmp	r3, #8
 800b964:	d122      	bne.n	800b9ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	f003 0308 	and.w	r3, r3, #8
 800b970:	2b08      	cmp	r3, #8
 800b972:	d11b      	bne.n	800b9ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f06f 0208 	mvn.w	r2, #8
 800b97c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2204      	movs	r2, #4
 800b982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 fac0 	bl	800bf18 <HAL_TIM_IC_CaptureCallback>
 800b998:	e005      	b.n	800b9a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fab2 	bl	800bf04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fac3 	bl	800bf2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	f003 0310 	and.w	r3, r3, #16
 800b9b6:	2b10      	cmp	r3, #16
 800b9b8:	d122      	bne.n	800ba00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	f003 0310 	and.w	r3, r3, #16
 800b9c4:	2b10      	cmp	r3, #16
 800b9c6:	d11b      	bne.n	800ba00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f06f 0210 	mvn.w	r2, #16
 800b9d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2208      	movs	r2, #8
 800b9d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	69db      	ldr	r3, [r3, #28]
 800b9de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fa96 	bl	800bf18 <HAL_TIM_IC_CaptureCallback>
 800b9ec:	e005      	b.n	800b9fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fa88 	bl	800bf04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fa99 	bl	800bf2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d10e      	bne.n	800ba2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d107      	bne.n	800ba2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f06f 0201 	mvn.w	r2, #1
 800ba24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fa62 	bl	800bef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba36:	2b80      	cmp	r3, #128	; 0x80
 800ba38:	d10e      	bne.n	800ba58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba44:	2b80      	cmp	r3, #128	; 0x80
 800ba46:	d107      	bne.n	800ba58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 ff94 	bl	800c980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba66:	d10e      	bne.n	800ba86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba72:	2b80      	cmp	r3, #128	; 0x80
 800ba74:	d107      	bne.n	800ba86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ba7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 ff87 	bl	800c994 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba90:	2b40      	cmp	r3, #64	; 0x40
 800ba92:	d10e      	bne.n	800bab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9e:	2b40      	cmp	r3, #64	; 0x40
 800baa0:	d107      	bne.n	800bab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800baaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fa47 	bl	800bf40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	691b      	ldr	r3, [r3, #16]
 800bab8:	f003 0320 	and.w	r3, r3, #32
 800babc:	2b20      	cmp	r3, #32
 800babe:	d10e      	bne.n	800bade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	f003 0320 	and.w	r3, r3, #32
 800baca:	2b20      	cmp	r3, #32
 800bacc:	d107      	bne.n	800bade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f06f 0220 	mvn.w	r2, #32
 800bad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 ff47 	bl	800c96c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bade:	bf00      	nop
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d101      	bne.n	800bb02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bafe:	2302      	movs	r3, #2
 800bb00:	e0fd      	b.n	800bcfe <HAL_TIM_PWM_ConfigChannel+0x216>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b14      	cmp	r3, #20
 800bb0e:	f200 80f0 	bhi.w	800bcf2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800bb12:	a201      	add	r2, pc, #4	; (adr r2, 800bb18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800bb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb18:	0800bb6d 	.word	0x0800bb6d
 800bb1c:	0800bcf3 	.word	0x0800bcf3
 800bb20:	0800bcf3 	.word	0x0800bcf3
 800bb24:	0800bcf3 	.word	0x0800bcf3
 800bb28:	0800bbad 	.word	0x0800bbad
 800bb2c:	0800bcf3 	.word	0x0800bcf3
 800bb30:	0800bcf3 	.word	0x0800bcf3
 800bb34:	0800bcf3 	.word	0x0800bcf3
 800bb38:	0800bbef 	.word	0x0800bbef
 800bb3c:	0800bcf3 	.word	0x0800bcf3
 800bb40:	0800bcf3 	.word	0x0800bcf3
 800bb44:	0800bcf3 	.word	0x0800bcf3
 800bb48:	0800bc2f 	.word	0x0800bc2f
 800bb4c:	0800bcf3 	.word	0x0800bcf3
 800bb50:	0800bcf3 	.word	0x0800bcf3
 800bb54:	0800bcf3 	.word	0x0800bcf3
 800bb58:	0800bc71 	.word	0x0800bc71
 800bb5c:	0800bcf3 	.word	0x0800bcf3
 800bb60:	0800bcf3 	.word	0x0800bcf3
 800bb64:	0800bcf3 	.word	0x0800bcf3
 800bb68:	0800bcb1 	.word	0x0800bcb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 fa88 	bl	800c088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	699a      	ldr	r2, [r3, #24]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f042 0208 	orr.w	r2, r2, #8
 800bb86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	699a      	ldr	r2, [r3, #24]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 0204 	bic.w	r2, r2, #4
 800bb96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6999      	ldr	r1, [r3, #24]
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	691a      	ldr	r2, [r3, #16]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	619a      	str	r2, [r3, #24]
      break;
 800bbaa:	e0a3      	b.n	800bcf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68b9      	ldr	r1, [r7, #8]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 faf8 	bl	800c1a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	699a      	ldr	r2, [r3, #24]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	699a      	ldr	r2, [r3, #24]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6999      	ldr	r1, [r3, #24]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	021a      	lsls	r2, r3, #8
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	619a      	str	r2, [r3, #24]
      break;
 800bbec:	e082      	b.n	800bcf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 fb61 	bl	800c2bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	69da      	ldr	r2, [r3, #28]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f042 0208 	orr.w	r2, r2, #8
 800bc08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	69da      	ldr	r2, [r3, #28]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f022 0204 	bic.w	r2, r2, #4
 800bc18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	69d9      	ldr	r1, [r3, #28]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	691a      	ldr	r2, [r3, #16]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	430a      	orrs	r2, r1
 800bc2a:	61da      	str	r2, [r3, #28]
      break;
 800bc2c:	e062      	b.n	800bcf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68b9      	ldr	r1, [r7, #8]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 fbc7 	bl	800c3c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	69da      	ldr	r2, [r3, #28]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	69da      	ldr	r2, [r3, #28]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	69d9      	ldr	r1, [r3, #28]
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	021a      	lsls	r2, r3, #8
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	61da      	str	r2, [r3, #28]
      break;
 800bc6e:	e041      	b.n	800bcf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68b9      	ldr	r1, [r7, #8]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 fc0e 	bl	800c498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f042 0208 	orr.w	r2, r2, #8
 800bc8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 0204 	bic.w	r2, r2, #4
 800bc9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	691a      	ldr	r2, [r3, #16]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	430a      	orrs	r2, r1
 800bcac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bcae:	e021      	b.n	800bcf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68b9      	ldr	r1, [r7, #8]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 fc50 	bl	800c55c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	021a      	lsls	r2, r3, #8
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	430a      	orrs	r2, r1
 800bcee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bcf0:	e000      	b.n	800bcf4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bcf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop

0800bd08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d101      	bne.n	800bd20 <HAL_TIM_ConfigClockSource+0x18>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	e0db      	b.n	800bed8 <HAL_TIM_ConfigClockSource+0x1d0>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	4b69      	ldr	r3, [pc, #420]	; (800bee0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a63      	ldr	r2, [pc, #396]	; (800bee4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	f000 80a9 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1a6>
 800bd5c:	4a61      	ldr	r2, [pc, #388]	; (800bee4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	f200 80ae 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd64:	4a60      	ldr	r2, [pc, #384]	; (800bee8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	f000 80a1 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1a6>
 800bd6c:	4a5e      	ldr	r2, [pc, #376]	; (800bee8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	f200 80a6 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd74:	4a5d      	ldr	r2, [pc, #372]	; (800beec <HAL_TIM_ConfigClockSource+0x1e4>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	f000 8099 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1a6>
 800bd7c:	4a5b      	ldr	r2, [pc, #364]	; (800beec <HAL_TIM_ConfigClockSource+0x1e4>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	f200 809e 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bd88:	f000 8091 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1a6>
 800bd8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bd90:	f200 8096 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bd94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd98:	f000 8089 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1a6>
 800bd9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bda0:	f200 808e 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bda4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bda8:	d03e      	beq.n	800be28 <HAL_TIM_ConfigClockSource+0x120>
 800bdaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdae:	f200 8087 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bdb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdb6:	f000 8085 	beq.w	800bec4 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdbe:	d87f      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bdc0:	2b70      	cmp	r3, #112	; 0x70
 800bdc2:	d01a      	beq.n	800bdfa <HAL_TIM_ConfigClockSource+0xf2>
 800bdc4:	2b70      	cmp	r3, #112	; 0x70
 800bdc6:	d87b      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bdc8:	2b60      	cmp	r3, #96	; 0x60
 800bdca:	d050      	beq.n	800be6e <HAL_TIM_ConfigClockSource+0x166>
 800bdcc:	2b60      	cmp	r3, #96	; 0x60
 800bdce:	d877      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bdd0:	2b50      	cmp	r3, #80	; 0x50
 800bdd2:	d03c      	beq.n	800be4e <HAL_TIM_ConfigClockSource+0x146>
 800bdd4:	2b50      	cmp	r3, #80	; 0x50
 800bdd6:	d873      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bdd8:	2b40      	cmp	r3, #64	; 0x40
 800bdda:	d058      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0x186>
 800bddc:	2b40      	cmp	r3, #64	; 0x40
 800bdde:	d86f      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bde0:	2b30      	cmp	r3, #48	; 0x30
 800bde2:	d064      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x1a6>
 800bde4:	2b30      	cmp	r3, #48	; 0x30
 800bde6:	d86b      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bde8:	2b20      	cmp	r3, #32
 800bdea:	d060      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x1a6>
 800bdec:	2b20      	cmp	r3, #32
 800bdee:	d867      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d05c      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x1a6>
 800bdf4:	2b10      	cmp	r3, #16
 800bdf6:	d05a      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bdf8:	e062      	b.n	800bec0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6818      	ldr	r0, [r3, #0]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	6899      	ldr	r1, [r3, #8]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	f000 fc89 	bl	800c720 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	609a      	str	r2, [r3, #8]
      break;
 800be26:	e04e      	b.n	800bec6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6818      	ldr	r0, [r3, #0]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	6899      	ldr	r1, [r3, #8]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	685a      	ldr	r2, [r3, #4]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	f000 fc72 	bl	800c720 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	689a      	ldr	r2, [r3, #8]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be4a:	609a      	str	r2, [r3, #8]
      break;
 800be4c:	e03b      	b.n	800bec6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6818      	ldr	r0, [r3, #0]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	6859      	ldr	r1, [r3, #4]
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	461a      	mov	r2, r3
 800be5c:	f000 fbe2 	bl	800c624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2150      	movs	r1, #80	; 0x50
 800be66:	4618      	mov	r0, r3
 800be68:	f000 fc3c 	bl	800c6e4 <TIM_ITRx_SetConfig>
      break;
 800be6c:	e02b      	b.n	800bec6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6818      	ldr	r0, [r3, #0]
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	6859      	ldr	r1, [r3, #4]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	461a      	mov	r2, r3
 800be7c:	f000 fc01 	bl	800c682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2160      	movs	r1, #96	; 0x60
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fc2c 	bl	800c6e4 <TIM_ITRx_SetConfig>
      break;
 800be8c:	e01b      	b.n	800bec6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6818      	ldr	r0, [r3, #0]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	6859      	ldr	r1, [r3, #4]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	461a      	mov	r2, r3
 800be9c:	f000 fbc2 	bl	800c624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2140      	movs	r1, #64	; 0x40
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fc1c 	bl	800c6e4 <TIM_ITRx_SetConfig>
      break;
 800beac:	e00b      	b.n	800bec6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4619      	mov	r1, r3
 800beb8:	4610      	mov	r0, r2
 800beba:	f000 fc13 	bl	800c6e4 <TIM_ITRx_SetConfig>
        break;
 800bebe:	e002      	b.n	800bec6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bec0:	bf00      	nop
 800bec2:	e000      	b.n	800bec6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bec4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	ffceff88 	.word	0xffceff88
 800bee4:	00100040 	.word	0x00100040
 800bee8:	00100030 	.word	0x00100030
 800beec:	00100020 	.word	0x00100020

0800bef0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf34:	bf00      	nop
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a40      	ldr	r2, [pc, #256]	; (800c068 <TIM_Base_SetConfig+0x114>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d013      	beq.n	800bf94 <TIM_Base_SetConfig+0x40>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf72:	d00f      	beq.n	800bf94 <TIM_Base_SetConfig+0x40>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a3d      	ldr	r2, [pc, #244]	; (800c06c <TIM_Base_SetConfig+0x118>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d00b      	beq.n	800bf94 <TIM_Base_SetConfig+0x40>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a3c      	ldr	r2, [pc, #240]	; (800c070 <TIM_Base_SetConfig+0x11c>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d007      	beq.n	800bf94 <TIM_Base_SetConfig+0x40>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a3b      	ldr	r2, [pc, #236]	; (800c074 <TIM_Base_SetConfig+0x120>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d003      	beq.n	800bf94 <TIM_Base_SetConfig+0x40>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a3a      	ldr	r2, [pc, #232]	; (800c078 <TIM_Base_SetConfig+0x124>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d108      	bne.n	800bfa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a2f      	ldr	r2, [pc, #188]	; (800c068 <TIM_Base_SetConfig+0x114>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d01f      	beq.n	800bfee <TIM_Base_SetConfig+0x9a>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfb4:	d01b      	beq.n	800bfee <TIM_Base_SetConfig+0x9a>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a2c      	ldr	r2, [pc, #176]	; (800c06c <TIM_Base_SetConfig+0x118>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d017      	beq.n	800bfee <TIM_Base_SetConfig+0x9a>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a2b      	ldr	r2, [pc, #172]	; (800c070 <TIM_Base_SetConfig+0x11c>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d013      	beq.n	800bfee <TIM_Base_SetConfig+0x9a>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a2a      	ldr	r2, [pc, #168]	; (800c074 <TIM_Base_SetConfig+0x120>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d00f      	beq.n	800bfee <TIM_Base_SetConfig+0x9a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a29      	ldr	r2, [pc, #164]	; (800c078 <TIM_Base_SetConfig+0x124>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d00b      	beq.n	800bfee <TIM_Base_SetConfig+0x9a>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a28      	ldr	r2, [pc, #160]	; (800c07c <TIM_Base_SetConfig+0x128>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d007      	beq.n	800bfee <TIM_Base_SetConfig+0x9a>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a27      	ldr	r2, [pc, #156]	; (800c080 <TIM_Base_SetConfig+0x12c>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d003      	beq.n	800bfee <TIM_Base_SetConfig+0x9a>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a26      	ldr	r2, [pc, #152]	; (800c084 <TIM_Base_SetConfig+0x130>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d108      	bne.n	800c000 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	695b      	ldr	r3, [r3, #20]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	689a      	ldr	r2, [r3, #8]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a10      	ldr	r2, [pc, #64]	; (800c068 <TIM_Base_SetConfig+0x114>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d00f      	beq.n	800c04c <TIM_Base_SetConfig+0xf8>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a12      	ldr	r2, [pc, #72]	; (800c078 <TIM_Base_SetConfig+0x124>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d00b      	beq.n	800c04c <TIM_Base_SetConfig+0xf8>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a11      	ldr	r2, [pc, #68]	; (800c07c <TIM_Base_SetConfig+0x128>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d007      	beq.n	800c04c <TIM_Base_SetConfig+0xf8>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a10      	ldr	r2, [pc, #64]	; (800c080 <TIM_Base_SetConfig+0x12c>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d003      	beq.n	800c04c <TIM_Base_SetConfig+0xf8>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a0f      	ldr	r2, [pc, #60]	; (800c084 <TIM_Base_SetConfig+0x130>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d103      	bne.n	800c054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	691a      	ldr	r2, [r3, #16]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	615a      	str	r2, [r3, #20]
}
 800c05a:	bf00      	nop
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	40010000 	.word	0x40010000
 800c06c:	40000400 	.word	0x40000400
 800c070:	40000800 	.word	0x40000800
 800c074:	40000c00 	.word	0x40000c00
 800c078:	40010400 	.word	0x40010400
 800c07c:	40014000 	.word	0x40014000
 800c080:	40014400 	.word	0x40014400
 800c084:	40014800 	.word	0x40014800

0800c088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	f023 0201 	bic.w	r2, r3, #1
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4b37      	ldr	r3, [pc, #220]	; (800c190 <TIM_OC1_SetConfig+0x108>)
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 0303 	bic.w	r3, r3, #3
 800c0be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f023 0302 	bic.w	r3, r3, #2
 800c0d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a2d      	ldr	r2, [pc, #180]	; (800c194 <TIM_OC1_SetConfig+0x10c>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d00f      	beq.n	800c104 <TIM_OC1_SetConfig+0x7c>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a2c      	ldr	r2, [pc, #176]	; (800c198 <TIM_OC1_SetConfig+0x110>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d00b      	beq.n	800c104 <TIM_OC1_SetConfig+0x7c>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a2b      	ldr	r2, [pc, #172]	; (800c19c <TIM_OC1_SetConfig+0x114>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d007      	beq.n	800c104 <TIM_OC1_SetConfig+0x7c>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a2a      	ldr	r2, [pc, #168]	; (800c1a0 <TIM_OC1_SetConfig+0x118>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d003      	beq.n	800c104 <TIM_OC1_SetConfig+0x7c>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a29      	ldr	r2, [pc, #164]	; (800c1a4 <TIM_OC1_SetConfig+0x11c>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d10c      	bne.n	800c11e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	f023 0308 	bic.w	r3, r3, #8
 800c10a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	4313      	orrs	r3, r2
 800c114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	f023 0304 	bic.w	r3, r3, #4
 800c11c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a1c      	ldr	r2, [pc, #112]	; (800c194 <TIM_OC1_SetConfig+0x10c>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d00f      	beq.n	800c146 <TIM_OC1_SetConfig+0xbe>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a1b      	ldr	r2, [pc, #108]	; (800c198 <TIM_OC1_SetConfig+0x110>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d00b      	beq.n	800c146 <TIM_OC1_SetConfig+0xbe>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a1a      	ldr	r2, [pc, #104]	; (800c19c <TIM_OC1_SetConfig+0x114>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d007      	beq.n	800c146 <TIM_OC1_SetConfig+0xbe>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a19      	ldr	r2, [pc, #100]	; (800c1a0 <TIM_OC1_SetConfig+0x118>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d003      	beq.n	800c146 <TIM_OC1_SetConfig+0xbe>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a18      	ldr	r2, [pc, #96]	; (800c1a4 <TIM_OC1_SetConfig+0x11c>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d111      	bne.n	800c16a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c14c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	4313      	orrs	r3, r2
 800c168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	621a      	str	r2, [r3, #32]
}
 800c184:	bf00      	nop
 800c186:	371c      	adds	r7, #28
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	fffeff8f 	.word	0xfffeff8f
 800c194:	40010000 	.word	0x40010000
 800c198:	40010400 	.word	0x40010400
 800c19c:	40014000 	.word	0x40014000
 800c1a0:	40014400 	.word	0x40014400
 800c1a4:	40014800 	.word	0x40014800

0800c1a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	f023 0210 	bic.w	r2, r3, #16
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	4b34      	ldr	r3, [pc, #208]	; (800c2a4 <TIM_OC2_SetConfig+0xfc>)
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	021b      	lsls	r3, r3, #8
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f023 0320 	bic.w	r3, r3, #32
 800c1f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	011b      	lsls	r3, r3, #4
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a29      	ldr	r2, [pc, #164]	; (800c2a8 <TIM_OC2_SetConfig+0x100>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d003      	beq.n	800c210 <TIM_OC2_SetConfig+0x68>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a28      	ldr	r2, [pc, #160]	; (800c2ac <TIM_OC2_SetConfig+0x104>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d10d      	bne.n	800c22c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	011b      	lsls	r3, r3, #4
 800c21e:	697a      	ldr	r2, [r7, #20]
 800c220:	4313      	orrs	r3, r2
 800c222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c22a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a1e      	ldr	r2, [pc, #120]	; (800c2a8 <TIM_OC2_SetConfig+0x100>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d00f      	beq.n	800c254 <TIM_OC2_SetConfig+0xac>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a1d      	ldr	r2, [pc, #116]	; (800c2ac <TIM_OC2_SetConfig+0x104>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d00b      	beq.n	800c254 <TIM_OC2_SetConfig+0xac>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a1c      	ldr	r2, [pc, #112]	; (800c2b0 <TIM_OC2_SetConfig+0x108>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d007      	beq.n	800c254 <TIM_OC2_SetConfig+0xac>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a1b      	ldr	r2, [pc, #108]	; (800c2b4 <TIM_OC2_SetConfig+0x10c>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d003      	beq.n	800c254 <TIM_OC2_SetConfig+0xac>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a1a      	ldr	r2, [pc, #104]	; (800c2b8 <TIM_OC2_SetConfig+0x110>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d113      	bne.n	800c27c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c25a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	693a      	ldr	r2, [r7, #16]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	4313      	orrs	r3, r2
 800c27a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	685a      	ldr	r2, [r3, #4]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	621a      	str	r2, [r3, #32]
}
 800c296:	bf00      	nop
 800c298:	371c      	adds	r7, #28
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	feff8fff 	.word	0xfeff8fff
 800c2a8:	40010000 	.word	0x40010000
 800c2ac:	40010400 	.word	0x40010400
 800c2b0:	40014000 	.word	0x40014000
 800c2b4:	40014400 	.word	0x40014400
 800c2b8:	40014800 	.word	0x40014800

0800c2bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b087      	sub	sp, #28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a1b      	ldr	r3, [r3, #32]
 800c2d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	69db      	ldr	r3, [r3, #28]
 800c2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f023 0303 	bic.w	r3, r3, #3
 800c2f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	021b      	lsls	r3, r3, #8
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	4313      	orrs	r3, r2
 800c310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a27      	ldr	r2, [pc, #156]	; (800c3b4 <TIM_OC3_SetConfig+0xf8>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d003      	beq.n	800c322 <TIM_OC3_SetConfig+0x66>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a26      	ldr	r2, [pc, #152]	; (800c3b8 <TIM_OC3_SetConfig+0xfc>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d10d      	bne.n	800c33e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	021b      	lsls	r3, r3, #8
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	4313      	orrs	r3, r2
 800c334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c33c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a1c      	ldr	r2, [pc, #112]	; (800c3b4 <TIM_OC3_SetConfig+0xf8>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d00f      	beq.n	800c366 <TIM_OC3_SetConfig+0xaa>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a1b      	ldr	r2, [pc, #108]	; (800c3b8 <TIM_OC3_SetConfig+0xfc>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d00b      	beq.n	800c366 <TIM_OC3_SetConfig+0xaa>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a1a      	ldr	r2, [pc, #104]	; (800c3bc <TIM_OC3_SetConfig+0x100>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d007      	beq.n	800c366 <TIM_OC3_SetConfig+0xaa>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a19      	ldr	r2, [pc, #100]	; (800c3c0 <TIM_OC3_SetConfig+0x104>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d003      	beq.n	800c366 <TIM_OC3_SetConfig+0xaa>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a18      	ldr	r2, [pc, #96]	; (800c3c4 <TIM_OC3_SetConfig+0x108>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d113      	bne.n	800c38e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	011b      	lsls	r3, r3, #4
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	4313      	orrs	r3, r2
 800c380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	011b      	lsls	r3, r3, #4
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	621a      	str	r2, [r3, #32]
}
 800c3a8:	bf00      	nop
 800c3aa:	371c      	adds	r7, #28
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr
 800c3b4:	40010000 	.word	0x40010000
 800c3b8:	40010400 	.word	0x40010400
 800c3bc:	40014000 	.word	0x40014000
 800c3c0:	40014400 	.word	0x40014400
 800c3c4:	40014800 	.word	0x40014800

0800c3c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	021b      	lsls	r3, r3, #8
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	031b      	lsls	r3, r3, #12
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a18      	ldr	r2, [pc, #96]	; (800c484 <TIM_OC4_SetConfig+0xbc>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d00f      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a17      	ldr	r2, [pc, #92]	; (800c488 <TIM_OC4_SetConfig+0xc0>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d00b      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a16      	ldr	r2, [pc, #88]	; (800c48c <TIM_OC4_SetConfig+0xc4>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d007      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a15      	ldr	r2, [pc, #84]	; (800c490 <TIM_OC4_SetConfig+0xc8>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d003      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a14      	ldr	r2, [pc, #80]	; (800c494 <TIM_OC4_SetConfig+0xcc>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d109      	bne.n	800c45c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c44e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	695b      	ldr	r3, [r3, #20]
 800c454:	019b      	lsls	r3, r3, #6
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	4313      	orrs	r3, r2
 800c45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	621a      	str	r2, [r3, #32]
}
 800c476:	bf00      	nop
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	40010000 	.word	0x40010000
 800c488:	40010400 	.word	0x40010400
 800c48c:	40014000 	.word	0x40014000
 800c490:	40014400 	.word	0x40014400
 800c494:	40014800 	.word	0x40014800

0800c498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c498:	b480      	push	{r7}
 800c49a:	b087      	sub	sp, #28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c4d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	041b      	lsls	r3, r3, #16
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a17      	ldr	r2, [pc, #92]	; (800c548 <TIM_OC5_SetConfig+0xb0>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d00f      	beq.n	800c50e <TIM_OC5_SetConfig+0x76>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a16      	ldr	r2, [pc, #88]	; (800c54c <TIM_OC5_SetConfig+0xb4>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d00b      	beq.n	800c50e <TIM_OC5_SetConfig+0x76>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a15      	ldr	r2, [pc, #84]	; (800c550 <TIM_OC5_SetConfig+0xb8>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d007      	beq.n	800c50e <TIM_OC5_SetConfig+0x76>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a14      	ldr	r2, [pc, #80]	; (800c554 <TIM_OC5_SetConfig+0xbc>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d003      	beq.n	800c50e <TIM_OC5_SetConfig+0x76>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a13      	ldr	r2, [pc, #76]	; (800c558 <TIM_OC5_SetConfig+0xc0>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d109      	bne.n	800c522 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c514:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	021b      	lsls	r3, r3, #8
 800c51c:	697a      	ldr	r2, [r7, #20]
 800c51e:	4313      	orrs	r3, r2
 800c520:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	685a      	ldr	r2, [r3, #4]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	693a      	ldr	r2, [r7, #16]
 800c53a:	621a      	str	r2, [r3, #32]
}
 800c53c:	bf00      	nop
 800c53e:	371c      	adds	r7, #28
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr
 800c548:	40010000 	.word	0x40010000
 800c54c:	40010400 	.word	0x40010400
 800c550:	40014000 	.word	0x40014000
 800c554:	40014400 	.word	0x40014400
 800c558:	40014800 	.word	0x40014800

0800c55c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b087      	sub	sp, #28
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a1b      	ldr	r3, [r3, #32]
 800c56a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c58a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	021b      	lsls	r3, r3, #8
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	4313      	orrs	r3, r2
 800c596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c59e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	051b      	lsls	r3, r3, #20
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a18      	ldr	r2, [pc, #96]	; (800c610 <TIM_OC6_SetConfig+0xb4>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d00f      	beq.n	800c5d4 <TIM_OC6_SetConfig+0x78>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a17      	ldr	r2, [pc, #92]	; (800c614 <TIM_OC6_SetConfig+0xb8>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d00b      	beq.n	800c5d4 <TIM_OC6_SetConfig+0x78>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a16      	ldr	r2, [pc, #88]	; (800c618 <TIM_OC6_SetConfig+0xbc>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d007      	beq.n	800c5d4 <TIM_OC6_SetConfig+0x78>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a15      	ldr	r2, [pc, #84]	; (800c61c <TIM_OC6_SetConfig+0xc0>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d003      	beq.n	800c5d4 <TIM_OC6_SetConfig+0x78>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a14      	ldr	r2, [pc, #80]	; (800c620 <TIM_OC6_SetConfig+0xc4>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d109      	bne.n	800c5e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c5da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	695b      	ldr	r3, [r3, #20]
 800c5e0:	029b      	lsls	r3, r3, #10
 800c5e2:	697a      	ldr	r2, [r7, #20]
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	693a      	ldr	r2, [r7, #16]
 800c600:	621a      	str	r2, [r3, #32]
}
 800c602:	bf00      	nop
 800c604:	371c      	adds	r7, #28
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	40010000 	.word	0x40010000
 800c614:	40010400 	.word	0x40010400
 800c618:	40014000 	.word	0x40014000
 800c61c:	40014400 	.word	0x40014400
 800c620:	40014800 	.word	0x40014800

0800c624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c624:	b480      	push	{r7}
 800c626:	b087      	sub	sp, #28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6a1b      	ldr	r3, [r3, #32]
 800c634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	f023 0201 	bic.w	r2, r3, #1
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	699b      	ldr	r3, [r3, #24]
 800c646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c64e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	011b      	lsls	r3, r3, #4
 800c654:	693a      	ldr	r2, [r7, #16]
 800c656:	4313      	orrs	r3, r2
 800c658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	f023 030a 	bic.w	r3, r3, #10
 800c660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	4313      	orrs	r3, r2
 800c668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	621a      	str	r2, [r3, #32]
}
 800c676:	bf00      	nop
 800c678:	371c      	adds	r7, #28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr

0800c682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c682:	b480      	push	{r7}
 800c684:	b087      	sub	sp, #28
 800c686:	af00      	add	r7, sp, #0
 800c688:	60f8      	str	r0, [r7, #12]
 800c68a:	60b9      	str	r1, [r7, #8]
 800c68c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	f023 0210 	bic.w	r2, r3, #16
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6a1b      	ldr	r3, [r3, #32]
 800c6a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	031b      	lsls	r3, r3, #12
 800c6b2:	697a      	ldr	r2, [r7, #20]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	011b      	lsls	r3, r3, #4
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	621a      	str	r2, [r3, #32]
}
 800c6d6:	bf00      	nop
 800c6d8:	371c      	adds	r7, #28
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
	...

0800c6e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	4b09      	ldr	r3, [pc, #36]	; (800c71c <TIM_ITRx_SetConfig+0x38>)
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6fc:	683a      	ldr	r2, [r7, #0]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	4313      	orrs	r3, r2
 800c702:	f043 0307 	orr.w	r3, r3, #7
 800c706:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	609a      	str	r2, [r3, #8]
}
 800c70e:	bf00      	nop
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	ffcfff8f 	.word	0xffcfff8f

0800c720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c73a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	021a      	lsls	r2, r3, #8
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	431a      	orrs	r2, r3
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	4313      	orrs	r3, r2
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	609a      	str	r2, [r3, #8]
}
 800c754:	bf00      	nop
 800c756:	371c      	adds	r7, #28
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c770:	2b01      	cmp	r3, #1
 800c772:	d101      	bne.n	800c778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c774:	2302      	movs	r3, #2
 800c776:	e068      	b.n	800c84a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2202      	movs	r2, #2
 800c784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a2e      	ldr	r2, [pc, #184]	; (800c858 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d004      	beq.n	800c7ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a2d      	ldr	r2, [pc, #180]	; (800c85c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d108      	bne.n	800c7be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c7b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a1e      	ldr	r2, [pc, #120]	; (800c858 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d01d      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ea:	d018      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a1b      	ldr	r2, [pc, #108]	; (800c860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d013      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d00e      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a18      	ldr	r2, [pc, #96]	; (800c868 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d009      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a13      	ldr	r2, [pc, #76]	; (800c85c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d004      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a14      	ldr	r2, [pc, #80]	; (800c86c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d10c      	bne.n	800c838 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	68ba      	ldr	r2, [r7, #8]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3714      	adds	r7, #20
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	40010000 	.word	0x40010000
 800c85c:	40010400 	.word	0x40010400
 800c860:	40000400 	.word	0x40000400
 800c864:	40000800 	.word	0x40000800
 800c868:	40000c00 	.word	0x40000c00
 800c86c:	40001800 	.word	0x40001800

0800c870 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c87a:	2300      	movs	r3, #0
 800c87c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c884:	2b01      	cmp	r3, #1
 800c886:	d101      	bne.n	800c88c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c888:	2302      	movs	r3, #2
 800c88a:	e065      	b.n	800c958 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2201      	movs	r2, #1
 800c890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	041b      	lsls	r3, r3, #16
 800c902:	4313      	orrs	r3, r2
 800c904:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a16      	ldr	r2, [pc, #88]	; (800c964 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d004      	beq.n	800c91a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a14      	ldr	r2, [pc, #80]	; (800c968 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d115      	bne.n	800c946 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c924:	051b      	lsls	r3, r3, #20
 800c926:	4313      	orrs	r3, r2
 800c928:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	69db      	ldr	r3, [r3, #28]
 800c934:	4313      	orrs	r3, r2
 800c936:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	6a1b      	ldr	r3, [r3, #32]
 800c942:	4313      	orrs	r3, r2
 800c944:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr
 800c964:	40010000 	.word	0x40010000
 800c968:	40010400 	.word	0x40010400

0800c96c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c988:	bf00      	nop
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c99c:	bf00      	nop
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d101      	bne.n	800c9ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e042      	b.n	800ca40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d106      	bne.n	800c9d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7f4 ff5d 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2224      	movs	r2, #36	; 0x24
 800c9d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f022 0201 	bic.w	r2, r2, #1
 800c9e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 fb06 	bl	800cffc <UART_SetConfig>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d101      	bne.n	800c9fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e022      	b.n	800ca40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d002      	beq.n	800ca08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f001 f85a 	bl	800dabc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	689a      	ldr	r2, [r3, #8]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f042 0201 	orr.w	r2, r2, #1
 800ca36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f001 f8e1 	bl	800dc00 <UART_CheckIdleState>
 800ca3e:	4603      	mov	r3, r0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b088      	sub	sp, #32
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	69db      	ldr	r3, [r3, #28]
 800ca56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca68:	69fa      	ldr	r2, [r7, #28]
 800ca6a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ca6e:	4013      	ands	r3, r2
 800ca70:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d118      	bne.n	800caaa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	f003 0320 	and.w	r3, r3, #32
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d013      	beq.n	800caaa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	f003 0320 	and.w	r3, r3, #32
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d104      	bne.n	800ca96 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d009      	beq.n	800caaa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 8282 	beq.w	800cfa4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	4798      	blx	r3
      }
      return;
 800caa8:	e27c      	b.n	800cfa4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	2b00      	cmp	r3, #0
 800caae:	f000 80ef 	beq.w	800cc90 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	4b73      	ldr	r3, [pc, #460]	; (800cc84 <HAL_UART_IRQHandler+0x23c>)
 800cab6:	4013      	ands	r3, r2
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d105      	bne.n	800cac8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cabc:	69ba      	ldr	r2, [r7, #24]
 800cabe:	4b72      	ldr	r3, [pc, #456]	; (800cc88 <HAL_UART_IRQHandler+0x240>)
 800cac0:	4013      	ands	r3, r2
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f000 80e4 	beq.w	800cc90 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d010      	beq.n	800caf4 <HAL_UART_IRQHandler+0xac>
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00b      	beq.n	800caf4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2201      	movs	r2, #1
 800cae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caea:	f043 0201 	orr.w	r2, r3, #1
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d010      	beq.n	800cb20 <HAL_UART_IRQHandler+0xd8>
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00b      	beq.n	800cb20 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2202      	movs	r2, #2
 800cb0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb16:	f043 0204 	orr.w	r2, r3, #4
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	f003 0304 	and.w	r3, r3, #4
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d010      	beq.n	800cb4c <HAL_UART_IRQHandler+0x104>
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00b      	beq.n	800cb4c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2204      	movs	r2, #4
 800cb3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb42:	f043 0202 	orr.w	r2, r3, #2
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	f003 0308 	and.w	r3, r3, #8
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d015      	beq.n	800cb82 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	f003 0320 	and.w	r3, r3, #32
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d104      	bne.n	800cb6a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cb60:	697a      	ldr	r2, [r7, #20]
 800cb62:	4b48      	ldr	r3, [pc, #288]	; (800cc84 <HAL_UART_IRQHandler+0x23c>)
 800cb64:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00b      	beq.n	800cb82 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2208      	movs	r2, #8
 800cb70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb78:	f043 0208 	orr.w	r2, r3, #8
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d011      	beq.n	800cbb0 <HAL_UART_IRQHandler+0x168>
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00c      	beq.n	800cbb0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cba6:	f043 0220 	orr.w	r2, r3, #32
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f000 81f6 	beq.w	800cfa8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	f003 0320 	and.w	r3, r3, #32
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d011      	beq.n	800cbea <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	f003 0320 	and.w	r3, r3, #32
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d104      	bne.n	800cbda <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d007      	beq.n	800cbea <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d003      	beq.n	800cbea <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbf0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbfc:	2b40      	cmp	r3, #64	; 0x40
 800cbfe:	d004      	beq.n	800cc0a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d031      	beq.n	800cc6e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f001 f8c4 	bl	800dd98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc1a:	2b40      	cmp	r3, #64	; 0x40
 800cc1c:	d123      	bne.n	800cc66 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	689a      	ldr	r2, [r3, #8]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc2c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d013      	beq.n	800cc5e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc3a:	4a14      	ldr	r2, [pc, #80]	; (800cc8c <HAL_UART_IRQHandler+0x244>)
 800cc3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7f6 f838 	bl	8002cb8 <HAL_DMA_Abort_IT>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d017      	beq.n	800cc7e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cc58:	4610      	mov	r0, r2
 800cc5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc5c:	e00f      	b.n	800cc7e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 f9b6 	bl	800cfd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc64:	e00b      	b.n	800cc7e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f9b2 	bl	800cfd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc6c:	e007      	b.n	800cc7e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f9ae 	bl	800cfd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cc7c:	e194      	b.n	800cfa8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc7e:	bf00      	nop
    return;
 800cc80:	e192      	b.n	800cfa8 <HAL_UART_IRQHandler+0x560>
 800cc82:	bf00      	nop
 800cc84:	10000001 	.word	0x10000001
 800cc88:	04000120 	.word	0x04000120
 800cc8c:	0800ddfd 	.word	0x0800ddfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	f040 810f 	bne.w	800ceb8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	f003 0310 	and.w	r3, r3, #16
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 8109 	beq.w	800ceb8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	f003 0310 	and.w	r3, r3, #16
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 8103 	beq.w	800ceb8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2210      	movs	r2, #16
 800ccb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc4:	2b40      	cmp	r3, #64	; 0x40
 800ccc6:	f040 80bb 	bne.w	800ce40 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a96      	ldr	r2, [pc, #600]	; (800cf2c <HAL_UART_IRQHandler+0x4e4>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d059      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a94      	ldr	r2, [pc, #592]	; (800cf30 <HAL_UART_IRQHandler+0x4e8>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d053      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a92      	ldr	r2, [pc, #584]	; (800cf34 <HAL_UART_IRQHandler+0x4ec>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d04d      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a90      	ldr	r2, [pc, #576]	; (800cf38 <HAL_UART_IRQHandler+0x4f0>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d047      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a8e      	ldr	r2, [pc, #568]	; (800cf3c <HAL_UART_IRQHandler+0x4f4>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d041      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a8c      	ldr	r2, [pc, #560]	; (800cf40 <HAL_UART_IRQHandler+0x4f8>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d03b      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a8a      	ldr	r2, [pc, #552]	; (800cf44 <HAL_UART_IRQHandler+0x4fc>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d035      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a88      	ldr	r2, [pc, #544]	; (800cf48 <HAL_UART_IRQHandler+0x500>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d02f      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a86      	ldr	r2, [pc, #536]	; (800cf4c <HAL_UART_IRQHandler+0x504>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d029      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a84      	ldr	r2, [pc, #528]	; (800cf50 <HAL_UART_IRQHandler+0x508>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d023      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a82      	ldr	r2, [pc, #520]	; (800cf54 <HAL_UART_IRQHandler+0x50c>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d01d      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a80      	ldr	r2, [pc, #512]	; (800cf58 <HAL_UART_IRQHandler+0x510>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d017      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a7e      	ldr	r2, [pc, #504]	; (800cf5c <HAL_UART_IRQHandler+0x514>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d011      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a7c      	ldr	r2, [pc, #496]	; (800cf60 <HAL_UART_IRQHandler+0x518>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d00b      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a7a      	ldr	r2, [pc, #488]	; (800cf64 <HAL_UART_IRQHandler+0x51c>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d005      	beq.n	800cd8a <HAL_UART_IRQHandler+0x342>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a78      	ldr	r2, [pc, #480]	; (800cf68 <HAL_UART_IRQHandler+0x520>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d105      	bne.n	800cd96 <HAL_UART_IRQHandler+0x34e>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	e004      	b.n	800cda0 <HAL_UART_IRQHandler+0x358>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800cda2:	893b      	ldrh	r3, [r7, #8]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f000 8101 	beq.w	800cfac <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cdb0:	893a      	ldrh	r2, [r7, #8]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	f080 80fa 	bcs.w	800cfac <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	893a      	ldrh	r2, [r7, #8]
 800cdbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdc4:	69db      	ldr	r3, [r3, #28]
 800cdc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdca:	d02b      	beq.n	800ce24 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cdda:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	689a      	ldr	r2, [r3, #8]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f022 0201 	bic.w	r2, r2, #1
 800cdea:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	689a      	ldr	r2, [r3, #8]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdfa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2220      	movs	r2, #32
 800ce00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f022 0210 	bic.w	r2, r2, #16
 800ce18:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7f5 fc2c 	bl	800267c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f8d3 	bl	800cfe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce3e:	e0b5      	b.n	800cfac <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	1ad3      	subs	r3, r2, r3
 800ce50:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f000 80a8 	beq.w	800cfb0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800ce60:	897b      	ldrh	r3, [r7, #10]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 80a4 	beq.w	800cfb0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ce76:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6899      	ldr	r1, [r3, #8]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	4b3a      	ldr	r3, [pc, #232]	; (800cf6c <HAL_UART_IRQHandler+0x524>)
 800ce84:	400b      	ands	r3, r1
 800ce86:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2220      	movs	r2, #32
 800ce8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f022 0210 	bic.w	r2, r2, #16
 800ceaa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ceac:	897b      	ldrh	r3, [r7, #10]
 800ceae:	4619      	mov	r1, r3
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f897 	bl	800cfe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ceb6:	e07b      	b.n	800cfb0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00d      	beq.n	800cede <HAL_UART_IRQHandler+0x496>
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d008      	beq.n	800cede <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ced4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 ffc0 	bl	800de5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cedc:	e06b      	b.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d012      	beq.n	800cf0e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d104      	bne.n	800cefc <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d008      	beq.n	800cf0e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d057      	beq.n	800cfb4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	4798      	blx	r3
    }
    return;
 800cf0c:	e052      	b.n	800cfb4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d02b      	beq.n	800cf70 <HAL_UART_IRQHandler+0x528>
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d026      	beq.n	800cf70 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 ff80 	bl	800de28 <UART_EndTransmit_IT>
    return;
 800cf28:	e045      	b.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
 800cf2a:	bf00      	nop
 800cf2c:	40020010 	.word	0x40020010
 800cf30:	40020028 	.word	0x40020028
 800cf34:	40020040 	.word	0x40020040
 800cf38:	40020058 	.word	0x40020058
 800cf3c:	40020070 	.word	0x40020070
 800cf40:	40020088 	.word	0x40020088
 800cf44:	400200a0 	.word	0x400200a0
 800cf48:	400200b8 	.word	0x400200b8
 800cf4c:	40020410 	.word	0x40020410
 800cf50:	40020428 	.word	0x40020428
 800cf54:	40020440 	.word	0x40020440
 800cf58:	40020458 	.word	0x40020458
 800cf5c:	40020470 	.word	0x40020470
 800cf60:	40020488 	.word	0x40020488
 800cf64:	400204a0 	.word	0x400204a0
 800cf68:	400204b8 	.word	0x400204b8
 800cf6c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d008      	beq.n	800cf8c <HAL_UART_IRQHandler+0x544>
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d003      	beq.n	800cf8c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 ff7d 	bl	800de84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf8a:	e014      	b.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00f      	beq.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	da0c      	bge.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 ff67 	bl	800de70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cfa2:	e008      	b.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
      return;
 800cfa4:	bf00      	nop
 800cfa6:	e006      	b.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
    return;
 800cfa8:	bf00      	nop
 800cfaa:	e004      	b.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
      return;
 800cfac:	bf00      	nop
 800cfae:	e002      	b.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
      return;
 800cfb0:	bf00      	nop
 800cfb2:	e000      	b.n	800cfb6 <HAL_UART_IRQHandler+0x56e>
    return;
 800cfb4:	bf00      	nop
  }
}
 800cfb6:	3720      	adds	r7, #32
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cffc:	b5b0      	push	{r4, r5, r7, lr}
 800cffe:	b08e      	sub	sp, #56	; 0x38
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d004:	2300      	movs	r3, #0
 800d006:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689a      	ldr	r2, [r3, #8]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	431a      	orrs	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	695b      	ldr	r3, [r3, #20]
 800d018:	431a      	orrs	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	69db      	ldr	r3, [r3, #28]
 800d01e:	4313      	orrs	r3, r2
 800d020:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	4bbf      	ldr	r3, [pc, #764]	; (800d328 <UART_SetConfig+0x32c>)
 800d02a:	4013      	ands	r3, r2
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	6812      	ldr	r2, [r2, #0]
 800d030:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d032:	430b      	orrs	r3, r1
 800d034:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	68da      	ldr	r2, [r3, #12]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	430a      	orrs	r2, r1
 800d04a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4ab5      	ldr	r2, [pc, #724]	; (800d32c <UART_SetConfig+0x330>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d004      	beq.n	800d066 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a1b      	ldr	r3, [r3, #32]
 800d060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d062:	4313      	orrs	r3, r2
 800d064:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	689a      	ldr	r2, [r3, #8]
 800d06c:	4bb0      	ldr	r3, [pc, #704]	; (800d330 <UART_SetConfig+0x334>)
 800d06e:	4013      	ands	r3, r2
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	6812      	ldr	r2, [r2, #0]
 800d074:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d076:	430b      	orrs	r3, r1
 800d078:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d080:	f023 010f 	bic.w	r1, r3, #15
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	430a      	orrs	r2, r1
 800d08e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4aa7      	ldr	r2, [pc, #668]	; (800d334 <UART_SetConfig+0x338>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d176      	bne.n	800d188 <UART_SetConfig+0x18c>
 800d09a:	4ba7      	ldr	r3, [pc, #668]	; (800d338 <UART_SetConfig+0x33c>)
 800d09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d09e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d0a2:	2b28      	cmp	r3, #40	; 0x28
 800d0a4:	d86c      	bhi.n	800d180 <UART_SetConfig+0x184>
 800d0a6:	a201      	add	r2, pc, #4	; (adr r2, 800d0ac <UART_SetConfig+0xb0>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d151 	.word	0x0800d151
 800d0b0:	0800d181 	.word	0x0800d181
 800d0b4:	0800d181 	.word	0x0800d181
 800d0b8:	0800d181 	.word	0x0800d181
 800d0bc:	0800d181 	.word	0x0800d181
 800d0c0:	0800d181 	.word	0x0800d181
 800d0c4:	0800d181 	.word	0x0800d181
 800d0c8:	0800d181 	.word	0x0800d181
 800d0cc:	0800d159 	.word	0x0800d159
 800d0d0:	0800d181 	.word	0x0800d181
 800d0d4:	0800d181 	.word	0x0800d181
 800d0d8:	0800d181 	.word	0x0800d181
 800d0dc:	0800d181 	.word	0x0800d181
 800d0e0:	0800d181 	.word	0x0800d181
 800d0e4:	0800d181 	.word	0x0800d181
 800d0e8:	0800d181 	.word	0x0800d181
 800d0ec:	0800d161 	.word	0x0800d161
 800d0f0:	0800d181 	.word	0x0800d181
 800d0f4:	0800d181 	.word	0x0800d181
 800d0f8:	0800d181 	.word	0x0800d181
 800d0fc:	0800d181 	.word	0x0800d181
 800d100:	0800d181 	.word	0x0800d181
 800d104:	0800d181 	.word	0x0800d181
 800d108:	0800d181 	.word	0x0800d181
 800d10c:	0800d169 	.word	0x0800d169
 800d110:	0800d181 	.word	0x0800d181
 800d114:	0800d181 	.word	0x0800d181
 800d118:	0800d181 	.word	0x0800d181
 800d11c:	0800d181 	.word	0x0800d181
 800d120:	0800d181 	.word	0x0800d181
 800d124:	0800d181 	.word	0x0800d181
 800d128:	0800d181 	.word	0x0800d181
 800d12c:	0800d171 	.word	0x0800d171
 800d130:	0800d181 	.word	0x0800d181
 800d134:	0800d181 	.word	0x0800d181
 800d138:	0800d181 	.word	0x0800d181
 800d13c:	0800d181 	.word	0x0800d181
 800d140:	0800d181 	.word	0x0800d181
 800d144:	0800d181 	.word	0x0800d181
 800d148:	0800d181 	.word	0x0800d181
 800d14c:	0800d179 	.word	0x0800d179
 800d150:	2301      	movs	r3, #1
 800d152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d156:	e222      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d158:	2304      	movs	r3, #4
 800d15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d15e:	e21e      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d160:	2308      	movs	r3, #8
 800d162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d166:	e21a      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d168:	2310      	movs	r3, #16
 800d16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d16e:	e216      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d170:	2320      	movs	r3, #32
 800d172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d176:	e212      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d178:	2340      	movs	r3, #64	; 0x40
 800d17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d17e:	e20e      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d180:	2380      	movs	r3, #128	; 0x80
 800d182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d186:	e20a      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a6b      	ldr	r2, [pc, #428]	; (800d33c <UART_SetConfig+0x340>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d130      	bne.n	800d1f4 <UART_SetConfig+0x1f8>
 800d192:	4b69      	ldr	r3, [pc, #420]	; (800d338 <UART_SetConfig+0x33c>)
 800d194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d196:	f003 0307 	and.w	r3, r3, #7
 800d19a:	2b05      	cmp	r3, #5
 800d19c:	d826      	bhi.n	800d1ec <UART_SetConfig+0x1f0>
 800d19e:	a201      	add	r2, pc, #4	; (adr r2, 800d1a4 <UART_SetConfig+0x1a8>)
 800d1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a4:	0800d1bd 	.word	0x0800d1bd
 800d1a8:	0800d1c5 	.word	0x0800d1c5
 800d1ac:	0800d1cd 	.word	0x0800d1cd
 800d1b0:	0800d1d5 	.word	0x0800d1d5
 800d1b4:	0800d1dd 	.word	0x0800d1dd
 800d1b8:	0800d1e5 	.word	0x0800d1e5
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1c2:	e1ec      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d1c4:	2304      	movs	r3, #4
 800d1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1ca:	e1e8      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d1cc:	2308      	movs	r3, #8
 800d1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1d2:	e1e4      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d1d4:	2310      	movs	r3, #16
 800d1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1da:	e1e0      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d1dc:	2320      	movs	r3, #32
 800d1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1e2:	e1dc      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d1e4:	2340      	movs	r3, #64	; 0x40
 800d1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1ea:	e1d8      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d1ec:	2380      	movs	r3, #128	; 0x80
 800d1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1f2:	e1d4      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a51      	ldr	r2, [pc, #324]	; (800d340 <UART_SetConfig+0x344>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d130      	bne.n	800d260 <UART_SetConfig+0x264>
 800d1fe:	4b4e      	ldr	r3, [pc, #312]	; (800d338 <UART_SetConfig+0x33c>)
 800d200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d202:	f003 0307 	and.w	r3, r3, #7
 800d206:	2b05      	cmp	r3, #5
 800d208:	d826      	bhi.n	800d258 <UART_SetConfig+0x25c>
 800d20a:	a201      	add	r2, pc, #4	; (adr r2, 800d210 <UART_SetConfig+0x214>)
 800d20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d210:	0800d229 	.word	0x0800d229
 800d214:	0800d231 	.word	0x0800d231
 800d218:	0800d239 	.word	0x0800d239
 800d21c:	0800d241 	.word	0x0800d241
 800d220:	0800d249 	.word	0x0800d249
 800d224:	0800d251 	.word	0x0800d251
 800d228:	2300      	movs	r3, #0
 800d22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d22e:	e1b6      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d230:	2304      	movs	r3, #4
 800d232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d236:	e1b2      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d238:	2308      	movs	r3, #8
 800d23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d23e:	e1ae      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d240:	2310      	movs	r3, #16
 800d242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d246:	e1aa      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d248:	2320      	movs	r3, #32
 800d24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d24e:	e1a6      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d250:	2340      	movs	r3, #64	; 0x40
 800d252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d256:	e1a2      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d258:	2380      	movs	r3, #128	; 0x80
 800d25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d25e:	e19e      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a37      	ldr	r2, [pc, #220]	; (800d344 <UART_SetConfig+0x348>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d130      	bne.n	800d2cc <UART_SetConfig+0x2d0>
 800d26a:	4b33      	ldr	r3, [pc, #204]	; (800d338 <UART_SetConfig+0x33c>)
 800d26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d26e:	f003 0307 	and.w	r3, r3, #7
 800d272:	2b05      	cmp	r3, #5
 800d274:	d826      	bhi.n	800d2c4 <UART_SetConfig+0x2c8>
 800d276:	a201      	add	r2, pc, #4	; (adr r2, 800d27c <UART_SetConfig+0x280>)
 800d278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d27c:	0800d295 	.word	0x0800d295
 800d280:	0800d29d 	.word	0x0800d29d
 800d284:	0800d2a5 	.word	0x0800d2a5
 800d288:	0800d2ad 	.word	0x0800d2ad
 800d28c:	0800d2b5 	.word	0x0800d2b5
 800d290:	0800d2bd 	.word	0x0800d2bd
 800d294:	2300      	movs	r3, #0
 800d296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d29a:	e180      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d29c:	2304      	movs	r3, #4
 800d29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2a2:	e17c      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d2a4:	2308      	movs	r3, #8
 800d2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2aa:	e178      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d2ac:	2310      	movs	r3, #16
 800d2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2b2:	e174      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d2b4:	2320      	movs	r3, #32
 800d2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2ba:	e170      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d2bc:	2340      	movs	r3, #64	; 0x40
 800d2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2c2:	e16c      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d2c4:	2380      	movs	r3, #128	; 0x80
 800d2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2ca:	e168      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a1d      	ldr	r2, [pc, #116]	; (800d348 <UART_SetConfig+0x34c>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d142      	bne.n	800d35c <UART_SetConfig+0x360>
 800d2d6:	4b18      	ldr	r3, [pc, #96]	; (800d338 <UART_SetConfig+0x33c>)
 800d2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2da:	f003 0307 	and.w	r3, r3, #7
 800d2de:	2b05      	cmp	r3, #5
 800d2e0:	d838      	bhi.n	800d354 <UART_SetConfig+0x358>
 800d2e2:	a201      	add	r2, pc, #4	; (adr r2, 800d2e8 <UART_SetConfig+0x2ec>)
 800d2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e8:	0800d301 	.word	0x0800d301
 800d2ec:	0800d309 	.word	0x0800d309
 800d2f0:	0800d311 	.word	0x0800d311
 800d2f4:	0800d319 	.word	0x0800d319
 800d2f8:	0800d321 	.word	0x0800d321
 800d2fc:	0800d34d 	.word	0x0800d34d
 800d300:	2300      	movs	r3, #0
 800d302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d306:	e14a      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d308:	2304      	movs	r3, #4
 800d30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d30e:	e146      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d310:	2308      	movs	r3, #8
 800d312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d316:	e142      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d318:	2310      	movs	r3, #16
 800d31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d31e:	e13e      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d320:	2320      	movs	r3, #32
 800d322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d326:	e13a      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d328:	cfff69f3 	.word	0xcfff69f3
 800d32c:	58000c00 	.word	0x58000c00
 800d330:	11fff4ff 	.word	0x11fff4ff
 800d334:	40011000 	.word	0x40011000
 800d338:	58024400 	.word	0x58024400
 800d33c:	40004400 	.word	0x40004400
 800d340:	40004800 	.word	0x40004800
 800d344:	40004c00 	.word	0x40004c00
 800d348:	40005000 	.word	0x40005000
 800d34c:	2340      	movs	r3, #64	; 0x40
 800d34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d352:	e124      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d354:	2380      	movs	r3, #128	; 0x80
 800d356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d35a:	e120      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4acc      	ldr	r2, [pc, #816]	; (800d694 <UART_SetConfig+0x698>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d176      	bne.n	800d454 <UART_SetConfig+0x458>
 800d366:	4bcc      	ldr	r3, [pc, #816]	; (800d698 <UART_SetConfig+0x69c>)
 800d368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d36a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d36e:	2b28      	cmp	r3, #40	; 0x28
 800d370:	d86c      	bhi.n	800d44c <UART_SetConfig+0x450>
 800d372:	a201      	add	r2, pc, #4	; (adr r2, 800d378 <UART_SetConfig+0x37c>)
 800d374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d378:	0800d41d 	.word	0x0800d41d
 800d37c:	0800d44d 	.word	0x0800d44d
 800d380:	0800d44d 	.word	0x0800d44d
 800d384:	0800d44d 	.word	0x0800d44d
 800d388:	0800d44d 	.word	0x0800d44d
 800d38c:	0800d44d 	.word	0x0800d44d
 800d390:	0800d44d 	.word	0x0800d44d
 800d394:	0800d44d 	.word	0x0800d44d
 800d398:	0800d425 	.word	0x0800d425
 800d39c:	0800d44d 	.word	0x0800d44d
 800d3a0:	0800d44d 	.word	0x0800d44d
 800d3a4:	0800d44d 	.word	0x0800d44d
 800d3a8:	0800d44d 	.word	0x0800d44d
 800d3ac:	0800d44d 	.word	0x0800d44d
 800d3b0:	0800d44d 	.word	0x0800d44d
 800d3b4:	0800d44d 	.word	0x0800d44d
 800d3b8:	0800d42d 	.word	0x0800d42d
 800d3bc:	0800d44d 	.word	0x0800d44d
 800d3c0:	0800d44d 	.word	0x0800d44d
 800d3c4:	0800d44d 	.word	0x0800d44d
 800d3c8:	0800d44d 	.word	0x0800d44d
 800d3cc:	0800d44d 	.word	0x0800d44d
 800d3d0:	0800d44d 	.word	0x0800d44d
 800d3d4:	0800d44d 	.word	0x0800d44d
 800d3d8:	0800d435 	.word	0x0800d435
 800d3dc:	0800d44d 	.word	0x0800d44d
 800d3e0:	0800d44d 	.word	0x0800d44d
 800d3e4:	0800d44d 	.word	0x0800d44d
 800d3e8:	0800d44d 	.word	0x0800d44d
 800d3ec:	0800d44d 	.word	0x0800d44d
 800d3f0:	0800d44d 	.word	0x0800d44d
 800d3f4:	0800d44d 	.word	0x0800d44d
 800d3f8:	0800d43d 	.word	0x0800d43d
 800d3fc:	0800d44d 	.word	0x0800d44d
 800d400:	0800d44d 	.word	0x0800d44d
 800d404:	0800d44d 	.word	0x0800d44d
 800d408:	0800d44d 	.word	0x0800d44d
 800d40c:	0800d44d 	.word	0x0800d44d
 800d410:	0800d44d 	.word	0x0800d44d
 800d414:	0800d44d 	.word	0x0800d44d
 800d418:	0800d445 	.word	0x0800d445
 800d41c:	2301      	movs	r3, #1
 800d41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d422:	e0bc      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d424:	2304      	movs	r3, #4
 800d426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d42a:	e0b8      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d42c:	2308      	movs	r3, #8
 800d42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d432:	e0b4      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d434:	2310      	movs	r3, #16
 800d436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d43a:	e0b0      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d43c:	2320      	movs	r3, #32
 800d43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d442:	e0ac      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d444:	2340      	movs	r3, #64	; 0x40
 800d446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d44a:	e0a8      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d44c:	2380      	movs	r3, #128	; 0x80
 800d44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d452:	e0a4      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a90      	ldr	r2, [pc, #576]	; (800d69c <UART_SetConfig+0x6a0>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d130      	bne.n	800d4c0 <UART_SetConfig+0x4c4>
 800d45e:	4b8e      	ldr	r3, [pc, #568]	; (800d698 <UART_SetConfig+0x69c>)
 800d460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d462:	f003 0307 	and.w	r3, r3, #7
 800d466:	2b05      	cmp	r3, #5
 800d468:	d826      	bhi.n	800d4b8 <UART_SetConfig+0x4bc>
 800d46a:	a201      	add	r2, pc, #4	; (adr r2, 800d470 <UART_SetConfig+0x474>)
 800d46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d470:	0800d489 	.word	0x0800d489
 800d474:	0800d491 	.word	0x0800d491
 800d478:	0800d499 	.word	0x0800d499
 800d47c:	0800d4a1 	.word	0x0800d4a1
 800d480:	0800d4a9 	.word	0x0800d4a9
 800d484:	0800d4b1 	.word	0x0800d4b1
 800d488:	2300      	movs	r3, #0
 800d48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d48e:	e086      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d490:	2304      	movs	r3, #4
 800d492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d496:	e082      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d498:	2308      	movs	r3, #8
 800d49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d49e:	e07e      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d4a0:	2310      	movs	r3, #16
 800d4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4a6:	e07a      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d4a8:	2320      	movs	r3, #32
 800d4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4ae:	e076      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d4b0:	2340      	movs	r3, #64	; 0x40
 800d4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4b6:	e072      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d4b8:	2380      	movs	r3, #128	; 0x80
 800d4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4be:	e06e      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a76      	ldr	r2, [pc, #472]	; (800d6a0 <UART_SetConfig+0x6a4>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d130      	bne.n	800d52c <UART_SetConfig+0x530>
 800d4ca:	4b73      	ldr	r3, [pc, #460]	; (800d698 <UART_SetConfig+0x69c>)
 800d4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ce:	f003 0307 	and.w	r3, r3, #7
 800d4d2:	2b05      	cmp	r3, #5
 800d4d4:	d826      	bhi.n	800d524 <UART_SetConfig+0x528>
 800d4d6:	a201      	add	r2, pc, #4	; (adr r2, 800d4dc <UART_SetConfig+0x4e0>)
 800d4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4dc:	0800d4f5 	.word	0x0800d4f5
 800d4e0:	0800d4fd 	.word	0x0800d4fd
 800d4e4:	0800d505 	.word	0x0800d505
 800d4e8:	0800d50d 	.word	0x0800d50d
 800d4ec:	0800d515 	.word	0x0800d515
 800d4f0:	0800d51d 	.word	0x0800d51d
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4fa:	e050      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d4fc:	2304      	movs	r3, #4
 800d4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d502:	e04c      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d504:	2308      	movs	r3, #8
 800d506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d50a:	e048      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d50c:	2310      	movs	r3, #16
 800d50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d512:	e044      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d514:	2320      	movs	r3, #32
 800d516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d51a:	e040      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d51c:	2340      	movs	r3, #64	; 0x40
 800d51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d522:	e03c      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d524:	2380      	movs	r3, #128	; 0x80
 800d526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d52a:	e038      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a5c      	ldr	r2, [pc, #368]	; (800d6a4 <UART_SetConfig+0x6a8>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d130      	bne.n	800d598 <UART_SetConfig+0x59c>
 800d536:	4b58      	ldr	r3, [pc, #352]	; (800d698 <UART_SetConfig+0x69c>)
 800d538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d53a:	f003 0307 	and.w	r3, r3, #7
 800d53e:	2b05      	cmp	r3, #5
 800d540:	d826      	bhi.n	800d590 <UART_SetConfig+0x594>
 800d542:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <UART_SetConfig+0x54c>)
 800d544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d548:	0800d561 	.word	0x0800d561
 800d54c:	0800d569 	.word	0x0800d569
 800d550:	0800d571 	.word	0x0800d571
 800d554:	0800d579 	.word	0x0800d579
 800d558:	0800d581 	.word	0x0800d581
 800d55c:	0800d589 	.word	0x0800d589
 800d560:	2302      	movs	r3, #2
 800d562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d566:	e01a      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d568:	2304      	movs	r3, #4
 800d56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d56e:	e016      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d570:	2308      	movs	r3, #8
 800d572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d576:	e012      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d578:	2310      	movs	r3, #16
 800d57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d57e:	e00e      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d580:	2320      	movs	r3, #32
 800d582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d586:	e00a      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d588:	2340      	movs	r3, #64	; 0x40
 800d58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d58e:	e006      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d590:	2380      	movs	r3, #128	; 0x80
 800d592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d596:	e002      	b.n	800d59e <UART_SetConfig+0x5a2>
 800d598:	2380      	movs	r3, #128	; 0x80
 800d59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4a40      	ldr	r2, [pc, #256]	; (800d6a4 <UART_SetConfig+0x6a8>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	f040 80ef 	bne.w	800d788 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d5aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d5ae:	2b20      	cmp	r3, #32
 800d5b0:	dc46      	bgt.n	800d640 <UART_SetConfig+0x644>
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	f2c0 8081 	blt.w	800d6ba <UART_SetConfig+0x6be>
 800d5b8:	3b02      	subs	r3, #2
 800d5ba:	2b1e      	cmp	r3, #30
 800d5bc:	d87d      	bhi.n	800d6ba <UART_SetConfig+0x6be>
 800d5be:	a201      	add	r2, pc, #4	; (adr r2, 800d5c4 <UART_SetConfig+0x5c8>)
 800d5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c4:	0800d647 	.word	0x0800d647
 800d5c8:	0800d6bb 	.word	0x0800d6bb
 800d5cc:	0800d64f 	.word	0x0800d64f
 800d5d0:	0800d6bb 	.word	0x0800d6bb
 800d5d4:	0800d6bb 	.word	0x0800d6bb
 800d5d8:	0800d6bb 	.word	0x0800d6bb
 800d5dc:	0800d65f 	.word	0x0800d65f
 800d5e0:	0800d6bb 	.word	0x0800d6bb
 800d5e4:	0800d6bb 	.word	0x0800d6bb
 800d5e8:	0800d6bb 	.word	0x0800d6bb
 800d5ec:	0800d6bb 	.word	0x0800d6bb
 800d5f0:	0800d6bb 	.word	0x0800d6bb
 800d5f4:	0800d6bb 	.word	0x0800d6bb
 800d5f8:	0800d6bb 	.word	0x0800d6bb
 800d5fc:	0800d66f 	.word	0x0800d66f
 800d600:	0800d6bb 	.word	0x0800d6bb
 800d604:	0800d6bb 	.word	0x0800d6bb
 800d608:	0800d6bb 	.word	0x0800d6bb
 800d60c:	0800d6bb 	.word	0x0800d6bb
 800d610:	0800d6bb 	.word	0x0800d6bb
 800d614:	0800d6bb 	.word	0x0800d6bb
 800d618:	0800d6bb 	.word	0x0800d6bb
 800d61c:	0800d6bb 	.word	0x0800d6bb
 800d620:	0800d6bb 	.word	0x0800d6bb
 800d624:	0800d6bb 	.word	0x0800d6bb
 800d628:	0800d6bb 	.word	0x0800d6bb
 800d62c:	0800d6bb 	.word	0x0800d6bb
 800d630:	0800d6bb 	.word	0x0800d6bb
 800d634:	0800d6bb 	.word	0x0800d6bb
 800d638:	0800d6bb 	.word	0x0800d6bb
 800d63c:	0800d6ad 	.word	0x0800d6ad
 800d640:	2b40      	cmp	r3, #64	; 0x40
 800d642:	d036      	beq.n	800d6b2 <UART_SetConfig+0x6b6>
 800d644:	e039      	b.n	800d6ba <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d646:	f7fb fec9 	bl	80093dc <HAL_RCCEx_GetD3PCLK1Freq>
 800d64a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d64c:	e03b      	b.n	800d6c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d64e:	f107 0314 	add.w	r3, r7, #20
 800d652:	4618      	mov	r0, r3
 800d654:	f7fb fed8 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d65c:	e033      	b.n	800d6c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d65e:	f107 0308 	add.w	r3, r7, #8
 800d662:	4618      	mov	r0, r3
 800d664:	f7fc f824 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d66c:	e02b      	b.n	800d6c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d66e:	4b0a      	ldr	r3, [pc, #40]	; (800d698 <UART_SetConfig+0x69c>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 0320 	and.w	r3, r3, #32
 800d676:	2b00      	cmp	r3, #0
 800d678:	d009      	beq.n	800d68e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d67a:	4b07      	ldr	r3, [pc, #28]	; (800d698 <UART_SetConfig+0x69c>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	08db      	lsrs	r3, r3, #3
 800d680:	f003 0303 	and.w	r3, r3, #3
 800d684:	4a08      	ldr	r2, [pc, #32]	; (800d6a8 <UART_SetConfig+0x6ac>)
 800d686:	fa22 f303 	lsr.w	r3, r2, r3
 800d68a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d68c:	e01b      	b.n	800d6c6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d68e:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <UART_SetConfig+0x6ac>)
 800d690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d692:	e018      	b.n	800d6c6 <UART_SetConfig+0x6ca>
 800d694:	40011400 	.word	0x40011400
 800d698:	58024400 	.word	0x58024400
 800d69c:	40007800 	.word	0x40007800
 800d6a0:	40007c00 	.word	0x40007c00
 800d6a4:	58000c00 	.word	0x58000c00
 800d6a8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d6ac:	4bc4      	ldr	r3, [pc, #784]	; (800d9c0 <UART_SetConfig+0x9c4>)
 800d6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d6b0:	e009      	b.n	800d6c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d6b8:	e005      	b.n	800d6c6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d6c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f000 81da 	beq.w	800da82 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d2:	4abc      	ldr	r2, [pc, #752]	; (800d9c4 <UART_SetConfig+0x9c8>)
 800d6d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6d8:	461a      	mov	r2, r3
 800d6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6e0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	685a      	ldr	r2, [r3, #4]
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	4413      	add	r3, r2
 800d6ec:	6a3a      	ldr	r2, [r7, #32]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d305      	bcc.n	800d6fe <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6f8:	6a3a      	ldr	r2, [r7, #32]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d903      	bls.n	800d706 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d704:	e1bd      	b.n	800da82 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d708:	4618      	mov	r0, r3
 800d70a:	f04f 0100 	mov.w	r1, #0
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d712:	4aac      	ldr	r2, [pc, #688]	; (800d9c4 <UART_SetConfig+0x9c8>)
 800d714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d718:	b29a      	uxth	r2, r3
 800d71a:	f04f 0300 	mov.w	r3, #0
 800d71e:	f7f2 fe37 	bl	8000390 <__aeabi_uldivmod>
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	4610      	mov	r0, r2
 800d728:	4619      	mov	r1, r3
 800d72a:	f04f 0200 	mov.w	r2, #0
 800d72e:	f04f 0300 	mov.w	r3, #0
 800d732:	020b      	lsls	r3, r1, #8
 800d734:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d738:	0202      	lsls	r2, r0, #8
 800d73a:	6879      	ldr	r1, [r7, #4]
 800d73c:	6849      	ldr	r1, [r1, #4]
 800d73e:	0849      	lsrs	r1, r1, #1
 800d740:	4608      	mov	r0, r1
 800d742:	f04f 0100 	mov.w	r1, #0
 800d746:	1814      	adds	r4, r2, r0
 800d748:	eb43 0501 	adc.w	r5, r3, r1
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	461a      	mov	r2, r3
 800d752:	f04f 0300 	mov.w	r3, #0
 800d756:	4620      	mov	r0, r4
 800d758:	4629      	mov	r1, r5
 800d75a:	f7f2 fe19 	bl	8000390 <__aeabi_uldivmod>
 800d75e:	4602      	mov	r2, r0
 800d760:	460b      	mov	r3, r1
 800d762:	4613      	mov	r3, r2
 800d764:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d76c:	d308      	bcc.n	800d780 <UART_SetConfig+0x784>
 800d76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d774:	d204      	bcs.n	800d780 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d77c:	60da      	str	r2, [r3, #12]
 800d77e:	e180      	b.n	800da82 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d786:	e17c      	b.n	800da82 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	69db      	ldr	r3, [r3, #28]
 800d78c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d790:	f040 80bf 	bne.w	800d912 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d794:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d798:	2b20      	cmp	r3, #32
 800d79a:	dc49      	bgt.n	800d830 <UART_SetConfig+0x834>
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	db7c      	blt.n	800d89a <UART_SetConfig+0x89e>
 800d7a0:	2b20      	cmp	r3, #32
 800d7a2:	d87a      	bhi.n	800d89a <UART_SetConfig+0x89e>
 800d7a4:	a201      	add	r2, pc, #4	; (adr r2, 800d7ac <UART_SetConfig+0x7b0>)
 800d7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7aa:	bf00      	nop
 800d7ac:	0800d837 	.word	0x0800d837
 800d7b0:	0800d83f 	.word	0x0800d83f
 800d7b4:	0800d89b 	.word	0x0800d89b
 800d7b8:	0800d89b 	.word	0x0800d89b
 800d7bc:	0800d847 	.word	0x0800d847
 800d7c0:	0800d89b 	.word	0x0800d89b
 800d7c4:	0800d89b 	.word	0x0800d89b
 800d7c8:	0800d89b 	.word	0x0800d89b
 800d7cc:	0800d857 	.word	0x0800d857
 800d7d0:	0800d89b 	.word	0x0800d89b
 800d7d4:	0800d89b 	.word	0x0800d89b
 800d7d8:	0800d89b 	.word	0x0800d89b
 800d7dc:	0800d89b 	.word	0x0800d89b
 800d7e0:	0800d89b 	.word	0x0800d89b
 800d7e4:	0800d89b 	.word	0x0800d89b
 800d7e8:	0800d89b 	.word	0x0800d89b
 800d7ec:	0800d867 	.word	0x0800d867
 800d7f0:	0800d89b 	.word	0x0800d89b
 800d7f4:	0800d89b 	.word	0x0800d89b
 800d7f8:	0800d89b 	.word	0x0800d89b
 800d7fc:	0800d89b 	.word	0x0800d89b
 800d800:	0800d89b 	.word	0x0800d89b
 800d804:	0800d89b 	.word	0x0800d89b
 800d808:	0800d89b 	.word	0x0800d89b
 800d80c:	0800d89b 	.word	0x0800d89b
 800d810:	0800d89b 	.word	0x0800d89b
 800d814:	0800d89b 	.word	0x0800d89b
 800d818:	0800d89b 	.word	0x0800d89b
 800d81c:	0800d89b 	.word	0x0800d89b
 800d820:	0800d89b 	.word	0x0800d89b
 800d824:	0800d89b 	.word	0x0800d89b
 800d828:	0800d89b 	.word	0x0800d89b
 800d82c:	0800d88d 	.word	0x0800d88d
 800d830:	2b40      	cmp	r3, #64	; 0x40
 800d832:	d02e      	beq.n	800d892 <UART_SetConfig+0x896>
 800d834:	e031      	b.n	800d89a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d836:	f7fa f951 	bl	8007adc <HAL_RCC_GetPCLK1Freq>
 800d83a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d83c:	e033      	b.n	800d8a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d83e:	f7fa f963 	bl	8007b08 <HAL_RCC_GetPCLK2Freq>
 800d842:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d844:	e02f      	b.n	800d8a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d846:	f107 0314 	add.w	r3, r7, #20
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fb fddc 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d854:	e027      	b.n	800d8a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d856:	f107 0308 	add.w	r3, r7, #8
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fb ff28 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d864:	e01f      	b.n	800d8a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d866:	4b58      	ldr	r3, [pc, #352]	; (800d9c8 <UART_SetConfig+0x9cc>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f003 0320 	and.w	r3, r3, #32
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d009      	beq.n	800d886 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d872:	4b55      	ldr	r3, [pc, #340]	; (800d9c8 <UART_SetConfig+0x9cc>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	08db      	lsrs	r3, r3, #3
 800d878:	f003 0303 	and.w	r3, r3, #3
 800d87c:	4a53      	ldr	r2, [pc, #332]	; (800d9cc <UART_SetConfig+0x9d0>)
 800d87e:	fa22 f303 	lsr.w	r3, r2, r3
 800d882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d884:	e00f      	b.n	800d8a6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d886:	4b51      	ldr	r3, [pc, #324]	; (800d9cc <UART_SetConfig+0x9d0>)
 800d888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d88a:	e00c      	b.n	800d8a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d88c:	4b4c      	ldr	r3, [pc, #304]	; (800d9c0 <UART_SetConfig+0x9c4>)
 800d88e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d890:	e009      	b.n	800d8a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d896:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d898:	e005      	b.n	800d8a6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d89a:	2300      	movs	r3, #0
 800d89c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d8a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 80ea 	beq.w	800da82 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b2:	4a44      	ldr	r2, [pc, #272]	; (800d9c4 <UART_SetConfig+0x9c8>)
 800d8b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8c0:	005a      	lsls	r2, r3, #1
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	085b      	lsrs	r3, r3, #1
 800d8c8:	441a      	add	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d8:	2b0f      	cmp	r3, #15
 800d8da:	d916      	bls.n	800d90a <UART_SetConfig+0x90e>
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8e2:	d212      	bcs.n	800d90a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	f023 030f 	bic.w	r3, r3, #15
 800d8ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f0:	085b      	lsrs	r3, r3, #1
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	f003 0307 	and.w	r3, r3, #7
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d906:	60da      	str	r2, [r3, #12]
 800d908:	e0bb      	b.n	800da82 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d910:	e0b7      	b.n	800da82 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d916:	2b20      	cmp	r3, #32
 800d918:	dc4a      	bgt.n	800d9b0 <UART_SetConfig+0x9b4>
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f2c0 8086 	blt.w	800da2c <UART_SetConfig+0xa30>
 800d920:	2b20      	cmp	r3, #32
 800d922:	f200 8083 	bhi.w	800da2c <UART_SetConfig+0xa30>
 800d926:	a201      	add	r2, pc, #4	; (adr r2, 800d92c <UART_SetConfig+0x930>)
 800d928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d92c:	0800d9b7 	.word	0x0800d9b7
 800d930:	0800d9d1 	.word	0x0800d9d1
 800d934:	0800da2d 	.word	0x0800da2d
 800d938:	0800da2d 	.word	0x0800da2d
 800d93c:	0800d9d9 	.word	0x0800d9d9
 800d940:	0800da2d 	.word	0x0800da2d
 800d944:	0800da2d 	.word	0x0800da2d
 800d948:	0800da2d 	.word	0x0800da2d
 800d94c:	0800d9e9 	.word	0x0800d9e9
 800d950:	0800da2d 	.word	0x0800da2d
 800d954:	0800da2d 	.word	0x0800da2d
 800d958:	0800da2d 	.word	0x0800da2d
 800d95c:	0800da2d 	.word	0x0800da2d
 800d960:	0800da2d 	.word	0x0800da2d
 800d964:	0800da2d 	.word	0x0800da2d
 800d968:	0800da2d 	.word	0x0800da2d
 800d96c:	0800d9f9 	.word	0x0800d9f9
 800d970:	0800da2d 	.word	0x0800da2d
 800d974:	0800da2d 	.word	0x0800da2d
 800d978:	0800da2d 	.word	0x0800da2d
 800d97c:	0800da2d 	.word	0x0800da2d
 800d980:	0800da2d 	.word	0x0800da2d
 800d984:	0800da2d 	.word	0x0800da2d
 800d988:	0800da2d 	.word	0x0800da2d
 800d98c:	0800da2d 	.word	0x0800da2d
 800d990:	0800da2d 	.word	0x0800da2d
 800d994:	0800da2d 	.word	0x0800da2d
 800d998:	0800da2d 	.word	0x0800da2d
 800d99c:	0800da2d 	.word	0x0800da2d
 800d9a0:	0800da2d 	.word	0x0800da2d
 800d9a4:	0800da2d 	.word	0x0800da2d
 800d9a8:	0800da2d 	.word	0x0800da2d
 800d9ac:	0800da1f 	.word	0x0800da1f
 800d9b0:	2b40      	cmp	r3, #64	; 0x40
 800d9b2:	d037      	beq.n	800da24 <UART_SetConfig+0xa28>
 800d9b4:	e03a      	b.n	800da2c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9b6:	f7fa f891 	bl	8007adc <HAL_RCC_GetPCLK1Freq>
 800d9ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d9bc:	e03c      	b.n	800da38 <UART_SetConfig+0xa3c>
 800d9be:	bf00      	nop
 800d9c0:	003d0900 	.word	0x003d0900
 800d9c4:	080154d8 	.word	0x080154d8
 800d9c8:	58024400 	.word	0x58024400
 800d9cc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9d0:	f7fa f89a 	bl	8007b08 <HAL_RCC_GetPCLK2Freq>
 800d9d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d9d6:	e02f      	b.n	800da38 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9d8:	f107 0314 	add.w	r3, r7, #20
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7fb fd13 	bl	8009408 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9e6:	e027      	b.n	800da38 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9e8:	f107 0308 	add.w	r3, r7, #8
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fb fe5f 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9f6:	e01f      	b.n	800da38 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9f8:	4b2c      	ldr	r3, [pc, #176]	; (800daac <UART_SetConfig+0xab0>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f003 0320 	and.w	r3, r3, #32
 800da00:	2b00      	cmp	r3, #0
 800da02:	d009      	beq.n	800da18 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da04:	4b29      	ldr	r3, [pc, #164]	; (800daac <UART_SetConfig+0xab0>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	08db      	lsrs	r3, r3, #3
 800da0a:	f003 0303 	and.w	r3, r3, #3
 800da0e:	4a28      	ldr	r2, [pc, #160]	; (800dab0 <UART_SetConfig+0xab4>)
 800da10:	fa22 f303 	lsr.w	r3, r2, r3
 800da14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da16:	e00f      	b.n	800da38 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800da18:	4b25      	ldr	r3, [pc, #148]	; (800dab0 <UART_SetConfig+0xab4>)
 800da1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800da1c:	e00c      	b.n	800da38 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da1e:	4b25      	ldr	r3, [pc, #148]	; (800dab4 <UART_SetConfig+0xab8>)
 800da20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800da22:	e009      	b.n	800da38 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800da2a:	e005      	b.n	800da38 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800da2c:	2300      	movs	r3, #0
 800da2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800da36:	bf00      	nop
    }

    if (pclk != 0U)
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d021      	beq.n	800da82 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da42:	4a1d      	ldr	r2, [pc, #116]	; (800dab8 <UART_SetConfig+0xabc>)
 800da44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da48:	461a      	mov	r2, r3
 800da4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4c:	fbb3 f2f2 	udiv	r2, r3, r2
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	085b      	lsrs	r3, r3, #1
 800da56:	441a      	add	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da60:	b29b      	uxth	r3, r3
 800da62:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	2b0f      	cmp	r3, #15
 800da68:	d908      	bls.n	800da7c <UART_SetConfig+0xa80>
 800da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da70:	d204      	bcs.n	800da7c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da78:	60da      	str	r2, [r3, #12]
 800da7a:	e002      	b.n	800da82 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800da7c:	2301      	movs	r3, #1
 800da7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2201      	movs	r2, #1
 800da86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2201      	movs	r2, #1
 800da8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800da9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3738      	adds	r7, #56	; 0x38
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bdb0      	pop	{r4, r5, r7, pc}
 800daaa:	bf00      	nop
 800daac:	58024400 	.word	0x58024400
 800dab0:	03d09000 	.word	0x03d09000
 800dab4:	003d0900 	.word	0x003d0900
 800dab8:	080154d8 	.word	0x080154d8

0800dabc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac8:	f003 0301 	and.w	r3, r3, #1
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00a      	beq.n	800dae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	430a      	orrs	r2, r1
 800dae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daea:	f003 0302 	and.w	r3, r3, #2
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00a      	beq.n	800db08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	430a      	orrs	r2, r1
 800db06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0c:	f003 0304 	and.w	r3, r3, #4
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00a      	beq.n	800db2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	430a      	orrs	r2, r1
 800db28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2e:	f003 0308 	and.w	r3, r3, #8
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00a      	beq.n	800db4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	430a      	orrs	r2, r1
 800db4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db50:	f003 0310 	and.w	r3, r3, #16
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00a      	beq.n	800db6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	430a      	orrs	r2, r1
 800db6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db72:	f003 0320 	and.w	r3, r3, #32
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00a      	beq.n	800db90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	430a      	orrs	r2, r1
 800db8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d01a      	beq.n	800dbd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbba:	d10a      	bne.n	800dbd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	430a      	orrs	r2, r1
 800dbf2:	605a      	str	r2, [r3, #4]
  }
}
 800dbf4:	bf00      	nop
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af02      	add	r7, sp, #8
 800dc06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc10:	f7f4 f810 	bl	8001c34 <HAL_GetTick>
 800dc14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f003 0308 	and.w	r3, r3, #8
 800dc20:	2b08      	cmp	r3, #8
 800dc22:	d10e      	bne.n	800dc42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 f82f 	bl	800dc96 <UART_WaitOnFlagUntilTimeout>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc3e:	2303      	movs	r3, #3
 800dc40:	e025      	b.n	800dc8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 0304 	and.w	r3, r3, #4
 800dc4c:	2b04      	cmp	r3, #4
 800dc4e:	d10e      	bne.n	800dc6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f819 	bl	800dc96 <UART_WaitOnFlagUntilTimeout>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d001      	beq.n	800dc6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc6a:	2303      	movs	r3, #3
 800dc6c:	e00f      	b.n	800dc8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2220      	movs	r2, #32
 800dc72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2220      	movs	r2, #32
 800dc7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b084      	sub	sp, #16
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	60f8      	str	r0, [r7, #12]
 800dc9e:	60b9      	str	r1, [r7, #8]
 800dca0:	603b      	str	r3, [r7, #0]
 800dca2:	4613      	mov	r3, r2
 800dca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dca6:	e062      	b.n	800dd6e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcae:	d05e      	beq.n	800dd6e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcb0:	f7f3 ffc0 	bl	8001c34 <HAL_GetTick>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	69ba      	ldr	r2, [r7, #24]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d302      	bcc.n	800dcc6 <UART_WaitOnFlagUntilTimeout+0x30>
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d11d      	bne.n	800dd02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dcd4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	689a      	ldr	r2, [r3, #8]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f022 0201 	bic.w	r2, r2, #1
 800dce4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2220      	movs	r2, #32
 800dcea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2220      	movs	r2, #32
 800dcf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	e045      	b.n	800dd8e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f003 0304 	and.w	r3, r3, #4
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d02e      	beq.n	800dd6e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	69db      	ldr	r3, [r3, #28]
 800dd16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd1e:	d126      	bne.n	800dd6e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dd38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	689a      	ldr	r2, [r3, #8]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f022 0201 	bic.w	r2, r2, #1
 800dd48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2220      	movs	r2, #32
 800dd4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2220      	movs	r2, #32
 800dd56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2220      	movs	r2, #32
 800dd5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dd6a:	2303      	movs	r3, #3
 800dd6c:	e00f      	b.n	800dd8e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	69da      	ldr	r2, [r3, #28]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	4013      	ands	r3, r2
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	bf0c      	ite	eq
 800dd7e:	2301      	moveq	r3, #1
 800dd80:	2300      	movne	r3, #0
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	461a      	mov	r2, r3
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d08d      	beq.n	800dca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd8c:	2300      	movs	r3, #0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
	...

0800dd98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ddae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	6899      	ldr	r1, [r3, #8]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	4b0f      	ldr	r3, [pc, #60]	; (800ddf8 <UART_EndRxTransfer+0x60>)
 800ddbc:	400b      	ands	r3, r1
 800ddbe:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d107      	bne.n	800ddd8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f022 0210 	bic.w	r2, r2, #16
 800ddd6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2220      	movs	r2, #32
 800dddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	effffffe 	.word	0xeffffffe

0800ddfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f7ff f8d8 	bl	800cfd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de20:	bf00      	nop
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de3e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2220      	movs	r2, #32
 800de44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7ff f8b4 	bl	800cfbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de54:	bf00      	nop
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d101      	bne.n	800deae <HAL_UARTEx_DisableFifoMode+0x16>
 800deaa:	2302      	movs	r3, #2
 800deac:	e027      	b.n	800defe <HAL_UARTEx_DisableFifoMode+0x66>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2201      	movs	r2, #1
 800deb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2224      	movs	r2, #36	; 0x24
 800deba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f022 0201 	bic.w	r2, r2, #1
 800ded4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dedc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2200      	movs	r2, #0
 800dee2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2220      	movs	r2, #32
 800def0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800defc:	2300      	movs	r3, #0
}
 800defe:	4618      	mov	r0, r3
 800df00:	3714      	adds	r7, #20
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b084      	sub	sp, #16
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d101      	bne.n	800df22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800df1e:	2302      	movs	r3, #2
 800df20:	e02d      	b.n	800df7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2201      	movs	r2, #1
 800df26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2224      	movs	r2, #36	; 0x24
 800df2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f022 0201 	bic.w	r2, r2, #1
 800df48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	430a      	orrs	r2, r1
 800df5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 f850 	bl	800e004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2220      	movs	r2, #32
 800df70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b084      	sub	sp, #16
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df96:	2b01      	cmp	r3, #1
 800df98:	d101      	bne.n	800df9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800df9a:	2302      	movs	r3, #2
 800df9c:	e02d      	b.n	800dffa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2224      	movs	r2, #36	; 0x24
 800dfaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f022 0201 	bic.w	r2, r2, #1
 800dfc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	683a      	ldr	r2, [r7, #0]
 800dfd6:	430a      	orrs	r2, r1
 800dfd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f812 	bl	800e004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2220      	movs	r2, #32
 800dfec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
	...

0800e004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e010:	2b00      	cmp	r3, #0
 800e012:	d108      	bne.n	800e026 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e024:	e031      	b.n	800e08a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e026:	2310      	movs	r3, #16
 800e028:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e02a:	2310      	movs	r3, #16
 800e02c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	0e5b      	lsrs	r3, r3, #25
 800e036:	b2db      	uxtb	r3, r3
 800e038:	f003 0307 	and.w	r3, r3, #7
 800e03c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	0f5b      	lsrs	r3, r3, #29
 800e046:	b2db      	uxtb	r3, r3
 800e048:	f003 0307 	and.w	r3, r3, #7
 800e04c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e04e:	7bbb      	ldrb	r3, [r7, #14]
 800e050:	7b3a      	ldrb	r2, [r7, #12]
 800e052:	4911      	ldr	r1, [pc, #68]	; (800e098 <UARTEx_SetNbDataToProcess+0x94>)
 800e054:	5c8a      	ldrb	r2, [r1, r2]
 800e056:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e05a:	7b3a      	ldrb	r2, [r7, #12]
 800e05c:	490f      	ldr	r1, [pc, #60]	; (800e09c <UARTEx_SetNbDataToProcess+0x98>)
 800e05e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e060:	fb93 f3f2 	sdiv	r3, r3, r2
 800e064:	b29a      	uxth	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	7b7a      	ldrb	r2, [r7, #13]
 800e070:	4909      	ldr	r1, [pc, #36]	; (800e098 <UARTEx_SetNbDataToProcess+0x94>)
 800e072:	5c8a      	ldrb	r2, [r1, r2]
 800e074:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e078:	7b7a      	ldrb	r2, [r7, #13]
 800e07a:	4908      	ldr	r1, [pc, #32]	; (800e09c <UARTEx_SetNbDataToProcess+0x98>)
 800e07c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e07e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e082:	b29a      	uxth	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e08a:	bf00      	nop
 800e08c:	3714      	adds	r7, #20
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop
 800e098:	080154f0 	.word	0x080154f0
 800e09c:	080154f8 	.word	0x080154f8

0800e0a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e0a0:	b084      	sub	sp, #16
 800e0a2:	b480      	push	{r7}
 800e0a4:	b085      	sub	sp, #20
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	f107 001c 	add.w	r0, r7, #28
 800e0ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e0b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e0ba:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800e0be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800e0c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800e0c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685a      	ldr	r2, [r3, #4]
 800e0d2:	4b07      	ldr	r3, [pc, #28]	; (800e0f0 <SDMMC_Init+0x50>)
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	431a      	orrs	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3714      	adds	r7, #20
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	b004      	add	sp, #16
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	ffc02c00 	.word	0xffc02c00

0800e0f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e102:	4618      	mov	r0, r3
 800e104:	370c      	adds	r7, #12
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e10e:	b480      	push	{r7}
 800e110:	b083      	sub	sp, #12
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f043 0203 	orr.w	r2, r3, #3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e144:	2300      	movs	r3, #0
}
 800e146:	4618      	mov	r0, r3
 800e148:	370c      	adds	r7, #12
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr

0800e152 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e152:	b480      	push	{r7}
 800e154:	b083      	sub	sp, #12
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f003 0303 	and.w	r3, r3, #3
}
 800e162:	4618      	mov	r0, r3
 800e164:	370c      	adds	r7, #12
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
	...

0800e170 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e17a:	2300      	movs	r3, #0
 800e17c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e18e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e194:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e19a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	68da      	ldr	r2, [r3, #12]
 800e1a6:	4b06      	ldr	r3, [pc, #24]	; (800e1c0 <SDMMC_SendCommand+0x50>)
 800e1a8:	4013      	ands	r3, r2
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	431a      	orrs	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e1b2:	2300      	movs	r3, #0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3714      	adds	r7, #20
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	fffee0c0 	.word	0xfffee0c0

0800e1c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	b2db      	uxtb	r3, r3
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	370c      	adds	r7, #12
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr

0800e1de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e1de:	b480      	push	{r7}
 800e1e0:	b085      	sub	sp, #20
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	3314      	adds	r3, #20
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3714      	adds	r7, #20
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e204:	b480      	push	{r7}
 800e206:	b085      	sub	sp, #20
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e22a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e230:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e236:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	4313      	orrs	r3, r2
 800e23c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e242:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	431a      	orrs	r2, r3
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e24e:	2300      	movs	r3, #0

}
 800e250:	4618      	mov	r0, r3
 800e252:	3714      	adds	r7, #20
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b088      	sub	sp, #32
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e26a:	2310      	movs	r3, #16
 800e26c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e26e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e274:	2300      	movs	r3, #0
 800e276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e27c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e27e:	f107 0308 	add.w	r3, r7, #8
 800e282:	4619      	mov	r1, r3
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff ff73 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e28e:	2110      	movs	r1, #16
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 fa5f 	bl	800e754 <SDMMC_GetCmdResp1>
 800e296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e298:	69fb      	ldr	r3, [r7, #28]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3720      	adds	r7, #32
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b088      	sub	sp, #32
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
 800e2aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e2b0:	2311      	movs	r3, #17
 800e2b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2c4:	f107 0308 	add.w	r3, r7, #8
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff ff50 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e2d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2d4:	2111      	movs	r1, #17
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fa3c 	bl	800e754 <SDMMC_GetCmdResp1>
 800e2dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2de:	69fb      	ldr	r3, [r7, #28]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3720      	adds	r7, #32
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b088      	sub	sp, #32
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e2f6:	2312      	movs	r3, #18
 800e2f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e300:	2300      	movs	r3, #0
 800e302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e30a:	f107 0308 	add.w	r3, r7, #8
 800e30e:	4619      	mov	r1, r3
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff ff2d 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e316:	f241 3288 	movw	r2, #5000	; 0x1388
 800e31a:	2112      	movs	r1, #18
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fa19 	bl	800e754 <SDMMC_GetCmdResp1>
 800e322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e324:	69fb      	ldr	r3, [r7, #28]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3720      	adds	r7, #32
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b088      	sub	sp, #32
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e33c:	2318      	movs	r3, #24
 800e33e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e340:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e346:	2300      	movs	r3, #0
 800e348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e34a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e34e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e350:	f107 0308 	add.w	r3, r7, #8
 800e354:	4619      	mov	r1, r3
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7ff ff0a 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e35c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e360:	2118      	movs	r1, #24
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 f9f6 	bl	800e754 <SDMMC_GetCmdResp1>
 800e368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e36a:	69fb      	ldr	r3, [r7, #28]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3720      	adds	r7, #32
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b088      	sub	sp, #32
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e382:	2319      	movs	r3, #25
 800e384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e38a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e38c:	2300      	movs	r3, #0
 800e38e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e394:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e396:	f107 0308 	add.w	r3, r7, #8
 800e39a:	4619      	mov	r1, r3
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7ff fee7 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e3a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3a6:	2119      	movs	r1, #25
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 f9d3 	bl	800e754 <SDMMC_GetCmdResp1>
 800e3ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3b0:	69fb      	ldr	r3, [r7, #28]
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3720      	adds	r7, #32
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
	...

0800e3bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b088      	sub	sp, #32
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e3c8:	230c      	movs	r3, #12
 800e3ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3da:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3f4:	f107 0308 	add.w	r3, r7, #8
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7ff feb8 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e400:	4a0b      	ldr	r2, [pc, #44]	; (800e430 <SDMMC_CmdStopTransfer+0x74>)
 800e402:	210c      	movs	r1, #12
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f9a5 	bl	800e754 <SDMMC_GetCmdResp1>
 800e40a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e41e:	d101      	bne.n	800e424 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e420:	2300      	movs	r3, #0
 800e422:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e424:	69fb      	ldr	r3, [r7, #28]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3720      	adds	r7, #32
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	05f5e100 	.word	0x05f5e100

0800e434 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e442:	2307      	movs	r3, #7
 800e444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e44a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e44c:	2300      	movs	r3, #0
 800e44e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e454:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e456:	f107 0308 	add.w	r3, r7, #8
 800e45a:	4619      	mov	r1, r3
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7ff fe87 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e462:	f241 3288 	movw	r2, #5000	; 0x1388
 800e466:	2107      	movs	r1, #7
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 f973 	bl	800e754 <SDMMC_GetCmdResp1>
 800e46e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e470:	69fb      	ldr	r3, [r7, #28]
}
 800e472:	4618      	mov	r0, r3
 800e474:	3720      	adds	r7, #32
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b088      	sub	sp, #32
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e482:	2300      	movs	r3, #0
 800e484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e486:	2300      	movs	r3, #0
 800e488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e48a:	2300      	movs	r3, #0
 800e48c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e48e:	2300      	movs	r3, #0
 800e490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e498:	f107 0308 	add.w	r3, r7, #8
 800e49c:	4619      	mov	r1, r3
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7ff fe66 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 fb97 	bl	800ebd8 <SDMMC_GetCmdError>
 800e4aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ac:	69fb      	ldr	r3, [r7, #28]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3720      	adds	r7, #32
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b088      	sub	sp, #32
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e4be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e4c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e4c4:	2308      	movs	r3, #8
 800e4c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4d8:	f107 0308 	add.w	r3, r7, #8
 800e4dc:	4619      	mov	r1, r3
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f7ff fe46 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 fb29 	bl	800eb3c <SDMMC_GetCmdResp7>
 800e4ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3720      	adds	r7, #32
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b088      	sub	sp, #32
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e504:	2337      	movs	r3, #55	; 0x37
 800e506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e50c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e50e:	2300      	movs	r3, #0
 800e510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e516:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e518:	f107 0308 	add.w	r3, r7, #8
 800e51c:	4619      	mov	r1, r3
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7ff fe26 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e524:	f241 3288 	movw	r2, #5000	; 0x1388
 800e528:	2137      	movs	r1, #55	; 0x37
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 f912 	bl	800e754 <SDMMC_GetCmdResp1>
 800e530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e532:	69fb      	ldr	r3, [r7, #28]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3720      	adds	r7, #32
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b088      	sub	sp, #32
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e54a:	2329      	movs	r3, #41	; 0x29
 800e54c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e54e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e554:	2300      	movs	r3, #0
 800e556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e55c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e55e:	f107 0308 	add.w	r3, r7, #8
 800e562:	4619      	mov	r1, r3
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f7ff fe03 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fa2e 	bl	800e9cc <SDMMC_GetCmdResp3>
 800e570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e572:	69fb      	ldr	r3, [r7, #28]
}
 800e574:	4618      	mov	r0, r3
 800e576:	3720      	adds	r7, #32
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e58a:	2306      	movs	r3, #6
 800e58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e58e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e594:	2300      	movs	r3, #0
 800e596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e59c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e59e:	f107 0308 	add.w	r3, r7, #8
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7ff fde3 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e5aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5ae:	2106      	movs	r1, #6
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 f8cf 	bl	800e754 <SDMMC_GetCmdResp1>
 800e5b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5b8:	69fb      	ldr	r3, [r7, #28]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3720      	adds	r7, #32
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b088      	sub	sp, #32
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e5ce:	2333      	movs	r3, #51	; 0x33
 800e5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5e2:	f107 0308 	add.w	r3, r7, #8
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff fdc1 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e5ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5f2:	2133      	movs	r1, #51	; 0x33
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f8ad 	bl	800e754 <SDMMC_GetCmdResp1>
 800e5fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5fc:	69fb      	ldr	r3, [r7, #28]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3720      	adds	r7, #32
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e606:	b580      	push	{r7, lr}
 800e608:	b088      	sub	sp, #32
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e60e:	2300      	movs	r3, #0
 800e610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e612:	2302      	movs	r3, #2
 800e614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e61c:	2300      	movs	r3, #0
 800e61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e626:	f107 0308 	add.w	r3, r7, #8
 800e62a:	4619      	mov	r1, r3
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7ff fd9f 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 f980 	bl	800e938 <SDMMC_GetCmdResp2>
 800e638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e63a:	69fb      	ldr	r3, [r7, #28]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3720      	adds	r7, #32
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b088      	sub	sp, #32
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e652:	2309      	movs	r3, #9
 800e654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e656:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e65a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e65c:	2300      	movs	r3, #0
 800e65e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e664:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e666:	f107 0308 	add.w	r3, r7, #8
 800e66a:	4619      	mov	r1, r3
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7ff fd7f 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 f960 	bl	800e938 <SDMMC_GetCmdResp2>
 800e678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e67a:	69fb      	ldr	r3, [r7, #28]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3720      	adds	r7, #32
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b088      	sub	sp, #32
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e68e:	2300      	movs	r3, #0
 800e690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e692:	2303      	movs	r3, #3
 800e694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e69a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e69c:	2300      	movs	r3, #0
 800e69e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e6a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6a6:	f107 0308 	add.w	r3, r7, #8
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7ff fd5f 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e6b2:	683a      	ldr	r2, [r7, #0]
 800e6b4:	2103      	movs	r1, #3
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 f9c8 	bl	800ea4c <SDMMC_GetCmdResp6>
 800e6bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6be:	69fb      	ldr	r3, [r7, #28]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3720      	adds	r7, #32
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b088      	sub	sp, #32
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e6d6:	230d      	movs	r3, #13
 800e6d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e6e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6ea:	f107 0308 	add.w	r3, r7, #8
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7ff fd3d 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e6f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6fa:	210d      	movs	r1, #13
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 f829 	bl	800e754 <SDMMC_GetCmdResp1>
 800e702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e704:	69fb      	ldr	r3, [r7, #28]
}
 800e706:	4618      	mov	r0, r3
 800e708:	3720      	adds	r7, #32
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b088      	sub	sp, #32
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e716:	2300      	movs	r3, #0
 800e718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e71a:	230d      	movs	r3, #13
 800e71c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e71e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e724:	2300      	movs	r3, #0
 800e726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e72c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e72e:	f107 0308 	add.w	r3, r7, #8
 800e732:	4619      	mov	r1, r3
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7ff fd1b 	bl	800e170 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e73a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e73e:	210d      	movs	r1, #13
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f000 f807 	bl	800e754 <SDMMC_GetCmdResp1>
 800e746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e748:	69fb      	ldr	r3, [r7, #28]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3720      	adds	r7, #32
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
	...

0800e754 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b088      	sub	sp, #32
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	460b      	mov	r3, r1
 800e75e:	607a      	str	r2, [r7, #4]
 800e760:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e762:	4b70      	ldr	r3, [pc, #448]	; (800e924 <SDMMC_GetCmdResp1+0x1d0>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4a70      	ldr	r2, [pc, #448]	; (800e928 <SDMMC_GetCmdResp1+0x1d4>)
 800e768:	fba2 2303 	umull	r2, r3, r2, r3
 800e76c:	0a5a      	lsrs	r2, r3, #9
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	fb02 f303 	mul.w	r3, r2, r3
 800e774:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	1e5a      	subs	r2, r3, #1
 800e77a:	61fa      	str	r2, [r7, #28]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d102      	bne.n	800e786 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e784:	e0c9      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e78a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e78c:	69ba      	ldr	r2, [r7, #24]
 800e78e:	4b67      	ldr	r3, [pc, #412]	; (800e92c <SDMMC_GetCmdResp1+0x1d8>)
 800e790:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e792:	2b00      	cmp	r3, #0
 800e794:	d0ef      	beq.n	800e776 <SDMMC_GetCmdResp1+0x22>
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1ea      	bne.n	800e776 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a4:	f003 0304 	and.w	r3, r3, #4
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d004      	beq.n	800e7b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2204      	movs	r2, #4
 800e7b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7b2:	2304      	movs	r3, #4
 800e7b4:	e0b1      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ba:	f003 0301 	and.w	r3, r3, #1
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d004      	beq.n	800e7cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e0a6      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4a58      	ldr	r2, [pc, #352]	; (800e930 <SDMMC_GetCmdResp1+0x1dc>)
 800e7d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f7ff fcf6 	bl	800e1c4 <SDMMC_GetCommandResponse>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	461a      	mov	r2, r3
 800e7dc:	7afb      	ldrb	r3, [r7, #11]
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d001      	beq.n	800e7e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e099      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f7ff fcf8 	bl	800e1de <SDMMC_GetResponse>
 800e7ee:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e7f0:	697a      	ldr	r2, [r7, #20]
 800e7f2:	4b50      	ldr	r3, [pc, #320]	; (800e934 <SDMMC_GetCmdResp1+0x1e0>)
 800e7f4:	4013      	ands	r3, r2
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d101      	bne.n	800e7fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	e08d      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	2b00      	cmp	r3, #0
 800e802:	da02      	bge.n	800e80a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e808:	e087      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d001      	beq.n	800e818 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e814:	2340      	movs	r3, #64	; 0x40
 800e816:	e080      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d001      	beq.n	800e826 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e822:	2380      	movs	r3, #128	; 0x80
 800e824:	e079      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d002      	beq.n	800e836 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e830:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e834:	e071      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d002      	beq.n	800e846 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e840:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e844:	e069      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e854:	e061      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e864:	e059      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e874:	e051      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e884:	e049      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d002      	beq.n	800e896 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e894:	e041      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d002      	beq.n	800e8a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e8a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8a4:	e039      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e8b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e8b4:	e031      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e8c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e8c4:	e029      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e8d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e8d4:	e021      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d002      	beq.n	800e8e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e8e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e8e4:	e019      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e8f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e8f4:	e011      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d002      	beq.n	800e906 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e900:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e904:	e009      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	f003 0308 	and.w	r3, r3, #8
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e910:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e914:	e001      	b.n	800e91a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3720      	adds	r7, #32
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	24000000 	.word	0x24000000
 800e928:	10624dd3 	.word	0x10624dd3
 800e92c:	00200045 	.word	0x00200045
 800e930:	002000c5 	.word	0x002000c5
 800e934:	fdffe008 	.word	0xfdffe008

0800e938 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e940:	4b1f      	ldr	r3, [pc, #124]	; (800e9c0 <SDMMC_GetCmdResp2+0x88>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a1f      	ldr	r2, [pc, #124]	; (800e9c4 <SDMMC_GetCmdResp2+0x8c>)
 800e946:	fba2 2303 	umull	r2, r3, r2, r3
 800e94a:	0a5b      	lsrs	r3, r3, #9
 800e94c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e950:	fb02 f303 	mul.w	r3, r2, r3
 800e954:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	1e5a      	subs	r2, r3, #1
 800e95a:	60fa      	str	r2, [r7, #12]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d102      	bne.n	800e966 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e964:	e026      	b.n	800e9b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e96a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e972:	2b00      	cmp	r3, #0
 800e974:	d0ef      	beq.n	800e956 <SDMMC_GetCmdResp2+0x1e>
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d1ea      	bne.n	800e956 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e984:	f003 0304 	and.w	r3, r3, #4
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d004      	beq.n	800e996 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2204      	movs	r2, #4
 800e990:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e992:	2304      	movs	r3, #4
 800e994:	e00e      	b.n	800e9b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99a:	f003 0301 	and.w	r3, r3, #1
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d004      	beq.n	800e9ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e003      	b.n	800e9b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4a06      	ldr	r2, [pc, #24]	; (800e9c8 <SDMMC_GetCmdResp2+0x90>)
 800e9b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3714      	adds	r7, #20
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr
 800e9c0:	24000000 	.word	0x24000000
 800e9c4:	10624dd3 	.word	0x10624dd3
 800e9c8:	002000c5 	.word	0x002000c5

0800e9cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e9d4:	4b1a      	ldr	r3, [pc, #104]	; (800ea40 <SDMMC_GetCmdResp3+0x74>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a1a      	ldr	r2, [pc, #104]	; (800ea44 <SDMMC_GetCmdResp3+0x78>)
 800e9da:	fba2 2303 	umull	r2, r3, r2, r3
 800e9de:	0a5b      	lsrs	r3, r3, #9
 800e9e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9e4:	fb02 f303 	mul.w	r3, r2, r3
 800e9e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	1e5a      	subs	r2, r3, #1
 800e9ee:	60fa      	str	r2, [r7, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9f8:	e01b      	b.n	800ea32 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d0ef      	beq.n	800e9ea <SDMMC_GetCmdResp3+0x1e>
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1ea      	bne.n	800e9ea <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea18:	f003 0304 	and.w	r3, r3, #4
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d004      	beq.n	800ea2a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2204      	movs	r2, #4
 800ea24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea26:	2304      	movs	r3, #4
 800ea28:	e003      	b.n	800ea32 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4a06      	ldr	r2, [pc, #24]	; (800ea48 <SDMMC_GetCmdResp3+0x7c>)
 800ea2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ea30:	2300      	movs	r3, #0
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3714      	adds	r7, #20
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr
 800ea3e:	bf00      	nop
 800ea40:	24000000 	.word	0x24000000
 800ea44:	10624dd3 	.word	0x10624dd3
 800ea48:	002000c5 	.word	0x002000c5

0800ea4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b088      	sub	sp, #32
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	460b      	mov	r3, r1
 800ea56:	607a      	str	r2, [r7, #4]
 800ea58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ea5a:	4b35      	ldr	r3, [pc, #212]	; (800eb30 <SDMMC_GetCmdResp6+0xe4>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a35      	ldr	r2, [pc, #212]	; (800eb34 <SDMMC_GetCmdResp6+0xe8>)
 800ea60:	fba2 2303 	umull	r2, r3, r2, r3
 800ea64:	0a5b      	lsrs	r3, r3, #9
 800ea66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea6a:	fb02 f303 	mul.w	r3, r2, r3
 800ea6e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	1e5a      	subs	r2, r3, #1
 800ea74:	61fa      	str	r2, [r7, #28]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d102      	bne.n	800ea80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea7e:	e052      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea84:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d0ef      	beq.n	800ea70 <SDMMC_GetCmdResp6+0x24>
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1ea      	bne.n	800ea70 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea9e:	f003 0304 	and.w	r3, r3, #4
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d004      	beq.n	800eab0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2204      	movs	r2, #4
 800eaaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eaac:	2304      	movs	r3, #4
 800eaae:	e03a      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eab4:	f003 0301 	and.w	r3, r3, #1
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d004      	beq.n	800eac6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2201      	movs	r2, #1
 800eac0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e02f      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f7ff fb7c 	bl	800e1c4 <SDMMC_GetCommandResponse>
 800eacc:	4603      	mov	r3, r0
 800eace:	461a      	mov	r2, r3
 800ead0:	7afb      	ldrb	r3, [r7, #11]
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d001      	beq.n	800eada <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ead6:	2301      	movs	r3, #1
 800ead8:	e025      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	4a16      	ldr	r2, [pc, #88]	; (800eb38 <SDMMC_GetCmdResp6+0xec>)
 800eade:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eae0:	2100      	movs	r1, #0
 800eae2:	68f8      	ldr	r0, [r7, #12]
 800eae4:	f7ff fb7b 	bl	800e1de <SDMMC_GetResponse>
 800eae8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d106      	bne.n	800eb02 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	0c1b      	lsrs	r3, r3, #16
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800eafe:	2300      	movs	r3, #0
 800eb00:	e011      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d002      	beq.n	800eb12 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eb0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb10:	e009      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d002      	beq.n	800eb22 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eb1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb20:	e001      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eb22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3720      	adds	r7, #32
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	24000000 	.word	0x24000000
 800eb34:	10624dd3 	.word	0x10624dd3
 800eb38:	002000c5 	.word	0x002000c5

0800eb3c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb44:	4b22      	ldr	r3, [pc, #136]	; (800ebd0 <SDMMC_GetCmdResp7+0x94>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a22      	ldr	r2, [pc, #136]	; (800ebd4 <SDMMC_GetCmdResp7+0x98>)
 800eb4a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb4e:	0a5b      	lsrs	r3, r3, #9
 800eb50:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb54:	fb02 f303 	mul.w	r3, r2, r3
 800eb58:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	1e5a      	subs	r2, r3, #1
 800eb5e:	60fa      	str	r2, [r7, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d102      	bne.n	800eb6a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb68:	e02c      	b.n	800ebc4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb6e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d0ef      	beq.n	800eb5a <SDMMC_GetCmdResp7+0x1e>
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d1ea      	bne.n	800eb5a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb88:	f003 0304 	and.w	r3, r3, #4
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d004      	beq.n	800eb9a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2204      	movs	r2, #4
 800eb94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb96:	2304      	movs	r3, #4
 800eb98:	e014      	b.n	800ebc4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9e:	f003 0301 	and.w	r3, r3, #1
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d004      	beq.n	800ebb0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebac:	2301      	movs	r3, #1
 800ebae:	e009      	b.n	800ebc4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d002      	beq.n	800ebc2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2240      	movs	r2, #64	; 0x40
 800ebc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ebc2:	2300      	movs	r3, #0

}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	24000000 	.word	0x24000000
 800ebd4:	10624dd3 	.word	0x10624dd3

0800ebd8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ebe0:	4b11      	ldr	r3, [pc, #68]	; (800ec28 <SDMMC_GetCmdError+0x50>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a11      	ldr	r2, [pc, #68]	; (800ec2c <SDMMC_GetCmdError+0x54>)
 800ebe6:	fba2 2303 	umull	r2, r3, r2, r3
 800ebea:	0a5b      	lsrs	r3, r3, #9
 800ebec:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebf0:	fb02 f303 	mul.w	r3, r2, r3
 800ebf4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	1e5a      	subs	r2, r3, #1
 800ebfa:	60fa      	str	r2, [r7, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d102      	bne.n	800ec06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec04:	e009      	b.n	800ec1a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d0f1      	beq.n	800ebf6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4a06      	ldr	r2, [pc, #24]	; (800ec30 <SDMMC_GetCmdError+0x58>)
 800ec16:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	24000000 	.word	0x24000000
 800ec2c:	10624dd3 	.word	0x10624dd3
 800ec30:	002000c5 	.word	0x002000c5

0800ec34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ec34:	b084      	sub	sp, #16
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b084      	sub	sp, #16
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	f107 001c 	add.w	r0, r7, #28
 800ec42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d120      	bne.n	800ec8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	68da      	ldr	r2, [r3, #12]
 800ec5c:	4b2a      	ldr	r3, [pc, #168]	; (800ed08 <USB_CoreInit+0xd4>)
 800ec5e:	4013      	ands	r3, r2
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ec70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d105      	bne.n	800ec82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	68db      	ldr	r3, [r3, #12]
 800ec7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f001 fb14 	bl	80102b0 <USB_CoreReset>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	73fb      	strb	r3, [r7, #15]
 800ec8c:	e01a      	b.n	800ecc4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f001 fb08 	bl	80102b0 <USB_CoreReset>
 800eca0:	4603      	mov	r3, r0
 800eca2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800eca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d106      	bne.n	800ecb8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	639a      	str	r2, [r3, #56]	; 0x38
 800ecb6:	e005      	b.n	800ecc4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d116      	bne.n	800ecf8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecd8:	4b0c      	ldr	r3, [pc, #48]	; (800ed0c <USB_CoreInit+0xd8>)
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	f043 0206 	orr.w	r2, r3, #6
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	f043 0220 	orr.w	r2, r3, #32
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ecf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed04:	b004      	add	sp, #16
 800ed06:	4770      	bx	lr
 800ed08:	ffbdffbf 	.word	0xffbdffbf
 800ed0c:	03ee0000 	.word	0x03ee0000

0800ed10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b087      	sub	sp, #28
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ed1e:	79fb      	ldrb	r3, [r7, #7]
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d165      	bne.n	800edf0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	4a41      	ldr	r2, [pc, #260]	; (800ee2c <USB_SetTurnaroundTime+0x11c>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d906      	bls.n	800ed3a <USB_SetTurnaroundTime+0x2a>
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	4a40      	ldr	r2, [pc, #256]	; (800ee30 <USB_SetTurnaroundTime+0x120>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d202      	bcs.n	800ed3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ed34:	230f      	movs	r3, #15
 800ed36:	617b      	str	r3, [r7, #20]
 800ed38:	e062      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	4a3c      	ldr	r2, [pc, #240]	; (800ee30 <USB_SetTurnaroundTime+0x120>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d306      	bcc.n	800ed50 <USB_SetTurnaroundTime+0x40>
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	4a3b      	ldr	r2, [pc, #236]	; (800ee34 <USB_SetTurnaroundTime+0x124>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d202      	bcs.n	800ed50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ed4a:	230e      	movs	r3, #14
 800ed4c:	617b      	str	r3, [r7, #20]
 800ed4e:	e057      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	4a38      	ldr	r2, [pc, #224]	; (800ee34 <USB_SetTurnaroundTime+0x124>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d306      	bcc.n	800ed66 <USB_SetTurnaroundTime+0x56>
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	4a37      	ldr	r2, [pc, #220]	; (800ee38 <USB_SetTurnaroundTime+0x128>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d202      	bcs.n	800ed66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ed60:	230d      	movs	r3, #13
 800ed62:	617b      	str	r3, [r7, #20]
 800ed64:	e04c      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	4a33      	ldr	r2, [pc, #204]	; (800ee38 <USB_SetTurnaroundTime+0x128>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d306      	bcc.n	800ed7c <USB_SetTurnaroundTime+0x6c>
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	4a32      	ldr	r2, [pc, #200]	; (800ee3c <USB_SetTurnaroundTime+0x12c>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d802      	bhi.n	800ed7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ed76:	230c      	movs	r3, #12
 800ed78:	617b      	str	r3, [r7, #20]
 800ed7a:	e041      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	4a2f      	ldr	r2, [pc, #188]	; (800ee3c <USB_SetTurnaroundTime+0x12c>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d906      	bls.n	800ed92 <USB_SetTurnaroundTime+0x82>
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	4a2e      	ldr	r2, [pc, #184]	; (800ee40 <USB_SetTurnaroundTime+0x130>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d802      	bhi.n	800ed92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ed8c:	230b      	movs	r3, #11
 800ed8e:	617b      	str	r3, [r7, #20]
 800ed90:	e036      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	4a2a      	ldr	r2, [pc, #168]	; (800ee40 <USB_SetTurnaroundTime+0x130>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d906      	bls.n	800eda8 <USB_SetTurnaroundTime+0x98>
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	4a29      	ldr	r2, [pc, #164]	; (800ee44 <USB_SetTurnaroundTime+0x134>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d802      	bhi.n	800eda8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800eda2:	230a      	movs	r3, #10
 800eda4:	617b      	str	r3, [r7, #20]
 800eda6:	e02b      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	4a26      	ldr	r2, [pc, #152]	; (800ee44 <USB_SetTurnaroundTime+0x134>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d906      	bls.n	800edbe <USB_SetTurnaroundTime+0xae>
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	4a25      	ldr	r2, [pc, #148]	; (800ee48 <USB_SetTurnaroundTime+0x138>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d202      	bcs.n	800edbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800edb8:	2309      	movs	r3, #9
 800edba:	617b      	str	r3, [r7, #20]
 800edbc:	e020      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	4a21      	ldr	r2, [pc, #132]	; (800ee48 <USB_SetTurnaroundTime+0x138>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d306      	bcc.n	800edd4 <USB_SetTurnaroundTime+0xc4>
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	4a20      	ldr	r2, [pc, #128]	; (800ee4c <USB_SetTurnaroundTime+0x13c>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d802      	bhi.n	800edd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800edce:	2308      	movs	r3, #8
 800edd0:	617b      	str	r3, [r7, #20]
 800edd2:	e015      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	4a1d      	ldr	r2, [pc, #116]	; (800ee4c <USB_SetTurnaroundTime+0x13c>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d906      	bls.n	800edea <USB_SetTurnaroundTime+0xda>
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	4a1c      	ldr	r2, [pc, #112]	; (800ee50 <USB_SetTurnaroundTime+0x140>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d202      	bcs.n	800edea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ede4:	2307      	movs	r3, #7
 800ede6:	617b      	str	r3, [r7, #20]
 800ede8:	e00a      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800edea:	2306      	movs	r3, #6
 800edec:	617b      	str	r3, [r7, #20]
 800edee:	e007      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800edf0:	79fb      	ldrb	r3, [r7, #7]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d102      	bne.n	800edfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800edf6:	2309      	movs	r3, #9
 800edf8:	617b      	str	r3, [r7, #20]
 800edfa:	e001      	b.n	800ee00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800edfc:	2309      	movs	r3, #9
 800edfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	68da      	ldr	r2, [r3, #12]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	029b      	lsls	r3, r3, #10
 800ee14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ee18:	431a      	orrs	r2, r3
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	371c      	adds	r7, #28
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	00d8acbf 	.word	0x00d8acbf
 800ee30:	00e4e1c0 	.word	0x00e4e1c0
 800ee34:	00f42400 	.word	0x00f42400
 800ee38:	01067380 	.word	0x01067380
 800ee3c:	011a499f 	.word	0x011a499f
 800ee40:	01312cff 	.word	0x01312cff
 800ee44:	014ca43f 	.word	0x014ca43f
 800ee48:	016e3600 	.word	0x016e3600
 800ee4c:	01a6ab1f 	.word	0x01a6ab1f
 800ee50:	01e84800 	.word	0x01e84800

0800ee54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	f043 0201 	orr.w	r2, r3, #1
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	370c      	adds	r7, #12
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr

0800ee76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee76:	b480      	push	{r7}
 800ee78:	b083      	sub	sp, #12
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	f023 0201 	bic.w	r2, r3, #1
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ee8a:	2300      	movs	r3, #0
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eeb0:	78fb      	ldrb	r3, [r7, #3]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d106      	bne.n	800eec4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	60da      	str	r2, [r3, #12]
 800eec2:	e00b      	b.n	800eedc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800eec4:	78fb      	ldrb	r3, [r7, #3]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d106      	bne.n	800eed8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	60da      	str	r2, [r3, #12]
 800eed6:	e001      	b.n	800eedc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800eed8:	2301      	movs	r3, #1
 800eeda:	e003      	b.n	800eee4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800eedc:	2032      	movs	r0, #50	; 0x32
 800eede:	f7f2 feb5 	bl	8001c4c <HAL_Delay>

  return HAL_OK;
 800eee2:	2300      	movs	r3, #0
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eeec:	b084      	sub	sp, #16
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b086      	sub	sp, #24
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
 800eef6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800eefa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eefe:	2300      	movs	r3, #0
 800ef00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ef06:	2300      	movs	r3, #0
 800ef08:	613b      	str	r3, [r7, #16]
 800ef0a:	e009      	b.n	800ef20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	3340      	adds	r3, #64	; 0x40
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	4413      	add	r3, r2
 800ef16:	2200      	movs	r2, #0
 800ef18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	613b      	str	r3, [r7, #16]
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	2b0e      	cmp	r3, #14
 800ef24:	d9f2      	bls.n	800ef0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ef26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d11c      	bne.n	800ef66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef3a:	f043 0302 	orr.w	r3, r3, #2
 800ef3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	601a      	str	r2, [r3, #0]
 800ef64:	e005      	b.n	800ef72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef78:	461a      	mov	r2, r3
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef84:	4619      	mov	r1, r3
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	680b      	ldr	r3, [r1, #0]
 800ef90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ef92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d10c      	bne.n	800efb2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ef98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d104      	bne.n	800efa8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ef9e:	2100      	movs	r1, #0
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 f949 	bl	800f238 <USB_SetDevSpeed>
 800efa6:	e008      	b.n	800efba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800efa8:	2101      	movs	r1, #1
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 f944 	bl	800f238 <USB_SetDevSpeed>
 800efb0:	e003      	b.n	800efba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800efb2:	2103      	movs	r1, #3
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 f93f 	bl	800f238 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800efba:	2110      	movs	r1, #16
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 f8f3 	bl	800f1a8 <USB_FlushTxFifo>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d001      	beq.n	800efcc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f911 	bl	800f1f4 <USB_FlushRxFifo>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d001      	beq.n	800efdc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800efd8:	2301      	movs	r3, #1
 800efda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efe2:	461a      	mov	r2, r3
 800efe4:	2300      	movs	r3, #0
 800efe6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efee:	461a      	mov	r2, r3
 800eff0:	2300      	movs	r3, #0
 800eff2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800effa:	461a      	mov	r2, r3
 800effc:	2300      	movs	r3, #0
 800effe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f000:	2300      	movs	r3, #0
 800f002:	613b      	str	r3, [r7, #16]
 800f004:	e043      	b.n	800f08e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	015a      	lsls	r2, r3, #5
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	4413      	add	r3, r2
 800f00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f01c:	d118      	bne.n	800f050 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10a      	bne.n	800f03a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	015a      	lsls	r2, r3, #5
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	4413      	add	r3, r2
 800f02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f030:	461a      	mov	r2, r3
 800f032:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	e013      	b.n	800f062 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	015a      	lsls	r2, r3, #5
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	4413      	add	r3, r2
 800f042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f046:	461a      	mov	r2, r3
 800f048:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f04c:	6013      	str	r3, [r2, #0]
 800f04e:	e008      	b.n	800f062 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	015a      	lsls	r2, r3, #5
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	4413      	add	r3, r2
 800f058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f05c:	461a      	mov	r2, r3
 800f05e:	2300      	movs	r3, #0
 800f060:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	015a      	lsls	r2, r3, #5
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	4413      	add	r3, r2
 800f06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f06e:	461a      	mov	r2, r3
 800f070:	2300      	movs	r3, #0
 800f072:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	015a      	lsls	r2, r3, #5
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	4413      	add	r3, r2
 800f07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f080:	461a      	mov	r2, r3
 800f082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f086:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	3301      	adds	r3, #1
 800f08c:	613b      	str	r3, [r7, #16]
 800f08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f090:	693a      	ldr	r2, [r7, #16]
 800f092:	429a      	cmp	r2, r3
 800f094:	d3b7      	bcc.n	800f006 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f096:	2300      	movs	r3, #0
 800f098:	613b      	str	r3, [r7, #16]
 800f09a:	e043      	b.n	800f124 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	015a      	lsls	r2, r3, #5
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0b2:	d118      	bne.n	800f0e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10a      	bne.n	800f0d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	015a      	lsls	r2, r3, #5
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f0cc:	6013      	str	r3, [r2, #0]
 800f0ce:	e013      	b.n	800f0f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	015a      	lsls	r2, r3, #5
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0dc:	461a      	mov	r2, r3
 800f0de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f0e2:	6013      	str	r3, [r2, #0]
 800f0e4:	e008      	b.n	800f0f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	015a      	lsls	r2, r3, #5
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	015a      	lsls	r2, r3, #5
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	4413      	add	r3, r2
 800f100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f104:	461a      	mov	r2, r3
 800f106:	2300      	movs	r3, #0
 800f108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	015a      	lsls	r2, r3, #5
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	4413      	add	r3, r2
 800f112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f116:	461a      	mov	r2, r3
 800f118:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f11c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	3301      	adds	r3, #1
 800f122:	613b      	str	r3, [r7, #16]
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	693a      	ldr	r2, [r7, #16]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d3b7      	bcc.n	800f09c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f132:	691b      	ldr	r3, [r3, #16]
 800f134:	68fa      	ldr	r2, [r7, #12]
 800f136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f13a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f13e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f14c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	2b00      	cmp	r3, #0
 800f152:	d105      	bne.n	800f160 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	699b      	ldr	r3, [r3, #24]
 800f158:	f043 0210 	orr.w	r2, r3, #16
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	699a      	ldr	r2, [r3, #24]
 800f164:	4b0e      	ldr	r3, [pc, #56]	; (800f1a0 <USB_DevInit+0x2b4>)
 800f166:	4313      	orrs	r3, r2
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d005      	beq.n	800f17e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	699b      	ldr	r3, [r3, #24]
 800f176:	f043 0208 	orr.w	r2, r3, #8
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f180:	2b01      	cmp	r3, #1
 800f182:	d105      	bne.n	800f190 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	699a      	ldr	r2, [r3, #24]
 800f188:	4b06      	ldr	r3, [pc, #24]	; (800f1a4 <USB_DevInit+0x2b8>)
 800f18a:	4313      	orrs	r3, r2
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f190:	7dfb      	ldrb	r3, [r7, #23]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3718      	adds	r7, #24
 800f196:	46bd      	mov	sp, r7
 800f198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f19c:	b004      	add	sp, #16
 800f19e:	4770      	bx	lr
 800f1a0:	803c3800 	.word	0x803c3800
 800f1a4:	40000004 	.word	0x40000004

0800f1a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	019b      	lsls	r3, r3, #6
 800f1ba:	f043 0220 	orr.w	r2, r3, #32
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	60fb      	str	r3, [r7, #12]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	4a09      	ldr	r2, [pc, #36]	; (800f1f0 <USB_FlushTxFifo+0x48>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d901      	bls.n	800f1d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	e006      	b.n	800f1e2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	691b      	ldr	r3, [r3, #16]
 800f1d8:	f003 0320 	and.w	r3, r3, #32
 800f1dc:	2b20      	cmp	r3, #32
 800f1de:	d0f0      	beq.n	800f1c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3714      	adds	r7, #20
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop
 800f1f0:	00030d40 	.word	0x00030d40

0800f1f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2210      	movs	r2, #16
 800f204:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	3301      	adds	r3, #1
 800f20a:	60fb      	str	r3, [r7, #12]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	4a09      	ldr	r2, [pc, #36]	; (800f234 <USB_FlushRxFifo+0x40>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d901      	bls.n	800f218 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f214:	2303      	movs	r3, #3
 800f216:	e006      	b.n	800f226 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	f003 0310 	and.w	r3, r3, #16
 800f220:	2b10      	cmp	r3, #16
 800f222:	d0f0      	beq.n	800f206 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3714      	adds	r7, #20
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	00030d40 	.word	0x00030d40

0800f238 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f238:	b480      	push	{r7}
 800f23a:	b085      	sub	sp, #20
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	460b      	mov	r3, r1
 800f242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	78fb      	ldrb	r3, [r7, #3]
 800f252:	68f9      	ldr	r1, [r7, #12]
 800f254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f258:	4313      	orrs	r3, r2
 800f25a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr

0800f26a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b087      	sub	sp, #28
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	f003 0306 	and.w	r3, r3, #6
 800f282:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f28a:	2300      	movs	r3, #0
 800f28c:	75fb      	strb	r3, [r7, #23]
 800f28e:	e00a      	b.n	800f2a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2b02      	cmp	r3, #2
 800f294:	d002      	beq.n	800f29c <USB_GetDevSpeed+0x32>
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2b06      	cmp	r3, #6
 800f29a:	d102      	bne.n	800f2a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f29c:	2302      	movs	r3, #2
 800f29e:	75fb      	strb	r3, [r7, #23]
 800f2a0:	e001      	b.n	800f2a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f2a2:	230f      	movs	r3, #15
 800f2a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	371c      	adds	r7, #28
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	785b      	ldrb	r3, [r3, #1]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d139      	bne.n	800f344 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2d6:	69da      	ldr	r2, [r3, #28]
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f003 030f 	and.w	r3, r3, #15
 800f2e0:	2101      	movs	r1, #1
 800f2e2:	fa01 f303 	lsl.w	r3, r1, r3
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	68f9      	ldr	r1, [r7, #12]
 800f2ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	015a      	lsls	r2, r3, #5
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f304:	2b00      	cmp	r3, #0
 800f306:	d153      	bne.n	800f3b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	015a      	lsls	r2, r3, #5
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	4413      	add	r3, r2
 800f310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	78db      	ldrb	r3, [r3, #3]
 800f322:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f324:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	059b      	lsls	r3, r3, #22
 800f32a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f32c:	431a      	orrs	r2, r3
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	0159      	lsls	r1, r3, #5
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	440b      	add	r3, r1
 800f336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f33a:	4619      	mov	r1, r3
 800f33c:	4b20      	ldr	r3, [pc, #128]	; (800f3c0 <USB_ActivateEndpoint+0x10c>)
 800f33e:	4313      	orrs	r3, r2
 800f340:	600b      	str	r3, [r1, #0]
 800f342:	e035      	b.n	800f3b0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f34a:	69da      	ldr	r2, [r3, #28]
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	f003 030f 	and.w	r3, r3, #15
 800f354:	2101      	movs	r1, #1
 800f356:	fa01 f303 	lsl.w	r3, r1, r3
 800f35a:	041b      	lsls	r3, r3, #16
 800f35c:	68f9      	ldr	r1, [r7, #12]
 800f35e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f362:	4313      	orrs	r3, r2
 800f364:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	015a      	lsls	r2, r3, #5
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	4413      	add	r3, r2
 800f36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d119      	bne.n	800f3b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	015a      	lsls	r2, r3, #5
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	4413      	add	r3, r2
 800f384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	78db      	ldrb	r3, [r3, #3]
 800f396:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f398:	430b      	orrs	r3, r1
 800f39a:	431a      	orrs	r2, r3
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	0159      	lsls	r1, r3, #5
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	440b      	add	r3, r1
 800f3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	4b05      	ldr	r3, [pc, #20]	; (800f3c0 <USB_ActivateEndpoint+0x10c>)
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f3b0:	2300      	movs	r3, #0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3714      	adds	r7, #20
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	10008000 	.word	0x10008000

0800f3c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b085      	sub	sp, #20
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	785b      	ldrb	r3, [r3, #1]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d161      	bne.n	800f4a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	015a      	lsls	r2, r3, #5
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3f6:	d11f      	bne.n	800f438 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	015a      	lsls	r2, r3, #5
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	4413      	add	r3, r2
 800f400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	0151      	lsls	r1, r2, #5
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	440a      	add	r2, r1
 800f40e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f416:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	015a      	lsls	r2, r3, #5
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	4413      	add	r3, r2
 800f420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	68ba      	ldr	r2, [r7, #8]
 800f428:	0151      	lsls	r1, r2, #5
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	440a      	add	r2, r1
 800f42e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f436:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	f003 030f 	and.w	r3, r3, #15
 800f448:	2101      	movs	r1, #1
 800f44a:	fa01 f303 	lsl.w	r3, r1, r3
 800f44e:	b29b      	uxth	r3, r3
 800f450:	43db      	mvns	r3, r3
 800f452:	68f9      	ldr	r1, [r7, #12]
 800f454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f458:	4013      	ands	r3, r2
 800f45a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f462:	69da      	ldr	r2, [r3, #28]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	f003 030f 	and.w	r3, r3, #15
 800f46c:	2101      	movs	r1, #1
 800f46e:	fa01 f303 	lsl.w	r3, r1, r3
 800f472:	b29b      	uxth	r3, r3
 800f474:	43db      	mvns	r3, r3
 800f476:	68f9      	ldr	r1, [r7, #12]
 800f478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f47c:	4013      	ands	r3, r2
 800f47e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	015a      	lsls	r2, r3, #5
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	4413      	add	r3, r2
 800f488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	0159      	lsls	r1, r3, #5
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	440b      	add	r3, r1
 800f496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f49a:	4619      	mov	r1, r3
 800f49c:	4b35      	ldr	r3, [pc, #212]	; (800f574 <USB_DeactivateEndpoint+0x1b0>)
 800f49e:	4013      	ands	r3, r2
 800f4a0:	600b      	str	r3, [r1, #0]
 800f4a2:	e060      	b.n	800f566 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	015a      	lsls	r2, r3, #5
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f4b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f4ba:	d11f      	bne.n	800f4fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	015a      	lsls	r2, r3, #5
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	0151      	lsls	r1, r2, #5
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	440a      	add	r2, r1
 800f4d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f4da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	015a      	lsls	r2, r3, #5
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	68ba      	ldr	r2, [r7, #8]
 800f4ec:	0151      	lsls	r1, r2, #5
 800f4ee:	68fa      	ldr	r2, [r7, #12]
 800f4f0:	440a      	add	r2, r1
 800f4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f4fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	f003 030f 	and.w	r3, r3, #15
 800f50c:	2101      	movs	r1, #1
 800f50e:	fa01 f303 	lsl.w	r3, r1, r3
 800f512:	041b      	lsls	r3, r3, #16
 800f514:	43db      	mvns	r3, r3
 800f516:	68f9      	ldr	r1, [r7, #12]
 800f518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f51c:	4013      	ands	r3, r2
 800f51e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f526:	69da      	ldr	r2, [r3, #28]
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	f003 030f 	and.w	r3, r3, #15
 800f530:	2101      	movs	r1, #1
 800f532:	fa01 f303 	lsl.w	r3, r1, r3
 800f536:	041b      	lsls	r3, r3, #16
 800f538:	43db      	mvns	r3, r3
 800f53a:	68f9      	ldr	r1, [r7, #12]
 800f53c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f540:	4013      	ands	r3, r2
 800f542:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	015a      	lsls	r2, r3, #5
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	4413      	add	r3, r2
 800f54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	0159      	lsls	r1, r3, #5
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	440b      	add	r3, r1
 800f55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f55e:	4619      	mov	r1, r3
 800f560:	4b05      	ldr	r3, [pc, #20]	; (800f578 <USB_DeactivateEndpoint+0x1b4>)
 800f562:	4013      	ands	r3, r2
 800f564:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f566:	2300      	movs	r3, #0
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3714      	adds	r7, #20
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr
 800f574:	ec337800 	.word	0xec337800
 800f578:	eff37800 	.word	0xeff37800

0800f57c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b08a      	sub	sp, #40	; 0x28
 800f580:	af02      	add	r7, sp, #8
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	4613      	mov	r3, r2
 800f588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	785b      	ldrb	r3, [r3, #1]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	f040 8163 	bne.w	800f864 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	695b      	ldr	r3, [r3, #20]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d132      	bne.n	800f60c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	015a      	lsls	r2, r3, #5
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b2:	691a      	ldr	r2, [r3, #16]
 800f5b4:	69bb      	ldr	r3, [r7, #24]
 800f5b6:	0159      	lsls	r1, r3, #5
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	440b      	add	r3, r1
 800f5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	4ba5      	ldr	r3, [pc, #660]	; (800f858 <USB_EPStartXfer+0x2dc>)
 800f5c4:	4013      	ands	r3, r2
 800f5c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	015a      	lsls	r2, r3, #5
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d4:	691b      	ldr	r3, [r3, #16]
 800f5d6:	69ba      	ldr	r2, [r7, #24]
 800f5d8:	0151      	lsls	r1, r2, #5
 800f5da:	69fa      	ldr	r2, [r7, #28]
 800f5dc:	440a      	add	r2, r1
 800f5de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f5e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	015a      	lsls	r2, r3, #5
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5f4:	691a      	ldr	r2, [r3, #16]
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	0159      	lsls	r1, r3, #5
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	440b      	add	r3, r1
 800f5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f602:	4619      	mov	r1, r3
 800f604:	4b95      	ldr	r3, [pc, #596]	; (800f85c <USB_EPStartXfer+0x2e0>)
 800f606:	4013      	ands	r3, r2
 800f608:	610b      	str	r3, [r1, #16]
 800f60a:	e074      	b.n	800f6f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	015a      	lsls	r2, r3, #5
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	4413      	add	r3, r2
 800f614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f618:	691a      	ldr	r2, [r3, #16]
 800f61a:	69bb      	ldr	r3, [r7, #24]
 800f61c:	0159      	lsls	r1, r3, #5
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	440b      	add	r3, r1
 800f622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f626:	4619      	mov	r1, r3
 800f628:	4b8c      	ldr	r3, [pc, #560]	; (800f85c <USB_EPStartXfer+0x2e0>)
 800f62a:	4013      	ands	r3, r2
 800f62c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	015a      	lsls	r2, r3, #5
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	4413      	add	r3, r2
 800f636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f63a:	691a      	ldr	r2, [r3, #16]
 800f63c:	69bb      	ldr	r3, [r7, #24]
 800f63e:	0159      	lsls	r1, r3, #5
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	440b      	add	r3, r1
 800f644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f648:	4619      	mov	r1, r3
 800f64a:	4b83      	ldr	r3, [pc, #524]	; (800f858 <USB_EPStartXfer+0x2dc>)
 800f64c:	4013      	ands	r3, r2
 800f64e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	015a      	lsls	r2, r3, #5
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	4413      	add	r3, r2
 800f658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f65c:	691a      	ldr	r2, [r3, #16]
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	6959      	ldr	r1, [r3, #20]
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	440b      	add	r3, r1
 800f668:	1e59      	subs	r1, r3, #1
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	fbb1 f3f3 	udiv	r3, r1, r3
 800f672:	04d9      	lsls	r1, r3, #19
 800f674:	4b7a      	ldr	r3, [pc, #488]	; (800f860 <USB_EPStartXfer+0x2e4>)
 800f676:	400b      	ands	r3, r1
 800f678:	69b9      	ldr	r1, [r7, #24]
 800f67a:	0148      	lsls	r0, r1, #5
 800f67c:	69f9      	ldr	r1, [r7, #28]
 800f67e:	4401      	add	r1, r0
 800f680:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f684:	4313      	orrs	r3, r2
 800f686:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	015a      	lsls	r2, r3, #5
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	4413      	add	r3, r2
 800f690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f694:	691a      	ldr	r2, [r3, #16]
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	695b      	ldr	r3, [r3, #20]
 800f69a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f69e:	69b9      	ldr	r1, [r7, #24]
 800f6a0:	0148      	lsls	r0, r1, #5
 800f6a2:	69f9      	ldr	r1, [r7, #28]
 800f6a4:	4401      	add	r1, r0
 800f6a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	78db      	ldrb	r3, [r3, #3]
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d11f      	bne.n	800f6f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	015a      	lsls	r2, r3, #5
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	4413      	add	r3, r2
 800f6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	69ba      	ldr	r2, [r7, #24]
 800f6c6:	0151      	lsls	r1, r2, #5
 800f6c8:	69fa      	ldr	r2, [r7, #28]
 800f6ca:	440a      	add	r2, r1
 800f6cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f6d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	015a      	lsls	r2, r3, #5
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	4413      	add	r3, r2
 800f6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6e2:	691b      	ldr	r3, [r3, #16]
 800f6e4:	69ba      	ldr	r2, [r7, #24]
 800f6e6:	0151      	lsls	r1, r2, #5
 800f6e8:	69fa      	ldr	r2, [r7, #28]
 800f6ea:	440a      	add	r2, r1
 800f6ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f6f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f6f6:	79fb      	ldrb	r3, [r7, #7]
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d14b      	bne.n	800f794 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d009      	beq.n	800f718 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	015a      	lsls	r2, r3, #5
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	4413      	add	r3, r2
 800f70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f710:	461a      	mov	r2, r3
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	691b      	ldr	r3, [r3, #16]
 800f716:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	78db      	ldrb	r3, [r3, #3]
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d128      	bne.n	800f772 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d110      	bne.n	800f752 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	015a      	lsls	r2, r3, #5
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	4413      	add	r3, r2
 800f738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	69ba      	ldr	r2, [r7, #24]
 800f740:	0151      	lsls	r1, r2, #5
 800f742:	69fa      	ldr	r2, [r7, #28]
 800f744:	440a      	add	r2, r1
 800f746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f74a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f74e:	6013      	str	r3, [r2, #0]
 800f750:	e00f      	b.n	800f772 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f752:	69bb      	ldr	r3, [r7, #24]
 800f754:	015a      	lsls	r2, r3, #5
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	4413      	add	r3, r2
 800f75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	69ba      	ldr	r2, [r7, #24]
 800f762:	0151      	lsls	r1, r2, #5
 800f764:	69fa      	ldr	r2, [r7, #28]
 800f766:	440a      	add	r2, r1
 800f768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f76c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f770:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	015a      	lsls	r2, r3, #5
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	4413      	add	r3, r2
 800f77a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	69ba      	ldr	r2, [r7, #24]
 800f782:	0151      	lsls	r1, r2, #5
 800f784:	69fa      	ldr	r2, [r7, #28]
 800f786:	440a      	add	r2, r1
 800f788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f78c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f790:	6013      	str	r3, [r2, #0]
 800f792:	e133      	b.n	800f9fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f794:	69bb      	ldr	r3, [r7, #24]
 800f796:	015a      	lsls	r2, r3, #5
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	4413      	add	r3, r2
 800f79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	69ba      	ldr	r2, [r7, #24]
 800f7a4:	0151      	lsls	r1, r2, #5
 800f7a6:	69fa      	ldr	r2, [r7, #28]
 800f7a8:	440a      	add	r2, r1
 800f7aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f7b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	78db      	ldrb	r3, [r3, #3]
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d015      	beq.n	800f7e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	695b      	ldr	r3, [r3, #20]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f000 811b 	beq.w	800f9fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	f003 030f 	and.w	r3, r3, #15
 800f7d6:	2101      	movs	r1, #1
 800f7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f7dc:	69f9      	ldr	r1, [r7, #28]
 800f7de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	634b      	str	r3, [r1, #52]	; 0x34
 800f7e6:	e109      	b.n	800f9fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d110      	bne.n	800f81a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f7f8:	69bb      	ldr	r3, [r7, #24]
 800f7fa:	015a      	lsls	r2, r3, #5
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	4413      	add	r3, r2
 800f800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	69ba      	ldr	r2, [r7, #24]
 800f808:	0151      	lsls	r1, r2, #5
 800f80a:	69fa      	ldr	r2, [r7, #28]
 800f80c:	440a      	add	r2, r1
 800f80e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f816:	6013      	str	r3, [r2, #0]
 800f818:	e00f      	b.n	800f83a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	015a      	lsls	r2, r3, #5
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	4413      	add	r3, r2
 800f822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	69ba      	ldr	r2, [r7, #24]
 800f82a:	0151      	lsls	r1, r2, #5
 800f82c:	69fa      	ldr	r2, [r7, #28]
 800f82e:	440a      	add	r2, r1
 800f830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f838:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	68d9      	ldr	r1, [r3, #12]
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	781a      	ldrb	r2, [r3, #0]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	695b      	ldr	r3, [r3, #20]
 800f846:	b298      	uxth	r0, r3
 800f848:	79fb      	ldrb	r3, [r7, #7]
 800f84a:	9300      	str	r3, [sp, #0]
 800f84c:	4603      	mov	r3, r0
 800f84e:	68f8      	ldr	r0, [r7, #12]
 800f850:	f000 fa38 	bl	800fcc4 <USB_WritePacket>
 800f854:	e0d2      	b.n	800f9fc <USB_EPStartXfer+0x480>
 800f856:	bf00      	nop
 800f858:	e007ffff 	.word	0xe007ffff
 800f85c:	fff80000 	.word	0xfff80000
 800f860:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f864:	69bb      	ldr	r3, [r7, #24]
 800f866:	015a      	lsls	r2, r3, #5
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	4413      	add	r3, r2
 800f86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f870:	691a      	ldr	r2, [r3, #16]
 800f872:	69bb      	ldr	r3, [r7, #24]
 800f874:	0159      	lsls	r1, r3, #5
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	440b      	add	r3, r1
 800f87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f87e:	4619      	mov	r1, r3
 800f880:	4b61      	ldr	r3, [pc, #388]	; (800fa08 <USB_EPStartXfer+0x48c>)
 800f882:	4013      	ands	r3, r2
 800f884:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	015a      	lsls	r2, r3, #5
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	4413      	add	r3, r2
 800f88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f892:	691a      	ldr	r2, [r3, #16]
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	0159      	lsls	r1, r3, #5
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	440b      	add	r3, r1
 800f89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	4b5a      	ldr	r3, [pc, #360]	; (800fa0c <USB_EPStartXfer+0x490>)
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	695b      	ldr	r3, [r3, #20]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d123      	bne.n	800f8f8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	015a      	lsls	r2, r3, #5
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8bc:	691a      	ldr	r2, [r3, #16]
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f8c6:	69b9      	ldr	r1, [r7, #24]
 800f8c8:	0148      	lsls	r0, r1, #5
 800f8ca:	69f9      	ldr	r1, [r7, #28]
 800f8cc:	4401      	add	r1, r0
 800f8ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	015a      	lsls	r2, r3, #5
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	4413      	add	r3, r2
 800f8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8e2:	691b      	ldr	r3, [r3, #16]
 800f8e4:	69ba      	ldr	r2, [r7, #24]
 800f8e6:	0151      	lsls	r1, r2, #5
 800f8e8:	69fa      	ldr	r2, [r7, #28]
 800f8ea:	440a      	add	r2, r1
 800f8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f8f4:	6113      	str	r3, [r2, #16]
 800f8f6:	e033      	b.n	800f960 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	695a      	ldr	r2, [r3, #20]
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	689b      	ldr	r3, [r3, #8]
 800f900:	4413      	add	r3, r2
 800f902:	1e5a      	subs	r2, r3, #1
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	fbb2 f3f3 	udiv	r3, r2, r3
 800f90c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f90e:	69bb      	ldr	r3, [r7, #24]
 800f910:	015a      	lsls	r2, r3, #5
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	4413      	add	r3, r2
 800f916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f91a:	691a      	ldr	r2, [r3, #16]
 800f91c:	8afb      	ldrh	r3, [r7, #22]
 800f91e:	04d9      	lsls	r1, r3, #19
 800f920:	4b3b      	ldr	r3, [pc, #236]	; (800fa10 <USB_EPStartXfer+0x494>)
 800f922:	400b      	ands	r3, r1
 800f924:	69b9      	ldr	r1, [r7, #24]
 800f926:	0148      	lsls	r0, r1, #5
 800f928:	69f9      	ldr	r1, [r7, #28]
 800f92a:	4401      	add	r1, r0
 800f92c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f930:	4313      	orrs	r3, r2
 800f932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f934:	69bb      	ldr	r3, [r7, #24]
 800f936:	015a      	lsls	r2, r3, #5
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	4413      	add	r3, r2
 800f93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f940:	691a      	ldr	r2, [r3, #16]
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	8af9      	ldrh	r1, [r7, #22]
 800f948:	fb01 f303 	mul.w	r3, r1, r3
 800f94c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f950:	69b9      	ldr	r1, [r7, #24]
 800f952:	0148      	lsls	r0, r1, #5
 800f954:	69f9      	ldr	r1, [r7, #28]
 800f956:	4401      	add	r1, r0
 800f958:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f95c:	4313      	orrs	r3, r2
 800f95e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f960:	79fb      	ldrb	r3, [r7, #7]
 800f962:	2b01      	cmp	r3, #1
 800f964:	d10d      	bne.n	800f982 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	68db      	ldr	r3, [r3, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d009      	beq.n	800f982 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	68d9      	ldr	r1, [r3, #12]
 800f972:	69bb      	ldr	r3, [r7, #24]
 800f974:	015a      	lsls	r2, r3, #5
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	4413      	add	r3, r2
 800f97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f97e:	460a      	mov	r2, r1
 800f980:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	78db      	ldrb	r3, [r3, #3]
 800f986:	2b01      	cmp	r3, #1
 800f988:	d128      	bne.n	800f9dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f990:	689b      	ldr	r3, [r3, #8]
 800f992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f996:	2b00      	cmp	r3, #0
 800f998:	d110      	bne.n	800f9bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	015a      	lsls	r2, r3, #5
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	69ba      	ldr	r2, [r7, #24]
 800f9aa:	0151      	lsls	r1, r2, #5
 800f9ac:	69fa      	ldr	r2, [r7, #28]
 800f9ae:	440a      	add	r2, r1
 800f9b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f9b8:	6013      	str	r3, [r2, #0]
 800f9ba:	e00f      	b.n	800f9dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	015a      	lsls	r2, r3, #5
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	69ba      	ldr	r2, [r7, #24]
 800f9cc:	0151      	lsls	r1, r2, #5
 800f9ce:	69fa      	ldr	r2, [r7, #28]
 800f9d0:	440a      	add	r2, r1
 800f9d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f9dc:	69bb      	ldr	r3, [r7, #24]
 800f9de:	015a      	lsls	r2, r3, #5
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	69ba      	ldr	r2, [r7, #24]
 800f9ec:	0151      	lsls	r1, r2, #5
 800f9ee:	69fa      	ldr	r2, [r7, #28]
 800f9f0:	440a      	add	r2, r1
 800f9f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f9fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f9fc:	2300      	movs	r3, #0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3720      	adds	r7, #32
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	fff80000 	.word	0xfff80000
 800fa0c:	e007ffff 	.word	0xe007ffff
 800fa10:	1ff80000 	.word	0x1ff80000

0800fa14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b087      	sub	sp, #28
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	4613      	mov	r3, r2
 800fa20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	785b      	ldrb	r3, [r3, #1]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	f040 80cd 	bne.w	800fbd0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	695b      	ldr	r3, [r3, #20]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d132      	bne.n	800faa4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	015a      	lsls	r2, r3, #5
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	4413      	add	r3, r2
 800fa46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa4a:	691a      	ldr	r2, [r3, #16]
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	0159      	lsls	r1, r3, #5
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	440b      	add	r3, r1
 800fa54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4b98      	ldr	r3, [pc, #608]	; (800fcbc <USB_EP0StartXfer+0x2a8>)
 800fa5c:	4013      	ands	r3, r2
 800fa5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	015a      	lsls	r2, r3, #5
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	4413      	add	r3, r2
 800fa68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa6c:	691b      	ldr	r3, [r3, #16]
 800fa6e:	693a      	ldr	r2, [r7, #16]
 800fa70:	0151      	lsls	r1, r2, #5
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	440a      	add	r2, r1
 800fa76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	015a      	lsls	r2, r3, #5
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	4413      	add	r3, r2
 800fa88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa8c:	691a      	ldr	r2, [r3, #16]
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	0159      	lsls	r1, r3, #5
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	440b      	add	r3, r1
 800fa96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	4b88      	ldr	r3, [pc, #544]	; (800fcc0 <USB_EP0StartXfer+0x2ac>)
 800fa9e:	4013      	ands	r3, r2
 800faa0:	610b      	str	r3, [r1, #16]
 800faa2:	e04e      	b.n	800fb42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	015a      	lsls	r2, r3, #5
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	4413      	add	r3, r2
 800faac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fab0:	691a      	ldr	r2, [r3, #16]
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	0159      	lsls	r1, r3, #5
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	440b      	add	r3, r1
 800faba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fabe:	4619      	mov	r1, r3
 800fac0:	4b7f      	ldr	r3, [pc, #508]	; (800fcc0 <USB_EP0StartXfer+0x2ac>)
 800fac2:	4013      	ands	r3, r2
 800fac4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	015a      	lsls	r2, r3, #5
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	4413      	add	r3, r2
 800face:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad2:	691a      	ldr	r2, [r3, #16]
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	0159      	lsls	r1, r3, #5
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	440b      	add	r3, r1
 800fadc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae0:	4619      	mov	r1, r3
 800fae2:	4b76      	ldr	r3, [pc, #472]	; (800fcbc <USB_EP0StartXfer+0x2a8>)
 800fae4:	4013      	ands	r3, r2
 800fae6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	695a      	ldr	r2, [r3, #20]
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	689b      	ldr	r3, [r3, #8]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d903      	bls.n	800fafc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	689a      	ldr	r2, [r3, #8]
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	015a      	lsls	r2, r3, #5
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	4413      	add	r3, r2
 800fb04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb08:	691b      	ldr	r3, [r3, #16]
 800fb0a:	693a      	ldr	r2, [r7, #16]
 800fb0c:	0151      	lsls	r1, r2, #5
 800fb0e:	697a      	ldr	r2, [r7, #20]
 800fb10:	440a      	add	r2, r1
 800fb12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	015a      	lsls	r2, r3, #5
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	4413      	add	r3, r2
 800fb24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb28:	691a      	ldr	r2, [r3, #16]
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	695b      	ldr	r3, [r3, #20]
 800fb2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb32:	6939      	ldr	r1, [r7, #16]
 800fb34:	0148      	lsls	r0, r1, #5
 800fb36:	6979      	ldr	r1, [r7, #20]
 800fb38:	4401      	add	r1, r0
 800fb3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fb42:	79fb      	ldrb	r3, [r7, #7]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d11e      	bne.n	800fb86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	691b      	ldr	r3, [r3, #16]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d009      	beq.n	800fb64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	015a      	lsls	r2, r3, #5
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	4413      	add	r3, r2
 800fb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	691b      	ldr	r3, [r3, #16]
 800fb62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	015a      	lsls	r2, r3, #5
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	693a      	ldr	r2, [r7, #16]
 800fb74:	0151      	lsls	r1, r2, #5
 800fb76:	697a      	ldr	r2, [r7, #20]
 800fb78:	440a      	add	r2, r1
 800fb7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb82:	6013      	str	r3, [r2, #0]
 800fb84:	e092      	b.n	800fcac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	015a      	lsls	r2, r3, #5
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	693a      	ldr	r2, [r7, #16]
 800fb96:	0151      	lsls	r1, r2, #5
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	440a      	add	r2, r1
 800fb9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fba0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fba4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	695b      	ldr	r3, [r3, #20]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d07e      	beq.n	800fcac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	f003 030f 	and.w	r3, r3, #15
 800fbbe:	2101      	movs	r1, #1
 800fbc0:	fa01 f303 	lsl.w	r3, r1, r3
 800fbc4:	6979      	ldr	r1, [r7, #20]
 800fbc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	634b      	str	r3, [r1, #52]	; 0x34
 800fbce:	e06d      	b.n	800fcac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	015a      	lsls	r2, r3, #5
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbdc:	691a      	ldr	r2, [r3, #16]
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	0159      	lsls	r1, r3, #5
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	440b      	add	r3, r1
 800fbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbea:	4619      	mov	r1, r3
 800fbec:	4b34      	ldr	r3, [pc, #208]	; (800fcc0 <USB_EP0StartXfer+0x2ac>)
 800fbee:	4013      	ands	r3, r2
 800fbf0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	015a      	lsls	r2, r3, #5
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbfe:	691a      	ldr	r2, [r3, #16]
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	0159      	lsls	r1, r3, #5
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	440b      	add	r3, r1
 800fc08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	4b2b      	ldr	r3, [pc, #172]	; (800fcbc <USB_EP0StartXfer+0x2a8>)
 800fc10:	4013      	ands	r3, r2
 800fc12:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	695b      	ldr	r3, [r3, #20]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d003      	beq.n	800fc24 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	689a      	ldr	r2, [r3, #8]
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	015a      	lsls	r2, r3, #5
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc30:	691b      	ldr	r3, [r3, #16]
 800fc32:	693a      	ldr	r2, [r7, #16]
 800fc34:	0151      	lsls	r1, r2, #5
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	440a      	add	r2, r1
 800fc3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	015a      	lsls	r2, r3, #5
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc50:	691a      	ldr	r2, [r3, #16]
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	689b      	ldr	r3, [r3, #8]
 800fc56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc5a:	6939      	ldr	r1, [r7, #16]
 800fc5c:	0148      	lsls	r0, r1, #5
 800fc5e:	6979      	ldr	r1, [r7, #20]
 800fc60:	4401      	add	r1, r0
 800fc62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fc66:	4313      	orrs	r3, r2
 800fc68:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fc6a:	79fb      	ldrb	r3, [r7, #7]
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d10d      	bne.n	800fc8c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d009      	beq.n	800fc8c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	68d9      	ldr	r1, [r3, #12]
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	015a      	lsls	r2, r3, #5
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	4413      	add	r3, r2
 800fc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc88:	460a      	mov	r2, r1
 800fc8a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	015a      	lsls	r2, r3, #5
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	4413      	add	r3, r2
 800fc94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	693a      	ldr	r2, [r7, #16]
 800fc9c:	0151      	lsls	r1, r2, #5
 800fc9e:	697a      	ldr	r2, [r7, #20]
 800fca0:	440a      	add	r2, r1
 800fca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fca6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fcac:	2300      	movs	r3, #0
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	371c      	adds	r7, #28
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb8:	4770      	bx	lr
 800fcba:	bf00      	nop
 800fcbc:	e007ffff 	.word	0xe007ffff
 800fcc0:	fff80000 	.word	0xfff80000

0800fcc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b089      	sub	sp, #36	; 0x24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	4611      	mov	r1, r2
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	71fb      	strb	r3, [r7, #7]
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800fce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d123      	bne.n	800fd32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fcea:	88bb      	ldrh	r3, [r7, #4]
 800fcec:	3303      	adds	r3, #3
 800fcee:	089b      	lsrs	r3, r3, #2
 800fcf0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	61bb      	str	r3, [r7, #24]
 800fcf6:	e018      	b.n	800fd2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	031a      	lsls	r2, r3, #12
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	4413      	add	r3, r2
 800fd00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd04:	461a      	mov	r2, r3
 800fd06:	69fb      	ldr	r3, [r7, #28]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	3301      	adds	r3, #1
 800fd16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fd18:	69fb      	ldr	r3, [r7, #28]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	3301      	adds	r3, #1
 800fd22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	3301      	adds	r3, #1
 800fd28:	61bb      	str	r3, [r7, #24]
 800fd2a:	69ba      	ldr	r2, [r7, #24]
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d3e2      	bcc.n	800fcf8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3724      	adds	r7, #36	; 0x24
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b08b      	sub	sp, #44	; 0x2c
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	4613      	mov	r3, r2
 800fd4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fd56:	88fb      	ldrh	r3, [r7, #6]
 800fd58:	089b      	lsrs	r3, r3, #2
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fd5e:	88fb      	ldrh	r3, [r7, #6]
 800fd60:	f003 0303 	and.w	r3, r3, #3
 800fd64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fd66:	2300      	movs	r3, #0
 800fd68:	623b      	str	r3, [r7, #32]
 800fd6a:	e014      	b.n	800fd96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fd6c:	69bb      	ldr	r3, [r7, #24]
 800fd6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd76:	601a      	str	r2, [r3, #0]
    pDest++;
 800fd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd80:	3301      	adds	r3, #1
 800fd82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd86:	3301      	adds	r3, #1
 800fd88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fd90:	6a3b      	ldr	r3, [r7, #32]
 800fd92:	3301      	adds	r3, #1
 800fd94:	623b      	str	r3, [r7, #32]
 800fd96:	6a3a      	ldr	r2, [r7, #32]
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d3e6      	bcc.n	800fd6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fd9e:	8bfb      	ldrh	r3, [r7, #30]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d01e      	beq.n	800fde2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fda4:	2300      	movs	r3, #0
 800fda6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdae:	461a      	mov	r2, r3
 800fdb0:	f107 0310 	add.w	r3, r7, #16
 800fdb4:	6812      	ldr	r2, [r2, #0]
 800fdb6:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fdb8:	693a      	ldr	r2, [r7, #16]
 800fdba:	6a3b      	ldr	r3, [r7, #32]
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	00db      	lsls	r3, r3, #3
 800fdc0:	fa22 f303 	lsr.w	r3, r2, r3
 800fdc4:	b2da      	uxtb	r2, r3
 800fdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc8:	701a      	strb	r2, [r3, #0]
      i++;
 800fdca:	6a3b      	ldr	r3, [r7, #32]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	623b      	str	r3, [r7, #32]
      pDest++;
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fdd6:	8bfb      	ldrh	r3, [r7, #30]
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fddc:	8bfb      	ldrh	r3, [r7, #30]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1ea      	bne.n	800fdb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	372c      	adds	r7, #44	; 0x2c
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr

0800fdf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b085      	sub	sp, #20
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	785b      	ldrb	r3, [r3, #1]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d12c      	bne.n	800fe66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	015a      	lsls	r2, r3, #5
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	4413      	add	r3, r2
 800fe14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	db12      	blt.n	800fe44 <USB_EPSetStall+0x54>
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00f      	beq.n	800fe44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	015a      	lsls	r2, r3, #5
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	0151      	lsls	r1, r2, #5
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	440a      	add	r2, r1
 800fe3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fe42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	015a      	lsls	r2, r3, #5
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	4413      	add	r3, r2
 800fe4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	68ba      	ldr	r2, [r7, #8]
 800fe54:	0151      	lsls	r1, r2, #5
 800fe56:	68fa      	ldr	r2, [r7, #12]
 800fe58:	440a      	add	r2, r1
 800fe5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fe62:	6013      	str	r3, [r2, #0]
 800fe64:	e02b      	b.n	800febe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	015a      	lsls	r2, r3, #5
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	db12      	blt.n	800fe9e <USB_EPSetStall+0xae>
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d00f      	beq.n	800fe9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	015a      	lsls	r2, r3, #5
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	4413      	add	r3, r2
 800fe86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	68ba      	ldr	r2, [r7, #8]
 800fe8e:	0151      	lsls	r1, r2, #5
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	440a      	add	r2, r1
 800fe94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fe9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	015a      	lsls	r2, r3, #5
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	4413      	add	r3, r2
 800fea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68ba      	ldr	r2, [r7, #8]
 800feae:	0151      	lsls	r1, r2, #5
 800feb0:	68fa      	ldr	r2, [r7, #12]
 800feb2:	440a      	add	r2, r1
 800feb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800febc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3714      	adds	r7, #20
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fecc:	b480      	push	{r7}
 800fece:	b085      	sub	sp, #20
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	785b      	ldrb	r3, [r3, #1]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d128      	bne.n	800ff3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	015a      	lsls	r2, r3, #5
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	4413      	add	r3, r2
 800fef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	0151      	lsls	r1, r2, #5
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	440a      	add	r2, r1
 800fefe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ff06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	78db      	ldrb	r3, [r3, #3]
 800ff0c:	2b03      	cmp	r3, #3
 800ff0e:	d003      	beq.n	800ff18 <USB_EPClearStall+0x4c>
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	78db      	ldrb	r3, [r3, #3]
 800ff14:	2b02      	cmp	r3, #2
 800ff16:	d138      	bne.n	800ff8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	015a      	lsls	r2, r3, #5
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	4413      	add	r3, r2
 800ff20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	68ba      	ldr	r2, [r7, #8]
 800ff28:	0151      	lsls	r1, r2, #5
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	440a      	add	r2, r1
 800ff2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff36:	6013      	str	r3, [r2, #0]
 800ff38:	e027      	b.n	800ff8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	015a      	lsls	r2, r3, #5
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	4413      	add	r3, r2
 800ff42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	68ba      	ldr	r2, [r7, #8]
 800ff4a:	0151      	lsls	r1, r2, #5
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	440a      	add	r2, r1
 800ff50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ff58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	78db      	ldrb	r3, [r3, #3]
 800ff5e:	2b03      	cmp	r3, #3
 800ff60:	d003      	beq.n	800ff6a <USB_EPClearStall+0x9e>
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	78db      	ldrb	r3, [r3, #3]
 800ff66:	2b02      	cmp	r3, #2
 800ff68:	d10f      	bne.n	800ff8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	015a      	lsls	r2, r3, #5
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	4413      	add	r3, r2
 800ff72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	0151      	lsls	r1, r2, #5
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	440a      	add	r2, r1
 800ff80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b085      	sub	sp, #20
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ffb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ffba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	78fb      	ldrb	r3, [r7, #3]
 800ffc6:	011b      	lsls	r3, r3, #4
 800ffc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ffcc:	68f9      	ldr	r1, [r7, #12]
 800ffce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffd2:	4313      	orrs	r3, r2
 800ffd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3714      	adds	r7, #20
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b085      	sub	sp, #20
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fffe:	f023 0303 	bic.w	r3, r3, #3
 8010002:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	68fa      	ldr	r2, [r7, #12]
 801000e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010012:	f023 0302 	bic.w	r3, r3, #2
 8010016:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010018:	2300      	movs	r3, #0
}
 801001a:	4618      	mov	r0, r3
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr

08010026 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010026:	b480      	push	{r7}
 8010028:	b085      	sub	sp, #20
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010040:	f023 0303 	bic.w	r3, r3, #3
 8010044:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010054:	f043 0302 	orr.w	r3, r3, #2
 8010058:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3714      	adds	r7, #20
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr

08010068 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010068:	b480      	push	{r7}
 801006a:	b085      	sub	sp, #20
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	695b      	ldr	r3, [r3, #20]
 8010074:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	699b      	ldr	r3, [r3, #24]
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	4013      	ands	r3, r2
 801007e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010080:	68fb      	ldr	r3, [r7, #12]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3714      	adds	r7, #20
 8010086:	46bd      	mov	sp, r7
 8010088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008c:	4770      	bx	lr

0801008e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801008e:	b480      	push	{r7}
 8010090:	b085      	sub	sp, #20
 8010092:	af00      	add	r7, sp, #0
 8010094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100a0:	699b      	ldr	r3, [r3, #24]
 80100a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100aa:	69db      	ldr	r3, [r3, #28]
 80100ac:	68ba      	ldr	r2, [r7, #8]
 80100ae:	4013      	ands	r3, r2
 80100b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	0c1b      	lsrs	r3, r3, #16
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3714      	adds	r7, #20
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr

080100c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80100c2:	b480      	push	{r7}
 80100c4:	b085      	sub	sp, #20
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100d4:	699b      	ldr	r3, [r3, #24]
 80100d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100de:	69db      	ldr	r3, [r3, #28]
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	4013      	ands	r3, r2
 80100e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	b29b      	uxth	r3, r3
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3714      	adds	r7, #20
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr

080100f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80100f6:	b480      	push	{r7}
 80100f8:	b085      	sub	sp, #20
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	460b      	mov	r3, r1
 8010100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010106:	78fb      	ldrb	r3, [r7, #3]
 8010108:	015a      	lsls	r2, r3, #5
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	4413      	add	r3, r2
 801010e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010112:	689b      	ldr	r3, [r3, #8]
 8010114:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801011c:	695b      	ldr	r3, [r3, #20]
 801011e:	68ba      	ldr	r2, [r7, #8]
 8010120:	4013      	ands	r3, r2
 8010122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010124:	68bb      	ldr	r3, [r7, #8]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3714      	adds	r7, #20
 801012a:	46bd      	mov	sp, r7
 801012c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010130:	4770      	bx	lr

08010132 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010132:	b480      	push	{r7}
 8010134:	b087      	sub	sp, #28
 8010136:	af00      	add	r7, sp, #0
 8010138:	6078      	str	r0, [r7, #4]
 801013a:	460b      	mov	r3, r1
 801013c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010154:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010156:	78fb      	ldrb	r3, [r7, #3]
 8010158:	f003 030f 	and.w	r3, r3, #15
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	fa22 f303 	lsr.w	r3, r2, r3
 8010162:	01db      	lsls	r3, r3, #7
 8010164:	b2db      	uxtb	r3, r3
 8010166:	693a      	ldr	r2, [r7, #16]
 8010168:	4313      	orrs	r3, r2
 801016a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801016c:	78fb      	ldrb	r3, [r7, #3]
 801016e:	015a      	lsls	r2, r3, #5
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	4413      	add	r3, r2
 8010174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010178:	689b      	ldr	r3, [r3, #8]
 801017a:	693a      	ldr	r2, [r7, #16]
 801017c:	4013      	ands	r3, r2
 801017e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010180:	68bb      	ldr	r3, [r7, #8]
}
 8010182:	4618      	mov	r0, r3
 8010184:	371c      	adds	r7, #28
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801018e:	b480      	push	{r7}
 8010190:	b083      	sub	sp, #12
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	695b      	ldr	r3, [r3, #20]
 801019a:	f003 0301 	and.w	r3, r3, #1
}
 801019e:	4618      	mov	r0, r3
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr
	...

080101ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b085      	sub	sp, #20
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c6:	4619      	mov	r1, r3
 80101c8:	4b09      	ldr	r3, [pc, #36]	; (80101f0 <USB_ActivateSetup+0x44>)
 80101ca:	4013      	ands	r3, r2
 80101cc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	68fa      	ldr	r2, [r7, #12]
 80101d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80101dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3714      	adds	r7, #20
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr
 80101f0:	fffff800 	.word	0xfffff800

080101f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b087      	sub	sp, #28
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	460b      	mov	r3, r1
 80101fe:	607a      	str	r2, [r7, #4]
 8010200:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	333c      	adds	r3, #60	; 0x3c
 801020a:	3304      	adds	r3, #4
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	4a26      	ldr	r2, [pc, #152]	; (80102ac <USB_EP0_OutStart+0xb8>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d90a      	bls.n	801022e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010228:	d101      	bne.n	801022e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801022a:	2300      	movs	r3, #0
 801022c:	e037      	b.n	801029e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010234:	461a      	mov	r2, r3
 8010236:	2300      	movs	r3, #0
 8010238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010240:	691b      	ldr	r3, [r3, #16]
 8010242:	697a      	ldr	r2, [r7, #20]
 8010244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801024c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010254:	691b      	ldr	r3, [r3, #16]
 8010256:	697a      	ldr	r2, [r7, #20]
 8010258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801025c:	f043 0318 	orr.w	r3, r3, #24
 8010260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	697a      	ldr	r2, [r7, #20]
 801026c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010270:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010274:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010276:	7afb      	ldrb	r3, [r7, #11]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d10f      	bne.n	801029c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010282:	461a      	mov	r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010296:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801029a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801029c:	2300      	movs	r3, #0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	371c      	adds	r7, #28
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	4f54300a 	.word	0x4f54300a

080102b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b085      	sub	sp, #20
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80102b8:	2300      	movs	r3, #0
 80102ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	3301      	adds	r3, #1
 80102c0:	60fb      	str	r3, [r7, #12]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	4a13      	ldr	r2, [pc, #76]	; (8010314 <USB_CoreReset+0x64>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d901      	bls.n	80102ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80102ca:	2303      	movs	r3, #3
 80102cc:	e01b      	b.n	8010306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	691b      	ldr	r3, [r3, #16]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	daf2      	bge.n	80102bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80102d6:	2300      	movs	r3, #0
 80102d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	691b      	ldr	r3, [r3, #16]
 80102de:	f043 0201 	orr.w	r2, r3, #1
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	3301      	adds	r3, #1
 80102ea:	60fb      	str	r3, [r7, #12]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	4a09      	ldr	r2, [pc, #36]	; (8010314 <USB_CoreReset+0x64>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d901      	bls.n	80102f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80102f4:	2303      	movs	r3, #3
 80102f6:	e006      	b.n	8010306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	691b      	ldr	r3, [r3, #16]
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	2b01      	cmp	r3, #1
 8010302:	d0f0      	beq.n	80102e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3714      	adds	r7, #20
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	00030d40 	.word	0x00030d40

08010318 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801031c:	4904      	ldr	r1, [pc, #16]	; (8010330 <MX_FATFS_Init+0x18>)
 801031e:	4805      	ldr	r0, [pc, #20]	; (8010334 <MX_FATFS_Init+0x1c>)
 8010320:	f001 fea0 	bl	8012064 <FATFS_LinkDriver>
 8010324:	4603      	mov	r3, r0
 8010326:	461a      	mov	r2, r3
 8010328:	4b03      	ldr	r3, [pc, #12]	; (8010338 <MX_FATFS_Init+0x20>)
 801032a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801032c:	bf00      	nop
 801032e:	bd80      	pop	{r7, pc}
 8010330:	24000730 	.word	0x24000730
 8010334:	08015500 	.word	0x08015500
 8010338:	2400072c 	.word	0x2400072c

0801033c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010342:	2300      	movs	r3, #0
 8010344:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010346:	f000 f885 	bl	8010454 <BSP_SD_IsDetected>
 801034a:	4603      	mov	r3, r0
 801034c:	2b01      	cmp	r3, #1
 801034e:	d001      	beq.n	8010354 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010350:	2302      	movs	r3, #2
 8010352:	e012      	b.n	801037a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010354:	480b      	ldr	r0, [pc, #44]	; (8010384 <BSP_SD_Init+0x48>)
 8010356:	f7f9 fdb5 	bl	8009ec4 <HAL_SD_Init>
 801035a:	4603      	mov	r3, r0
 801035c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801035e:	79fb      	ldrb	r3, [r7, #7]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d109      	bne.n	8010378 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010368:	4806      	ldr	r0, [pc, #24]	; (8010384 <BSP_SD_Init+0x48>)
 801036a:	f7fa fc59 	bl	800ac20 <HAL_SD_ConfigWideBusOperation>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010374:	2301      	movs	r3, #1
 8010376:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010378:	79fb      	ldrb	r3, [r7, #7]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	24000450 	.word	0x24000450

08010388 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b086      	sub	sp, #24
 801038c:	af00      	add	r7, sp, #0
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	60b9      	str	r1, [r7, #8]
 8010392:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010394:	2300      	movs	r3, #0
 8010396:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	68ba      	ldr	r2, [r7, #8]
 801039c:	68f9      	ldr	r1, [r7, #12]
 801039e:	4806      	ldr	r0, [pc, #24]	; (80103b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80103a0:	f7f9 fea8 	bl	800a0f4 <HAL_SD_ReadBlocks_DMA>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d001      	beq.n	80103ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80103aa:	2301      	movs	r3, #1
 80103ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80103ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3718      	adds	r7, #24
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	24000450 	.word	0x24000450

080103bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	68f9      	ldr	r1, [r7, #12]
 80103d2:	4806      	ldr	r0, [pc, #24]	; (80103ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80103d4:	f7f9 ff36 	bl	800a244 <HAL_SD_WriteBlocks_DMA>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d001      	beq.n	80103e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80103de:	2301      	movs	r3, #1
 80103e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80103e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3718      	adds	r7, #24
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	24000450 	.word	0x24000450

080103f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80103f4:	4805      	ldr	r0, [pc, #20]	; (801040c <BSP_SD_GetCardState+0x1c>)
 80103f6:	f7fa fd23 	bl	800ae40 <HAL_SD_GetCardState>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b04      	cmp	r3, #4
 80103fe:	bf14      	ite	ne
 8010400:	2301      	movne	r3, #1
 8010402:	2300      	moveq	r3, #0
 8010404:	b2db      	uxtb	r3, r3
}
 8010406:	4618      	mov	r0, r3
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	24000450 	.word	0x24000450

08010410 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010418:	6879      	ldr	r1, [r7, #4]
 801041a:	4803      	ldr	r0, [pc, #12]	; (8010428 <BSP_SD_GetCardInfo+0x18>)
 801041c:	f7fa fbd4 	bl	800abc8 <HAL_SD_GetCardInfo>
}
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	24000450 	.word	0x24000450

0801042c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010434:	f000 f984 	bl	8010740 <BSP_SD_WriteCpltCallback>
}
 8010438:	bf00      	nop
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010448:	f000 f986 	bl	8010758 <BSP_SD_ReadCpltCallback>
}
 801044c:	bf00      	nop
 801044e:	3708      	adds	r7, #8
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801045a:	2301      	movs	r3, #1
 801045c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 801045e:	79fb      	ldrb	r3, [r7, #7]
 8010460:	b2db      	uxtb	r3, r3
}
 8010462:	4618      	mov	r0, r3
 8010464:	370c      	adds	r7, #12
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr

0801046e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801046e:	b580      	push	{r7, lr}
 8010470:	b084      	sub	sp, #16
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010476:	f7f1 fbdd 	bl	8001c34 <HAL_GetTick>
 801047a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801047c:	e006      	b.n	801048c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801047e:	f7ff ffb7 	bl	80103f0 <BSP_SD_GetCardState>
 8010482:	4603      	mov	r3, r0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d101      	bne.n	801048c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010488:	2300      	movs	r3, #0
 801048a:	e009      	b.n	80104a0 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801048c:	f7f1 fbd2 	bl	8001c34 <HAL_GetTick>
 8010490:	4602      	mov	r2, r0
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	1ad3      	subs	r3, r2, r3
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	429a      	cmp	r2, r3
 801049a:	d8f0      	bhi.n	801047e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801049c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3710      	adds	r7, #16
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}

080104a8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	4603      	mov	r3, r0
 80104b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80104b2:	4b0b      	ldr	r3, [pc, #44]	; (80104e0 <SD_CheckStatus+0x38>)
 80104b4:	2201      	movs	r2, #1
 80104b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80104b8:	f7ff ff9a 	bl	80103f0 <BSP_SD_GetCardState>
 80104bc:	4603      	mov	r3, r0
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d107      	bne.n	80104d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80104c2:	4b07      	ldr	r3, [pc, #28]	; (80104e0 <SD_CheckStatus+0x38>)
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	f023 0301 	bic.w	r3, r3, #1
 80104cc:	b2da      	uxtb	r2, r3
 80104ce:	4b04      	ldr	r3, [pc, #16]	; (80104e0 <SD_CheckStatus+0x38>)
 80104d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80104d2:	4b03      	ldr	r3, [pc, #12]	; (80104e0 <SD_CheckStatus+0x38>)
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	b2db      	uxtb	r3, r3
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	24000021 	.word	0x24000021

080104e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	4603      	mov	r3, r0
 80104ec:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80104ee:	f7ff ff25 	bl	801033c <BSP_SD_Init>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d107      	bne.n	8010508 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80104f8:	79fb      	ldrb	r3, [r7, #7]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7ff ffd4 	bl	80104a8 <SD_CheckStatus>
 8010500:	4603      	mov	r3, r0
 8010502:	461a      	mov	r2, r3
 8010504:	4b04      	ldr	r3, [pc, #16]	; (8010518 <SD_initialize+0x34>)
 8010506:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010508:	4b03      	ldr	r3, [pc, #12]	; (8010518 <SD_initialize+0x34>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	b2db      	uxtb	r3, r3
}
 801050e:	4618      	mov	r0, r3
 8010510:	3708      	adds	r7, #8
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	24000021 	.word	0x24000021

0801051c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	4603      	mov	r3, r0
 8010524:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010526:	79fb      	ldrb	r3, [r7, #7]
 8010528:	4618      	mov	r0, r3
 801052a:	f7ff ffbd 	bl	80104a8 <SD_CheckStatus>
 801052e:	4603      	mov	r3, r0
}
 8010530:	4618      	mov	r0, r3
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b086      	sub	sp, #24
 801053c:	af00      	add	r7, sp, #0
 801053e:	60b9      	str	r1, [r7, #8]
 8010540:	607a      	str	r2, [r7, #4]
 8010542:	603b      	str	r3, [r7, #0]
 8010544:	4603      	mov	r3, r0
 8010546:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010548:	2301      	movs	r3, #1
 801054a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801054c:	f247 5030 	movw	r0, #30000	; 0x7530
 8010550:	f7ff ff8d 	bl	801046e <SD_CheckStatusWithTimeout>
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	da01      	bge.n	801055e <SD_read+0x26>
  {
    return res;
 801055a:	7dfb      	ldrb	r3, [r7, #23]
 801055c:	e03b      	b.n	80105d6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801055e:	683a      	ldr	r2, [r7, #0]
 8010560:	6879      	ldr	r1, [r7, #4]
 8010562:	68b8      	ldr	r0, [r7, #8]
 8010564:	f7ff ff10 	bl	8010388 <BSP_SD_ReadBlocks_DMA>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d132      	bne.n	80105d4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801056e:	4b1c      	ldr	r3, [pc, #112]	; (80105e0 <SD_read+0xa8>)
 8010570:	2200      	movs	r2, #0
 8010572:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010574:	f7f1 fb5e 	bl	8001c34 <HAL_GetTick>
 8010578:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801057a:	bf00      	nop
 801057c:	4b18      	ldr	r3, [pc, #96]	; (80105e0 <SD_read+0xa8>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d108      	bne.n	8010596 <SD_read+0x5e>
 8010584:	f7f1 fb56 	bl	8001c34 <HAL_GetTick>
 8010588:	4602      	mov	r2, r0
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010592:	4293      	cmp	r3, r2
 8010594:	d9f2      	bls.n	801057c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010596:	4b12      	ldr	r3, [pc, #72]	; (80105e0 <SD_read+0xa8>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d102      	bne.n	80105a4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801059e:	2301      	movs	r3, #1
 80105a0:	75fb      	strb	r3, [r7, #23]
 80105a2:	e017      	b.n	80105d4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80105a4:	4b0e      	ldr	r3, [pc, #56]	; (80105e0 <SD_read+0xa8>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80105aa:	f7f1 fb43 	bl	8001c34 <HAL_GetTick>
 80105ae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80105b0:	e007      	b.n	80105c2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80105b2:	f7ff ff1d 	bl	80103f0 <BSP_SD_GetCardState>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d102      	bne.n	80105c2 <SD_read+0x8a>
          {
            res = RES_OK;
 80105bc:	2300      	movs	r3, #0
 80105be:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80105c0:	e008      	b.n	80105d4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80105c2:	f7f1 fb37 	bl	8001c34 <HAL_GetTick>
 80105c6:	4602      	mov	r2, r0
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d9ee      	bls.n	80105b2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80105d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3718      	adds	r7, #24
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	2400038c 	.word	0x2400038c

080105e4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60b9      	str	r1, [r7, #8]
 80105ec:	607a      	str	r2, [r7, #4]
 80105ee:	603b      	str	r3, [r7, #0]
 80105f0:	4603      	mov	r3, r0
 80105f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80105f4:	2301      	movs	r3, #1
 80105f6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80105f8:	4b24      	ldr	r3, [pc, #144]	; (801068c <SD_write+0xa8>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80105fe:	f247 5030 	movw	r0, #30000	; 0x7530
 8010602:	f7ff ff34 	bl	801046e <SD_CheckStatusWithTimeout>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	da01      	bge.n	8010610 <SD_write+0x2c>
  {
    return res;
 801060c:	7dfb      	ldrb	r3, [r7, #23]
 801060e:	e038      	b.n	8010682 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010610:	683a      	ldr	r2, [r7, #0]
 8010612:	6879      	ldr	r1, [r7, #4]
 8010614:	68b8      	ldr	r0, [r7, #8]
 8010616:	f7ff fed1 	bl	80103bc <BSP_SD_WriteBlocks_DMA>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	d12f      	bne.n	8010680 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010620:	f7f1 fb08 	bl	8001c34 <HAL_GetTick>
 8010624:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010626:	bf00      	nop
 8010628:	4b18      	ldr	r3, [pc, #96]	; (801068c <SD_write+0xa8>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d108      	bne.n	8010642 <SD_write+0x5e>
 8010630:	f7f1 fb00 	bl	8001c34 <HAL_GetTick>
 8010634:	4602      	mov	r2, r0
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	f247 522f 	movw	r2, #29999	; 0x752f
 801063e:	4293      	cmp	r3, r2
 8010640:	d9f2      	bls.n	8010628 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010642:	4b12      	ldr	r3, [pc, #72]	; (801068c <SD_write+0xa8>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d102      	bne.n	8010650 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801064a:	2301      	movs	r3, #1
 801064c:	75fb      	strb	r3, [r7, #23]
 801064e:	e017      	b.n	8010680 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010650:	4b0e      	ldr	r3, [pc, #56]	; (801068c <SD_write+0xa8>)
 8010652:	2200      	movs	r2, #0
 8010654:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010656:	f7f1 faed 	bl	8001c34 <HAL_GetTick>
 801065a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801065c:	e007      	b.n	801066e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801065e:	f7ff fec7 	bl	80103f0 <BSP_SD_GetCardState>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <SD_write+0x8a>
          {
            res = RES_OK;
 8010668:	2300      	movs	r3, #0
 801066a:	75fb      	strb	r3, [r7, #23]
            break;
 801066c:	e008      	b.n	8010680 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801066e:	f7f1 fae1 	bl	8001c34 <HAL_GetTick>
 8010672:	4602      	mov	r2, r0
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	1ad3      	subs	r3, r2, r3
 8010678:	f247 522f 	movw	r2, #29999	; 0x752f
 801067c:	4293      	cmp	r3, r2
 801067e:	d9ee      	bls.n	801065e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010680:	7dfb      	ldrb	r3, [r7, #23]
}
 8010682:	4618      	mov	r0, r3
 8010684:	3718      	adds	r7, #24
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	24000388 	.word	0x24000388

08010690 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b08c      	sub	sp, #48	; 0x30
 8010694:	af00      	add	r7, sp, #0
 8010696:	4603      	mov	r3, r0
 8010698:	603a      	str	r2, [r7, #0]
 801069a:	71fb      	strb	r3, [r7, #7]
 801069c:	460b      	mov	r3, r1
 801069e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80106a0:	2301      	movs	r3, #1
 80106a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80106a6:	4b25      	ldr	r3, [pc, #148]	; (801073c <SD_ioctl+0xac>)
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	b2db      	uxtb	r3, r3
 80106ac:	f003 0301 	and.w	r3, r3, #1
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d001      	beq.n	80106b8 <SD_ioctl+0x28>
 80106b4:	2303      	movs	r3, #3
 80106b6:	e03c      	b.n	8010732 <SD_ioctl+0xa2>

  switch (cmd)
 80106b8:	79bb      	ldrb	r3, [r7, #6]
 80106ba:	2b03      	cmp	r3, #3
 80106bc:	d834      	bhi.n	8010728 <SD_ioctl+0x98>
 80106be:	a201      	add	r2, pc, #4	; (adr r2, 80106c4 <SD_ioctl+0x34>)
 80106c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106c4:	080106d5 	.word	0x080106d5
 80106c8:	080106dd 	.word	0x080106dd
 80106cc:	080106f5 	.word	0x080106f5
 80106d0:	0801070f 	.word	0x0801070f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80106d4:	2300      	movs	r3, #0
 80106d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80106da:	e028      	b.n	801072e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80106dc:	f107 0308 	add.w	r3, r7, #8
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7ff fe95 	bl	8010410 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80106e6:	6a3a      	ldr	r2, [r7, #32]
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80106ec:	2300      	movs	r3, #0
 80106ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80106f2:	e01c      	b.n	801072e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80106f4:	f107 0308 	add.w	r3, r7, #8
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7ff fe89 	bl	8010410 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80106fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010700:	b29a      	uxth	r2, r3
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010706:	2300      	movs	r3, #0
 8010708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801070c:	e00f      	b.n	801072e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801070e:	f107 0308 	add.w	r3, r7, #8
 8010712:	4618      	mov	r0, r3
 8010714:	f7ff fe7c 	bl	8010410 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	0a5a      	lsrs	r2, r3, #9
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010726:	e002      	b.n	801072e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010728:	2304      	movs	r3, #4
 801072a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801072e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010732:	4618      	mov	r0, r3
 8010734:	3730      	adds	r7, #48	; 0x30
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	24000021 	.word	0x24000021

08010740 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010740:	b480      	push	{r7}
 8010742:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010744:	4b03      	ldr	r3, [pc, #12]	; (8010754 <BSP_SD_WriteCpltCallback+0x14>)
 8010746:	2201      	movs	r2, #1
 8010748:	601a      	str	r2, [r3, #0]
}
 801074a:	bf00      	nop
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr
 8010754:	24000388 	.word	0x24000388

08010758 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010758:	b480      	push	{r7}
 801075a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801075c:	4b03      	ldr	r3, [pc, #12]	; (801076c <BSP_SD_ReadCpltCallback+0x14>)
 801075e:	2201      	movs	r2, #1
 8010760:	601a      	str	r2, [r3, #0]
}
 8010762:	bf00      	nop
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr
 801076c:	2400038c 	.word	0x2400038c

08010770 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	460b      	mov	r3, r1
 801077a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801077c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010780:	f002 fa1a 	bl	8012bb8 <malloc>
 8010784:	4603      	mov	r3, r0
 8010786:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d105      	bne.n	801079a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2200      	movs	r2, #0
 8010792:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010796:	2302      	movs	r3, #2
 8010798:	e066      	b.n	8010868 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	7c1b      	ldrb	r3, [r3, #16]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d119      	bne.n	80107de <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80107aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107ae:	2202      	movs	r2, #2
 80107b0:	2181      	movs	r1, #129	; 0x81
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f002 f887 	bl	80128c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2201      	movs	r2, #1
 80107bc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80107be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107c2:	2202      	movs	r2, #2
 80107c4:	2101      	movs	r1, #1
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f002 f87d 	bl	80128c6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2201      	movs	r2, #1
 80107d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2210      	movs	r2, #16
 80107d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80107dc:	e016      	b.n	801080c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80107de:	2340      	movs	r3, #64	; 0x40
 80107e0:	2202      	movs	r2, #2
 80107e2:	2181      	movs	r1, #129	; 0x81
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f002 f86e 	bl	80128c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80107f0:	2340      	movs	r3, #64	; 0x40
 80107f2:	2202      	movs	r2, #2
 80107f4:	2101      	movs	r1, #1
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f002 f865 	bl	80128c6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2201      	movs	r2, #1
 8010800:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2210      	movs	r2, #16
 8010808:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801080c:	2308      	movs	r3, #8
 801080e:	2203      	movs	r2, #3
 8010810:	2182      	movs	r1, #130	; 0x82
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f002 f857 	bl	80128c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2201      	movs	r2, #1
 801081c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2200      	movs	r2, #0
 801082e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2200      	movs	r2, #0
 8010836:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	7c1b      	ldrb	r3, [r3, #16]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d109      	bne.n	8010856 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010848:	f44f 7300 	mov.w	r3, #512	; 0x200
 801084c:	2101      	movs	r1, #1
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f002 f928 	bl	8012aa4 <USBD_LL_PrepareReceive>
 8010854:	e007      	b.n	8010866 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801085c:	2340      	movs	r3, #64	; 0x40
 801085e:	2101      	movs	r1, #1
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f002 f91f 	bl	8012aa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010866:	2300      	movs	r3, #0
}
 8010868:	4618      	mov	r0, r3
 801086a:	3710      	adds	r7, #16
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	460b      	mov	r3, r1
 801087a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 801087c:	2300      	movs	r3, #0
 801087e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010880:	2181      	movs	r1, #129	; 0x81
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f002 f845 	bl	8012912 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2200      	movs	r2, #0
 801088c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801088e:	2101      	movs	r1, #1
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f002 f83e 	bl	8012912 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2200      	movs	r2, #0
 801089a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801089e:	2182      	movs	r1, #130	; 0x82
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f002 f836 	bl	8012912 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2200      	movs	r2, #0
 80108aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2200      	movs	r2, #0
 80108b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d00e      	beq.n	80108de <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108d0:	4618      	mov	r0, r3
 80108d2:	f002 f979 	bl	8012bc8 <free>
    pdev->pClassData = NULL;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80108de:	7bfb      	ldrb	r3, [r7, #15]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3710      	adds	r7, #16
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b086      	sub	sp, #24
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108f8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80108fa:	2300      	movs	r3, #0
 80108fc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80108fe:	2300      	movs	r3, #0
 8010900:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801090e:	2b00      	cmp	r3, #0
 8010910:	d03a      	beq.n	8010988 <USBD_CDC_Setup+0xa0>
 8010912:	2b20      	cmp	r3, #32
 8010914:	f040 809a 	bne.w	8010a4c <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	88db      	ldrh	r3, [r3, #6]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d029      	beq.n	8010974 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	b25b      	sxtb	r3, r3
 8010926:	2b00      	cmp	r3, #0
 8010928:	da11      	bge.n	801094e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010930:	689b      	ldr	r3, [r3, #8]
 8010932:	683a      	ldr	r2, [r7, #0]
 8010934:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010936:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010938:	683a      	ldr	r2, [r7, #0]
 801093a:	88d2      	ldrh	r2, [r2, #6]
 801093c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801093e:	6939      	ldr	r1, [r7, #16]
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	88db      	ldrh	r3, [r3, #6]
 8010944:	461a      	mov	r2, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f001 fabf 	bl	8011eca <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 801094c:	e085      	b.n	8010a5a <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	785a      	ldrb	r2, [r3, #1]
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	88db      	ldrh	r3, [r3, #6]
 801095c:	b2da      	uxtb	r2, r3
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010964:	6939      	ldr	r1, [r7, #16]
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	88db      	ldrh	r3, [r3, #6]
 801096a:	461a      	mov	r2, r3
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f001 fad8 	bl	8011f22 <USBD_CtlPrepareRx>
    break;
 8010972:	e072      	b.n	8010a5a <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	7850      	ldrb	r0, [r2, #1]
 8010980:	2200      	movs	r2, #0
 8010982:	6839      	ldr	r1, [r7, #0]
 8010984:	4798      	blx	r3
    break;
 8010986:	e068      	b.n	8010a5a <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	785b      	ldrb	r3, [r3, #1]
 801098c:	2b0b      	cmp	r3, #11
 801098e:	d852      	bhi.n	8010a36 <USBD_CDC_Setup+0x14e>
 8010990:	a201      	add	r2, pc, #4	; (adr r2, 8010998 <USBD_CDC_Setup+0xb0>)
 8010992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010996:	bf00      	nop
 8010998:	080109c9 	.word	0x080109c9
 801099c:	08010a45 	.word	0x08010a45
 80109a0:	08010a37 	.word	0x08010a37
 80109a4:	08010a37 	.word	0x08010a37
 80109a8:	08010a37 	.word	0x08010a37
 80109ac:	08010a37 	.word	0x08010a37
 80109b0:	08010a37 	.word	0x08010a37
 80109b4:	08010a37 	.word	0x08010a37
 80109b8:	08010a37 	.word	0x08010a37
 80109bc:	08010a37 	.word	0x08010a37
 80109c0:	080109f3 	.word	0x080109f3
 80109c4:	08010a1d 	.word	0x08010a1d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	2b03      	cmp	r3, #3
 80109d2:	d107      	bne.n	80109e4 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80109d4:	f107 030c 	add.w	r3, r7, #12
 80109d8:	2202      	movs	r2, #2
 80109da:	4619      	mov	r1, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f001 fa74 	bl	8011eca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80109e2:	e032      	b.n	8010a4a <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 80109e4:	6839      	ldr	r1, [r7, #0]
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f001 f9fe 	bl	8011de8 <USBD_CtlError>
        ret = USBD_FAIL;
 80109ec:	2303      	movs	r3, #3
 80109ee:	75fb      	strb	r3, [r7, #23]
      break;
 80109f0:	e02b      	b.n	8010a4a <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	2b03      	cmp	r3, #3
 80109fc:	d107      	bne.n	8010a0e <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80109fe:	f107 030f 	add.w	r3, r7, #15
 8010a02:	2201      	movs	r2, #1
 8010a04:	4619      	mov	r1, r3
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f001 fa5f 	bl	8011eca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010a0c:	e01d      	b.n	8010a4a <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 8010a0e:	6839      	ldr	r1, [r7, #0]
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f001 f9e9 	bl	8011de8 <USBD_CtlError>
        ret = USBD_FAIL;
 8010a16:	2303      	movs	r3, #3
 8010a18:	75fb      	strb	r3, [r7, #23]
      break;
 8010a1a:	e016      	b.n	8010a4a <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	2b03      	cmp	r3, #3
 8010a26:	d00f      	beq.n	8010a48 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 8010a28:	6839      	ldr	r1, [r7, #0]
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f001 f9dc 	bl	8011de8 <USBD_CtlError>
        ret = USBD_FAIL;
 8010a30:	2303      	movs	r3, #3
 8010a32:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010a34:	e008      	b.n	8010a48 <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010a36:	6839      	ldr	r1, [r7, #0]
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f001 f9d5 	bl	8011de8 <USBD_CtlError>
      ret = USBD_FAIL;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	75fb      	strb	r3, [r7, #23]
      break;
 8010a42:	e002      	b.n	8010a4a <USBD_CDC_Setup+0x162>
      break;
 8010a44:	bf00      	nop
 8010a46:	e008      	b.n	8010a5a <USBD_CDC_Setup+0x172>
      break;
 8010a48:	bf00      	nop
    }
    break;
 8010a4a:	e006      	b.n	8010a5a <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 8010a4c:	6839      	ldr	r1, [r7, #0]
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f001 f9ca 	bl	8011de8 <USBD_CtlError>
    ret = USBD_FAIL;
 8010a54:	2303      	movs	r3, #3
 8010a56:	75fb      	strb	r3, [r7, #23]
    break;
 8010a58:	bf00      	nop
  }

  return (uint8_t)ret;
 8010a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3718      	adds	r7, #24
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d101      	bne.n	8010a86 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010a82:	2303      	movs	r3, #3
 8010a84:	e049      	b.n	8010b1a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010a8e:	78fa      	ldrb	r2, [r7, #3]
 8010a90:	6879      	ldr	r1, [r7, #4]
 8010a92:	4613      	mov	r3, r2
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4413      	add	r3, r2
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	440b      	add	r3, r1
 8010a9c:	3318      	adds	r3, #24
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d029      	beq.n	8010af8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010aa4:	78fa      	ldrb	r2, [r7, #3]
 8010aa6:	6879      	ldr	r1, [r7, #4]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	4413      	add	r3, r2
 8010aae:	009b      	lsls	r3, r3, #2
 8010ab0:	440b      	add	r3, r1
 8010ab2:	3318      	adds	r3, #24
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	78f9      	ldrb	r1, [r7, #3]
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	460b      	mov	r3, r1
 8010abc:	00db      	lsls	r3, r3, #3
 8010abe:	1a5b      	subs	r3, r3, r1
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	4403      	add	r3, r0
 8010ac4:	3344      	adds	r3, #68	; 0x44
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	fbb2 f1f3 	udiv	r1, r2, r3
 8010acc:	fb03 f301 	mul.w	r3, r3, r1
 8010ad0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d110      	bne.n	8010af8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010ad6:	78fa      	ldrb	r2, [r7, #3]
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	4613      	mov	r3, r2
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	4413      	add	r3, r2
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	440b      	add	r3, r1
 8010ae4:	3318      	adds	r3, #24
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010aea:	78f9      	ldrb	r1, [r7, #3]
 8010aec:	2300      	movs	r3, #0
 8010aee:	2200      	movs	r2, #0
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f001 ffb6 	bl	8012a62 <USBD_LL_Transmit>
 8010af6:	e00f      	b.n	8010b18 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	2200      	movs	r2, #0
 8010afc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b06:	691b      	ldr	r3, [r3, #16]
 8010b08:	68ba      	ldr	r2, [r7, #8]
 8010b0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010b0e:	68ba      	ldr	r2, [r7, #8]
 8010b10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010b14:	78fa      	ldrb	r2, [r7, #3]
 8010b16:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b22:	b580      	push	{r7, lr}
 8010b24:	b084      	sub	sp, #16
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d101      	bne.n	8010b44 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010b40:	2303      	movs	r3, #3
 8010b42:	e015      	b.n	8010b70 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010b44:	78fb      	ldrb	r3, [r7, #3]
 8010b46:	4619      	mov	r1, r3
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f001 ffcc 	bl	8012ae6 <USBD_LL_GetRxDataSize>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	68fa      	ldr	r2, [r7, #12]
 8010b60:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010b6a:	4611      	mov	r1, r2
 8010b6c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010b6e:	2300      	movs	r3, #0
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b86:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d015      	beq.n	8010bbe <USBD_CDC_EP0_RxReady+0x46>
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010b98:	2bff      	cmp	r3, #255	; 0xff
 8010b9a:	d010      	beq.n	8010bbe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010baa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010bac:	68fa      	ldr	r2, [r7, #12]
 8010bae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010bb2:	b292      	uxth	r2, r2
 8010bb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	22ff      	movs	r2, #255	; 0xff
 8010bba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8010bbe:	2300      	movs	r3, #0
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3710      	adds	r7, #16
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2243      	movs	r2, #67	; 0x43
 8010bd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010bd6:	4b03      	ldr	r3, [pc, #12]	; (8010be4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr
 8010be4:	240000ac 	.word	0x240000ac

08010be8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b083      	sub	sp, #12
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2243      	movs	r2, #67	; 0x43
 8010bf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010bf6:	4b03      	ldr	r3, [pc, #12]	; (8010c04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	370c      	adds	r7, #12
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr
 8010c04:	24000068 	.word	0x24000068

08010c08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2243      	movs	r2, #67	; 0x43
 8010c14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010c16:	4b03      	ldr	r3, [pc, #12]	; (8010c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	370c      	adds	r7, #12
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr
 8010c24:	240000f0 	.word	0x240000f0

08010c28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b083      	sub	sp, #12
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	220a      	movs	r2, #10
 8010c34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010c36:	4b03      	ldr	r3, [pc, #12]	; (8010c44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	370c      	adds	r7, #12
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr
 8010c44:	24000024 	.word	0x24000024

08010c48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d101      	bne.n	8010c5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010c58:	2303      	movs	r3, #3
 8010c5a:	e004      	b.n	8010c66 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	683a      	ldr	r2, [r7, #0]
 8010c60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010c64:	2300      	movs	r3, #0
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	370c      	adds	r7, #12
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr

08010c72 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010c72:	b480      	push	{r7}
 8010c74:	b087      	sub	sp, #28
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	60f8      	str	r0, [r7, #12]
 8010c7a:	60b9      	str	r1, [r7, #8]
 8010c7c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c84:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	371c      	adds	r7, #28
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b085      	sub	sp, #20
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cb4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	683a      	ldr	r2, [r7, #0]
 8010cba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010cbe:	2300      	movs	r3, #0
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3714      	adds	r7, #20
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b084      	sub	sp, #16
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cda:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d101      	bne.n	8010cee <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010cea:	2303      	movs	r3, #3
 8010cec:	e01a      	b.n	8010d24 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d114      	bne.n	8010d22 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010d16:	2181      	movs	r1, #129	; 0x81
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f001 fea2 	bl	8012a62 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3710      	adds	r7, #16
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d101      	bne.n	8010d4a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010d46:	2303      	movs	r3, #3
 8010d48:	e016      	b.n	8010d78 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	7c1b      	ldrb	r3, [r3, #16]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d109      	bne.n	8010d66 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d5c:	2101      	movs	r1, #1
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f001 fea0 	bl	8012aa4 <USBD_LL_PrepareReceive>
 8010d64:	e007      	b.n	8010d76 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d6c:	2340      	movs	r3, #64	; 0x40
 8010d6e:	2101      	movs	r1, #1
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f001 fe97 	bl	8012aa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3710      	adds	r7, #16
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b086      	sub	sp, #24
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d101      	bne.n	8010d98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010d94:	2303      	movs	r3, #3
 8010d96:	e025      	b.n	8010de4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d003      	beq.n	8010daa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2200      	movs	r2, #0
 8010da6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d003      	beq.n	8010dbc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d003      	beq.n	8010dca <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	2201      	movs	r2, #1
 8010dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	79fa      	ldrb	r2, [r7, #7]
 8010dd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010dd8:	68f8      	ldr	r0, [r7, #12]
 8010dda:	f001 fd09 	bl	80127f0 <USBD_LL_Init>
 8010dde:	4603      	mov	r3, r0
 8010de0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3718      	adds	r7, #24
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010df6:	2300      	movs	r3, #0
 8010df8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d101      	bne.n	8010e04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010e00:	2303      	movs	r3, #3
 8010e02:	e010      	b.n	8010e26 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	683a      	ldr	r2, [r7, #0]
 8010e08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e14:	f107 020e 	add.w	r2, r7, #14
 8010e18:	4610      	mov	r0, r2
 8010e1a:	4798      	blx	r3
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8010e24:	2300      	movs	r3, #0
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}

08010e2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010e2e:	b580      	push	{r7, lr}
 8010e30:	b082      	sub	sp, #8
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f001 fd2a 	bl	8012890 <USBD_LL_Start>
 8010e3c:	4603      	mov	r3, r0
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3708      	adds	r7, #8
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}

08010e46 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010e46:	b480      	push	{r7}
 8010e48:	b083      	sub	sp, #12
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010e4e:	2300      	movs	r3, #0
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	460b      	mov	r3, r1
 8010e66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010e68:	2303      	movs	r3, #3
 8010e6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d009      	beq.n	8010e8a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	78fa      	ldrb	r2, [r7, #3]
 8010e80:	4611      	mov	r1, r2
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	4798      	blx	r3
 8010e86:	4603      	mov	r3, r0
 8010e88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3710      	adds	r7, #16
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d007      	beq.n	8010eba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	78fa      	ldrb	r2, [r7, #3]
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	4798      	blx	r3
  }

  return USBD_OK;
 8010eba:	2300      	movs	r3, #0
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3708      	adds	r7, #8
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b084      	sub	sp, #16
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010ed4:	6839      	ldr	r1, [r7, #0]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f000 ff4c 	bl	8011d74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010eea:	461a      	mov	r2, r3
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010ef8:	f003 031f 	and.w	r3, r3, #31
 8010efc:	2b02      	cmp	r3, #2
 8010efe:	d01a      	beq.n	8010f36 <USBD_LL_SetupStage+0x72>
 8010f00:	2b02      	cmp	r3, #2
 8010f02:	d822      	bhi.n	8010f4a <USBD_LL_SetupStage+0x86>
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d002      	beq.n	8010f0e <USBD_LL_SetupStage+0x4a>
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d00a      	beq.n	8010f22 <USBD_LL_SetupStage+0x5e>
 8010f0c:	e01d      	b.n	8010f4a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010f14:	4619      	mov	r1, r3
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 fa20 	bl	801135c <USBD_StdDevReq>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8010f20:	e020      	b.n	8010f64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010f28:	4619      	mov	r1, r3
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f000 fa84 	bl	8011438 <USBD_StdItfReq>
 8010f30:	4603      	mov	r3, r0
 8010f32:	73fb      	strb	r3, [r7, #15]
      break;
 8010f34:	e016      	b.n	8010f64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 fac3 	bl	80114ca <USBD_StdEPReq>
 8010f44:	4603      	mov	r3, r0
 8010f46:	73fb      	strb	r3, [r7, #15]
      break;
 8010f48:	e00c      	b.n	8010f64 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010f50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	4619      	mov	r1, r3
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f001 fcf9 	bl	8012950 <USBD_LL_StallEP>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	73fb      	strb	r3, [r7, #15]
      break;
 8010f62:	bf00      	nop
  }

  return ret;
 8010f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3710      	adds	r7, #16
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b086      	sub	sp, #24
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	60f8      	str	r0, [r7, #12]
 8010f76:	460b      	mov	r3, r1
 8010f78:	607a      	str	r2, [r7, #4]
 8010f7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010f7c:	7afb      	ldrb	r3, [r7, #11]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d138      	bne.n	8010ff4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010f88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010f90:	2b03      	cmp	r3, #3
 8010f92:	d14c      	bne.n	801102e <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	689a      	ldr	r2, [r3, #8]
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d913      	bls.n	8010fc8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	689a      	ldr	r2, [r3, #8]
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	68db      	ldr	r3, [r3, #12]
 8010fa8:	1ad2      	subs	r2, r2, r3
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	68da      	ldr	r2, [r3, #12]
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	bf28      	it	cs
 8010fba:	4613      	movcs	r3, r2
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	6879      	ldr	r1, [r7, #4]
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f000 ffcb 	bl	8011f5c <USBD_CtlContinueRx>
 8010fc6:	e032      	b.n	801102e <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fce:	691b      	ldr	r3, [r3, #16]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d00b      	beq.n	8010fec <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fda:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010fdc:	2b03      	cmp	r3, #3
 8010fde:	d105      	bne.n	8010fec <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fe6:	691b      	ldr	r3, [r3, #16]
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8010fec:	68f8      	ldr	r0, [r7, #12]
 8010fee:	f000 ffc6 	bl	8011f7e <USBD_CtlSendStatus>
 8010ff2:	e01c      	b.n	801102e <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ffa:	699b      	ldr	r3, [r3, #24]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d014      	beq.n	801102a <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011006:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 8011008:	2b03      	cmp	r3, #3
 801100a:	d10e      	bne.n	801102a <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011012:	699b      	ldr	r3, [r3, #24]
 8011014:	7afa      	ldrb	r2, [r7, #11]
 8011016:	4611      	mov	r1, r2
 8011018:	68f8      	ldr	r0, [r7, #12]
 801101a:	4798      	blx	r3
 801101c:	4603      	mov	r3, r0
 801101e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011020:	7dfb      	ldrb	r3, [r7, #23]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d003      	beq.n	801102e <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 8011026:	7dfb      	ldrb	r3, [r7, #23]
 8011028:	e002      	b.n	8011030 <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801102a:	2303      	movs	r3, #3
 801102c:	e000      	b.n	8011030 <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 801102e:	2300      	movs	r3, #0
}
 8011030:	4618      	mov	r0, r3
 8011032:	3718      	adds	r7, #24
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	460b      	mov	r3, r1
 8011042:	607a      	str	r2, [r7, #4]
 8011044:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011046:	7afb      	ldrb	r3, [r7, #11]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d16b      	bne.n	8011124 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	3314      	adds	r3, #20
 8011050:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011058:	2b02      	cmp	r3, #2
 801105a:	d156      	bne.n	801110a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	689a      	ldr	r2, [r3, #8]
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	68db      	ldr	r3, [r3, #12]
 8011064:	429a      	cmp	r2, r3
 8011066:	d914      	bls.n	8011092 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	689a      	ldr	r2, [r3, #8]
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	1ad2      	subs	r2, r2, r3
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	689b      	ldr	r3, [r3, #8]
 801107a:	461a      	mov	r2, r3
 801107c:	6879      	ldr	r1, [r7, #4]
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f000 ff3e 	bl	8011f00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011084:	2300      	movs	r3, #0
 8011086:	2200      	movs	r2, #0
 8011088:	2100      	movs	r1, #0
 801108a:	68f8      	ldr	r0, [r7, #12]
 801108c:	f001 fd0a 	bl	8012aa4 <USBD_LL_PrepareReceive>
 8011090:	e03b      	b.n	801110a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	68da      	ldr	r2, [r3, #12]
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	689b      	ldr	r3, [r3, #8]
 801109a:	429a      	cmp	r2, r3
 801109c:	d11c      	bne.n	80110d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	685a      	ldr	r2, [r3, #4]
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d316      	bcc.n	80110d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	685a      	ldr	r2, [r3, #4]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d20f      	bcs.n	80110d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80110b8:	2200      	movs	r2, #0
 80110ba:	2100      	movs	r1, #0
 80110bc:	68f8      	ldr	r0, [r7, #12]
 80110be:	f000 ff1f 	bl	8011f00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	2200      	movs	r2, #0
 80110c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80110ca:	2300      	movs	r3, #0
 80110cc:	2200      	movs	r2, #0
 80110ce:	2100      	movs	r1, #0
 80110d0:	68f8      	ldr	r0, [r7, #12]
 80110d2:	f001 fce7 	bl	8012aa4 <USBD_LL_PrepareReceive>
 80110d6:	e018      	b.n	801110a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d00b      	beq.n	80110fc <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110ea:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80110ec:	2b03      	cmp	r3, #3
 80110ee:	d105      	bne.n	80110fc <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80110fc:	2180      	movs	r1, #128	; 0x80
 80110fe:	68f8      	ldr	r0, [r7, #12]
 8011100:	f001 fc26 	bl	8012950 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f000 ff4d 	bl	8011fa4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011110:	2b01      	cmp	r3, #1
 8011112:	d124      	bne.n	801115e <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 8011114:	68f8      	ldr	r0, [r7, #12]
 8011116:	f7ff fe96 	bl	8010e46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2200      	movs	r2, #0
 801111e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011122:	e01c      	b.n	801115e <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801112a:	695b      	ldr	r3, [r3, #20]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d014      	beq.n	801115a <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011136:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 8011138:	2b03      	cmp	r3, #3
 801113a:	d10e      	bne.n	801115a <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011142:	695b      	ldr	r3, [r3, #20]
 8011144:	7afa      	ldrb	r2, [r7, #11]
 8011146:	4611      	mov	r1, r2
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	4798      	blx	r3
 801114c:	4603      	mov	r3, r0
 801114e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011150:	7dfb      	ldrb	r3, [r7, #23]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d003      	beq.n	801115e <USBD_LL_DataInStage+0x126>
    {
      return ret;
 8011156:	7dfb      	ldrb	r3, [r7, #23]
 8011158:	e002      	b.n	8011160 <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801115a:	2303      	movs	r3, #3
 801115c:	e000      	b.n	8011160 <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 801115e:	2300      	movs	r3, #0
}
 8011160:	4618      	mov	r0, r3
 8011162:	3718      	adds	r7, #24
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2201      	movs	r2, #1
 8011174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2200      	movs	r2, #0
 8011184:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2200      	movs	r2, #0
 801118a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011194:	2b00      	cmp	r3, #0
 8011196:	d009      	beq.n	80111ac <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	6852      	ldr	r2, [r2, #4]
 80111a4:	b2d2      	uxtb	r2, r2
 80111a6:	4611      	mov	r1, r2
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80111ac:	2340      	movs	r3, #64	; 0x40
 80111ae:	2200      	movs	r2, #0
 80111b0:	2100      	movs	r1, #0
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f001 fb87 	bl	80128c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2201      	movs	r2, #1
 80111bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2240      	movs	r2, #64	; 0x40
 80111c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80111c8:	2340      	movs	r3, #64	; 0x40
 80111ca:	2200      	movs	r2, #0
 80111cc:	2180      	movs	r1, #128	; 0x80
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f001 fb79 	bl	80128c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2201      	movs	r2, #1
 80111d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2240      	movs	r2, #64	; 0x40
 80111de:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80111e0:	2300      	movs	r3, #0
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80111ea:	b480      	push	{r7}
 80111ec:	b083      	sub	sp, #12
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
 80111f2:	460b      	mov	r3, r1
 80111f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	78fa      	ldrb	r2, [r7, #3]
 80111fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	370c      	adds	r7, #12
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr

0801120a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801120a:	b480      	push	{r7}
 801120c:	b083      	sub	sp, #12
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011218:	b2da      	uxtb	r2, r3
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2204      	movs	r2, #4
 8011224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	370c      	adds	r7, #12
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr

08011236 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011236:	b480      	push	{r7}
 8011238:	b083      	sub	sp, #12
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011244:	b2db      	uxtb	r3, r3
 8011246:	2b04      	cmp	r3, #4
 8011248:	d106      	bne.n	8011258 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011250:	b2da      	uxtb	r2, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011258:	2300      	movs	r3, #0
}
 801125a:	4618      	mov	r0, r3
 801125c:	370c      	adds	r7, #12
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr

08011266 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b082      	sub	sp, #8
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011274:	b2db      	uxtb	r3, r3
 8011276:	2b03      	cmp	r3, #3
 8011278:	d10b      	bne.n	8011292 <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011280:	69db      	ldr	r3, [r3, #28]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d005      	beq.n	8011292 <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801128c:	69db      	ldr	r3, [r3, #28]
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	460b      	mov	r3, r1
 80112a6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80112a8:	2300      	movs	r3, #0
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	370c      	adds	r7, #12
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr

080112b6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80112b6:	b480      	push	{r7}
 80112b8:	b083      	sub	sp, #12
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
 80112be:	460b      	mov	r3, r1
 80112c0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80112c2:	2300      	movs	r3, #0
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	370c      	adds	r7, #12
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr

080112d0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80112d8:	2300      	movs	r3, #0
}
 80112da:	4618      	mov	r0, r3
 80112dc:	370c      	adds	r7, #12
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr

080112e6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b082      	sub	sp, #8
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2201      	movs	r2, #1
 80112f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d009      	beq.n	8011314 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	6852      	ldr	r2, [r2, #4]
 801130c:	b2d2      	uxtb	r2, r2
 801130e:	4611      	mov	r1, r2
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	4798      	blx	r3
  }

  return USBD_OK;
 8011314:	2300      	movs	r3, #0
}
 8011316:	4618      	mov	r0, r3
 8011318:	3708      	adds	r7, #8
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}

0801131e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801131e:	b480      	push	{r7}
 8011320:	b087      	sub	sp, #28
 8011322:	af00      	add	r7, sp, #0
 8011324:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	3301      	adds	r3, #1
 8011334:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801133c:	8a3b      	ldrh	r3, [r7, #16]
 801133e:	021b      	lsls	r3, r3, #8
 8011340:	b21a      	sxth	r2, r3
 8011342:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011346:	4313      	orrs	r3, r2
 8011348:	b21b      	sxth	r3, r3
 801134a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801134c:	89fb      	ldrh	r3, [r7, #14]
}
 801134e:	4618      	mov	r0, r3
 8011350:	371c      	adds	r7, #28
 8011352:	46bd      	mov	sp, r7
 8011354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011358:	4770      	bx	lr
	...

0801135c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011366:	2300      	movs	r3, #0
 8011368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011372:	2b40      	cmp	r3, #64	; 0x40
 8011374:	d005      	beq.n	8011382 <USBD_StdDevReq+0x26>
 8011376:	2b40      	cmp	r3, #64	; 0x40
 8011378:	d853      	bhi.n	8011422 <USBD_StdDevReq+0xc6>
 801137a:	2b00      	cmp	r3, #0
 801137c:	d00b      	beq.n	8011396 <USBD_StdDevReq+0x3a>
 801137e:	2b20      	cmp	r3, #32
 8011380:	d14f      	bne.n	8011422 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011388:	689b      	ldr	r3, [r3, #8]
 801138a:	6839      	ldr	r1, [r7, #0]
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	4798      	blx	r3
 8011390:	4603      	mov	r3, r0
 8011392:	73fb      	strb	r3, [r7, #15]
    break;
 8011394:	e04a      	b.n	801142c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	785b      	ldrb	r3, [r3, #1]
 801139a:	2b09      	cmp	r3, #9
 801139c:	d83b      	bhi.n	8011416 <USBD_StdDevReq+0xba>
 801139e:	a201      	add	r2, pc, #4	; (adr r2, 80113a4 <USBD_StdDevReq+0x48>)
 80113a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a4:	080113f9 	.word	0x080113f9
 80113a8:	0801140d 	.word	0x0801140d
 80113ac:	08011417 	.word	0x08011417
 80113b0:	08011403 	.word	0x08011403
 80113b4:	08011417 	.word	0x08011417
 80113b8:	080113d7 	.word	0x080113d7
 80113bc:	080113cd 	.word	0x080113cd
 80113c0:	08011417 	.word	0x08011417
 80113c4:	080113ef 	.word	0x080113ef
 80113c8:	080113e1 	.word	0x080113e1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80113cc:	6839      	ldr	r1, [r7, #0]
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 f9dc 	bl	801178c <USBD_GetDescriptor>
      break;
 80113d4:	e024      	b.n	8011420 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80113d6:	6839      	ldr	r1, [r7, #0]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 fb41 	bl	8011a60 <USBD_SetAddress>
      break;
 80113de:	e01f      	b.n	8011420 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f000 fb80 	bl	8011ae8 <USBD_SetConfig>
 80113e8:	4603      	mov	r3, r0
 80113ea:	73fb      	strb	r3, [r7, #15]
      break;
 80113ec:	e018      	b.n	8011420 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80113ee:	6839      	ldr	r1, [r7, #0]
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f000 fc1f 	bl	8011c34 <USBD_GetConfig>
      break;
 80113f6:	e013      	b.n	8011420 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80113f8:	6839      	ldr	r1, [r7, #0]
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 fc50 	bl	8011ca0 <USBD_GetStatus>
      break;
 8011400:	e00e      	b.n	8011420 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011402:	6839      	ldr	r1, [r7, #0]
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f000 fc7f 	bl	8011d08 <USBD_SetFeature>
      break;
 801140a:	e009      	b.n	8011420 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801140c:	6839      	ldr	r1, [r7, #0]
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 fc8e 	bl	8011d30 <USBD_ClrFeature>
      break;
 8011414:	e004      	b.n	8011420 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011416:	6839      	ldr	r1, [r7, #0]
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 fce5 	bl	8011de8 <USBD_CtlError>
      break;
 801141e:	bf00      	nop
    }
    break;
 8011420:	e004      	b.n	801142c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011422:	6839      	ldr	r1, [r7, #0]
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f000 fcdf 	bl	8011de8 <USBD_CtlError>
    break;
 801142a:	bf00      	nop
  }

  return ret;
 801142c:	7bfb      	ldrb	r3, [r7, #15]
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop

08011438 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011442:	2300      	movs	r3, #0
 8011444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801144e:	2b40      	cmp	r3, #64	; 0x40
 8011450:	d005      	beq.n	801145e <USBD_StdItfReq+0x26>
 8011452:	2b40      	cmp	r3, #64	; 0x40
 8011454:	d82f      	bhi.n	80114b6 <USBD_StdItfReq+0x7e>
 8011456:	2b00      	cmp	r3, #0
 8011458:	d001      	beq.n	801145e <USBD_StdItfReq+0x26>
 801145a:	2b20      	cmp	r3, #32
 801145c:	d12b      	bne.n	80114b6 <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011464:	b2db      	uxtb	r3, r3
 8011466:	3b01      	subs	r3, #1
 8011468:	2b02      	cmp	r3, #2
 801146a:	d81d      	bhi.n	80114a8 <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	889b      	ldrh	r3, [r3, #4]
 8011470:	b2db      	uxtb	r3, r3
 8011472:	2b01      	cmp	r3, #1
 8011474:	d813      	bhi.n	801149e <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801147c:	689b      	ldr	r3, [r3, #8]
 801147e:	6839      	ldr	r1, [r7, #0]
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	4798      	blx	r3
 8011484:	4603      	mov	r3, r0
 8011486:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	88db      	ldrh	r3, [r3, #6]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d110      	bne.n	80114b2 <USBD_StdItfReq+0x7a>
 8011490:	7bfb      	ldrb	r3, [r7, #15]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d10d      	bne.n	80114b2 <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f000 fd71 	bl	8011f7e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801149c:	e009      	b.n	80114b2 <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 801149e:	6839      	ldr	r1, [r7, #0]
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f000 fca1 	bl	8011de8 <USBD_CtlError>
      break;
 80114a6:	e004      	b.n	80114b2 <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 80114a8:	6839      	ldr	r1, [r7, #0]
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f000 fc9c 	bl	8011de8 <USBD_CtlError>
      break;
 80114b0:	e000      	b.n	80114b4 <USBD_StdItfReq+0x7c>
      break;
 80114b2:	bf00      	nop
    }
    break;
 80114b4:	e004      	b.n	80114c0 <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 80114b6:	6839      	ldr	r1, [r7, #0]
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f000 fc95 	bl	8011de8 <USBD_CtlError>
    break;
 80114be:	bf00      	nop
  }

  return ret;
 80114c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b084      	sub	sp, #16
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80114d4:	2300      	movs	r3, #0
 80114d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	889b      	ldrh	r3, [r3, #4]
 80114dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80114e6:	2b40      	cmp	r3, #64	; 0x40
 80114e8:	d007      	beq.n	80114fa <USBD_StdEPReq+0x30>
 80114ea:	2b40      	cmp	r3, #64	; 0x40
 80114ec:	f200 8143 	bhi.w	8011776 <USBD_StdEPReq+0x2ac>
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d00c      	beq.n	801150e <USBD_StdEPReq+0x44>
 80114f4:	2b20      	cmp	r3, #32
 80114f6:	f040 813e 	bne.w	8011776 <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011500:	689b      	ldr	r3, [r3, #8]
 8011502:	6839      	ldr	r1, [r7, #0]
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	4798      	blx	r3
 8011508:	4603      	mov	r3, r0
 801150a:	73fb      	strb	r3, [r7, #15]
    break;
 801150c:	e138      	b.n	8011780 <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	785b      	ldrb	r3, [r3, #1]
 8011512:	2b03      	cmp	r3, #3
 8011514:	d007      	beq.n	8011526 <USBD_StdEPReq+0x5c>
 8011516:	2b03      	cmp	r3, #3
 8011518:	f300 8127 	bgt.w	801176a <USBD_StdEPReq+0x2a0>
 801151c:	2b00      	cmp	r3, #0
 801151e:	d07d      	beq.n	801161c <USBD_StdEPReq+0x152>
 8011520:	2b01      	cmp	r3, #1
 8011522:	d03c      	beq.n	801159e <USBD_StdEPReq+0xd4>
 8011524:	e121      	b.n	801176a <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801152c:	b2db      	uxtb	r3, r3
 801152e:	2b02      	cmp	r3, #2
 8011530:	d002      	beq.n	8011538 <USBD_StdEPReq+0x6e>
 8011532:	2b03      	cmp	r3, #3
 8011534:	d016      	beq.n	8011564 <USBD_StdEPReq+0x9a>
 8011536:	e02c      	b.n	8011592 <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011538:	7bbb      	ldrb	r3, [r7, #14]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d00d      	beq.n	801155a <USBD_StdEPReq+0x90>
 801153e:	7bbb      	ldrb	r3, [r7, #14]
 8011540:	2b80      	cmp	r3, #128	; 0x80
 8011542:	d00a      	beq.n	801155a <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011544:	7bbb      	ldrb	r3, [r7, #14]
 8011546:	4619      	mov	r1, r3
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f001 fa01 	bl	8012950 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801154e:	2180      	movs	r1, #128	; 0x80
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f001 f9fd 	bl	8012950 <USBD_LL_StallEP>
 8011556:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011558:	e020      	b.n	801159c <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 801155a:	6839      	ldr	r1, [r7, #0]
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f000 fc43 	bl	8011de8 <USBD_CtlError>
        break;
 8011562:	e01b      	b.n	801159c <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	885b      	ldrh	r3, [r3, #2]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d10e      	bne.n	801158a <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801156c:	7bbb      	ldrb	r3, [r7, #14]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d00b      	beq.n	801158a <USBD_StdEPReq+0xc0>
 8011572:	7bbb      	ldrb	r3, [r7, #14]
 8011574:	2b80      	cmp	r3, #128	; 0x80
 8011576:	d008      	beq.n	801158a <USBD_StdEPReq+0xc0>
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	88db      	ldrh	r3, [r3, #6]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d104      	bne.n	801158a <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011580:	7bbb      	ldrb	r3, [r7, #14]
 8011582:	4619      	mov	r1, r3
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f001 f9e3 	bl	8012950 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f000 fcf7 	bl	8011f7e <USBD_CtlSendStatus>

        break;
 8011590:	e004      	b.n	801159c <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f000 fc27 	bl	8011de8 <USBD_CtlError>
        break;
 801159a:	bf00      	nop
      }
      break;
 801159c:	e0ea      	b.n	8011774 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	2b02      	cmp	r3, #2
 80115a8:	d002      	beq.n	80115b0 <USBD_StdEPReq+0xe6>
 80115aa:	2b03      	cmp	r3, #3
 80115ac:	d016      	beq.n	80115dc <USBD_StdEPReq+0x112>
 80115ae:	e02e      	b.n	801160e <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80115b0:	7bbb      	ldrb	r3, [r7, #14]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00d      	beq.n	80115d2 <USBD_StdEPReq+0x108>
 80115b6:	7bbb      	ldrb	r3, [r7, #14]
 80115b8:	2b80      	cmp	r3, #128	; 0x80
 80115ba:	d00a      	beq.n	80115d2 <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80115bc:	7bbb      	ldrb	r3, [r7, #14]
 80115be:	4619      	mov	r1, r3
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f001 f9c5 	bl	8012950 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80115c6:	2180      	movs	r1, #128	; 0x80
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f001 f9c1 	bl	8012950 <USBD_LL_StallEP>
 80115ce:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80115d0:	e023      	b.n	801161a <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 80115d2:	6839      	ldr	r1, [r7, #0]
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f000 fc07 	bl	8011de8 <USBD_CtlError>
        break;
 80115da:	e01e      	b.n	801161a <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	885b      	ldrh	r3, [r3, #2]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d119      	bne.n	8011618 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80115e4:	7bbb      	ldrb	r3, [r7, #14]
 80115e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d004      	beq.n	80115f8 <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80115ee:	7bbb      	ldrb	r3, [r7, #14]
 80115f0:	4619      	mov	r1, r3
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f001 f9cb 	bl	801298e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 fcc0 	bl	8011f7e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011604:	689b      	ldr	r3, [r3, #8]
 8011606:	6839      	ldr	r1, [r7, #0]
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	4798      	blx	r3
        }
        break;
 801160c:	e004      	b.n	8011618 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 801160e:	6839      	ldr	r1, [r7, #0]
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f000 fbe9 	bl	8011de8 <USBD_CtlError>
        break;
 8011616:	e000      	b.n	801161a <USBD_StdEPReq+0x150>
        break;
 8011618:	bf00      	nop
      }
      break;
 801161a:	e0ab      	b.n	8011774 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011622:	b2db      	uxtb	r3, r3
 8011624:	2b02      	cmp	r3, #2
 8011626:	d002      	beq.n	801162e <USBD_StdEPReq+0x164>
 8011628:	2b03      	cmp	r3, #3
 801162a:	d032      	beq.n	8011692 <USBD_StdEPReq+0x1c8>
 801162c:	e097      	b.n	801175e <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801162e:	7bbb      	ldrb	r3, [r7, #14]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d007      	beq.n	8011644 <USBD_StdEPReq+0x17a>
 8011634:	7bbb      	ldrb	r3, [r7, #14]
 8011636:	2b80      	cmp	r3, #128	; 0x80
 8011638:	d004      	beq.n	8011644 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 801163a:	6839      	ldr	r1, [r7, #0]
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f000 fbd3 	bl	8011de8 <USBD_CtlError>
          break;
 8011642:	e091      	b.n	8011768 <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011648:	2b00      	cmp	r3, #0
 801164a:	da0b      	bge.n	8011664 <USBD_StdEPReq+0x19a>
 801164c:	7bbb      	ldrb	r3, [r7, #14]
 801164e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011652:	4613      	mov	r3, r2
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4413      	add	r3, r2
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	3310      	adds	r3, #16
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	4413      	add	r3, r2
 8011660:	3304      	adds	r3, #4
 8011662:	e00b      	b.n	801167c <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011664:	7bbb      	ldrb	r3, [r7, #14]
 8011666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801166a:	4613      	mov	r3, r2
 801166c:	009b      	lsls	r3, r3, #2
 801166e:	4413      	add	r3, r2
 8011670:	009b      	lsls	r3, r3, #2
 8011672:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011676:	687a      	ldr	r2, [r7, #4]
 8011678:	4413      	add	r3, r2
 801167a:	3304      	adds	r3, #4
 801167c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	2200      	movs	r2, #0
 8011682:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	2202      	movs	r2, #2
 8011688:	4619      	mov	r1, r3
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f000 fc1d 	bl	8011eca <USBD_CtlSendData>
        break;
 8011690:	e06a      	b.n	8011768 <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011692:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011696:	2b00      	cmp	r3, #0
 8011698:	da11      	bge.n	80116be <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801169a:	7bbb      	ldrb	r3, [r7, #14]
 801169c:	f003 020f 	and.w	r2, r3, #15
 80116a0:	6879      	ldr	r1, [r7, #4]
 80116a2:	4613      	mov	r3, r2
 80116a4:	009b      	lsls	r3, r3, #2
 80116a6:	4413      	add	r3, r2
 80116a8:	009b      	lsls	r3, r3, #2
 80116aa:	440b      	add	r3, r1
 80116ac:	3324      	adds	r3, #36	; 0x24
 80116ae:	881b      	ldrh	r3, [r3, #0]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d117      	bne.n	80116e4 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 80116b4:	6839      	ldr	r1, [r7, #0]
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 fb96 	bl	8011de8 <USBD_CtlError>
            break;
 80116bc:	e054      	b.n	8011768 <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80116be:	7bbb      	ldrb	r3, [r7, #14]
 80116c0:	f003 020f 	and.w	r2, r3, #15
 80116c4:	6879      	ldr	r1, [r7, #4]
 80116c6:	4613      	mov	r3, r2
 80116c8:	009b      	lsls	r3, r3, #2
 80116ca:	4413      	add	r3, r2
 80116cc:	009b      	lsls	r3, r3, #2
 80116ce:	440b      	add	r3, r1
 80116d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80116d4:	881b      	ldrh	r3, [r3, #0]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d104      	bne.n	80116e4 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 80116da:	6839      	ldr	r1, [r7, #0]
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f000 fb83 	bl	8011de8 <USBD_CtlError>
            break;
 80116e2:	e041      	b.n	8011768 <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80116e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	da0b      	bge.n	8011704 <USBD_StdEPReq+0x23a>
 80116ec:	7bbb      	ldrb	r3, [r7, #14]
 80116ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80116f2:	4613      	mov	r3, r2
 80116f4:	009b      	lsls	r3, r3, #2
 80116f6:	4413      	add	r3, r2
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	3310      	adds	r3, #16
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	4413      	add	r3, r2
 8011700:	3304      	adds	r3, #4
 8011702:	e00b      	b.n	801171c <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011704:	7bbb      	ldrb	r3, [r7, #14]
 8011706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801170a:	4613      	mov	r3, r2
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	4413      	add	r3, r2
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	4413      	add	r3, r2
 801171a:	3304      	adds	r3, #4
 801171c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801171e:	7bbb      	ldrb	r3, [r7, #14]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d002      	beq.n	801172a <USBD_StdEPReq+0x260>
 8011724:	7bbb      	ldrb	r3, [r7, #14]
 8011726:	2b80      	cmp	r3, #128	; 0x80
 8011728:	d103      	bne.n	8011732 <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	2200      	movs	r2, #0
 801172e:	601a      	str	r2, [r3, #0]
 8011730:	e00e      	b.n	8011750 <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011732:	7bbb      	ldrb	r3, [r7, #14]
 8011734:	4619      	mov	r1, r3
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f001 f948 	bl	80129cc <USBD_LL_IsStallEP>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d003      	beq.n	801174a <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	2201      	movs	r2, #1
 8011746:	601a      	str	r2, [r3, #0]
 8011748:	e002      	b.n	8011750 <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	2200      	movs	r2, #0
 801174e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	2202      	movs	r2, #2
 8011754:	4619      	mov	r1, r3
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 fbb7 	bl	8011eca <USBD_CtlSendData>
          break;
 801175c:	e004      	b.n	8011768 <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 801175e:	6839      	ldr	r1, [r7, #0]
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f000 fb41 	bl	8011de8 <USBD_CtlError>
        break;
 8011766:	bf00      	nop
      }
      break;
 8011768:	e004      	b.n	8011774 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 801176a:	6839      	ldr	r1, [r7, #0]
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f000 fb3b 	bl	8011de8 <USBD_CtlError>
      break;
 8011772:	bf00      	nop
    }
    break;
 8011774:	e004      	b.n	8011780 <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 8011776:	6839      	ldr	r1, [r7, #0]
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 fb35 	bl	8011de8 <USBD_CtlError>
    break;
 801177e:	bf00      	nop
  }

  return ret;
 8011780:	7bfb      	ldrb	r3, [r7, #15]
}
 8011782:	4618      	mov	r0, r3
 8011784:	3710      	adds	r7, #16
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
	...

0801178c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011796:	2300      	movs	r3, #0
 8011798:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801179a:	2300      	movs	r3, #0
 801179c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801179e:	2300      	movs	r3, #0
 80117a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	885b      	ldrh	r3, [r3, #2]
 80117a6:	0a1b      	lsrs	r3, r3, #8
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	3b01      	subs	r3, #1
 80117ac:	2b06      	cmp	r3, #6
 80117ae:	f200 8128 	bhi.w	8011a02 <USBD_GetDescriptor+0x276>
 80117b2:	a201      	add	r2, pc, #4	; (adr r2, 80117b8 <USBD_GetDescriptor+0x2c>)
 80117b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117b8:	080117d5 	.word	0x080117d5
 80117bc:	080117ed 	.word	0x080117ed
 80117c0:	0801182d 	.word	0x0801182d
 80117c4:	08011a03 	.word	0x08011a03
 80117c8:	08011a03 	.word	0x08011a03
 80117cc:	080119a3 	.word	0x080119a3
 80117d0:	080119cf 	.word	0x080119cf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	7c12      	ldrb	r2, [r2, #16]
 80117e0:	f107 0108 	add.w	r1, r7, #8
 80117e4:	4610      	mov	r0, r2
 80117e6:	4798      	blx	r3
 80117e8:	60f8      	str	r0, [r7, #12]
    break;
 80117ea:	e112      	b.n	8011a12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	7c1b      	ldrb	r3, [r3, #16]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10d      	bne.n	8011810 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117fc:	f107 0208 	add.w	r2, r7, #8
 8011800:	4610      	mov	r0, r2
 8011802:	4798      	blx	r3
 8011804:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	3301      	adds	r3, #1
 801180a:	2202      	movs	r2, #2
 801180c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801180e:	e100      	b.n	8011a12 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011818:	f107 0208 	add.w	r2, r7, #8
 801181c:	4610      	mov	r0, r2
 801181e:	4798      	blx	r3
 8011820:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	3301      	adds	r3, #1
 8011826:	2202      	movs	r2, #2
 8011828:	701a      	strb	r2, [r3, #0]
    break;
 801182a:	e0f2      	b.n	8011a12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	885b      	ldrh	r3, [r3, #2]
 8011830:	b2db      	uxtb	r3, r3
 8011832:	2b05      	cmp	r3, #5
 8011834:	f200 80ac 	bhi.w	8011990 <USBD_GetDescriptor+0x204>
 8011838:	a201      	add	r2, pc, #4	; (adr r2, 8011840 <USBD_GetDescriptor+0xb4>)
 801183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801183e:	bf00      	nop
 8011840:	08011859 	.word	0x08011859
 8011844:	0801188d 	.word	0x0801188d
 8011848:	080118c1 	.word	0x080118c1
 801184c:	080118f5 	.word	0x080118f5
 8011850:	08011929 	.word	0x08011929
 8011854:	0801195d 	.word	0x0801195d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d00b      	beq.n	801187c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	7c12      	ldrb	r2, [r2, #16]
 8011870:	f107 0108 	add.w	r1, r7, #8
 8011874:	4610      	mov	r0, r2
 8011876:	4798      	blx	r3
 8011878:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801187a:	e091      	b.n	80119a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801187c:	6839      	ldr	r1, [r7, #0]
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f000 fab2 	bl	8011de8 <USBD_CtlError>
        err++;
 8011884:	7afb      	ldrb	r3, [r7, #11]
 8011886:	3301      	adds	r3, #1
 8011888:	72fb      	strb	r3, [r7, #11]
      break;
 801188a:	e089      	b.n	80119a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011892:	689b      	ldr	r3, [r3, #8]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d00b      	beq.n	80118b0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801189e:	689b      	ldr	r3, [r3, #8]
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	7c12      	ldrb	r2, [r2, #16]
 80118a4:	f107 0108 	add.w	r1, r7, #8
 80118a8:	4610      	mov	r0, r2
 80118aa:	4798      	blx	r3
 80118ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80118ae:	e077      	b.n	80119a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f000 fa98 	bl	8011de8 <USBD_CtlError>
        err++;
 80118b8:	7afb      	ldrb	r3, [r7, #11]
 80118ba:	3301      	adds	r3, #1
 80118bc:	72fb      	strb	r3, [r7, #11]
      break;
 80118be:	e06f      	b.n	80119a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00b      	beq.n	80118e4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	7c12      	ldrb	r2, [r2, #16]
 80118d8:	f107 0108 	add.w	r1, r7, #8
 80118dc:	4610      	mov	r0, r2
 80118de:	4798      	blx	r3
 80118e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80118e2:	e05d      	b.n	80119a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80118e4:	6839      	ldr	r1, [r7, #0]
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f000 fa7e 	bl	8011de8 <USBD_CtlError>
        err++;
 80118ec:	7afb      	ldrb	r3, [r7, #11]
 80118ee:	3301      	adds	r3, #1
 80118f0:	72fb      	strb	r3, [r7, #11]
      break;
 80118f2:	e055      	b.n	80119a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118fa:	691b      	ldr	r3, [r3, #16]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d00b      	beq.n	8011918 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011906:	691b      	ldr	r3, [r3, #16]
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	7c12      	ldrb	r2, [r2, #16]
 801190c:	f107 0108 	add.w	r1, r7, #8
 8011910:	4610      	mov	r0, r2
 8011912:	4798      	blx	r3
 8011914:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011916:	e043      	b.n	80119a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011918:	6839      	ldr	r1, [r7, #0]
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f000 fa64 	bl	8011de8 <USBD_CtlError>
        err++;
 8011920:	7afb      	ldrb	r3, [r7, #11]
 8011922:	3301      	adds	r3, #1
 8011924:	72fb      	strb	r3, [r7, #11]
      break;
 8011926:	e03b      	b.n	80119a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801192e:	695b      	ldr	r3, [r3, #20]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d00b      	beq.n	801194c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801193a:	695b      	ldr	r3, [r3, #20]
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	7c12      	ldrb	r2, [r2, #16]
 8011940:	f107 0108 	add.w	r1, r7, #8
 8011944:	4610      	mov	r0, r2
 8011946:	4798      	blx	r3
 8011948:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801194a:	e029      	b.n	80119a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801194c:	6839      	ldr	r1, [r7, #0]
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 fa4a 	bl	8011de8 <USBD_CtlError>
        err++;
 8011954:	7afb      	ldrb	r3, [r7, #11]
 8011956:	3301      	adds	r3, #1
 8011958:	72fb      	strb	r3, [r7, #11]
      break;
 801195a:	e021      	b.n	80119a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011962:	699b      	ldr	r3, [r3, #24]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d00b      	beq.n	8011980 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801196e:	699b      	ldr	r3, [r3, #24]
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	7c12      	ldrb	r2, [r2, #16]
 8011974:	f107 0108 	add.w	r1, r7, #8
 8011978:	4610      	mov	r0, r2
 801197a:	4798      	blx	r3
 801197c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801197e:	e00f      	b.n	80119a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011980:	6839      	ldr	r1, [r7, #0]
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f000 fa30 	bl	8011de8 <USBD_CtlError>
        err++;
 8011988:	7afb      	ldrb	r3, [r7, #11]
 801198a:	3301      	adds	r3, #1
 801198c:	72fb      	strb	r3, [r7, #11]
      break;
 801198e:	e007      	b.n	80119a0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011990:	6839      	ldr	r1, [r7, #0]
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f000 fa28 	bl	8011de8 <USBD_CtlError>
      err++;
 8011998:	7afb      	ldrb	r3, [r7, #11]
 801199a:	3301      	adds	r3, #1
 801199c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801199e:	bf00      	nop
    }
    break;
 80119a0:	e037      	b.n	8011a12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	7c1b      	ldrb	r3, [r3, #16]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d109      	bne.n	80119be <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119b2:	f107 0208 	add.w	r2, r7, #8
 80119b6:	4610      	mov	r0, r2
 80119b8:	4798      	blx	r3
 80119ba:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80119bc:	e029      	b.n	8011a12 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80119be:	6839      	ldr	r1, [r7, #0]
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f000 fa11 	bl	8011de8 <USBD_CtlError>
      err++;
 80119c6:	7afb      	ldrb	r3, [r7, #11]
 80119c8:	3301      	adds	r3, #1
 80119ca:	72fb      	strb	r3, [r7, #11]
    break;
 80119cc:	e021      	b.n	8011a12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	7c1b      	ldrb	r3, [r3, #16]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d10d      	bne.n	80119f2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119de:	f107 0208 	add.w	r2, r7, #8
 80119e2:	4610      	mov	r0, r2
 80119e4:	4798      	blx	r3
 80119e6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	3301      	adds	r3, #1
 80119ec:	2207      	movs	r2, #7
 80119ee:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80119f0:	e00f      	b.n	8011a12 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80119f2:	6839      	ldr	r1, [r7, #0]
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 f9f7 	bl	8011de8 <USBD_CtlError>
      err++;
 80119fa:	7afb      	ldrb	r3, [r7, #11]
 80119fc:	3301      	adds	r3, #1
 80119fe:	72fb      	strb	r3, [r7, #11]
    break;
 8011a00:	e007      	b.n	8011a12 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011a02:	6839      	ldr	r1, [r7, #0]
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 f9ef 	bl	8011de8 <USBD_CtlError>
    err++;
 8011a0a:	7afb      	ldrb	r3, [r7, #11]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	72fb      	strb	r3, [r7, #11]
    break;
 8011a10:	bf00      	nop
  }

  if (err != 0U)
 8011a12:	7afb      	ldrb	r3, [r7, #11]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d11e      	bne.n	8011a56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	88db      	ldrh	r3, [r3, #6]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d016      	beq.n	8011a4e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011a20:	893b      	ldrh	r3, [r7, #8]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00e      	beq.n	8011a44 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	88da      	ldrh	r2, [r3, #6]
 8011a2a:	893b      	ldrh	r3, [r7, #8]
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	bf28      	it	cs
 8011a30:	4613      	movcs	r3, r2
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011a36:	893b      	ldrh	r3, [r7, #8]
 8011a38:	461a      	mov	r2, r3
 8011a3a:	68f9      	ldr	r1, [r7, #12]
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f000 fa44 	bl	8011eca <USBD_CtlSendData>
 8011a42:	e009      	b.n	8011a58 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011a44:	6839      	ldr	r1, [r7, #0]
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f000 f9ce 	bl	8011de8 <USBD_CtlError>
 8011a4c:	e004      	b.n	8011a58 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 fa95 	bl	8011f7e <USBD_CtlSendStatus>
 8011a54:	e000      	b.n	8011a58 <USBD_GetDescriptor+0x2cc>
    return;
 8011a56:	bf00      	nop
    }
  }
}
 8011a58:	3710      	adds	r7, #16
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop

08011a60 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	889b      	ldrh	r3, [r3, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d131      	bne.n	8011ad6 <USBD_SetAddress+0x76>
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	88db      	ldrh	r3, [r3, #6]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d12d      	bne.n	8011ad6 <USBD_SetAddress+0x76>
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	885b      	ldrh	r3, [r3, #2]
 8011a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8011a80:	d829      	bhi.n	8011ad6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	885b      	ldrh	r3, [r3, #2]
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	2b03      	cmp	r3, #3
 8011a98:	d104      	bne.n	8011aa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011a9a:	6839      	ldr	r1, [r7, #0]
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f000 f9a3 	bl	8011de8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011aa2:	e01d      	b.n	8011ae0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	7bfa      	ldrb	r2, [r7, #15]
 8011aa8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011aac:	7bfb      	ldrb	r3, [r7, #15]
 8011aae:	4619      	mov	r1, r3
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f000 ffb7 	bl	8012a24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f000 fa61 	bl	8011f7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011abc:	7bfb      	ldrb	r3, [r7, #15]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d004      	beq.n	8011acc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2202      	movs	r2, #2
 8011ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011aca:	e009      	b.n	8011ae0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ad4:	e004      	b.n	8011ae0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011ad6:	6839      	ldr	r1, [r7, #0]
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f000 f985 	bl	8011de8 <USBD_CtlError>
  }
}
 8011ade:	bf00      	nop
 8011ae0:	bf00      	nop
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b084      	sub	sp, #16
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011af2:	2300      	movs	r3, #0
 8011af4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	885b      	ldrh	r3, [r3, #2]
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	4b4c      	ldr	r3, [pc, #304]	; (8011c30 <USBD_SetConfig+0x148>)
 8011afe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011b00:	4b4b      	ldr	r3, [pc, #300]	; (8011c30 <USBD_SetConfig+0x148>)
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d905      	bls.n	8011b14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011b08:	6839      	ldr	r1, [r7, #0]
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f000 f96c 	bl	8011de8 <USBD_CtlError>
    return USBD_FAIL;
 8011b10:	2303      	movs	r3, #3
 8011b12:	e088      	b.n	8011c26 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b1a:	b2db      	uxtb	r3, r3
 8011b1c:	2b02      	cmp	r3, #2
 8011b1e:	d002      	beq.n	8011b26 <USBD_SetConfig+0x3e>
 8011b20:	2b03      	cmp	r3, #3
 8011b22:	d025      	beq.n	8011b70 <USBD_SetConfig+0x88>
 8011b24:	e071      	b.n	8011c0a <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011b26:	4b42      	ldr	r3, [pc, #264]	; (8011c30 <USBD_SetConfig+0x148>)
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d01c      	beq.n	8011b68 <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 8011b2e:	4b40      	ldr	r3, [pc, #256]	; (8011c30 <USBD_SetConfig+0x148>)
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	461a      	mov	r2, r3
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011b38:	4b3d      	ldr	r3, [pc, #244]	; (8011c30 <USBD_SetConfig+0x148>)
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f7ff f98c 	bl	8010e5c <USBD_SetClassConfig>
 8011b44:	4603      	mov	r3, r0
 8011b46:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d004      	beq.n	8011b58 <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 8011b4e:	6839      	ldr	r1, [r7, #0]
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f000 f949 	bl	8011de8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011b56:	e065      	b.n	8011c24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 fa10 	bl	8011f7e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2203      	movs	r2, #3
 8011b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011b66:	e05d      	b.n	8011c24 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f000 fa08 	bl	8011f7e <USBD_CtlSendStatus>
    break;
 8011b6e:	e059      	b.n	8011c24 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8011b70:	4b2f      	ldr	r3, [pc, #188]	; (8011c30 <USBD_SetConfig+0x148>)
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d112      	bne.n	8011b9e <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2202      	movs	r2, #2
 8011b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8011b80:	4b2b      	ldr	r3, [pc, #172]	; (8011c30 <USBD_SetConfig+0x148>)
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	461a      	mov	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011b8a:	4b29      	ldr	r3, [pc, #164]	; (8011c30 <USBD_SetConfig+0x148>)
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	4619      	mov	r1, r3
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7ff f97f 	bl	8010e94 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f000 f9f1 	bl	8011f7e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011b9c:	e042      	b.n	8011c24 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 8011b9e:	4b24      	ldr	r3, [pc, #144]	; (8011c30 <USBD_SetConfig+0x148>)
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d02a      	beq.n	8011c02 <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7ff f96d 	bl	8010e94 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011bba:	4b1d      	ldr	r3, [pc, #116]	; (8011c30 <USBD_SetConfig+0x148>)
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011bc4:	4b1a      	ldr	r3, [pc, #104]	; (8011c30 <USBD_SetConfig+0x148>)
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	4619      	mov	r1, r3
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f7ff f946 	bl	8010e5c <USBD_SetClassConfig>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011bd4:	7bfb      	ldrb	r3, [r7, #15]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00f      	beq.n	8011bfa <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 8011bda:	6839      	ldr	r1, [r7, #0]
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 f903 	bl	8011de8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	b2db      	uxtb	r3, r3
 8011be8:	4619      	mov	r1, r3
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f7ff f952 	bl	8010e94 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2202      	movs	r2, #2
 8011bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011bf8:	e014      	b.n	8011c24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f000 f9bf 	bl	8011f7e <USBD_CtlSendStatus>
    break;
 8011c00:	e010      	b.n	8011c24 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f000 f9bb 	bl	8011f7e <USBD_CtlSendStatus>
    break;
 8011c08:	e00c      	b.n	8011c24 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 8011c0a:	6839      	ldr	r1, [r7, #0]
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f000 f8eb 	bl	8011de8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011c12:	4b07      	ldr	r3, [pc, #28]	; (8011c30 <USBD_SetConfig+0x148>)
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	4619      	mov	r1, r3
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f7ff f93b 	bl	8010e94 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8011c1e:	2303      	movs	r3, #3
 8011c20:	73fb      	strb	r3, [r7, #15]
    break;
 8011c22:	bf00      	nop
  }

  return ret;
 8011c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3710      	adds	r7, #16
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	24000390 	.word	0x24000390

08011c34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	88db      	ldrh	r3, [r3, #6]
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d004      	beq.n	8011c50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011c46:	6839      	ldr	r1, [r7, #0]
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f000 f8cd 	bl	8011de8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8011c4e:	e023      	b.n	8011c98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	2b02      	cmp	r3, #2
 8011c5a:	dc02      	bgt.n	8011c62 <USBD_GetConfig+0x2e>
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	dc03      	bgt.n	8011c68 <USBD_GetConfig+0x34>
 8011c60:	e015      	b.n	8011c8e <USBD_GetConfig+0x5a>
 8011c62:	2b03      	cmp	r3, #3
 8011c64:	d00b      	beq.n	8011c7e <USBD_GetConfig+0x4a>
 8011c66:	e012      	b.n	8011c8e <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	3308      	adds	r3, #8
 8011c72:	2201      	movs	r2, #1
 8011c74:	4619      	mov	r1, r3
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 f927 	bl	8011eca <USBD_CtlSendData>
      break;
 8011c7c:	e00c      	b.n	8011c98 <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	3304      	adds	r3, #4
 8011c82:	2201      	movs	r2, #1
 8011c84:	4619      	mov	r1, r3
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f000 f91f 	bl	8011eca <USBD_CtlSendData>
      break;
 8011c8c:	e004      	b.n	8011c98 <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 8011c8e:	6839      	ldr	r1, [r7, #0]
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 f8a9 	bl	8011de8 <USBD_CtlError>
      break;
 8011c96:	bf00      	nop
}
 8011c98:	bf00      	nop
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cb0:	b2db      	uxtb	r3, r3
 8011cb2:	3b01      	subs	r3, #1
 8011cb4:	2b02      	cmp	r3, #2
 8011cb6:	d81e      	bhi.n	8011cf6 <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	88db      	ldrh	r3, [r3, #6]
 8011cbc:	2b02      	cmp	r3, #2
 8011cbe:	d004      	beq.n	8011cca <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 8011cc0:	6839      	ldr	r1, [r7, #0]
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f000 f890 	bl	8011de8 <USBD_CtlError>
      break;
 8011cc8:	e01a      	b.n	8011d00 <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2201      	movs	r2, #1
 8011cce:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d005      	beq.n	8011ce6 <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	68db      	ldr	r3, [r3, #12]
 8011cde:	f043 0202 	orr.w	r2, r3, #2
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	330c      	adds	r3, #12
 8011cea:	2202      	movs	r2, #2
 8011cec:	4619      	mov	r1, r3
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f000 f8eb 	bl	8011eca <USBD_CtlSendData>
    break;
 8011cf4:	e004      	b.n	8011d00 <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 8011cf6:	6839      	ldr	r1, [r7, #0]
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f000 f875 	bl	8011de8 <USBD_CtlError>
    break;
 8011cfe:	bf00      	nop
  }
}
 8011d00:	bf00      	nop
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	885b      	ldrh	r3, [r3, #2]
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d106      	bne.n	8011d28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f000 f92b 	bl	8011f7e <USBD_CtlSendStatus>
  }
}
 8011d28:	bf00      	nop
 8011d2a:	3708      	adds	r7, #8
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}

08011d30 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b082      	sub	sp, #8
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d40:	b2db      	uxtb	r3, r3
 8011d42:	3b01      	subs	r3, #1
 8011d44:	2b02      	cmp	r3, #2
 8011d46:	d80b      	bhi.n	8011d60 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	885b      	ldrh	r3, [r3, #2]
 8011d4c:	2b01      	cmp	r3, #1
 8011d4e:	d10c      	bne.n	8011d6a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 f910 	bl	8011f7e <USBD_CtlSendStatus>
      }
      break;
 8011d5e:	e004      	b.n	8011d6a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011d60:	6839      	ldr	r1, [r7, #0]
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f000 f840 	bl	8011de8 <USBD_CtlError>
      break;
 8011d68:	e000      	b.n	8011d6c <USBD_ClrFeature+0x3c>
      break;
 8011d6a:	bf00      	nop
  }
}
 8011d6c:	bf00      	nop
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b084      	sub	sp, #16
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	781a      	ldrb	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	781a      	ldrb	r2, [r3, #0]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011d9e:	68f8      	ldr	r0, [r7, #12]
 8011da0:	f7ff fabd 	bl	801131e <SWAPBYTE>
 8011da4:	4603      	mov	r3, r0
 8011da6:	461a      	mov	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	3301      	adds	r3, #1
 8011db0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	3301      	adds	r3, #1
 8011db6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011db8:	68f8      	ldr	r0, [r7, #12]
 8011dba:	f7ff fab0 	bl	801131e <SWAPBYTE>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011dd2:	68f8      	ldr	r0, [r7, #12]
 8011dd4:	f7ff faa3 	bl	801131e <SWAPBYTE>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	461a      	mov	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	80da      	strh	r2, [r3, #6]
}
 8011de0:	bf00      	nop
 8011de2:	3710      	adds	r7, #16
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011df2:	2180      	movs	r1, #128	; 0x80
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 fdab 	bl	8012950 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f000 fda7 	bl	8012950 <USBD_LL_StallEP>
}
 8011e02:	bf00      	nop
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b086      	sub	sp, #24
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	60f8      	str	r0, [r7, #12]
 8011e12:	60b9      	str	r1, [r7, #8]
 8011e14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011e16:	2300      	movs	r3, #0
 8011e18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d036      	beq.n	8011e8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011e24:	6938      	ldr	r0, [r7, #16]
 8011e26:	f000 f836 	bl	8011e96 <USBD_GetLen>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	005b      	lsls	r3, r3, #1
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011e38:	7dfb      	ldrb	r3, [r7, #23]
 8011e3a:	68ba      	ldr	r2, [r7, #8]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	7812      	ldrb	r2, [r2, #0]
 8011e42:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e44:	7dfb      	ldrb	r3, [r7, #23]
 8011e46:	3301      	adds	r3, #1
 8011e48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011e4a:	7dfb      	ldrb	r3, [r7, #23]
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	4413      	add	r3, r2
 8011e50:	2203      	movs	r2, #3
 8011e52:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e54:	7dfb      	ldrb	r3, [r7, #23]
 8011e56:	3301      	adds	r3, #1
 8011e58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011e5a:	e013      	b.n	8011e84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011e5c:	7dfb      	ldrb	r3, [r7, #23]
 8011e5e:	68ba      	ldr	r2, [r7, #8]
 8011e60:	4413      	add	r3, r2
 8011e62:	693a      	ldr	r2, [r7, #16]
 8011e64:	7812      	ldrb	r2, [r2, #0]
 8011e66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	613b      	str	r3, [r7, #16]
    idx++;
 8011e6e:	7dfb      	ldrb	r3, [r7, #23]
 8011e70:	3301      	adds	r3, #1
 8011e72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011e74:	7dfb      	ldrb	r3, [r7, #23]
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	4413      	add	r3, r2
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	701a      	strb	r2, [r3, #0]
    idx++;
 8011e7e:	7dfb      	ldrb	r3, [r7, #23]
 8011e80:	3301      	adds	r3, #1
 8011e82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1e7      	bne.n	8011e5c <USBD_GetString+0x52>
 8011e8c:	e000      	b.n	8011e90 <USBD_GetString+0x86>
    return;
 8011e8e:	bf00      	nop
  }
}
 8011e90:	3718      	adds	r7, #24
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}

08011e96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011e96:	b480      	push	{r7}
 8011e98:	b085      	sub	sp, #20
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011ea6:	e005      	b.n	8011eb4 <USBD_GetLen+0x1e>
  {
    len++;
 8011ea8:	7bfb      	ldrb	r3, [r7, #15]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d1f5      	bne.n	8011ea8 <USBD_GetLen+0x12>
  }

  return len;
 8011ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3714      	adds	r7, #20
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr

08011eca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011eca:	b580      	push	{r7, lr}
 8011ecc:	b084      	sub	sp, #16
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	60f8      	str	r0, [r7, #12]
 8011ed2:	60b9      	str	r1, [r7, #8]
 8011ed4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2202      	movs	r2, #2
 8011eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	68ba      	ldr	r2, [r7, #8]
 8011eee:	2100      	movs	r1, #0
 8011ef0:	68f8      	ldr	r0, [r7, #12]
 8011ef2:	f000 fdb6 	bl	8012a62 <USBD_LL_Transmit>

  return USBD_OK;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3710      	adds	r7, #16
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	68ba      	ldr	r2, [r7, #8]
 8011f10:	2100      	movs	r1, #0
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	f000 fda5 	bl	8012a62 <USBD_LL_Transmit>

  return USBD_OK;
 8011f18:	2300      	movs	r3, #0
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011f22:	b580      	push	{r7, lr}
 8011f24:	b084      	sub	sp, #16
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	60f8      	str	r0, [r7, #12]
 8011f2a:	60b9      	str	r1, [r7, #8]
 8011f2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	2203      	movs	r2, #3
 8011f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	687a      	ldr	r2, [r7, #4]
 8011f42:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	68ba      	ldr	r2, [r7, #8]
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f000 fda9 	bl	8012aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011f52:	2300      	movs	r3, #0
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3710      	adds	r7, #16
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}

08011f5c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b084      	sub	sp, #16
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	68ba      	ldr	r2, [r7, #8]
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	68f8      	ldr	r0, [r7, #12]
 8011f70:	f000 fd98 	bl	8012aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011f74:	2300      	movs	r3, #0
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3710      	adds	r7, #16
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b082      	sub	sp, #8
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2204      	movs	r2, #4
 8011f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011f8e:	2300      	movs	r3, #0
 8011f90:	2200      	movs	r2, #0
 8011f92:	2100      	movs	r1, #0
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f000 fd64 	bl	8012a62 <USBD_LL_Transmit>

  return USBD_OK;
 8011f9a:	2300      	movs	r3, #0
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2205      	movs	r2, #5
 8011fb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	2100      	movs	r1, #0
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 fd72 	bl	8012aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011fc0:	2300      	movs	r3, #0
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3708      	adds	r7, #8
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
	...

08011fcc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b087      	sub	sp, #28
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	4613      	mov	r3, r2
 8011fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011fe2:	4b1f      	ldr	r3, [pc, #124]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8011fe4:	7a5b      	ldrb	r3, [r3, #9]
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d131      	bne.n	8012050 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011fec:	4b1c      	ldr	r3, [pc, #112]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8011fee:	7a5b      	ldrb	r3, [r3, #9]
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	4b1a      	ldr	r3, [pc, #104]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011ffa:	4b19      	ldr	r3, [pc, #100]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8011ffc:	7a5b      	ldrb	r3, [r3, #9]
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	4a17      	ldr	r2, [pc, #92]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	4413      	add	r3, r2
 8012006:	68fa      	ldr	r2, [r7, #12]
 8012008:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801200a:	4b15      	ldr	r3, [pc, #84]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 801200c:	7a5b      	ldrb	r3, [r3, #9]
 801200e:	b2db      	uxtb	r3, r3
 8012010:	461a      	mov	r2, r3
 8012012:	4b13      	ldr	r3, [pc, #76]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8012014:	4413      	add	r3, r2
 8012016:	79fa      	ldrb	r2, [r7, #7]
 8012018:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801201a:	4b11      	ldr	r3, [pc, #68]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 801201c:	7a5b      	ldrb	r3, [r3, #9]
 801201e:	b2db      	uxtb	r3, r3
 8012020:	1c5a      	adds	r2, r3, #1
 8012022:	b2d1      	uxtb	r1, r2
 8012024:	4a0e      	ldr	r2, [pc, #56]	; (8012060 <FATFS_LinkDriverEx+0x94>)
 8012026:	7251      	strb	r1, [r2, #9]
 8012028:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801202a:	7dbb      	ldrb	r3, [r7, #22]
 801202c:	3330      	adds	r3, #48	; 0x30
 801202e:	b2da      	uxtb	r2, r3
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	3301      	adds	r3, #1
 8012038:	223a      	movs	r2, #58	; 0x3a
 801203a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	3302      	adds	r3, #2
 8012040:	222f      	movs	r2, #47	; 0x2f
 8012042:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	3303      	adds	r3, #3
 8012048:	2200      	movs	r2, #0
 801204a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801204c:	2300      	movs	r3, #0
 801204e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012050:	7dfb      	ldrb	r3, [r7, #23]
}
 8012052:	4618      	mov	r0, r3
 8012054:	371c      	adds	r7, #28
 8012056:	46bd      	mov	sp, r7
 8012058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop
 8012060:	24000394 	.word	0x24000394

08012064 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801206e:	2200      	movs	r2, #0
 8012070:	6839      	ldr	r1, [r7, #0]
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f7ff ffaa 	bl	8011fcc <FATFS_LinkDriverEx>
 8012078:	4603      	mov	r3, r0
}
 801207a:	4618      	mov	r0, r3
 801207c:	3708      	adds	r7, #8
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
	...

08012084 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012088:	2200      	movs	r2, #0
 801208a:	4913      	ldr	r1, [pc, #76]	; (80120d8 <MX_USB_DEVICE_Init+0x54>)
 801208c:	4813      	ldr	r0, [pc, #76]	; (80120dc <MX_USB_DEVICE_Init+0x58>)
 801208e:	f7fe fe77 	bl	8010d80 <USBD_Init>
 8012092:	4603      	mov	r3, r0
 8012094:	2b00      	cmp	r3, #0
 8012096:	d001      	beq.n	801209c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012098:	f7ee ff98 	bl	8000fcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801209c:	4910      	ldr	r1, [pc, #64]	; (80120e0 <MX_USB_DEVICE_Init+0x5c>)
 801209e:	480f      	ldr	r0, [pc, #60]	; (80120dc <MX_USB_DEVICE_Init+0x58>)
 80120a0:	f7fe fea4 	bl	8010dec <USBD_RegisterClass>
 80120a4:	4603      	mov	r3, r0
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d001      	beq.n	80120ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80120aa:	f7ee ff8f 	bl	8000fcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80120ae:	490d      	ldr	r1, [pc, #52]	; (80120e4 <MX_USB_DEVICE_Init+0x60>)
 80120b0:	480a      	ldr	r0, [pc, #40]	; (80120dc <MX_USB_DEVICE_Init+0x58>)
 80120b2:	f7fe fdc9 	bl	8010c48 <USBD_CDC_RegisterInterface>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d001      	beq.n	80120c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80120bc:	f7ee ff86 	bl	8000fcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80120c0:	4806      	ldr	r0, [pc, #24]	; (80120dc <MX_USB_DEVICE_Init+0x58>)
 80120c2:	f7fe feb4 	bl	8010e2e <USBD_Start>
 80120c6:	4603      	mov	r3, r0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d001      	beq.n	80120d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80120cc:	f7ee ff7e 	bl	8000fcc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80120d0:	f7f4 fd84 	bl	8006bdc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80120d4:	bf00      	nop
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	24000148 	.word	0x24000148
 80120dc:	24002798 	.word	0x24002798
 80120e0:	24000030 	.word	0x24000030
 80120e4:	24000134 	.word	0x24000134

080120e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80120ec:	2200      	movs	r2, #0
 80120ee:	4905      	ldr	r1, [pc, #20]	; (8012104 <CDC_Init_FS+0x1c>)
 80120f0:	4805      	ldr	r0, [pc, #20]	; (8012108 <CDC_Init_FS+0x20>)
 80120f2:	f7fe fdbe 	bl	8010c72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80120f6:	4905      	ldr	r1, [pc, #20]	; (801210c <CDC_Init_FS+0x24>)
 80120f8:	4803      	ldr	r0, [pc, #12]	; (8012108 <CDC_Init_FS+0x20>)
 80120fa:	f7fe fdd3 	bl	8010ca4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80120fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012100:	4618      	mov	r0, r3
 8012102:	bd80      	pop	{r7, pc}
 8012104:	24003268 	.word	0x24003268
 8012108:	24002798 	.word	0x24002798
 801210c:	24002a68 	.word	0x24002a68

08012110 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012110:	b480      	push	{r7}
 8012112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012114:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012116:	4618      	mov	r0, r3
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr

08012120 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	4603      	mov	r3, r0
 8012128:	6039      	str	r1, [r7, #0]
 801212a:	71fb      	strb	r3, [r7, #7]
 801212c:	4613      	mov	r3, r2
 801212e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012130:	79fb      	ldrb	r3, [r7, #7]
 8012132:	2b23      	cmp	r3, #35	; 0x23
 8012134:	f200 808c 	bhi.w	8012250 <CDC_Control_FS+0x130>
 8012138:	a201      	add	r2, pc, #4	; (adr r2, 8012140 <CDC_Control_FS+0x20>)
 801213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801213e:	bf00      	nop
 8012140:	08012251 	.word	0x08012251
 8012144:	08012251 	.word	0x08012251
 8012148:	08012251 	.word	0x08012251
 801214c:	08012251 	.word	0x08012251
 8012150:	08012251 	.word	0x08012251
 8012154:	08012251 	.word	0x08012251
 8012158:	08012251 	.word	0x08012251
 801215c:	08012251 	.word	0x08012251
 8012160:	08012251 	.word	0x08012251
 8012164:	08012251 	.word	0x08012251
 8012168:	08012251 	.word	0x08012251
 801216c:	08012251 	.word	0x08012251
 8012170:	08012251 	.word	0x08012251
 8012174:	08012251 	.word	0x08012251
 8012178:	08012251 	.word	0x08012251
 801217c:	08012251 	.word	0x08012251
 8012180:	08012251 	.word	0x08012251
 8012184:	08012251 	.word	0x08012251
 8012188:	08012251 	.word	0x08012251
 801218c:	08012251 	.word	0x08012251
 8012190:	08012251 	.word	0x08012251
 8012194:	08012251 	.word	0x08012251
 8012198:	08012251 	.word	0x08012251
 801219c:	08012251 	.word	0x08012251
 80121a0:	08012251 	.word	0x08012251
 80121a4:	08012251 	.word	0x08012251
 80121a8:	08012251 	.word	0x08012251
 80121ac:	08012251 	.word	0x08012251
 80121b0:	08012251 	.word	0x08012251
 80121b4:	08012251 	.word	0x08012251
 80121b8:	08012251 	.word	0x08012251
 80121bc:	08012251 	.word	0x08012251
 80121c0:	080121d1 	.word	0x080121d1
 80121c4:	0801220b 	.word	0x0801220b
 80121c8:	08012251 	.word	0x08012251
 80121cc:	08012251 	.word	0x08012251
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	781a      	ldrb	r2, [r3, #0]
 80121d4:	4b22      	ldr	r3, [pc, #136]	; (8012260 <CDC_Control_FS+0x140>)
 80121d6:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	785a      	ldrb	r2, [r3, #1]
 80121dc:	4b20      	ldr	r3, [pc, #128]	; (8012260 <CDC_Control_FS+0x140>)
 80121de:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	789a      	ldrb	r2, [r3, #2]
 80121e4:	4b1e      	ldr	r3, [pc, #120]	; (8012260 <CDC_Control_FS+0x140>)
 80121e6:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	78da      	ldrb	r2, [r3, #3]
 80121ec:	4b1c      	ldr	r3, [pc, #112]	; (8012260 <CDC_Control_FS+0x140>)
 80121ee:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	791a      	ldrb	r2, [r3, #4]
 80121f4:	4b1a      	ldr	r3, [pc, #104]	; (8012260 <CDC_Control_FS+0x140>)
 80121f6:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	795a      	ldrb	r2, [r3, #5]
 80121fc:	4b18      	ldr	r3, [pc, #96]	; (8012260 <CDC_Control_FS+0x140>)
 80121fe:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	799a      	ldrb	r2, [r3, #6]
 8012204:	4b16      	ldr	r3, [pc, #88]	; (8012260 <CDC_Control_FS+0x140>)
 8012206:	719a      	strb	r2, [r3, #6]

    break;
 8012208:	e023      	b.n	8012252 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 801220a:	4b15      	ldr	r3, [pc, #84]	; (8012260 <CDC_Control_FS+0x140>)
 801220c:	781a      	ldrb	r2, [r3, #0]
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	3301      	adds	r3, #1
 8012216:	4a12      	ldr	r2, [pc, #72]	; (8012260 <CDC_Control_FS+0x140>)
 8012218:	7852      	ldrb	r2, [r2, #1]
 801221a:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	3302      	adds	r3, #2
 8012220:	4a0f      	ldr	r2, [pc, #60]	; (8012260 <CDC_Control_FS+0x140>)
 8012222:	7892      	ldrb	r2, [r2, #2]
 8012224:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	3303      	adds	r3, #3
 801222a:	4a0d      	ldr	r2, [pc, #52]	; (8012260 <CDC_Control_FS+0x140>)
 801222c:	78d2      	ldrb	r2, [r2, #3]
 801222e:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	3304      	adds	r3, #4
 8012234:	4a0a      	ldr	r2, [pc, #40]	; (8012260 <CDC_Control_FS+0x140>)
 8012236:	7912      	ldrb	r2, [r2, #4]
 8012238:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	3305      	adds	r3, #5
 801223e:	4a08      	ldr	r2, [pc, #32]	; (8012260 <CDC_Control_FS+0x140>)
 8012240:	7952      	ldrb	r2, [r2, #5]
 8012242:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	3306      	adds	r3, #6
 8012248:	4a05      	ldr	r2, [pc, #20]	; (8012260 <CDC_Control_FS+0x140>)
 801224a:	7992      	ldrb	r2, [r2, #6]
 801224c:	701a      	strb	r2, [r3, #0]

    break;
 801224e:	e000      	b.n	8012252 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012250:	bf00      	nop
  }

  return (USBD_OK);
 8012252:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012254:	4618      	mov	r0, r3
 8012256:	370c      	adds	r7, #12
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr
 8012260:	24003a68 	.word	0x24003a68

08012264 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801226e:	6879      	ldr	r1, [r7, #4]
 8012270:	4809      	ldr	r0, [pc, #36]	; (8012298 <CDC_Receive_FS+0x34>)
 8012272:	f7fe fd17 	bl	8010ca4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012276:	4808      	ldr	r0, [pc, #32]	; (8012298 <CDC_Receive_FS+0x34>)
 8012278:	f7fe fd58 	bl	8010d2c <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 8012282:	89fb      	ldrh	r3, [r7, #14]
 8012284:	4619      	mov	r1, r3
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f000 f808 	bl	801229c <CDC_Transmit_FS>
  return (USBD_OK);
 801228c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801228e:	4618      	mov	r0, r3
 8012290:	3710      	adds	r7, #16
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	24002798 	.word	0x24002798

0801229c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b084      	sub	sp, #16
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	460b      	mov	r3, r1
 80122a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80122a8:	2300      	movs	r3, #0
 80122aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80122ac:	4b0d      	ldr	r3, [pc, #52]	; (80122e4 <CDC_Transmit_FS+0x48>)
 80122ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80122b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d001      	beq.n	80122c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80122be:	2301      	movs	r3, #1
 80122c0:	e00b      	b.n	80122da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80122c2:	887b      	ldrh	r3, [r7, #2]
 80122c4:	461a      	mov	r2, r3
 80122c6:	6879      	ldr	r1, [r7, #4]
 80122c8:	4806      	ldr	r0, [pc, #24]	; (80122e4 <CDC_Transmit_FS+0x48>)
 80122ca:	f7fe fcd2 	bl	8010c72 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80122ce:	4805      	ldr	r0, [pc, #20]	; (80122e4 <CDC_Transmit_FS+0x48>)
 80122d0:	f7fe fcfc 	bl	8010ccc <USBD_CDC_TransmitPacket>
 80122d4:	4603      	mov	r3, r0
 80122d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80122d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	24002798 	.word	0x24002798

080122e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80122e8:	b480      	push	{r7}
 80122ea:	b087      	sub	sp, #28
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	60f8      	str	r0, [r7, #12]
 80122f0:	60b9      	str	r1, [r7, #8]
 80122f2:	4613      	mov	r3, r2
 80122f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80122f6:	2300      	movs	r3, #0
 80122f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80122fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80122fe:	4618      	mov	r0, r3
 8012300:	371c      	adds	r7, #28
 8012302:	46bd      	mov	sp, r7
 8012304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012308:	4770      	bx	lr
	...

0801230c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801230c:	b480      	push	{r7}
 801230e:	b083      	sub	sp, #12
 8012310:	af00      	add	r7, sp, #0
 8012312:	4603      	mov	r3, r0
 8012314:	6039      	str	r1, [r7, #0]
 8012316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	2212      	movs	r2, #18
 801231c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801231e:	4b03      	ldr	r3, [pc, #12]	; (801232c <USBD_FS_DeviceDescriptor+0x20>)
}
 8012320:	4618      	mov	r0, r3
 8012322:	370c      	adds	r7, #12
 8012324:	46bd      	mov	sp, r7
 8012326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232a:	4770      	bx	lr
 801232c:	24000164 	.word	0x24000164

08012330 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012330:	b480      	push	{r7}
 8012332:	b083      	sub	sp, #12
 8012334:	af00      	add	r7, sp, #0
 8012336:	4603      	mov	r3, r0
 8012338:	6039      	str	r1, [r7, #0]
 801233a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	2204      	movs	r2, #4
 8012340:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012342:	4b03      	ldr	r3, [pc, #12]	; (8012350 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012344:	4618      	mov	r0, r3
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr
 8012350:	24000178 	.word	0x24000178

08012354 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	4603      	mov	r3, r0
 801235c:	6039      	str	r1, [r7, #0]
 801235e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012360:	79fb      	ldrb	r3, [r7, #7]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d105      	bne.n	8012372 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012366:	683a      	ldr	r2, [r7, #0]
 8012368:	4907      	ldr	r1, [pc, #28]	; (8012388 <USBD_FS_ProductStrDescriptor+0x34>)
 801236a:	4808      	ldr	r0, [pc, #32]	; (801238c <USBD_FS_ProductStrDescriptor+0x38>)
 801236c:	f7ff fd4d 	bl	8011e0a <USBD_GetString>
 8012370:	e004      	b.n	801237c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012372:	683a      	ldr	r2, [r7, #0]
 8012374:	4904      	ldr	r1, [pc, #16]	; (8012388 <USBD_FS_ProductStrDescriptor+0x34>)
 8012376:	4805      	ldr	r0, [pc, #20]	; (801238c <USBD_FS_ProductStrDescriptor+0x38>)
 8012378:	f7ff fd47 	bl	8011e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 801237c:	4b02      	ldr	r3, [pc, #8]	; (8012388 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801237e:	4618      	mov	r0, r3
 8012380:	3708      	adds	r7, #8
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	24003a70 	.word	0x24003a70
 801238c:	08015478 	.word	0x08015478

08012390 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	4603      	mov	r3, r0
 8012398:	6039      	str	r1, [r7, #0]
 801239a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801239c:	683a      	ldr	r2, [r7, #0]
 801239e:	4904      	ldr	r1, [pc, #16]	; (80123b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80123a0:	4804      	ldr	r0, [pc, #16]	; (80123b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80123a2:	f7ff fd32 	bl	8011e0a <USBD_GetString>
  return USBD_StrDesc;
 80123a6:	4b02      	ldr	r3, [pc, #8]	; (80123b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	24003a70 	.word	0x24003a70
 80123b4:	08015490 	.word	0x08015490

080123b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	4603      	mov	r3, r0
 80123c0:	6039      	str	r1, [r7, #0]
 80123c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	221a      	movs	r2, #26
 80123c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80123ca:	f000 f843 	bl	8012454 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80123ce:	4b02      	ldr	r3, [pc, #8]	; (80123d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	2400017c 	.word	0x2400017c

080123dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	4603      	mov	r3, r0
 80123e4:	6039      	str	r1, [r7, #0]
 80123e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80123e8:	79fb      	ldrb	r3, [r7, #7]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d105      	bne.n	80123fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80123ee:	683a      	ldr	r2, [r7, #0]
 80123f0:	4907      	ldr	r1, [pc, #28]	; (8012410 <USBD_FS_ConfigStrDescriptor+0x34>)
 80123f2:	4808      	ldr	r0, [pc, #32]	; (8012414 <USBD_FS_ConfigStrDescriptor+0x38>)
 80123f4:	f7ff fd09 	bl	8011e0a <USBD_GetString>
 80123f8:	e004      	b.n	8012404 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80123fa:	683a      	ldr	r2, [r7, #0]
 80123fc:	4904      	ldr	r1, [pc, #16]	; (8012410 <USBD_FS_ConfigStrDescriptor+0x34>)
 80123fe:	4805      	ldr	r0, [pc, #20]	; (8012414 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012400:	f7ff fd03 	bl	8011e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012404:	4b02      	ldr	r3, [pc, #8]	; (8012410 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012406:	4618      	mov	r0, r3
 8012408:	3708      	adds	r7, #8
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	24003a70 	.word	0x24003a70
 8012414:	080154a4 	.word	0x080154a4

08012418 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	4603      	mov	r3, r0
 8012420:	6039      	str	r1, [r7, #0]
 8012422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012424:	79fb      	ldrb	r3, [r7, #7]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d105      	bne.n	8012436 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801242a:	683a      	ldr	r2, [r7, #0]
 801242c:	4907      	ldr	r1, [pc, #28]	; (801244c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801242e:	4808      	ldr	r0, [pc, #32]	; (8012450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012430:	f7ff fceb 	bl	8011e0a <USBD_GetString>
 8012434:	e004      	b.n	8012440 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012436:	683a      	ldr	r2, [r7, #0]
 8012438:	4904      	ldr	r1, [pc, #16]	; (801244c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801243a:	4805      	ldr	r0, [pc, #20]	; (8012450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801243c:	f7ff fce5 	bl	8011e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012440:	4b02      	ldr	r3, [pc, #8]	; (801244c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012442:	4618      	mov	r0, r3
 8012444:	3708      	adds	r7, #8
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}
 801244a:	bf00      	nop
 801244c:	24003a70 	.word	0x24003a70
 8012450:	080154b0 	.word	0x080154b0

08012454 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b084      	sub	sp, #16
 8012458:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801245a:	4b0f      	ldr	r3, [pc, #60]	; (8012498 <Get_SerialNum+0x44>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012460:	4b0e      	ldr	r3, [pc, #56]	; (801249c <Get_SerialNum+0x48>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012466:	4b0e      	ldr	r3, [pc, #56]	; (80124a0 <Get_SerialNum+0x4c>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801246c:	68fa      	ldr	r2, [r7, #12]
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	4413      	add	r3, r2
 8012472:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d009      	beq.n	801248e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801247a:	2208      	movs	r2, #8
 801247c:	4909      	ldr	r1, [pc, #36]	; (80124a4 <Get_SerialNum+0x50>)
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	f000 f814 	bl	80124ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012484:	2204      	movs	r2, #4
 8012486:	4908      	ldr	r1, [pc, #32]	; (80124a8 <Get_SerialNum+0x54>)
 8012488:	68b8      	ldr	r0, [r7, #8]
 801248a:	f000 f80f 	bl	80124ac <IntToUnicode>
  }
}
 801248e:	bf00      	nop
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	1ff1e800 	.word	0x1ff1e800
 801249c:	1ff1e804 	.word	0x1ff1e804
 80124a0:	1ff1e808 	.word	0x1ff1e808
 80124a4:	2400017e 	.word	0x2400017e
 80124a8:	2400018e 	.word	0x2400018e

080124ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b087      	sub	sp, #28
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60f8      	str	r0, [r7, #12]
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	4613      	mov	r3, r2
 80124b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80124ba:	2300      	movs	r3, #0
 80124bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80124be:	2300      	movs	r3, #0
 80124c0:	75fb      	strb	r3, [r7, #23]
 80124c2:	e027      	b.n	8012514 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	0f1b      	lsrs	r3, r3, #28
 80124c8:	2b09      	cmp	r3, #9
 80124ca:	d80b      	bhi.n	80124e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	0f1b      	lsrs	r3, r3, #28
 80124d0:	b2da      	uxtb	r2, r3
 80124d2:	7dfb      	ldrb	r3, [r7, #23]
 80124d4:	005b      	lsls	r3, r3, #1
 80124d6:	4619      	mov	r1, r3
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	440b      	add	r3, r1
 80124dc:	3230      	adds	r2, #48	; 0x30
 80124de:	b2d2      	uxtb	r2, r2
 80124e0:	701a      	strb	r2, [r3, #0]
 80124e2:	e00a      	b.n	80124fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	0f1b      	lsrs	r3, r3, #28
 80124e8:	b2da      	uxtb	r2, r3
 80124ea:	7dfb      	ldrb	r3, [r7, #23]
 80124ec:	005b      	lsls	r3, r3, #1
 80124ee:	4619      	mov	r1, r3
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	440b      	add	r3, r1
 80124f4:	3237      	adds	r2, #55	; 0x37
 80124f6:	b2d2      	uxtb	r2, r2
 80124f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	011b      	lsls	r3, r3, #4
 80124fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012500:	7dfb      	ldrb	r3, [r7, #23]
 8012502:	005b      	lsls	r3, r3, #1
 8012504:	3301      	adds	r3, #1
 8012506:	68ba      	ldr	r2, [r7, #8]
 8012508:	4413      	add	r3, r2
 801250a:	2200      	movs	r2, #0
 801250c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801250e:	7dfb      	ldrb	r3, [r7, #23]
 8012510:	3301      	adds	r3, #1
 8012512:	75fb      	strb	r3, [r7, #23]
 8012514:	7dfa      	ldrb	r2, [r7, #23]
 8012516:	79fb      	ldrb	r3, [r7, #7]
 8012518:	429a      	cmp	r2, r3
 801251a:	d3d3      	bcc.n	80124c4 <IntToUnicode+0x18>
  }
}
 801251c:	bf00      	nop
 801251e:	bf00      	nop
 8012520:	371c      	adds	r7, #28
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
	...

0801252c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b0b8      	sub	sp, #224	; 0xe0
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012534:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012538:	2200      	movs	r2, #0
 801253a:	601a      	str	r2, [r3, #0]
 801253c:	605a      	str	r2, [r3, #4]
 801253e:	609a      	str	r2, [r3, #8]
 8012540:	60da      	str	r2, [r3, #12]
 8012542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012544:	f107 0310 	add.w	r3, r7, #16
 8012548:	22bc      	movs	r2, #188	; 0xbc
 801254a:	2100      	movs	r1, #0
 801254c:	4618      	mov	r0, r3
 801254e:	f000 fb43 	bl	8012bd8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	4a2a      	ldr	r2, [pc, #168]	; (8012600 <HAL_PCD_MspInit+0xd4>)
 8012558:	4293      	cmp	r3, r2
 801255a:	d14c      	bne.n	80125f6 <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801255c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012560:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012562:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8012566:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801256a:	f107 0310 	add.w	r3, r7, #16
 801256e:	4618      	mov	r0, r3
 8012570:	f7f5 fb22 	bl	8007bb8 <HAL_RCCEx_PeriphCLKConfig>
 8012574:	4603      	mov	r3, r0
 8012576:	2b00      	cmp	r3, #0
 8012578:	d001      	beq.n	801257e <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 801257a:	f7ee fd27 	bl	8000fcc <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801257e:	4b21      	ldr	r3, [pc, #132]	; (8012604 <HAL_PCD_MspInit+0xd8>)
 8012580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012584:	4a1f      	ldr	r2, [pc, #124]	; (8012604 <HAL_PCD_MspInit+0xd8>)
 8012586:	f043 0301 	orr.w	r3, r3, #1
 801258a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801258e:	4b1d      	ldr	r3, [pc, #116]	; (8012604 <HAL_PCD_MspInit+0xd8>)
 8012590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012594:	f003 0301 	and.w	r3, r3, #1
 8012598:	60fb      	str	r3, [r7, #12]
 801259a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801259c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80125a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80125a4:	2302      	movs	r3, #2
 80125a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125aa:	2300      	movs	r3, #0
 80125ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80125b0:	2300      	movs	r3, #0
 80125b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80125b6:	230a      	movs	r3, #10
 80125b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80125bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80125c0:	4619      	mov	r1, r3
 80125c2:	4811      	ldr	r0, [pc, #68]	; (8012608 <HAL_PCD_MspInit+0xdc>)
 80125c4:	f7f1 ff30 	bl	8004428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80125c8:	4b0e      	ldr	r3, [pc, #56]	; (8012604 <HAL_PCD_MspInit+0xd8>)
 80125ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80125ce:	4a0d      	ldr	r2, [pc, #52]	; (8012604 <HAL_PCD_MspInit+0xd8>)
 80125d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80125d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80125d8:	4b0a      	ldr	r3, [pc, #40]	; (8012604 <HAL_PCD_MspInit+0xd8>)
 80125da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80125de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80125e2:	60bb      	str	r3, [r7, #8]
 80125e4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80125e6:	2200      	movs	r2, #0
 80125e8:	2100      	movs	r1, #0
 80125ea:	2065      	movs	r0, #101	; 0x65
 80125ec:	f7ef fc39 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80125f0:	2065      	movs	r0, #101	; 0x65
 80125f2:	f7ef fc50 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80125f6:	bf00      	nop
 80125f8:	37e0      	adds	r7, #224	; 0xe0
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	40080000 	.word	0x40080000
 8012604:	58024400 	.word	0x58024400
 8012608:	58020000 	.word	0x58020000

0801260c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012620:	4619      	mov	r1, r3
 8012622:	4610      	mov	r0, r2
 8012624:	f7fe fc4e 	bl	8010ec4 <USBD_LL_SetupStage>
}
 8012628:	bf00      	nop
 801262a:	3708      	adds	r7, #8
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	460b      	mov	r3, r1
 801263a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012642:	78fa      	ldrb	r2, [r7, #3]
 8012644:	6879      	ldr	r1, [r7, #4]
 8012646:	4613      	mov	r3, r2
 8012648:	00db      	lsls	r3, r3, #3
 801264a:	1a9b      	subs	r3, r3, r2
 801264c:	009b      	lsls	r3, r3, #2
 801264e:	440b      	add	r3, r1
 8012650:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	78fb      	ldrb	r3, [r7, #3]
 8012658:	4619      	mov	r1, r3
 801265a:	f7fe fc88 	bl	8010f6e <USBD_LL_DataOutStage>
}
 801265e:	bf00      	nop
 8012660:	3708      	adds	r7, #8
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012666:	b580      	push	{r7, lr}
 8012668:	b082      	sub	sp, #8
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
 801266e:	460b      	mov	r3, r1
 8012670:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012678:	78fa      	ldrb	r2, [r7, #3]
 801267a:	6879      	ldr	r1, [r7, #4]
 801267c:	4613      	mov	r3, r2
 801267e:	00db      	lsls	r3, r3, #3
 8012680:	1a9b      	subs	r3, r3, r2
 8012682:	009b      	lsls	r3, r3, #2
 8012684:	440b      	add	r3, r1
 8012686:	3348      	adds	r3, #72	; 0x48
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	78fb      	ldrb	r3, [r7, #3]
 801268c:	4619      	mov	r1, r3
 801268e:	f7fe fcd3 	bl	8011038 <USBD_LL_DataInStage>
}
 8012692:	bf00      	nop
 8012694:	3708      	adds	r7, #8
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}

0801269a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801269a:	b580      	push	{r7, lr}
 801269c:	b082      	sub	sp, #8
 801269e:	af00      	add	r7, sp, #0
 80126a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fe fddc 	bl	8011266 <USBD_LL_SOF>
}
 80126ae:	bf00      	nop
 80126b0:	3708      	adds	r7, #8
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126b6:	b580      	push	{r7, lr}
 80126b8:	b084      	sub	sp, #16
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80126be:	2301      	movs	r3, #1
 80126c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	68db      	ldr	r3, [r3, #12]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d102      	bne.n	80126d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80126ca:	2300      	movs	r3, #0
 80126cc:	73fb      	strb	r3, [r7, #15]
 80126ce:	e008      	b.n	80126e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	68db      	ldr	r3, [r3, #12]
 80126d4:	2b02      	cmp	r3, #2
 80126d6:	d102      	bne.n	80126de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80126d8:	2301      	movs	r3, #1
 80126da:	73fb      	strb	r3, [r7, #15]
 80126dc:	e001      	b.n	80126e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80126de:	f7ee fc75 	bl	8000fcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126e8:	7bfa      	ldrb	r2, [r7, #15]
 80126ea:	4611      	mov	r1, r2
 80126ec:	4618      	mov	r0, r3
 80126ee:	f7fe fd7c 	bl	80111ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7fe fd35 	bl	8011168 <USBD_LL_Reset>
}
 80126fe:	bf00      	nop
 8012700:	3710      	adds	r7, #16
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
	...

08012708 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012716:	4618      	mov	r0, r3
 8012718:	f7fe fd77 	bl	801120a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	6812      	ldr	r2, [r2, #0]
 801272a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801272e:	f043 0301 	orr.w	r3, r3, #1
 8012732:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	6a1b      	ldr	r3, [r3, #32]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d005      	beq.n	8012748 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801273c:	4b04      	ldr	r3, [pc, #16]	; (8012750 <HAL_PCD_SuspendCallback+0x48>)
 801273e:	691b      	ldr	r3, [r3, #16]
 8012740:	4a03      	ldr	r2, [pc, #12]	; (8012750 <HAL_PCD_SuspendCallback+0x48>)
 8012742:	f043 0306 	orr.w	r3, r3, #6
 8012746:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012748:	bf00      	nop
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	e000ed00 	.word	0xe000ed00

08012754 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012762:	4618      	mov	r0, r3
 8012764:	f7fe fd67 	bl	8011236 <USBD_LL_Resume>
}
 8012768:	bf00      	nop
 801276a:	3708      	adds	r7, #8
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}

08012770 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	460b      	mov	r3, r1
 801277a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012782:	78fa      	ldrb	r2, [r7, #3]
 8012784:	4611      	mov	r1, r2
 8012786:	4618      	mov	r0, r3
 8012788:	f7fe fd95 	bl	80112b6 <USBD_LL_IsoOUTIncomplete>
}
 801278c:	bf00      	nop
 801278e:	3708      	adds	r7, #8
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	460b      	mov	r3, r1
 801279e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127a6:	78fa      	ldrb	r2, [r7, #3]
 80127a8:	4611      	mov	r1, r2
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fe fd76 	bl	801129c <USBD_LL_IsoINIncomplete>
}
 80127b0:	bf00      	nop
 80127b2:	3708      	adds	r7, #8
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}

080127b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fe fd82 	bl	80112d0 <USBD_LL_DevConnected>
}
 80127cc:	bf00      	nop
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fe fd7f 	bl	80112e6 <USBD_LL_DevDisconnected>
}
 80127e8:	bf00      	nop
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d13e      	bne.n	801287e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012800:	4a21      	ldr	r2, [pc, #132]	; (8012888 <USBD_LL_Init+0x98>)
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	4a1f      	ldr	r2, [pc, #124]	; (8012888 <USBD_LL_Init+0x98>)
 801280c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012810:	4b1d      	ldr	r3, [pc, #116]	; (8012888 <USBD_LL_Init+0x98>)
 8012812:	4a1e      	ldr	r2, [pc, #120]	; (801288c <USBD_LL_Init+0x9c>)
 8012814:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012816:	4b1c      	ldr	r3, [pc, #112]	; (8012888 <USBD_LL_Init+0x98>)
 8012818:	2209      	movs	r2, #9
 801281a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801281c:	4b1a      	ldr	r3, [pc, #104]	; (8012888 <USBD_LL_Init+0x98>)
 801281e:	2202      	movs	r2, #2
 8012820:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012822:	4b19      	ldr	r3, [pc, #100]	; (8012888 <USBD_LL_Init+0x98>)
 8012824:	2200      	movs	r2, #0
 8012826:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012828:	4b17      	ldr	r3, [pc, #92]	; (8012888 <USBD_LL_Init+0x98>)
 801282a:	2202      	movs	r2, #2
 801282c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801282e:	4b16      	ldr	r3, [pc, #88]	; (8012888 <USBD_LL_Init+0x98>)
 8012830:	2200      	movs	r2, #0
 8012832:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012834:	4b14      	ldr	r3, [pc, #80]	; (8012888 <USBD_LL_Init+0x98>)
 8012836:	2200      	movs	r2, #0
 8012838:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801283a:	4b13      	ldr	r3, [pc, #76]	; (8012888 <USBD_LL_Init+0x98>)
 801283c:	2200      	movs	r2, #0
 801283e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012840:	4b11      	ldr	r3, [pc, #68]	; (8012888 <USBD_LL_Init+0x98>)
 8012842:	2200      	movs	r2, #0
 8012844:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012846:	4b10      	ldr	r3, [pc, #64]	; (8012888 <USBD_LL_Init+0x98>)
 8012848:	2200      	movs	r2, #0
 801284a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801284c:	4b0e      	ldr	r3, [pc, #56]	; (8012888 <USBD_LL_Init+0x98>)
 801284e:	2200      	movs	r2, #0
 8012850:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012852:	480d      	ldr	r0, [pc, #52]	; (8012888 <USBD_LL_Init+0x98>)
 8012854:	f7f2 ff8c 	bl	8005770 <HAL_PCD_Init>
 8012858:	4603      	mov	r3, r0
 801285a:	2b00      	cmp	r3, #0
 801285c:	d001      	beq.n	8012862 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801285e:	f7ee fbb5 	bl	8000fcc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012862:	2180      	movs	r1, #128	; 0x80
 8012864:	4808      	ldr	r0, [pc, #32]	; (8012888 <USBD_LL_Init+0x98>)
 8012866:	f7f4 f91e 	bl	8006aa6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801286a:	2240      	movs	r2, #64	; 0x40
 801286c:	2100      	movs	r1, #0
 801286e:	4806      	ldr	r0, [pc, #24]	; (8012888 <USBD_LL_Init+0x98>)
 8012870:	f7f4 f8d2 	bl	8006a18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012874:	2280      	movs	r2, #128	; 0x80
 8012876:	2101      	movs	r1, #1
 8012878:	4803      	ldr	r0, [pc, #12]	; (8012888 <USBD_LL_Init+0x98>)
 801287a:	f7f4 f8cd 	bl	8006a18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801287e:	2300      	movs	r3, #0
}
 8012880:	4618      	mov	r0, r3
 8012882:	3708      	adds	r7, #8
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	24003c70 	.word	0x24003c70
 801288c:	40080000 	.word	0x40080000

08012890 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012898:	2300      	movs	r3, #0
 801289a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801289c:	2300      	movs	r3, #0
 801289e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7f3 f886 	bl	80059b8 <HAL_PCD_Start>
 80128ac:	4603      	mov	r3, r0
 80128ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128b0:	7bfb      	ldrb	r3, [r7, #15]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f000 f92a 	bl	8012b0c <USBD_Get_USB_Status>
 80128b8:	4603      	mov	r3, r0
 80128ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3710      	adds	r7, #16
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}

080128c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80128c6:	b580      	push	{r7, lr}
 80128c8:	b084      	sub	sp, #16
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	6078      	str	r0, [r7, #4]
 80128ce:	4608      	mov	r0, r1
 80128d0:	4611      	mov	r1, r2
 80128d2:	461a      	mov	r2, r3
 80128d4:	4603      	mov	r3, r0
 80128d6:	70fb      	strb	r3, [r7, #3]
 80128d8:	460b      	mov	r3, r1
 80128da:	70bb      	strb	r3, [r7, #2]
 80128dc:	4613      	mov	r3, r2
 80128de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128e0:	2300      	movs	r3, #0
 80128e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128e4:	2300      	movs	r3, #0
 80128e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80128ee:	78bb      	ldrb	r3, [r7, #2]
 80128f0:	883a      	ldrh	r2, [r7, #0]
 80128f2:	78f9      	ldrb	r1, [r7, #3]
 80128f4:	f7f3 fc97 	bl	8006226 <HAL_PCD_EP_Open>
 80128f8:	4603      	mov	r3, r0
 80128fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128fc:	7bfb      	ldrb	r3, [r7, #15]
 80128fe:	4618      	mov	r0, r3
 8012900:	f000 f904 	bl	8012b0c <USBD_Get_USB_Status>
 8012904:	4603      	mov	r3, r0
 8012906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012908:	7bbb      	ldrb	r3, [r7, #14]
}
 801290a:	4618      	mov	r0, r3
 801290c:	3710      	adds	r7, #16
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}

08012912 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012912:	b580      	push	{r7, lr}
 8012914:	b084      	sub	sp, #16
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
 801291a:	460b      	mov	r3, r1
 801291c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801291e:	2300      	movs	r3, #0
 8012920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012922:	2300      	movs	r3, #0
 8012924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801292c:	78fa      	ldrb	r2, [r7, #3]
 801292e:	4611      	mov	r1, r2
 8012930:	4618      	mov	r0, r3
 8012932:	f7f3 fce0 	bl	80062f6 <HAL_PCD_EP_Close>
 8012936:	4603      	mov	r3, r0
 8012938:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801293a:	7bfb      	ldrb	r3, [r7, #15]
 801293c:	4618      	mov	r0, r3
 801293e:	f000 f8e5 	bl	8012b0c <USBD_Get_USB_Status>
 8012942:	4603      	mov	r3, r0
 8012944:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012946:	7bbb      	ldrb	r3, [r7, #14]
}
 8012948:	4618      	mov	r0, r3
 801294a:	3710      	adds	r7, #16
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	460b      	mov	r3, r1
 801295a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801295c:	2300      	movs	r3, #0
 801295e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012960:	2300      	movs	r3, #0
 8012962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801296a:	78fa      	ldrb	r2, [r7, #3]
 801296c:	4611      	mov	r1, r2
 801296e:	4618      	mov	r0, r3
 8012970:	f7f3 fdb8 	bl	80064e4 <HAL_PCD_EP_SetStall>
 8012974:	4603      	mov	r3, r0
 8012976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012978:	7bfb      	ldrb	r3, [r7, #15]
 801297a:	4618      	mov	r0, r3
 801297c:	f000 f8c6 	bl	8012b0c <USBD_Get_USB_Status>
 8012980:	4603      	mov	r3, r0
 8012982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012984:	7bbb      	ldrb	r3, [r7, #14]
}
 8012986:	4618      	mov	r0, r3
 8012988:	3710      	adds	r7, #16
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}

0801298e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801298e:	b580      	push	{r7, lr}
 8012990:	b084      	sub	sp, #16
 8012992:	af00      	add	r7, sp, #0
 8012994:	6078      	str	r0, [r7, #4]
 8012996:	460b      	mov	r3, r1
 8012998:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801299a:	2300      	movs	r3, #0
 801299c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801299e:	2300      	movs	r3, #0
 80129a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129a8:	78fa      	ldrb	r2, [r7, #3]
 80129aa:	4611      	mov	r1, r2
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f3 fdfd 	bl	80065ac <HAL_PCD_EP_ClrStall>
 80129b2:	4603      	mov	r3, r0
 80129b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129b6:	7bfb      	ldrb	r3, [r7, #15]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f000 f8a7 	bl	8012b0c <USBD_Get_USB_Status>
 80129be:	4603      	mov	r3, r0
 80129c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80129c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3710      	adds	r7, #16
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}

080129cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b085      	sub	sp, #20
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	460b      	mov	r3, r1
 80129d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80129e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	da0b      	bge.n	8012a00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80129e8:	78fb      	ldrb	r3, [r7, #3]
 80129ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80129ee:	68f9      	ldr	r1, [r7, #12]
 80129f0:	4613      	mov	r3, r2
 80129f2:	00db      	lsls	r3, r3, #3
 80129f4:	1a9b      	subs	r3, r3, r2
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	440b      	add	r3, r1
 80129fa:	333e      	adds	r3, #62	; 0x3e
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	e00b      	b.n	8012a18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012a00:	78fb      	ldrb	r3, [r7, #3]
 8012a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a06:	68f9      	ldr	r1, [r7, #12]
 8012a08:	4613      	mov	r3, r2
 8012a0a:	00db      	lsls	r3, r3, #3
 8012a0c:	1a9b      	subs	r3, r3, r2
 8012a0e:	009b      	lsls	r3, r3, #2
 8012a10:	440b      	add	r3, r1
 8012a12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3714      	adds	r7, #20
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr

08012a24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a30:	2300      	movs	r3, #0
 8012a32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a34:	2300      	movs	r3, #0
 8012a36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a3e:	78fa      	ldrb	r2, [r7, #3]
 8012a40:	4611      	mov	r1, r2
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7f3 fbca 	bl	80061dc <HAL_PCD_SetAddress>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a4c:	7bfb      	ldrb	r3, [r7, #15]
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f000 f85c 	bl	8012b0c <USBD_Get_USB_Status>
 8012a54:	4603      	mov	r3, r0
 8012a56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a58:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3710      	adds	r7, #16
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}

08012a62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012a62:	b580      	push	{r7, lr}
 8012a64:	b086      	sub	sp, #24
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	60f8      	str	r0, [r7, #12]
 8012a6a:	607a      	str	r2, [r7, #4]
 8012a6c:	603b      	str	r3, [r7, #0]
 8012a6e:	460b      	mov	r3, r1
 8012a70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a72:	2300      	movs	r3, #0
 8012a74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a76:	2300      	movs	r3, #0
 8012a78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012a80:	7af9      	ldrb	r1, [r7, #11]
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	f7f3 fce3 	bl	8006450 <HAL_PCD_EP_Transmit>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a8e:	7dfb      	ldrb	r3, [r7, #23]
 8012a90:	4618      	mov	r0, r3
 8012a92:	f000 f83b 	bl	8012b0c <USBD_Get_USB_Status>
 8012a96:	4603      	mov	r3, r0
 8012a98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012a9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3718      	adds	r7, #24
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b086      	sub	sp, #24
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	60f8      	str	r0, [r7, #12]
 8012aac:	607a      	str	r2, [r7, #4]
 8012aae:	603b      	str	r3, [r7, #0]
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012ac2:	7af9      	ldrb	r1, [r7, #11]
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	687a      	ldr	r2, [r7, #4]
 8012ac8:	f7f3 fc5f 	bl	800638a <HAL_PCD_EP_Receive>
 8012acc:	4603      	mov	r3, r0
 8012ace:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ad0:	7dfb      	ldrb	r3, [r7, #23]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f000 f81a 	bl	8012b0c <USBD_Get_USB_Status>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012adc:	7dbb      	ldrb	r3, [r7, #22]
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3718      	adds	r7, #24
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}

08012ae6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ae6:	b580      	push	{r7, lr}
 8012ae8:	b082      	sub	sp, #8
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
 8012aee:	460b      	mov	r3, r1
 8012af0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012af8:	78fa      	ldrb	r2, [r7, #3]
 8012afa:	4611      	mov	r1, r2
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7f3 fc8f 	bl	8006420 <HAL_PCD_EP_GetRxCount>
 8012b02:	4603      	mov	r3, r0
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3708      	adds	r7, #8
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b085      	sub	sp, #20
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	4603      	mov	r3, r0
 8012b14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b16:	2300      	movs	r3, #0
 8012b18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012b1a:	79fb      	ldrb	r3, [r7, #7]
 8012b1c:	2b03      	cmp	r3, #3
 8012b1e:	d817      	bhi.n	8012b50 <USBD_Get_USB_Status+0x44>
 8012b20:	a201      	add	r2, pc, #4	; (adr r2, 8012b28 <USBD_Get_USB_Status+0x1c>)
 8012b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b26:	bf00      	nop
 8012b28:	08012b39 	.word	0x08012b39
 8012b2c:	08012b3f 	.word	0x08012b3f
 8012b30:	08012b45 	.word	0x08012b45
 8012b34:	08012b4b 	.word	0x08012b4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b3c:	e00b      	b.n	8012b56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b3e:	2303      	movs	r3, #3
 8012b40:	73fb      	strb	r3, [r7, #15]
    break;
 8012b42:	e008      	b.n	8012b56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b44:	2301      	movs	r3, #1
 8012b46:	73fb      	strb	r3, [r7, #15]
    break;
 8012b48:	e005      	b.n	8012b56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b4a:	2303      	movs	r3, #3
 8012b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8012b4e:	e002      	b.n	8012b56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012b50:	2303      	movs	r3, #3
 8012b52:	73fb      	strb	r3, [r7, #15]
    break;
 8012b54:	bf00      	nop
  }
  return usb_status;
 8012b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3714      	adds	r7, #20
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <__errno>:
 8012b64:	4b01      	ldr	r3, [pc, #4]	; (8012b6c <__errno+0x8>)
 8012b66:	6818      	ldr	r0, [r3, #0]
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	24000198 	.word	0x24000198

08012b70 <__libc_init_array>:
 8012b70:	b570      	push	{r4, r5, r6, lr}
 8012b72:	4d0d      	ldr	r5, [pc, #52]	; (8012ba8 <__libc_init_array+0x38>)
 8012b74:	4c0d      	ldr	r4, [pc, #52]	; (8012bac <__libc_init_array+0x3c>)
 8012b76:	1b64      	subs	r4, r4, r5
 8012b78:	10a4      	asrs	r4, r4, #2
 8012b7a:	2600      	movs	r6, #0
 8012b7c:	42a6      	cmp	r6, r4
 8012b7e:	d109      	bne.n	8012b94 <__libc_init_array+0x24>
 8012b80:	4d0b      	ldr	r5, [pc, #44]	; (8012bb0 <__libc_init_array+0x40>)
 8012b82:	4c0c      	ldr	r4, [pc, #48]	; (8012bb4 <__libc_init_array+0x44>)
 8012b84:	f002 fc6a 	bl	801545c <_init>
 8012b88:	1b64      	subs	r4, r4, r5
 8012b8a:	10a4      	asrs	r4, r4, #2
 8012b8c:	2600      	movs	r6, #0
 8012b8e:	42a6      	cmp	r6, r4
 8012b90:	d105      	bne.n	8012b9e <__libc_init_array+0x2e>
 8012b92:	bd70      	pop	{r4, r5, r6, pc}
 8012b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b98:	4798      	blx	r3
 8012b9a:	3601      	adds	r6, #1
 8012b9c:	e7ee      	b.n	8012b7c <__libc_init_array+0xc>
 8012b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ba2:	4798      	blx	r3
 8012ba4:	3601      	adds	r6, #1
 8012ba6:	e7f2      	b.n	8012b8e <__libc_init_array+0x1e>
 8012ba8:	080158fc 	.word	0x080158fc
 8012bac:	080158fc 	.word	0x080158fc
 8012bb0:	080158fc 	.word	0x080158fc
 8012bb4:	08015900 	.word	0x08015900

08012bb8 <malloc>:
 8012bb8:	4b02      	ldr	r3, [pc, #8]	; (8012bc4 <malloc+0xc>)
 8012bba:	4601      	mov	r1, r0
 8012bbc:	6818      	ldr	r0, [r3, #0]
 8012bbe:	f000 b863 	b.w	8012c88 <_malloc_r>
 8012bc2:	bf00      	nop
 8012bc4:	24000198 	.word	0x24000198

08012bc8 <free>:
 8012bc8:	4b02      	ldr	r3, [pc, #8]	; (8012bd4 <free+0xc>)
 8012bca:	4601      	mov	r1, r0
 8012bcc:	6818      	ldr	r0, [r3, #0]
 8012bce:	f000 b80b 	b.w	8012be8 <_free_r>
 8012bd2:	bf00      	nop
 8012bd4:	24000198 	.word	0x24000198

08012bd8 <memset>:
 8012bd8:	4402      	add	r2, r0
 8012bda:	4603      	mov	r3, r0
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	d100      	bne.n	8012be2 <memset+0xa>
 8012be0:	4770      	bx	lr
 8012be2:	f803 1b01 	strb.w	r1, [r3], #1
 8012be6:	e7f9      	b.n	8012bdc <memset+0x4>

08012be8 <_free_r>:
 8012be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bea:	2900      	cmp	r1, #0
 8012bec:	d048      	beq.n	8012c80 <_free_r+0x98>
 8012bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bf2:	9001      	str	r0, [sp, #4]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	f1a1 0404 	sub.w	r4, r1, #4
 8012bfa:	bfb8      	it	lt
 8012bfc:	18e4      	addlt	r4, r4, r3
 8012bfe:	f001 fb13 	bl	8014228 <__malloc_lock>
 8012c02:	4a20      	ldr	r2, [pc, #128]	; (8012c84 <_free_r+0x9c>)
 8012c04:	9801      	ldr	r0, [sp, #4]
 8012c06:	6813      	ldr	r3, [r2, #0]
 8012c08:	4615      	mov	r5, r2
 8012c0a:	b933      	cbnz	r3, 8012c1a <_free_r+0x32>
 8012c0c:	6063      	str	r3, [r4, #4]
 8012c0e:	6014      	str	r4, [r2, #0]
 8012c10:	b003      	add	sp, #12
 8012c12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c16:	f001 bb0d 	b.w	8014234 <__malloc_unlock>
 8012c1a:	42a3      	cmp	r3, r4
 8012c1c:	d90b      	bls.n	8012c36 <_free_r+0x4e>
 8012c1e:	6821      	ldr	r1, [r4, #0]
 8012c20:	1862      	adds	r2, r4, r1
 8012c22:	4293      	cmp	r3, r2
 8012c24:	bf04      	itt	eq
 8012c26:	681a      	ldreq	r2, [r3, #0]
 8012c28:	685b      	ldreq	r3, [r3, #4]
 8012c2a:	6063      	str	r3, [r4, #4]
 8012c2c:	bf04      	itt	eq
 8012c2e:	1852      	addeq	r2, r2, r1
 8012c30:	6022      	streq	r2, [r4, #0]
 8012c32:	602c      	str	r4, [r5, #0]
 8012c34:	e7ec      	b.n	8012c10 <_free_r+0x28>
 8012c36:	461a      	mov	r2, r3
 8012c38:	685b      	ldr	r3, [r3, #4]
 8012c3a:	b10b      	cbz	r3, 8012c40 <_free_r+0x58>
 8012c3c:	42a3      	cmp	r3, r4
 8012c3e:	d9fa      	bls.n	8012c36 <_free_r+0x4e>
 8012c40:	6811      	ldr	r1, [r2, #0]
 8012c42:	1855      	adds	r5, r2, r1
 8012c44:	42a5      	cmp	r5, r4
 8012c46:	d10b      	bne.n	8012c60 <_free_r+0x78>
 8012c48:	6824      	ldr	r4, [r4, #0]
 8012c4a:	4421      	add	r1, r4
 8012c4c:	1854      	adds	r4, r2, r1
 8012c4e:	42a3      	cmp	r3, r4
 8012c50:	6011      	str	r1, [r2, #0]
 8012c52:	d1dd      	bne.n	8012c10 <_free_r+0x28>
 8012c54:	681c      	ldr	r4, [r3, #0]
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	6053      	str	r3, [r2, #4]
 8012c5a:	4421      	add	r1, r4
 8012c5c:	6011      	str	r1, [r2, #0]
 8012c5e:	e7d7      	b.n	8012c10 <_free_r+0x28>
 8012c60:	d902      	bls.n	8012c68 <_free_r+0x80>
 8012c62:	230c      	movs	r3, #12
 8012c64:	6003      	str	r3, [r0, #0]
 8012c66:	e7d3      	b.n	8012c10 <_free_r+0x28>
 8012c68:	6825      	ldr	r5, [r4, #0]
 8012c6a:	1961      	adds	r1, r4, r5
 8012c6c:	428b      	cmp	r3, r1
 8012c6e:	bf04      	itt	eq
 8012c70:	6819      	ldreq	r1, [r3, #0]
 8012c72:	685b      	ldreq	r3, [r3, #4]
 8012c74:	6063      	str	r3, [r4, #4]
 8012c76:	bf04      	itt	eq
 8012c78:	1949      	addeq	r1, r1, r5
 8012c7a:	6021      	streq	r1, [r4, #0]
 8012c7c:	6054      	str	r4, [r2, #4]
 8012c7e:	e7c7      	b.n	8012c10 <_free_r+0x28>
 8012c80:	b003      	add	sp, #12
 8012c82:	bd30      	pop	{r4, r5, pc}
 8012c84:	240003a0 	.word	0x240003a0

08012c88 <_malloc_r>:
 8012c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c8a:	1ccd      	adds	r5, r1, #3
 8012c8c:	f025 0503 	bic.w	r5, r5, #3
 8012c90:	3508      	adds	r5, #8
 8012c92:	2d0c      	cmp	r5, #12
 8012c94:	bf38      	it	cc
 8012c96:	250c      	movcc	r5, #12
 8012c98:	2d00      	cmp	r5, #0
 8012c9a:	4606      	mov	r6, r0
 8012c9c:	db01      	blt.n	8012ca2 <_malloc_r+0x1a>
 8012c9e:	42a9      	cmp	r1, r5
 8012ca0:	d903      	bls.n	8012caa <_malloc_r+0x22>
 8012ca2:	230c      	movs	r3, #12
 8012ca4:	6033      	str	r3, [r6, #0]
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012caa:	f001 fabd 	bl	8014228 <__malloc_lock>
 8012cae:	4921      	ldr	r1, [pc, #132]	; (8012d34 <_malloc_r+0xac>)
 8012cb0:	680a      	ldr	r2, [r1, #0]
 8012cb2:	4614      	mov	r4, r2
 8012cb4:	b99c      	cbnz	r4, 8012cde <_malloc_r+0x56>
 8012cb6:	4f20      	ldr	r7, [pc, #128]	; (8012d38 <_malloc_r+0xb0>)
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	b923      	cbnz	r3, 8012cc6 <_malloc_r+0x3e>
 8012cbc:	4621      	mov	r1, r4
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f000 fc80 	bl	80135c4 <_sbrk_r>
 8012cc4:	6038      	str	r0, [r7, #0]
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	4630      	mov	r0, r6
 8012cca:	f000 fc7b 	bl	80135c4 <_sbrk_r>
 8012cce:	1c43      	adds	r3, r0, #1
 8012cd0:	d123      	bne.n	8012d1a <_malloc_r+0x92>
 8012cd2:	230c      	movs	r3, #12
 8012cd4:	6033      	str	r3, [r6, #0]
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	f001 faac 	bl	8014234 <__malloc_unlock>
 8012cdc:	e7e3      	b.n	8012ca6 <_malloc_r+0x1e>
 8012cde:	6823      	ldr	r3, [r4, #0]
 8012ce0:	1b5b      	subs	r3, r3, r5
 8012ce2:	d417      	bmi.n	8012d14 <_malloc_r+0x8c>
 8012ce4:	2b0b      	cmp	r3, #11
 8012ce6:	d903      	bls.n	8012cf0 <_malloc_r+0x68>
 8012ce8:	6023      	str	r3, [r4, #0]
 8012cea:	441c      	add	r4, r3
 8012cec:	6025      	str	r5, [r4, #0]
 8012cee:	e004      	b.n	8012cfa <_malloc_r+0x72>
 8012cf0:	6863      	ldr	r3, [r4, #4]
 8012cf2:	42a2      	cmp	r2, r4
 8012cf4:	bf0c      	ite	eq
 8012cf6:	600b      	streq	r3, [r1, #0]
 8012cf8:	6053      	strne	r3, [r2, #4]
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	f001 fa9a 	bl	8014234 <__malloc_unlock>
 8012d00:	f104 000b 	add.w	r0, r4, #11
 8012d04:	1d23      	adds	r3, r4, #4
 8012d06:	f020 0007 	bic.w	r0, r0, #7
 8012d0a:	1ac2      	subs	r2, r0, r3
 8012d0c:	d0cc      	beq.n	8012ca8 <_malloc_r+0x20>
 8012d0e:	1a1b      	subs	r3, r3, r0
 8012d10:	50a3      	str	r3, [r4, r2]
 8012d12:	e7c9      	b.n	8012ca8 <_malloc_r+0x20>
 8012d14:	4622      	mov	r2, r4
 8012d16:	6864      	ldr	r4, [r4, #4]
 8012d18:	e7cc      	b.n	8012cb4 <_malloc_r+0x2c>
 8012d1a:	1cc4      	adds	r4, r0, #3
 8012d1c:	f024 0403 	bic.w	r4, r4, #3
 8012d20:	42a0      	cmp	r0, r4
 8012d22:	d0e3      	beq.n	8012cec <_malloc_r+0x64>
 8012d24:	1a21      	subs	r1, r4, r0
 8012d26:	4630      	mov	r0, r6
 8012d28:	f000 fc4c 	bl	80135c4 <_sbrk_r>
 8012d2c:	3001      	adds	r0, #1
 8012d2e:	d1dd      	bne.n	8012cec <_malloc_r+0x64>
 8012d30:	e7cf      	b.n	8012cd2 <_malloc_r+0x4a>
 8012d32:	bf00      	nop
 8012d34:	240003a0 	.word	0x240003a0
 8012d38:	240003a4 	.word	0x240003a4

08012d3c <__cvt>:
 8012d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d3e:	ed2d 8b02 	vpush	{d8}
 8012d42:	eeb0 8b40 	vmov.f64	d8, d0
 8012d46:	b085      	sub	sp, #20
 8012d48:	4617      	mov	r7, r2
 8012d4a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012d4c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012d4e:	ee18 2a90 	vmov	r2, s17
 8012d52:	f025 0520 	bic.w	r5, r5, #32
 8012d56:	2a00      	cmp	r2, #0
 8012d58:	bfb6      	itet	lt
 8012d5a:	222d      	movlt	r2, #45	; 0x2d
 8012d5c:	2200      	movge	r2, #0
 8012d5e:	eeb1 8b40 	vneglt.f64	d8, d0
 8012d62:	2d46      	cmp	r5, #70	; 0x46
 8012d64:	460c      	mov	r4, r1
 8012d66:	701a      	strb	r2, [r3, #0]
 8012d68:	d004      	beq.n	8012d74 <__cvt+0x38>
 8012d6a:	2d45      	cmp	r5, #69	; 0x45
 8012d6c:	d100      	bne.n	8012d70 <__cvt+0x34>
 8012d6e:	3401      	adds	r4, #1
 8012d70:	2102      	movs	r1, #2
 8012d72:	e000      	b.n	8012d76 <__cvt+0x3a>
 8012d74:	2103      	movs	r1, #3
 8012d76:	ab03      	add	r3, sp, #12
 8012d78:	9301      	str	r3, [sp, #4]
 8012d7a:	ab02      	add	r3, sp, #8
 8012d7c:	9300      	str	r3, [sp, #0]
 8012d7e:	4622      	mov	r2, r4
 8012d80:	4633      	mov	r3, r6
 8012d82:	eeb0 0b48 	vmov.f64	d0, d8
 8012d86:	f000 fcbb 	bl	8013700 <_dtoa_r>
 8012d8a:	2d47      	cmp	r5, #71	; 0x47
 8012d8c:	d109      	bne.n	8012da2 <__cvt+0x66>
 8012d8e:	07fb      	lsls	r3, r7, #31
 8012d90:	d407      	bmi.n	8012da2 <__cvt+0x66>
 8012d92:	9b03      	ldr	r3, [sp, #12]
 8012d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d96:	1a1b      	subs	r3, r3, r0
 8012d98:	6013      	str	r3, [r2, #0]
 8012d9a:	b005      	add	sp, #20
 8012d9c:	ecbd 8b02 	vpop	{d8}
 8012da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da2:	2d46      	cmp	r5, #70	; 0x46
 8012da4:	eb00 0204 	add.w	r2, r0, r4
 8012da8:	d10c      	bne.n	8012dc4 <__cvt+0x88>
 8012daa:	7803      	ldrb	r3, [r0, #0]
 8012dac:	2b30      	cmp	r3, #48	; 0x30
 8012dae:	d107      	bne.n	8012dc0 <__cvt+0x84>
 8012db0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012db8:	bf1c      	itt	ne
 8012dba:	f1c4 0401 	rsbne	r4, r4, #1
 8012dbe:	6034      	strne	r4, [r6, #0]
 8012dc0:	6833      	ldr	r3, [r6, #0]
 8012dc2:	441a      	add	r2, r3
 8012dc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dcc:	bf08      	it	eq
 8012dce:	9203      	streq	r2, [sp, #12]
 8012dd0:	2130      	movs	r1, #48	; 0x30
 8012dd2:	9b03      	ldr	r3, [sp, #12]
 8012dd4:	4293      	cmp	r3, r2
 8012dd6:	d2dc      	bcs.n	8012d92 <__cvt+0x56>
 8012dd8:	1c5c      	adds	r4, r3, #1
 8012dda:	9403      	str	r4, [sp, #12]
 8012ddc:	7019      	strb	r1, [r3, #0]
 8012dde:	e7f8      	b.n	8012dd2 <__cvt+0x96>

08012de0 <__exponent>:
 8012de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012de2:	4603      	mov	r3, r0
 8012de4:	2900      	cmp	r1, #0
 8012de6:	bfb8      	it	lt
 8012de8:	4249      	neglt	r1, r1
 8012dea:	f803 2b02 	strb.w	r2, [r3], #2
 8012dee:	bfb4      	ite	lt
 8012df0:	222d      	movlt	r2, #45	; 0x2d
 8012df2:	222b      	movge	r2, #43	; 0x2b
 8012df4:	2909      	cmp	r1, #9
 8012df6:	7042      	strb	r2, [r0, #1]
 8012df8:	dd2a      	ble.n	8012e50 <__exponent+0x70>
 8012dfa:	f10d 0407 	add.w	r4, sp, #7
 8012dfe:	46a4      	mov	ip, r4
 8012e00:	270a      	movs	r7, #10
 8012e02:	46a6      	mov	lr, r4
 8012e04:	460a      	mov	r2, r1
 8012e06:	fb91 f6f7 	sdiv	r6, r1, r7
 8012e0a:	fb07 1516 	mls	r5, r7, r6, r1
 8012e0e:	3530      	adds	r5, #48	; 0x30
 8012e10:	2a63      	cmp	r2, #99	; 0x63
 8012e12:	f104 34ff 	add.w	r4, r4, #4294967295
 8012e16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012e1a:	4631      	mov	r1, r6
 8012e1c:	dcf1      	bgt.n	8012e02 <__exponent+0x22>
 8012e1e:	3130      	adds	r1, #48	; 0x30
 8012e20:	f1ae 0502 	sub.w	r5, lr, #2
 8012e24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012e28:	1c44      	adds	r4, r0, #1
 8012e2a:	4629      	mov	r1, r5
 8012e2c:	4561      	cmp	r1, ip
 8012e2e:	d30a      	bcc.n	8012e46 <__exponent+0x66>
 8012e30:	f10d 0209 	add.w	r2, sp, #9
 8012e34:	eba2 020e 	sub.w	r2, r2, lr
 8012e38:	4565      	cmp	r5, ip
 8012e3a:	bf88      	it	hi
 8012e3c:	2200      	movhi	r2, #0
 8012e3e:	4413      	add	r3, r2
 8012e40:	1a18      	subs	r0, r3, r0
 8012e42:	b003      	add	sp, #12
 8012e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012e4e:	e7ed      	b.n	8012e2c <__exponent+0x4c>
 8012e50:	2330      	movs	r3, #48	; 0x30
 8012e52:	3130      	adds	r1, #48	; 0x30
 8012e54:	7083      	strb	r3, [r0, #2]
 8012e56:	70c1      	strb	r1, [r0, #3]
 8012e58:	1d03      	adds	r3, r0, #4
 8012e5a:	e7f1      	b.n	8012e40 <__exponent+0x60>
 8012e5c:	0000      	movs	r0, r0
	...

08012e60 <_printf_float>:
 8012e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e64:	b08b      	sub	sp, #44	; 0x2c
 8012e66:	460c      	mov	r4, r1
 8012e68:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012e6c:	4616      	mov	r6, r2
 8012e6e:	461f      	mov	r7, r3
 8012e70:	4605      	mov	r5, r0
 8012e72:	f001 f9c7 	bl	8014204 <_localeconv_r>
 8012e76:	f8d0 b000 	ldr.w	fp, [r0]
 8012e7a:	4658      	mov	r0, fp
 8012e7c:	f7ed fa30 	bl	80002e0 <strlen>
 8012e80:	2300      	movs	r3, #0
 8012e82:	9308      	str	r3, [sp, #32]
 8012e84:	f8d8 3000 	ldr.w	r3, [r8]
 8012e88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012e8c:	6822      	ldr	r2, [r4, #0]
 8012e8e:	3307      	adds	r3, #7
 8012e90:	f023 0307 	bic.w	r3, r3, #7
 8012e94:	f103 0108 	add.w	r1, r3, #8
 8012e98:	f8c8 1000 	str.w	r1, [r8]
 8012e9c:	4682      	mov	sl, r0
 8012e9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012ea2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012ea6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013108 <_printf_float+0x2a8>
 8012eaa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012eae:	eeb0 6bc0 	vabs.f64	d6, d0
 8012eb2:	eeb4 6b47 	vcmp.f64	d6, d7
 8012eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eba:	dd24      	ble.n	8012f06 <_printf_float+0xa6>
 8012ebc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec4:	d502      	bpl.n	8012ecc <_printf_float+0x6c>
 8012ec6:	232d      	movs	r3, #45	; 0x2d
 8012ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ecc:	4b90      	ldr	r3, [pc, #576]	; (8013110 <_printf_float+0x2b0>)
 8012ece:	4891      	ldr	r0, [pc, #580]	; (8013114 <_printf_float+0x2b4>)
 8012ed0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012ed4:	bf94      	ite	ls
 8012ed6:	4698      	movls	r8, r3
 8012ed8:	4680      	movhi	r8, r0
 8012eda:	2303      	movs	r3, #3
 8012edc:	6123      	str	r3, [r4, #16]
 8012ede:	f022 0204 	bic.w	r2, r2, #4
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	6022      	str	r2, [r4, #0]
 8012ee6:	9304      	str	r3, [sp, #16]
 8012ee8:	9700      	str	r7, [sp, #0]
 8012eea:	4633      	mov	r3, r6
 8012eec:	aa09      	add	r2, sp, #36	; 0x24
 8012eee:	4621      	mov	r1, r4
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f000 f9d3 	bl	801329c <_printf_common>
 8012ef6:	3001      	adds	r0, #1
 8012ef8:	f040 808a 	bne.w	8013010 <_printf_float+0x1b0>
 8012efc:	f04f 30ff 	mov.w	r0, #4294967295
 8012f00:	b00b      	add	sp, #44	; 0x2c
 8012f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f06:	eeb4 0b40 	vcmp.f64	d0, d0
 8012f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f0e:	d709      	bvc.n	8012f24 <_printf_float+0xc4>
 8012f10:	ee10 3a90 	vmov	r3, s1
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	bfbc      	itt	lt
 8012f18:	232d      	movlt	r3, #45	; 0x2d
 8012f1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012f1e:	487e      	ldr	r0, [pc, #504]	; (8013118 <_printf_float+0x2b8>)
 8012f20:	4b7e      	ldr	r3, [pc, #504]	; (801311c <_printf_float+0x2bc>)
 8012f22:	e7d5      	b.n	8012ed0 <_printf_float+0x70>
 8012f24:	6863      	ldr	r3, [r4, #4]
 8012f26:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012f2a:	9104      	str	r1, [sp, #16]
 8012f2c:	1c59      	adds	r1, r3, #1
 8012f2e:	d13c      	bne.n	8012faa <_printf_float+0x14a>
 8012f30:	2306      	movs	r3, #6
 8012f32:	6063      	str	r3, [r4, #4]
 8012f34:	2300      	movs	r3, #0
 8012f36:	9303      	str	r3, [sp, #12]
 8012f38:	ab08      	add	r3, sp, #32
 8012f3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012f3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012f42:	ab07      	add	r3, sp, #28
 8012f44:	6861      	ldr	r1, [r4, #4]
 8012f46:	9300      	str	r3, [sp, #0]
 8012f48:	6022      	str	r2, [r4, #0]
 8012f4a:	f10d 031b 	add.w	r3, sp, #27
 8012f4e:	4628      	mov	r0, r5
 8012f50:	f7ff fef4 	bl	8012d3c <__cvt>
 8012f54:	9b04      	ldr	r3, [sp, #16]
 8012f56:	9907      	ldr	r1, [sp, #28]
 8012f58:	2b47      	cmp	r3, #71	; 0x47
 8012f5a:	4680      	mov	r8, r0
 8012f5c:	d108      	bne.n	8012f70 <_printf_float+0x110>
 8012f5e:	1cc8      	adds	r0, r1, #3
 8012f60:	db02      	blt.n	8012f68 <_printf_float+0x108>
 8012f62:	6863      	ldr	r3, [r4, #4]
 8012f64:	4299      	cmp	r1, r3
 8012f66:	dd41      	ble.n	8012fec <_printf_float+0x18c>
 8012f68:	f1a9 0902 	sub.w	r9, r9, #2
 8012f6c:	fa5f f989 	uxtb.w	r9, r9
 8012f70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012f74:	d820      	bhi.n	8012fb8 <_printf_float+0x158>
 8012f76:	3901      	subs	r1, #1
 8012f78:	464a      	mov	r2, r9
 8012f7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012f7e:	9107      	str	r1, [sp, #28]
 8012f80:	f7ff ff2e 	bl	8012de0 <__exponent>
 8012f84:	9a08      	ldr	r2, [sp, #32]
 8012f86:	9004      	str	r0, [sp, #16]
 8012f88:	1813      	adds	r3, r2, r0
 8012f8a:	2a01      	cmp	r2, #1
 8012f8c:	6123      	str	r3, [r4, #16]
 8012f8e:	dc02      	bgt.n	8012f96 <_printf_float+0x136>
 8012f90:	6822      	ldr	r2, [r4, #0]
 8012f92:	07d2      	lsls	r2, r2, #31
 8012f94:	d501      	bpl.n	8012f9a <_printf_float+0x13a>
 8012f96:	3301      	adds	r3, #1
 8012f98:	6123      	str	r3, [r4, #16]
 8012f9a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d0a2      	beq.n	8012ee8 <_printf_float+0x88>
 8012fa2:	232d      	movs	r3, #45	; 0x2d
 8012fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fa8:	e79e      	b.n	8012ee8 <_printf_float+0x88>
 8012faa:	9904      	ldr	r1, [sp, #16]
 8012fac:	2947      	cmp	r1, #71	; 0x47
 8012fae:	d1c1      	bne.n	8012f34 <_printf_float+0xd4>
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d1bf      	bne.n	8012f34 <_printf_float+0xd4>
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	e7bc      	b.n	8012f32 <_printf_float+0xd2>
 8012fb8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012fbc:	d118      	bne.n	8012ff0 <_printf_float+0x190>
 8012fbe:	2900      	cmp	r1, #0
 8012fc0:	6863      	ldr	r3, [r4, #4]
 8012fc2:	dd0b      	ble.n	8012fdc <_printf_float+0x17c>
 8012fc4:	6121      	str	r1, [r4, #16]
 8012fc6:	b913      	cbnz	r3, 8012fce <_printf_float+0x16e>
 8012fc8:	6822      	ldr	r2, [r4, #0]
 8012fca:	07d0      	lsls	r0, r2, #31
 8012fcc:	d502      	bpl.n	8012fd4 <_printf_float+0x174>
 8012fce:	3301      	adds	r3, #1
 8012fd0:	440b      	add	r3, r1
 8012fd2:	6123      	str	r3, [r4, #16]
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8012fd8:	9304      	str	r3, [sp, #16]
 8012fda:	e7de      	b.n	8012f9a <_printf_float+0x13a>
 8012fdc:	b913      	cbnz	r3, 8012fe4 <_printf_float+0x184>
 8012fde:	6822      	ldr	r2, [r4, #0]
 8012fe0:	07d2      	lsls	r2, r2, #31
 8012fe2:	d501      	bpl.n	8012fe8 <_printf_float+0x188>
 8012fe4:	3302      	adds	r3, #2
 8012fe6:	e7f4      	b.n	8012fd2 <_printf_float+0x172>
 8012fe8:	2301      	movs	r3, #1
 8012fea:	e7f2      	b.n	8012fd2 <_printf_float+0x172>
 8012fec:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012ff0:	9b08      	ldr	r3, [sp, #32]
 8012ff2:	4299      	cmp	r1, r3
 8012ff4:	db05      	blt.n	8013002 <_printf_float+0x1a2>
 8012ff6:	6823      	ldr	r3, [r4, #0]
 8012ff8:	6121      	str	r1, [r4, #16]
 8012ffa:	07d8      	lsls	r0, r3, #31
 8012ffc:	d5ea      	bpl.n	8012fd4 <_printf_float+0x174>
 8012ffe:	1c4b      	adds	r3, r1, #1
 8013000:	e7e7      	b.n	8012fd2 <_printf_float+0x172>
 8013002:	2900      	cmp	r1, #0
 8013004:	bfd4      	ite	le
 8013006:	f1c1 0202 	rsble	r2, r1, #2
 801300a:	2201      	movgt	r2, #1
 801300c:	4413      	add	r3, r2
 801300e:	e7e0      	b.n	8012fd2 <_printf_float+0x172>
 8013010:	6823      	ldr	r3, [r4, #0]
 8013012:	055a      	lsls	r2, r3, #21
 8013014:	d407      	bmi.n	8013026 <_printf_float+0x1c6>
 8013016:	6923      	ldr	r3, [r4, #16]
 8013018:	4642      	mov	r2, r8
 801301a:	4631      	mov	r1, r6
 801301c:	4628      	mov	r0, r5
 801301e:	47b8      	blx	r7
 8013020:	3001      	adds	r0, #1
 8013022:	d12a      	bne.n	801307a <_printf_float+0x21a>
 8013024:	e76a      	b.n	8012efc <_printf_float+0x9c>
 8013026:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801302a:	f240 80e2 	bls.w	80131f2 <_printf_float+0x392>
 801302e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013032:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801303a:	d133      	bne.n	80130a4 <_printf_float+0x244>
 801303c:	4a38      	ldr	r2, [pc, #224]	; (8013120 <_printf_float+0x2c0>)
 801303e:	2301      	movs	r3, #1
 8013040:	4631      	mov	r1, r6
 8013042:	4628      	mov	r0, r5
 8013044:	47b8      	blx	r7
 8013046:	3001      	adds	r0, #1
 8013048:	f43f af58 	beq.w	8012efc <_printf_float+0x9c>
 801304c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013050:	429a      	cmp	r2, r3
 8013052:	db02      	blt.n	801305a <_printf_float+0x1fa>
 8013054:	6823      	ldr	r3, [r4, #0]
 8013056:	07d8      	lsls	r0, r3, #31
 8013058:	d50f      	bpl.n	801307a <_printf_float+0x21a>
 801305a:	4653      	mov	r3, sl
 801305c:	465a      	mov	r2, fp
 801305e:	4631      	mov	r1, r6
 8013060:	4628      	mov	r0, r5
 8013062:	47b8      	blx	r7
 8013064:	3001      	adds	r0, #1
 8013066:	f43f af49 	beq.w	8012efc <_printf_float+0x9c>
 801306a:	f04f 0800 	mov.w	r8, #0
 801306e:	f104 091a 	add.w	r9, r4, #26
 8013072:	9b08      	ldr	r3, [sp, #32]
 8013074:	3b01      	subs	r3, #1
 8013076:	4543      	cmp	r3, r8
 8013078:	dc09      	bgt.n	801308e <_printf_float+0x22e>
 801307a:	6823      	ldr	r3, [r4, #0]
 801307c:	079b      	lsls	r3, r3, #30
 801307e:	f100 8108 	bmi.w	8013292 <_printf_float+0x432>
 8013082:	68e0      	ldr	r0, [r4, #12]
 8013084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013086:	4298      	cmp	r0, r3
 8013088:	bfb8      	it	lt
 801308a:	4618      	movlt	r0, r3
 801308c:	e738      	b.n	8012f00 <_printf_float+0xa0>
 801308e:	2301      	movs	r3, #1
 8013090:	464a      	mov	r2, r9
 8013092:	4631      	mov	r1, r6
 8013094:	4628      	mov	r0, r5
 8013096:	47b8      	blx	r7
 8013098:	3001      	adds	r0, #1
 801309a:	f43f af2f 	beq.w	8012efc <_printf_float+0x9c>
 801309e:	f108 0801 	add.w	r8, r8, #1
 80130a2:	e7e6      	b.n	8013072 <_printf_float+0x212>
 80130a4:	9b07      	ldr	r3, [sp, #28]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	dc3c      	bgt.n	8013124 <_printf_float+0x2c4>
 80130aa:	4a1d      	ldr	r2, [pc, #116]	; (8013120 <_printf_float+0x2c0>)
 80130ac:	2301      	movs	r3, #1
 80130ae:	4631      	mov	r1, r6
 80130b0:	4628      	mov	r0, r5
 80130b2:	47b8      	blx	r7
 80130b4:	3001      	adds	r0, #1
 80130b6:	f43f af21 	beq.w	8012efc <_printf_float+0x9c>
 80130ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80130be:	4313      	orrs	r3, r2
 80130c0:	d102      	bne.n	80130c8 <_printf_float+0x268>
 80130c2:	6823      	ldr	r3, [r4, #0]
 80130c4:	07d9      	lsls	r1, r3, #31
 80130c6:	d5d8      	bpl.n	801307a <_printf_float+0x21a>
 80130c8:	4653      	mov	r3, sl
 80130ca:	465a      	mov	r2, fp
 80130cc:	4631      	mov	r1, r6
 80130ce:	4628      	mov	r0, r5
 80130d0:	47b8      	blx	r7
 80130d2:	3001      	adds	r0, #1
 80130d4:	f43f af12 	beq.w	8012efc <_printf_float+0x9c>
 80130d8:	f04f 0900 	mov.w	r9, #0
 80130dc:	f104 0a1a 	add.w	sl, r4, #26
 80130e0:	9b07      	ldr	r3, [sp, #28]
 80130e2:	425b      	negs	r3, r3
 80130e4:	454b      	cmp	r3, r9
 80130e6:	dc01      	bgt.n	80130ec <_printf_float+0x28c>
 80130e8:	9b08      	ldr	r3, [sp, #32]
 80130ea:	e795      	b.n	8013018 <_printf_float+0x1b8>
 80130ec:	2301      	movs	r3, #1
 80130ee:	4652      	mov	r2, sl
 80130f0:	4631      	mov	r1, r6
 80130f2:	4628      	mov	r0, r5
 80130f4:	47b8      	blx	r7
 80130f6:	3001      	adds	r0, #1
 80130f8:	f43f af00 	beq.w	8012efc <_printf_float+0x9c>
 80130fc:	f109 0901 	add.w	r9, r9, #1
 8013100:	e7ee      	b.n	80130e0 <_printf_float+0x280>
 8013102:	bf00      	nop
 8013104:	f3af 8000 	nop.w
 8013108:	ffffffff 	.word	0xffffffff
 801310c:	7fefffff 	.word	0x7fefffff
 8013110:	08015518 	.word	0x08015518
 8013114:	0801551c 	.word	0x0801551c
 8013118:	08015524 	.word	0x08015524
 801311c:	08015520 	.word	0x08015520
 8013120:	08015528 	.word	0x08015528
 8013124:	9a08      	ldr	r2, [sp, #32]
 8013126:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013128:	429a      	cmp	r2, r3
 801312a:	bfa8      	it	ge
 801312c:	461a      	movge	r2, r3
 801312e:	2a00      	cmp	r2, #0
 8013130:	4691      	mov	r9, r2
 8013132:	dc38      	bgt.n	80131a6 <_printf_float+0x346>
 8013134:	2300      	movs	r3, #0
 8013136:	9305      	str	r3, [sp, #20]
 8013138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801313c:	f104 021a 	add.w	r2, r4, #26
 8013140:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013142:	9905      	ldr	r1, [sp, #20]
 8013144:	9304      	str	r3, [sp, #16]
 8013146:	eba3 0309 	sub.w	r3, r3, r9
 801314a:	428b      	cmp	r3, r1
 801314c:	dc33      	bgt.n	80131b6 <_printf_float+0x356>
 801314e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013152:	429a      	cmp	r2, r3
 8013154:	db3c      	blt.n	80131d0 <_printf_float+0x370>
 8013156:	6823      	ldr	r3, [r4, #0]
 8013158:	07da      	lsls	r2, r3, #31
 801315a:	d439      	bmi.n	80131d0 <_printf_float+0x370>
 801315c:	9a08      	ldr	r2, [sp, #32]
 801315e:	9b04      	ldr	r3, [sp, #16]
 8013160:	9907      	ldr	r1, [sp, #28]
 8013162:	1ad3      	subs	r3, r2, r3
 8013164:	eba2 0901 	sub.w	r9, r2, r1
 8013168:	4599      	cmp	r9, r3
 801316a:	bfa8      	it	ge
 801316c:	4699      	movge	r9, r3
 801316e:	f1b9 0f00 	cmp.w	r9, #0
 8013172:	dc35      	bgt.n	80131e0 <_printf_float+0x380>
 8013174:	f04f 0800 	mov.w	r8, #0
 8013178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801317c:	f104 0a1a 	add.w	sl, r4, #26
 8013180:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013184:	1a9b      	subs	r3, r3, r2
 8013186:	eba3 0309 	sub.w	r3, r3, r9
 801318a:	4543      	cmp	r3, r8
 801318c:	f77f af75 	ble.w	801307a <_printf_float+0x21a>
 8013190:	2301      	movs	r3, #1
 8013192:	4652      	mov	r2, sl
 8013194:	4631      	mov	r1, r6
 8013196:	4628      	mov	r0, r5
 8013198:	47b8      	blx	r7
 801319a:	3001      	adds	r0, #1
 801319c:	f43f aeae 	beq.w	8012efc <_printf_float+0x9c>
 80131a0:	f108 0801 	add.w	r8, r8, #1
 80131a4:	e7ec      	b.n	8013180 <_printf_float+0x320>
 80131a6:	4613      	mov	r3, r2
 80131a8:	4631      	mov	r1, r6
 80131aa:	4642      	mov	r2, r8
 80131ac:	4628      	mov	r0, r5
 80131ae:	47b8      	blx	r7
 80131b0:	3001      	adds	r0, #1
 80131b2:	d1bf      	bne.n	8013134 <_printf_float+0x2d4>
 80131b4:	e6a2      	b.n	8012efc <_printf_float+0x9c>
 80131b6:	2301      	movs	r3, #1
 80131b8:	4631      	mov	r1, r6
 80131ba:	4628      	mov	r0, r5
 80131bc:	9204      	str	r2, [sp, #16]
 80131be:	47b8      	blx	r7
 80131c0:	3001      	adds	r0, #1
 80131c2:	f43f ae9b 	beq.w	8012efc <_printf_float+0x9c>
 80131c6:	9b05      	ldr	r3, [sp, #20]
 80131c8:	9a04      	ldr	r2, [sp, #16]
 80131ca:	3301      	adds	r3, #1
 80131cc:	9305      	str	r3, [sp, #20]
 80131ce:	e7b7      	b.n	8013140 <_printf_float+0x2e0>
 80131d0:	4653      	mov	r3, sl
 80131d2:	465a      	mov	r2, fp
 80131d4:	4631      	mov	r1, r6
 80131d6:	4628      	mov	r0, r5
 80131d8:	47b8      	blx	r7
 80131da:	3001      	adds	r0, #1
 80131dc:	d1be      	bne.n	801315c <_printf_float+0x2fc>
 80131de:	e68d      	b.n	8012efc <_printf_float+0x9c>
 80131e0:	9a04      	ldr	r2, [sp, #16]
 80131e2:	464b      	mov	r3, r9
 80131e4:	4442      	add	r2, r8
 80131e6:	4631      	mov	r1, r6
 80131e8:	4628      	mov	r0, r5
 80131ea:	47b8      	blx	r7
 80131ec:	3001      	adds	r0, #1
 80131ee:	d1c1      	bne.n	8013174 <_printf_float+0x314>
 80131f0:	e684      	b.n	8012efc <_printf_float+0x9c>
 80131f2:	9a08      	ldr	r2, [sp, #32]
 80131f4:	2a01      	cmp	r2, #1
 80131f6:	dc01      	bgt.n	80131fc <_printf_float+0x39c>
 80131f8:	07db      	lsls	r3, r3, #31
 80131fa:	d537      	bpl.n	801326c <_printf_float+0x40c>
 80131fc:	2301      	movs	r3, #1
 80131fe:	4642      	mov	r2, r8
 8013200:	4631      	mov	r1, r6
 8013202:	4628      	mov	r0, r5
 8013204:	47b8      	blx	r7
 8013206:	3001      	adds	r0, #1
 8013208:	f43f ae78 	beq.w	8012efc <_printf_float+0x9c>
 801320c:	4653      	mov	r3, sl
 801320e:	465a      	mov	r2, fp
 8013210:	4631      	mov	r1, r6
 8013212:	4628      	mov	r0, r5
 8013214:	47b8      	blx	r7
 8013216:	3001      	adds	r0, #1
 8013218:	f43f ae70 	beq.w	8012efc <_printf_float+0x9c>
 801321c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013220:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013228:	d01b      	beq.n	8013262 <_printf_float+0x402>
 801322a:	9b08      	ldr	r3, [sp, #32]
 801322c:	f108 0201 	add.w	r2, r8, #1
 8013230:	3b01      	subs	r3, #1
 8013232:	4631      	mov	r1, r6
 8013234:	4628      	mov	r0, r5
 8013236:	47b8      	blx	r7
 8013238:	3001      	adds	r0, #1
 801323a:	d10e      	bne.n	801325a <_printf_float+0x3fa>
 801323c:	e65e      	b.n	8012efc <_printf_float+0x9c>
 801323e:	2301      	movs	r3, #1
 8013240:	464a      	mov	r2, r9
 8013242:	4631      	mov	r1, r6
 8013244:	4628      	mov	r0, r5
 8013246:	47b8      	blx	r7
 8013248:	3001      	adds	r0, #1
 801324a:	f43f ae57 	beq.w	8012efc <_printf_float+0x9c>
 801324e:	f108 0801 	add.w	r8, r8, #1
 8013252:	9b08      	ldr	r3, [sp, #32]
 8013254:	3b01      	subs	r3, #1
 8013256:	4543      	cmp	r3, r8
 8013258:	dcf1      	bgt.n	801323e <_printf_float+0x3de>
 801325a:	9b04      	ldr	r3, [sp, #16]
 801325c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013260:	e6db      	b.n	801301a <_printf_float+0x1ba>
 8013262:	f04f 0800 	mov.w	r8, #0
 8013266:	f104 091a 	add.w	r9, r4, #26
 801326a:	e7f2      	b.n	8013252 <_printf_float+0x3f2>
 801326c:	2301      	movs	r3, #1
 801326e:	4642      	mov	r2, r8
 8013270:	e7df      	b.n	8013232 <_printf_float+0x3d2>
 8013272:	2301      	movs	r3, #1
 8013274:	464a      	mov	r2, r9
 8013276:	4631      	mov	r1, r6
 8013278:	4628      	mov	r0, r5
 801327a:	47b8      	blx	r7
 801327c:	3001      	adds	r0, #1
 801327e:	f43f ae3d 	beq.w	8012efc <_printf_float+0x9c>
 8013282:	f108 0801 	add.w	r8, r8, #1
 8013286:	68e3      	ldr	r3, [r4, #12]
 8013288:	9909      	ldr	r1, [sp, #36]	; 0x24
 801328a:	1a5b      	subs	r3, r3, r1
 801328c:	4543      	cmp	r3, r8
 801328e:	dcf0      	bgt.n	8013272 <_printf_float+0x412>
 8013290:	e6f7      	b.n	8013082 <_printf_float+0x222>
 8013292:	f04f 0800 	mov.w	r8, #0
 8013296:	f104 0919 	add.w	r9, r4, #25
 801329a:	e7f4      	b.n	8013286 <_printf_float+0x426>

0801329c <_printf_common>:
 801329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132a0:	4616      	mov	r6, r2
 80132a2:	4699      	mov	r9, r3
 80132a4:	688a      	ldr	r2, [r1, #8]
 80132a6:	690b      	ldr	r3, [r1, #16]
 80132a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80132ac:	4293      	cmp	r3, r2
 80132ae:	bfb8      	it	lt
 80132b0:	4613      	movlt	r3, r2
 80132b2:	6033      	str	r3, [r6, #0]
 80132b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80132b8:	4607      	mov	r7, r0
 80132ba:	460c      	mov	r4, r1
 80132bc:	b10a      	cbz	r2, 80132c2 <_printf_common+0x26>
 80132be:	3301      	adds	r3, #1
 80132c0:	6033      	str	r3, [r6, #0]
 80132c2:	6823      	ldr	r3, [r4, #0]
 80132c4:	0699      	lsls	r1, r3, #26
 80132c6:	bf42      	ittt	mi
 80132c8:	6833      	ldrmi	r3, [r6, #0]
 80132ca:	3302      	addmi	r3, #2
 80132cc:	6033      	strmi	r3, [r6, #0]
 80132ce:	6825      	ldr	r5, [r4, #0]
 80132d0:	f015 0506 	ands.w	r5, r5, #6
 80132d4:	d106      	bne.n	80132e4 <_printf_common+0x48>
 80132d6:	f104 0a19 	add.w	sl, r4, #25
 80132da:	68e3      	ldr	r3, [r4, #12]
 80132dc:	6832      	ldr	r2, [r6, #0]
 80132de:	1a9b      	subs	r3, r3, r2
 80132e0:	42ab      	cmp	r3, r5
 80132e2:	dc26      	bgt.n	8013332 <_printf_common+0x96>
 80132e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80132e8:	1e13      	subs	r3, r2, #0
 80132ea:	6822      	ldr	r2, [r4, #0]
 80132ec:	bf18      	it	ne
 80132ee:	2301      	movne	r3, #1
 80132f0:	0692      	lsls	r2, r2, #26
 80132f2:	d42b      	bmi.n	801334c <_printf_common+0xb0>
 80132f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80132f8:	4649      	mov	r1, r9
 80132fa:	4638      	mov	r0, r7
 80132fc:	47c0      	blx	r8
 80132fe:	3001      	adds	r0, #1
 8013300:	d01e      	beq.n	8013340 <_printf_common+0xa4>
 8013302:	6823      	ldr	r3, [r4, #0]
 8013304:	68e5      	ldr	r5, [r4, #12]
 8013306:	6832      	ldr	r2, [r6, #0]
 8013308:	f003 0306 	and.w	r3, r3, #6
 801330c:	2b04      	cmp	r3, #4
 801330e:	bf08      	it	eq
 8013310:	1aad      	subeq	r5, r5, r2
 8013312:	68a3      	ldr	r3, [r4, #8]
 8013314:	6922      	ldr	r2, [r4, #16]
 8013316:	bf0c      	ite	eq
 8013318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801331c:	2500      	movne	r5, #0
 801331e:	4293      	cmp	r3, r2
 8013320:	bfc4      	itt	gt
 8013322:	1a9b      	subgt	r3, r3, r2
 8013324:	18ed      	addgt	r5, r5, r3
 8013326:	2600      	movs	r6, #0
 8013328:	341a      	adds	r4, #26
 801332a:	42b5      	cmp	r5, r6
 801332c:	d11a      	bne.n	8013364 <_printf_common+0xc8>
 801332e:	2000      	movs	r0, #0
 8013330:	e008      	b.n	8013344 <_printf_common+0xa8>
 8013332:	2301      	movs	r3, #1
 8013334:	4652      	mov	r2, sl
 8013336:	4649      	mov	r1, r9
 8013338:	4638      	mov	r0, r7
 801333a:	47c0      	blx	r8
 801333c:	3001      	adds	r0, #1
 801333e:	d103      	bne.n	8013348 <_printf_common+0xac>
 8013340:	f04f 30ff 	mov.w	r0, #4294967295
 8013344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013348:	3501      	adds	r5, #1
 801334a:	e7c6      	b.n	80132da <_printf_common+0x3e>
 801334c:	18e1      	adds	r1, r4, r3
 801334e:	1c5a      	adds	r2, r3, #1
 8013350:	2030      	movs	r0, #48	; 0x30
 8013352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013356:	4422      	add	r2, r4
 8013358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801335c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013360:	3302      	adds	r3, #2
 8013362:	e7c7      	b.n	80132f4 <_printf_common+0x58>
 8013364:	2301      	movs	r3, #1
 8013366:	4622      	mov	r2, r4
 8013368:	4649      	mov	r1, r9
 801336a:	4638      	mov	r0, r7
 801336c:	47c0      	blx	r8
 801336e:	3001      	adds	r0, #1
 8013370:	d0e6      	beq.n	8013340 <_printf_common+0xa4>
 8013372:	3601      	adds	r6, #1
 8013374:	e7d9      	b.n	801332a <_printf_common+0x8e>
	...

08013378 <_printf_i>:
 8013378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801337c:	460c      	mov	r4, r1
 801337e:	4691      	mov	r9, r2
 8013380:	7e27      	ldrb	r7, [r4, #24]
 8013382:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013384:	2f78      	cmp	r7, #120	; 0x78
 8013386:	4680      	mov	r8, r0
 8013388:	469a      	mov	sl, r3
 801338a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801338e:	d807      	bhi.n	80133a0 <_printf_i+0x28>
 8013390:	2f62      	cmp	r7, #98	; 0x62
 8013392:	d80a      	bhi.n	80133aa <_printf_i+0x32>
 8013394:	2f00      	cmp	r7, #0
 8013396:	f000 80d8 	beq.w	801354a <_printf_i+0x1d2>
 801339a:	2f58      	cmp	r7, #88	; 0x58
 801339c:	f000 80a3 	beq.w	80134e6 <_printf_i+0x16e>
 80133a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80133a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80133a8:	e03a      	b.n	8013420 <_printf_i+0xa8>
 80133aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80133ae:	2b15      	cmp	r3, #21
 80133b0:	d8f6      	bhi.n	80133a0 <_printf_i+0x28>
 80133b2:	a001      	add	r0, pc, #4	; (adr r0, 80133b8 <_printf_i+0x40>)
 80133b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80133b8:	08013411 	.word	0x08013411
 80133bc:	08013425 	.word	0x08013425
 80133c0:	080133a1 	.word	0x080133a1
 80133c4:	080133a1 	.word	0x080133a1
 80133c8:	080133a1 	.word	0x080133a1
 80133cc:	080133a1 	.word	0x080133a1
 80133d0:	08013425 	.word	0x08013425
 80133d4:	080133a1 	.word	0x080133a1
 80133d8:	080133a1 	.word	0x080133a1
 80133dc:	080133a1 	.word	0x080133a1
 80133e0:	080133a1 	.word	0x080133a1
 80133e4:	08013531 	.word	0x08013531
 80133e8:	08013455 	.word	0x08013455
 80133ec:	08013513 	.word	0x08013513
 80133f0:	080133a1 	.word	0x080133a1
 80133f4:	080133a1 	.word	0x080133a1
 80133f8:	08013553 	.word	0x08013553
 80133fc:	080133a1 	.word	0x080133a1
 8013400:	08013455 	.word	0x08013455
 8013404:	080133a1 	.word	0x080133a1
 8013408:	080133a1 	.word	0x080133a1
 801340c:	0801351b 	.word	0x0801351b
 8013410:	680b      	ldr	r3, [r1, #0]
 8013412:	1d1a      	adds	r2, r3, #4
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	600a      	str	r2, [r1, #0]
 8013418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801341c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013420:	2301      	movs	r3, #1
 8013422:	e0a3      	b.n	801356c <_printf_i+0x1f4>
 8013424:	6825      	ldr	r5, [r4, #0]
 8013426:	6808      	ldr	r0, [r1, #0]
 8013428:	062e      	lsls	r6, r5, #24
 801342a:	f100 0304 	add.w	r3, r0, #4
 801342e:	d50a      	bpl.n	8013446 <_printf_i+0xce>
 8013430:	6805      	ldr	r5, [r0, #0]
 8013432:	600b      	str	r3, [r1, #0]
 8013434:	2d00      	cmp	r5, #0
 8013436:	da03      	bge.n	8013440 <_printf_i+0xc8>
 8013438:	232d      	movs	r3, #45	; 0x2d
 801343a:	426d      	negs	r5, r5
 801343c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013440:	485e      	ldr	r0, [pc, #376]	; (80135bc <_printf_i+0x244>)
 8013442:	230a      	movs	r3, #10
 8013444:	e019      	b.n	801347a <_printf_i+0x102>
 8013446:	f015 0f40 	tst.w	r5, #64	; 0x40
 801344a:	6805      	ldr	r5, [r0, #0]
 801344c:	600b      	str	r3, [r1, #0]
 801344e:	bf18      	it	ne
 8013450:	b22d      	sxthne	r5, r5
 8013452:	e7ef      	b.n	8013434 <_printf_i+0xbc>
 8013454:	680b      	ldr	r3, [r1, #0]
 8013456:	6825      	ldr	r5, [r4, #0]
 8013458:	1d18      	adds	r0, r3, #4
 801345a:	6008      	str	r0, [r1, #0]
 801345c:	0628      	lsls	r0, r5, #24
 801345e:	d501      	bpl.n	8013464 <_printf_i+0xec>
 8013460:	681d      	ldr	r5, [r3, #0]
 8013462:	e002      	b.n	801346a <_printf_i+0xf2>
 8013464:	0669      	lsls	r1, r5, #25
 8013466:	d5fb      	bpl.n	8013460 <_printf_i+0xe8>
 8013468:	881d      	ldrh	r5, [r3, #0]
 801346a:	4854      	ldr	r0, [pc, #336]	; (80135bc <_printf_i+0x244>)
 801346c:	2f6f      	cmp	r7, #111	; 0x6f
 801346e:	bf0c      	ite	eq
 8013470:	2308      	moveq	r3, #8
 8013472:	230a      	movne	r3, #10
 8013474:	2100      	movs	r1, #0
 8013476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801347a:	6866      	ldr	r6, [r4, #4]
 801347c:	60a6      	str	r6, [r4, #8]
 801347e:	2e00      	cmp	r6, #0
 8013480:	bfa2      	ittt	ge
 8013482:	6821      	ldrge	r1, [r4, #0]
 8013484:	f021 0104 	bicge.w	r1, r1, #4
 8013488:	6021      	strge	r1, [r4, #0]
 801348a:	b90d      	cbnz	r5, 8013490 <_printf_i+0x118>
 801348c:	2e00      	cmp	r6, #0
 801348e:	d04d      	beq.n	801352c <_printf_i+0x1b4>
 8013490:	4616      	mov	r6, r2
 8013492:	fbb5 f1f3 	udiv	r1, r5, r3
 8013496:	fb03 5711 	mls	r7, r3, r1, r5
 801349a:	5dc7      	ldrb	r7, [r0, r7]
 801349c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80134a0:	462f      	mov	r7, r5
 80134a2:	42bb      	cmp	r3, r7
 80134a4:	460d      	mov	r5, r1
 80134a6:	d9f4      	bls.n	8013492 <_printf_i+0x11a>
 80134a8:	2b08      	cmp	r3, #8
 80134aa:	d10b      	bne.n	80134c4 <_printf_i+0x14c>
 80134ac:	6823      	ldr	r3, [r4, #0]
 80134ae:	07df      	lsls	r7, r3, #31
 80134b0:	d508      	bpl.n	80134c4 <_printf_i+0x14c>
 80134b2:	6923      	ldr	r3, [r4, #16]
 80134b4:	6861      	ldr	r1, [r4, #4]
 80134b6:	4299      	cmp	r1, r3
 80134b8:	bfde      	ittt	le
 80134ba:	2330      	movle	r3, #48	; 0x30
 80134bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80134c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80134c4:	1b92      	subs	r2, r2, r6
 80134c6:	6122      	str	r2, [r4, #16]
 80134c8:	f8cd a000 	str.w	sl, [sp]
 80134cc:	464b      	mov	r3, r9
 80134ce:	aa03      	add	r2, sp, #12
 80134d0:	4621      	mov	r1, r4
 80134d2:	4640      	mov	r0, r8
 80134d4:	f7ff fee2 	bl	801329c <_printf_common>
 80134d8:	3001      	adds	r0, #1
 80134da:	d14c      	bne.n	8013576 <_printf_i+0x1fe>
 80134dc:	f04f 30ff 	mov.w	r0, #4294967295
 80134e0:	b004      	add	sp, #16
 80134e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134e6:	4835      	ldr	r0, [pc, #212]	; (80135bc <_printf_i+0x244>)
 80134e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80134ec:	6823      	ldr	r3, [r4, #0]
 80134ee:	680e      	ldr	r6, [r1, #0]
 80134f0:	061f      	lsls	r7, r3, #24
 80134f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80134f6:	600e      	str	r6, [r1, #0]
 80134f8:	d514      	bpl.n	8013524 <_printf_i+0x1ac>
 80134fa:	07d9      	lsls	r1, r3, #31
 80134fc:	bf44      	itt	mi
 80134fe:	f043 0320 	orrmi.w	r3, r3, #32
 8013502:	6023      	strmi	r3, [r4, #0]
 8013504:	b91d      	cbnz	r5, 801350e <_printf_i+0x196>
 8013506:	6823      	ldr	r3, [r4, #0]
 8013508:	f023 0320 	bic.w	r3, r3, #32
 801350c:	6023      	str	r3, [r4, #0]
 801350e:	2310      	movs	r3, #16
 8013510:	e7b0      	b.n	8013474 <_printf_i+0xfc>
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	f043 0320 	orr.w	r3, r3, #32
 8013518:	6023      	str	r3, [r4, #0]
 801351a:	2378      	movs	r3, #120	; 0x78
 801351c:	4828      	ldr	r0, [pc, #160]	; (80135c0 <_printf_i+0x248>)
 801351e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013522:	e7e3      	b.n	80134ec <_printf_i+0x174>
 8013524:	065e      	lsls	r6, r3, #25
 8013526:	bf48      	it	mi
 8013528:	b2ad      	uxthmi	r5, r5
 801352a:	e7e6      	b.n	80134fa <_printf_i+0x182>
 801352c:	4616      	mov	r6, r2
 801352e:	e7bb      	b.n	80134a8 <_printf_i+0x130>
 8013530:	680b      	ldr	r3, [r1, #0]
 8013532:	6826      	ldr	r6, [r4, #0]
 8013534:	6960      	ldr	r0, [r4, #20]
 8013536:	1d1d      	adds	r5, r3, #4
 8013538:	600d      	str	r5, [r1, #0]
 801353a:	0635      	lsls	r5, r6, #24
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	d501      	bpl.n	8013544 <_printf_i+0x1cc>
 8013540:	6018      	str	r0, [r3, #0]
 8013542:	e002      	b.n	801354a <_printf_i+0x1d2>
 8013544:	0671      	lsls	r1, r6, #25
 8013546:	d5fb      	bpl.n	8013540 <_printf_i+0x1c8>
 8013548:	8018      	strh	r0, [r3, #0]
 801354a:	2300      	movs	r3, #0
 801354c:	6123      	str	r3, [r4, #16]
 801354e:	4616      	mov	r6, r2
 8013550:	e7ba      	b.n	80134c8 <_printf_i+0x150>
 8013552:	680b      	ldr	r3, [r1, #0]
 8013554:	1d1a      	adds	r2, r3, #4
 8013556:	600a      	str	r2, [r1, #0]
 8013558:	681e      	ldr	r6, [r3, #0]
 801355a:	6862      	ldr	r2, [r4, #4]
 801355c:	2100      	movs	r1, #0
 801355e:	4630      	mov	r0, r6
 8013560:	f7ec fec6 	bl	80002f0 <memchr>
 8013564:	b108      	cbz	r0, 801356a <_printf_i+0x1f2>
 8013566:	1b80      	subs	r0, r0, r6
 8013568:	6060      	str	r0, [r4, #4]
 801356a:	6863      	ldr	r3, [r4, #4]
 801356c:	6123      	str	r3, [r4, #16]
 801356e:	2300      	movs	r3, #0
 8013570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013574:	e7a8      	b.n	80134c8 <_printf_i+0x150>
 8013576:	6923      	ldr	r3, [r4, #16]
 8013578:	4632      	mov	r2, r6
 801357a:	4649      	mov	r1, r9
 801357c:	4640      	mov	r0, r8
 801357e:	47d0      	blx	sl
 8013580:	3001      	adds	r0, #1
 8013582:	d0ab      	beq.n	80134dc <_printf_i+0x164>
 8013584:	6823      	ldr	r3, [r4, #0]
 8013586:	079b      	lsls	r3, r3, #30
 8013588:	d413      	bmi.n	80135b2 <_printf_i+0x23a>
 801358a:	68e0      	ldr	r0, [r4, #12]
 801358c:	9b03      	ldr	r3, [sp, #12]
 801358e:	4298      	cmp	r0, r3
 8013590:	bfb8      	it	lt
 8013592:	4618      	movlt	r0, r3
 8013594:	e7a4      	b.n	80134e0 <_printf_i+0x168>
 8013596:	2301      	movs	r3, #1
 8013598:	4632      	mov	r2, r6
 801359a:	4649      	mov	r1, r9
 801359c:	4640      	mov	r0, r8
 801359e:	47d0      	blx	sl
 80135a0:	3001      	adds	r0, #1
 80135a2:	d09b      	beq.n	80134dc <_printf_i+0x164>
 80135a4:	3501      	adds	r5, #1
 80135a6:	68e3      	ldr	r3, [r4, #12]
 80135a8:	9903      	ldr	r1, [sp, #12]
 80135aa:	1a5b      	subs	r3, r3, r1
 80135ac:	42ab      	cmp	r3, r5
 80135ae:	dcf2      	bgt.n	8013596 <_printf_i+0x21e>
 80135b0:	e7eb      	b.n	801358a <_printf_i+0x212>
 80135b2:	2500      	movs	r5, #0
 80135b4:	f104 0619 	add.w	r6, r4, #25
 80135b8:	e7f5      	b.n	80135a6 <_printf_i+0x22e>
 80135ba:	bf00      	nop
 80135bc:	0801552a 	.word	0x0801552a
 80135c0:	0801553b 	.word	0x0801553b

080135c4 <_sbrk_r>:
 80135c4:	b538      	push	{r3, r4, r5, lr}
 80135c6:	4d06      	ldr	r5, [pc, #24]	; (80135e0 <_sbrk_r+0x1c>)
 80135c8:	2300      	movs	r3, #0
 80135ca:	4604      	mov	r4, r0
 80135cc:	4608      	mov	r0, r1
 80135ce:	602b      	str	r3, [r5, #0]
 80135d0:	f7ed fee2 	bl	8001398 <_sbrk>
 80135d4:	1c43      	adds	r3, r0, #1
 80135d6:	d102      	bne.n	80135de <_sbrk_r+0x1a>
 80135d8:	682b      	ldr	r3, [r5, #0]
 80135da:	b103      	cbz	r3, 80135de <_sbrk_r+0x1a>
 80135dc:	6023      	str	r3, [r4, #0]
 80135de:	bd38      	pop	{r3, r4, r5, pc}
 80135e0:	24004078 	.word	0x24004078

080135e4 <quorem>:
 80135e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e8:	6903      	ldr	r3, [r0, #16]
 80135ea:	690c      	ldr	r4, [r1, #16]
 80135ec:	42a3      	cmp	r3, r4
 80135ee:	4607      	mov	r7, r0
 80135f0:	f2c0 8081 	blt.w	80136f6 <quorem+0x112>
 80135f4:	3c01      	subs	r4, #1
 80135f6:	f101 0814 	add.w	r8, r1, #20
 80135fa:	f100 0514 	add.w	r5, r0, #20
 80135fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013602:	9301      	str	r3, [sp, #4]
 8013604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801360c:	3301      	adds	r3, #1
 801360e:	429a      	cmp	r2, r3
 8013610:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013614:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013618:	fbb2 f6f3 	udiv	r6, r2, r3
 801361c:	d331      	bcc.n	8013682 <quorem+0x9e>
 801361e:	f04f 0e00 	mov.w	lr, #0
 8013622:	4640      	mov	r0, r8
 8013624:	46ac      	mov	ip, r5
 8013626:	46f2      	mov	sl, lr
 8013628:	f850 2b04 	ldr.w	r2, [r0], #4
 801362c:	b293      	uxth	r3, r2
 801362e:	fb06 e303 	mla	r3, r6, r3, lr
 8013632:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013636:	b29b      	uxth	r3, r3
 8013638:	ebaa 0303 	sub.w	r3, sl, r3
 801363c:	0c12      	lsrs	r2, r2, #16
 801363e:	f8dc a000 	ldr.w	sl, [ip]
 8013642:	fb06 e202 	mla	r2, r6, r2, lr
 8013646:	fa13 f38a 	uxtah	r3, r3, sl
 801364a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801364e:	fa1f fa82 	uxth.w	sl, r2
 8013652:	f8dc 2000 	ldr.w	r2, [ip]
 8013656:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801365a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801365e:	b29b      	uxth	r3, r3
 8013660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013664:	4581      	cmp	r9, r0
 8013666:	f84c 3b04 	str.w	r3, [ip], #4
 801366a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801366e:	d2db      	bcs.n	8013628 <quorem+0x44>
 8013670:	f855 300b 	ldr.w	r3, [r5, fp]
 8013674:	b92b      	cbnz	r3, 8013682 <quorem+0x9e>
 8013676:	9b01      	ldr	r3, [sp, #4]
 8013678:	3b04      	subs	r3, #4
 801367a:	429d      	cmp	r5, r3
 801367c:	461a      	mov	r2, r3
 801367e:	d32e      	bcc.n	80136de <quorem+0xfa>
 8013680:	613c      	str	r4, [r7, #16]
 8013682:	4638      	mov	r0, r7
 8013684:	f001 f85a 	bl	801473c <__mcmp>
 8013688:	2800      	cmp	r0, #0
 801368a:	db24      	blt.n	80136d6 <quorem+0xf2>
 801368c:	3601      	adds	r6, #1
 801368e:	4628      	mov	r0, r5
 8013690:	f04f 0c00 	mov.w	ip, #0
 8013694:	f858 2b04 	ldr.w	r2, [r8], #4
 8013698:	f8d0 e000 	ldr.w	lr, [r0]
 801369c:	b293      	uxth	r3, r2
 801369e:	ebac 0303 	sub.w	r3, ip, r3
 80136a2:	0c12      	lsrs	r2, r2, #16
 80136a4:	fa13 f38e 	uxtah	r3, r3, lr
 80136a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80136ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80136b0:	b29b      	uxth	r3, r3
 80136b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80136b6:	45c1      	cmp	r9, r8
 80136b8:	f840 3b04 	str.w	r3, [r0], #4
 80136bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80136c0:	d2e8      	bcs.n	8013694 <quorem+0xb0>
 80136c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136ca:	b922      	cbnz	r2, 80136d6 <quorem+0xf2>
 80136cc:	3b04      	subs	r3, #4
 80136ce:	429d      	cmp	r5, r3
 80136d0:	461a      	mov	r2, r3
 80136d2:	d30a      	bcc.n	80136ea <quorem+0x106>
 80136d4:	613c      	str	r4, [r7, #16]
 80136d6:	4630      	mov	r0, r6
 80136d8:	b003      	add	sp, #12
 80136da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136de:	6812      	ldr	r2, [r2, #0]
 80136e0:	3b04      	subs	r3, #4
 80136e2:	2a00      	cmp	r2, #0
 80136e4:	d1cc      	bne.n	8013680 <quorem+0x9c>
 80136e6:	3c01      	subs	r4, #1
 80136e8:	e7c7      	b.n	801367a <quorem+0x96>
 80136ea:	6812      	ldr	r2, [r2, #0]
 80136ec:	3b04      	subs	r3, #4
 80136ee:	2a00      	cmp	r2, #0
 80136f0:	d1f0      	bne.n	80136d4 <quorem+0xf0>
 80136f2:	3c01      	subs	r4, #1
 80136f4:	e7eb      	b.n	80136ce <quorem+0xea>
 80136f6:	2000      	movs	r0, #0
 80136f8:	e7ee      	b.n	80136d8 <quorem+0xf4>
 80136fa:	0000      	movs	r0, r0
 80136fc:	0000      	movs	r0, r0
	...

08013700 <_dtoa_r>:
 8013700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013704:	ec59 8b10 	vmov	r8, r9, d0
 8013708:	b095      	sub	sp, #84	; 0x54
 801370a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801370c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801370e:	9107      	str	r1, [sp, #28]
 8013710:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013714:	4606      	mov	r6, r0
 8013716:	9209      	str	r2, [sp, #36]	; 0x24
 8013718:	9310      	str	r3, [sp, #64]	; 0x40
 801371a:	b975      	cbnz	r5, 801373a <_dtoa_r+0x3a>
 801371c:	2010      	movs	r0, #16
 801371e:	f7ff fa4b 	bl	8012bb8 <malloc>
 8013722:	4602      	mov	r2, r0
 8013724:	6270      	str	r0, [r6, #36]	; 0x24
 8013726:	b920      	cbnz	r0, 8013732 <_dtoa_r+0x32>
 8013728:	4bab      	ldr	r3, [pc, #684]	; (80139d8 <_dtoa_r+0x2d8>)
 801372a:	21ea      	movs	r1, #234	; 0xea
 801372c:	48ab      	ldr	r0, [pc, #684]	; (80139dc <_dtoa_r+0x2dc>)
 801372e:	f001 f915 	bl	801495c <__assert_func>
 8013732:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013736:	6005      	str	r5, [r0, #0]
 8013738:	60c5      	str	r5, [r0, #12]
 801373a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801373c:	6819      	ldr	r1, [r3, #0]
 801373e:	b151      	cbz	r1, 8013756 <_dtoa_r+0x56>
 8013740:	685a      	ldr	r2, [r3, #4]
 8013742:	604a      	str	r2, [r1, #4]
 8013744:	2301      	movs	r3, #1
 8013746:	4093      	lsls	r3, r2
 8013748:	608b      	str	r3, [r1, #8]
 801374a:	4630      	mov	r0, r6
 801374c:	f000 fdb8 	bl	80142c0 <_Bfree>
 8013750:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013752:	2200      	movs	r2, #0
 8013754:	601a      	str	r2, [r3, #0]
 8013756:	f1b9 0300 	subs.w	r3, r9, #0
 801375a:	bfbb      	ittet	lt
 801375c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013760:	9303      	strlt	r3, [sp, #12]
 8013762:	2300      	movge	r3, #0
 8013764:	2201      	movlt	r2, #1
 8013766:	bfac      	ite	ge
 8013768:	6023      	strge	r3, [r4, #0]
 801376a:	6022      	strlt	r2, [r4, #0]
 801376c:	4b9c      	ldr	r3, [pc, #624]	; (80139e0 <_dtoa_r+0x2e0>)
 801376e:	9c03      	ldr	r4, [sp, #12]
 8013770:	43a3      	bics	r3, r4
 8013772:	d11a      	bne.n	80137aa <_dtoa_r+0xaa>
 8013774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013776:	f242 730f 	movw	r3, #9999	; 0x270f
 801377a:	6013      	str	r3, [r2, #0]
 801377c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8013780:	ea53 0308 	orrs.w	r3, r3, r8
 8013784:	f000 8512 	beq.w	80141ac <_dtoa_r+0xaac>
 8013788:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801378a:	b953      	cbnz	r3, 80137a2 <_dtoa_r+0xa2>
 801378c:	4b95      	ldr	r3, [pc, #596]	; (80139e4 <_dtoa_r+0x2e4>)
 801378e:	e01f      	b.n	80137d0 <_dtoa_r+0xd0>
 8013790:	4b95      	ldr	r3, [pc, #596]	; (80139e8 <_dtoa_r+0x2e8>)
 8013792:	9300      	str	r3, [sp, #0]
 8013794:	3308      	adds	r3, #8
 8013796:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013798:	6013      	str	r3, [r2, #0]
 801379a:	9800      	ldr	r0, [sp, #0]
 801379c:	b015      	add	sp, #84	; 0x54
 801379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a2:	4b90      	ldr	r3, [pc, #576]	; (80139e4 <_dtoa_r+0x2e4>)
 80137a4:	9300      	str	r3, [sp, #0]
 80137a6:	3303      	adds	r3, #3
 80137a8:	e7f5      	b.n	8013796 <_dtoa_r+0x96>
 80137aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80137b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80137ba:	d10b      	bne.n	80137d4 <_dtoa_r+0xd4>
 80137bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80137be:	2301      	movs	r3, #1
 80137c0:	6013      	str	r3, [r2, #0]
 80137c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	f000 84ee 	beq.w	80141a6 <_dtoa_r+0xaa6>
 80137ca:	4888      	ldr	r0, [pc, #544]	; (80139ec <_dtoa_r+0x2ec>)
 80137cc:	6018      	str	r0, [r3, #0]
 80137ce:	1e43      	subs	r3, r0, #1
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	e7e2      	b.n	801379a <_dtoa_r+0x9a>
 80137d4:	a913      	add	r1, sp, #76	; 0x4c
 80137d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80137da:	aa12      	add	r2, sp, #72	; 0x48
 80137dc:	4630      	mov	r0, r6
 80137de:	f001 f851 	bl	8014884 <__d2b>
 80137e2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80137e6:	4605      	mov	r5, r0
 80137e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80137ea:	2900      	cmp	r1, #0
 80137ec:	d047      	beq.n	801387e <_dtoa_r+0x17e>
 80137ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80137f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80137f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80137f8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80137fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013800:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013804:	2400      	movs	r4, #0
 8013806:	ec43 2b16 	vmov	d6, r2, r3
 801380a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801380e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80139c0 <_dtoa_r+0x2c0>
 8013812:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013816:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80139c8 <_dtoa_r+0x2c8>
 801381a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801381e:	eeb0 7b46 	vmov.f64	d7, d6
 8013822:	ee06 1a90 	vmov	s13, r1
 8013826:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801382a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80139d0 <_dtoa_r+0x2d0>
 801382e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013832:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013836:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801383e:	ee16 ba90 	vmov	fp, s13
 8013842:	9411      	str	r4, [sp, #68]	; 0x44
 8013844:	d508      	bpl.n	8013858 <_dtoa_r+0x158>
 8013846:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801384a:	eeb4 6b47 	vcmp.f64	d6, d7
 801384e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013852:	bf18      	it	ne
 8013854:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013858:	f1bb 0f16 	cmp.w	fp, #22
 801385c:	d832      	bhi.n	80138c4 <_dtoa_r+0x1c4>
 801385e:	4b64      	ldr	r3, [pc, #400]	; (80139f0 <_dtoa_r+0x2f0>)
 8013860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013864:	ed93 7b00 	vldr	d7, [r3]
 8013868:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801386c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013874:	d501      	bpl.n	801387a <_dtoa_r+0x17a>
 8013876:	f10b 3bff 	add.w	fp, fp, #4294967295
 801387a:	2300      	movs	r3, #0
 801387c:	e023      	b.n	80138c6 <_dtoa_r+0x1c6>
 801387e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013880:	4401      	add	r1, r0
 8013882:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8013886:	2b20      	cmp	r3, #32
 8013888:	bfc3      	ittte	gt
 801388a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801388e:	fa04 f303 	lslgt.w	r3, r4, r3
 8013892:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013896:	f1c3 0320 	rsble	r3, r3, #32
 801389a:	bfc6      	itte	gt
 801389c:	fa28 f804 	lsrgt.w	r8, r8, r4
 80138a0:	ea43 0308 	orrgt.w	r3, r3, r8
 80138a4:	fa08 f303 	lslle.w	r3, r8, r3
 80138a8:	ee07 3a90 	vmov	s15, r3
 80138ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80138b0:	3901      	subs	r1, #1
 80138b2:	ed8d 7b00 	vstr	d7, [sp]
 80138b6:	9c01      	ldr	r4, [sp, #4]
 80138b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80138bc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80138c0:	2401      	movs	r4, #1
 80138c2:	e7a0      	b.n	8013806 <_dtoa_r+0x106>
 80138c4:	2301      	movs	r3, #1
 80138c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80138c8:	1a43      	subs	r3, r0, r1
 80138ca:	1e5a      	subs	r2, r3, #1
 80138cc:	bf45      	ittet	mi
 80138ce:	f1c3 0301 	rsbmi	r3, r3, #1
 80138d2:	9305      	strmi	r3, [sp, #20]
 80138d4:	2300      	movpl	r3, #0
 80138d6:	2300      	movmi	r3, #0
 80138d8:	9206      	str	r2, [sp, #24]
 80138da:	bf54      	ite	pl
 80138dc:	9305      	strpl	r3, [sp, #20]
 80138de:	9306      	strmi	r3, [sp, #24]
 80138e0:	f1bb 0f00 	cmp.w	fp, #0
 80138e4:	db18      	blt.n	8013918 <_dtoa_r+0x218>
 80138e6:	9b06      	ldr	r3, [sp, #24]
 80138e8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80138ec:	445b      	add	r3, fp
 80138ee:	9306      	str	r3, [sp, #24]
 80138f0:	2300      	movs	r3, #0
 80138f2:	9a07      	ldr	r2, [sp, #28]
 80138f4:	2a09      	cmp	r2, #9
 80138f6:	d849      	bhi.n	801398c <_dtoa_r+0x28c>
 80138f8:	2a05      	cmp	r2, #5
 80138fa:	bfc4      	itt	gt
 80138fc:	3a04      	subgt	r2, #4
 80138fe:	9207      	strgt	r2, [sp, #28]
 8013900:	9a07      	ldr	r2, [sp, #28]
 8013902:	f1a2 0202 	sub.w	r2, r2, #2
 8013906:	bfcc      	ite	gt
 8013908:	2400      	movgt	r4, #0
 801390a:	2401      	movle	r4, #1
 801390c:	2a03      	cmp	r2, #3
 801390e:	d848      	bhi.n	80139a2 <_dtoa_r+0x2a2>
 8013910:	e8df f002 	tbb	[pc, r2]
 8013914:	3a2c2e0b 	.word	0x3a2c2e0b
 8013918:	9b05      	ldr	r3, [sp, #20]
 801391a:	2200      	movs	r2, #0
 801391c:	eba3 030b 	sub.w	r3, r3, fp
 8013920:	9305      	str	r3, [sp, #20]
 8013922:	920e      	str	r2, [sp, #56]	; 0x38
 8013924:	f1cb 0300 	rsb	r3, fp, #0
 8013928:	e7e3      	b.n	80138f2 <_dtoa_r+0x1f2>
 801392a:	2200      	movs	r2, #0
 801392c:	9208      	str	r2, [sp, #32]
 801392e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013930:	2a00      	cmp	r2, #0
 8013932:	dc39      	bgt.n	80139a8 <_dtoa_r+0x2a8>
 8013934:	f04f 0a01 	mov.w	sl, #1
 8013938:	46d1      	mov	r9, sl
 801393a:	4652      	mov	r2, sl
 801393c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013940:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013942:	2100      	movs	r1, #0
 8013944:	6079      	str	r1, [r7, #4]
 8013946:	2004      	movs	r0, #4
 8013948:	f100 0c14 	add.w	ip, r0, #20
 801394c:	4594      	cmp	ip, r2
 801394e:	6879      	ldr	r1, [r7, #4]
 8013950:	d92f      	bls.n	80139b2 <_dtoa_r+0x2b2>
 8013952:	4630      	mov	r0, r6
 8013954:	930c      	str	r3, [sp, #48]	; 0x30
 8013956:	f000 fc73 	bl	8014240 <_Balloc>
 801395a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801395c:	9000      	str	r0, [sp, #0]
 801395e:	4602      	mov	r2, r0
 8013960:	2800      	cmp	r0, #0
 8013962:	d149      	bne.n	80139f8 <_dtoa_r+0x2f8>
 8013964:	4b23      	ldr	r3, [pc, #140]	; (80139f4 <_dtoa_r+0x2f4>)
 8013966:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801396a:	e6df      	b.n	801372c <_dtoa_r+0x2c>
 801396c:	2201      	movs	r2, #1
 801396e:	e7dd      	b.n	801392c <_dtoa_r+0x22c>
 8013970:	2200      	movs	r2, #0
 8013972:	9208      	str	r2, [sp, #32]
 8013974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013976:	eb0b 0a02 	add.w	sl, fp, r2
 801397a:	f10a 0901 	add.w	r9, sl, #1
 801397e:	464a      	mov	r2, r9
 8013980:	2a01      	cmp	r2, #1
 8013982:	bfb8      	it	lt
 8013984:	2201      	movlt	r2, #1
 8013986:	e7db      	b.n	8013940 <_dtoa_r+0x240>
 8013988:	2201      	movs	r2, #1
 801398a:	e7f2      	b.n	8013972 <_dtoa_r+0x272>
 801398c:	2401      	movs	r4, #1
 801398e:	2200      	movs	r2, #0
 8013990:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013994:	f04f 3aff 	mov.w	sl, #4294967295
 8013998:	2100      	movs	r1, #0
 801399a:	46d1      	mov	r9, sl
 801399c:	2212      	movs	r2, #18
 801399e:	9109      	str	r1, [sp, #36]	; 0x24
 80139a0:	e7ce      	b.n	8013940 <_dtoa_r+0x240>
 80139a2:	2201      	movs	r2, #1
 80139a4:	9208      	str	r2, [sp, #32]
 80139a6:	e7f5      	b.n	8013994 <_dtoa_r+0x294>
 80139a8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80139ac:	46d1      	mov	r9, sl
 80139ae:	4652      	mov	r2, sl
 80139b0:	e7c6      	b.n	8013940 <_dtoa_r+0x240>
 80139b2:	3101      	adds	r1, #1
 80139b4:	6079      	str	r1, [r7, #4]
 80139b6:	0040      	lsls	r0, r0, #1
 80139b8:	e7c6      	b.n	8013948 <_dtoa_r+0x248>
 80139ba:	bf00      	nop
 80139bc:	f3af 8000 	nop.w
 80139c0:	636f4361 	.word	0x636f4361
 80139c4:	3fd287a7 	.word	0x3fd287a7
 80139c8:	8b60c8b3 	.word	0x8b60c8b3
 80139cc:	3fc68a28 	.word	0x3fc68a28
 80139d0:	509f79fb 	.word	0x509f79fb
 80139d4:	3fd34413 	.word	0x3fd34413
 80139d8:	08015559 	.word	0x08015559
 80139dc:	08015570 	.word	0x08015570
 80139e0:	7ff00000 	.word	0x7ff00000
 80139e4:	08015555 	.word	0x08015555
 80139e8:	0801554c 	.word	0x0801554c
 80139ec:	08015529 	.word	0x08015529
 80139f0:	08015668 	.word	0x08015668
 80139f4:	080155cf 	.word	0x080155cf
 80139f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80139fa:	9900      	ldr	r1, [sp, #0]
 80139fc:	6011      	str	r1, [r2, #0]
 80139fe:	f1b9 0f0e 	cmp.w	r9, #14
 8013a02:	d872      	bhi.n	8013aea <_dtoa_r+0x3ea>
 8013a04:	2c00      	cmp	r4, #0
 8013a06:	d070      	beq.n	8013aea <_dtoa_r+0x3ea>
 8013a08:	f1bb 0f00 	cmp.w	fp, #0
 8013a0c:	f340 80a6 	ble.w	8013b5c <_dtoa_r+0x45c>
 8013a10:	49ca      	ldr	r1, [pc, #808]	; (8013d3c <_dtoa_r+0x63c>)
 8013a12:	f00b 020f 	and.w	r2, fp, #15
 8013a16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013a1a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013a1e:	ed92 7b00 	vldr	d7, [r2]
 8013a22:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013a26:	f000 808d 	beq.w	8013b44 <_dtoa_r+0x444>
 8013a2a:	4ac5      	ldr	r2, [pc, #788]	; (8013d40 <_dtoa_r+0x640>)
 8013a2c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8013a30:	ed92 6b08 	vldr	d6, [r2, #32]
 8013a34:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8013a38:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013a3c:	f001 010f 	and.w	r1, r1, #15
 8013a40:	2203      	movs	r2, #3
 8013a42:	48bf      	ldr	r0, [pc, #764]	; (8013d40 <_dtoa_r+0x640>)
 8013a44:	2900      	cmp	r1, #0
 8013a46:	d17f      	bne.n	8013b48 <_dtoa_r+0x448>
 8013a48:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013a4c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013a50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013a56:	2900      	cmp	r1, #0
 8013a58:	f000 80b2 	beq.w	8013bc0 <_dtoa_r+0x4c0>
 8013a5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013a60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a6c:	f140 80a8 	bpl.w	8013bc0 <_dtoa_r+0x4c0>
 8013a70:	f1b9 0f00 	cmp.w	r9, #0
 8013a74:	f000 80a4 	beq.w	8013bc0 <_dtoa_r+0x4c0>
 8013a78:	f1ba 0f00 	cmp.w	sl, #0
 8013a7c:	dd31      	ble.n	8013ae2 <_dtoa_r+0x3e2>
 8013a7e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013a82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a8a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013a8e:	3201      	adds	r2, #1
 8013a90:	4650      	mov	r0, sl
 8013a92:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013a96:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013a9a:	ee07 2a90 	vmov	s15, r2
 8013a9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013aa2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013aa6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8013aaa:	9c03      	ldr	r4, [sp, #12]
 8013aac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013ab0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013ab4:	2800      	cmp	r0, #0
 8013ab6:	f040 8086 	bne.w	8013bc6 <_dtoa_r+0x4c6>
 8013aba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013abe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013ac2:	ec42 1b17 	vmov	d7, r1, r2
 8013ac6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ace:	f300 8272 	bgt.w	8013fb6 <_dtoa_r+0x8b6>
 8013ad2:	eeb1 7b47 	vneg.f64	d7, d7
 8013ad6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ade:	f100 8267 	bmi.w	8013fb0 <_dtoa_r+0x8b0>
 8013ae2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8013ae6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013aea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013aec:	2a00      	cmp	r2, #0
 8013aee:	f2c0 8129 	blt.w	8013d44 <_dtoa_r+0x644>
 8013af2:	f1bb 0f0e 	cmp.w	fp, #14
 8013af6:	f300 8125 	bgt.w	8013d44 <_dtoa_r+0x644>
 8013afa:	4b90      	ldr	r3, [pc, #576]	; (8013d3c <_dtoa_r+0x63c>)
 8013afc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013b00:	ed93 6b00 	vldr	d6, [r3]
 8013b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	f280 80c3 	bge.w	8013c92 <_dtoa_r+0x592>
 8013b0c:	f1b9 0f00 	cmp.w	r9, #0
 8013b10:	f300 80bf 	bgt.w	8013c92 <_dtoa_r+0x592>
 8013b14:	f040 824c 	bne.w	8013fb0 <_dtoa_r+0x8b0>
 8013b18:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013b1c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013b20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013b24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b2c:	464c      	mov	r4, r9
 8013b2e:	464f      	mov	r7, r9
 8013b30:	f280 8222 	bge.w	8013f78 <_dtoa_r+0x878>
 8013b34:	f8dd 8000 	ldr.w	r8, [sp]
 8013b38:	2331      	movs	r3, #49	; 0x31
 8013b3a:	f808 3b01 	strb.w	r3, [r8], #1
 8013b3e:	f10b 0b01 	add.w	fp, fp, #1
 8013b42:	e21e      	b.n	8013f82 <_dtoa_r+0x882>
 8013b44:	2202      	movs	r2, #2
 8013b46:	e77c      	b.n	8013a42 <_dtoa_r+0x342>
 8013b48:	07cc      	lsls	r4, r1, #31
 8013b4a:	d504      	bpl.n	8013b56 <_dtoa_r+0x456>
 8013b4c:	ed90 6b00 	vldr	d6, [r0]
 8013b50:	3201      	adds	r2, #1
 8013b52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b56:	1049      	asrs	r1, r1, #1
 8013b58:	3008      	adds	r0, #8
 8013b5a:	e773      	b.n	8013a44 <_dtoa_r+0x344>
 8013b5c:	d02e      	beq.n	8013bbc <_dtoa_r+0x4bc>
 8013b5e:	f1cb 0100 	rsb	r1, fp, #0
 8013b62:	4a76      	ldr	r2, [pc, #472]	; (8013d3c <_dtoa_r+0x63c>)
 8013b64:	f001 000f 	and.w	r0, r1, #15
 8013b68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013b6c:	ed92 7b00 	vldr	d7, [r2]
 8013b70:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8013b74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013b78:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013b7c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8013b80:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013b84:	486e      	ldr	r0, [pc, #440]	; (8013d40 <_dtoa_r+0x640>)
 8013b86:	1109      	asrs	r1, r1, #4
 8013b88:	2400      	movs	r4, #0
 8013b8a:	2202      	movs	r2, #2
 8013b8c:	b939      	cbnz	r1, 8013b9e <_dtoa_r+0x49e>
 8013b8e:	2c00      	cmp	r4, #0
 8013b90:	f43f af60 	beq.w	8013a54 <_dtoa_r+0x354>
 8013b94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b9c:	e75a      	b.n	8013a54 <_dtoa_r+0x354>
 8013b9e:	07cf      	lsls	r7, r1, #31
 8013ba0:	d509      	bpl.n	8013bb6 <_dtoa_r+0x4b6>
 8013ba2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8013ba6:	ed90 7b00 	vldr	d7, [r0]
 8013baa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013bae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013bb2:	3201      	adds	r2, #1
 8013bb4:	2401      	movs	r4, #1
 8013bb6:	1049      	asrs	r1, r1, #1
 8013bb8:	3008      	adds	r0, #8
 8013bba:	e7e7      	b.n	8013b8c <_dtoa_r+0x48c>
 8013bbc:	2202      	movs	r2, #2
 8013bbe:	e749      	b.n	8013a54 <_dtoa_r+0x354>
 8013bc0:	465f      	mov	r7, fp
 8013bc2:	4648      	mov	r0, r9
 8013bc4:	e765      	b.n	8013a92 <_dtoa_r+0x392>
 8013bc6:	ec42 1b17 	vmov	d7, r1, r2
 8013bca:	4a5c      	ldr	r2, [pc, #368]	; (8013d3c <_dtoa_r+0x63c>)
 8013bcc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013bd0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013bd4:	9a00      	ldr	r2, [sp, #0]
 8013bd6:	1814      	adds	r4, r2, r0
 8013bd8:	9a08      	ldr	r2, [sp, #32]
 8013bda:	b352      	cbz	r2, 8013c32 <_dtoa_r+0x532>
 8013bdc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013be0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013be4:	f8dd 8000 	ldr.w	r8, [sp]
 8013be8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013bec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013bf0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013bf4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013bf8:	ee14 2a90 	vmov	r2, s9
 8013bfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013c00:	3230      	adds	r2, #48	; 0x30
 8013c02:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013c06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c0e:	f808 2b01 	strb.w	r2, [r8], #1
 8013c12:	d439      	bmi.n	8013c88 <_dtoa_r+0x588>
 8013c14:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013c18:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c20:	d472      	bmi.n	8013d08 <_dtoa_r+0x608>
 8013c22:	45a0      	cmp	r8, r4
 8013c24:	f43f af5d 	beq.w	8013ae2 <_dtoa_r+0x3e2>
 8013c28:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013c2c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013c30:	e7e0      	b.n	8013bf4 <_dtoa_r+0x4f4>
 8013c32:	f8dd 8000 	ldr.w	r8, [sp]
 8013c36:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013c3a:	4621      	mov	r1, r4
 8013c3c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013c40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013c44:	ee14 2a90 	vmov	r2, s9
 8013c48:	3230      	adds	r2, #48	; 0x30
 8013c4a:	f808 2b01 	strb.w	r2, [r8], #1
 8013c4e:	45a0      	cmp	r8, r4
 8013c50:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013c54:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013c58:	d118      	bne.n	8013c8c <_dtoa_r+0x58c>
 8013c5a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013c5e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013c62:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c6a:	dc4d      	bgt.n	8013d08 <_dtoa_r+0x608>
 8013c6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013c70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c78:	f57f af33 	bpl.w	8013ae2 <_dtoa_r+0x3e2>
 8013c7c:	4688      	mov	r8, r1
 8013c7e:	3901      	subs	r1, #1
 8013c80:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013c84:	2b30      	cmp	r3, #48	; 0x30
 8013c86:	d0f9      	beq.n	8013c7c <_dtoa_r+0x57c>
 8013c88:	46bb      	mov	fp, r7
 8013c8a:	e02a      	b.n	8013ce2 <_dtoa_r+0x5e2>
 8013c8c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013c90:	e7d6      	b.n	8013c40 <_dtoa_r+0x540>
 8013c92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c96:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013c9a:	f8dd 8000 	ldr.w	r8, [sp]
 8013c9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013ca2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013ca6:	ee15 3a10 	vmov	r3, s10
 8013caa:	3330      	adds	r3, #48	; 0x30
 8013cac:	f808 3b01 	strb.w	r3, [r8], #1
 8013cb0:	9b00      	ldr	r3, [sp, #0]
 8013cb2:	eba8 0303 	sub.w	r3, r8, r3
 8013cb6:	4599      	cmp	r9, r3
 8013cb8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013cbc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013cc0:	d133      	bne.n	8013d2a <_dtoa_r+0x62a>
 8013cc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013cc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cce:	dc1a      	bgt.n	8013d06 <_dtoa_r+0x606>
 8013cd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8013cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd8:	d103      	bne.n	8013ce2 <_dtoa_r+0x5e2>
 8013cda:	ee15 3a10 	vmov	r3, s10
 8013cde:	07d9      	lsls	r1, r3, #31
 8013ce0:	d411      	bmi.n	8013d06 <_dtoa_r+0x606>
 8013ce2:	4629      	mov	r1, r5
 8013ce4:	4630      	mov	r0, r6
 8013ce6:	f000 faeb 	bl	80142c0 <_Bfree>
 8013cea:	2300      	movs	r3, #0
 8013cec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013cee:	f888 3000 	strb.w	r3, [r8]
 8013cf2:	f10b 0301 	add.w	r3, fp, #1
 8013cf6:	6013      	str	r3, [r2, #0]
 8013cf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	f43f ad4d 	beq.w	801379a <_dtoa_r+0x9a>
 8013d00:	f8c3 8000 	str.w	r8, [r3]
 8013d04:	e549      	b.n	801379a <_dtoa_r+0x9a>
 8013d06:	465f      	mov	r7, fp
 8013d08:	4643      	mov	r3, r8
 8013d0a:	4698      	mov	r8, r3
 8013d0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d10:	2a39      	cmp	r2, #57	; 0x39
 8013d12:	d106      	bne.n	8013d22 <_dtoa_r+0x622>
 8013d14:	9a00      	ldr	r2, [sp, #0]
 8013d16:	429a      	cmp	r2, r3
 8013d18:	d1f7      	bne.n	8013d0a <_dtoa_r+0x60a>
 8013d1a:	9900      	ldr	r1, [sp, #0]
 8013d1c:	2230      	movs	r2, #48	; 0x30
 8013d1e:	3701      	adds	r7, #1
 8013d20:	700a      	strb	r2, [r1, #0]
 8013d22:	781a      	ldrb	r2, [r3, #0]
 8013d24:	3201      	adds	r2, #1
 8013d26:	701a      	strb	r2, [r3, #0]
 8013d28:	e7ae      	b.n	8013c88 <_dtoa_r+0x588>
 8013d2a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013d2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d36:	d1b2      	bne.n	8013c9e <_dtoa_r+0x59e>
 8013d38:	e7d3      	b.n	8013ce2 <_dtoa_r+0x5e2>
 8013d3a:	bf00      	nop
 8013d3c:	08015668 	.word	0x08015668
 8013d40:	08015640 	.word	0x08015640
 8013d44:	9908      	ldr	r1, [sp, #32]
 8013d46:	2900      	cmp	r1, #0
 8013d48:	f000 80d1 	beq.w	8013eee <_dtoa_r+0x7ee>
 8013d4c:	9907      	ldr	r1, [sp, #28]
 8013d4e:	2901      	cmp	r1, #1
 8013d50:	f300 80b4 	bgt.w	8013ebc <_dtoa_r+0x7bc>
 8013d54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013d56:	2900      	cmp	r1, #0
 8013d58:	f000 80ac 	beq.w	8013eb4 <_dtoa_r+0x7b4>
 8013d5c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013d60:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013d64:	461c      	mov	r4, r3
 8013d66:	930a      	str	r3, [sp, #40]	; 0x28
 8013d68:	9b05      	ldr	r3, [sp, #20]
 8013d6a:	4413      	add	r3, r2
 8013d6c:	9305      	str	r3, [sp, #20]
 8013d6e:	9b06      	ldr	r3, [sp, #24]
 8013d70:	2101      	movs	r1, #1
 8013d72:	4413      	add	r3, r2
 8013d74:	4630      	mov	r0, r6
 8013d76:	9306      	str	r3, [sp, #24]
 8013d78:	f000 fb5e 	bl	8014438 <__i2b>
 8013d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d7e:	4607      	mov	r7, r0
 8013d80:	f1b8 0f00 	cmp.w	r8, #0
 8013d84:	dd0d      	ble.n	8013da2 <_dtoa_r+0x6a2>
 8013d86:	9a06      	ldr	r2, [sp, #24]
 8013d88:	2a00      	cmp	r2, #0
 8013d8a:	dd0a      	ble.n	8013da2 <_dtoa_r+0x6a2>
 8013d8c:	4542      	cmp	r2, r8
 8013d8e:	9905      	ldr	r1, [sp, #20]
 8013d90:	bfa8      	it	ge
 8013d92:	4642      	movge	r2, r8
 8013d94:	1a89      	subs	r1, r1, r2
 8013d96:	9105      	str	r1, [sp, #20]
 8013d98:	9906      	ldr	r1, [sp, #24]
 8013d9a:	eba8 0802 	sub.w	r8, r8, r2
 8013d9e:	1a8a      	subs	r2, r1, r2
 8013da0:	9206      	str	r2, [sp, #24]
 8013da2:	b303      	cbz	r3, 8013de6 <_dtoa_r+0x6e6>
 8013da4:	9a08      	ldr	r2, [sp, #32]
 8013da6:	2a00      	cmp	r2, #0
 8013da8:	f000 80a6 	beq.w	8013ef8 <_dtoa_r+0x7f8>
 8013dac:	2c00      	cmp	r4, #0
 8013dae:	dd13      	ble.n	8013dd8 <_dtoa_r+0x6d8>
 8013db0:	4639      	mov	r1, r7
 8013db2:	4622      	mov	r2, r4
 8013db4:	4630      	mov	r0, r6
 8013db6:	930c      	str	r3, [sp, #48]	; 0x30
 8013db8:	f000 fbfa 	bl	80145b0 <__pow5mult>
 8013dbc:	462a      	mov	r2, r5
 8013dbe:	4601      	mov	r1, r0
 8013dc0:	4607      	mov	r7, r0
 8013dc2:	4630      	mov	r0, r6
 8013dc4:	f000 fb4e 	bl	8014464 <__multiply>
 8013dc8:	4629      	mov	r1, r5
 8013dca:	900a      	str	r0, [sp, #40]	; 0x28
 8013dcc:	4630      	mov	r0, r6
 8013dce:	f000 fa77 	bl	80142c0 <_Bfree>
 8013dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013dd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dd6:	4615      	mov	r5, r2
 8013dd8:	1b1a      	subs	r2, r3, r4
 8013dda:	d004      	beq.n	8013de6 <_dtoa_r+0x6e6>
 8013ddc:	4629      	mov	r1, r5
 8013dde:	4630      	mov	r0, r6
 8013de0:	f000 fbe6 	bl	80145b0 <__pow5mult>
 8013de4:	4605      	mov	r5, r0
 8013de6:	2101      	movs	r1, #1
 8013de8:	4630      	mov	r0, r6
 8013dea:	f000 fb25 	bl	8014438 <__i2b>
 8013dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	4604      	mov	r4, r0
 8013df4:	f340 8082 	ble.w	8013efc <_dtoa_r+0x7fc>
 8013df8:	461a      	mov	r2, r3
 8013dfa:	4601      	mov	r1, r0
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	f000 fbd7 	bl	80145b0 <__pow5mult>
 8013e02:	9b07      	ldr	r3, [sp, #28]
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	4604      	mov	r4, r0
 8013e08:	dd7b      	ble.n	8013f02 <_dtoa_r+0x802>
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8013e0e:	6922      	ldr	r2, [r4, #16]
 8013e10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013e14:	6910      	ldr	r0, [r2, #16]
 8013e16:	f000 fabf 	bl	8014398 <__hi0bits>
 8013e1a:	f1c0 0020 	rsb	r0, r0, #32
 8013e1e:	9b06      	ldr	r3, [sp, #24]
 8013e20:	4418      	add	r0, r3
 8013e22:	f010 001f 	ands.w	r0, r0, #31
 8013e26:	f000 808d 	beq.w	8013f44 <_dtoa_r+0x844>
 8013e2a:	f1c0 0220 	rsb	r2, r0, #32
 8013e2e:	2a04      	cmp	r2, #4
 8013e30:	f340 8086 	ble.w	8013f40 <_dtoa_r+0x840>
 8013e34:	f1c0 001c 	rsb	r0, r0, #28
 8013e38:	9b05      	ldr	r3, [sp, #20]
 8013e3a:	4403      	add	r3, r0
 8013e3c:	9305      	str	r3, [sp, #20]
 8013e3e:	9b06      	ldr	r3, [sp, #24]
 8013e40:	4403      	add	r3, r0
 8013e42:	4480      	add	r8, r0
 8013e44:	9306      	str	r3, [sp, #24]
 8013e46:	9b05      	ldr	r3, [sp, #20]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	dd05      	ble.n	8013e58 <_dtoa_r+0x758>
 8013e4c:	4629      	mov	r1, r5
 8013e4e:	461a      	mov	r2, r3
 8013e50:	4630      	mov	r0, r6
 8013e52:	f000 fc07 	bl	8014664 <__lshift>
 8013e56:	4605      	mov	r5, r0
 8013e58:	9b06      	ldr	r3, [sp, #24]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	dd05      	ble.n	8013e6a <_dtoa_r+0x76a>
 8013e5e:	4621      	mov	r1, r4
 8013e60:	461a      	mov	r2, r3
 8013e62:	4630      	mov	r0, r6
 8013e64:	f000 fbfe 	bl	8014664 <__lshift>
 8013e68:	4604      	mov	r4, r0
 8013e6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d06b      	beq.n	8013f48 <_dtoa_r+0x848>
 8013e70:	4621      	mov	r1, r4
 8013e72:	4628      	mov	r0, r5
 8013e74:	f000 fc62 	bl	801473c <__mcmp>
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	da65      	bge.n	8013f48 <_dtoa_r+0x848>
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4629      	mov	r1, r5
 8013e80:	220a      	movs	r2, #10
 8013e82:	4630      	mov	r0, r6
 8013e84:	f000 fa3e 	bl	8014304 <__multadd>
 8013e88:	9b08      	ldr	r3, [sp, #32]
 8013e8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013e8e:	4605      	mov	r5, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	f000 8192 	beq.w	80141ba <_dtoa_r+0xaba>
 8013e96:	4639      	mov	r1, r7
 8013e98:	2300      	movs	r3, #0
 8013e9a:	220a      	movs	r2, #10
 8013e9c:	4630      	mov	r0, r6
 8013e9e:	f000 fa31 	bl	8014304 <__multadd>
 8013ea2:	f1ba 0f00 	cmp.w	sl, #0
 8013ea6:	4607      	mov	r7, r0
 8013ea8:	f300 808e 	bgt.w	8013fc8 <_dtoa_r+0x8c8>
 8013eac:	9b07      	ldr	r3, [sp, #28]
 8013eae:	2b02      	cmp	r3, #2
 8013eb0:	dc51      	bgt.n	8013f56 <_dtoa_r+0x856>
 8013eb2:	e089      	b.n	8013fc8 <_dtoa_r+0x8c8>
 8013eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013eb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013eba:	e751      	b.n	8013d60 <_dtoa_r+0x660>
 8013ebc:	f109 34ff 	add.w	r4, r9, #4294967295
 8013ec0:	42a3      	cmp	r3, r4
 8013ec2:	bfbf      	itttt	lt
 8013ec4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8013ec6:	1ae3      	sublt	r3, r4, r3
 8013ec8:	18d2      	addlt	r2, r2, r3
 8013eca:	4613      	movlt	r3, r2
 8013ecc:	bfb7      	itett	lt
 8013ece:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013ed0:	1b1c      	subge	r4, r3, r4
 8013ed2:	4623      	movlt	r3, r4
 8013ed4:	2400      	movlt	r4, #0
 8013ed6:	f1b9 0f00 	cmp.w	r9, #0
 8013eda:	bfb5      	itete	lt
 8013edc:	9a05      	ldrlt	r2, [sp, #20]
 8013ede:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8013ee2:	eba2 0809 	sublt.w	r8, r2, r9
 8013ee6:	464a      	movge	r2, r9
 8013ee8:	bfb8      	it	lt
 8013eea:	2200      	movlt	r2, #0
 8013eec:	e73b      	b.n	8013d66 <_dtoa_r+0x666>
 8013eee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013ef2:	9f08      	ldr	r7, [sp, #32]
 8013ef4:	461c      	mov	r4, r3
 8013ef6:	e743      	b.n	8013d80 <_dtoa_r+0x680>
 8013ef8:	461a      	mov	r2, r3
 8013efa:	e76f      	b.n	8013ddc <_dtoa_r+0x6dc>
 8013efc:	9b07      	ldr	r3, [sp, #28]
 8013efe:	2b01      	cmp	r3, #1
 8013f00:	dc18      	bgt.n	8013f34 <_dtoa_r+0x834>
 8013f02:	9b02      	ldr	r3, [sp, #8]
 8013f04:	b9b3      	cbnz	r3, 8013f34 <_dtoa_r+0x834>
 8013f06:	9b03      	ldr	r3, [sp, #12]
 8013f08:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013f0c:	b9a2      	cbnz	r2, 8013f38 <_dtoa_r+0x838>
 8013f0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013f12:	0d12      	lsrs	r2, r2, #20
 8013f14:	0512      	lsls	r2, r2, #20
 8013f16:	b18a      	cbz	r2, 8013f3c <_dtoa_r+0x83c>
 8013f18:	9b05      	ldr	r3, [sp, #20]
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	9305      	str	r3, [sp, #20]
 8013f1e:	9b06      	ldr	r3, [sp, #24]
 8013f20:	3301      	adds	r3, #1
 8013f22:	9306      	str	r3, [sp, #24]
 8013f24:	2301      	movs	r3, #1
 8013f26:	930a      	str	r3, [sp, #40]	; 0x28
 8013f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f47f af6f 	bne.w	8013e0e <_dtoa_r+0x70e>
 8013f30:	2001      	movs	r0, #1
 8013f32:	e774      	b.n	8013e1e <_dtoa_r+0x71e>
 8013f34:	2300      	movs	r3, #0
 8013f36:	e7f6      	b.n	8013f26 <_dtoa_r+0x826>
 8013f38:	9b02      	ldr	r3, [sp, #8]
 8013f3a:	e7f4      	b.n	8013f26 <_dtoa_r+0x826>
 8013f3c:	920a      	str	r2, [sp, #40]	; 0x28
 8013f3e:	e7f3      	b.n	8013f28 <_dtoa_r+0x828>
 8013f40:	d081      	beq.n	8013e46 <_dtoa_r+0x746>
 8013f42:	4610      	mov	r0, r2
 8013f44:	301c      	adds	r0, #28
 8013f46:	e777      	b.n	8013e38 <_dtoa_r+0x738>
 8013f48:	f1b9 0f00 	cmp.w	r9, #0
 8013f4c:	dc37      	bgt.n	8013fbe <_dtoa_r+0x8be>
 8013f4e:	9b07      	ldr	r3, [sp, #28]
 8013f50:	2b02      	cmp	r3, #2
 8013f52:	dd34      	ble.n	8013fbe <_dtoa_r+0x8be>
 8013f54:	46ca      	mov	sl, r9
 8013f56:	f1ba 0f00 	cmp.w	sl, #0
 8013f5a:	d10d      	bne.n	8013f78 <_dtoa_r+0x878>
 8013f5c:	4621      	mov	r1, r4
 8013f5e:	4653      	mov	r3, sl
 8013f60:	2205      	movs	r2, #5
 8013f62:	4630      	mov	r0, r6
 8013f64:	f000 f9ce 	bl	8014304 <__multadd>
 8013f68:	4601      	mov	r1, r0
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	f000 fbe5 	bl	801473c <__mcmp>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	f73f adde 	bgt.w	8013b34 <_dtoa_r+0x434>
 8013f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f7a:	f8dd 8000 	ldr.w	r8, [sp]
 8013f7e:	ea6f 0b03 	mvn.w	fp, r3
 8013f82:	f04f 0900 	mov.w	r9, #0
 8013f86:	4621      	mov	r1, r4
 8013f88:	4630      	mov	r0, r6
 8013f8a:	f000 f999 	bl	80142c0 <_Bfree>
 8013f8e:	2f00      	cmp	r7, #0
 8013f90:	f43f aea7 	beq.w	8013ce2 <_dtoa_r+0x5e2>
 8013f94:	f1b9 0f00 	cmp.w	r9, #0
 8013f98:	d005      	beq.n	8013fa6 <_dtoa_r+0x8a6>
 8013f9a:	45b9      	cmp	r9, r7
 8013f9c:	d003      	beq.n	8013fa6 <_dtoa_r+0x8a6>
 8013f9e:	4649      	mov	r1, r9
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	f000 f98d 	bl	80142c0 <_Bfree>
 8013fa6:	4639      	mov	r1, r7
 8013fa8:	4630      	mov	r0, r6
 8013faa:	f000 f989 	bl	80142c0 <_Bfree>
 8013fae:	e698      	b.n	8013ce2 <_dtoa_r+0x5e2>
 8013fb0:	2400      	movs	r4, #0
 8013fb2:	4627      	mov	r7, r4
 8013fb4:	e7e0      	b.n	8013f78 <_dtoa_r+0x878>
 8013fb6:	46bb      	mov	fp, r7
 8013fb8:	4604      	mov	r4, r0
 8013fba:	4607      	mov	r7, r0
 8013fbc:	e5ba      	b.n	8013b34 <_dtoa_r+0x434>
 8013fbe:	9b08      	ldr	r3, [sp, #32]
 8013fc0:	46ca      	mov	sl, r9
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	f000 8100 	beq.w	80141c8 <_dtoa_r+0xac8>
 8013fc8:	f1b8 0f00 	cmp.w	r8, #0
 8013fcc:	dd05      	ble.n	8013fda <_dtoa_r+0x8da>
 8013fce:	4639      	mov	r1, r7
 8013fd0:	4642      	mov	r2, r8
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	f000 fb46 	bl	8014664 <__lshift>
 8013fd8:	4607      	mov	r7, r0
 8013fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d05d      	beq.n	801409c <_dtoa_r+0x99c>
 8013fe0:	6879      	ldr	r1, [r7, #4]
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	f000 f92c 	bl	8014240 <_Balloc>
 8013fe8:	4680      	mov	r8, r0
 8013fea:	b928      	cbnz	r0, 8013ff8 <_dtoa_r+0x8f8>
 8013fec:	4b82      	ldr	r3, [pc, #520]	; (80141f8 <_dtoa_r+0xaf8>)
 8013fee:	4602      	mov	r2, r0
 8013ff0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013ff4:	f7ff bb9a 	b.w	801372c <_dtoa_r+0x2c>
 8013ff8:	693a      	ldr	r2, [r7, #16]
 8013ffa:	3202      	adds	r2, #2
 8013ffc:	0092      	lsls	r2, r2, #2
 8013ffe:	f107 010c 	add.w	r1, r7, #12
 8014002:	300c      	adds	r0, #12
 8014004:	f000 f902 	bl	801420c <memcpy>
 8014008:	2201      	movs	r2, #1
 801400a:	4641      	mov	r1, r8
 801400c:	4630      	mov	r0, r6
 801400e:	f000 fb29 	bl	8014664 <__lshift>
 8014012:	9b00      	ldr	r3, [sp, #0]
 8014014:	3301      	adds	r3, #1
 8014016:	9305      	str	r3, [sp, #20]
 8014018:	9b00      	ldr	r3, [sp, #0]
 801401a:	4453      	add	r3, sl
 801401c:	9309      	str	r3, [sp, #36]	; 0x24
 801401e:	9b02      	ldr	r3, [sp, #8]
 8014020:	f003 0301 	and.w	r3, r3, #1
 8014024:	46b9      	mov	r9, r7
 8014026:	9308      	str	r3, [sp, #32]
 8014028:	4607      	mov	r7, r0
 801402a:	9b05      	ldr	r3, [sp, #20]
 801402c:	4621      	mov	r1, r4
 801402e:	3b01      	subs	r3, #1
 8014030:	4628      	mov	r0, r5
 8014032:	9302      	str	r3, [sp, #8]
 8014034:	f7ff fad6 	bl	80135e4 <quorem>
 8014038:	4603      	mov	r3, r0
 801403a:	3330      	adds	r3, #48	; 0x30
 801403c:	9006      	str	r0, [sp, #24]
 801403e:	4649      	mov	r1, r9
 8014040:	4628      	mov	r0, r5
 8014042:	930a      	str	r3, [sp, #40]	; 0x28
 8014044:	f000 fb7a 	bl	801473c <__mcmp>
 8014048:	463a      	mov	r2, r7
 801404a:	4682      	mov	sl, r0
 801404c:	4621      	mov	r1, r4
 801404e:	4630      	mov	r0, r6
 8014050:	f000 fb90 	bl	8014774 <__mdiff>
 8014054:	68c2      	ldr	r2, [r0, #12]
 8014056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014058:	4680      	mov	r8, r0
 801405a:	bb0a      	cbnz	r2, 80140a0 <_dtoa_r+0x9a0>
 801405c:	4601      	mov	r1, r0
 801405e:	4628      	mov	r0, r5
 8014060:	f000 fb6c 	bl	801473c <__mcmp>
 8014064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014066:	4602      	mov	r2, r0
 8014068:	4641      	mov	r1, r8
 801406a:	4630      	mov	r0, r6
 801406c:	920e      	str	r2, [sp, #56]	; 0x38
 801406e:	930a      	str	r3, [sp, #40]	; 0x28
 8014070:	f000 f926 	bl	80142c0 <_Bfree>
 8014074:	9b07      	ldr	r3, [sp, #28]
 8014076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014078:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801407c:	ea43 0102 	orr.w	r1, r3, r2
 8014080:	9b08      	ldr	r3, [sp, #32]
 8014082:	430b      	orrs	r3, r1
 8014084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014086:	d10d      	bne.n	80140a4 <_dtoa_r+0x9a4>
 8014088:	2b39      	cmp	r3, #57	; 0x39
 801408a:	d029      	beq.n	80140e0 <_dtoa_r+0x9e0>
 801408c:	f1ba 0f00 	cmp.w	sl, #0
 8014090:	dd01      	ble.n	8014096 <_dtoa_r+0x996>
 8014092:	9b06      	ldr	r3, [sp, #24]
 8014094:	3331      	adds	r3, #49	; 0x31
 8014096:	9a02      	ldr	r2, [sp, #8]
 8014098:	7013      	strb	r3, [r2, #0]
 801409a:	e774      	b.n	8013f86 <_dtoa_r+0x886>
 801409c:	4638      	mov	r0, r7
 801409e:	e7b8      	b.n	8014012 <_dtoa_r+0x912>
 80140a0:	2201      	movs	r2, #1
 80140a2:	e7e1      	b.n	8014068 <_dtoa_r+0x968>
 80140a4:	f1ba 0f00 	cmp.w	sl, #0
 80140a8:	db06      	blt.n	80140b8 <_dtoa_r+0x9b8>
 80140aa:	9907      	ldr	r1, [sp, #28]
 80140ac:	ea41 0a0a 	orr.w	sl, r1, sl
 80140b0:	9908      	ldr	r1, [sp, #32]
 80140b2:	ea5a 0101 	orrs.w	r1, sl, r1
 80140b6:	d120      	bne.n	80140fa <_dtoa_r+0x9fa>
 80140b8:	2a00      	cmp	r2, #0
 80140ba:	ddec      	ble.n	8014096 <_dtoa_r+0x996>
 80140bc:	4629      	mov	r1, r5
 80140be:	2201      	movs	r2, #1
 80140c0:	4630      	mov	r0, r6
 80140c2:	9305      	str	r3, [sp, #20]
 80140c4:	f000 face 	bl	8014664 <__lshift>
 80140c8:	4621      	mov	r1, r4
 80140ca:	4605      	mov	r5, r0
 80140cc:	f000 fb36 	bl	801473c <__mcmp>
 80140d0:	2800      	cmp	r0, #0
 80140d2:	9b05      	ldr	r3, [sp, #20]
 80140d4:	dc02      	bgt.n	80140dc <_dtoa_r+0x9dc>
 80140d6:	d1de      	bne.n	8014096 <_dtoa_r+0x996>
 80140d8:	07da      	lsls	r2, r3, #31
 80140da:	d5dc      	bpl.n	8014096 <_dtoa_r+0x996>
 80140dc:	2b39      	cmp	r3, #57	; 0x39
 80140de:	d1d8      	bne.n	8014092 <_dtoa_r+0x992>
 80140e0:	9a02      	ldr	r2, [sp, #8]
 80140e2:	2339      	movs	r3, #57	; 0x39
 80140e4:	7013      	strb	r3, [r2, #0]
 80140e6:	4643      	mov	r3, r8
 80140e8:	4698      	mov	r8, r3
 80140ea:	3b01      	subs	r3, #1
 80140ec:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80140f0:	2a39      	cmp	r2, #57	; 0x39
 80140f2:	d051      	beq.n	8014198 <_dtoa_r+0xa98>
 80140f4:	3201      	adds	r2, #1
 80140f6:	701a      	strb	r2, [r3, #0]
 80140f8:	e745      	b.n	8013f86 <_dtoa_r+0x886>
 80140fa:	2a00      	cmp	r2, #0
 80140fc:	dd03      	ble.n	8014106 <_dtoa_r+0xa06>
 80140fe:	2b39      	cmp	r3, #57	; 0x39
 8014100:	d0ee      	beq.n	80140e0 <_dtoa_r+0x9e0>
 8014102:	3301      	adds	r3, #1
 8014104:	e7c7      	b.n	8014096 <_dtoa_r+0x996>
 8014106:	9a05      	ldr	r2, [sp, #20]
 8014108:	9909      	ldr	r1, [sp, #36]	; 0x24
 801410a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801410e:	428a      	cmp	r2, r1
 8014110:	d02b      	beq.n	801416a <_dtoa_r+0xa6a>
 8014112:	4629      	mov	r1, r5
 8014114:	2300      	movs	r3, #0
 8014116:	220a      	movs	r2, #10
 8014118:	4630      	mov	r0, r6
 801411a:	f000 f8f3 	bl	8014304 <__multadd>
 801411e:	45b9      	cmp	r9, r7
 8014120:	4605      	mov	r5, r0
 8014122:	f04f 0300 	mov.w	r3, #0
 8014126:	f04f 020a 	mov.w	r2, #10
 801412a:	4649      	mov	r1, r9
 801412c:	4630      	mov	r0, r6
 801412e:	d107      	bne.n	8014140 <_dtoa_r+0xa40>
 8014130:	f000 f8e8 	bl	8014304 <__multadd>
 8014134:	4681      	mov	r9, r0
 8014136:	4607      	mov	r7, r0
 8014138:	9b05      	ldr	r3, [sp, #20]
 801413a:	3301      	adds	r3, #1
 801413c:	9305      	str	r3, [sp, #20]
 801413e:	e774      	b.n	801402a <_dtoa_r+0x92a>
 8014140:	f000 f8e0 	bl	8014304 <__multadd>
 8014144:	4639      	mov	r1, r7
 8014146:	4681      	mov	r9, r0
 8014148:	2300      	movs	r3, #0
 801414a:	220a      	movs	r2, #10
 801414c:	4630      	mov	r0, r6
 801414e:	f000 f8d9 	bl	8014304 <__multadd>
 8014152:	4607      	mov	r7, r0
 8014154:	e7f0      	b.n	8014138 <_dtoa_r+0xa38>
 8014156:	f1ba 0f00 	cmp.w	sl, #0
 801415a:	9a00      	ldr	r2, [sp, #0]
 801415c:	bfcc      	ite	gt
 801415e:	46d0      	movgt	r8, sl
 8014160:	f04f 0801 	movle.w	r8, #1
 8014164:	4490      	add	r8, r2
 8014166:	f04f 0900 	mov.w	r9, #0
 801416a:	4629      	mov	r1, r5
 801416c:	2201      	movs	r2, #1
 801416e:	4630      	mov	r0, r6
 8014170:	9302      	str	r3, [sp, #8]
 8014172:	f000 fa77 	bl	8014664 <__lshift>
 8014176:	4621      	mov	r1, r4
 8014178:	4605      	mov	r5, r0
 801417a:	f000 fadf 	bl	801473c <__mcmp>
 801417e:	2800      	cmp	r0, #0
 8014180:	dcb1      	bgt.n	80140e6 <_dtoa_r+0x9e6>
 8014182:	d102      	bne.n	801418a <_dtoa_r+0xa8a>
 8014184:	9b02      	ldr	r3, [sp, #8]
 8014186:	07db      	lsls	r3, r3, #31
 8014188:	d4ad      	bmi.n	80140e6 <_dtoa_r+0x9e6>
 801418a:	4643      	mov	r3, r8
 801418c:	4698      	mov	r8, r3
 801418e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014192:	2a30      	cmp	r2, #48	; 0x30
 8014194:	d0fa      	beq.n	801418c <_dtoa_r+0xa8c>
 8014196:	e6f6      	b.n	8013f86 <_dtoa_r+0x886>
 8014198:	9a00      	ldr	r2, [sp, #0]
 801419a:	429a      	cmp	r2, r3
 801419c:	d1a4      	bne.n	80140e8 <_dtoa_r+0x9e8>
 801419e:	f10b 0b01 	add.w	fp, fp, #1
 80141a2:	2331      	movs	r3, #49	; 0x31
 80141a4:	e778      	b.n	8014098 <_dtoa_r+0x998>
 80141a6:	4b15      	ldr	r3, [pc, #84]	; (80141fc <_dtoa_r+0xafc>)
 80141a8:	f7ff bb12 	b.w	80137d0 <_dtoa_r+0xd0>
 80141ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	f47f aaee 	bne.w	8013790 <_dtoa_r+0x90>
 80141b4:	4b12      	ldr	r3, [pc, #72]	; (8014200 <_dtoa_r+0xb00>)
 80141b6:	f7ff bb0b 	b.w	80137d0 <_dtoa_r+0xd0>
 80141ba:	f1ba 0f00 	cmp.w	sl, #0
 80141be:	dc03      	bgt.n	80141c8 <_dtoa_r+0xac8>
 80141c0:	9b07      	ldr	r3, [sp, #28]
 80141c2:	2b02      	cmp	r3, #2
 80141c4:	f73f aec7 	bgt.w	8013f56 <_dtoa_r+0x856>
 80141c8:	f8dd 8000 	ldr.w	r8, [sp]
 80141cc:	4621      	mov	r1, r4
 80141ce:	4628      	mov	r0, r5
 80141d0:	f7ff fa08 	bl	80135e4 <quorem>
 80141d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80141d8:	f808 3b01 	strb.w	r3, [r8], #1
 80141dc:	9a00      	ldr	r2, [sp, #0]
 80141de:	eba8 0202 	sub.w	r2, r8, r2
 80141e2:	4592      	cmp	sl, r2
 80141e4:	ddb7      	ble.n	8014156 <_dtoa_r+0xa56>
 80141e6:	4629      	mov	r1, r5
 80141e8:	2300      	movs	r3, #0
 80141ea:	220a      	movs	r2, #10
 80141ec:	4630      	mov	r0, r6
 80141ee:	f000 f889 	bl	8014304 <__multadd>
 80141f2:	4605      	mov	r5, r0
 80141f4:	e7ea      	b.n	80141cc <_dtoa_r+0xacc>
 80141f6:	bf00      	nop
 80141f8:	080155cf 	.word	0x080155cf
 80141fc:	08015528 	.word	0x08015528
 8014200:	0801554c 	.word	0x0801554c

08014204 <_localeconv_r>:
 8014204:	4800      	ldr	r0, [pc, #0]	; (8014208 <_localeconv_r+0x4>)
 8014206:	4770      	bx	lr
 8014208:	240002ec 	.word	0x240002ec

0801420c <memcpy>:
 801420c:	440a      	add	r2, r1
 801420e:	4291      	cmp	r1, r2
 8014210:	f100 33ff 	add.w	r3, r0, #4294967295
 8014214:	d100      	bne.n	8014218 <memcpy+0xc>
 8014216:	4770      	bx	lr
 8014218:	b510      	push	{r4, lr}
 801421a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801421e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014222:	4291      	cmp	r1, r2
 8014224:	d1f9      	bne.n	801421a <memcpy+0xe>
 8014226:	bd10      	pop	{r4, pc}

08014228 <__malloc_lock>:
 8014228:	4801      	ldr	r0, [pc, #4]	; (8014230 <__malloc_lock+0x8>)
 801422a:	f000 bbc8 	b.w	80149be <__retarget_lock_acquire_recursive>
 801422e:	bf00      	nop
 8014230:	24004080 	.word	0x24004080

08014234 <__malloc_unlock>:
 8014234:	4801      	ldr	r0, [pc, #4]	; (801423c <__malloc_unlock+0x8>)
 8014236:	f000 bbc3 	b.w	80149c0 <__retarget_lock_release_recursive>
 801423a:	bf00      	nop
 801423c:	24004080 	.word	0x24004080

08014240 <_Balloc>:
 8014240:	b570      	push	{r4, r5, r6, lr}
 8014242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014244:	4604      	mov	r4, r0
 8014246:	460d      	mov	r5, r1
 8014248:	b976      	cbnz	r6, 8014268 <_Balloc+0x28>
 801424a:	2010      	movs	r0, #16
 801424c:	f7fe fcb4 	bl	8012bb8 <malloc>
 8014250:	4602      	mov	r2, r0
 8014252:	6260      	str	r0, [r4, #36]	; 0x24
 8014254:	b920      	cbnz	r0, 8014260 <_Balloc+0x20>
 8014256:	4b18      	ldr	r3, [pc, #96]	; (80142b8 <_Balloc+0x78>)
 8014258:	4818      	ldr	r0, [pc, #96]	; (80142bc <_Balloc+0x7c>)
 801425a:	2166      	movs	r1, #102	; 0x66
 801425c:	f000 fb7e 	bl	801495c <__assert_func>
 8014260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014264:	6006      	str	r6, [r0, #0]
 8014266:	60c6      	str	r6, [r0, #12]
 8014268:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801426a:	68f3      	ldr	r3, [r6, #12]
 801426c:	b183      	cbz	r3, 8014290 <_Balloc+0x50>
 801426e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014270:	68db      	ldr	r3, [r3, #12]
 8014272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014276:	b9b8      	cbnz	r0, 80142a8 <_Balloc+0x68>
 8014278:	2101      	movs	r1, #1
 801427a:	fa01 f605 	lsl.w	r6, r1, r5
 801427e:	1d72      	adds	r2, r6, #5
 8014280:	0092      	lsls	r2, r2, #2
 8014282:	4620      	mov	r0, r4
 8014284:	f000 fb5a 	bl	801493c <_calloc_r>
 8014288:	b160      	cbz	r0, 80142a4 <_Balloc+0x64>
 801428a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801428e:	e00e      	b.n	80142ae <_Balloc+0x6e>
 8014290:	2221      	movs	r2, #33	; 0x21
 8014292:	2104      	movs	r1, #4
 8014294:	4620      	mov	r0, r4
 8014296:	f000 fb51 	bl	801493c <_calloc_r>
 801429a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801429c:	60f0      	str	r0, [r6, #12]
 801429e:	68db      	ldr	r3, [r3, #12]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d1e4      	bne.n	801426e <_Balloc+0x2e>
 80142a4:	2000      	movs	r0, #0
 80142a6:	bd70      	pop	{r4, r5, r6, pc}
 80142a8:	6802      	ldr	r2, [r0, #0]
 80142aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80142ae:	2300      	movs	r3, #0
 80142b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80142b4:	e7f7      	b.n	80142a6 <_Balloc+0x66>
 80142b6:	bf00      	nop
 80142b8:	08015559 	.word	0x08015559
 80142bc:	080155e0 	.word	0x080155e0

080142c0 <_Bfree>:
 80142c0:	b570      	push	{r4, r5, r6, lr}
 80142c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80142c4:	4605      	mov	r5, r0
 80142c6:	460c      	mov	r4, r1
 80142c8:	b976      	cbnz	r6, 80142e8 <_Bfree+0x28>
 80142ca:	2010      	movs	r0, #16
 80142cc:	f7fe fc74 	bl	8012bb8 <malloc>
 80142d0:	4602      	mov	r2, r0
 80142d2:	6268      	str	r0, [r5, #36]	; 0x24
 80142d4:	b920      	cbnz	r0, 80142e0 <_Bfree+0x20>
 80142d6:	4b09      	ldr	r3, [pc, #36]	; (80142fc <_Bfree+0x3c>)
 80142d8:	4809      	ldr	r0, [pc, #36]	; (8014300 <_Bfree+0x40>)
 80142da:	218a      	movs	r1, #138	; 0x8a
 80142dc:	f000 fb3e 	bl	801495c <__assert_func>
 80142e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80142e4:	6006      	str	r6, [r0, #0]
 80142e6:	60c6      	str	r6, [r0, #12]
 80142e8:	b13c      	cbz	r4, 80142fa <_Bfree+0x3a>
 80142ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80142ec:	6862      	ldr	r2, [r4, #4]
 80142ee:	68db      	ldr	r3, [r3, #12]
 80142f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80142f4:	6021      	str	r1, [r4, #0]
 80142f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80142fa:	bd70      	pop	{r4, r5, r6, pc}
 80142fc:	08015559 	.word	0x08015559
 8014300:	080155e0 	.word	0x080155e0

08014304 <__multadd>:
 8014304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014308:	690e      	ldr	r6, [r1, #16]
 801430a:	4607      	mov	r7, r0
 801430c:	4698      	mov	r8, r3
 801430e:	460c      	mov	r4, r1
 8014310:	f101 0014 	add.w	r0, r1, #20
 8014314:	2300      	movs	r3, #0
 8014316:	6805      	ldr	r5, [r0, #0]
 8014318:	b2a9      	uxth	r1, r5
 801431a:	fb02 8101 	mla	r1, r2, r1, r8
 801431e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014322:	0c2d      	lsrs	r5, r5, #16
 8014324:	fb02 c505 	mla	r5, r2, r5, ip
 8014328:	b289      	uxth	r1, r1
 801432a:	3301      	adds	r3, #1
 801432c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014330:	429e      	cmp	r6, r3
 8014332:	f840 1b04 	str.w	r1, [r0], #4
 8014336:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801433a:	dcec      	bgt.n	8014316 <__multadd+0x12>
 801433c:	f1b8 0f00 	cmp.w	r8, #0
 8014340:	d022      	beq.n	8014388 <__multadd+0x84>
 8014342:	68a3      	ldr	r3, [r4, #8]
 8014344:	42b3      	cmp	r3, r6
 8014346:	dc19      	bgt.n	801437c <__multadd+0x78>
 8014348:	6861      	ldr	r1, [r4, #4]
 801434a:	4638      	mov	r0, r7
 801434c:	3101      	adds	r1, #1
 801434e:	f7ff ff77 	bl	8014240 <_Balloc>
 8014352:	4605      	mov	r5, r0
 8014354:	b928      	cbnz	r0, 8014362 <__multadd+0x5e>
 8014356:	4602      	mov	r2, r0
 8014358:	4b0d      	ldr	r3, [pc, #52]	; (8014390 <__multadd+0x8c>)
 801435a:	480e      	ldr	r0, [pc, #56]	; (8014394 <__multadd+0x90>)
 801435c:	21b5      	movs	r1, #181	; 0xb5
 801435e:	f000 fafd 	bl	801495c <__assert_func>
 8014362:	6922      	ldr	r2, [r4, #16]
 8014364:	3202      	adds	r2, #2
 8014366:	f104 010c 	add.w	r1, r4, #12
 801436a:	0092      	lsls	r2, r2, #2
 801436c:	300c      	adds	r0, #12
 801436e:	f7ff ff4d 	bl	801420c <memcpy>
 8014372:	4621      	mov	r1, r4
 8014374:	4638      	mov	r0, r7
 8014376:	f7ff ffa3 	bl	80142c0 <_Bfree>
 801437a:	462c      	mov	r4, r5
 801437c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014380:	3601      	adds	r6, #1
 8014382:	f8c3 8014 	str.w	r8, [r3, #20]
 8014386:	6126      	str	r6, [r4, #16]
 8014388:	4620      	mov	r0, r4
 801438a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801438e:	bf00      	nop
 8014390:	080155cf 	.word	0x080155cf
 8014394:	080155e0 	.word	0x080155e0

08014398 <__hi0bits>:
 8014398:	0c03      	lsrs	r3, r0, #16
 801439a:	041b      	lsls	r3, r3, #16
 801439c:	b9d3      	cbnz	r3, 80143d4 <__hi0bits+0x3c>
 801439e:	0400      	lsls	r0, r0, #16
 80143a0:	2310      	movs	r3, #16
 80143a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80143a6:	bf04      	itt	eq
 80143a8:	0200      	lsleq	r0, r0, #8
 80143aa:	3308      	addeq	r3, #8
 80143ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80143b0:	bf04      	itt	eq
 80143b2:	0100      	lsleq	r0, r0, #4
 80143b4:	3304      	addeq	r3, #4
 80143b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80143ba:	bf04      	itt	eq
 80143bc:	0080      	lsleq	r0, r0, #2
 80143be:	3302      	addeq	r3, #2
 80143c0:	2800      	cmp	r0, #0
 80143c2:	db05      	blt.n	80143d0 <__hi0bits+0x38>
 80143c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80143c8:	f103 0301 	add.w	r3, r3, #1
 80143cc:	bf08      	it	eq
 80143ce:	2320      	moveq	r3, #32
 80143d0:	4618      	mov	r0, r3
 80143d2:	4770      	bx	lr
 80143d4:	2300      	movs	r3, #0
 80143d6:	e7e4      	b.n	80143a2 <__hi0bits+0xa>

080143d8 <__lo0bits>:
 80143d8:	6803      	ldr	r3, [r0, #0]
 80143da:	f013 0207 	ands.w	r2, r3, #7
 80143de:	4601      	mov	r1, r0
 80143e0:	d00b      	beq.n	80143fa <__lo0bits+0x22>
 80143e2:	07da      	lsls	r2, r3, #31
 80143e4:	d424      	bmi.n	8014430 <__lo0bits+0x58>
 80143e6:	0798      	lsls	r0, r3, #30
 80143e8:	bf49      	itett	mi
 80143ea:	085b      	lsrmi	r3, r3, #1
 80143ec:	089b      	lsrpl	r3, r3, #2
 80143ee:	2001      	movmi	r0, #1
 80143f0:	600b      	strmi	r3, [r1, #0]
 80143f2:	bf5c      	itt	pl
 80143f4:	600b      	strpl	r3, [r1, #0]
 80143f6:	2002      	movpl	r0, #2
 80143f8:	4770      	bx	lr
 80143fa:	b298      	uxth	r0, r3
 80143fc:	b9b0      	cbnz	r0, 801442c <__lo0bits+0x54>
 80143fe:	0c1b      	lsrs	r3, r3, #16
 8014400:	2010      	movs	r0, #16
 8014402:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014406:	bf04      	itt	eq
 8014408:	0a1b      	lsreq	r3, r3, #8
 801440a:	3008      	addeq	r0, #8
 801440c:	071a      	lsls	r2, r3, #28
 801440e:	bf04      	itt	eq
 8014410:	091b      	lsreq	r3, r3, #4
 8014412:	3004      	addeq	r0, #4
 8014414:	079a      	lsls	r2, r3, #30
 8014416:	bf04      	itt	eq
 8014418:	089b      	lsreq	r3, r3, #2
 801441a:	3002      	addeq	r0, #2
 801441c:	07da      	lsls	r2, r3, #31
 801441e:	d403      	bmi.n	8014428 <__lo0bits+0x50>
 8014420:	085b      	lsrs	r3, r3, #1
 8014422:	f100 0001 	add.w	r0, r0, #1
 8014426:	d005      	beq.n	8014434 <__lo0bits+0x5c>
 8014428:	600b      	str	r3, [r1, #0]
 801442a:	4770      	bx	lr
 801442c:	4610      	mov	r0, r2
 801442e:	e7e8      	b.n	8014402 <__lo0bits+0x2a>
 8014430:	2000      	movs	r0, #0
 8014432:	4770      	bx	lr
 8014434:	2020      	movs	r0, #32
 8014436:	4770      	bx	lr

08014438 <__i2b>:
 8014438:	b510      	push	{r4, lr}
 801443a:	460c      	mov	r4, r1
 801443c:	2101      	movs	r1, #1
 801443e:	f7ff feff 	bl	8014240 <_Balloc>
 8014442:	4602      	mov	r2, r0
 8014444:	b928      	cbnz	r0, 8014452 <__i2b+0x1a>
 8014446:	4b05      	ldr	r3, [pc, #20]	; (801445c <__i2b+0x24>)
 8014448:	4805      	ldr	r0, [pc, #20]	; (8014460 <__i2b+0x28>)
 801444a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801444e:	f000 fa85 	bl	801495c <__assert_func>
 8014452:	2301      	movs	r3, #1
 8014454:	6144      	str	r4, [r0, #20]
 8014456:	6103      	str	r3, [r0, #16]
 8014458:	bd10      	pop	{r4, pc}
 801445a:	bf00      	nop
 801445c:	080155cf 	.word	0x080155cf
 8014460:	080155e0 	.word	0x080155e0

08014464 <__multiply>:
 8014464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014468:	4614      	mov	r4, r2
 801446a:	690a      	ldr	r2, [r1, #16]
 801446c:	6923      	ldr	r3, [r4, #16]
 801446e:	429a      	cmp	r2, r3
 8014470:	bfb8      	it	lt
 8014472:	460b      	movlt	r3, r1
 8014474:	460d      	mov	r5, r1
 8014476:	bfbc      	itt	lt
 8014478:	4625      	movlt	r5, r4
 801447a:	461c      	movlt	r4, r3
 801447c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014480:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014484:	68ab      	ldr	r3, [r5, #8]
 8014486:	6869      	ldr	r1, [r5, #4]
 8014488:	eb0a 0709 	add.w	r7, sl, r9
 801448c:	42bb      	cmp	r3, r7
 801448e:	b085      	sub	sp, #20
 8014490:	bfb8      	it	lt
 8014492:	3101      	addlt	r1, #1
 8014494:	f7ff fed4 	bl	8014240 <_Balloc>
 8014498:	b930      	cbnz	r0, 80144a8 <__multiply+0x44>
 801449a:	4602      	mov	r2, r0
 801449c:	4b42      	ldr	r3, [pc, #264]	; (80145a8 <__multiply+0x144>)
 801449e:	4843      	ldr	r0, [pc, #268]	; (80145ac <__multiply+0x148>)
 80144a0:	f240 115d 	movw	r1, #349	; 0x15d
 80144a4:	f000 fa5a 	bl	801495c <__assert_func>
 80144a8:	f100 0614 	add.w	r6, r0, #20
 80144ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80144b0:	4633      	mov	r3, r6
 80144b2:	2200      	movs	r2, #0
 80144b4:	4543      	cmp	r3, r8
 80144b6:	d31e      	bcc.n	80144f6 <__multiply+0x92>
 80144b8:	f105 0c14 	add.w	ip, r5, #20
 80144bc:	f104 0314 	add.w	r3, r4, #20
 80144c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80144c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80144c8:	9202      	str	r2, [sp, #8]
 80144ca:	ebac 0205 	sub.w	r2, ip, r5
 80144ce:	3a15      	subs	r2, #21
 80144d0:	f022 0203 	bic.w	r2, r2, #3
 80144d4:	3204      	adds	r2, #4
 80144d6:	f105 0115 	add.w	r1, r5, #21
 80144da:	458c      	cmp	ip, r1
 80144dc:	bf38      	it	cc
 80144de:	2204      	movcc	r2, #4
 80144e0:	9201      	str	r2, [sp, #4]
 80144e2:	9a02      	ldr	r2, [sp, #8]
 80144e4:	9303      	str	r3, [sp, #12]
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d808      	bhi.n	80144fc <__multiply+0x98>
 80144ea:	2f00      	cmp	r7, #0
 80144ec:	dc55      	bgt.n	801459a <__multiply+0x136>
 80144ee:	6107      	str	r7, [r0, #16]
 80144f0:	b005      	add	sp, #20
 80144f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f6:	f843 2b04 	str.w	r2, [r3], #4
 80144fa:	e7db      	b.n	80144b4 <__multiply+0x50>
 80144fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8014500:	f1ba 0f00 	cmp.w	sl, #0
 8014504:	d020      	beq.n	8014548 <__multiply+0xe4>
 8014506:	f105 0e14 	add.w	lr, r5, #20
 801450a:	46b1      	mov	r9, r6
 801450c:	2200      	movs	r2, #0
 801450e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014512:	f8d9 b000 	ldr.w	fp, [r9]
 8014516:	b2a1      	uxth	r1, r4
 8014518:	fa1f fb8b 	uxth.w	fp, fp
 801451c:	fb0a b101 	mla	r1, sl, r1, fp
 8014520:	4411      	add	r1, r2
 8014522:	f8d9 2000 	ldr.w	r2, [r9]
 8014526:	0c24      	lsrs	r4, r4, #16
 8014528:	0c12      	lsrs	r2, r2, #16
 801452a:	fb0a 2404 	mla	r4, sl, r4, r2
 801452e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014532:	b289      	uxth	r1, r1
 8014534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014538:	45f4      	cmp	ip, lr
 801453a:	f849 1b04 	str.w	r1, [r9], #4
 801453e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014542:	d8e4      	bhi.n	801450e <__multiply+0xaa>
 8014544:	9901      	ldr	r1, [sp, #4]
 8014546:	5072      	str	r2, [r6, r1]
 8014548:	9a03      	ldr	r2, [sp, #12]
 801454a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801454e:	3304      	adds	r3, #4
 8014550:	f1b9 0f00 	cmp.w	r9, #0
 8014554:	d01f      	beq.n	8014596 <__multiply+0x132>
 8014556:	6834      	ldr	r4, [r6, #0]
 8014558:	f105 0114 	add.w	r1, r5, #20
 801455c:	46b6      	mov	lr, r6
 801455e:	f04f 0a00 	mov.w	sl, #0
 8014562:	880a      	ldrh	r2, [r1, #0]
 8014564:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014568:	fb09 b202 	mla	r2, r9, r2, fp
 801456c:	4492      	add	sl, r2
 801456e:	b2a4      	uxth	r4, r4
 8014570:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014574:	f84e 4b04 	str.w	r4, [lr], #4
 8014578:	f851 4b04 	ldr.w	r4, [r1], #4
 801457c:	f8be 2000 	ldrh.w	r2, [lr]
 8014580:	0c24      	lsrs	r4, r4, #16
 8014582:	fb09 2404 	mla	r4, r9, r4, r2
 8014586:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801458a:	458c      	cmp	ip, r1
 801458c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014590:	d8e7      	bhi.n	8014562 <__multiply+0xfe>
 8014592:	9a01      	ldr	r2, [sp, #4]
 8014594:	50b4      	str	r4, [r6, r2]
 8014596:	3604      	adds	r6, #4
 8014598:	e7a3      	b.n	80144e2 <__multiply+0x7e>
 801459a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d1a5      	bne.n	80144ee <__multiply+0x8a>
 80145a2:	3f01      	subs	r7, #1
 80145a4:	e7a1      	b.n	80144ea <__multiply+0x86>
 80145a6:	bf00      	nop
 80145a8:	080155cf 	.word	0x080155cf
 80145ac:	080155e0 	.word	0x080155e0

080145b0 <__pow5mult>:
 80145b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145b4:	4615      	mov	r5, r2
 80145b6:	f012 0203 	ands.w	r2, r2, #3
 80145ba:	4606      	mov	r6, r0
 80145bc:	460f      	mov	r7, r1
 80145be:	d007      	beq.n	80145d0 <__pow5mult+0x20>
 80145c0:	4c25      	ldr	r4, [pc, #148]	; (8014658 <__pow5mult+0xa8>)
 80145c2:	3a01      	subs	r2, #1
 80145c4:	2300      	movs	r3, #0
 80145c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80145ca:	f7ff fe9b 	bl	8014304 <__multadd>
 80145ce:	4607      	mov	r7, r0
 80145d0:	10ad      	asrs	r5, r5, #2
 80145d2:	d03d      	beq.n	8014650 <__pow5mult+0xa0>
 80145d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80145d6:	b97c      	cbnz	r4, 80145f8 <__pow5mult+0x48>
 80145d8:	2010      	movs	r0, #16
 80145da:	f7fe faed 	bl	8012bb8 <malloc>
 80145de:	4602      	mov	r2, r0
 80145e0:	6270      	str	r0, [r6, #36]	; 0x24
 80145e2:	b928      	cbnz	r0, 80145f0 <__pow5mult+0x40>
 80145e4:	4b1d      	ldr	r3, [pc, #116]	; (801465c <__pow5mult+0xac>)
 80145e6:	481e      	ldr	r0, [pc, #120]	; (8014660 <__pow5mult+0xb0>)
 80145e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80145ec:	f000 f9b6 	bl	801495c <__assert_func>
 80145f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80145f4:	6004      	str	r4, [r0, #0]
 80145f6:	60c4      	str	r4, [r0, #12]
 80145f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80145fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014600:	b94c      	cbnz	r4, 8014616 <__pow5mult+0x66>
 8014602:	f240 2171 	movw	r1, #625	; 0x271
 8014606:	4630      	mov	r0, r6
 8014608:	f7ff ff16 	bl	8014438 <__i2b>
 801460c:	2300      	movs	r3, #0
 801460e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014612:	4604      	mov	r4, r0
 8014614:	6003      	str	r3, [r0, #0]
 8014616:	f04f 0900 	mov.w	r9, #0
 801461a:	07eb      	lsls	r3, r5, #31
 801461c:	d50a      	bpl.n	8014634 <__pow5mult+0x84>
 801461e:	4639      	mov	r1, r7
 8014620:	4622      	mov	r2, r4
 8014622:	4630      	mov	r0, r6
 8014624:	f7ff ff1e 	bl	8014464 <__multiply>
 8014628:	4639      	mov	r1, r7
 801462a:	4680      	mov	r8, r0
 801462c:	4630      	mov	r0, r6
 801462e:	f7ff fe47 	bl	80142c0 <_Bfree>
 8014632:	4647      	mov	r7, r8
 8014634:	106d      	asrs	r5, r5, #1
 8014636:	d00b      	beq.n	8014650 <__pow5mult+0xa0>
 8014638:	6820      	ldr	r0, [r4, #0]
 801463a:	b938      	cbnz	r0, 801464c <__pow5mult+0x9c>
 801463c:	4622      	mov	r2, r4
 801463e:	4621      	mov	r1, r4
 8014640:	4630      	mov	r0, r6
 8014642:	f7ff ff0f 	bl	8014464 <__multiply>
 8014646:	6020      	str	r0, [r4, #0]
 8014648:	f8c0 9000 	str.w	r9, [r0]
 801464c:	4604      	mov	r4, r0
 801464e:	e7e4      	b.n	801461a <__pow5mult+0x6a>
 8014650:	4638      	mov	r0, r7
 8014652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014656:	bf00      	nop
 8014658:	08015730 	.word	0x08015730
 801465c:	08015559 	.word	0x08015559
 8014660:	080155e0 	.word	0x080155e0

08014664 <__lshift>:
 8014664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014668:	460c      	mov	r4, r1
 801466a:	6849      	ldr	r1, [r1, #4]
 801466c:	6923      	ldr	r3, [r4, #16]
 801466e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014672:	68a3      	ldr	r3, [r4, #8]
 8014674:	4607      	mov	r7, r0
 8014676:	4691      	mov	r9, r2
 8014678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801467c:	f108 0601 	add.w	r6, r8, #1
 8014680:	42b3      	cmp	r3, r6
 8014682:	db0b      	blt.n	801469c <__lshift+0x38>
 8014684:	4638      	mov	r0, r7
 8014686:	f7ff fddb 	bl	8014240 <_Balloc>
 801468a:	4605      	mov	r5, r0
 801468c:	b948      	cbnz	r0, 80146a2 <__lshift+0x3e>
 801468e:	4602      	mov	r2, r0
 8014690:	4b28      	ldr	r3, [pc, #160]	; (8014734 <__lshift+0xd0>)
 8014692:	4829      	ldr	r0, [pc, #164]	; (8014738 <__lshift+0xd4>)
 8014694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014698:	f000 f960 	bl	801495c <__assert_func>
 801469c:	3101      	adds	r1, #1
 801469e:	005b      	lsls	r3, r3, #1
 80146a0:	e7ee      	b.n	8014680 <__lshift+0x1c>
 80146a2:	2300      	movs	r3, #0
 80146a4:	f100 0114 	add.w	r1, r0, #20
 80146a8:	f100 0210 	add.w	r2, r0, #16
 80146ac:	4618      	mov	r0, r3
 80146ae:	4553      	cmp	r3, sl
 80146b0:	db33      	blt.n	801471a <__lshift+0xb6>
 80146b2:	6920      	ldr	r0, [r4, #16]
 80146b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80146b8:	f104 0314 	add.w	r3, r4, #20
 80146bc:	f019 091f 	ands.w	r9, r9, #31
 80146c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80146c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80146c8:	d02b      	beq.n	8014722 <__lshift+0xbe>
 80146ca:	f1c9 0e20 	rsb	lr, r9, #32
 80146ce:	468a      	mov	sl, r1
 80146d0:	2200      	movs	r2, #0
 80146d2:	6818      	ldr	r0, [r3, #0]
 80146d4:	fa00 f009 	lsl.w	r0, r0, r9
 80146d8:	4302      	orrs	r2, r0
 80146da:	f84a 2b04 	str.w	r2, [sl], #4
 80146de:	f853 2b04 	ldr.w	r2, [r3], #4
 80146e2:	459c      	cmp	ip, r3
 80146e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80146e8:	d8f3      	bhi.n	80146d2 <__lshift+0x6e>
 80146ea:	ebac 0304 	sub.w	r3, ip, r4
 80146ee:	3b15      	subs	r3, #21
 80146f0:	f023 0303 	bic.w	r3, r3, #3
 80146f4:	3304      	adds	r3, #4
 80146f6:	f104 0015 	add.w	r0, r4, #21
 80146fa:	4584      	cmp	ip, r0
 80146fc:	bf38      	it	cc
 80146fe:	2304      	movcc	r3, #4
 8014700:	50ca      	str	r2, [r1, r3]
 8014702:	b10a      	cbz	r2, 8014708 <__lshift+0xa4>
 8014704:	f108 0602 	add.w	r6, r8, #2
 8014708:	3e01      	subs	r6, #1
 801470a:	4638      	mov	r0, r7
 801470c:	612e      	str	r6, [r5, #16]
 801470e:	4621      	mov	r1, r4
 8014710:	f7ff fdd6 	bl	80142c0 <_Bfree>
 8014714:	4628      	mov	r0, r5
 8014716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801471a:	f842 0f04 	str.w	r0, [r2, #4]!
 801471e:	3301      	adds	r3, #1
 8014720:	e7c5      	b.n	80146ae <__lshift+0x4a>
 8014722:	3904      	subs	r1, #4
 8014724:	f853 2b04 	ldr.w	r2, [r3], #4
 8014728:	f841 2f04 	str.w	r2, [r1, #4]!
 801472c:	459c      	cmp	ip, r3
 801472e:	d8f9      	bhi.n	8014724 <__lshift+0xc0>
 8014730:	e7ea      	b.n	8014708 <__lshift+0xa4>
 8014732:	bf00      	nop
 8014734:	080155cf 	.word	0x080155cf
 8014738:	080155e0 	.word	0x080155e0

0801473c <__mcmp>:
 801473c:	b530      	push	{r4, r5, lr}
 801473e:	6902      	ldr	r2, [r0, #16]
 8014740:	690c      	ldr	r4, [r1, #16]
 8014742:	1b12      	subs	r2, r2, r4
 8014744:	d10e      	bne.n	8014764 <__mcmp+0x28>
 8014746:	f100 0314 	add.w	r3, r0, #20
 801474a:	3114      	adds	r1, #20
 801474c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014750:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014754:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014758:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801475c:	42a5      	cmp	r5, r4
 801475e:	d003      	beq.n	8014768 <__mcmp+0x2c>
 8014760:	d305      	bcc.n	801476e <__mcmp+0x32>
 8014762:	2201      	movs	r2, #1
 8014764:	4610      	mov	r0, r2
 8014766:	bd30      	pop	{r4, r5, pc}
 8014768:	4283      	cmp	r3, r0
 801476a:	d3f3      	bcc.n	8014754 <__mcmp+0x18>
 801476c:	e7fa      	b.n	8014764 <__mcmp+0x28>
 801476e:	f04f 32ff 	mov.w	r2, #4294967295
 8014772:	e7f7      	b.n	8014764 <__mcmp+0x28>

08014774 <__mdiff>:
 8014774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014778:	460c      	mov	r4, r1
 801477a:	4606      	mov	r6, r0
 801477c:	4611      	mov	r1, r2
 801477e:	4620      	mov	r0, r4
 8014780:	4617      	mov	r7, r2
 8014782:	f7ff ffdb 	bl	801473c <__mcmp>
 8014786:	1e05      	subs	r5, r0, #0
 8014788:	d110      	bne.n	80147ac <__mdiff+0x38>
 801478a:	4629      	mov	r1, r5
 801478c:	4630      	mov	r0, r6
 801478e:	f7ff fd57 	bl	8014240 <_Balloc>
 8014792:	b930      	cbnz	r0, 80147a2 <__mdiff+0x2e>
 8014794:	4b39      	ldr	r3, [pc, #228]	; (801487c <__mdiff+0x108>)
 8014796:	4602      	mov	r2, r0
 8014798:	f240 2132 	movw	r1, #562	; 0x232
 801479c:	4838      	ldr	r0, [pc, #224]	; (8014880 <__mdiff+0x10c>)
 801479e:	f000 f8dd 	bl	801495c <__assert_func>
 80147a2:	2301      	movs	r3, #1
 80147a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80147a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ac:	bfa4      	itt	ge
 80147ae:	463b      	movge	r3, r7
 80147b0:	4627      	movge	r7, r4
 80147b2:	4630      	mov	r0, r6
 80147b4:	6879      	ldr	r1, [r7, #4]
 80147b6:	bfa6      	itte	ge
 80147b8:	461c      	movge	r4, r3
 80147ba:	2500      	movge	r5, #0
 80147bc:	2501      	movlt	r5, #1
 80147be:	f7ff fd3f 	bl	8014240 <_Balloc>
 80147c2:	b920      	cbnz	r0, 80147ce <__mdiff+0x5a>
 80147c4:	4b2d      	ldr	r3, [pc, #180]	; (801487c <__mdiff+0x108>)
 80147c6:	4602      	mov	r2, r0
 80147c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80147cc:	e7e6      	b.n	801479c <__mdiff+0x28>
 80147ce:	693e      	ldr	r6, [r7, #16]
 80147d0:	60c5      	str	r5, [r0, #12]
 80147d2:	6925      	ldr	r5, [r4, #16]
 80147d4:	f107 0114 	add.w	r1, r7, #20
 80147d8:	f104 0914 	add.w	r9, r4, #20
 80147dc:	f100 0e14 	add.w	lr, r0, #20
 80147e0:	f107 0210 	add.w	r2, r7, #16
 80147e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80147e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80147ec:	46f2      	mov	sl, lr
 80147ee:	2700      	movs	r7, #0
 80147f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80147f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80147f8:	fa1f f883 	uxth.w	r8, r3
 80147fc:	fa17 f78b 	uxtah	r7, r7, fp
 8014800:	0c1b      	lsrs	r3, r3, #16
 8014802:	eba7 0808 	sub.w	r8, r7, r8
 8014806:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801480a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801480e:	fa1f f888 	uxth.w	r8, r8
 8014812:	141f      	asrs	r7, r3, #16
 8014814:	454d      	cmp	r5, r9
 8014816:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801481a:	f84a 3b04 	str.w	r3, [sl], #4
 801481e:	d8e7      	bhi.n	80147f0 <__mdiff+0x7c>
 8014820:	1b2b      	subs	r3, r5, r4
 8014822:	3b15      	subs	r3, #21
 8014824:	f023 0303 	bic.w	r3, r3, #3
 8014828:	3304      	adds	r3, #4
 801482a:	3415      	adds	r4, #21
 801482c:	42a5      	cmp	r5, r4
 801482e:	bf38      	it	cc
 8014830:	2304      	movcc	r3, #4
 8014832:	4419      	add	r1, r3
 8014834:	4473      	add	r3, lr
 8014836:	469e      	mov	lr, r3
 8014838:	460d      	mov	r5, r1
 801483a:	4565      	cmp	r5, ip
 801483c:	d30e      	bcc.n	801485c <__mdiff+0xe8>
 801483e:	f10c 0203 	add.w	r2, ip, #3
 8014842:	1a52      	subs	r2, r2, r1
 8014844:	f022 0203 	bic.w	r2, r2, #3
 8014848:	3903      	subs	r1, #3
 801484a:	458c      	cmp	ip, r1
 801484c:	bf38      	it	cc
 801484e:	2200      	movcc	r2, #0
 8014850:	441a      	add	r2, r3
 8014852:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014856:	b17b      	cbz	r3, 8014878 <__mdiff+0x104>
 8014858:	6106      	str	r6, [r0, #16]
 801485a:	e7a5      	b.n	80147a8 <__mdiff+0x34>
 801485c:	f855 8b04 	ldr.w	r8, [r5], #4
 8014860:	fa17 f488 	uxtah	r4, r7, r8
 8014864:	1422      	asrs	r2, r4, #16
 8014866:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801486a:	b2a4      	uxth	r4, r4
 801486c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014870:	f84e 4b04 	str.w	r4, [lr], #4
 8014874:	1417      	asrs	r7, r2, #16
 8014876:	e7e0      	b.n	801483a <__mdiff+0xc6>
 8014878:	3e01      	subs	r6, #1
 801487a:	e7ea      	b.n	8014852 <__mdiff+0xde>
 801487c:	080155cf 	.word	0x080155cf
 8014880:	080155e0 	.word	0x080155e0

08014884 <__d2b>:
 8014884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014888:	4689      	mov	r9, r1
 801488a:	2101      	movs	r1, #1
 801488c:	ec57 6b10 	vmov	r6, r7, d0
 8014890:	4690      	mov	r8, r2
 8014892:	f7ff fcd5 	bl	8014240 <_Balloc>
 8014896:	4604      	mov	r4, r0
 8014898:	b930      	cbnz	r0, 80148a8 <__d2b+0x24>
 801489a:	4602      	mov	r2, r0
 801489c:	4b25      	ldr	r3, [pc, #148]	; (8014934 <__d2b+0xb0>)
 801489e:	4826      	ldr	r0, [pc, #152]	; (8014938 <__d2b+0xb4>)
 80148a0:	f240 310a 	movw	r1, #778	; 0x30a
 80148a4:	f000 f85a 	bl	801495c <__assert_func>
 80148a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80148ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80148b0:	bb35      	cbnz	r5, 8014900 <__d2b+0x7c>
 80148b2:	2e00      	cmp	r6, #0
 80148b4:	9301      	str	r3, [sp, #4]
 80148b6:	d028      	beq.n	801490a <__d2b+0x86>
 80148b8:	4668      	mov	r0, sp
 80148ba:	9600      	str	r6, [sp, #0]
 80148bc:	f7ff fd8c 	bl	80143d8 <__lo0bits>
 80148c0:	9900      	ldr	r1, [sp, #0]
 80148c2:	b300      	cbz	r0, 8014906 <__d2b+0x82>
 80148c4:	9a01      	ldr	r2, [sp, #4]
 80148c6:	f1c0 0320 	rsb	r3, r0, #32
 80148ca:	fa02 f303 	lsl.w	r3, r2, r3
 80148ce:	430b      	orrs	r3, r1
 80148d0:	40c2      	lsrs	r2, r0
 80148d2:	6163      	str	r3, [r4, #20]
 80148d4:	9201      	str	r2, [sp, #4]
 80148d6:	9b01      	ldr	r3, [sp, #4]
 80148d8:	61a3      	str	r3, [r4, #24]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	bf14      	ite	ne
 80148de:	2202      	movne	r2, #2
 80148e0:	2201      	moveq	r2, #1
 80148e2:	6122      	str	r2, [r4, #16]
 80148e4:	b1d5      	cbz	r5, 801491c <__d2b+0x98>
 80148e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80148ea:	4405      	add	r5, r0
 80148ec:	f8c9 5000 	str.w	r5, [r9]
 80148f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80148f4:	f8c8 0000 	str.w	r0, [r8]
 80148f8:	4620      	mov	r0, r4
 80148fa:	b003      	add	sp, #12
 80148fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014904:	e7d5      	b.n	80148b2 <__d2b+0x2e>
 8014906:	6161      	str	r1, [r4, #20]
 8014908:	e7e5      	b.n	80148d6 <__d2b+0x52>
 801490a:	a801      	add	r0, sp, #4
 801490c:	f7ff fd64 	bl	80143d8 <__lo0bits>
 8014910:	9b01      	ldr	r3, [sp, #4]
 8014912:	6163      	str	r3, [r4, #20]
 8014914:	2201      	movs	r2, #1
 8014916:	6122      	str	r2, [r4, #16]
 8014918:	3020      	adds	r0, #32
 801491a:	e7e3      	b.n	80148e4 <__d2b+0x60>
 801491c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014920:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014924:	f8c9 0000 	str.w	r0, [r9]
 8014928:	6918      	ldr	r0, [r3, #16]
 801492a:	f7ff fd35 	bl	8014398 <__hi0bits>
 801492e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014932:	e7df      	b.n	80148f4 <__d2b+0x70>
 8014934:	080155cf 	.word	0x080155cf
 8014938:	080155e0 	.word	0x080155e0

0801493c <_calloc_r>:
 801493c:	b513      	push	{r0, r1, r4, lr}
 801493e:	434a      	muls	r2, r1
 8014940:	4611      	mov	r1, r2
 8014942:	9201      	str	r2, [sp, #4]
 8014944:	f7fe f9a0 	bl	8012c88 <_malloc_r>
 8014948:	4604      	mov	r4, r0
 801494a:	b118      	cbz	r0, 8014954 <_calloc_r+0x18>
 801494c:	9a01      	ldr	r2, [sp, #4]
 801494e:	2100      	movs	r1, #0
 8014950:	f7fe f942 	bl	8012bd8 <memset>
 8014954:	4620      	mov	r0, r4
 8014956:	b002      	add	sp, #8
 8014958:	bd10      	pop	{r4, pc}
	...

0801495c <__assert_func>:
 801495c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801495e:	4614      	mov	r4, r2
 8014960:	461a      	mov	r2, r3
 8014962:	4b09      	ldr	r3, [pc, #36]	; (8014988 <__assert_func+0x2c>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	4605      	mov	r5, r0
 8014968:	68d8      	ldr	r0, [r3, #12]
 801496a:	b14c      	cbz	r4, 8014980 <__assert_func+0x24>
 801496c:	4b07      	ldr	r3, [pc, #28]	; (801498c <__assert_func+0x30>)
 801496e:	9100      	str	r1, [sp, #0]
 8014970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014974:	4906      	ldr	r1, [pc, #24]	; (8014990 <__assert_func+0x34>)
 8014976:	462b      	mov	r3, r5
 8014978:	f000 f80e 	bl	8014998 <fiprintf>
 801497c:	f000 fa5a 	bl	8014e34 <abort>
 8014980:	4b04      	ldr	r3, [pc, #16]	; (8014994 <__assert_func+0x38>)
 8014982:	461c      	mov	r4, r3
 8014984:	e7f3      	b.n	801496e <__assert_func+0x12>
 8014986:	bf00      	nop
 8014988:	24000198 	.word	0x24000198
 801498c:	0801573c 	.word	0x0801573c
 8014990:	08015749 	.word	0x08015749
 8014994:	08015777 	.word	0x08015777

08014998 <fiprintf>:
 8014998:	b40e      	push	{r1, r2, r3}
 801499a:	b503      	push	{r0, r1, lr}
 801499c:	4601      	mov	r1, r0
 801499e:	ab03      	add	r3, sp, #12
 80149a0:	4805      	ldr	r0, [pc, #20]	; (80149b8 <fiprintf+0x20>)
 80149a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80149a6:	6800      	ldr	r0, [r0, #0]
 80149a8:	9301      	str	r3, [sp, #4]
 80149aa:	f000 f845 	bl	8014a38 <_vfiprintf_r>
 80149ae:	b002      	add	sp, #8
 80149b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80149b4:	b003      	add	sp, #12
 80149b6:	4770      	bx	lr
 80149b8:	24000198 	.word	0x24000198

080149bc <__retarget_lock_init_recursive>:
 80149bc:	4770      	bx	lr

080149be <__retarget_lock_acquire_recursive>:
 80149be:	4770      	bx	lr

080149c0 <__retarget_lock_release_recursive>:
 80149c0:	4770      	bx	lr

080149c2 <__ascii_mbtowc>:
 80149c2:	b082      	sub	sp, #8
 80149c4:	b901      	cbnz	r1, 80149c8 <__ascii_mbtowc+0x6>
 80149c6:	a901      	add	r1, sp, #4
 80149c8:	b142      	cbz	r2, 80149dc <__ascii_mbtowc+0x1a>
 80149ca:	b14b      	cbz	r3, 80149e0 <__ascii_mbtowc+0x1e>
 80149cc:	7813      	ldrb	r3, [r2, #0]
 80149ce:	600b      	str	r3, [r1, #0]
 80149d0:	7812      	ldrb	r2, [r2, #0]
 80149d2:	1e10      	subs	r0, r2, #0
 80149d4:	bf18      	it	ne
 80149d6:	2001      	movne	r0, #1
 80149d8:	b002      	add	sp, #8
 80149da:	4770      	bx	lr
 80149dc:	4610      	mov	r0, r2
 80149de:	e7fb      	b.n	80149d8 <__ascii_mbtowc+0x16>
 80149e0:	f06f 0001 	mvn.w	r0, #1
 80149e4:	e7f8      	b.n	80149d8 <__ascii_mbtowc+0x16>

080149e6 <__sfputc_r>:
 80149e6:	6893      	ldr	r3, [r2, #8]
 80149e8:	3b01      	subs	r3, #1
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	b410      	push	{r4}
 80149ee:	6093      	str	r3, [r2, #8]
 80149f0:	da08      	bge.n	8014a04 <__sfputc_r+0x1e>
 80149f2:	6994      	ldr	r4, [r2, #24]
 80149f4:	42a3      	cmp	r3, r4
 80149f6:	db01      	blt.n	80149fc <__sfputc_r+0x16>
 80149f8:	290a      	cmp	r1, #10
 80149fa:	d103      	bne.n	8014a04 <__sfputc_r+0x1e>
 80149fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a00:	f000 b94a 	b.w	8014c98 <__swbuf_r>
 8014a04:	6813      	ldr	r3, [r2, #0]
 8014a06:	1c58      	adds	r0, r3, #1
 8014a08:	6010      	str	r0, [r2, #0]
 8014a0a:	7019      	strb	r1, [r3, #0]
 8014a0c:	4608      	mov	r0, r1
 8014a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a12:	4770      	bx	lr

08014a14 <__sfputs_r>:
 8014a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a16:	4606      	mov	r6, r0
 8014a18:	460f      	mov	r7, r1
 8014a1a:	4614      	mov	r4, r2
 8014a1c:	18d5      	adds	r5, r2, r3
 8014a1e:	42ac      	cmp	r4, r5
 8014a20:	d101      	bne.n	8014a26 <__sfputs_r+0x12>
 8014a22:	2000      	movs	r0, #0
 8014a24:	e007      	b.n	8014a36 <__sfputs_r+0x22>
 8014a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a2a:	463a      	mov	r2, r7
 8014a2c:	4630      	mov	r0, r6
 8014a2e:	f7ff ffda 	bl	80149e6 <__sfputc_r>
 8014a32:	1c43      	adds	r3, r0, #1
 8014a34:	d1f3      	bne.n	8014a1e <__sfputs_r+0xa>
 8014a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014a38 <_vfiprintf_r>:
 8014a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a3c:	460d      	mov	r5, r1
 8014a3e:	b09d      	sub	sp, #116	; 0x74
 8014a40:	4614      	mov	r4, r2
 8014a42:	4698      	mov	r8, r3
 8014a44:	4606      	mov	r6, r0
 8014a46:	b118      	cbz	r0, 8014a50 <_vfiprintf_r+0x18>
 8014a48:	6983      	ldr	r3, [r0, #24]
 8014a4a:	b90b      	cbnz	r3, 8014a50 <_vfiprintf_r+0x18>
 8014a4c:	f000 fb14 	bl	8015078 <__sinit>
 8014a50:	4b89      	ldr	r3, [pc, #548]	; (8014c78 <_vfiprintf_r+0x240>)
 8014a52:	429d      	cmp	r5, r3
 8014a54:	d11b      	bne.n	8014a8e <_vfiprintf_r+0x56>
 8014a56:	6875      	ldr	r5, [r6, #4]
 8014a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a5a:	07d9      	lsls	r1, r3, #31
 8014a5c:	d405      	bmi.n	8014a6a <_vfiprintf_r+0x32>
 8014a5e:	89ab      	ldrh	r3, [r5, #12]
 8014a60:	059a      	lsls	r2, r3, #22
 8014a62:	d402      	bmi.n	8014a6a <_vfiprintf_r+0x32>
 8014a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a66:	f7ff ffaa 	bl	80149be <__retarget_lock_acquire_recursive>
 8014a6a:	89ab      	ldrh	r3, [r5, #12]
 8014a6c:	071b      	lsls	r3, r3, #28
 8014a6e:	d501      	bpl.n	8014a74 <_vfiprintf_r+0x3c>
 8014a70:	692b      	ldr	r3, [r5, #16]
 8014a72:	b9eb      	cbnz	r3, 8014ab0 <_vfiprintf_r+0x78>
 8014a74:	4629      	mov	r1, r5
 8014a76:	4630      	mov	r0, r6
 8014a78:	f000 f96e 	bl	8014d58 <__swsetup_r>
 8014a7c:	b1c0      	cbz	r0, 8014ab0 <_vfiprintf_r+0x78>
 8014a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a80:	07dc      	lsls	r4, r3, #31
 8014a82:	d50e      	bpl.n	8014aa2 <_vfiprintf_r+0x6a>
 8014a84:	f04f 30ff 	mov.w	r0, #4294967295
 8014a88:	b01d      	add	sp, #116	; 0x74
 8014a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a8e:	4b7b      	ldr	r3, [pc, #492]	; (8014c7c <_vfiprintf_r+0x244>)
 8014a90:	429d      	cmp	r5, r3
 8014a92:	d101      	bne.n	8014a98 <_vfiprintf_r+0x60>
 8014a94:	68b5      	ldr	r5, [r6, #8]
 8014a96:	e7df      	b.n	8014a58 <_vfiprintf_r+0x20>
 8014a98:	4b79      	ldr	r3, [pc, #484]	; (8014c80 <_vfiprintf_r+0x248>)
 8014a9a:	429d      	cmp	r5, r3
 8014a9c:	bf08      	it	eq
 8014a9e:	68f5      	ldreq	r5, [r6, #12]
 8014aa0:	e7da      	b.n	8014a58 <_vfiprintf_r+0x20>
 8014aa2:	89ab      	ldrh	r3, [r5, #12]
 8014aa4:	0598      	lsls	r0, r3, #22
 8014aa6:	d4ed      	bmi.n	8014a84 <_vfiprintf_r+0x4c>
 8014aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014aaa:	f7ff ff89 	bl	80149c0 <__retarget_lock_release_recursive>
 8014aae:	e7e9      	b.n	8014a84 <_vfiprintf_r+0x4c>
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8014ab4:	2320      	movs	r3, #32
 8014ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8014abe:	2330      	movs	r3, #48	; 0x30
 8014ac0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014c84 <_vfiprintf_r+0x24c>
 8014ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ac8:	f04f 0901 	mov.w	r9, #1
 8014acc:	4623      	mov	r3, r4
 8014ace:	469a      	mov	sl, r3
 8014ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ad4:	b10a      	cbz	r2, 8014ada <_vfiprintf_r+0xa2>
 8014ad6:	2a25      	cmp	r2, #37	; 0x25
 8014ad8:	d1f9      	bne.n	8014ace <_vfiprintf_r+0x96>
 8014ada:	ebba 0b04 	subs.w	fp, sl, r4
 8014ade:	d00b      	beq.n	8014af8 <_vfiprintf_r+0xc0>
 8014ae0:	465b      	mov	r3, fp
 8014ae2:	4622      	mov	r2, r4
 8014ae4:	4629      	mov	r1, r5
 8014ae6:	4630      	mov	r0, r6
 8014ae8:	f7ff ff94 	bl	8014a14 <__sfputs_r>
 8014aec:	3001      	adds	r0, #1
 8014aee:	f000 80aa 	beq.w	8014c46 <_vfiprintf_r+0x20e>
 8014af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014af4:	445a      	add	r2, fp
 8014af6:	9209      	str	r2, [sp, #36]	; 0x24
 8014af8:	f89a 3000 	ldrb.w	r3, [sl]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	f000 80a2 	beq.w	8014c46 <_vfiprintf_r+0x20e>
 8014b02:	2300      	movs	r3, #0
 8014b04:	f04f 32ff 	mov.w	r2, #4294967295
 8014b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b0c:	f10a 0a01 	add.w	sl, sl, #1
 8014b10:	9304      	str	r3, [sp, #16]
 8014b12:	9307      	str	r3, [sp, #28]
 8014b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b18:	931a      	str	r3, [sp, #104]	; 0x68
 8014b1a:	4654      	mov	r4, sl
 8014b1c:	2205      	movs	r2, #5
 8014b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b22:	4858      	ldr	r0, [pc, #352]	; (8014c84 <_vfiprintf_r+0x24c>)
 8014b24:	f7eb fbe4 	bl	80002f0 <memchr>
 8014b28:	9a04      	ldr	r2, [sp, #16]
 8014b2a:	b9d8      	cbnz	r0, 8014b64 <_vfiprintf_r+0x12c>
 8014b2c:	06d1      	lsls	r1, r2, #27
 8014b2e:	bf44      	itt	mi
 8014b30:	2320      	movmi	r3, #32
 8014b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b36:	0713      	lsls	r3, r2, #28
 8014b38:	bf44      	itt	mi
 8014b3a:	232b      	movmi	r3, #43	; 0x2b
 8014b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b40:	f89a 3000 	ldrb.w	r3, [sl]
 8014b44:	2b2a      	cmp	r3, #42	; 0x2a
 8014b46:	d015      	beq.n	8014b74 <_vfiprintf_r+0x13c>
 8014b48:	9a07      	ldr	r2, [sp, #28]
 8014b4a:	4654      	mov	r4, sl
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	f04f 0c0a 	mov.w	ip, #10
 8014b52:	4621      	mov	r1, r4
 8014b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b58:	3b30      	subs	r3, #48	; 0x30
 8014b5a:	2b09      	cmp	r3, #9
 8014b5c:	d94e      	bls.n	8014bfc <_vfiprintf_r+0x1c4>
 8014b5e:	b1b0      	cbz	r0, 8014b8e <_vfiprintf_r+0x156>
 8014b60:	9207      	str	r2, [sp, #28]
 8014b62:	e014      	b.n	8014b8e <_vfiprintf_r+0x156>
 8014b64:	eba0 0308 	sub.w	r3, r0, r8
 8014b68:	fa09 f303 	lsl.w	r3, r9, r3
 8014b6c:	4313      	orrs	r3, r2
 8014b6e:	9304      	str	r3, [sp, #16]
 8014b70:	46a2      	mov	sl, r4
 8014b72:	e7d2      	b.n	8014b1a <_vfiprintf_r+0xe2>
 8014b74:	9b03      	ldr	r3, [sp, #12]
 8014b76:	1d19      	adds	r1, r3, #4
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	9103      	str	r1, [sp, #12]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	bfbb      	ittet	lt
 8014b80:	425b      	neglt	r3, r3
 8014b82:	f042 0202 	orrlt.w	r2, r2, #2
 8014b86:	9307      	strge	r3, [sp, #28]
 8014b88:	9307      	strlt	r3, [sp, #28]
 8014b8a:	bfb8      	it	lt
 8014b8c:	9204      	strlt	r2, [sp, #16]
 8014b8e:	7823      	ldrb	r3, [r4, #0]
 8014b90:	2b2e      	cmp	r3, #46	; 0x2e
 8014b92:	d10c      	bne.n	8014bae <_vfiprintf_r+0x176>
 8014b94:	7863      	ldrb	r3, [r4, #1]
 8014b96:	2b2a      	cmp	r3, #42	; 0x2a
 8014b98:	d135      	bne.n	8014c06 <_vfiprintf_r+0x1ce>
 8014b9a:	9b03      	ldr	r3, [sp, #12]
 8014b9c:	1d1a      	adds	r2, r3, #4
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	9203      	str	r2, [sp, #12]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	bfb8      	it	lt
 8014ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8014baa:	3402      	adds	r4, #2
 8014bac:	9305      	str	r3, [sp, #20]
 8014bae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014c94 <_vfiprintf_r+0x25c>
 8014bb2:	7821      	ldrb	r1, [r4, #0]
 8014bb4:	2203      	movs	r2, #3
 8014bb6:	4650      	mov	r0, sl
 8014bb8:	f7eb fb9a 	bl	80002f0 <memchr>
 8014bbc:	b140      	cbz	r0, 8014bd0 <_vfiprintf_r+0x198>
 8014bbe:	2340      	movs	r3, #64	; 0x40
 8014bc0:	eba0 000a 	sub.w	r0, r0, sl
 8014bc4:	fa03 f000 	lsl.w	r0, r3, r0
 8014bc8:	9b04      	ldr	r3, [sp, #16]
 8014bca:	4303      	orrs	r3, r0
 8014bcc:	3401      	adds	r4, #1
 8014bce:	9304      	str	r3, [sp, #16]
 8014bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bd4:	482c      	ldr	r0, [pc, #176]	; (8014c88 <_vfiprintf_r+0x250>)
 8014bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014bda:	2206      	movs	r2, #6
 8014bdc:	f7eb fb88 	bl	80002f0 <memchr>
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d03f      	beq.n	8014c64 <_vfiprintf_r+0x22c>
 8014be4:	4b29      	ldr	r3, [pc, #164]	; (8014c8c <_vfiprintf_r+0x254>)
 8014be6:	bb1b      	cbnz	r3, 8014c30 <_vfiprintf_r+0x1f8>
 8014be8:	9b03      	ldr	r3, [sp, #12]
 8014bea:	3307      	adds	r3, #7
 8014bec:	f023 0307 	bic.w	r3, r3, #7
 8014bf0:	3308      	adds	r3, #8
 8014bf2:	9303      	str	r3, [sp, #12]
 8014bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bf6:	443b      	add	r3, r7
 8014bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8014bfa:	e767      	b.n	8014acc <_vfiprintf_r+0x94>
 8014bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c00:	460c      	mov	r4, r1
 8014c02:	2001      	movs	r0, #1
 8014c04:	e7a5      	b.n	8014b52 <_vfiprintf_r+0x11a>
 8014c06:	2300      	movs	r3, #0
 8014c08:	3401      	adds	r4, #1
 8014c0a:	9305      	str	r3, [sp, #20]
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	f04f 0c0a 	mov.w	ip, #10
 8014c12:	4620      	mov	r0, r4
 8014c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c18:	3a30      	subs	r2, #48	; 0x30
 8014c1a:	2a09      	cmp	r2, #9
 8014c1c:	d903      	bls.n	8014c26 <_vfiprintf_r+0x1ee>
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d0c5      	beq.n	8014bae <_vfiprintf_r+0x176>
 8014c22:	9105      	str	r1, [sp, #20]
 8014c24:	e7c3      	b.n	8014bae <_vfiprintf_r+0x176>
 8014c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c2a:	4604      	mov	r4, r0
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	e7f0      	b.n	8014c12 <_vfiprintf_r+0x1da>
 8014c30:	ab03      	add	r3, sp, #12
 8014c32:	9300      	str	r3, [sp, #0]
 8014c34:	462a      	mov	r2, r5
 8014c36:	4b16      	ldr	r3, [pc, #88]	; (8014c90 <_vfiprintf_r+0x258>)
 8014c38:	a904      	add	r1, sp, #16
 8014c3a:	4630      	mov	r0, r6
 8014c3c:	f7fe f910 	bl	8012e60 <_printf_float>
 8014c40:	4607      	mov	r7, r0
 8014c42:	1c78      	adds	r0, r7, #1
 8014c44:	d1d6      	bne.n	8014bf4 <_vfiprintf_r+0x1bc>
 8014c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c48:	07d9      	lsls	r1, r3, #31
 8014c4a:	d405      	bmi.n	8014c58 <_vfiprintf_r+0x220>
 8014c4c:	89ab      	ldrh	r3, [r5, #12]
 8014c4e:	059a      	lsls	r2, r3, #22
 8014c50:	d402      	bmi.n	8014c58 <_vfiprintf_r+0x220>
 8014c52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c54:	f7ff feb4 	bl	80149c0 <__retarget_lock_release_recursive>
 8014c58:	89ab      	ldrh	r3, [r5, #12]
 8014c5a:	065b      	lsls	r3, r3, #25
 8014c5c:	f53f af12 	bmi.w	8014a84 <_vfiprintf_r+0x4c>
 8014c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c62:	e711      	b.n	8014a88 <_vfiprintf_r+0x50>
 8014c64:	ab03      	add	r3, sp, #12
 8014c66:	9300      	str	r3, [sp, #0]
 8014c68:	462a      	mov	r2, r5
 8014c6a:	4b09      	ldr	r3, [pc, #36]	; (8014c90 <_vfiprintf_r+0x258>)
 8014c6c:	a904      	add	r1, sp, #16
 8014c6e:	4630      	mov	r0, r6
 8014c70:	f7fe fb82 	bl	8013378 <_printf_i>
 8014c74:	e7e4      	b.n	8014c40 <_vfiprintf_r+0x208>
 8014c76:	bf00      	nop
 8014c78:	080158b4 	.word	0x080158b4
 8014c7c:	080158d4 	.word	0x080158d4
 8014c80:	08015894 	.word	0x08015894
 8014c84:	08015782 	.word	0x08015782
 8014c88:	0801578c 	.word	0x0801578c
 8014c8c:	08012e61 	.word	0x08012e61
 8014c90:	08014a15 	.word	0x08014a15
 8014c94:	08015788 	.word	0x08015788

08014c98 <__swbuf_r>:
 8014c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c9a:	460e      	mov	r6, r1
 8014c9c:	4614      	mov	r4, r2
 8014c9e:	4605      	mov	r5, r0
 8014ca0:	b118      	cbz	r0, 8014caa <__swbuf_r+0x12>
 8014ca2:	6983      	ldr	r3, [r0, #24]
 8014ca4:	b90b      	cbnz	r3, 8014caa <__swbuf_r+0x12>
 8014ca6:	f000 f9e7 	bl	8015078 <__sinit>
 8014caa:	4b21      	ldr	r3, [pc, #132]	; (8014d30 <__swbuf_r+0x98>)
 8014cac:	429c      	cmp	r4, r3
 8014cae:	d12b      	bne.n	8014d08 <__swbuf_r+0x70>
 8014cb0:	686c      	ldr	r4, [r5, #4]
 8014cb2:	69a3      	ldr	r3, [r4, #24]
 8014cb4:	60a3      	str	r3, [r4, #8]
 8014cb6:	89a3      	ldrh	r3, [r4, #12]
 8014cb8:	071a      	lsls	r2, r3, #28
 8014cba:	d52f      	bpl.n	8014d1c <__swbuf_r+0x84>
 8014cbc:	6923      	ldr	r3, [r4, #16]
 8014cbe:	b36b      	cbz	r3, 8014d1c <__swbuf_r+0x84>
 8014cc0:	6923      	ldr	r3, [r4, #16]
 8014cc2:	6820      	ldr	r0, [r4, #0]
 8014cc4:	1ac0      	subs	r0, r0, r3
 8014cc6:	6963      	ldr	r3, [r4, #20]
 8014cc8:	b2f6      	uxtb	r6, r6
 8014cca:	4283      	cmp	r3, r0
 8014ccc:	4637      	mov	r7, r6
 8014cce:	dc04      	bgt.n	8014cda <__swbuf_r+0x42>
 8014cd0:	4621      	mov	r1, r4
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f000 f93c 	bl	8014f50 <_fflush_r>
 8014cd8:	bb30      	cbnz	r0, 8014d28 <__swbuf_r+0x90>
 8014cda:	68a3      	ldr	r3, [r4, #8]
 8014cdc:	3b01      	subs	r3, #1
 8014cde:	60a3      	str	r3, [r4, #8]
 8014ce0:	6823      	ldr	r3, [r4, #0]
 8014ce2:	1c5a      	adds	r2, r3, #1
 8014ce4:	6022      	str	r2, [r4, #0]
 8014ce6:	701e      	strb	r6, [r3, #0]
 8014ce8:	6963      	ldr	r3, [r4, #20]
 8014cea:	3001      	adds	r0, #1
 8014cec:	4283      	cmp	r3, r0
 8014cee:	d004      	beq.n	8014cfa <__swbuf_r+0x62>
 8014cf0:	89a3      	ldrh	r3, [r4, #12]
 8014cf2:	07db      	lsls	r3, r3, #31
 8014cf4:	d506      	bpl.n	8014d04 <__swbuf_r+0x6c>
 8014cf6:	2e0a      	cmp	r6, #10
 8014cf8:	d104      	bne.n	8014d04 <__swbuf_r+0x6c>
 8014cfa:	4621      	mov	r1, r4
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	f000 f927 	bl	8014f50 <_fflush_r>
 8014d02:	b988      	cbnz	r0, 8014d28 <__swbuf_r+0x90>
 8014d04:	4638      	mov	r0, r7
 8014d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d08:	4b0a      	ldr	r3, [pc, #40]	; (8014d34 <__swbuf_r+0x9c>)
 8014d0a:	429c      	cmp	r4, r3
 8014d0c:	d101      	bne.n	8014d12 <__swbuf_r+0x7a>
 8014d0e:	68ac      	ldr	r4, [r5, #8]
 8014d10:	e7cf      	b.n	8014cb2 <__swbuf_r+0x1a>
 8014d12:	4b09      	ldr	r3, [pc, #36]	; (8014d38 <__swbuf_r+0xa0>)
 8014d14:	429c      	cmp	r4, r3
 8014d16:	bf08      	it	eq
 8014d18:	68ec      	ldreq	r4, [r5, #12]
 8014d1a:	e7ca      	b.n	8014cb2 <__swbuf_r+0x1a>
 8014d1c:	4621      	mov	r1, r4
 8014d1e:	4628      	mov	r0, r5
 8014d20:	f000 f81a 	bl	8014d58 <__swsetup_r>
 8014d24:	2800      	cmp	r0, #0
 8014d26:	d0cb      	beq.n	8014cc0 <__swbuf_r+0x28>
 8014d28:	f04f 37ff 	mov.w	r7, #4294967295
 8014d2c:	e7ea      	b.n	8014d04 <__swbuf_r+0x6c>
 8014d2e:	bf00      	nop
 8014d30:	080158b4 	.word	0x080158b4
 8014d34:	080158d4 	.word	0x080158d4
 8014d38:	08015894 	.word	0x08015894

08014d3c <__ascii_wctomb>:
 8014d3c:	b149      	cbz	r1, 8014d52 <__ascii_wctomb+0x16>
 8014d3e:	2aff      	cmp	r2, #255	; 0xff
 8014d40:	bf85      	ittet	hi
 8014d42:	238a      	movhi	r3, #138	; 0x8a
 8014d44:	6003      	strhi	r3, [r0, #0]
 8014d46:	700a      	strbls	r2, [r1, #0]
 8014d48:	f04f 30ff 	movhi.w	r0, #4294967295
 8014d4c:	bf98      	it	ls
 8014d4e:	2001      	movls	r0, #1
 8014d50:	4770      	bx	lr
 8014d52:	4608      	mov	r0, r1
 8014d54:	4770      	bx	lr
	...

08014d58 <__swsetup_r>:
 8014d58:	4b32      	ldr	r3, [pc, #200]	; (8014e24 <__swsetup_r+0xcc>)
 8014d5a:	b570      	push	{r4, r5, r6, lr}
 8014d5c:	681d      	ldr	r5, [r3, #0]
 8014d5e:	4606      	mov	r6, r0
 8014d60:	460c      	mov	r4, r1
 8014d62:	b125      	cbz	r5, 8014d6e <__swsetup_r+0x16>
 8014d64:	69ab      	ldr	r3, [r5, #24]
 8014d66:	b913      	cbnz	r3, 8014d6e <__swsetup_r+0x16>
 8014d68:	4628      	mov	r0, r5
 8014d6a:	f000 f985 	bl	8015078 <__sinit>
 8014d6e:	4b2e      	ldr	r3, [pc, #184]	; (8014e28 <__swsetup_r+0xd0>)
 8014d70:	429c      	cmp	r4, r3
 8014d72:	d10f      	bne.n	8014d94 <__swsetup_r+0x3c>
 8014d74:	686c      	ldr	r4, [r5, #4]
 8014d76:	89a3      	ldrh	r3, [r4, #12]
 8014d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d7c:	0719      	lsls	r1, r3, #28
 8014d7e:	d42c      	bmi.n	8014dda <__swsetup_r+0x82>
 8014d80:	06dd      	lsls	r5, r3, #27
 8014d82:	d411      	bmi.n	8014da8 <__swsetup_r+0x50>
 8014d84:	2309      	movs	r3, #9
 8014d86:	6033      	str	r3, [r6, #0]
 8014d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d8c:	81a3      	strh	r3, [r4, #12]
 8014d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8014d92:	e03e      	b.n	8014e12 <__swsetup_r+0xba>
 8014d94:	4b25      	ldr	r3, [pc, #148]	; (8014e2c <__swsetup_r+0xd4>)
 8014d96:	429c      	cmp	r4, r3
 8014d98:	d101      	bne.n	8014d9e <__swsetup_r+0x46>
 8014d9a:	68ac      	ldr	r4, [r5, #8]
 8014d9c:	e7eb      	b.n	8014d76 <__swsetup_r+0x1e>
 8014d9e:	4b24      	ldr	r3, [pc, #144]	; (8014e30 <__swsetup_r+0xd8>)
 8014da0:	429c      	cmp	r4, r3
 8014da2:	bf08      	it	eq
 8014da4:	68ec      	ldreq	r4, [r5, #12]
 8014da6:	e7e6      	b.n	8014d76 <__swsetup_r+0x1e>
 8014da8:	0758      	lsls	r0, r3, #29
 8014daa:	d512      	bpl.n	8014dd2 <__swsetup_r+0x7a>
 8014dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014dae:	b141      	cbz	r1, 8014dc2 <__swsetup_r+0x6a>
 8014db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014db4:	4299      	cmp	r1, r3
 8014db6:	d002      	beq.n	8014dbe <__swsetup_r+0x66>
 8014db8:	4630      	mov	r0, r6
 8014dba:	f7fd ff15 	bl	8012be8 <_free_r>
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014dc8:	81a3      	strh	r3, [r4, #12]
 8014dca:	2300      	movs	r3, #0
 8014dcc:	6063      	str	r3, [r4, #4]
 8014dce:	6923      	ldr	r3, [r4, #16]
 8014dd0:	6023      	str	r3, [r4, #0]
 8014dd2:	89a3      	ldrh	r3, [r4, #12]
 8014dd4:	f043 0308 	orr.w	r3, r3, #8
 8014dd8:	81a3      	strh	r3, [r4, #12]
 8014dda:	6923      	ldr	r3, [r4, #16]
 8014ddc:	b94b      	cbnz	r3, 8014df2 <__swsetup_r+0x9a>
 8014dde:	89a3      	ldrh	r3, [r4, #12]
 8014de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014de8:	d003      	beq.n	8014df2 <__swsetup_r+0x9a>
 8014dea:	4621      	mov	r1, r4
 8014dec:	4630      	mov	r0, r6
 8014dee:	f000 fa05 	bl	80151fc <__smakebuf_r>
 8014df2:	89a0      	ldrh	r0, [r4, #12]
 8014df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014df8:	f010 0301 	ands.w	r3, r0, #1
 8014dfc:	d00a      	beq.n	8014e14 <__swsetup_r+0xbc>
 8014dfe:	2300      	movs	r3, #0
 8014e00:	60a3      	str	r3, [r4, #8]
 8014e02:	6963      	ldr	r3, [r4, #20]
 8014e04:	425b      	negs	r3, r3
 8014e06:	61a3      	str	r3, [r4, #24]
 8014e08:	6923      	ldr	r3, [r4, #16]
 8014e0a:	b943      	cbnz	r3, 8014e1e <__swsetup_r+0xc6>
 8014e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e10:	d1ba      	bne.n	8014d88 <__swsetup_r+0x30>
 8014e12:	bd70      	pop	{r4, r5, r6, pc}
 8014e14:	0781      	lsls	r1, r0, #30
 8014e16:	bf58      	it	pl
 8014e18:	6963      	ldrpl	r3, [r4, #20]
 8014e1a:	60a3      	str	r3, [r4, #8]
 8014e1c:	e7f4      	b.n	8014e08 <__swsetup_r+0xb0>
 8014e1e:	2000      	movs	r0, #0
 8014e20:	e7f7      	b.n	8014e12 <__swsetup_r+0xba>
 8014e22:	bf00      	nop
 8014e24:	24000198 	.word	0x24000198
 8014e28:	080158b4 	.word	0x080158b4
 8014e2c:	080158d4 	.word	0x080158d4
 8014e30:	08015894 	.word	0x08015894

08014e34 <abort>:
 8014e34:	b508      	push	{r3, lr}
 8014e36:	2006      	movs	r0, #6
 8014e38:	f000 fa48 	bl	80152cc <raise>
 8014e3c:	2001      	movs	r0, #1
 8014e3e:	f7ec fa33 	bl	80012a8 <_exit>
	...

08014e44 <__sflush_r>:
 8014e44:	898a      	ldrh	r2, [r1, #12]
 8014e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e4a:	4605      	mov	r5, r0
 8014e4c:	0710      	lsls	r0, r2, #28
 8014e4e:	460c      	mov	r4, r1
 8014e50:	d458      	bmi.n	8014f04 <__sflush_r+0xc0>
 8014e52:	684b      	ldr	r3, [r1, #4]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	dc05      	bgt.n	8014e64 <__sflush_r+0x20>
 8014e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	dc02      	bgt.n	8014e64 <__sflush_r+0x20>
 8014e5e:	2000      	movs	r0, #0
 8014e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e66:	2e00      	cmp	r6, #0
 8014e68:	d0f9      	beq.n	8014e5e <__sflush_r+0x1a>
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e70:	682f      	ldr	r7, [r5, #0]
 8014e72:	602b      	str	r3, [r5, #0]
 8014e74:	d032      	beq.n	8014edc <__sflush_r+0x98>
 8014e76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e78:	89a3      	ldrh	r3, [r4, #12]
 8014e7a:	075a      	lsls	r2, r3, #29
 8014e7c:	d505      	bpl.n	8014e8a <__sflush_r+0x46>
 8014e7e:	6863      	ldr	r3, [r4, #4]
 8014e80:	1ac0      	subs	r0, r0, r3
 8014e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e84:	b10b      	cbz	r3, 8014e8a <__sflush_r+0x46>
 8014e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e88:	1ac0      	subs	r0, r0, r3
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e90:	6a21      	ldr	r1, [r4, #32]
 8014e92:	4628      	mov	r0, r5
 8014e94:	47b0      	blx	r6
 8014e96:	1c43      	adds	r3, r0, #1
 8014e98:	89a3      	ldrh	r3, [r4, #12]
 8014e9a:	d106      	bne.n	8014eaa <__sflush_r+0x66>
 8014e9c:	6829      	ldr	r1, [r5, #0]
 8014e9e:	291d      	cmp	r1, #29
 8014ea0:	d82c      	bhi.n	8014efc <__sflush_r+0xb8>
 8014ea2:	4a2a      	ldr	r2, [pc, #168]	; (8014f4c <__sflush_r+0x108>)
 8014ea4:	40ca      	lsrs	r2, r1
 8014ea6:	07d6      	lsls	r6, r2, #31
 8014ea8:	d528      	bpl.n	8014efc <__sflush_r+0xb8>
 8014eaa:	2200      	movs	r2, #0
 8014eac:	6062      	str	r2, [r4, #4]
 8014eae:	04d9      	lsls	r1, r3, #19
 8014eb0:	6922      	ldr	r2, [r4, #16]
 8014eb2:	6022      	str	r2, [r4, #0]
 8014eb4:	d504      	bpl.n	8014ec0 <__sflush_r+0x7c>
 8014eb6:	1c42      	adds	r2, r0, #1
 8014eb8:	d101      	bne.n	8014ebe <__sflush_r+0x7a>
 8014eba:	682b      	ldr	r3, [r5, #0]
 8014ebc:	b903      	cbnz	r3, 8014ec0 <__sflush_r+0x7c>
 8014ebe:	6560      	str	r0, [r4, #84]	; 0x54
 8014ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ec2:	602f      	str	r7, [r5, #0]
 8014ec4:	2900      	cmp	r1, #0
 8014ec6:	d0ca      	beq.n	8014e5e <__sflush_r+0x1a>
 8014ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ecc:	4299      	cmp	r1, r3
 8014ece:	d002      	beq.n	8014ed6 <__sflush_r+0x92>
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	f7fd fe89 	bl	8012be8 <_free_r>
 8014ed6:	2000      	movs	r0, #0
 8014ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8014eda:	e7c1      	b.n	8014e60 <__sflush_r+0x1c>
 8014edc:	6a21      	ldr	r1, [r4, #32]
 8014ede:	2301      	movs	r3, #1
 8014ee0:	4628      	mov	r0, r5
 8014ee2:	47b0      	blx	r6
 8014ee4:	1c41      	adds	r1, r0, #1
 8014ee6:	d1c7      	bne.n	8014e78 <__sflush_r+0x34>
 8014ee8:	682b      	ldr	r3, [r5, #0]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d0c4      	beq.n	8014e78 <__sflush_r+0x34>
 8014eee:	2b1d      	cmp	r3, #29
 8014ef0:	d001      	beq.n	8014ef6 <__sflush_r+0xb2>
 8014ef2:	2b16      	cmp	r3, #22
 8014ef4:	d101      	bne.n	8014efa <__sflush_r+0xb6>
 8014ef6:	602f      	str	r7, [r5, #0]
 8014ef8:	e7b1      	b.n	8014e5e <__sflush_r+0x1a>
 8014efa:	89a3      	ldrh	r3, [r4, #12]
 8014efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f00:	81a3      	strh	r3, [r4, #12]
 8014f02:	e7ad      	b.n	8014e60 <__sflush_r+0x1c>
 8014f04:	690f      	ldr	r7, [r1, #16]
 8014f06:	2f00      	cmp	r7, #0
 8014f08:	d0a9      	beq.n	8014e5e <__sflush_r+0x1a>
 8014f0a:	0793      	lsls	r3, r2, #30
 8014f0c:	680e      	ldr	r6, [r1, #0]
 8014f0e:	bf08      	it	eq
 8014f10:	694b      	ldreq	r3, [r1, #20]
 8014f12:	600f      	str	r7, [r1, #0]
 8014f14:	bf18      	it	ne
 8014f16:	2300      	movne	r3, #0
 8014f18:	eba6 0807 	sub.w	r8, r6, r7
 8014f1c:	608b      	str	r3, [r1, #8]
 8014f1e:	f1b8 0f00 	cmp.w	r8, #0
 8014f22:	dd9c      	ble.n	8014e5e <__sflush_r+0x1a>
 8014f24:	6a21      	ldr	r1, [r4, #32]
 8014f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f28:	4643      	mov	r3, r8
 8014f2a:	463a      	mov	r2, r7
 8014f2c:	4628      	mov	r0, r5
 8014f2e:	47b0      	blx	r6
 8014f30:	2800      	cmp	r0, #0
 8014f32:	dc06      	bgt.n	8014f42 <__sflush_r+0xfe>
 8014f34:	89a3      	ldrh	r3, [r4, #12]
 8014f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f3a:	81a3      	strh	r3, [r4, #12]
 8014f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f40:	e78e      	b.n	8014e60 <__sflush_r+0x1c>
 8014f42:	4407      	add	r7, r0
 8014f44:	eba8 0800 	sub.w	r8, r8, r0
 8014f48:	e7e9      	b.n	8014f1e <__sflush_r+0xda>
 8014f4a:	bf00      	nop
 8014f4c:	20400001 	.word	0x20400001

08014f50 <_fflush_r>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	690b      	ldr	r3, [r1, #16]
 8014f54:	4605      	mov	r5, r0
 8014f56:	460c      	mov	r4, r1
 8014f58:	b913      	cbnz	r3, 8014f60 <_fflush_r+0x10>
 8014f5a:	2500      	movs	r5, #0
 8014f5c:	4628      	mov	r0, r5
 8014f5e:	bd38      	pop	{r3, r4, r5, pc}
 8014f60:	b118      	cbz	r0, 8014f6a <_fflush_r+0x1a>
 8014f62:	6983      	ldr	r3, [r0, #24]
 8014f64:	b90b      	cbnz	r3, 8014f6a <_fflush_r+0x1a>
 8014f66:	f000 f887 	bl	8015078 <__sinit>
 8014f6a:	4b14      	ldr	r3, [pc, #80]	; (8014fbc <_fflush_r+0x6c>)
 8014f6c:	429c      	cmp	r4, r3
 8014f6e:	d11b      	bne.n	8014fa8 <_fflush_r+0x58>
 8014f70:	686c      	ldr	r4, [r5, #4]
 8014f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d0ef      	beq.n	8014f5a <_fflush_r+0xa>
 8014f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014f7c:	07d0      	lsls	r0, r2, #31
 8014f7e:	d404      	bmi.n	8014f8a <_fflush_r+0x3a>
 8014f80:	0599      	lsls	r1, r3, #22
 8014f82:	d402      	bmi.n	8014f8a <_fflush_r+0x3a>
 8014f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f86:	f7ff fd1a 	bl	80149be <__retarget_lock_acquire_recursive>
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	4621      	mov	r1, r4
 8014f8e:	f7ff ff59 	bl	8014e44 <__sflush_r>
 8014f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f94:	07da      	lsls	r2, r3, #31
 8014f96:	4605      	mov	r5, r0
 8014f98:	d4e0      	bmi.n	8014f5c <_fflush_r+0xc>
 8014f9a:	89a3      	ldrh	r3, [r4, #12]
 8014f9c:	059b      	lsls	r3, r3, #22
 8014f9e:	d4dd      	bmi.n	8014f5c <_fflush_r+0xc>
 8014fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fa2:	f7ff fd0d 	bl	80149c0 <__retarget_lock_release_recursive>
 8014fa6:	e7d9      	b.n	8014f5c <_fflush_r+0xc>
 8014fa8:	4b05      	ldr	r3, [pc, #20]	; (8014fc0 <_fflush_r+0x70>)
 8014faa:	429c      	cmp	r4, r3
 8014fac:	d101      	bne.n	8014fb2 <_fflush_r+0x62>
 8014fae:	68ac      	ldr	r4, [r5, #8]
 8014fb0:	e7df      	b.n	8014f72 <_fflush_r+0x22>
 8014fb2:	4b04      	ldr	r3, [pc, #16]	; (8014fc4 <_fflush_r+0x74>)
 8014fb4:	429c      	cmp	r4, r3
 8014fb6:	bf08      	it	eq
 8014fb8:	68ec      	ldreq	r4, [r5, #12]
 8014fba:	e7da      	b.n	8014f72 <_fflush_r+0x22>
 8014fbc:	080158b4 	.word	0x080158b4
 8014fc0:	080158d4 	.word	0x080158d4
 8014fc4:	08015894 	.word	0x08015894

08014fc8 <std>:
 8014fc8:	2300      	movs	r3, #0
 8014fca:	b510      	push	{r4, lr}
 8014fcc:	4604      	mov	r4, r0
 8014fce:	e9c0 3300 	strd	r3, r3, [r0]
 8014fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014fd6:	6083      	str	r3, [r0, #8]
 8014fd8:	8181      	strh	r1, [r0, #12]
 8014fda:	6643      	str	r3, [r0, #100]	; 0x64
 8014fdc:	81c2      	strh	r2, [r0, #14]
 8014fde:	6183      	str	r3, [r0, #24]
 8014fe0:	4619      	mov	r1, r3
 8014fe2:	2208      	movs	r2, #8
 8014fe4:	305c      	adds	r0, #92	; 0x5c
 8014fe6:	f7fd fdf7 	bl	8012bd8 <memset>
 8014fea:	4b05      	ldr	r3, [pc, #20]	; (8015000 <std+0x38>)
 8014fec:	6263      	str	r3, [r4, #36]	; 0x24
 8014fee:	4b05      	ldr	r3, [pc, #20]	; (8015004 <std+0x3c>)
 8014ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8014ff2:	4b05      	ldr	r3, [pc, #20]	; (8015008 <std+0x40>)
 8014ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014ff6:	4b05      	ldr	r3, [pc, #20]	; (801500c <std+0x44>)
 8014ff8:	6224      	str	r4, [r4, #32]
 8014ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8014ffc:	bd10      	pop	{r4, pc}
 8014ffe:	bf00      	nop
 8015000:	08015305 	.word	0x08015305
 8015004:	08015327 	.word	0x08015327
 8015008:	0801535f 	.word	0x0801535f
 801500c:	08015383 	.word	0x08015383

08015010 <_cleanup_r>:
 8015010:	4901      	ldr	r1, [pc, #4]	; (8015018 <_cleanup_r+0x8>)
 8015012:	f000 b8af 	b.w	8015174 <_fwalk_reent>
 8015016:	bf00      	nop
 8015018:	08014f51 	.word	0x08014f51

0801501c <__sfmoreglue>:
 801501c:	b570      	push	{r4, r5, r6, lr}
 801501e:	1e4a      	subs	r2, r1, #1
 8015020:	2568      	movs	r5, #104	; 0x68
 8015022:	4355      	muls	r5, r2
 8015024:	460e      	mov	r6, r1
 8015026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801502a:	f7fd fe2d 	bl	8012c88 <_malloc_r>
 801502e:	4604      	mov	r4, r0
 8015030:	b140      	cbz	r0, 8015044 <__sfmoreglue+0x28>
 8015032:	2100      	movs	r1, #0
 8015034:	e9c0 1600 	strd	r1, r6, [r0]
 8015038:	300c      	adds	r0, #12
 801503a:	60a0      	str	r0, [r4, #8]
 801503c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015040:	f7fd fdca 	bl	8012bd8 <memset>
 8015044:	4620      	mov	r0, r4
 8015046:	bd70      	pop	{r4, r5, r6, pc}

08015048 <__sfp_lock_acquire>:
 8015048:	4801      	ldr	r0, [pc, #4]	; (8015050 <__sfp_lock_acquire+0x8>)
 801504a:	f7ff bcb8 	b.w	80149be <__retarget_lock_acquire_recursive>
 801504e:	bf00      	nop
 8015050:	24004084 	.word	0x24004084

08015054 <__sfp_lock_release>:
 8015054:	4801      	ldr	r0, [pc, #4]	; (801505c <__sfp_lock_release+0x8>)
 8015056:	f7ff bcb3 	b.w	80149c0 <__retarget_lock_release_recursive>
 801505a:	bf00      	nop
 801505c:	24004084 	.word	0x24004084

08015060 <__sinit_lock_acquire>:
 8015060:	4801      	ldr	r0, [pc, #4]	; (8015068 <__sinit_lock_acquire+0x8>)
 8015062:	f7ff bcac 	b.w	80149be <__retarget_lock_acquire_recursive>
 8015066:	bf00      	nop
 8015068:	2400407f 	.word	0x2400407f

0801506c <__sinit_lock_release>:
 801506c:	4801      	ldr	r0, [pc, #4]	; (8015074 <__sinit_lock_release+0x8>)
 801506e:	f7ff bca7 	b.w	80149c0 <__retarget_lock_release_recursive>
 8015072:	bf00      	nop
 8015074:	2400407f 	.word	0x2400407f

08015078 <__sinit>:
 8015078:	b510      	push	{r4, lr}
 801507a:	4604      	mov	r4, r0
 801507c:	f7ff fff0 	bl	8015060 <__sinit_lock_acquire>
 8015080:	69a3      	ldr	r3, [r4, #24]
 8015082:	b11b      	cbz	r3, 801508c <__sinit+0x14>
 8015084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015088:	f7ff bff0 	b.w	801506c <__sinit_lock_release>
 801508c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015090:	6523      	str	r3, [r4, #80]	; 0x50
 8015092:	4b13      	ldr	r3, [pc, #76]	; (80150e0 <__sinit+0x68>)
 8015094:	4a13      	ldr	r2, [pc, #76]	; (80150e4 <__sinit+0x6c>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	62a2      	str	r2, [r4, #40]	; 0x28
 801509a:	42a3      	cmp	r3, r4
 801509c:	bf04      	itt	eq
 801509e:	2301      	moveq	r3, #1
 80150a0:	61a3      	streq	r3, [r4, #24]
 80150a2:	4620      	mov	r0, r4
 80150a4:	f000 f820 	bl	80150e8 <__sfp>
 80150a8:	6060      	str	r0, [r4, #4]
 80150aa:	4620      	mov	r0, r4
 80150ac:	f000 f81c 	bl	80150e8 <__sfp>
 80150b0:	60a0      	str	r0, [r4, #8]
 80150b2:	4620      	mov	r0, r4
 80150b4:	f000 f818 	bl	80150e8 <__sfp>
 80150b8:	2200      	movs	r2, #0
 80150ba:	60e0      	str	r0, [r4, #12]
 80150bc:	2104      	movs	r1, #4
 80150be:	6860      	ldr	r0, [r4, #4]
 80150c0:	f7ff ff82 	bl	8014fc8 <std>
 80150c4:	68a0      	ldr	r0, [r4, #8]
 80150c6:	2201      	movs	r2, #1
 80150c8:	2109      	movs	r1, #9
 80150ca:	f7ff ff7d 	bl	8014fc8 <std>
 80150ce:	68e0      	ldr	r0, [r4, #12]
 80150d0:	2202      	movs	r2, #2
 80150d2:	2112      	movs	r1, #18
 80150d4:	f7ff ff78 	bl	8014fc8 <std>
 80150d8:	2301      	movs	r3, #1
 80150da:	61a3      	str	r3, [r4, #24]
 80150dc:	e7d2      	b.n	8015084 <__sinit+0xc>
 80150de:	bf00      	nop
 80150e0:	08015514 	.word	0x08015514
 80150e4:	08015011 	.word	0x08015011

080150e8 <__sfp>:
 80150e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ea:	4607      	mov	r7, r0
 80150ec:	f7ff ffac 	bl	8015048 <__sfp_lock_acquire>
 80150f0:	4b1e      	ldr	r3, [pc, #120]	; (801516c <__sfp+0x84>)
 80150f2:	681e      	ldr	r6, [r3, #0]
 80150f4:	69b3      	ldr	r3, [r6, #24]
 80150f6:	b913      	cbnz	r3, 80150fe <__sfp+0x16>
 80150f8:	4630      	mov	r0, r6
 80150fa:	f7ff ffbd 	bl	8015078 <__sinit>
 80150fe:	3648      	adds	r6, #72	; 0x48
 8015100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015104:	3b01      	subs	r3, #1
 8015106:	d503      	bpl.n	8015110 <__sfp+0x28>
 8015108:	6833      	ldr	r3, [r6, #0]
 801510a:	b30b      	cbz	r3, 8015150 <__sfp+0x68>
 801510c:	6836      	ldr	r6, [r6, #0]
 801510e:	e7f7      	b.n	8015100 <__sfp+0x18>
 8015110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015114:	b9d5      	cbnz	r5, 801514c <__sfp+0x64>
 8015116:	4b16      	ldr	r3, [pc, #88]	; (8015170 <__sfp+0x88>)
 8015118:	60e3      	str	r3, [r4, #12]
 801511a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801511e:	6665      	str	r5, [r4, #100]	; 0x64
 8015120:	f7ff fc4c 	bl	80149bc <__retarget_lock_init_recursive>
 8015124:	f7ff ff96 	bl	8015054 <__sfp_lock_release>
 8015128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801512c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015130:	6025      	str	r5, [r4, #0]
 8015132:	61a5      	str	r5, [r4, #24]
 8015134:	2208      	movs	r2, #8
 8015136:	4629      	mov	r1, r5
 8015138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801513c:	f7fd fd4c 	bl	8012bd8 <memset>
 8015140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015148:	4620      	mov	r0, r4
 801514a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801514c:	3468      	adds	r4, #104	; 0x68
 801514e:	e7d9      	b.n	8015104 <__sfp+0x1c>
 8015150:	2104      	movs	r1, #4
 8015152:	4638      	mov	r0, r7
 8015154:	f7ff ff62 	bl	801501c <__sfmoreglue>
 8015158:	4604      	mov	r4, r0
 801515a:	6030      	str	r0, [r6, #0]
 801515c:	2800      	cmp	r0, #0
 801515e:	d1d5      	bne.n	801510c <__sfp+0x24>
 8015160:	f7ff ff78 	bl	8015054 <__sfp_lock_release>
 8015164:	230c      	movs	r3, #12
 8015166:	603b      	str	r3, [r7, #0]
 8015168:	e7ee      	b.n	8015148 <__sfp+0x60>
 801516a:	bf00      	nop
 801516c:	08015514 	.word	0x08015514
 8015170:	ffff0001 	.word	0xffff0001

08015174 <_fwalk_reent>:
 8015174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015178:	4606      	mov	r6, r0
 801517a:	4688      	mov	r8, r1
 801517c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015180:	2700      	movs	r7, #0
 8015182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015186:	f1b9 0901 	subs.w	r9, r9, #1
 801518a:	d505      	bpl.n	8015198 <_fwalk_reent+0x24>
 801518c:	6824      	ldr	r4, [r4, #0]
 801518e:	2c00      	cmp	r4, #0
 8015190:	d1f7      	bne.n	8015182 <_fwalk_reent+0xe>
 8015192:	4638      	mov	r0, r7
 8015194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015198:	89ab      	ldrh	r3, [r5, #12]
 801519a:	2b01      	cmp	r3, #1
 801519c:	d907      	bls.n	80151ae <_fwalk_reent+0x3a>
 801519e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80151a2:	3301      	adds	r3, #1
 80151a4:	d003      	beq.n	80151ae <_fwalk_reent+0x3a>
 80151a6:	4629      	mov	r1, r5
 80151a8:	4630      	mov	r0, r6
 80151aa:	47c0      	blx	r8
 80151ac:	4307      	orrs	r7, r0
 80151ae:	3568      	adds	r5, #104	; 0x68
 80151b0:	e7e9      	b.n	8015186 <_fwalk_reent+0x12>

080151b2 <__swhatbuf_r>:
 80151b2:	b570      	push	{r4, r5, r6, lr}
 80151b4:	460e      	mov	r6, r1
 80151b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151ba:	2900      	cmp	r1, #0
 80151bc:	b096      	sub	sp, #88	; 0x58
 80151be:	4614      	mov	r4, r2
 80151c0:	461d      	mov	r5, r3
 80151c2:	da07      	bge.n	80151d4 <__swhatbuf_r+0x22>
 80151c4:	2300      	movs	r3, #0
 80151c6:	602b      	str	r3, [r5, #0]
 80151c8:	89b3      	ldrh	r3, [r6, #12]
 80151ca:	061a      	lsls	r2, r3, #24
 80151cc:	d410      	bmi.n	80151f0 <__swhatbuf_r+0x3e>
 80151ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80151d2:	e00e      	b.n	80151f2 <__swhatbuf_r+0x40>
 80151d4:	466a      	mov	r2, sp
 80151d6:	f000 f8fb 	bl	80153d0 <_fstat_r>
 80151da:	2800      	cmp	r0, #0
 80151dc:	dbf2      	blt.n	80151c4 <__swhatbuf_r+0x12>
 80151de:	9a01      	ldr	r2, [sp, #4]
 80151e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80151e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80151e8:	425a      	negs	r2, r3
 80151ea:	415a      	adcs	r2, r3
 80151ec:	602a      	str	r2, [r5, #0]
 80151ee:	e7ee      	b.n	80151ce <__swhatbuf_r+0x1c>
 80151f0:	2340      	movs	r3, #64	; 0x40
 80151f2:	2000      	movs	r0, #0
 80151f4:	6023      	str	r3, [r4, #0]
 80151f6:	b016      	add	sp, #88	; 0x58
 80151f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080151fc <__smakebuf_r>:
 80151fc:	898b      	ldrh	r3, [r1, #12]
 80151fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015200:	079d      	lsls	r5, r3, #30
 8015202:	4606      	mov	r6, r0
 8015204:	460c      	mov	r4, r1
 8015206:	d507      	bpl.n	8015218 <__smakebuf_r+0x1c>
 8015208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801520c:	6023      	str	r3, [r4, #0]
 801520e:	6123      	str	r3, [r4, #16]
 8015210:	2301      	movs	r3, #1
 8015212:	6163      	str	r3, [r4, #20]
 8015214:	b002      	add	sp, #8
 8015216:	bd70      	pop	{r4, r5, r6, pc}
 8015218:	ab01      	add	r3, sp, #4
 801521a:	466a      	mov	r2, sp
 801521c:	f7ff ffc9 	bl	80151b2 <__swhatbuf_r>
 8015220:	9900      	ldr	r1, [sp, #0]
 8015222:	4605      	mov	r5, r0
 8015224:	4630      	mov	r0, r6
 8015226:	f7fd fd2f 	bl	8012c88 <_malloc_r>
 801522a:	b948      	cbnz	r0, 8015240 <__smakebuf_r+0x44>
 801522c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015230:	059a      	lsls	r2, r3, #22
 8015232:	d4ef      	bmi.n	8015214 <__smakebuf_r+0x18>
 8015234:	f023 0303 	bic.w	r3, r3, #3
 8015238:	f043 0302 	orr.w	r3, r3, #2
 801523c:	81a3      	strh	r3, [r4, #12]
 801523e:	e7e3      	b.n	8015208 <__smakebuf_r+0xc>
 8015240:	4b0d      	ldr	r3, [pc, #52]	; (8015278 <__smakebuf_r+0x7c>)
 8015242:	62b3      	str	r3, [r6, #40]	; 0x28
 8015244:	89a3      	ldrh	r3, [r4, #12]
 8015246:	6020      	str	r0, [r4, #0]
 8015248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801524c:	81a3      	strh	r3, [r4, #12]
 801524e:	9b00      	ldr	r3, [sp, #0]
 8015250:	6163      	str	r3, [r4, #20]
 8015252:	9b01      	ldr	r3, [sp, #4]
 8015254:	6120      	str	r0, [r4, #16]
 8015256:	b15b      	cbz	r3, 8015270 <__smakebuf_r+0x74>
 8015258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801525c:	4630      	mov	r0, r6
 801525e:	f000 f8c9 	bl	80153f4 <_isatty_r>
 8015262:	b128      	cbz	r0, 8015270 <__smakebuf_r+0x74>
 8015264:	89a3      	ldrh	r3, [r4, #12]
 8015266:	f023 0303 	bic.w	r3, r3, #3
 801526a:	f043 0301 	orr.w	r3, r3, #1
 801526e:	81a3      	strh	r3, [r4, #12]
 8015270:	89a0      	ldrh	r0, [r4, #12]
 8015272:	4305      	orrs	r5, r0
 8015274:	81a5      	strh	r5, [r4, #12]
 8015276:	e7cd      	b.n	8015214 <__smakebuf_r+0x18>
 8015278:	08015011 	.word	0x08015011

0801527c <_raise_r>:
 801527c:	291f      	cmp	r1, #31
 801527e:	b538      	push	{r3, r4, r5, lr}
 8015280:	4604      	mov	r4, r0
 8015282:	460d      	mov	r5, r1
 8015284:	d904      	bls.n	8015290 <_raise_r+0x14>
 8015286:	2316      	movs	r3, #22
 8015288:	6003      	str	r3, [r0, #0]
 801528a:	f04f 30ff 	mov.w	r0, #4294967295
 801528e:	bd38      	pop	{r3, r4, r5, pc}
 8015290:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015292:	b112      	cbz	r2, 801529a <_raise_r+0x1e>
 8015294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015298:	b94b      	cbnz	r3, 80152ae <_raise_r+0x32>
 801529a:	4620      	mov	r0, r4
 801529c:	f000 f830 	bl	8015300 <_getpid_r>
 80152a0:	462a      	mov	r2, r5
 80152a2:	4601      	mov	r1, r0
 80152a4:	4620      	mov	r0, r4
 80152a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80152aa:	f000 b817 	b.w	80152dc <_kill_r>
 80152ae:	2b01      	cmp	r3, #1
 80152b0:	d00a      	beq.n	80152c8 <_raise_r+0x4c>
 80152b2:	1c59      	adds	r1, r3, #1
 80152b4:	d103      	bne.n	80152be <_raise_r+0x42>
 80152b6:	2316      	movs	r3, #22
 80152b8:	6003      	str	r3, [r0, #0]
 80152ba:	2001      	movs	r0, #1
 80152bc:	e7e7      	b.n	801528e <_raise_r+0x12>
 80152be:	2400      	movs	r4, #0
 80152c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80152c4:	4628      	mov	r0, r5
 80152c6:	4798      	blx	r3
 80152c8:	2000      	movs	r0, #0
 80152ca:	e7e0      	b.n	801528e <_raise_r+0x12>

080152cc <raise>:
 80152cc:	4b02      	ldr	r3, [pc, #8]	; (80152d8 <raise+0xc>)
 80152ce:	4601      	mov	r1, r0
 80152d0:	6818      	ldr	r0, [r3, #0]
 80152d2:	f7ff bfd3 	b.w	801527c <_raise_r>
 80152d6:	bf00      	nop
 80152d8:	24000198 	.word	0x24000198

080152dc <_kill_r>:
 80152dc:	b538      	push	{r3, r4, r5, lr}
 80152de:	4d07      	ldr	r5, [pc, #28]	; (80152fc <_kill_r+0x20>)
 80152e0:	2300      	movs	r3, #0
 80152e2:	4604      	mov	r4, r0
 80152e4:	4608      	mov	r0, r1
 80152e6:	4611      	mov	r1, r2
 80152e8:	602b      	str	r3, [r5, #0]
 80152ea:	f7eb ffcd 	bl	8001288 <_kill>
 80152ee:	1c43      	adds	r3, r0, #1
 80152f0:	d102      	bne.n	80152f8 <_kill_r+0x1c>
 80152f2:	682b      	ldr	r3, [r5, #0]
 80152f4:	b103      	cbz	r3, 80152f8 <_kill_r+0x1c>
 80152f6:	6023      	str	r3, [r4, #0]
 80152f8:	bd38      	pop	{r3, r4, r5, pc}
 80152fa:	bf00      	nop
 80152fc:	24004078 	.word	0x24004078

08015300 <_getpid_r>:
 8015300:	f7eb bfba 	b.w	8001278 <_getpid>

08015304 <__sread>:
 8015304:	b510      	push	{r4, lr}
 8015306:	460c      	mov	r4, r1
 8015308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801530c:	f000 f894 	bl	8015438 <_read_r>
 8015310:	2800      	cmp	r0, #0
 8015312:	bfab      	itete	ge
 8015314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015316:	89a3      	ldrhlt	r3, [r4, #12]
 8015318:	181b      	addge	r3, r3, r0
 801531a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801531e:	bfac      	ite	ge
 8015320:	6563      	strge	r3, [r4, #84]	; 0x54
 8015322:	81a3      	strhlt	r3, [r4, #12]
 8015324:	bd10      	pop	{r4, pc}

08015326 <__swrite>:
 8015326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801532a:	461f      	mov	r7, r3
 801532c:	898b      	ldrh	r3, [r1, #12]
 801532e:	05db      	lsls	r3, r3, #23
 8015330:	4605      	mov	r5, r0
 8015332:	460c      	mov	r4, r1
 8015334:	4616      	mov	r6, r2
 8015336:	d505      	bpl.n	8015344 <__swrite+0x1e>
 8015338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801533c:	2302      	movs	r3, #2
 801533e:	2200      	movs	r2, #0
 8015340:	f000 f868 	bl	8015414 <_lseek_r>
 8015344:	89a3      	ldrh	r3, [r4, #12]
 8015346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801534a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801534e:	81a3      	strh	r3, [r4, #12]
 8015350:	4632      	mov	r2, r6
 8015352:	463b      	mov	r3, r7
 8015354:	4628      	mov	r0, r5
 8015356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801535a:	f000 b817 	b.w	801538c <_write_r>

0801535e <__sseek>:
 801535e:	b510      	push	{r4, lr}
 8015360:	460c      	mov	r4, r1
 8015362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015366:	f000 f855 	bl	8015414 <_lseek_r>
 801536a:	1c43      	adds	r3, r0, #1
 801536c:	89a3      	ldrh	r3, [r4, #12]
 801536e:	bf15      	itete	ne
 8015370:	6560      	strne	r0, [r4, #84]	; 0x54
 8015372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801537a:	81a3      	strheq	r3, [r4, #12]
 801537c:	bf18      	it	ne
 801537e:	81a3      	strhne	r3, [r4, #12]
 8015380:	bd10      	pop	{r4, pc}

08015382 <__sclose>:
 8015382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015386:	f000 b813 	b.w	80153b0 <_close_r>
	...

0801538c <_write_r>:
 801538c:	b538      	push	{r3, r4, r5, lr}
 801538e:	4d07      	ldr	r5, [pc, #28]	; (80153ac <_write_r+0x20>)
 8015390:	4604      	mov	r4, r0
 8015392:	4608      	mov	r0, r1
 8015394:	4611      	mov	r1, r2
 8015396:	2200      	movs	r2, #0
 8015398:	602a      	str	r2, [r5, #0]
 801539a:	461a      	mov	r2, r3
 801539c:	f7eb ffab 	bl	80012f6 <_write>
 80153a0:	1c43      	adds	r3, r0, #1
 80153a2:	d102      	bne.n	80153aa <_write_r+0x1e>
 80153a4:	682b      	ldr	r3, [r5, #0]
 80153a6:	b103      	cbz	r3, 80153aa <_write_r+0x1e>
 80153a8:	6023      	str	r3, [r4, #0]
 80153aa:	bd38      	pop	{r3, r4, r5, pc}
 80153ac:	24004078 	.word	0x24004078

080153b0 <_close_r>:
 80153b0:	b538      	push	{r3, r4, r5, lr}
 80153b2:	4d06      	ldr	r5, [pc, #24]	; (80153cc <_close_r+0x1c>)
 80153b4:	2300      	movs	r3, #0
 80153b6:	4604      	mov	r4, r0
 80153b8:	4608      	mov	r0, r1
 80153ba:	602b      	str	r3, [r5, #0]
 80153bc:	f7eb ffb7 	bl	800132e <_close>
 80153c0:	1c43      	adds	r3, r0, #1
 80153c2:	d102      	bne.n	80153ca <_close_r+0x1a>
 80153c4:	682b      	ldr	r3, [r5, #0]
 80153c6:	b103      	cbz	r3, 80153ca <_close_r+0x1a>
 80153c8:	6023      	str	r3, [r4, #0]
 80153ca:	bd38      	pop	{r3, r4, r5, pc}
 80153cc:	24004078 	.word	0x24004078

080153d0 <_fstat_r>:
 80153d0:	b538      	push	{r3, r4, r5, lr}
 80153d2:	4d07      	ldr	r5, [pc, #28]	; (80153f0 <_fstat_r+0x20>)
 80153d4:	2300      	movs	r3, #0
 80153d6:	4604      	mov	r4, r0
 80153d8:	4608      	mov	r0, r1
 80153da:	4611      	mov	r1, r2
 80153dc:	602b      	str	r3, [r5, #0]
 80153de:	f7eb ffb2 	bl	8001346 <_fstat>
 80153e2:	1c43      	adds	r3, r0, #1
 80153e4:	d102      	bne.n	80153ec <_fstat_r+0x1c>
 80153e6:	682b      	ldr	r3, [r5, #0]
 80153e8:	b103      	cbz	r3, 80153ec <_fstat_r+0x1c>
 80153ea:	6023      	str	r3, [r4, #0]
 80153ec:	bd38      	pop	{r3, r4, r5, pc}
 80153ee:	bf00      	nop
 80153f0:	24004078 	.word	0x24004078

080153f4 <_isatty_r>:
 80153f4:	b538      	push	{r3, r4, r5, lr}
 80153f6:	4d06      	ldr	r5, [pc, #24]	; (8015410 <_isatty_r+0x1c>)
 80153f8:	2300      	movs	r3, #0
 80153fa:	4604      	mov	r4, r0
 80153fc:	4608      	mov	r0, r1
 80153fe:	602b      	str	r3, [r5, #0]
 8015400:	f7eb ffb1 	bl	8001366 <_isatty>
 8015404:	1c43      	adds	r3, r0, #1
 8015406:	d102      	bne.n	801540e <_isatty_r+0x1a>
 8015408:	682b      	ldr	r3, [r5, #0]
 801540a:	b103      	cbz	r3, 801540e <_isatty_r+0x1a>
 801540c:	6023      	str	r3, [r4, #0]
 801540e:	bd38      	pop	{r3, r4, r5, pc}
 8015410:	24004078 	.word	0x24004078

08015414 <_lseek_r>:
 8015414:	b538      	push	{r3, r4, r5, lr}
 8015416:	4d07      	ldr	r5, [pc, #28]	; (8015434 <_lseek_r+0x20>)
 8015418:	4604      	mov	r4, r0
 801541a:	4608      	mov	r0, r1
 801541c:	4611      	mov	r1, r2
 801541e:	2200      	movs	r2, #0
 8015420:	602a      	str	r2, [r5, #0]
 8015422:	461a      	mov	r2, r3
 8015424:	f7eb ffaa 	bl	800137c <_lseek>
 8015428:	1c43      	adds	r3, r0, #1
 801542a:	d102      	bne.n	8015432 <_lseek_r+0x1e>
 801542c:	682b      	ldr	r3, [r5, #0]
 801542e:	b103      	cbz	r3, 8015432 <_lseek_r+0x1e>
 8015430:	6023      	str	r3, [r4, #0]
 8015432:	bd38      	pop	{r3, r4, r5, pc}
 8015434:	24004078 	.word	0x24004078

08015438 <_read_r>:
 8015438:	b538      	push	{r3, r4, r5, lr}
 801543a:	4d07      	ldr	r5, [pc, #28]	; (8015458 <_read_r+0x20>)
 801543c:	4604      	mov	r4, r0
 801543e:	4608      	mov	r0, r1
 8015440:	4611      	mov	r1, r2
 8015442:	2200      	movs	r2, #0
 8015444:	602a      	str	r2, [r5, #0]
 8015446:	461a      	mov	r2, r3
 8015448:	f7eb ff38 	bl	80012bc <_read>
 801544c:	1c43      	adds	r3, r0, #1
 801544e:	d102      	bne.n	8015456 <_read_r+0x1e>
 8015450:	682b      	ldr	r3, [r5, #0]
 8015452:	b103      	cbz	r3, 8015456 <_read_r+0x1e>
 8015454:	6023      	str	r3, [r4, #0]
 8015456:	bd38      	pop	{r3, r4, r5, pc}
 8015458:	24004078 	.word	0x24004078

0801545c <_init>:
 801545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801545e:	bf00      	nop
 8015460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015462:	bc08      	pop	{r3}
 8015464:	469e      	mov	lr, r3
 8015466:	4770      	bx	lr

08015468 <_fini>:
 8015468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801546a:	bf00      	nop
 801546c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801546e:	bc08      	pop	{r3}
 8015470:	469e      	mov	lr, r3
 8015472:	4770      	bx	lr
