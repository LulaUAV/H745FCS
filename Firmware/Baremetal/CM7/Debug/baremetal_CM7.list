
baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012504  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0801279c  0801279c  0002279c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012838  08012838  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  08012838  08012838  00022838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012840  08012840  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012840  08012840  00022840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012844  08012844  00022844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  24000000  08012848  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f0c  24000198  080129e0  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240040a4  080129e0  000340a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045880  00000000  00000000  000301c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000736b  00000000  00000000  00075a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  0007cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e70  00000000  00000000  0007ee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000414b3  00000000  00000000  00080d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e80e  00000000  00000000  000c21b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018e9cc  00000000  00000000  000f09c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0027f38d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e4  00000000  00000000  0027f3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000198 	.word	0x24000198
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08012784 	.word	0x08012784

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400019c 	.word	0x2400019c
 80002d4:	08012784 	.word	0x08012784

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_DMA_Init+0x6c>)
 800070c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_DMA_Init+0x6c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_DMA_Init+0x6c>)
 800071c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_DMA_Init+0x6c>)
 800072a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <MX_DMA_Init+0x6c>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_DMA_Init+0x6c>)
 800073a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2010      	movs	r0, #16
 800074c:	f001 f9ef 	bl	8001b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000750:	2010      	movs	r0, #16
 8000752:	f001 fa06 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2011      	movs	r0, #17
 800075c:	f001 f9e7 	bl	8001b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000760:	2011      	movs	r0, #17
 8000762:	f001 f9fe 	bl	8001b62 <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	58024400 	.word	0x58024400

08000774 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_GPIO_Init+0xe4>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	4a35      	ldr	r2, [pc, #212]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000782:	f043 0320 	orr.w	r3, r3, #32
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <MX_GPIO_Init+0xe4>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <MX_GPIO_Init+0xe4>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	4a2e      	ldr	r2, [pc, #184]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	4a26      	ldr	r2, [pc, #152]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007da:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

}
 800084c:	bf00      	nop
 800084e:	3724      	adds	r7, #36	; 0x24
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	58024400 	.word	0x58024400

0800085c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_I2C2_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <MX_I2C2_Init+0x7c>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000898:	f003 fe0a 	bl	80044b0 <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 fad5 	bl	8000e50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008aa:	f004 fd16 	bl	80052da <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 facc 	bl	8000e50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008bc:	f004 fd58 	bl	8005370 <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 fac3 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	240003ec 	.word	0x240003ec
 80008d4:	40005800 	.word	0x40005800
 80008d8:	307075b1 	.word	0x307075b1

080008dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0b8      	sub	sp, #224	; 0xe0
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	22bc      	movs	r2, #188	; 0xbc
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f011 ff39 	bl	8012774 <memset>
  if(i2cHandle->Instance==I2C2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a2d      	ldr	r2, [pc, #180]	; (80009bc <HAL_I2C_MspInit+0xe0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d152      	bne.n	80009b2 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800090c:	2308      	movs	r3, #8
 800090e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4618      	mov	r0, r3
 800091c:	f006 ff56 	bl	80077cc <HAL_RCCEx_PeriphCLKConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000926:	f000 fa93 	bl	8000e50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000948:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800094c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	2312      	movs	r3, #18
 8000952:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000956:	2301      	movs	r3, #1
 8000958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000962:	2304      	movs	r3, #4
 8000964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800096c:	4619      	mov	r1, r3
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <HAL_I2C_MspInit+0xe8>)
 8000970:	f003 fbc0 	bl	80040f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 8000976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800097a:	4a11      	ldr	r2, [pc, #68]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 800097c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000980:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 8000986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2021      	movs	r0, #33	; 0x21
 8000998:	f001 f8c9 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800099c:	2021      	movs	r0, #33	; 0x21
 800099e:	f001 f8e0 	bl	8001b62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2022      	movs	r0, #34	; 0x22
 80009a8:	f001 f8c1 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80009ac:	2022      	movs	r0, #34	; 0x22
 80009ae:	f001 f8d8 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	37e0      	adds	r7, #224	; 0xe0
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40005800 	.word	0x40005800
 80009c0:	58024400 	.word	0x58024400
 80009c4:	58020400 	.word	0x58020400

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009ce:	f000 f9f9 	bl	8000dc4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009d2:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <main+0x17c>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d11b      	bne.n	8000a16 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
}
 80009e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e4:	f3bf 8f6f 	isb	sy
}
 80009e8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <main+0x17c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy
}
 80009f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009f8:	f3bf 8f6f 	isb	sy
}
 80009fc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009fe:	4b51      	ldr	r3, [pc, #324]	; (8000b44 <main+0x17c>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a50      	ldr	r2, [pc, #320]	; (8000b44 <main+0x17c>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0a:	f3bf 8f4f 	dsb	sy
}
 8000a0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a10:	f3bf 8f6f 	isb	sy
}
 8000a14:	e000      	b.n	8000a18 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a16:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a18:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <main+0x17c>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d138      	bne.n	8000a96 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a24:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <main+0x17c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2c:	f3bf 8f4f 	dsb	sy
}
 8000a30:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a32:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <main+0x17c>)
 8000a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a38:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	0b5b      	lsrs	r3, r3, #13
 8000a3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a42:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	08db      	lsrs	r3, r3, #3
 8000a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a4c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	015a      	lsls	r2, r3, #5
 8000a52:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a56:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a5c:	4939      	ldr	r1, [pc, #228]	; (8000b44 <main+0x17c>)
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1e5a      	subs	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1ef      	bne.n	8000a4e <main+0x86>
    } while(sets-- != 0U);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	60fa      	str	r2, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1e5      	bne.n	8000a44 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a78:	f3bf 8f4f 	dsb	sy
}
 8000a7c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a7e:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <main+0x17c>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a30      	ldr	r2, [pc, #192]	; (8000b44 <main+0x17c>)
 8000a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8a:	f3bf 8f4f 	dsb	sy
}
 8000a8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a90:	f3bf 8f6f 	isb	sy
}
 8000a94:	e000      	b.n	8000a98 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a96:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a9c:	617b      	str	r3, [r7, #20]

  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000a9e:	e000      	b.n	8000aa2 <main+0xda>
 8000aa0:	bf00      	nop
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <main+0x180>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f8      	bne.n	8000aa0 <main+0xd8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 fea1 	bl	80017f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f903 	bl	8000cbc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <main+0x180>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <main+0x180>)
 8000abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <main+0x180>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f003 fcbd 	bl	8004454 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ada:	2100      	movs	r1, #0
 8000adc:	2000      	movs	r0, #0
 8000ade:	f003 fcd3 	bl	8004488 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae6:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ae8:	bf00      	nop
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <main+0x180>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d104      	bne.n	8000b00 <main+0x138>
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	617a      	str	r2, [r7, #20]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	dcf4      	bgt.n	8000aea <main+0x122>
if ( timeout < 0 )
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da01      	bge.n	8000b0a <main+0x142>
{
Error_Handler();
 8000b06:	f000 f9a3 	bl	8000e50 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0a:	f7ff fe33 	bl	8000774 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0e:	f7ff fdf9 	bl	8000704 <MX_DMA_Init>
  MX_I2C2_Init();
 8000b12:	f7ff fea3 	bl	800085c <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8000b16:	f000 f9a1 	bl	8000e5c <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 8000b1a:	f000 fb13 	bl	8001144 <MX_TIM1_Init>
  MX_UART4_Init();
 8000b1e:	f000 fc7f 	bl	8001420 <MX_UART4_Init>
  MX_FATFS_Init();
 8000b22:	f00f fa03 	bl	800ff2c <MX_FATFS_Init>
  MX_UART7_Init();
 8000b26:	f000 fccb 	bl	80014c0 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000b2a:	f011 f8e7 	bl	8011cfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

     ReadGPS();
 8000b2e:	f000 f80d 	bl	8000b4c <ReadGPS>
     ReadMag();
 8000b32:	f000 f841 	bl	8000bb8 <ReadMag>
     ReadAcc();
 8000b36:	f000 f861 	bl	8000bfc <ReadAcc>
     ReadBaro();
 8000b3a:	f000 f881 	bl	8000c40 <ReadBaro>
     ReadGyro();
 8000b3e:	f000 f89b 	bl	8000c78 <ReadGyro>
     ReadGPS();
 8000b42:	e7f4      	b.n	8000b2e <main+0x166>
 8000b44:	e000ed00 	.word	0xe000ed00
 8000b48:	58024400 	.word	0x58024400

08000b4c <ReadGPS>:
  }
  /* USER CODE END 3 */
}

void ReadGPS(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000b50:	2000      	movs	r0, #0
 8000b52:	f003 fc7f 	bl	8004454 <HAL_HSEM_FastTake>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d122      	bne.n	8000ba2 <ReadGPS+0x56>
      {
        gps_values.gps_latitude = gps_values_m7->gps_latitude;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <ReadGPS+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <ReadGPS+0x68>)
 8000b64:	6013      	str	r3, [r2, #0]
        gps_values.gps_longitude = gps_values_m7->gps_longitude;
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <ReadGPS+0x64>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <ReadGPS+0x68>)
 8000b6e:	6053      	str	r3, [r2, #4]
        gps_values.gps_altitude = gps_values_m7->gps_altitude;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <ReadGPS+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <ReadGPS+0x68>)
 8000b78:	6093      	str	r3, [r2, #8]
        gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <ReadGPS+0x64>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <ReadGPS+0x68>)
 8000b82:	60d3      	str	r3, [r2, #12]
        gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <ReadGPS+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <ReadGPS+0x68>)
 8000b8c:	6113      	str	r3, [r2, #16]
        gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <ReadGPS+0x64>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <ReadGPS+0x68>)
 8000b96:	6153      	str	r3, [r2, #20]
        gps_values.gps_satellites = gps_values_m7->gps_satellites;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <ReadGPS+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <ReadGPS+0x68>)
 8000ba0:	61d3      	str	r3, [r2, #28]
      }
      HAL_HSEM_Release(HSEM_ID_0,0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f003 fc6f 	bl	8004488 <HAL_HSEM_Release>

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	24000018 	.word	0x24000018
 8000bb4:	24000438 	.word	0x24000438

08000bb8 <ReadMag>:

void ReadMag(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f003 fc49 	bl	8004454 <HAL_HSEM_FastTake>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10e      	bne.n	8000be6 <ReadMag+0x2e>
  {
    mag_values.imu_mag_x = mag_values_m7->imu_mag_x;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <ReadMag+0x3c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <ReadMag+0x40>)
 8000bd0:	6013      	str	r3, [r2, #0]
    mag_values.imu_mag_y = mag_values_m7->imu_mag_y;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <ReadMag+0x3c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <ReadMag+0x40>)
 8000bda:	6053      	str	r3, [r2, #4]
    mag_values.imu_mag_z = mag_values_m7->imu_mag_z;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <ReadMag+0x3c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <ReadMag+0x40>)
 8000be4:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000be6:	2100      	movs	r1, #0
 8000be8:	2000      	movs	r0, #0
 8000bea:	f003 fc4d 	bl	8004488 <HAL_HSEM_Release>

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	24000010 	.word	0x24000010
 8000bf8:	24000478 	.word	0x24000478

08000bfc <ReadAcc>:
void ReadAcc(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000c00:	2000      	movs	r0, #0
 8000c02:	f003 fc27 	bl	8004454 <HAL_HSEM_FastTake>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10e      	bne.n	8000c2a <ReadAcc+0x2e>
  {
      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <ReadAcc+0x3c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <ReadAcc+0x40>)
 8000c14:	6013      	str	r3, [r2, #0]
      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <ReadAcc+0x3c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <ReadAcc+0x40>)
 8000c1e:	6053      	str	r3, [r2, #4]
      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ReadAcc+0x3c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <ReadAcc+0x40>)
 8000c28:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f003 fc2b 	bl	8004488 <HAL_HSEM_Release>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	24000008 	.word	0x24000008
 8000c3c:	24000460 	.word	0x24000460

08000c40 <ReadBaro>:
void ReadBaro(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000c44:	2000      	movs	r0, #0
 8000c46:	f003 fc05 	bl	8004454 <HAL_HSEM_FastTake>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <ReadBaro+0x24>
  {
     baro_values.baro_altitude = baro_values_m7->baro_altitude;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <ReadBaro+0x30>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <ReadBaro+0x34>)
 8000c58:	6053      	str	r3, [r2, #4]
     baro_values.baro_pressure = baro_values_m7->baro_pressure;
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <ReadBaro+0x30>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <ReadBaro+0x34>)
 8000c62:	6013      	str	r3, [r2, #0]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2000      	movs	r0, #0
 8000c68:	f003 fc0e 	bl	8004488 <HAL_HSEM_Release>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	24000014 	.word	0x24000014
 8000c74:	24000458 	.word	0x24000458

08000c78 <ReadGyro>:
void ReadGyro(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f003 fbe9 	bl	8004454 <HAL_HSEM_FastTake>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10e      	bne.n	8000ca6 <ReadGyro+0x2e>
  {
     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <ReadGyro+0x3c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <ReadGyro+0x40>)
 8000c90:	6013      	str	r3, [r2, #0]
     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <ReadGyro+0x3c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <ReadGyro+0x40>)
 8000c9a:	6053      	str	r3, [r2, #4]
     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <ReadGyro+0x3c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <ReadGyro+0x40>)
 8000ca4:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f003 fbed 	bl	8004488 <HAL_HSEM_Release>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2400000c 	.word	0x2400000c
 8000cb8:	2400046c 	.word	0x2400046c

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b09c      	sub	sp, #112	; 0x70
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	224c      	movs	r2, #76	; 0x4c
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f011 fd52 	bl	8012774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f011 fd4c 	bl	8012774 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f005 fd6f 	bl	80067c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <SystemClock_Config+0xfc>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a33      	ldr	r2, [pc, #204]	; (8000db8 <SystemClock_Config+0xfc>)
 8000cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <SystemClock_Config+0xfc>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <SystemClock_Config+0x100>)
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <SystemClock_Config+0x100>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <SystemClock_Config+0x100>)
 8000d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d14:	bf00      	nop
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <SystemClock_Config+0xfc>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d22:	d1f8      	bne.n	8000d16 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <SystemClock_Config+0x104>)
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	f023 0303 	bic.w	r3, r3, #3
 8000d2c:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <SystemClock_Config+0x104>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d42:	2302      	movs	r3, #2
 8000d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d4a:	233c      	movs	r3, #60	; 0x3c
 8000d4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000d52:	230f      	movs	r3, #15
 8000d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f005 fd92 	bl	8006894 <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d76:	f000 f86b 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	233f      	movs	r3, #63	; 0x3f
 8000d7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d86:	2308      	movs	r3, #8
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d8e:	2340      	movs	r3, #64	; 0x40
 8000d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d98:	2340      	movs	r3, #64	; 0x40
 8000d9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2104      	movs	r1, #4
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 f987 	bl	80070b4 <HAL_RCC_ClockConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000dac:	f000 f850 	bl	8000e50 <Error_Handler>
  }
}
 8000db0:	bf00      	nop
 8000db2:	3770      	adds	r7, #112	; 0x70
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	58024800 	.word	0x58024800
 8000dbc:	58000400 	.word	0x58000400
 8000dc0:	58024400 	.word	0x58024400

08000dc4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dd6:	f000 fedf 	bl	8001b98 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000de2:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000de6:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000de8:	2312      	movs	r3, #18
 8000dea:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000df4:	2303      	movs	r3, #3
 8000df6:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fefc 	bl	8001c08 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000e14:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000e18:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e26:	2303      	movs	r3, #3
 8000e28:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fee3 	bl	8001c08 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e42:	2004      	movs	r0, #4
 8000e44:	f000 fec0 	bl	8001bc8 <HAL_MPU_Enable>
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <MX_SDMMC1_SD_Init+0x44>)
 8000e64:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e78:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e88:	f008 fe26 	bl	8009ad8 <HAL_SD_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000e92:	f7ff ffdd 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	24000484 	.word	0x24000484
 8000ea0:	52007000 	.word	0x52007000

08000ea4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0ba      	sub	sp, #232	; 0xe8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	22bc      	movs	r2, #188	; 0xbc
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f011 fc55 	bl	8012774 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a3b      	ldr	r2, [pc, #236]	; (8000fbc <HAL_SD_MspInit+0x118>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d16e      	bne.n	8000fb2 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ede:	f107 0318 	add.w	r3, r7, #24
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 fc72 	bl	80077cc <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000eee:	f7ff ffaf 	bl	8000e50 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000ef4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ef8:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	4a2a      	ldr	r2, [pc, #168]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f4c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f66:	230c      	movs	r3, #12
 8000f68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <HAL_SD_MspInit+0x120>)
 8000f74:	f003 f8be 	bl	80040f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f90:	230c      	movs	r3, #12
 8000f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <HAL_SD_MspInit+0x124>)
 8000f9e:	f003 f8a9 	bl	80040f4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2031      	movs	r0, #49	; 0x31
 8000fa8:	f000 fdc1 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000fac:	2031      	movs	r0, #49	; 0x31
 8000fae:	f000 fdd8 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	37e8      	adds	r7, #232	; 0xe8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	52007000 	.word	0x52007000
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020800 	.word	0x58020800
 8000fc8:	58020c00 	.word	0x58020c00

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_MspInit+0x30>)
 8000fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x30>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x30>)
 8000fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	58024400 	.word	0x58024400

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 fc44 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <DMA1_Stream5_IRQHandler+0x10>)
 800105a:	f001 fed7 	bl	8002e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	24000654 	.word	0x24000654

08001068 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <DMA1_Stream6_IRQHandler+0x10>)
 800106e:	f001 fecd 	bl	8002e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	240005dc 	.word	0x240005dc

0800107c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM1_BRK_IRQHandler+0x10>)
 8001082:	f00a fa1b 	bl	800b4bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	24000500 	.word	0x24000500

08001090 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM1_UP_IRQHandler+0x10>)
 8001096:	f00a fa11 	bl	800b4bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	24000500 	.word	0x24000500

080010a4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80010aa:	f00a fa07 	bl	800b4bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000500 	.word	0x24000500

080010b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM1_CC_IRQHandler+0x10>)
 80010be:	f00a f9fd 	bl	800b4bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	24000500 	.word	0x24000500

080010cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <I2C2_EV_IRQHandler+0x10>)
 80010d2:	f003 fa7d 	bl	80045d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	240003ec 	.word	0x240003ec

080010e0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <I2C2_ER_IRQHandler+0x10>)
 80010e6:	f003 fa8d 	bl	8004604 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	240003ec 	.word	0x240003ec

080010f4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <SDMMC1_IRQHandler+0x10>)
 80010fa:	f008 ff55 	bl	8009fa8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000484 	.word	0x24000484

08001108 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <UART4_IRQHandler+0x10>)
 800110e:	f00b faa5 	bl	800c65c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	240006cc 	.word	0x240006cc

0800111c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <UART7_IRQHandler+0x10>)
 8001122:	f00b fa9b 	bl	800c65c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2400054c 	.word	0x2400054c

08001130 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <OTG_FS_IRQHandler+0x10>)
 8001136:	f004 fabe 	bl	80056b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24003c9c 	.word	0x24003c9c

08001144 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09a      	sub	sp, #104	; 0x68
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	222c      	movs	r2, #44	; 0x2c
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f011 faf8 	bl	8012774 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001184:	4b55      	ldr	r3, [pc, #340]	; (80012dc <MX_TIM1_Init+0x198>)
 8001186:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <MX_TIM1_Init+0x19c>)
 8001188:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800118a:	4b54      	ldr	r3, [pc, #336]	; (80012dc <MX_TIM1_Init+0x198>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b52      	ldr	r3, [pc, #328]	; (80012dc <MX_TIM1_Init+0x198>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001196:	4b51      	ldr	r3, [pc, #324]	; (80012dc <MX_TIM1_Init+0x198>)
 8001198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <MX_TIM1_Init+0x198>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a4:	4b4d      	ldr	r3, [pc, #308]	; (80012dc <MX_TIM1_Init+0x198>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <MX_TIM1_Init+0x198>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b0:	484a      	ldr	r0, [pc, #296]	; (80012dc <MX_TIM1_Init+0x198>)
 80011b2:	f00a f8cb 	bl	800b34c <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011bc:	f7ff fe48 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ca:	4619      	mov	r1, r3
 80011cc:	4843      	ldr	r0, [pc, #268]	; (80012dc <MX_TIM1_Init+0x198>)
 80011ce:	f00a fba5 	bl	800b91c <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011d8:	f7ff fe3a 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011dc:	483f      	ldr	r0, [pc, #252]	; (80012dc <MX_TIM1_Init+0x198>)
 80011de:	f00a f90c 	bl	800b3fa <HAL_TIM_PWM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011e8:	f7ff fe32 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011fc:	4619      	mov	r1, r3
 80011fe:	4837      	ldr	r0, [pc, #220]	; (80012dc <MX_TIM1_Init+0x198>)
 8001200:	f00b f8b8 	bl	800c374 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800120a:	f7ff fe21 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120e:	2360      	movs	r3, #96	; 0x60
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800121a:	2300      	movs	r3, #0
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	482a      	ldr	r0, [pc, #168]	; (80012dc <MX_TIM1_Init+0x198>)
 8001234:	f00a fa62 	bl	800b6fc <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800123e:	f7ff fe07 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001242:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001246:	2204      	movs	r2, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4824      	ldr	r0, [pc, #144]	; (80012dc <MX_TIM1_Init+0x198>)
 800124c:	f00a fa56 	bl	800b6fc <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001256:	f7ff fdfb 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800125a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800125e:	2208      	movs	r2, #8
 8001260:	4619      	mov	r1, r3
 8001262:	481e      	ldr	r0, [pc, #120]	; (80012dc <MX_TIM1_Init+0x198>)
 8001264:	f00a fa4a 	bl	800b6fc <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800126e:	f7ff fdef 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001276:	220c      	movs	r2, #12
 8001278:	4619      	mov	r1, r3
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_TIM1_Init+0x198>)
 800127c:	f00a fa3e 	bl	800b6fc <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001286:	f7ff fde3 	bl	8000e50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_TIM1_Init+0x198>)
 80012c0:	f00b f8e0 	bl	800c484 <HAL_TIMEx_ConfigBreakDeadTime>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80012ca:	f7ff fdc1 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_TIM1_Init+0x198>)
 80012d0:	f000 f848 	bl	8001364 <HAL_TIM_MspPostInit>

}
 80012d4:	bf00      	nop
 80012d6:	3768      	adds	r7, #104	; 0x68
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	24000500 	.word	0x24000500
 80012e0:	40010000 	.word	0x40010000

080012e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1a      	ldr	r2, [pc, #104]	; (800135c <HAL_TIM_Base_MspInit+0x78>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d12e      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_TIM_Base_MspInit+0x7c>)
 80012f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_TIM_Base_MspInit+0x7c>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_TIM_Base_MspInit+0x7c>)
 8001308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2018      	movs	r0, #24
 800131a:	f000 fc08 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800131e:	2018      	movs	r0, #24
 8001320:	f000 fc1f 	bl	8001b62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2019      	movs	r0, #25
 800132a:	f000 fc00 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800132e:	2019      	movs	r0, #25
 8001330:	f000 fc17 	bl	8001b62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	201a      	movs	r0, #26
 800133a:	f000 fbf8 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800133e:	201a      	movs	r0, #26
 8001340:	f000 fc0f 	bl	8001b62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	201b      	movs	r0, #27
 800134a:	f000 fbf0 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800134e:	201b      	movs	r0, #27
 8001350:	f000 fc07 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010000 	.word	0x40010000
 8001360:	58024400 	.word	0x58024400

08001364 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <HAL_TIM_MspPostInit+0xac>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d13f      	bne.n	8001406 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138c:	4a21      	ldr	r2, [pc, #132]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013aa:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80013c2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <HAL_TIM_MspPostInit+0xb4>)
 80013e0:	f002 fe88 	bl	80040f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	4806      	ldr	r0, [pc, #24]	; (800141c <HAL_TIM_MspPostInit+0xb8>)
 8001402:	f002 fe77 	bl	80040f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40010000 	.word	0x40010000
 8001414:	58024400 	.word	0x58024400
 8001418:	58021000 	.word	0x58021000
 800141c:	58020000 	.word	0x58020000

08001420 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <MX_UART4_Init+0x94>)
 8001426:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <MX_UART4_Init+0x98>)
 8001428:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_UART4_Init+0x94>)
 800142c:	4a23      	ldr	r2, [pc, #140]	; (80014bc <MX_UART4_Init+0x9c>)
 800142e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_UART4_Init+0x94>)
 8001432:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001436:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_UART4_Init+0x94>)
 800143a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_UART4_Init+0x94>)
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_UART4_Init+0x94>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_UART4_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_UART4_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_UART4_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_UART4_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_UART4_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <MX_UART4_Init+0x94>)
 800146e:	f00b f8a5 	bl	800c5bc <HAL_UART_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001478:	f7ff fcea 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_UART4_Init+0x94>)
 8001480:	f00c fb4d 	bl	800db1e <HAL_UARTEx_SetTxFifoThreshold>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 800148a:	f7ff fce1 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <MX_UART4_Init+0x94>)
 8001492:	f00c fb82 	bl	800db9a <HAL_UARTEx_SetRxFifoThreshold>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 800149c:	f7ff fcd8 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_UART4_Init+0x94>)
 80014a2:	f00c fb03 	bl	800daac <HAL_UARTEx_DisableFifoMode>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 80014ac:	f7ff fcd0 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	240006cc 	.word	0x240006cc
 80014b8:	40004c00 	.word	0x40004c00
 80014bc:	000186a0 	.word	0x000186a0

080014c0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_UART7_Init+0x90>)
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <MX_UART7_Init+0x94>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_UART7_Init+0x90>)
 80014cc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80014d0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_UART7_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_UART7_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_UART7_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_UART7_Init+0x90>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_UART7_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_UART7_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_UART7_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_UART7_Init+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_UART7_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <MX_UART7_Init+0x90>)
 800150a:	f00b f857 	bl	800c5bc <HAL_UART_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001514:	f7ff fc9c 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001518:	2100      	movs	r1, #0
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_UART7_Init+0x90>)
 800151c:	f00c faff 	bl	800db1e <HAL_UARTEx_SetTxFifoThreshold>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001526:	f7ff fc93 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800152a:	2100      	movs	r1, #0
 800152c:	4808      	ldr	r0, [pc, #32]	; (8001550 <MX_UART7_Init+0x90>)
 800152e:	f00c fb34 	bl	800db9a <HAL_UARTEx_SetRxFifoThreshold>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001538:	f7ff fc8a 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_UART7_Init+0x90>)
 800153e:	f00c fab5 	bl	800daac <HAL_UARTEx_DisableFifoMode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001548:	f7ff fc82 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2400054c 	.word	0x2400054c
 8001554:	40007800 	.word	0x40007800

08001558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0ba      	sub	sp, #232	; 0xe8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 0318 	add.w	r3, r7, #24
 8001574:	22bc      	movs	r2, #188	; 0xbc
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f011 f8fb 	bl	8012774 <memset>
  if(uartHandle->Instance==UART4)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7e      	ldr	r2, [pc, #504]	; (800177c <HAL_UART_MspInit+0x224>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d14a      	bne.n	800161e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	4618      	mov	r0, r3
 8001598:	f006 f918 	bl	80077cc <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015a2:	f7ff fc55 	bl	8000e50 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015a6:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ac:	4a74      	ldr	r2, [pc, #464]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b6:	4b72      	ldr	r3, [pc, #456]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b6e      	ldr	r3, [pc, #440]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ca:	4a6d      	ldr	r2, [pc, #436]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d4:	4b6a      	ldr	r3, [pc, #424]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e2:	2303      	movs	r3, #3
 80015e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015fa:	2308      	movs	r3, #8
 80015fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001604:	4619      	mov	r1, r3
 8001606:	485f      	ldr	r0, [pc, #380]	; (8001784 <HAL_UART_MspInit+0x22c>)
 8001608:	f002 fd74 	bl	80040f4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2034      	movs	r0, #52	; 0x34
 8001612:	f000 fa8c 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001616:	2034      	movs	r0, #52	; 0x34
 8001618:	f000 faa3 	bl	8001b62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 800161c:	e0a9      	b.n	8001772 <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==UART7)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a59      	ldr	r2, [pc, #356]	; (8001788 <HAL_UART_MspInit+0x230>)
 8001624:	4293      	cmp	r3, r2
 8001626:	f040 80a4 	bne.w	8001772 <HAL_UART_MspInit+0x21a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	4618      	mov	r0, r3
 800163a:	f006 f8c7 	bl	80077cc <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001644:	f7ff fc04 	bl	8000e50 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_UART_MspInit+0x228>)
 800164a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800164e:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <HAL_UART_MspInit+0x228>)
 8001650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001654:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001658:	4b49      	ldr	r3, [pc, #292]	; (8001780 <HAL_UART_MspInit+0x228>)
 800165a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800165e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	4b46      	ldr	r3, [pc, #280]	; (8001780 <HAL_UART_MspInit+0x228>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <HAL_UART_MspInit+0x228>)
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001676:	4b42      	ldr	r3, [pc, #264]	; (8001780 <HAL_UART_MspInit+0x228>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001684:	23c0      	movs	r3, #192	; 0xc0
 8001686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800169c:	2307      	movs	r3, #7
 800169e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016a6:	4619      	mov	r1, r3
 80016a8:	4838      	ldr	r0, [pc, #224]	; (800178c <HAL_UART_MspInit+0x234>)
 80016aa:	f002 fd23 	bl	80040f4 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016b0:	4a38      	ldr	r2, [pc, #224]	; (8001794 <HAL_UART_MspInit+0x23c>)
 80016b2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016b6:	224f      	movs	r2, #79	; 0x4f
 80016b8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ba:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016cc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80016ec:	4828      	ldr	r0, [pc, #160]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016ee:	f000 facf 	bl	8001c90 <HAL_DMA_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80016f8:	f7ff fbaa 	bl	8000e50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_UART_MspInit+0x238>)
 8001700:	67da      	str	r2, [r3, #124]	; 0x7c
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <HAL_UART_MspInit+0x238>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_UART_MspInit+0x240>)
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_UART_MspInit+0x244>)
 800170c:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001710:	2250      	movs	r2, #80	; 0x50
 8001712:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001716:	2240      	movs	r2, #64	; 0x40
 8001718:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_UART_MspInit+0x240>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001726:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_UART_MspInit+0x240>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_UART_MspInit+0x240>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001746:	4814      	ldr	r0, [pc, #80]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001748:	f000 faa2 	bl	8001c90 <HAL_DMA_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8001752:	f7ff fb7d 	bl	8000e50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_UART_MspInit+0x240>)
 800175a:	679a      	str	r2, [r3, #120]	; 0x78
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_UART_MspInit+0x240>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2052      	movs	r0, #82	; 0x52
 8001768:	f000 f9e1 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800176c:	2052      	movs	r0, #82	; 0x52
 800176e:	f000 f9f8 	bl	8001b62 <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	37e8      	adds	r7, #232	; 0xe8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40004c00 	.word	0x40004c00
 8001780:	58024400 	.word	0x58024400
 8001784:	58020000 	.word	0x58020000
 8001788:	40007800 	.word	0x40007800
 800178c:	58021400 	.word	0x58021400
 8001790:	24000654 	.word	0x24000654
 8001794:	40020088 	.word	0x40020088
 8001798:	240005dc 	.word	0x240005dc
 800179c:	400200a0 	.word	0x400200a0

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a4:	f7fe ff14 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017aa:	490d      	ldr	r1, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c0:	4c0a      	ldr	r4, [pc, #40]	; (80017ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ce:	f010 ffad 	bl	801272c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff f8f9 	bl	80009c8 <main>
  bx  lr
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80017dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017e0:	24000198 	.word	0x24000198
  ldr r2, =_sidata
 80017e4:	08012848 	.word	0x08012848
  ldr r2, =_sbss
 80017e8:	24000198 	.word	0x24000198
  ldr r4, =_ebss
 80017ec:	240040a4 	.word	0x240040a4

080017f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC3_IRQHandler>
	...

080017f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fa:	2003      	movs	r0, #3
 80017fc:	f000 f98c 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001800:	f005 fe0e 	bl	8007420 <HAL_RCC_GetSysClockFreq>
 8001804:	4602      	mov	r2, r0
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_Init+0x68>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	4913      	ldr	r1, [pc, #76]	; (8001860 <HAL_Init+0x6c>)
 8001812:	5ccb      	ldrb	r3, [r1, r3]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_Init+0x68>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_Init+0x6c>)
 8001828:	5cd3      	ldrb	r3, [r2, r3]
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
 8001834:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <HAL_Init+0x70>)
 8001836:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_Init+0x74>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183e:	2000      	movs	r0, #0
 8001840:	f000 f814 	bl	800186c <HAL_InitTick>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e002      	b.n	8001854 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800184e:	f7ff fbbd 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	58024400 	.word	0x58024400
 8001860:	080127e4 	.word	0x080127e4
 8001864:	24000004 	.word	0x24000004
 8001868:	24000000 	.word	0x24000000

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_InitTick+0x60>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e021      	b.n	80018c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_InitTick+0x64>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_InitTick+0x60>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f971 	bl	8001b7e <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f93b 	bl	8001b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <HAL_InitTick+0x68>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	24000020 	.word	0x24000020
 80018d0:	24000000 	.word	0x24000000
 80018d4:	2400001c 	.word	0x2400001c

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	24000020 	.word	0x24000020
 80018fc:	2400075c 	.word	0x2400075c

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2400075c 	.word	0x2400075c

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffde 	bl	8001900 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24000020 	.word	0x24000020

08001960 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetREVID+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0c1b      	lsrs	r3, r3, #16
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	5c001000 	.word	0x5c001000

08001978 <__NVIC_SetPriorityGrouping>:
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <__NVIC_SetPriorityGrouping+0x40>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x40>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00
 80019bc:	05fa0000 	.word	0x05fa0000

080019c0 <__NVIC_GetPriorityGrouping>:
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	; (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae4:	d301      	bcc.n	8001aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <SysTick_Config+0x40>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af2:	210f      	movs	r1, #15
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f7ff ff8e 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SysTick_Config+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SysTick_Config+0x40>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff29 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff40 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff90 	bl	8001a6c <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5f 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff33 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa4 	bl	8001ad4 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b9c:	f3bf 8f5f 	dmb	sy
}
 8001ba0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_MPU_Disable+0x28>)
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_MPU_Disable+0x28>)
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bac:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_MPU_Disable+0x2c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00
 8001bc4:	e000ed90 	.word	0xe000ed90

08001bc8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bd0:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <HAL_MPU_Enable+0x38>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_MPU_Enable+0x3c>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_MPU_Enable+0x3c>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001be6:	f3bf 8f4f 	dsb	sy
}
 8001bea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bec:	f3bf 8f6f 	isb	sy
}
 8001bf0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed90 	.word	0xe000ed90
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	785a      	ldrb	r2, [r3, #1]
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_MPU_ConfigRegion+0x84>)
 8001c16:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d029      	beq.n	8001c74 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001c20:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_MPU_ConfigRegion+0x84>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7b1b      	ldrb	r3, [r3, #12]
 8001c2c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7adb      	ldrb	r3, [r3, #11]
 8001c32:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7a9b      	ldrb	r3, [r3, #10]
 8001c3a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7b5b      	ldrb	r3, [r3, #13]
 8001c42:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7b9b      	ldrb	r3, [r3, #14]
 8001c4a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7bdb      	ldrb	r3, [r3, #15]
 8001c52:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7a5b      	ldrb	r3, [r3, #9]
 8001c5a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7a1b      	ldrb	r3, [r3, #8]
 8001c62:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c64:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c6e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c70:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c72:	e005      	b.n	8001c80 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_MPU_ConfigRegion+0x84>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_MPU_ConfigRegion+0x84>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed90 	.word	0xe000ed90

08001c90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff fe32 	bl	8001900 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e316      	b.n	80022d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a66      	ldr	r2, [pc, #408]	; (8001e48 <HAL_DMA_Init+0x1b8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d04a      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <HAL_DMA_Init+0x1bc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d045      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a63      	ldr	r2, [pc, #396]	; (8001e50 <HAL_DMA_Init+0x1c0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d040      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a62      	ldr	r2, [pc, #392]	; (8001e54 <HAL_DMA_Init+0x1c4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d03b      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a60      	ldr	r2, [pc, #384]	; (8001e58 <HAL_DMA_Init+0x1c8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d036      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a5f      	ldr	r2, [pc, #380]	; (8001e5c <HAL_DMA_Init+0x1cc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d031      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5d      	ldr	r2, [pc, #372]	; (8001e60 <HAL_DMA_Init+0x1d0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d02c      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5c      	ldr	r2, [pc, #368]	; (8001e64 <HAL_DMA_Init+0x1d4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d027      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a5a      	ldr	r2, [pc, #360]	; (8001e68 <HAL_DMA_Init+0x1d8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d022      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a59      	ldr	r2, [pc, #356]	; (8001e6c <HAL_DMA_Init+0x1dc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d01d      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_DMA_Init+0x1e0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d018      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a56      	ldr	r2, [pc, #344]	; (8001e74 <HAL_DMA_Init+0x1e4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_DMA_Init+0x1e8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00e      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a53      	ldr	r2, [pc, #332]	; (8001e7c <HAL_DMA_Init+0x1ec>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a51      	ldr	r2, [pc, #324]	; (8001e80 <HAL_DMA_Init+0x1f0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_DMA_Init+0xb8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a50      	ldr	r2, [pc, #320]	; (8001e84 <HAL_DMA_Init+0x1f4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_DMA_Init+0xbc>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_DMA_Init+0xbe>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 813b 	beq.w	8001fca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a37      	ldr	r2, [pc, #220]	; (8001e48 <HAL_DMA_Init+0x1b8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d04a      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a36      	ldr	r2, [pc, #216]	; (8001e4c <HAL_DMA_Init+0x1bc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d045      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a34      	ldr	r2, [pc, #208]	; (8001e50 <HAL_DMA_Init+0x1c0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d040      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a33      	ldr	r2, [pc, #204]	; (8001e54 <HAL_DMA_Init+0x1c4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d03b      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a31      	ldr	r2, [pc, #196]	; (8001e58 <HAL_DMA_Init+0x1c8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d036      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a30      	ldr	r2, [pc, #192]	; (8001e5c <HAL_DMA_Init+0x1cc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d031      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2e      	ldr	r2, [pc, #184]	; (8001e60 <HAL_DMA_Init+0x1d0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d02c      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <HAL_DMA_Init+0x1d4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d027      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <HAL_DMA_Init+0x1d8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d022      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <HAL_DMA_Init+0x1dc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d01d      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <HAL_DMA_Init+0x1e0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d018      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <HAL_DMA_Init+0x1e4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <HAL_DMA_Init+0x1e8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00e      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <HAL_DMA_Init+0x1ec>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <HAL_DMA_Init+0x1f0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_DMA_Init+0x174>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <HAL_DMA_Init+0x1f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d108      	bne.n	8001e16 <HAL_DMA_Init+0x186>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e007      	b.n	8001e26 <HAL_DMA_Init+0x196>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e26:	e02f      	b.n	8001e88 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e28:	f7ff fd6a 	bl	8001900 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d928      	bls.n	8001e88 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e246      	b.n	80022d6 <HAL_DMA_Init+0x646>
 8001e48:	40020010 	.word	0x40020010
 8001e4c:	40020028 	.word	0x40020028
 8001e50:	40020040 	.word	0x40020040
 8001e54:	40020058 	.word	0x40020058
 8001e58:	40020070 	.word	0x40020070
 8001e5c:	40020088 	.word	0x40020088
 8001e60:	400200a0 	.word	0x400200a0
 8001e64:	400200b8 	.word	0x400200b8
 8001e68:	40020410 	.word	0x40020410
 8001e6c:	40020428 	.word	0x40020428
 8001e70:	40020440 	.word	0x40020440
 8001e74:	40020458 	.word	0x40020458
 8001e78:	40020470 	.word	0x40020470
 8001e7c:	40020488 	.word	0x40020488
 8001e80:	400204a0 	.word	0x400204a0
 8001e84:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1c8      	bne.n	8001e28 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <HAL_DMA_Init+0x420>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001eae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d107      	bne.n	8001eec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001eec:	4b71      	ldr	r3, [pc, #452]	; (80020b4 <HAL_DMA_Init+0x424>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b71      	ldr	r3, [pc, #452]	; (80020b8 <HAL_DMA_Init+0x428>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef8:	d328      	bcc.n	8001f4c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b28      	cmp	r3, #40	; 0x28
 8001f00:	d903      	bls.n	8001f0a <HAL_DMA_Init+0x27a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b2e      	cmp	r3, #46	; 0x2e
 8001f08:	d917      	bls.n	8001f3a <HAL_DMA_Init+0x2aa>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f10:	d903      	bls.n	8001f1a <HAL_DMA_Init+0x28a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b42      	cmp	r3, #66	; 0x42
 8001f18:	d90f      	bls.n	8001f3a <HAL_DMA_Init+0x2aa>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b46      	cmp	r3, #70	; 0x46
 8001f20:	d903      	bls.n	8001f2a <HAL_DMA_Init+0x29a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b48      	cmp	r3, #72	; 0x48
 8001f28:	d907      	bls.n	8001f3a <HAL_DMA_Init+0x2aa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b4e      	cmp	r3, #78	; 0x4e
 8001f30:	d905      	bls.n	8001f3e <HAL_DMA_Init+0x2ae>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b52      	cmp	r3, #82	; 0x52
 8001f38:	d801      	bhi.n	8001f3e <HAL_DMA_Init+0x2ae>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_DMA_Init+0x2b0>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f4a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f023 0307 	bic.w	r3, r3, #7
 8001f62:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d117      	bne.n	8001fa6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00e      	beq.n	8001fa6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f001 ff29 	bl	8003de0 <DMA_CheckFifoParam>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2240      	movs	r2, #64	; 0x40
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e197      	b.n	80022d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f001 fe64 	bl	8003c7c <DMA_CalcBaseAndBitshift>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	223f      	movs	r2, #63	; 0x3f
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	e0cd      	b.n	8002166 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a3b      	ldr	r2, [pc, #236]	; (80020bc <HAL_DMA_Init+0x42c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d022      	beq.n	800201a <HAL_DMA_Init+0x38a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a39      	ldr	r2, [pc, #228]	; (80020c0 <HAL_DMA_Init+0x430>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01d      	beq.n	800201a <HAL_DMA_Init+0x38a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a38      	ldr	r2, [pc, #224]	; (80020c4 <HAL_DMA_Init+0x434>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_Init+0x38a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a36      	ldr	r2, [pc, #216]	; (80020c8 <HAL_DMA_Init+0x438>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_DMA_Init+0x38a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a35      	ldr	r2, [pc, #212]	; (80020cc <HAL_DMA_Init+0x43c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00e      	beq.n	800201a <HAL_DMA_Init+0x38a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a33      	ldr	r2, [pc, #204]	; (80020d0 <HAL_DMA_Init+0x440>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_DMA_Init+0x38a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a32      	ldr	r2, [pc, #200]	; (80020d4 <HAL_DMA_Init+0x444>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_DMA_Init+0x38a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a30      	ldr	r2, [pc, #192]	; (80020d8 <HAL_DMA_Init+0x448>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_DMA_Init+0x38e>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_DMA_Init+0x390>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8097 	beq.w	8002154 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_DMA_Init+0x42c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d021      	beq.n	8002074 <HAL_DMA_Init+0x3e4>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <HAL_DMA_Init+0x430>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01c      	beq.n	8002074 <HAL_DMA_Init+0x3e4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <HAL_DMA_Init+0x434>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d017      	beq.n	8002074 <HAL_DMA_Init+0x3e4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <HAL_DMA_Init+0x438>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d012      	beq.n	8002074 <HAL_DMA_Init+0x3e4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <HAL_DMA_Init+0x43c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00d      	beq.n	8002074 <HAL_DMA_Init+0x3e4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_DMA_Init+0x440>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d008      	beq.n	8002074 <HAL_DMA_Init+0x3e4>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_DMA_Init+0x444>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <HAL_DMA_Init+0x3e4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_DMA_Init+0x448>)
 8002072:	4293      	cmp	r3, r2
 8002074:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_DMA_Init+0x44c>)
 8002092:	4013      	ands	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d020      	beq.n	80020e0 <HAL_DMA_Init+0x450>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b80      	cmp	r3, #128	; 0x80
 80020a4:	d102      	bne.n	80020ac <HAL_DMA_Init+0x41c>
 80020a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020aa:	e01a      	b.n	80020e2 <HAL_DMA_Init+0x452>
 80020ac:	2300      	movs	r3, #0
 80020ae:	e018      	b.n	80020e2 <HAL_DMA_Init+0x452>
 80020b0:	fe10803f 	.word	0xfe10803f
 80020b4:	5c001000 	.word	0x5c001000
 80020b8:	ffff0000 	.word	0xffff0000
 80020bc:	58025408 	.word	0x58025408
 80020c0:	5802541c 	.word	0x5802541c
 80020c4:	58025430 	.word	0x58025430
 80020c8:	58025444 	.word	0x58025444
 80020cc:	58025458 	.word	0x58025458
 80020d0:	5802546c 	.word	0x5802546c
 80020d4:	58025480 	.word	0x58025480
 80020d8:	58025494 	.word	0x58025494
 80020dc:	fffe000f 	.word	0xfffe000f
 80020e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68d2      	ldr	r2, [r2, #12]
 80020e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002100:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002108:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002110:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b6e      	ldr	r3, [pc, #440]	; (80022e0 <HAL_DMA_Init+0x650>)
 8002128:	4413      	add	r3, r2
 800212a:	4a6e      	ldr	r2, [pc, #440]	; (80022e4 <HAL_DMA_Init+0x654>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	009a      	lsls	r2, r3, #2
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f001 fd9f 	bl	8003c7c <DMA_CalcBaseAndBitshift>
 800213e:	4603      	mov	r3, r0
 8002140:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2201      	movs	r2, #1
 800214c:	409a      	lsls	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	e008      	b.n	8002166 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2203      	movs	r2, #3
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0b7      	b.n	80022d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5f      	ldr	r2, [pc, #380]	; (80022e8 <HAL_DMA_Init+0x658>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d072      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a5d      	ldr	r2, [pc, #372]	; (80022ec <HAL_DMA_Init+0x65c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d06d      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a5c      	ldr	r2, [pc, #368]	; (80022f0 <HAL_DMA_Init+0x660>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d068      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a5a      	ldr	r2, [pc, #360]	; (80022f4 <HAL_DMA_Init+0x664>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d063      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a59      	ldr	r2, [pc, #356]	; (80022f8 <HAL_DMA_Init+0x668>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d05e      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_DMA_Init+0x66c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d059      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_DMA_Init+0x670>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d054      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a54      	ldr	r2, [pc, #336]	; (8002304 <HAL_DMA_Init+0x674>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d04f      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a53      	ldr	r2, [pc, #332]	; (8002308 <HAL_DMA_Init+0x678>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d04a      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_DMA_Init+0x67c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d045      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a50      	ldr	r2, [pc, #320]	; (8002310 <HAL_DMA_Init+0x680>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d040      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a4e      	ldr	r2, [pc, #312]	; (8002314 <HAL_DMA_Init+0x684>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d03b      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a4d      	ldr	r2, [pc, #308]	; (8002318 <HAL_DMA_Init+0x688>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d036      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a4b      	ldr	r2, [pc, #300]	; (800231c <HAL_DMA_Init+0x68c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d031      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a4a      	ldr	r2, [pc, #296]	; (8002320 <HAL_DMA_Init+0x690>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d02c      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a48      	ldr	r2, [pc, #288]	; (8002324 <HAL_DMA_Init+0x694>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d027      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a47      	ldr	r2, [pc, #284]	; (8002328 <HAL_DMA_Init+0x698>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d022      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a45      	ldr	r2, [pc, #276]	; (800232c <HAL_DMA_Init+0x69c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01d      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a44      	ldr	r2, [pc, #272]	; (8002330 <HAL_DMA_Init+0x6a0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d018      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a42      	ldr	r2, [pc, #264]	; (8002334 <HAL_DMA_Init+0x6a4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a41      	ldr	r2, [pc, #260]	; (8002338 <HAL_DMA_Init+0x6a8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00e      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3f      	ldr	r2, [pc, #252]	; (800233c <HAL_DMA_Init+0x6ac>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a3e      	ldr	r2, [pc, #248]	; (8002340 <HAL_DMA_Init+0x6b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_DMA_Init+0x5c6>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3c      	ldr	r2, [pc, #240]	; (8002344 <HAL_DMA_Init+0x6b4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_DMA_Init+0x5ca>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_DMA_Init+0x5cc>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d032      	beq.n	80022c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f001 fe39 	bl	8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d102      	bne.n	8002274 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002288:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_DMA_Init+0x624>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d80c      	bhi.n	80022b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f001 feb6 	bl	800400c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	e008      	b.n	80022c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	a7fdabf8 	.word	0xa7fdabf8
 80022e4:	cccccccd 	.word	0xcccccccd
 80022e8:	40020010 	.word	0x40020010
 80022ec:	40020028 	.word	0x40020028
 80022f0:	40020040 	.word	0x40020040
 80022f4:	40020058 	.word	0x40020058
 80022f8:	40020070 	.word	0x40020070
 80022fc:	40020088 	.word	0x40020088
 8002300:	400200a0 	.word	0x400200a0
 8002304:	400200b8 	.word	0x400200b8
 8002308:	40020410 	.word	0x40020410
 800230c:	40020428 	.word	0x40020428
 8002310:	40020440 	.word	0x40020440
 8002314:	40020458 	.word	0x40020458
 8002318:	40020470 	.word	0x40020470
 800231c:	40020488 	.word	0x40020488
 8002320:	400204a0 	.word	0x400204a0
 8002324:	400204b8 	.word	0x400204b8
 8002328:	58025408 	.word	0x58025408
 800232c:	5802541c 	.word	0x5802541c
 8002330:	58025430 	.word	0x58025430
 8002334:	58025444 	.word	0x58025444
 8002338:	58025458 	.word	0x58025458
 800233c:	5802546c 	.word	0x5802546c
 8002340:	58025480 	.word	0x58025480
 8002344:	58025494 	.word	0x58025494

08002348 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff fad6 	bl	8001900 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e2dc      	b.n	800291a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d008      	beq.n	800237e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e2cd      	b.n	800291a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a76      	ldr	r2, [pc, #472]	; (800255c <HAL_DMA_Abort+0x214>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d04a      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a74      	ldr	r2, [pc, #464]	; (8002560 <HAL_DMA_Abort+0x218>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d045      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a73      	ldr	r2, [pc, #460]	; (8002564 <HAL_DMA_Abort+0x21c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d040      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a71      	ldr	r2, [pc, #452]	; (8002568 <HAL_DMA_Abort+0x220>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d03b      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a70      	ldr	r2, [pc, #448]	; (800256c <HAL_DMA_Abort+0x224>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d036      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_DMA_Abort+0x228>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d031      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6d      	ldr	r2, [pc, #436]	; (8002574 <HAL_DMA_Abort+0x22c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d02c      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6b      	ldr	r2, [pc, #428]	; (8002578 <HAL_DMA_Abort+0x230>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d027      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_DMA_Abort+0x234>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d022      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a68      	ldr	r2, [pc, #416]	; (8002580 <HAL_DMA_Abort+0x238>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01d      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a67      	ldr	r2, [pc, #412]	; (8002584 <HAL_DMA_Abort+0x23c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d018      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_DMA_Abort+0x240>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a64      	ldr	r2, [pc, #400]	; (800258c <HAL_DMA_Abort+0x244>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00e      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a62      	ldr	r2, [pc, #392]	; (8002590 <HAL_DMA_Abort+0x248>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d009      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a61      	ldr	r2, [pc, #388]	; (8002594 <HAL_DMA_Abort+0x24c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d004      	beq.n	800241e <HAL_DMA_Abort+0xd6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a5f      	ldr	r2, [pc, #380]	; (8002598 <HAL_DMA_Abort+0x250>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_DMA_Abort+0xda>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_DMA_Abort+0xdc>
 8002422:	2300      	movs	r3, #0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 021e 	bic.w	r2, r2, #30
 8002436:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002446:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e00a      	b.n	8002466 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020e 	bic.w	r2, r2, #14
 800245e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a3c      	ldr	r2, [pc, #240]	; (800255c <HAL_DMA_Abort+0x214>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d072      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a3a      	ldr	r2, [pc, #232]	; (8002560 <HAL_DMA_Abort+0x218>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d06d      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a39      	ldr	r2, [pc, #228]	; (8002564 <HAL_DMA_Abort+0x21c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d068      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a37      	ldr	r2, [pc, #220]	; (8002568 <HAL_DMA_Abort+0x220>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d063      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a36      	ldr	r2, [pc, #216]	; (800256c <HAL_DMA_Abort+0x224>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d05e      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a34      	ldr	r2, [pc, #208]	; (8002570 <HAL_DMA_Abort+0x228>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d059      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a33      	ldr	r2, [pc, #204]	; (8002574 <HAL_DMA_Abort+0x22c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d054      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a31      	ldr	r2, [pc, #196]	; (8002578 <HAL_DMA_Abort+0x230>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d04f      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a30      	ldr	r2, [pc, #192]	; (800257c <HAL_DMA_Abort+0x234>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d04a      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <HAL_DMA_Abort+0x238>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d045      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2d      	ldr	r2, [pc, #180]	; (8002584 <HAL_DMA_Abort+0x23c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d040      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <HAL_DMA_Abort+0x240>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d03b      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a2a      	ldr	r2, [pc, #168]	; (800258c <HAL_DMA_Abort+0x244>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d036      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a28      	ldr	r2, [pc, #160]	; (8002590 <HAL_DMA_Abort+0x248>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d031      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a27      	ldr	r2, [pc, #156]	; (8002594 <HAL_DMA_Abort+0x24c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d02c      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a25      	ldr	r2, [pc, #148]	; (8002598 <HAL_DMA_Abort+0x250>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d027      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a24      	ldr	r2, [pc, #144]	; (800259c <HAL_DMA_Abort+0x254>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d022      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <HAL_DMA_Abort+0x258>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01d      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a21      	ldr	r2, [pc, #132]	; (80025a4 <HAL_DMA_Abort+0x25c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d018      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_DMA_Abort+0x260>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <HAL_DMA_Abort+0x264>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00e      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <HAL_DMA_Abort+0x268>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d009      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <HAL_DMA_Abort+0x26c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d004      	beq.n	8002556 <HAL_DMA_Abort+0x20e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_DMA_Abort+0x270>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d132      	bne.n	80025bc <HAL_DMA_Abort+0x274>
 8002556:	2301      	movs	r3, #1
 8002558:	e031      	b.n	80025be <HAL_DMA_Abort+0x276>
 800255a:	bf00      	nop
 800255c:	40020010 	.word	0x40020010
 8002560:	40020028 	.word	0x40020028
 8002564:	40020040 	.word	0x40020040
 8002568:	40020058 	.word	0x40020058
 800256c:	40020070 	.word	0x40020070
 8002570:	40020088 	.word	0x40020088
 8002574:	400200a0 	.word	0x400200a0
 8002578:	400200b8 	.word	0x400200b8
 800257c:	40020410 	.word	0x40020410
 8002580:	40020428 	.word	0x40020428
 8002584:	40020440 	.word	0x40020440
 8002588:	40020458 	.word	0x40020458
 800258c:	40020470 	.word	0x40020470
 8002590:	40020488 	.word	0x40020488
 8002594:	400204a0 	.word	0x400204a0
 8002598:	400204b8 	.word	0x400204b8
 800259c:	58025408 	.word	0x58025408
 80025a0:	5802541c 	.word	0x5802541c
 80025a4:	58025430 	.word	0x58025430
 80025a8:	58025444 	.word	0x58025444
 80025ac:	58025458 	.word	0x58025458
 80025b0:	5802546c 	.word	0x5802546c
 80025b4:	58025480 	.word	0x58025480
 80025b8:	58025494 	.word	0x58025494
 80025bc:	2300      	movs	r3, #0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6d      	ldr	r2, [pc, #436]	; (800278c <HAL_DMA_Abort+0x444>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d04a      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6b      	ldr	r2, [pc, #428]	; (8002790 <HAL_DMA_Abort+0x448>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d045      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_DMA_Abort+0x44c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d040      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a68      	ldr	r2, [pc, #416]	; (8002798 <HAL_DMA_Abort+0x450>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d03b      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a67      	ldr	r2, [pc, #412]	; (800279c <HAL_DMA_Abort+0x454>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d036      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_DMA_Abort+0x458>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d031      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a64      	ldr	r2, [pc, #400]	; (80027a4 <HAL_DMA_Abort+0x45c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d02c      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a62      	ldr	r2, [pc, #392]	; (80027a8 <HAL_DMA_Abort+0x460>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d027      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a61      	ldr	r2, [pc, #388]	; (80027ac <HAL_DMA_Abort+0x464>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d022      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5f      	ldr	r2, [pc, #380]	; (80027b0 <HAL_DMA_Abort+0x468>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01d      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5e      	ldr	r2, [pc, #376]	; (80027b4 <HAL_DMA_Abort+0x46c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d018      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a5c      	ldr	r2, [pc, #368]	; (80027b8 <HAL_DMA_Abort+0x470>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a5b      	ldr	r2, [pc, #364]	; (80027bc <HAL_DMA_Abort+0x474>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a59      	ldr	r2, [pc, #356]	; (80027c0 <HAL_DMA_Abort+0x478>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_DMA_Abort+0x47c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_DMA_Abort+0x32a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a56      	ldr	r2, [pc, #344]	; (80027c8 <HAL_DMA_Abort+0x480>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d108      	bne.n	8002684 <HAL_DMA_Abort+0x33c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e007      	b.n	8002694 <HAL_DMA_Abort+0x34c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002694:	e013      	b.n	80026be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002696:	f7ff f933 	bl	8001900 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d90c      	bls.n	80026be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2203      	movs	r2, #3
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e12d      	b.n	800291a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e5      	bne.n	8002696 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2f      	ldr	r2, [pc, #188]	; (800278c <HAL_DMA_Abort+0x444>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d04a      	beq.n	800276a <HAL_DMA_Abort+0x422>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <HAL_DMA_Abort+0x448>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d045      	beq.n	800276a <HAL_DMA_Abort+0x422>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a2c      	ldr	r2, [pc, #176]	; (8002794 <HAL_DMA_Abort+0x44c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d040      	beq.n	800276a <HAL_DMA_Abort+0x422>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2a      	ldr	r2, [pc, #168]	; (8002798 <HAL_DMA_Abort+0x450>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d03b      	beq.n	800276a <HAL_DMA_Abort+0x422>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_DMA_Abort+0x454>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d036      	beq.n	800276a <HAL_DMA_Abort+0x422>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <HAL_DMA_Abort+0x458>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d031      	beq.n	800276a <HAL_DMA_Abort+0x422>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a26      	ldr	r2, [pc, #152]	; (80027a4 <HAL_DMA_Abort+0x45c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d02c      	beq.n	800276a <HAL_DMA_Abort+0x422>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <HAL_DMA_Abort+0x460>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d027      	beq.n	800276a <HAL_DMA_Abort+0x422>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a23      	ldr	r2, [pc, #140]	; (80027ac <HAL_DMA_Abort+0x464>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d022      	beq.n	800276a <HAL_DMA_Abort+0x422>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <HAL_DMA_Abort+0x468>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d01d      	beq.n	800276a <HAL_DMA_Abort+0x422>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <HAL_DMA_Abort+0x46c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d018      	beq.n	800276a <HAL_DMA_Abort+0x422>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <HAL_DMA_Abort+0x470>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_DMA_Abort+0x422>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_DMA_Abort+0x474>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00e      	beq.n	800276a <HAL_DMA_Abort+0x422>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <HAL_DMA_Abort+0x478>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_DMA_Abort+0x422>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_DMA_Abort+0x47c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_DMA_Abort+0x422>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_DMA_Abort+0x480>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_DMA_Abort+0x426>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_DMA_Abort+0x428>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02b      	beq.n	80027cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	223f      	movs	r2, #63	; 0x3f
 8002784:	409a      	lsls	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	e02a      	b.n	80027e2 <HAL_DMA_Abort+0x49a>
 800278c:	40020010 	.word	0x40020010
 8002790:	40020028 	.word	0x40020028
 8002794:	40020040 	.word	0x40020040
 8002798:	40020058 	.word	0x40020058
 800279c:	40020070 	.word	0x40020070
 80027a0:	40020088 	.word	0x40020088
 80027a4:	400200a0 	.word	0x400200a0
 80027a8:	400200b8 	.word	0x400200b8
 80027ac:	40020410 	.word	0x40020410
 80027b0:	40020428 	.word	0x40020428
 80027b4:	40020440 	.word	0x40020440
 80027b8:	40020458 	.word	0x40020458
 80027bc:	40020470 	.word	0x40020470
 80027c0:	40020488 	.word	0x40020488
 80027c4:	400204a0 	.word	0x400204a0
 80027c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2201      	movs	r2, #1
 80027dc:	409a      	lsls	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a4f      	ldr	r2, [pc, #316]	; (8002924 <HAL_DMA_Abort+0x5dc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d072      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a4d      	ldr	r2, [pc, #308]	; (8002928 <HAL_DMA_Abort+0x5e0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d06d      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_DMA_Abort+0x5e4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d068      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4a      	ldr	r2, [pc, #296]	; (8002930 <HAL_DMA_Abort+0x5e8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d063      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a49      	ldr	r2, [pc, #292]	; (8002934 <HAL_DMA_Abort+0x5ec>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d05e      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a47      	ldr	r2, [pc, #284]	; (8002938 <HAL_DMA_Abort+0x5f0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d059      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a46      	ldr	r2, [pc, #280]	; (800293c <HAL_DMA_Abort+0x5f4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d054      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a44      	ldr	r2, [pc, #272]	; (8002940 <HAL_DMA_Abort+0x5f8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d04f      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a43      	ldr	r2, [pc, #268]	; (8002944 <HAL_DMA_Abort+0x5fc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d04a      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a41      	ldr	r2, [pc, #260]	; (8002948 <HAL_DMA_Abort+0x600>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d045      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a40      	ldr	r2, [pc, #256]	; (800294c <HAL_DMA_Abort+0x604>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d040      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a3e      	ldr	r2, [pc, #248]	; (8002950 <HAL_DMA_Abort+0x608>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d03b      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a3d      	ldr	r2, [pc, #244]	; (8002954 <HAL_DMA_Abort+0x60c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d036      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <HAL_DMA_Abort+0x610>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d031      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a3a      	ldr	r2, [pc, #232]	; (800295c <HAL_DMA_Abort+0x614>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d02c      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a38      	ldr	r2, [pc, #224]	; (8002960 <HAL_DMA_Abort+0x618>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d027      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a37      	ldr	r2, [pc, #220]	; (8002964 <HAL_DMA_Abort+0x61c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a35      	ldr	r2, [pc, #212]	; (8002968 <HAL_DMA_Abort+0x620>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01d      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a34      	ldr	r2, [pc, #208]	; (800296c <HAL_DMA_Abort+0x624>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d018      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a32      	ldr	r2, [pc, #200]	; (8002970 <HAL_DMA_Abort+0x628>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a31      	ldr	r2, [pc, #196]	; (8002974 <HAL_DMA_Abort+0x62c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00e      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <HAL_DMA_Abort+0x630>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2e      	ldr	r2, [pc, #184]	; (800297c <HAL_DMA_Abort+0x634>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_DMA_Abort+0x58a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2c      	ldr	r2, [pc, #176]	; (8002980 <HAL_DMA_Abort+0x638>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_DMA_Abort+0x58e>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_DMA_Abort+0x590>
 80028d6:	2300      	movs	r3, #0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002906:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40020010 	.word	0x40020010
 8002928:	40020028 	.word	0x40020028
 800292c:	40020040 	.word	0x40020040
 8002930:	40020058 	.word	0x40020058
 8002934:	40020070 	.word	0x40020070
 8002938:	40020088 	.word	0x40020088
 800293c:	400200a0 	.word	0x400200a0
 8002940:	400200b8 	.word	0x400200b8
 8002944:	40020410 	.word	0x40020410
 8002948:	40020428 	.word	0x40020428
 800294c:	40020440 	.word	0x40020440
 8002950:	40020458 	.word	0x40020458
 8002954:	40020470 	.word	0x40020470
 8002958:	40020488 	.word	0x40020488
 800295c:	400204a0 	.word	0x400204a0
 8002960:	400204b8 	.word	0x400204b8
 8002964:	58025408 	.word	0x58025408
 8002968:	5802541c 	.word	0x5802541c
 800296c:	58025430 	.word	0x58025430
 8002970:	58025444 	.word	0x58025444
 8002974:	58025458 	.word	0x58025458
 8002978:	5802546c 	.word	0x5802546c
 800297c:	58025480 	.word	0x58025480
 8002980:	58025494 	.word	0x58025494

08002984 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e205      	b.n	8002da2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e1fa      	b.n	8002da2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a8c      	ldr	r2, [pc, #560]	; (8002be4 <HAL_DMA_Abort_IT+0x260>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d04a      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a8b      	ldr	r2, [pc, #556]	; (8002be8 <HAL_DMA_Abort_IT+0x264>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d045      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a89      	ldr	r2, [pc, #548]	; (8002bec <HAL_DMA_Abort_IT+0x268>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d040      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a88      	ldr	r2, [pc, #544]	; (8002bf0 <HAL_DMA_Abort_IT+0x26c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d03b      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a86      	ldr	r2, [pc, #536]	; (8002bf4 <HAL_DMA_Abort_IT+0x270>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d036      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a85      	ldr	r2, [pc, #532]	; (8002bf8 <HAL_DMA_Abort_IT+0x274>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d031      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a83      	ldr	r2, [pc, #524]	; (8002bfc <HAL_DMA_Abort_IT+0x278>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d02c      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a82      	ldr	r2, [pc, #520]	; (8002c00 <HAL_DMA_Abort_IT+0x27c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d027      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a80      	ldr	r2, [pc, #512]	; (8002c04 <HAL_DMA_Abort_IT+0x280>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d022      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7f      	ldr	r2, [pc, #508]	; (8002c08 <HAL_DMA_Abort_IT+0x284>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d01d      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7d      	ldr	r2, [pc, #500]	; (8002c0c <HAL_DMA_Abort_IT+0x288>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d018      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <HAL_DMA_Abort_IT+0x28c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a7a      	ldr	r2, [pc, #488]	; (8002c14 <HAL_DMA_Abort_IT+0x290>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00e      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a79      	ldr	r2, [pc, #484]	; (8002c18 <HAL_DMA_Abort_IT+0x294>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a77      	ldr	r2, [pc, #476]	; (8002c1c <HAL_DMA_Abort_IT+0x298>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xc8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <HAL_DMA_Abort_IT+0x29c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_DMA_Abort_IT+0xcc>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_DMA_Abort_IT+0xce>
 8002a50:	2300      	movs	r3, #0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d065      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a60      	ldr	r2, [pc, #384]	; (8002be4 <HAL_DMA_Abort_IT+0x260>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d04a      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5e      	ldr	r2, [pc, #376]	; (8002be8 <HAL_DMA_Abort_IT+0x264>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d045      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5d      	ldr	r2, [pc, #372]	; (8002bec <HAL_DMA_Abort_IT+0x268>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d040      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5b      	ldr	r2, [pc, #364]	; (8002bf0 <HAL_DMA_Abort_IT+0x26c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d03b      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5a      	ldr	r2, [pc, #360]	; (8002bf4 <HAL_DMA_Abort_IT+0x270>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d036      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a58      	ldr	r2, [pc, #352]	; (8002bf8 <HAL_DMA_Abort_IT+0x274>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d031      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a57      	ldr	r2, [pc, #348]	; (8002bfc <HAL_DMA_Abort_IT+0x278>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d02c      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a55      	ldr	r2, [pc, #340]	; (8002c00 <HAL_DMA_Abort_IT+0x27c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d027      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a54      	ldr	r2, [pc, #336]	; (8002c04 <HAL_DMA_Abort_IT+0x280>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d022      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a52      	ldr	r2, [pc, #328]	; (8002c08 <HAL_DMA_Abort_IT+0x284>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01d      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a51      	ldr	r2, [pc, #324]	; (8002c0c <HAL_DMA_Abort_IT+0x288>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d018      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a4f      	ldr	r2, [pc, #316]	; (8002c10 <HAL_DMA_Abort_IT+0x28c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a4e      	ldr	r2, [pc, #312]	; (8002c14 <HAL_DMA_Abort_IT+0x290>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00e      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	; (8002c18 <HAL_DMA_Abort_IT+0x294>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d009      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4b      	ldr	r2, [pc, #300]	; (8002c1c <HAL_DMA_Abort_IT+0x298>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d004      	beq.n	8002afe <HAL_DMA_Abort_IT+0x17a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a49      	ldr	r2, [pc, #292]	; (8002c20 <HAL_DMA_Abort_IT+0x29c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d108      	bne.n	8002b10 <HAL_DMA_Abort_IT+0x18c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e147      	b.n	8002da0 <HAL_DMA_Abort_IT+0x41c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e13e      	b.n	8002da0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 020e 	bic.w	r2, r2, #14
 8002b30:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <HAL_DMA_Abort_IT+0x260>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d04a      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <HAL_DMA_Abort_IT+0x264>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d045      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a28      	ldr	r2, [pc, #160]	; (8002bec <HAL_DMA_Abort_IT+0x268>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d040      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <HAL_DMA_Abort_IT+0x26c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d03b      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <HAL_DMA_Abort_IT+0x270>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d036      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_DMA_Abort_IT+0x274>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d031      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_DMA_Abort_IT+0x278>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d02c      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a20      	ldr	r2, [pc, #128]	; (8002c00 <HAL_DMA_Abort_IT+0x27c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d027      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <HAL_DMA_Abort_IT+0x280>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d022      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <HAL_DMA_Abort_IT+0x284>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01d      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <HAL_DMA_Abort_IT+0x288>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d018      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1a      	ldr	r2, [pc, #104]	; (8002c10 <HAL_DMA_Abort_IT+0x28c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a19      	ldr	r2, [pc, #100]	; (8002c14 <HAL_DMA_Abort_IT+0x290>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_DMA_Abort_IT+0x294>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d009      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_DMA_Abort_IT+0x298>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <HAL_DMA_Abort_IT+0x29c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d128      	bne.n	8002c24 <HAL_DMA_Abort_IT+0x2a0>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	e027      	b.n	8002c34 <HAL_DMA_Abort_IT+0x2b0>
 8002be4:	40020010 	.word	0x40020010
 8002be8:	40020028 	.word	0x40020028
 8002bec:	40020040 	.word	0x40020040
 8002bf0:	40020058 	.word	0x40020058
 8002bf4:	40020070 	.word	0x40020070
 8002bf8:	40020088 	.word	0x40020088
 8002bfc:	400200a0 	.word	0x400200a0
 8002c00:	400200b8 	.word	0x400200b8
 8002c04:	40020410 	.word	0x40020410
 8002c08:	40020428 	.word	0x40020428
 8002c0c:	40020440 	.word	0x40020440
 8002c10:	40020458 	.word	0x40020458
 8002c14:	40020470 	.word	0x40020470
 8002c18:	40020488 	.word	0x40020488
 8002c1c:	400204a0 	.word	0x400204a0
 8002c20:	400204b8 	.word	0x400204b8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a5c      	ldr	r2, [pc, #368]	; (8002dac <HAL_DMA_Abort_IT+0x428>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d072      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a5b      	ldr	r2, [pc, #364]	; (8002db0 <HAL_DMA_Abort_IT+0x42c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d06d      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a59      	ldr	r2, [pc, #356]	; (8002db4 <HAL_DMA_Abort_IT+0x430>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d068      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <HAL_DMA_Abort_IT+0x434>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d063      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a56      	ldr	r2, [pc, #344]	; (8002dbc <HAL_DMA_Abort_IT+0x438>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d05e      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a55      	ldr	r2, [pc, #340]	; (8002dc0 <HAL_DMA_Abort_IT+0x43c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d059      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a53      	ldr	r2, [pc, #332]	; (8002dc4 <HAL_DMA_Abort_IT+0x440>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d054      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_DMA_Abort_IT+0x444>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d04f      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a50      	ldr	r2, [pc, #320]	; (8002dcc <HAL_DMA_Abort_IT+0x448>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d04a      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a4f      	ldr	r2, [pc, #316]	; (8002dd0 <HAL_DMA_Abort_IT+0x44c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d045      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a4d      	ldr	r2, [pc, #308]	; (8002dd4 <HAL_DMA_Abort_IT+0x450>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d040      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a4c      	ldr	r2, [pc, #304]	; (8002dd8 <HAL_DMA_Abort_IT+0x454>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d03b      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a4a      	ldr	r2, [pc, #296]	; (8002ddc <HAL_DMA_Abort_IT+0x458>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d036      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a49      	ldr	r2, [pc, #292]	; (8002de0 <HAL_DMA_Abort_IT+0x45c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d031      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a47      	ldr	r2, [pc, #284]	; (8002de4 <HAL_DMA_Abort_IT+0x460>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d02c      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a46      	ldr	r2, [pc, #280]	; (8002de8 <HAL_DMA_Abort_IT+0x464>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d027      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a44      	ldr	r2, [pc, #272]	; (8002dec <HAL_DMA_Abort_IT+0x468>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d022      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_DMA_Abort_IT+0x46c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d01d      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a41      	ldr	r2, [pc, #260]	; (8002df4 <HAL_DMA_Abort_IT+0x470>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d018      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a40      	ldr	r2, [pc, #256]	; (8002df8 <HAL_DMA_Abort_IT+0x474>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a3e      	ldr	r2, [pc, #248]	; (8002dfc <HAL_DMA_Abort_IT+0x478>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00e      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a3d      	ldr	r2, [pc, #244]	; (8002e00 <HAL_DMA_Abort_IT+0x47c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d009      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <HAL_DMA_Abort_IT+0x480>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d004      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x3a0>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <HAL_DMA_Abort_IT+0x484>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d101      	bne.n	8002d28 <HAL_DMA_Abort_IT+0x3a4>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_DMA_Abort_IT+0x3a6>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d028      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00c      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40020010 	.word	0x40020010
 8002db0:	40020028 	.word	0x40020028
 8002db4:	40020040 	.word	0x40020040
 8002db8:	40020058 	.word	0x40020058
 8002dbc:	40020070 	.word	0x40020070
 8002dc0:	40020088 	.word	0x40020088
 8002dc4:	400200a0 	.word	0x400200a0
 8002dc8:	400200b8 	.word	0x400200b8
 8002dcc:	40020410 	.word	0x40020410
 8002dd0:	40020428 	.word	0x40020428
 8002dd4:	40020440 	.word	0x40020440
 8002dd8:	40020458 	.word	0x40020458
 8002ddc:	40020470 	.word	0x40020470
 8002de0:	40020488 	.word	0x40020488
 8002de4:	400204a0 	.word	0x400204a0
 8002de8:	400204b8 	.word	0x400204b8
 8002dec:	58025408 	.word	0x58025408
 8002df0:	5802541c 	.word	0x5802541c
 8002df4:	58025430 	.word	0x58025430
 8002df8:	58025444 	.word	0x58025444
 8002dfc:	58025458 	.word	0x58025458
 8002e00:	5802546c 	.word	0x5802546c
 8002e04:	58025480 	.word	0x58025480
 8002e08:	58025494 	.word	0x58025494

08002e0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e18:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <HAL_DMA_IRQHandler+0x1ac>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <HAL_DMA_IRQHandler+0x1b0>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0a9b      	lsrs	r3, r3, #10
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a5f      	ldr	r2, [pc, #380]	; (8002fc0 <HAL_DMA_IRQHandler+0x1b4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d04a      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a5d      	ldr	r2, [pc, #372]	; (8002fc4 <HAL_DMA_IRQHandler+0x1b8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d045      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a5c      	ldr	r2, [pc, #368]	; (8002fc8 <HAL_DMA_IRQHandler+0x1bc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d040      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5a      	ldr	r2, [pc, #360]	; (8002fcc <HAL_DMA_IRQHandler+0x1c0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d03b      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a59      	ldr	r2, [pc, #356]	; (8002fd0 <HAL_DMA_IRQHandler+0x1c4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d036      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_DMA_IRQHandler+0x1c8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d031      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a56      	ldr	r2, [pc, #344]	; (8002fd8 <HAL_DMA_IRQHandler+0x1cc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d02c      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a54      	ldr	r2, [pc, #336]	; (8002fdc <HAL_DMA_IRQHandler+0x1d0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d027      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a53      	ldr	r2, [pc, #332]	; (8002fe0 <HAL_DMA_IRQHandler+0x1d4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d022      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a51      	ldr	r2, [pc, #324]	; (8002fe4 <HAL_DMA_IRQHandler+0x1d8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01d      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a50      	ldr	r2, [pc, #320]	; (8002fe8 <HAL_DMA_IRQHandler+0x1dc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d018      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a4e      	ldr	r2, [pc, #312]	; (8002fec <HAL_DMA_IRQHandler+0x1e0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a4d      	ldr	r2, [pc, #308]	; (8002ff0 <HAL_DMA_IRQHandler+0x1e4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00e      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4b      	ldr	r2, [pc, #300]	; (8002ff4 <HAL_DMA_IRQHandler+0x1e8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a4a      	ldr	r2, [pc, #296]	; (8002ff8 <HAL_DMA_IRQHandler+0x1ec>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_DMA_IRQHandler+0xd2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a48      	ldr	r2, [pc, #288]	; (8002ffc <HAL_DMA_IRQHandler+0x1f0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0xd6>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xd8>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 842b 	beq.w	8003740 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a2 	beq.w	8003044 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2e      	ldr	r2, [pc, #184]	; (8002fc0 <HAL_DMA_IRQHandler+0x1b4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d04a      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <HAL_DMA_IRQHandler+0x1b8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d045      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <HAL_DMA_IRQHandler+0x1bc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d040      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <HAL_DMA_IRQHandler+0x1c0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d03b      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <HAL_DMA_IRQHandler+0x1c4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d036      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <HAL_DMA_IRQHandler+0x1c8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d031      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <HAL_DMA_IRQHandler+0x1cc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d02c      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <HAL_DMA_IRQHandler+0x1d0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d027      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_DMA_IRQHandler+0x1d4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d022      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <HAL_DMA_IRQHandler+0x1d8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d01d      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_DMA_IRQHandler+0x1dc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d018      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <HAL_DMA_IRQHandler+0x1e0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <HAL_DMA_IRQHandler+0x1e4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00e      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_DMA_IRQHandler+0x1e8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <HAL_DMA_IRQHandler+0x1ec>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x194>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_DMA_IRQHandler+0x1f0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d12f      	bne.n	8003000 <HAL_DMA_IRQHandler+0x1f4>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e02e      	b.n	8003014 <HAL_DMA_IRQHandler+0x208>
 8002fb6:	bf00      	nop
 8002fb8:	24000000 	.word	0x24000000
 8002fbc:	1b4e81b5 	.word	0x1b4e81b5
 8002fc0:	40020010 	.word	0x40020010
 8002fc4:	40020028 	.word	0x40020028
 8002fc8:	40020040 	.word	0x40020040
 8002fcc:	40020058 	.word	0x40020058
 8002fd0:	40020070 	.word	0x40020070
 8002fd4:	40020088 	.word	0x40020088
 8002fd8:	400200a0 	.word	0x400200a0
 8002fdc:	400200b8 	.word	0x400200b8
 8002fe0:	40020410 	.word	0x40020410
 8002fe4:	40020428 	.word	0x40020428
 8002fe8:	40020440 	.word	0x40020440
 8002fec:	40020458 	.word	0x40020458
 8002ff0:	40020470 	.word	0x40020470
 8002ff4:	40020488 	.word	0x40020488
 8002ff8:	400204a0 	.word	0x400204a0
 8002ffc:	400204b8 	.word	0x400204b8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0204 	bic.w	r2, r2, #4
 8003026:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	2208      	movs	r2, #8
 8003032:	409a      	lsls	r2, r3
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d06e      	beq.n	8003138 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a69      	ldr	r2, [pc, #420]	; (8003204 <HAL_DMA_IRQHandler+0x3f8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d04a      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a67      	ldr	r2, [pc, #412]	; (8003208 <HAL_DMA_IRQHandler+0x3fc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d045      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a66      	ldr	r2, [pc, #408]	; (800320c <HAL_DMA_IRQHandler+0x400>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d040      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a64      	ldr	r2, [pc, #400]	; (8003210 <HAL_DMA_IRQHandler+0x404>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d03b      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a63      	ldr	r2, [pc, #396]	; (8003214 <HAL_DMA_IRQHandler+0x408>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d036      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a61      	ldr	r2, [pc, #388]	; (8003218 <HAL_DMA_IRQHandler+0x40c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d031      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a60      	ldr	r2, [pc, #384]	; (800321c <HAL_DMA_IRQHandler+0x410>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d02c      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a5e      	ldr	r2, [pc, #376]	; (8003220 <HAL_DMA_IRQHandler+0x414>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d027      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a5d      	ldr	r2, [pc, #372]	; (8003224 <HAL_DMA_IRQHandler+0x418>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d022      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5b      	ldr	r2, [pc, #364]	; (8003228 <HAL_DMA_IRQHandler+0x41c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01d      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a5a      	ldr	r2, [pc, #360]	; (800322c <HAL_DMA_IRQHandler+0x420>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d018      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_DMA_IRQHandler+0x424>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a57      	ldr	r2, [pc, #348]	; (8003234 <HAL_DMA_IRQHandler+0x428>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00e      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a55      	ldr	r2, [pc, #340]	; (8003238 <HAL_DMA_IRQHandler+0x42c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a54      	ldr	r2, [pc, #336]	; (800323c <HAL_DMA_IRQHandler+0x430>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2ee>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_DMA_IRQHandler+0x434>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10a      	bne.n	8003110 <HAL_DMA_IRQHandler+0x304>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e003      	b.n	8003118 <HAL_DMA_IRQHandler+0x30c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2300      	movs	r3, #0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00d      	beq.n	8003138 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f043 0202 	orr.w	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2204      	movs	r2, #4
 8003142:	409a      	lsls	r2, r3
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 808f 	beq.w	800326c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <HAL_DMA_IRQHandler+0x3f8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <HAL_DMA_IRQHandler+0x3fc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a29      	ldr	r2, [pc, #164]	; (800320c <HAL_DMA_IRQHandler+0x400>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <HAL_DMA_IRQHandler+0x404>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a26      	ldr	r2, [pc, #152]	; (8003214 <HAL_DMA_IRQHandler+0x408>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_DMA_IRQHandler+0x40c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a23      	ldr	r2, [pc, #140]	; (800321c <HAL_DMA_IRQHandler+0x410>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <HAL_DMA_IRQHandler+0x414>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a20      	ldr	r2, [pc, #128]	; (8003224 <HAL_DMA_IRQHandler+0x418>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_DMA_IRQHandler+0x41c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1d      	ldr	r2, [pc, #116]	; (800322c <HAL_DMA_IRQHandler+0x420>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_DMA_IRQHandler+0x424>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <HAL_DMA_IRQHandler+0x428>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_DMA_IRQHandler+0x42c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <HAL_DMA_IRQHandler+0x430>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_IRQHandler+0x3e2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a15      	ldr	r2, [pc, #84]	; (8003240 <HAL_DMA_IRQHandler+0x434>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d12a      	bne.n	8003244 <HAL_DMA_IRQHandler+0x438>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e023      	b.n	800324c <HAL_DMA_IRQHandler+0x440>
 8003204:	40020010 	.word	0x40020010
 8003208:	40020028 	.word	0x40020028
 800320c:	40020040 	.word	0x40020040
 8003210:	40020058 	.word	0x40020058
 8003214:	40020070 	.word	0x40020070
 8003218:	40020088 	.word	0x40020088
 800321c:	400200a0 	.word	0x400200a0
 8003220:	400200b8 	.word	0x400200b8
 8003224:	40020410 	.word	0x40020410
 8003228:	40020428 	.word	0x40020428
 800322c:	40020440 	.word	0x40020440
 8003230:	40020458 	.word	0x40020458
 8003234:	40020470 	.word	0x40020470
 8003238:	40020488 	.word	0x40020488
 800323c:	400204a0 	.word	0x400204a0
 8003240:	400204b8 	.word	0x400204b8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2204      	movs	r2, #4
 800325a:	409a      	lsls	r2, r3
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f043 0204 	orr.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2210      	movs	r2, #16
 8003276:	409a      	lsls	r2, r3
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a6 	beq.w	80033ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a85      	ldr	r2, [pc, #532]	; (800349c <HAL_DMA_IRQHandler+0x690>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d04a      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a83      	ldr	r2, [pc, #524]	; (80034a0 <HAL_DMA_IRQHandler+0x694>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d045      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a82      	ldr	r2, [pc, #520]	; (80034a4 <HAL_DMA_IRQHandler+0x698>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d040      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a80      	ldr	r2, [pc, #512]	; (80034a8 <HAL_DMA_IRQHandler+0x69c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d03b      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7f      	ldr	r2, [pc, #508]	; (80034ac <HAL_DMA_IRQHandler+0x6a0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d036      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a7d      	ldr	r2, [pc, #500]	; (80034b0 <HAL_DMA_IRQHandler+0x6a4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7c      	ldr	r2, [pc, #496]	; (80034b4 <HAL_DMA_IRQHandler+0x6a8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d02c      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a7a      	ldr	r2, [pc, #488]	; (80034b8 <HAL_DMA_IRQHandler+0x6ac>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d027      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a79      	ldr	r2, [pc, #484]	; (80034bc <HAL_DMA_IRQHandler+0x6b0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d022      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a77      	ldr	r2, [pc, #476]	; (80034c0 <HAL_DMA_IRQHandler+0x6b4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01d      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a76      	ldr	r2, [pc, #472]	; (80034c4 <HAL_DMA_IRQHandler+0x6b8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a74      	ldr	r2, [pc, #464]	; (80034c8 <HAL_DMA_IRQHandler+0x6bc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a73      	ldr	r2, [pc, #460]	; (80034cc <HAL_DMA_IRQHandler+0x6c0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00e      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a71      	ldr	r2, [pc, #452]	; (80034d0 <HAL_DMA_IRQHandler+0x6c4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a70      	ldr	r2, [pc, #448]	; (80034d4 <HAL_DMA_IRQHandler+0x6c8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_DMA_IRQHandler+0x516>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_DMA_IRQHandler+0x6cc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10a      	bne.n	8003338 <HAL_DMA_IRQHandler+0x52c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e009      	b.n	800334c <HAL_DMA_IRQHandler+0x540>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d03e      	beq.n	80033ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2210      	movs	r2, #16
 800335a:	409a      	lsls	r2, r3
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d018      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d108      	bne.n	800338e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d024      	beq.n	80033ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
 800338c:	e01f      	b.n	80033ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01b      	beq.n	80033ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
 800339e:	e016      	b.n	80033ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d107      	bne.n	80033be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0208 	bic.w	r2, r2, #8
 80033bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2220      	movs	r2, #32
 80033d8:	409a      	lsls	r2, r3
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8110 	beq.w	8003604 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2c      	ldr	r2, [pc, #176]	; (800349c <HAL_DMA_IRQHandler+0x690>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d04a      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_DMA_IRQHandler+0x694>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d045      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <HAL_DMA_IRQHandler+0x698>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d040      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <HAL_DMA_IRQHandler+0x69c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d03b      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <HAL_DMA_IRQHandler+0x6a0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d036      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_DMA_IRQHandler+0x6a4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d031      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a23      	ldr	r2, [pc, #140]	; (80034b4 <HAL_DMA_IRQHandler+0x6a8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02c      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <HAL_DMA_IRQHandler+0x6ac>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d027      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a20      	ldr	r2, [pc, #128]	; (80034bc <HAL_DMA_IRQHandler+0x6b0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d022      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_DMA_IRQHandler+0x6b4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d01d      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_DMA_IRQHandler+0x6b8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d018      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <HAL_DMA_IRQHandler+0x6bc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_DMA_IRQHandler+0x6c0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00e      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_DMA_IRQHandler+0x6c4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <HAL_DMA_IRQHandler+0x6c8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_DMA_IRQHandler+0x678>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_DMA_IRQHandler+0x6cc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d12b      	bne.n	80034dc <HAL_DMA_IRQHandler+0x6d0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	e02a      	b.n	80034f0 <HAL_DMA_IRQHandler+0x6e4>
 800349a:	bf00      	nop
 800349c:	40020010 	.word	0x40020010
 80034a0:	40020028 	.word	0x40020028
 80034a4:	40020040 	.word	0x40020040
 80034a8:	40020058 	.word	0x40020058
 80034ac:	40020070 	.word	0x40020070
 80034b0:	40020088 	.word	0x40020088
 80034b4:	400200a0 	.word	0x400200a0
 80034b8:	400200b8 	.word	0x400200b8
 80034bc:	40020410 	.word	0x40020410
 80034c0:	40020428 	.word	0x40020428
 80034c4:	40020440 	.word	0x40020440
 80034c8:	40020458 	.word	0x40020458
 80034cc:	40020470 	.word	0x40020470
 80034d0:	40020488 	.word	0x40020488
 80034d4:	400204a0 	.word	0x400204a0
 80034d8:	400204b8 	.word	0x400204b8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8087 	beq.w	8003604 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2220      	movs	r2, #32
 8003500:	409a      	lsls	r2, r3
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b04      	cmp	r3, #4
 8003510:	d139      	bne.n	8003586 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0216 	bic.w	r2, r2, #22
 8003520:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003530:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_DMA_IRQHandler+0x736>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	223f      	movs	r2, #63	; 0x3f
 800355c:	409a      	lsls	r2, r3
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 834a 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
          }
          return;
 8003584:	e344      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d018      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02c      	beq.n	8003604 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
 80035b2:	e027      	b.n	8003604 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d023      	beq.n	8003604 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
 80035c4:	e01e      	b.n	8003604 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10f      	bne.n	80035f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0210 	bic.w	r2, r2, #16
 80035e2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8306 	beq.w	8003c1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8088 	beq.w	800372c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2204      	movs	r2, #4
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a7a      	ldr	r2, [pc, #488]	; (8003814 <HAL_DMA_IRQHandler+0xa08>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d04a      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a79      	ldr	r2, [pc, #484]	; (8003818 <HAL_DMA_IRQHandler+0xa0c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d045      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a77      	ldr	r2, [pc, #476]	; (800381c <HAL_DMA_IRQHandler+0xa10>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d040      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a76      	ldr	r2, [pc, #472]	; (8003820 <HAL_DMA_IRQHandler+0xa14>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d03b      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a74      	ldr	r2, [pc, #464]	; (8003824 <HAL_DMA_IRQHandler+0xa18>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d036      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a73      	ldr	r2, [pc, #460]	; (8003828 <HAL_DMA_IRQHandler+0xa1c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d031      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a71      	ldr	r2, [pc, #452]	; (800382c <HAL_DMA_IRQHandler+0xa20>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d02c      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a70      	ldr	r2, [pc, #448]	; (8003830 <HAL_DMA_IRQHandler+0xa24>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d027      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a6e      	ldr	r2, [pc, #440]	; (8003834 <HAL_DMA_IRQHandler+0xa28>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d022      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6d      	ldr	r2, [pc, #436]	; (8003838 <HAL_DMA_IRQHandler+0xa2c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d01d      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a6b      	ldr	r2, [pc, #428]	; (800383c <HAL_DMA_IRQHandler+0xa30>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d018      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a6a      	ldr	r2, [pc, #424]	; (8003840 <HAL_DMA_IRQHandler+0xa34>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a68      	ldr	r2, [pc, #416]	; (8003844 <HAL_DMA_IRQHandler+0xa38>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00e      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a67      	ldr	r2, [pc, #412]	; (8003848 <HAL_DMA_IRQHandler+0xa3c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a65      	ldr	r2, [pc, #404]	; (800384c <HAL_DMA_IRQHandler+0xa40>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x8b8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a64      	ldr	r2, [pc, #400]	; (8003850 <HAL_DMA_IRQHandler+0xa44>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d108      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x8ca>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e007      	b.n	80036e6 <HAL_DMA_IRQHandler+0x8da>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d307      	bcc.n	8003702 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f2      	bne.n	80036e6 <HAL_DMA_IRQHandler+0x8da>
 8003700:	e000      	b.n	8003704 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003702:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003722:	e003      	b.n	800372c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8272 	beq.w	8003c1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e26c      	b.n	8003c1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a43      	ldr	r2, [pc, #268]	; (8003854 <HAL_DMA_IRQHandler+0xa48>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <HAL_DMA_IRQHandler+0x984>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a42      	ldr	r2, [pc, #264]	; (8003858 <HAL_DMA_IRQHandler+0xa4c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d01d      	beq.n	8003790 <HAL_DMA_IRQHandler+0x984>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a40      	ldr	r2, [pc, #256]	; (800385c <HAL_DMA_IRQHandler+0xa50>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <HAL_DMA_IRQHandler+0x984>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a3f      	ldr	r2, [pc, #252]	; (8003860 <HAL_DMA_IRQHandler+0xa54>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_DMA_IRQHandler+0x984>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a3d      	ldr	r2, [pc, #244]	; (8003864 <HAL_DMA_IRQHandler+0xa58>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_DMA_IRQHandler+0x984>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a3c      	ldr	r2, [pc, #240]	; (8003868 <HAL_DMA_IRQHandler+0xa5c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_DMA_IRQHandler+0x984>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3a      	ldr	r2, [pc, #232]	; (800386c <HAL_DMA_IRQHandler+0xa60>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_DMA_IRQHandler+0x984>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a39      	ldr	r2, [pc, #228]	; (8003870 <HAL_DMA_IRQHandler+0xa64>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d101      	bne.n	8003794 <HAL_DMA_IRQHandler+0x988>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_DMA_IRQHandler+0x98a>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 823f 	beq.w	8003c1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2204      	movs	r2, #4
 80037ae:	409a      	lsls	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80cd 	beq.w	8003954 <HAL_DMA_IRQHandler+0xb48>
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80c7 	beq.w	8003954 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	2204      	movs	r2, #4
 80037d0:	409a      	lsls	r2, r3
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d049      	beq.n	8003874 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8210 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037fc:	e20a      	b.n	8003c14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8206 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003810:	e200      	b.n	8003c14 <HAL_DMA_IRQHandler+0xe08>
 8003812:	bf00      	nop
 8003814:	40020010 	.word	0x40020010
 8003818:	40020028 	.word	0x40020028
 800381c:	40020040 	.word	0x40020040
 8003820:	40020058 	.word	0x40020058
 8003824:	40020070 	.word	0x40020070
 8003828:	40020088 	.word	0x40020088
 800382c:	400200a0 	.word	0x400200a0
 8003830:	400200b8 	.word	0x400200b8
 8003834:	40020410 	.word	0x40020410
 8003838:	40020428 	.word	0x40020428
 800383c:	40020440 	.word	0x40020440
 8003840:	40020458 	.word	0x40020458
 8003844:	40020470 	.word	0x40020470
 8003848:	40020488 	.word	0x40020488
 800384c:	400204a0 	.word	0x400204a0
 8003850:	400204b8 	.word	0x400204b8
 8003854:	58025408 	.word	0x58025408
 8003858:	5802541c 	.word	0x5802541c
 800385c:	58025430 	.word	0x58025430
 8003860:	58025444 	.word	0x58025444
 8003864:	58025458 	.word	0x58025458
 8003868:	5802546c 	.word	0x5802546c
 800386c:	58025480 	.word	0x58025480
 8003870:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d160      	bne.n	8003940 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a8c      	ldr	r2, [pc, #560]	; (8003ab4 <HAL_DMA_IRQHandler+0xca8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d04a      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a8a      	ldr	r2, [pc, #552]	; (8003ab8 <HAL_DMA_IRQHandler+0xcac>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d045      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a89      	ldr	r2, [pc, #548]	; (8003abc <HAL_DMA_IRQHandler+0xcb0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d040      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a87      	ldr	r2, [pc, #540]	; (8003ac0 <HAL_DMA_IRQHandler+0xcb4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d03b      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a86      	ldr	r2, [pc, #536]	; (8003ac4 <HAL_DMA_IRQHandler+0xcb8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d036      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a84      	ldr	r2, [pc, #528]	; (8003ac8 <HAL_DMA_IRQHandler+0xcbc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d031      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a83      	ldr	r2, [pc, #524]	; (8003acc <HAL_DMA_IRQHandler+0xcc0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d02c      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a81      	ldr	r2, [pc, #516]	; (8003ad0 <HAL_DMA_IRQHandler+0xcc4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d027      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a80      	ldr	r2, [pc, #512]	; (8003ad4 <HAL_DMA_IRQHandler+0xcc8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d022      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a7e      	ldr	r2, [pc, #504]	; (8003ad8 <HAL_DMA_IRQHandler+0xccc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01d      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a7d      	ldr	r2, [pc, #500]	; (8003adc <HAL_DMA_IRQHandler+0xcd0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d018      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a7b      	ldr	r2, [pc, #492]	; (8003ae0 <HAL_DMA_IRQHandler+0xcd4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a7a      	ldr	r2, [pc, #488]	; (8003ae4 <HAL_DMA_IRQHandler+0xcd8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a78      	ldr	r2, [pc, #480]	; (8003ae8 <HAL_DMA_IRQHandler+0xcdc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a77      	ldr	r2, [pc, #476]	; (8003aec <HAL_DMA_IRQHandler+0xce0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_DMA_IRQHandler+0xb12>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a75      	ldr	r2, [pc, #468]	; (8003af0 <HAL_DMA_IRQHandler+0xce4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d108      	bne.n	8003930 <HAL_DMA_IRQHandler+0xb24>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0208 	bic.w	r2, r2, #8
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e007      	b.n	8003940 <HAL_DMA_IRQHandler+0xb34>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8165 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003952:	e15f      	b.n	8003c14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2202      	movs	r2, #2
 800395e:	409a      	lsls	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80c5 	beq.w	8003af4 <HAL_DMA_IRQHandler+0xce8>
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80bf 	beq.w	8003af4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2202      	movs	r2, #2
 8003980:	409a      	lsls	r2, r3
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d018      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 813a 	beq.w	8003c18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ac:	e134      	b.n	8003c18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8130 	beq.w	8003c18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c0:	e12a      	b.n	8003c18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d168      	bne.n	8003a9e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a38      	ldr	r2, [pc, #224]	; (8003ab4 <HAL_DMA_IRQHandler+0xca8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d04a      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a37      	ldr	r2, [pc, #220]	; (8003ab8 <HAL_DMA_IRQHandler+0xcac>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d045      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a35      	ldr	r2, [pc, #212]	; (8003abc <HAL_DMA_IRQHandler+0xcb0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d040      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a34      	ldr	r2, [pc, #208]	; (8003ac0 <HAL_DMA_IRQHandler+0xcb4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d03b      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a32      	ldr	r2, [pc, #200]	; (8003ac4 <HAL_DMA_IRQHandler+0xcb8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d036      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a31      	ldr	r2, [pc, #196]	; (8003ac8 <HAL_DMA_IRQHandler+0xcbc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d031      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2f      	ldr	r2, [pc, #188]	; (8003acc <HAL_DMA_IRQHandler+0xcc0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d02c      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2e      	ldr	r2, [pc, #184]	; (8003ad0 <HAL_DMA_IRQHandler+0xcc4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d027      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <HAL_DMA_IRQHandler+0xcc8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d022      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a2b      	ldr	r2, [pc, #172]	; (8003ad8 <HAL_DMA_IRQHandler+0xccc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d01d      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a29      	ldr	r2, [pc, #164]	; (8003adc <HAL_DMA_IRQHandler+0xcd0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d018      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a28      	ldr	r2, [pc, #160]	; (8003ae0 <HAL_DMA_IRQHandler+0xcd4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a26      	ldr	r2, [pc, #152]	; (8003ae4 <HAL_DMA_IRQHandler+0xcd8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a25      	ldr	r2, [pc, #148]	; (8003ae8 <HAL_DMA_IRQHandler+0xcdc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a23      	ldr	r2, [pc, #140]	; (8003aec <HAL_DMA_IRQHandler+0xce0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xc60>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a22      	ldr	r2, [pc, #136]	; (8003af0 <HAL_DMA_IRQHandler+0xce4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <HAL_DMA_IRQHandler+0xc72>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0214 	bic.w	r2, r2, #20
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e007      	b.n	8003a8e <HAL_DMA_IRQHandler+0xc82>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 020a 	bic.w	r2, r2, #10
 8003a8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80b8 	beq.w	8003c18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ab0:	e0b2      	b.n	8003c18 <HAL_DMA_IRQHandler+0xe0c>
 8003ab2:	bf00      	nop
 8003ab4:	40020010 	.word	0x40020010
 8003ab8:	40020028 	.word	0x40020028
 8003abc:	40020040 	.word	0x40020040
 8003ac0:	40020058 	.word	0x40020058
 8003ac4:	40020070 	.word	0x40020070
 8003ac8:	40020088 	.word	0x40020088
 8003acc:	400200a0 	.word	0x400200a0
 8003ad0:	400200b8 	.word	0x400200b8
 8003ad4:	40020410 	.word	0x40020410
 8003ad8:	40020428 	.word	0x40020428
 8003adc:	40020440 	.word	0x40020440
 8003ae0:	40020458 	.word	0x40020458
 8003ae4:	40020470 	.word	0x40020470
 8003ae8:	40020488 	.word	0x40020488
 8003aec:	400204a0 	.word	0x400204a0
 8003af0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2208      	movs	r2, #8
 8003afe:	409a      	lsls	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8088 	beq.w	8003c1a <HAL_DMA_IRQHandler+0xe0e>
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8082 	beq.w	8003c1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a41      	ldr	r2, [pc, #260]	; (8003c20 <HAL_DMA_IRQHandler+0xe14>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d04a      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a3f      	ldr	r2, [pc, #252]	; (8003c24 <HAL_DMA_IRQHandler+0xe18>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d045      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a3e      	ldr	r2, [pc, #248]	; (8003c28 <HAL_DMA_IRQHandler+0xe1c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d040      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a3c      	ldr	r2, [pc, #240]	; (8003c2c <HAL_DMA_IRQHandler+0xe20>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d03b      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a3b      	ldr	r2, [pc, #236]	; (8003c30 <HAL_DMA_IRQHandler+0xe24>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d036      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a39      	ldr	r2, [pc, #228]	; (8003c34 <HAL_DMA_IRQHandler+0xe28>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d031      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a38      	ldr	r2, [pc, #224]	; (8003c38 <HAL_DMA_IRQHandler+0xe2c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d02c      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a36      	ldr	r2, [pc, #216]	; (8003c3c <HAL_DMA_IRQHandler+0xe30>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d027      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a35      	ldr	r2, [pc, #212]	; (8003c40 <HAL_DMA_IRQHandler+0xe34>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d022      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a33      	ldr	r2, [pc, #204]	; (8003c44 <HAL_DMA_IRQHandler+0xe38>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01d      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a32      	ldr	r2, [pc, #200]	; (8003c48 <HAL_DMA_IRQHandler+0xe3c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d018      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a30      	ldr	r2, [pc, #192]	; (8003c4c <HAL_DMA_IRQHandler+0xe40>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2f      	ldr	r2, [pc, #188]	; (8003c50 <HAL_DMA_IRQHandler+0xe44>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <HAL_DMA_IRQHandler+0xe48>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <HAL_DMA_IRQHandler+0xe4c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xdaa>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2a      	ldr	r2, [pc, #168]	; (8003c5c <HAL_DMA_IRQHandler+0xe50>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d108      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0xdbc>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 021c 	bic.w	r2, r2, #28
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e007      	b.n	8003bd8 <HAL_DMA_IRQHandler+0xdcc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 020e 	bic.w	r2, r2, #14
 8003bd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
 8003c0e:	e004      	b.n	8003c1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c10:	bf00      	nop
 8003c12:	e002      	b.n	8003c1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c1a:	3728      	adds	r7, #40	; 0x28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40020010 	.word	0x40020010
 8003c24:	40020028 	.word	0x40020028
 8003c28:	40020040 	.word	0x40020040
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	40020070 	.word	0x40020070
 8003c34:	40020088 	.word	0x40020088
 8003c38:	400200a0 	.word	0x400200a0
 8003c3c:	400200b8 	.word	0x400200b8
 8003c40:	40020410 	.word	0x40020410
 8003c44:	40020428 	.word	0x40020428
 8003c48:	40020440 	.word	0x40020440
 8003c4c:	40020458 	.word	0x40020458
 8003c50:	40020470 	.word	0x40020470
 8003c54:	40020488 	.word	0x40020488
 8003c58:	400204a0 	.word	0x400204a0
 8003c5c:	400204b8 	.word	0x400204b8

08003c60 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c6e:	b2db      	uxtb	r3, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a42      	ldr	r2, [pc, #264]	; (8003d94 <DMA_CalcBaseAndBitshift+0x118>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d04a      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a41      	ldr	r2, [pc, #260]	; (8003d98 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d045      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a3f      	ldr	r2, [pc, #252]	; (8003d9c <DMA_CalcBaseAndBitshift+0x120>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d040      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a3e      	ldr	r2, [pc, #248]	; (8003da0 <DMA_CalcBaseAndBitshift+0x124>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d03b      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a3c      	ldr	r2, [pc, #240]	; (8003da4 <DMA_CalcBaseAndBitshift+0x128>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d036      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a3b      	ldr	r2, [pc, #236]	; (8003da8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d031      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a39      	ldr	r2, [pc, #228]	; (8003dac <DMA_CalcBaseAndBitshift+0x130>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02c      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a38      	ldr	r2, [pc, #224]	; (8003db0 <DMA_CalcBaseAndBitshift+0x134>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d027      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a36      	ldr	r2, [pc, #216]	; (8003db4 <DMA_CalcBaseAndBitshift+0x138>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d022      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a35      	ldr	r2, [pc, #212]	; (8003db8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01d      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a33      	ldr	r2, [pc, #204]	; (8003dbc <DMA_CalcBaseAndBitshift+0x140>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d018      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a32      	ldr	r2, [pc, #200]	; (8003dc0 <DMA_CalcBaseAndBitshift+0x144>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a30      	ldr	r2, [pc, #192]	; (8003dc4 <DMA_CalcBaseAndBitshift+0x148>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2f      	ldr	r2, [pc, #188]	; (8003dc8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a2d      	ldr	r2, [pc, #180]	; (8003dcc <DMA_CalcBaseAndBitshift+0x150>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <DMA_CalcBaseAndBitshift+0xa8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a2c      	ldr	r2, [pc, #176]	; (8003dd0 <DMA_CalcBaseAndBitshift+0x154>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <DMA_CalcBaseAndBitshift+0xac>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <DMA_CalcBaseAndBitshift+0xae>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d024      	beq.n	8003d78 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	3b10      	subs	r3, #16
 8003d36:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <DMA_CalcBaseAndBitshift+0x158>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	4a24      	ldr	r2, [pc, #144]	; (8003dd8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d48:	5cd3      	ldrb	r3, [r2, r3]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d908      	bls.n	8003d68 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <DMA_CalcBaseAndBitshift+0x160>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	1d1a      	adds	r2, r3, #4
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	659a      	str	r2, [r3, #88]	; 0x58
 8003d66:	e00d      	b.n	8003d84 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <DMA_CalcBaseAndBitshift+0x160>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6593      	str	r3, [r2, #88]	; 0x58
 8003d76:	e005      	b.n	8003d84 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	40020010 	.word	0x40020010
 8003d98:	40020028 	.word	0x40020028
 8003d9c:	40020040 	.word	0x40020040
 8003da0:	40020058 	.word	0x40020058
 8003da4:	40020070 	.word	0x40020070
 8003da8:	40020088 	.word	0x40020088
 8003dac:	400200a0 	.word	0x400200a0
 8003db0:	400200b8 	.word	0x400200b8
 8003db4:	40020410 	.word	0x40020410
 8003db8:	40020428 	.word	0x40020428
 8003dbc:	40020440 	.word	0x40020440
 8003dc0:	40020458 	.word	0x40020458
 8003dc4:	40020470 	.word	0x40020470
 8003dc8:	40020488 	.word	0x40020488
 8003dcc:	400204a0 	.word	0x400204a0
 8003dd0:	400204b8 	.word	0x400204b8
 8003dd4:	aaaaaaab 	.word	0xaaaaaaab
 8003dd8:	080127f4 	.word	0x080127f4
 8003ddc:	fffffc00 	.word	0xfffffc00

08003de0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d120      	bne.n	8003e36 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d858      	bhi.n	8003eae <DMA_CheckFifoParam+0xce>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <DMA_CheckFifoParam+0x24>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e15 	.word	0x08003e15
 8003e08:	08003e27 	.word	0x08003e27
 8003e0c:	08003e15 	.word	0x08003e15
 8003e10:	08003eaf 	.word	0x08003eaf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d048      	beq.n	8003eb2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e24:	e045      	b.n	8003eb2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e2e:	d142      	bne.n	8003eb6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e34:	e03f      	b.n	8003eb6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	d123      	bne.n	8003e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d838      	bhi.n	8003eba <DMA_CheckFifoParam+0xda>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <DMA_CheckFifoParam+0x70>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e67 	.word	0x08003e67
 8003e58:	08003e61 	.word	0x08003e61
 8003e5c:	08003e79 	.word	0x08003e79
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
        break;
 8003e64:	e030      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d025      	beq.n	8003ebe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e76:	e022      	b.n	8003ebe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e80:	d11f      	bne.n	8003ec2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e86:	e01c      	b.n	8003ec2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d902      	bls.n	8003e96 <DMA_CheckFifoParam+0xb6>
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d003      	beq.n	8003e9c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e94:	e018      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
        break;
 8003e9a:	e015      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00e      	beq.n	8003ec6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8003eac:	e00b      	b.n	8003ec6 <DMA_CheckFifoParam+0xe6>
        break;
 8003eae:	bf00      	nop
 8003eb0:	e00a      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
        break;
 8003eb2:	bf00      	nop
 8003eb4:	e008      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
        break;
 8003eb6:	bf00      	nop
 8003eb8:	e006      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
        break;
 8003eba:	bf00      	nop
 8003ebc:	e004      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
        break;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
        break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
    break;
 8003ec6:	bf00      	nop
    }
  }

  return status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop

08003ed8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a38      	ldr	r2, [pc, #224]	; (8003fcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d022      	beq.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a36      	ldr	r2, [pc, #216]	; (8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01d      	beq.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a35      	ldr	r2, [pc, #212]	; (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d018      	beq.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a33      	ldr	r2, [pc, #204]	; (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a30      	ldr	r2, [pc, #192]	; (8003fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d009      	beq.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01a      	beq.n	8003f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	3b08      	subs	r3, #8
 8003f48:	4a28      	ldr	r2, [pc, #160]	; (8003fec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a24      	ldr	r2, [pc, #144]	; (8003ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f74:	e024      	b.n	8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3b10      	subs	r3, #16
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d806      	bhi.n	8003f9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d902      	bls.n	8003f9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4b18      	ldr	r3, [pc, #96]	; (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a16      	ldr	r2, [pc, #88]	; (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003fb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2201      	movs	r2, #1
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	58025408 	.word	0x58025408
 8003fd0:	5802541c 	.word	0x5802541c
 8003fd4:	58025430 	.word	0x58025430
 8003fd8:	58025444 	.word	0x58025444
 8003fdc:	58025458 	.word	0x58025458
 8003fe0:	5802546c 	.word	0x5802546c
 8003fe4:	58025480 	.word	0x58025480
 8003fe8:	58025494 	.word	0x58025494
 8003fec:	cccccccd 	.word	0xcccccccd
 8003ff0:	16009600 	.word	0x16009600
 8003ff4:	58025880 	.word	0x58025880
 8003ff8:	aaaaaaab 	.word	0xaaaaaaab
 8003ffc:	400204b8 	.word	0x400204b8
 8004000:	4002040f 	.word	0x4002040f
 8004004:	10008200 	.word	0x10008200
 8004008:	40020880 	.word	0x40020880

0800400c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d04a      	beq.n	80040b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d847      	bhi.n	80040b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d01d      	beq.n	8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a22      	ldr	r2, [pc, #136]	; (80040cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d101      	bne.n	800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800407c:	2300      	movs	r3, #0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	461a      	mov	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004094:	671a      	str	r2, [r3, #112]	; 0x70
 8004096:	e009      	b.n	80040ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	461a      	mov	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a11      	ldr	r2, [pc, #68]	; (80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80040aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	2201      	movs	r2, #1
 80040b2:	409a      	lsls	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80040b8:	bf00      	nop
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	58025408 	.word	0x58025408
 80040c8:	5802541c 	.word	0x5802541c
 80040cc:	58025430 	.word	0x58025430
 80040d0:	58025444 	.word	0x58025444
 80040d4:	58025458 	.word	0x58025458
 80040d8:	5802546c 	.word	0x5802546c
 80040dc:	58025480 	.word	0x58025480
 80040e0:	58025494 	.word	0x58025494
 80040e4:	1600963f 	.word	0x1600963f
 80040e8:	58025940 	.word	0x58025940
 80040ec:	1000823f 	.word	0x1000823f
 80040f0:	40020940 	.word	0x40020940

080040f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	; 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004102:	4b89      	ldr	r3, [pc, #548]	; (8004328 <HAL_GPIO_Init+0x234>)
 8004104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004106:	e194      	b.n	8004432 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2101      	movs	r1, #1
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8186 	beq.w	800442c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d00b      	beq.n	8004140 <HAL_GPIO_Init+0x4c>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d007      	beq.n	8004140 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004134:	2b11      	cmp	r3, #17
 8004136:	d003      	beq.n	8004140 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b12      	cmp	r3, #18
 800413e:	d130      	bne.n	80041a2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2203      	movs	r2, #3
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004176:	2201      	movs	r2, #1
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	f003 0201 	and.w	r2, r3, #1
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	2203      	movs	r2, #3
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d003      	beq.n	80041e2 <HAL_GPIO_Init+0xee>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b12      	cmp	r3, #18
 80041e0:	d123      	bne.n	800422a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	08da      	lsrs	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3208      	adds	r2, #8
 80041ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	08da      	lsrs	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3208      	adds	r2, #8
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0203 	and.w	r2, r3, #3
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80e0 	beq.w	800442c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426c:	4b2f      	ldr	r3, [pc, #188]	; (800432c <HAL_GPIO_Init+0x238>)
 800426e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004272:	4a2e      	ldr	r2, [pc, #184]	; (800432c <HAL_GPIO_Init+0x238>)
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800427c:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_GPIO_Init+0x238>)
 800427e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800428a:	4a29      	ldr	r2, [pc, #164]	; (8004330 <HAL_GPIO_Init+0x23c>)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	3302      	adds	r3, #2
 8004292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	220f      	movs	r2, #15
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a20      	ldr	r2, [pc, #128]	; (8004334 <HAL_GPIO_Init+0x240>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d052      	beq.n	800435c <HAL_GPIO_Init+0x268>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_GPIO_Init+0x244>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d031      	beq.n	8004322 <HAL_GPIO_Init+0x22e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1e      	ldr	r2, [pc, #120]	; (800433c <HAL_GPIO_Init+0x248>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d02b      	beq.n	800431e <HAL_GPIO_Init+0x22a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <HAL_GPIO_Init+0x24c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d025      	beq.n	800431a <HAL_GPIO_Init+0x226>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <HAL_GPIO_Init+0x250>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01f      	beq.n	8004316 <HAL_GPIO_Init+0x222>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_GPIO_Init+0x254>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d019      	beq.n	8004312 <HAL_GPIO_Init+0x21e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_GPIO_Init+0x258>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_GPIO_Init+0x21a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a19      	ldr	r2, [pc, #100]	; (8004350 <HAL_GPIO_Init+0x25c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00d      	beq.n	800430a <HAL_GPIO_Init+0x216>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a18      	ldr	r2, [pc, #96]	; (8004354 <HAL_GPIO_Init+0x260>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <HAL_GPIO_Init+0x212>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a17      	ldr	r2, [pc, #92]	; (8004358 <HAL_GPIO_Init+0x264>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <HAL_GPIO_Init+0x20e>
 80042fe:	2309      	movs	r3, #9
 8004300:	e02d      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004302:	230a      	movs	r3, #10
 8004304:	e02b      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004306:	2308      	movs	r3, #8
 8004308:	e029      	b.n	800435e <HAL_GPIO_Init+0x26a>
 800430a:	2307      	movs	r3, #7
 800430c:	e027      	b.n	800435e <HAL_GPIO_Init+0x26a>
 800430e:	2306      	movs	r3, #6
 8004310:	e025      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004312:	2305      	movs	r3, #5
 8004314:	e023      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004316:	2304      	movs	r3, #4
 8004318:	e021      	b.n	800435e <HAL_GPIO_Init+0x26a>
 800431a:	2303      	movs	r3, #3
 800431c:	e01f      	b.n	800435e <HAL_GPIO_Init+0x26a>
 800431e:	2302      	movs	r3, #2
 8004320:	e01d      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004322:	2301      	movs	r3, #1
 8004324:	e01b      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004326:	bf00      	nop
 8004328:	58000080 	.word	0x58000080
 800432c:	58024400 	.word	0x58024400
 8004330:	58000400 	.word	0x58000400
 8004334:	58020000 	.word	0x58020000
 8004338:	58020400 	.word	0x58020400
 800433c:	58020800 	.word	0x58020800
 8004340:	58020c00 	.word	0x58020c00
 8004344:	58021000 	.word	0x58021000
 8004348:	58021400 	.word	0x58021400
 800434c:	58021800 	.word	0x58021800
 8004350:	58021c00 	.word	0x58021c00
 8004354:	58022000 	.word	0x58022000
 8004358:	58022400 	.word	0x58022400
 800435c:	2300      	movs	r3, #0
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	f002 0203 	and.w	r2, r2, #3
 8004364:	0092      	lsls	r2, r2, #2
 8004366:	4093      	lsls	r3, r2
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800436e:	4938      	ldr	r1, [pc, #224]	; (8004450 <HAL_GPIO_Init+0x35c>)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	3301      	adds	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	f47f ae63 	bne.w	8004108 <HAL_GPIO_Init+0x14>
  }
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	3724      	adds	r7, #36	; 0x24
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	58000400 	.word	0x58000400

08004454 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800445c:	4a08      	ldr	r2, [pc, #32]	; (8004480 <HAL_HSEM_FastTake+0x2c>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3320      	adds	r3, #32
 8004462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004466:	4a07      	ldr	r2, [pc, #28]	; (8004484 <HAL_HSEM_FastTake+0x30>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d101      	bne.n	8004470 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e000      	b.n	8004472 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	58026400 	.word	0x58026400
 8004484:	80000300 	.word	0x80000300

08004488 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004492:	4906      	ldr	r1, [pc, #24]	; (80044ac <HAL_HSEM_Release+0x24>)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	58026400 	.word	0x58026400

080044b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07f      	b.n	80045c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fa00 	bl	80008dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004510:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d107      	bne.n	800452a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	e006      	b.n	8004538 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004536:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d104      	bne.n	800454a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004548:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6859      	ldr	r1, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_I2C_Init+0x11c>)
 8004556:	430b      	orrs	r3, r1
 8004558:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004568:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	ea42 0103 	orr.w	r1, r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	021a      	lsls	r2, r3, #8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69d9      	ldr	r1, [r3, #28]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	02008000 	.word	0x02008000

080045d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	68f9      	ldr	r1, [r7, #12]
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
  }
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d010      	beq.n	800464a <HAL_I2C_ER_IRQHandler+0x46>
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	09db      	lsrs	r3, r3, #7
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004648:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	0a9b      	lsrs	r3, r3, #10
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d010      	beq.n	8004678 <HAL_I2C_ER_IRQHandler+0x74>
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	09db      	lsrs	r3, r3, #7
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f043 0208 	orr.w	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004676:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	0a5b      	lsrs	r3, r3, #9
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d010      	beq.n	80046a6 <HAL_I2C_ER_IRQHandler+0xa2>
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	09db      	lsrs	r3, r3, #7
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	f043 0202 	orr.w	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 030b 	and.w	r3, r3, #11
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fc77 	bl	8004fac <I2C_ITError>
  }
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	460b      	mov	r3, r1
 80046f8:	70fb      	strb	r3, [r7, #3]
 80046fa:	4613      	mov	r3, r2
 80046fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <I2C_Slave_ISR_IT+0x24>
 8004766:	2302      	movs	r3, #2
 8004768:	e0ec      	b.n	8004944 <I2C_Slave_ISR_IT+0x1fe>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <I2C_Slave_ISR_IT+0x4c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800478a:	6939      	ldr	r1, [r7, #16]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f9bf 	bl	8004b10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d04d      	beq.n	800483a <I2C_Slave_ISR_IT+0xf4>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d047      	beq.n	800483a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d128      	bne.n	8004806 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b28      	cmp	r3, #40	; 0x28
 80047be:	d108      	bne.n	80047d2 <I2C_Slave_ISR_IT+0x8c>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c6:	d104      	bne.n	80047d2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80047c8:	6939      	ldr	r1, [r7, #16]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fb98 	bl	8004f00 <I2C_ITListenCplt>
 80047d0:	e032      	b.n	8004838 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b29      	cmp	r3, #41	; 0x29
 80047dc:	d10e      	bne.n	80047fc <I2C_Slave_ISR_IT+0xb6>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047e4:	d00a      	beq.n	80047fc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2210      	movs	r2, #16
 80047ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fcd3 	bl	800519a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f92d 	bl	8004a54 <I2C_ITSlaveSeqCplt>
 80047fa:	e01d      	b.n	8004838 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2210      	movs	r2, #16
 8004802:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004804:	e096      	b.n	8004934 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2210      	movs	r2, #16
 800480c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f043 0204 	orr.w	r2, r3, #4
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <I2C_Slave_ISR_IT+0xe4>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004826:	f040 8085 	bne.w	8004934 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	4619      	mov	r1, r3
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fbbb 	bl	8004fac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004836:	e07d      	b.n	8004934 <I2C_Slave_ISR_IT+0x1ee>
 8004838:	e07c      	b.n	8004934 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d030      	beq.n	80048a8 <I2C_Slave_ISR_IT+0x162>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d02a      	beq.n	80048a8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d018      	beq.n	800488e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d14f      	bne.n	8004938 <I2C_Slave_ISR_IT+0x1f2>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800489e:	d04b      	beq.n	8004938 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f8d7 	bl	8004a54 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80048a6:	e047      	b.n	8004938 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	08db      	lsrs	r3, r3, #3
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	08db      	lsrs	r3, r3, #3
 80048b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80048c0:	6939      	ldr	r1, [r7, #16]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f842 	bl	800494c <I2C_ITAddrCplt>
 80048c8:	e037      	b.n	800493a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d031      	beq.n	800493a <I2C_Slave_ISR_IT+0x1f4>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d02b      	beq.n	800493a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d018      	beq.n	800491e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
 800491c:	e00d      	b.n	800493a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004924:	d002      	beq.n	800492c <I2C_Slave_ISR_IT+0x1e6>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f891 	bl	8004a54 <I2C_ITSlaveSeqCplt>
 8004932:	e002      	b.n	800493a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004934:	bf00      	nop
 8004936:	e000      	b.n	800493a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004938:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004962:	2b28      	cmp	r3, #40	; 0x28
 8004964:	d16a      	bne.n	8004a3c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	b29b      	uxth	r3, r3
 8004980:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004984:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004992:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80049a0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d138      	bne.n	8004a1c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80049aa:	897b      	ldrh	r3, [r7, #10]
 80049ac:	09db      	lsrs	r3, r3, #7
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	89bb      	ldrh	r3, [r7, #12]
 80049b2:	4053      	eors	r3, r2
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f003 0306 	and.w	r3, r3, #6
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d11c      	bne.n	80049f8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d13b      	bne.n	8004a4c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2208      	movs	r2, #8
 80049e0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80049ea:	89ba      	ldrh	r2, [r7, #12]
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fe7c 	bl	80046ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049f6:	e029      	b.n	8004a4c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80049f8:	893b      	ldrh	r3, [r7, #8]
 80049fa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80049fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fc0c 	bl	800521e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a0e:	89ba      	ldrh	r2, [r7, #12]
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	4619      	mov	r1, r3
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff fe6a 	bl	80046ee <HAL_I2C_AddrCallback>
}
 8004a1a:	e017      	b.n	8004a4c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fbfc 	bl	800521e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a2e:	89ba      	ldrh	r2, [r7, #12]
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff fe5a 	bl	80046ee <HAL_I2C_AddrCallback>
}
 8004a3a:	e007      	b.n	8004a4c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2208      	movs	r2, #8
 8004a42:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	0b9b      	lsrs	r3, r3, #14
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e00d      	b.n	8004aa6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	0bdb      	lsrs	r3, r3, #15
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b29      	cmp	r3, #41	; 0x29
 8004ab0:	d112      	bne.n	8004ad8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2228      	movs	r2, #40	; 0x28
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2221      	movs	r2, #33	; 0x21
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fbab 	bl	800521e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff fdf8 	bl	80046c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ad6:	e017      	b.n	8004b08 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae2:	d111      	bne.n	8004b08 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2228      	movs	r2, #40	; 0x28
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2222      	movs	r2, #34	; 0x22
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004af2:	2102      	movs	r1, #2
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fb92 	bl	800521e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff fde9 	bl	80046da <HAL_I2C_SlaveRxCpltCallback>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2220      	movs	r2, #32
 8004b34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b21      	cmp	r3, #33	; 0x21
 8004b3a:	d002      	beq.n	8004b42 <I2C_ITSlaveCplt+0x32>
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b29      	cmp	r3, #41	; 0x29
 8004b40:	d108      	bne.n	8004b54 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004b42:	f248 0101 	movw	r1, #32769	; 0x8001
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fb69 	bl	800521e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2221      	movs	r2, #33	; 0x21
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
 8004b52:	e00d      	b.n	8004b70 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b22      	cmp	r3, #34	; 0x22
 8004b58:	d002      	beq.n	8004b60 <I2C_ITSlaveCplt+0x50>
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b5e:	d107      	bne.n	8004b70 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004b60:	f248 0102 	movw	r1, #32770	; 0x8002
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fb5a 	bl	800521e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2222      	movs	r2, #34	; 0x22
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b7e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6859      	ldr	r1, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b80      	ldr	r3, [pc, #512]	; (8004d8c <I2C_ITSlaveCplt+0x27c>)
 8004b8c:	400b      	ands	r3, r1
 8004b8e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fb02 	bl	800519a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	0b9b      	lsrs	r3, r3, #14
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d07a      	beq.n	8004c98 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bb0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8111 	beq.w	8004dde <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a73      	ldr	r2, [pc, #460]	; (8004d90 <I2C_ITSlaveCplt+0x280>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d059      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a71      	ldr	r2, [pc, #452]	; (8004d94 <I2C_ITSlaveCplt+0x284>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d053      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6f      	ldr	r2, [pc, #444]	; (8004d98 <I2C_ITSlaveCplt+0x288>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d04d      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a6d      	ldr	r2, [pc, #436]	; (8004d9c <I2C_ITSlaveCplt+0x28c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d047      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a6b      	ldr	r2, [pc, #428]	; (8004da0 <I2C_ITSlaveCplt+0x290>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d041      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a69      	ldr	r2, [pc, #420]	; (8004da4 <I2C_ITSlaveCplt+0x294>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d03b      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a67      	ldr	r2, [pc, #412]	; (8004da8 <I2C_ITSlaveCplt+0x298>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d035      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a65      	ldr	r2, [pc, #404]	; (8004dac <I2C_ITSlaveCplt+0x29c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d02f      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a63      	ldr	r2, [pc, #396]	; (8004db0 <I2C_ITSlaveCplt+0x2a0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d029      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a61      	ldr	r2, [pc, #388]	; (8004db4 <I2C_ITSlaveCplt+0x2a4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d023      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a5f      	ldr	r2, [pc, #380]	; (8004db8 <I2C_ITSlaveCplt+0x2a8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d01d      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5d      	ldr	r2, [pc, #372]	; (8004dbc <I2C_ITSlaveCplt+0x2ac>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d017      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a5b      	ldr	r2, [pc, #364]	; (8004dc0 <I2C_ITSlaveCplt+0x2b0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d011      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a59      	ldr	r2, [pc, #356]	; (8004dc4 <I2C_ITSlaveCplt+0x2b4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00b      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a57      	ldr	r2, [pc, #348]	; (8004dc8 <I2C_ITSlaveCplt+0x2b8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d005      	beq.n	8004c7c <I2C_ITSlaveCplt+0x16c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a55      	ldr	r2, [pc, #340]	; (8004dcc <I2C_ITSlaveCplt+0x2bc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d105      	bne.n	8004c88 <I2C_ITSlaveCplt+0x178>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	e004      	b.n	8004c92 <I2C_ITSlaveCplt+0x182>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	8553      	strh	r3, [r2, #42]	; 0x2a
 8004c96:	e0a2      	b.n	8004dde <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	0bdb      	lsrs	r3, r3, #15
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 809c 	beq.w	8004dde <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cb4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 808f 	beq.w	8004dde <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a32      	ldr	r2, [pc, #200]	; (8004d90 <I2C_ITSlaveCplt+0x280>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d059      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a30      	ldr	r2, [pc, #192]	; (8004d94 <I2C_ITSlaveCplt+0x284>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d053      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2e      	ldr	r2, [pc, #184]	; (8004d98 <I2C_ITSlaveCplt+0x288>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d04d      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <I2C_ITSlaveCplt+0x28c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d047      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <I2C_ITSlaveCplt+0x290>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d041      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <I2C_ITSlaveCplt+0x294>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d03b      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <I2C_ITSlaveCplt+0x298>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d035      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a24      	ldr	r2, [pc, #144]	; (8004dac <I2C_ITSlaveCplt+0x29c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d02f      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <I2C_ITSlaveCplt+0x2a0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d029      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a20      	ldr	r2, [pc, #128]	; (8004db4 <I2C_ITSlaveCplt+0x2a4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d023      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <I2C_ITSlaveCplt+0x2a8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01d      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <I2C_ITSlaveCplt+0x2ac>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d017      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1a      	ldr	r2, [pc, #104]	; (8004dc0 <I2C_ITSlaveCplt+0x2b0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d011      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <I2C_ITSlaveCplt+0x2b4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <I2C_ITSlaveCplt+0x2b8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d005      	beq.n	8004d80 <I2C_ITSlaveCplt+0x270>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a14      	ldr	r2, [pc, #80]	; (8004dcc <I2C_ITSlaveCplt+0x2bc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d127      	bne.n	8004dd0 <I2C_ITSlaveCplt+0x2c0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	e026      	b.n	8004dda <I2C_ITSlaveCplt+0x2ca>
 8004d8c:	fe00e800 	.word	0xfe00e800
 8004d90:	40020010 	.word	0x40020010
 8004d94:	40020028 	.word	0x40020028
 8004d98:	40020040 	.word	0x40020040
 8004d9c:	40020058 	.word	0x40020058
 8004da0:	40020070 	.word	0x40020070
 8004da4:	40020088 	.word	0x40020088
 8004da8:	400200a0 	.word	0x400200a0
 8004dac:	400200b8 	.word	0x400200b8
 8004db0:	40020410 	.word	0x40020410
 8004db4:	40020428 	.word	0x40020428
 8004db8:	40020440 	.word	0x40020440
 8004dbc:	40020458 	.word	0x40020458
 8004dc0:	40020470 	.word	0x40020470
 8004dc4:	40020488 	.word	0x40020488
 8004dc8:	400204a0 	.word	0x400204a0
 8004dcc:	400204b8 	.word	0x400204b8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	089b      	lsrs	r3, r3, #2
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d020      	beq.n	8004e2c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00c      	beq.n	8004e2c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	f043 0204 	orr.w	r2, r3, #4
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d010      	beq.n	8004e7a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8a4 	bl	8004fac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b28      	cmp	r3, #40	; 0x28
 8004e6e:	d141      	bne.n	8004ef4 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004e70:	6979      	ldr	r1, [r7, #20]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f844 	bl	8004f00 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e78:	e03c      	b.n	8004ef4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e82:	d014      	beq.n	8004eae <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fde5 	bl	8004a54 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1b      	ldr	r2, [pc, #108]	; (8004efc <I2C_ITSlaveCplt+0x3ec>)
 8004e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fc2f 	bl	800470a <HAL_I2C_ListenCpltCallback>
}
 8004eac:	e022      	b.n	8004ef4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b22      	cmp	r3, #34	; 0x22
 8004eb8:	d10e      	bne.n	8004ed8 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fc02 	bl	80046da <HAL_I2C_SlaveRxCpltCallback>
}
 8004ed6:	e00d      	b.n	8004ef4 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff fbe9 	bl	80046c6 <HAL_I2C_SlaveTxCpltCallback>
}
 8004ef4:	bf00      	nop
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	ffff0000 	.word	0xffff0000

08004f00 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <I2C_ITListenCplt+0xa8>)
 8004f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	089b      	lsrs	r3, r3, #2
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d022      	beq.n	8004f7e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d012      	beq.n	8004f7e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f043 0204 	orr.w	r2, r3, #4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f7e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f94b 	bl	800521e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fbb6 	bl	800470a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	ffff0000 	.word	0xffff0000

08004fac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a5d      	ldr	r2, [pc, #372]	; (8005140 <I2C_ITError+0x194>)
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	2b28      	cmp	r3, #40	; 0x28
 8004fe2:	d005      	beq.n	8004ff0 <I2C_ITError+0x44>
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b29      	cmp	r3, #41	; 0x29
 8004fe8:	d002      	beq.n	8004ff0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b2a      	cmp	r3, #42	; 0x2a
 8004fee:	d10b      	bne.n	8005008 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ff0:	2103      	movs	r1, #3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f913 	bl	800521e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2228      	movs	r2, #40	; 0x28
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a50      	ldr	r2, [pc, #320]	; (8005144 <I2C_ITError+0x198>)
 8005004:	635a      	str	r2, [r3, #52]	; 0x34
 8005006:	e011      	b.n	800502c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005008:	f248 0103 	movw	r1, #32771	; 0x8003
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f906 	bl	800521e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b60      	cmp	r3, #96	; 0x60
 800501c:	d003      	beq.n	8005026 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	2b00      	cmp	r3, #0
 8005038:	d039      	beq.n	80050ae <I2C_ITError+0x102>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b11      	cmp	r3, #17
 800503e:	d002      	beq.n	8005046 <I2C_ITError+0x9a>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b21      	cmp	r3, #33	; 0x21
 8005044:	d133      	bne.n	80050ae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005054:	d107      	bne.n	8005066 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005064:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe fdf8 	bl	8003c60 <HAL_DMA_GetState>
 8005070:	4603      	mov	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d017      	beq.n	80050a6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	4a33      	ldr	r2, [pc, #204]	; (8005148 <I2C_ITError+0x19c>)
 800507c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	4618      	mov	r0, r3
 800508c:	f7fd fc7a 	bl	8002984 <HAL_DMA_Abort_IT>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d04d      	beq.n	8005132 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050a0:	4610      	mov	r0, r2
 80050a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050a4:	e045      	b.n	8005132 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f850 	bl	800514c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ac:	e041      	b.n	8005132 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d039      	beq.n	800512a <I2C_ITError+0x17e>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b12      	cmp	r3, #18
 80050ba:	d002      	beq.n	80050c2 <I2C_ITError+0x116>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b22      	cmp	r3, #34	; 0x22
 80050c0:	d133      	bne.n	800512a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d0:	d107      	bne.n	80050e2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fdba 	bl	8003c60 <HAL_DMA_GetState>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d017      	beq.n	8005122 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	4a14      	ldr	r2, [pc, #80]	; (8005148 <I2C_ITError+0x19c>)
 80050f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	4618      	mov	r0, r3
 8005108:	f7fd fc3c 	bl	8002984 <HAL_DMA_Abort_IT>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d011      	beq.n	8005136 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800511c:	4610      	mov	r0, r2
 800511e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005120:	e009      	b.n	8005136 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f812 	bl	800514c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005128:	e005      	b.n	8005136 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f80e 	bl	800514c <I2C_TreatErrorCallback>
  }
}
 8005130:	e002      	b.n	8005138 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005136:	bf00      	nop
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	ffff0000 	.word	0xffff0000
 8005144:	08004747 	.word	0x08004747
 8005148:	080051e3 	.word	0x080051e3

0800514c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b60      	cmp	r3, #96	; 0x60
 800515e:	d10e      	bne.n	800517e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff fadb 	bl	8004732 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800517c:	e009      	b.n	8005192 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff fac6 	bl	800471e <HAL_I2C_ErrorCallback>
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d103      	bne.n	80051b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2200      	movs	r2, #0
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d007      	beq.n	80051d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	619a      	str	r2, [r3, #24]
  }
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	2200      	movs	r2, #0
 80051fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	2200      	movs	r2, #0
 800520e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7ff ff9b 	bl	800514c <I2C_TreatErrorCallback>
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800522e:	887b      	ldrh	r3, [r7, #2]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00f      	beq.n	8005258 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800523e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800524c:	2b28      	cmp	r3, #40	; 0x28
 800524e:	d003      	beq.n	8005258 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005256:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00f      	beq.n	8005282 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005268:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005276:	2b28      	cmp	r3, #40	; 0x28
 8005278:	d003      	beq.n	8005282 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005280:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005282:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005286:	2b00      	cmp	r3, #0
 8005288:	da03      	bge.n	8005292 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005290:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005292:	887b      	ldrh	r3, [r7, #2]
 8005294:	2b10      	cmp	r3, #16
 8005296:	d103      	bne.n	80052a0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800529e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052a0:	887b      	ldrh	r3, [r7, #2]
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d103      	bne.n	80052ae <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f043 0320 	orr.w	r3, r3, #32
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80052ae:	887b      	ldrh	r3, [r7, #2]
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d103      	bne.n	80052bc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6819      	ldr	r1, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	43da      	mvns	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	400a      	ands	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d138      	bne.n	8005362 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e032      	b.n	8005364 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2224      	movs	r2, #36	; 0x24
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800532c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6819      	ldr	r1, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b20      	cmp	r3, #32
 8005384:	d139      	bne.n	80053fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005390:	2302      	movs	r3, #2
 8005392:	e033      	b.n	80053fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2224      	movs	r2, #36	; 0x24
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0201 	bic.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e000      	b.n	80053fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053fa:	2302      	movs	r3, #2
  }
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540a:	b08f      	sub	sp, #60	; 0x3c
 800540c:	af0a      	add	r7, sp, #40	; 0x28
 800540e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e116      	b.n	8005648 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f00c fe43 	bl	80120c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2203      	movs	r2, #3
 800543e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f009 fb16 	bl	800ea8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	687e      	ldr	r6, [r7, #4]
 8005466:	466d      	mov	r5, sp
 8005468:	f106 0410 	add.w	r4, r6, #16
 800546c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800546e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005478:	e885 0003 	stmia.w	r5, {r0, r1}
 800547c:	1d33      	adds	r3, r6, #4
 800547e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005480:	6838      	ldr	r0, [r7, #0]
 8005482:	f009 f9e1 	bl	800e848 <USB_CoreInit>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0d7      	b.n	8005648 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f009 fb04 	bl	800eaac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054a4:	2300      	movs	r3, #0
 80054a6:	73fb      	strb	r3, [r7, #15]
 80054a8:	e04a      	b.n	8005540 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	333d      	adds	r3, #61	; 0x3d
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80054be:	7bfa      	ldrb	r2, [r7, #15]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	333c      	adds	r3, #60	; 0x3c
 80054ce:	7bfa      	ldrb	r2, [r7, #15]
 80054d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054d2:	7bfa      	ldrb	r2, [r7, #15]
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	b298      	uxth	r0, r3
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	4613      	mov	r3, r2
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	3342      	adds	r3, #66	; 0x42
 80054e6:	4602      	mov	r2, r0
 80054e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054ea:	7bfa      	ldrb	r2, [r7, #15]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	333f      	adds	r3, #63	; 0x3f
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054fe:	7bfa      	ldrb	r2, [r7, #15]
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	3344      	adds	r3, #68	; 0x44
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005512:	7bfa      	ldrb	r2, [r7, #15]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	3348      	adds	r3, #72	; 0x48
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005526:	7bfa      	ldrb	r2, [r7, #15]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	3350      	adds	r3, #80	; 0x50
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	3301      	adds	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
 8005540:	7bfa      	ldrb	r2, [r7, #15]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d3af      	bcc.n	80054aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
 800554e:	e044      	b.n	80055da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005550:	7bfa      	ldrb	r2, [r7, #15]
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005562:	2200      	movs	r2, #0
 8005564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005566:	7bfa      	ldrb	r2, [r7, #15]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005578:	7bfa      	ldrb	r2, [r7, #15]
 800557a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800557c:	7bfa      	ldrb	r2, [r7, #15]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005592:	7bfa      	ldrb	r2, [r7, #15]
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055a8:	7bfa      	ldrb	r2, [r7, #15]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80055be:	7bfa      	ldrb	r2, [r7, #15]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	3301      	adds	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	7bfa      	ldrb	r2, [r7, #15]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d3b5      	bcc.n	8005550 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	687e      	ldr	r6, [r7, #4]
 80055ec:	466d      	mov	r5, sp
 80055ee:	f106 0410 	add.w	r4, r6, #16
 80055f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005602:	1d33      	adds	r3, r6, #4
 8005604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005606:	6838      	ldr	r0, [r7, #0]
 8005608:	f009 fa7a 	bl	800eb00 <USB_DevInit>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e014      	b.n	8005648 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	2b01      	cmp	r3, #1
 8005634:	d102      	bne.n	800563c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f001 f892 	bl	8006760 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f00a fafa 	bl	800fc3a <USB_DevDisconnect>

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005650 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_PCD_Start+0x1c>
 8005668:	2302      	movs	r3, #2
 800566a:	e020      	b.n	80056ae <HAL_PCD_Start+0x5e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	2b01      	cmp	r3, #1
 800567a:	d109      	bne.n	8005690 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005680:	2b01      	cmp	r3, #1
 8005682:	d005      	beq.n	8005690 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f009 f9e7 	bl	800ea68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f00a faaa 	bl	800fbf8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b08d      	sub	sp, #52	; 0x34
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f00a fb68 	bl	800fda2 <USB_GetMode>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f040 83ca 	bne.w	8005e6e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f00a facc 	bl	800fc7c <USB_ReadInterrupts>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 83c0 	beq.w	8005e6c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f00a fac3 	bl	800fc7c <USB_ReadInterrupts>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d107      	bne.n	8005710 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f002 0202 	and.w	r2, r2, #2
 800570e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f00a fab1 	bl	800fc7c <USB_ReadInterrupts>
 800571a:	4603      	mov	r3, r0
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b10      	cmp	r3, #16
 8005722:	d161      	bne.n	80057e8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0210 	bic.w	r2, r2, #16
 8005732:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f003 020f 	and.w	r2, r3, #15
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4413      	add	r3, r2
 8005750:	3304      	adds	r3, #4
 8005752:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	0c5b      	lsrs	r3, r3, #17
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	2b02      	cmp	r3, #2
 800575e:	d124      	bne.n	80057aa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005766:	4013      	ands	r3, r2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d035      	beq.n	80057d8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800577a:	b29b      	uxth	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	6a38      	ldr	r0, [r7, #32]
 8005780:	f00a f8e8 	bl	800f954 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005790:	441a      	add	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057a2:	441a      	add	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	619a      	str	r2, [r3, #24]
 80057a8:	e016      	b.n	80057d8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	0c5b      	lsrs	r3, r3, #17
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d110      	bne.n	80057d8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057bc:	2208      	movs	r2, #8
 80057be:	4619      	mov	r1, r3
 80057c0:	6a38      	ldr	r0, [r7, #32]
 80057c2:	f00a f8c7 	bl	800f954 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d2:	441a      	add	r2, r3
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0210 	orr.w	r2, r2, #16
 80057e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f00a fa45 	bl	800fc7c <USB_ReadInterrupts>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057fc:	d16e      	bne.n	80058dc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f00a fa4b 	bl	800fca2 <USB_ReadDevAllOutEpInterrupt>
 800580c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800580e:	e062      	b.n	80058d6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d057      	beq.n	80058ca <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f00a fa70 	bl	800fd0a <USB_ReadDevOutEPInterrupt>
 800582a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00c      	beq.n	8005850 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	461a      	mov	r2, r3
 8005844:	2301      	movs	r3, #1
 8005846:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fdde 	bl	800640c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00c      	beq.n	8005874 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005866:	461a      	mov	r2, r3
 8005868:	2308      	movs	r3, #8
 800586a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800586c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fed8 	bl	8006624 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f003 0310 	and.w	r3, r3, #16
 800587a:	2b00      	cmp	r3, #0
 800587c:	d008      	beq.n	8005890 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588a:	461a      	mov	r2, r3
 800588c:	2310      	movs	r3, #16
 800588e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	461a      	mov	r2, r3
 80058a8:	2320      	movs	r3, #32
 80058aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c2:	461a      	mov	r2, r3
 80058c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	3301      	adds	r3, #1
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d199      	bne.n	8005810 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f00a f9cb 	bl	800fc7c <USB_ReadInterrupts>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058f0:	f040 80c0 	bne.w	8005a74 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f00a f9ec 	bl	800fcd6 <USB_ReadDevAllInEpInterrupt>
 80058fe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005904:	e0b2      	b.n	8005a6c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80a7 	beq.w	8005a60 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	4611      	mov	r1, r2
 800591c:	4618      	mov	r0, r3
 800591e:	f00a fa12 	bl	800fd46 <USB_ReadDevInEPInterrupt>
 8005922:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d057      	beq.n	80059de <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	2201      	movs	r2, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	43db      	mvns	r3, r3
 8005948:	69f9      	ldr	r1, [r7, #28]
 800594a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800594e:	4013      	ands	r3, r2
 8005950:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	461a      	mov	r2, r3
 8005960:	2301      	movs	r3, #1
 8005962:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d132      	bne.n	80059d2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	3348      	adds	r3, #72	; 0x48
 800597c:	6819      	ldr	r1, [r3, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4403      	add	r3, r0
 800598c:	3344      	adds	r3, #68	; 0x44
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4419      	add	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4403      	add	r3, r0
 80059a0:	3348      	adds	r3, #72	; 0x48
 80059a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d113      	bne.n	80059d2 <HAL_PCD_IRQHandler+0x31c>
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ae:	4613      	mov	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	1a9b      	subs	r3, r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	3350      	adds	r3, #80	; 0x50
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d108      	bne.n	80059d2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059ca:	461a      	mov	r2, r3
 80059cc:	2101      	movs	r1, #1
 80059ce:	f00a fa1b 	bl	800fe08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f00c fc10 	bl	80121fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f4:	461a      	mov	r2, r3
 80059f6:	2308      	movs	r3, #8
 80059f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	461a      	mov	r2, r3
 8005a12:	2310      	movs	r3, #16
 8005a14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2340      	movs	r3, #64	; 0x40
 8005a30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fc48 	bl	80062f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	3301      	adds	r3, #1
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f47f af49 	bne.w	8005906 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f00a f8ff 	bl	800fc7c <USB_ReadInterrupts>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a88:	d122      	bne.n	8005ad0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d108      	bne.n	8005aba <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fe78 	bl	80067a8 <HAL_PCDEx_LPM_Callback>
 8005ab8:	e002      	b.n	8005ac0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f00c fc16 	bl	80122ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f00a f8d1 	bl	800fc7c <USB_ReadInterrupts>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae4:	d112      	bne.n	8005b0c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d102      	bne.n	8005afc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f00c fbd2 	bl	80122a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f00a f8b3 	bl	800fc7c <USB_ReadInterrupts>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b20:	d121      	bne.n	8005b66 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005b30:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d111      	bne.n	8005b60 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	089b      	lsrs	r3, r3, #2
 8005b4c:	f003 020f 	and.w	r2, r3, #15
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005b56:	2101      	movs	r1, #1
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fe25 	bl	80067a8 <HAL_PCDEx_LPM_Callback>
 8005b5e:	e002      	b.n	8005b66 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f00c fb9d 	bl	80122a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f00a f886 	bl	800fc7c <USB_ReadInterrupts>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7a:	f040 80c7 	bne.w	8005d0c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2110      	movs	r1, #16
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f009 f90f 	bl	800edbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba2:	e056      	b.n	8005c52 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bb6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bd6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bf6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	461a      	mov	r2, r3
 8005c06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	3301      	adds	r3, #1
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3a3      	bcc.n	8005ba4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c6a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005c6e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d016      	beq.n	8005ca6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c88:	f043 030b 	orr.w	r3, r3, #11
 8005c8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c9e:	f043 030b 	orr.w	r3, r3, #11
 8005ca2:	6453      	str	r3, [r2, #68]	; 0x44
 8005ca4:	e015      	b.n	8005cd2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	f242 032b 	movw	r3, #8235	; 0x202b
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ccc:	f043 030b 	orr.w	r3, r3, #11
 8005cd0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ce4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f00a f886 	bl	800fe08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f009 ffb3 	bl	800fc7c <USB_ReadInterrupts>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d20:	d124      	bne.n	8005d6c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f00a f84a 	bl	800fdc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f009 f8a4 	bl	800ee7e <USB_GetDevSpeed>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681c      	ldr	r4, [r3, #0]
 8005d42:	f001 fce7 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 8005d46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4620      	mov	r0, r4
 8005d52:	f008 fde7 	bl	800e924 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f00c fa79 	bl	801224e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695a      	ldr	r2, [r3, #20]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f009 ff83 	bl	800fc7c <USB_ReadInterrupts>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d10a      	bne.n	8005d96 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f00c fa56 	bl	8012232 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695a      	ldr	r2, [r3, #20]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f002 0208 	and.w	r2, r2, #8
 8005d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f009 ff6e 	bl	800fc7c <USB_ReadInterrupts>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005daa:	d10f      	bne.n	8005dcc <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f00c fab8 	bl	801232c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695a      	ldr	r2, [r3, #20]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f009 ff53 	bl	800fc7c <USB_ReadInterrupts>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de0:	d10f      	bne.n	8005e02 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f00c fa8b 	bl	8012308 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f009 ff38 	bl	800fc7c <USB_ReadInterrupts>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e16:	d10a      	bne.n	8005e2e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f00c fa99 	bl	8012350 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f009 ff22 	bl	800fc7c <USB_ReadInterrupts>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d115      	bne.n	8005e6e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f00c fa89 	bl	801236c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6859      	ldr	r1, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	e000      	b.n	8005e6e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005e6c:	bf00      	nop
    }
  }
}
 8005e6e:	3734      	adds	r7, #52	; 0x34
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd90      	pop	{r4, r7, pc}

08005e74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_PCD_SetAddress+0x1a>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e013      	b.n	8005eb6 <HAL_PCD_SetAddress+0x42>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f009 fe80 	bl	800fbac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	4608      	mov	r0, r1
 8005ec8:	4611      	mov	r1, r2
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4603      	mov	r3, r0
 8005ece:	70fb      	strb	r3, [r7, #3]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	803b      	strh	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	da0f      	bge.n	8005f04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	f003 020f 	and.w	r2, r3, #15
 8005eea:	4613      	mov	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	3338      	adds	r3, #56	; 0x38
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3304      	adds	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	705a      	strb	r2, [r3, #1]
 8005f02:	e00f      	b.n	8005f24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4413      	add	r3, r2
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f30:	883a      	ldrh	r2, [r7, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	78ba      	ldrb	r2, [r7, #2]
 8005f3a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f4e:	78bb      	ldrb	r3, [r7, #2]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d102      	bne.n	8005f5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_PCD_EP_Open+0xaa>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e00e      	b.n	8005f86 <HAL_PCD_EP_Open+0xc8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68f9      	ldr	r1, [r7, #12]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f008 ffa6 	bl	800eec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005f84:	7afb      	ldrb	r3, [r7, #11]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	da0f      	bge.n	8005fc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	4613      	mov	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	3338      	adds	r3, #56	; 0x38
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	705a      	strb	r2, [r3, #1]
 8005fc0:	e00f      	b.n	8005fe2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	f003 020f 	and.w	r2, r3, #15
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3304      	adds	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_PCD_EP_Close+0x6e>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e00e      	b.n	800601a <HAL_PCD_EP_Close+0x8c>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68f9      	ldr	r1, [r7, #12]
 800600a:	4618      	mov	r0, r3
 800600c:	f008 ffe4 	bl	800efd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b086      	sub	sp, #24
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	460b      	mov	r3, r1
 8006030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	f003 020f 	and.w	r2, r3, #15
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	3304      	adds	r3, #4
 800604a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2200      	movs	r2, #0
 800605c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006064:	7afb      	ldrb	r3, [r7, #11]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	b2da      	uxtb	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d102      	bne.n	800607e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	2b00      	cmp	r3, #0
 8006086:	d109      	bne.n	800609c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	6979      	ldr	r1, [r7, #20]
 8006096:	f009 fac7 	bl	800f628 <USB_EP0StartXfer>
 800609a:	e008      	b.n	80060ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	6979      	ldr	r1, [r7, #20]
 80060aa:	f009 f871 	bl	800f190 <USB_EPStartXfer>
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	f003 020f 	and.w	r2, r3, #15
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80060da:	681b      	ldr	r3, [r3, #0]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	460b      	mov	r3, r1
 80060f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f8:	7afb      	ldrb	r3, [r7, #11]
 80060fa:	f003 020f 	and.w	r2, r3, #15
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	3338      	adds	r3, #56	; 0x38
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	3304      	adds	r3, #4
 800610e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2200      	movs	r2, #0
 8006120:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2201      	movs	r2, #1
 8006126:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	b2da      	uxtb	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d102      	bne.n	8006142 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	f003 030f 	and.w	r3, r3, #15
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	6979      	ldr	r1, [r7, #20]
 800615a:	f009 fa65 	bl	800f628 <USB_EP0StartXfer>
 800615e:	e008      	b.n	8006172 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	f009 f80f 	bl	800f190 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	f003 020f 	and.w	r2, r3, #15
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d901      	bls.n	800619a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e050      	b.n	800623c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800619a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	da0f      	bge.n	80061c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	4613      	mov	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	3338      	adds	r3, #56	; 0x38
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	3304      	adds	r3, #4
 80061b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	705a      	strb	r2, [r3, #1]
 80061c0:	e00d      	b.n	80061de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	4613      	mov	r3, r2
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4413      	add	r3, r2
 80061d4:	3304      	adds	r3, #4
 80061d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_PCD_EP_SetStall+0x82>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e01e      	b.n	800623c <HAL_PCD_EP_SetStall+0xc0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	4618      	mov	r0, r3
 800620e:	f009 fbf9 	bl	800fa04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	b2d9      	uxtb	r1, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800622c:	461a      	mov	r2, r3
 800622e:	f009 fdeb 	bl	800fe08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	f003 020f 	and.w	r2, r3, #15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d901      	bls.n	8006262 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e042      	b.n	80062e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006266:	2b00      	cmp	r3, #0
 8006268:	da0f      	bge.n	800628a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f003 020f 	and.w	r2, r3, #15
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	3338      	adds	r3, #56	; 0x38
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	3304      	adds	r3, #4
 8006280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	705a      	strb	r2, [r3, #1]
 8006288:	e00f      	b.n	80062aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	4613      	mov	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4413      	add	r3, r2
 80062a0:	3304      	adds	r3, #4
 80062a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_PCD_EP_ClrStall+0x86>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e00e      	b.n	80062e8 <HAL_PCD_EP_ClrStall+0xa4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	4618      	mov	r0, r3
 80062da:	f009 fc01 	bl	800fae0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08a      	sub	sp, #40	; 0x28
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	4613      	mov	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	3338      	adds	r3, #56	; 0x38
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	4413      	add	r3, r2
 8006314:	3304      	adds	r3, #4
 8006316:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	699a      	ldr	r2, [r3, #24]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	429a      	cmp	r2, r3
 8006322:	d901      	bls.n	8006328 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e06c      	b.n	8006402 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	429a      	cmp	r2, r3
 800633c:	d902      	bls.n	8006344 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3303      	adds	r3, #3
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800634c:	e02b      	b.n	80063a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	695a      	ldr	r2, [r3, #20]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	429a      	cmp	r2, r3
 8006362:	d902      	bls.n	800636a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3303      	adds	r3, #3
 800636e:	089b      	lsrs	r3, r3, #2
 8006370:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68d9      	ldr	r1, [r3, #12]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006382:	b2db      	uxtb	r3, r3
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	4603      	mov	r3, r0
 8006388:	6978      	ldr	r0, [r7, #20]
 800638a:	f009 faa5 	bl	800f8d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	441a      	add	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	441a      	add	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d809      	bhi.n	80063d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d203      	bcs.n	80063d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1be      	bne.n	800634e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d811      	bhi.n	8006400 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	2201      	movs	r2, #1
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	43db      	mvns	r3, r3
 80063f6:	6939      	ldr	r1, [r7, #16]
 80063f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063fc:	4013      	ands	r3, r2
 80063fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	333c      	adds	r3, #60	; 0x3c
 8006424:	3304      	adds	r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b01      	cmp	r3, #1
 8006440:	f040 80a0 	bne.w	8006584 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d015      	beq.n	800647a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a72      	ldr	r2, [pc, #456]	; (800661c <PCD_EP_OutXfrComplete_int+0x210>)
 8006452:	4293      	cmp	r3, r2
 8006454:	f240 80dd 	bls.w	8006612 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80d7 	beq.w	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	461a      	mov	r2, r3
 8006472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006476:	6093      	str	r3, [r2, #8]
 8006478:	e0cb      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	461a      	mov	r2, r3
 8006492:	2320      	movs	r3, #32
 8006494:	6093      	str	r3, [r2, #8]
 8006496:	e0bc      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f040 80b7 	bne.w	8006612 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a5d      	ldr	r2, [pc, #372]	; (800661c <PCD_EP_OutXfrComplete_int+0x210>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d90f      	bls.n	80064cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	461a      	mov	r2, r3
 80064c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c8:	6093      	str	r3, [r2, #8]
 80064ca:	e0a2      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80064de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	0159      	lsls	r1, r3, #5
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	440b      	add	r3, r1
 80064e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80064f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4403      	add	r3, r0
 8006502:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006506:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800651a:	6819      	ldr	r1, [r3, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	4613      	mov	r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4403      	add	r3, r0
 800652a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4419      	add	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	4613      	mov	r3, r2
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4403      	add	r3, r0
 8006540:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006544:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d114      	bne.n	8006576 <PCD_EP_OutXfrComplete_int+0x16a>
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d108      	bne.n	8006576 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800656e:	461a      	mov	r2, r3
 8006570:	2101      	movs	r1, #1
 8006572:	f009 fc49 	bl	800fe08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f00b fe23 	bl	80121c8 <HAL_PCD_DataOutStageCallback>
 8006582:	e046      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4a26      	ldr	r2, [pc, #152]	; (8006620 <PCD_EP_OutXfrComplete_int+0x214>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d124      	bne.n	80065d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	461a      	mov	r2, r3
 80065a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a8:	6093      	str	r3, [r2, #8]
 80065aa:	e032      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	461a      	mov	r2, r3
 80065c4:	2320      	movs	r3, #32
 80065c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f00b fdfa 	bl	80121c8 <HAL_PCD_DataOutStageCallback>
 80065d4:	e01d      	b.n	8006612 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d114      	bne.n	8006606 <PCD_EP_OutXfrComplete_int+0x1fa>
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d108      	bne.n	8006606 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065fe:	461a      	mov	r2, r3
 8006600:	2100      	movs	r1, #0
 8006602:	f009 fc01 	bl	800fe08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f00b fddb 	bl	80121c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	4f54300a 	.word	0x4f54300a
 8006620:	4f54310a 	.word	0x4f54310a

08006624 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	333c      	adds	r3, #60	; 0x3c
 800663c:	3304      	adds	r3, #4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <PCD_EP_OutSetupPacket_int+0x88>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d90e      	bls.n	8006678 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	461a      	mov	r2, r3
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f00b fd93 	bl	80121a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <PCD_EP_OutSetupPacket_int+0x88>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d90c      	bls.n	80066a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d108      	bne.n	80066a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006698:	461a      	mov	r2, r3
 800669a:	2101      	movs	r1, #1
 800669c:	f009 fbb4 	bl	800fe08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	4f54300a 	.word	0x4f54300a

080066b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
 80066bc:	4613      	mov	r3, r2
 80066be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d107      	bne.n	80066de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066ce:	883b      	ldrh	r3, [r7, #0]
 80066d0:	0419      	lsls	r1, r3, #16
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	430a      	orrs	r2, r1
 80066da:	629a      	str	r2, [r3, #40]	; 0x28
 80066dc:	e028      	b.n	8006730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e4:	0c1b      	lsrs	r3, r3, #16
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	4413      	add	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
 80066f0:	e00d      	b.n	800670e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	3340      	adds	r3, #64	; 0x40
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4413      	add	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	3301      	adds	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]
 800670e:	7bfa      	ldrb	r2, [r7, #15]
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	3b01      	subs	r3, #1
 8006714:	429a      	cmp	r2, r3
 8006716:	d3ec      	bcc.n	80066f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006718:	883b      	ldrh	r3, [r7, #0]
 800671a:	0418      	lsls	r0, r3, #16
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6819      	ldr	r1, [r3, #0]
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	3b01      	subs	r3, #1
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	4302      	orrs	r2, r0
 8006728:	3340      	adds	r3, #64	; 0x40
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	887a      	ldrh	r2, [r7, #2]
 8006750:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678e:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8006790:	4313      	orrs	r3, r2
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	10000003 	.word	0x10000003

080067a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80067c8:	4b29      	ldr	r3, [pc, #164]	; (8006870 <HAL_PWREx_ConfigSupply+0xb0>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	2b06      	cmp	r3, #6
 80067d2:	d00a      	beq.n	80067ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80067d4:	4b26      	ldr	r3, [pc, #152]	; (8006870 <HAL_PWREx_ConfigSupply+0xb0>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d001      	beq.n	80067e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e040      	b.n	8006868 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e03e      	b.n	8006868 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80067ea:	4b21      	ldr	r3, [pc, #132]	; (8006870 <HAL_PWREx_ConfigSupply+0xb0>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80067f2:	491f      	ldr	r1, [pc, #124]	; (8006870 <HAL_PWREx_ConfigSupply+0xb0>)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80067fa:	f7fb f881 	bl	8001900 <HAL_GetTick>
 80067fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006800:	e009      	b.n	8006816 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006802:	f7fb f87d 	bl	8001900 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006810:	d901      	bls.n	8006816 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e028      	b.n	8006868 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006816:	4b16      	ldr	r3, [pc, #88]	; (8006870 <HAL_PWREx_ConfigSupply+0xb0>)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800681e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006822:	d1ee      	bne.n	8006802 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b1e      	cmp	r3, #30
 8006828:	d008      	beq.n	800683c <HAL_PWREx_ConfigSupply+0x7c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b2e      	cmp	r3, #46	; 0x2e
 800682e:	d005      	beq.n	800683c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b1d      	cmp	r3, #29
 8006834:	d002      	beq.n	800683c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b2d      	cmp	r3, #45	; 0x2d
 800683a:	d114      	bne.n	8006866 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800683c:	f7fb f860 	bl	8001900 <HAL_GetTick>
 8006840:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006842:	e009      	b.n	8006858 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006844:	f7fb f85c 	bl	8001900 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006852:	d901      	bls.n	8006858 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e007      	b.n	8006868 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <HAL_PWREx_ConfigSupply+0xb0>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006864:	d1ee      	bne.n	8006844 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	58024800 	.word	0x58024800

08006874 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	4a04      	ldr	r2, [pc, #16]	; (8006890 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800687e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006882:	60d3      	str	r3, [r2, #12]
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	58024800 	.word	0x58024800

08006894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08c      	sub	sp, #48	; 0x30
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e3ff      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 8087 	beq.w	80069c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b4:	4b99      	ldr	r3, [pc, #612]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068be:	4b97      	ldr	r3, [pc, #604]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d007      	beq.n	80068da <HAL_RCC_OscConfig+0x46>
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	2b18      	cmp	r3, #24
 80068ce:	d110      	bne.n	80068f2 <HAL_RCC_OscConfig+0x5e>
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d10b      	bne.n	80068f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068da:	4b90      	ldr	r3, [pc, #576]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d06c      	beq.n	80069c0 <HAL_RCC_OscConfig+0x12c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d168      	bne.n	80069c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e3d9      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fa:	d106      	bne.n	800690a <HAL_RCC_OscConfig+0x76>
 80068fc:	4b87      	ldr	r3, [pc, #540]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a86      	ldr	r2, [pc, #536]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e02e      	b.n	8006968 <HAL_RCC_OscConfig+0xd4>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10c      	bne.n	800692c <HAL_RCC_OscConfig+0x98>
 8006912:	4b82      	ldr	r3, [pc, #520]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a81      	ldr	r2, [pc, #516]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	4b7f      	ldr	r3, [pc, #508]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a7e      	ldr	r2, [pc, #504]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e01d      	b.n	8006968 <HAL_RCC_OscConfig+0xd4>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006934:	d10c      	bne.n	8006950 <HAL_RCC_OscConfig+0xbc>
 8006936:	4b79      	ldr	r3, [pc, #484]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a78      	ldr	r2, [pc, #480]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 800693c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	4b76      	ldr	r3, [pc, #472]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a75      	ldr	r2, [pc, #468]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e00b      	b.n	8006968 <HAL_RCC_OscConfig+0xd4>
 8006950:	4b72      	ldr	r3, [pc, #456]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a71      	ldr	r2, [pc, #452]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	4b6f      	ldr	r3, [pc, #444]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a6e      	ldr	r2, [pc, #440]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d013      	beq.n	8006998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006970:	f7fa ffc6 	bl	8001900 <HAL_GetTick>
 8006974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006978:	f7fa ffc2 	bl	8001900 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b64      	cmp	r3, #100	; 0x64
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e38d      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800698a:	4b64      	ldr	r3, [pc, #400]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0f0      	beq.n	8006978 <HAL_RCC_OscConfig+0xe4>
 8006996:	e014      	b.n	80069c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fa ffb2 	bl	8001900 <HAL_GetTick>
 800699c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a0:	f7fa ffae 	bl	8001900 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b64      	cmp	r3, #100	; 0x64
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e379      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069b2:	4b5a      	ldr	r3, [pc, #360]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x10c>
 80069be:	e000      	b.n	80069c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80ae 	beq.w	8006b2c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069d0:	4b52      	ldr	r3, [pc, #328]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069da:	4b50      	ldr	r3, [pc, #320]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <HAL_RCC_OscConfig+0x162>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	2b18      	cmp	r3, #24
 80069ea:	d13a      	bne.n	8006a62 <HAL_RCC_OscConfig+0x1ce>
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d135      	bne.n	8006a62 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f6:	4b49      	ldr	r3, [pc, #292]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d005      	beq.n	8006a0e <HAL_RCC_OscConfig+0x17a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e34b      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0e:	f7fa ffa7 	bl	8001960 <HAL_GetREVID>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d817      	bhi.n	8006a4c <HAL_RCC_OscConfig+0x1b8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d108      	bne.n	8006a36 <HAL_RCC_OscConfig+0x1a2>
 8006a24:	4b3d      	ldr	r3, [pc, #244]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a2c:	4a3b      	ldr	r2, [pc, #236]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a32:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a34:	e07a      	b.n	8006b2c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a36:	4b39      	ldr	r3, [pc, #228]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	031b      	lsls	r3, r3, #12
 8006a44:	4935      	ldr	r1, [pc, #212]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a4a:	e06f      	b.n	8006b2c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4c:	4b33      	ldr	r3, [pc, #204]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	061b      	lsls	r3, r3, #24
 8006a5a:	4930      	ldr	r1, [pc, #192]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a60:	e064      	b.n	8006b2c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d045      	beq.n	8006af6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a6a:	4b2c      	ldr	r3, [pc, #176]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f023 0219 	bic.w	r2, r3, #25
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	4929      	ldr	r1, [pc, #164]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7c:	f7fa ff40 	bl	8001900 <HAL_GetTick>
 8006a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a84:	f7fa ff3c 	bl	8001900 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e307      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a96:	4b21      	ldr	r3, [pc, #132]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa2:	f7fa ff5d 	bl	8001960 <HAL_GetREVID>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d817      	bhi.n	8006ae0 <HAL_RCC_OscConfig+0x24c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d108      	bne.n	8006aca <HAL_RCC_OscConfig+0x236>
 8006ab8:	4b18      	ldr	r3, [pc, #96]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ac0:	4a16      	ldr	r2, [pc, #88]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac6:	6053      	str	r3, [r2, #4]
 8006ac8:	e030      	b.n	8006b2c <HAL_RCC_OscConfig+0x298>
 8006aca:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	031b      	lsls	r3, r3, #12
 8006ad8:	4910      	ldr	r1, [pc, #64]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	604b      	str	r3, [r1, #4]
 8006ade:	e025      	b.n	8006b2c <HAL_RCC_OscConfig+0x298>
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	061b      	lsls	r3, r3, #24
 8006aee:	490b      	ldr	r1, [pc, #44]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	604b      	str	r3, [r1, #4]
 8006af4:	e01a      	b.n	8006b2c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <HAL_RCC_OscConfig+0x288>)
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b02:	f7fa fefd 	bl	8001900 <HAL_GetTick>
 8006b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b08:	e00a      	b.n	8006b20 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b0a:	f7fa fef9 	bl	8001900 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d903      	bls.n	8006b20 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e2c4      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
 8006b1c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b20:	4ba4      	ldr	r3, [pc, #656]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1ee      	bne.n	8006b0a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80a9 	beq.w	8006c8c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b3a:	4b9e      	ldr	r3, [pc, #632]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b44:	4b9b      	ldr	r3, [pc, #620]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b48:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d007      	beq.n	8006b60 <HAL_RCC_OscConfig+0x2cc>
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b18      	cmp	r3, #24
 8006b54:	d13a      	bne.n	8006bcc <HAL_RCC_OscConfig+0x338>
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d135      	bne.n	8006bcc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b60:	4b94      	ldr	r3, [pc, #592]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_RCC_OscConfig+0x2e4>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d001      	beq.n	8006b78 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e296      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b78:	f7fa fef2 	bl	8001960 <HAL_GetREVID>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d817      	bhi.n	8006bb6 <HAL_RCC_OscConfig+0x322>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d108      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x30c>
 8006b8e:	4b89      	ldr	r3, [pc, #548]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b96:	4a87      	ldr	r2, [pc, #540]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b9e:	e075      	b.n	8006c8c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ba0:	4b84      	ldr	r3, [pc, #528]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	069b      	lsls	r3, r3, #26
 8006bae:	4981      	ldr	r1, [pc, #516]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bb4:	e06a      	b.n	8006c8c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bb6:	4b7f      	ldr	r3, [pc, #508]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	061b      	lsls	r3, r3, #24
 8006bc4:	497b      	ldr	r1, [pc, #492]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bca:	e05f      	b.n	8006c8c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d042      	beq.n	8006c5a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bd4:	4b77      	ldr	r3, [pc, #476]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a76      	ldr	r2, [pc, #472]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be0:	f7fa fe8e 	bl	8001900 <HAL_GetTick>
 8006be4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006be8:	f7fa fe8a 	bl	8001900 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e255      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bfa:	4b6e      	ldr	r3, [pc, #440]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c06:	f7fa feab 	bl	8001960 <HAL_GetREVID>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d817      	bhi.n	8006c44 <HAL_RCC_OscConfig+0x3b0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d108      	bne.n	8006c2e <HAL_RCC_OscConfig+0x39a>
 8006c1c:	4b65      	ldr	r3, [pc, #404]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c24:	4a63      	ldr	r2, [pc, #396]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006c26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c2a:	6053      	str	r3, [r2, #4]
 8006c2c:	e02e      	b.n	8006c8c <HAL_RCC_OscConfig+0x3f8>
 8006c2e:	4b61      	ldr	r3, [pc, #388]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	069b      	lsls	r3, r3, #26
 8006c3c:	495d      	ldr	r1, [pc, #372]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	604b      	str	r3, [r1, #4]
 8006c42:	e023      	b.n	8006c8c <HAL_RCC_OscConfig+0x3f8>
 8006c44:	4b5b      	ldr	r3, [pc, #364]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	4958      	ldr	r1, [pc, #352]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60cb      	str	r3, [r1, #12]
 8006c58:	e018      	b.n	8006c8c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c5a:	4b56      	ldr	r3, [pc, #344]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a55      	ldr	r2, [pc, #340]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c66:	f7fa fe4b 	bl	8001900 <HAL_GetTick>
 8006c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c6c:	e008      	b.n	8006c80 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c6e:	f7fa fe47 	bl	8001900 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e212      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c80:	4b4c      	ldr	r3, [pc, #304]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1f0      	bne.n	8006c6e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0308 	and.w	r3, r3, #8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d036      	beq.n	8006d06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d019      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ca0:	4b44      	ldr	r3, [pc, #272]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca4:	4a43      	ldr	r2, [pc, #268]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cac:	f7fa fe28 	bl	8001900 <HAL_GetTick>
 8006cb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cb4:	f7fa fe24 	bl	8001900 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e1ef      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cc6:	4b3b      	ldr	r3, [pc, #236]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x420>
 8006cd2:	e018      	b.n	8006d06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cd4:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd8:	4a36      	ldr	r2, [pc, #216]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce0:	f7fa fe0e 	bl	8001900 <HAL_GetTick>
 8006ce4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ce8:	f7fa fe0a 	bl	8001900 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e1d5      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cfa:	4b2e      	ldr	r3, [pc, #184]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f0      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d036      	beq.n	8006d80 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d019      	beq.n	8006d4e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d1a:	4b26      	ldr	r3, [pc, #152]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a25      	ldr	r2, [pc, #148]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d26:	f7fa fdeb 	bl	8001900 <HAL_GetTick>
 8006d2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d2e:	f7fa fde7 	bl	8001900 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e1b2      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d40:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0f0      	beq.n	8006d2e <HAL_RCC_OscConfig+0x49a>
 8006d4c:	e018      	b.n	8006d80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d4e:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d5a:	f7fa fdd1 	bl	8001900 <HAL_GetTick>
 8006d5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d60:	e008      	b.n	8006d74 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d62:	f7fa fdcd 	bl	8001900 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e198      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <HAL_RCC_OscConfig+0x520>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f0      	bne.n	8006d62 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8085 	beq.w	8006e98 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d8e:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <HAL_RCC_OscConfig+0x524>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <HAL_RCC_OscConfig+0x524>)
 8006d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d9a:	f7fa fdb1 	bl	8001900 <HAL_GetTick>
 8006d9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006da0:	e00c      	b.n	8006dbc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006da2:	f7fa fdad 	bl	8001900 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b64      	cmp	r3, #100	; 0x64
 8006dae:	d905      	bls.n	8006dbc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e178      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
 8006db4:	58024400 	.word	0x58024400
 8006db8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dbc:	4b96      	ldr	r3, [pc, #600]	; (8007018 <HAL_RCC_OscConfig+0x784>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0ec      	beq.n	8006da2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d106      	bne.n	8006dde <HAL_RCC_OscConfig+0x54a>
 8006dd0:	4b92      	ldr	r3, [pc, #584]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd4:	4a91      	ldr	r2, [pc, #580]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	6713      	str	r3, [r2, #112]	; 0x70
 8006ddc:	e02d      	b.n	8006e3a <HAL_RCC_OscConfig+0x5a6>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCC_OscConfig+0x56c>
 8006de6:	4b8d      	ldr	r3, [pc, #564]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dea:	4a8c      	ldr	r2, [pc, #560]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	6713      	str	r3, [r2, #112]	; 0x70
 8006df2:	4b8a      	ldr	r3, [pc, #552]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	4a89      	ldr	r2, [pc, #548]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006df8:	f023 0304 	bic.w	r3, r3, #4
 8006dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dfe:	e01c      	b.n	8006e3a <HAL_RCC_OscConfig+0x5a6>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2b05      	cmp	r3, #5
 8006e06:	d10c      	bne.n	8006e22 <HAL_RCC_OscConfig+0x58e>
 8006e08:	4b84      	ldr	r3, [pc, #528]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0c:	4a83      	ldr	r2, [pc, #524]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e0e:	f043 0304 	orr.w	r3, r3, #4
 8006e12:	6713      	str	r3, [r2, #112]	; 0x70
 8006e14:	4b81      	ldr	r3, [pc, #516]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e18:	4a80      	ldr	r2, [pc, #512]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e20:	e00b      	b.n	8006e3a <HAL_RCC_OscConfig+0x5a6>
 8006e22:	4b7e      	ldr	r3, [pc, #504]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e26:	4a7d      	ldr	r2, [pc, #500]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e2e:	4b7b      	ldr	r3, [pc, #492]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	4a7a      	ldr	r2, [pc, #488]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e34:	f023 0304 	bic.w	r3, r3, #4
 8006e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d015      	beq.n	8006e6e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e42:	f7fa fd5d 	bl	8001900 <HAL_GetTick>
 8006e46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e48:	e00a      	b.n	8006e60 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e4a:	f7fa fd59 	bl	8001900 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e122      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e60:	4b6e      	ldr	r3, [pc, #440]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0ee      	beq.n	8006e4a <HAL_RCC_OscConfig+0x5b6>
 8006e6c:	e014      	b.n	8006e98 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e6e:	f7fa fd47 	bl	8001900 <HAL_GetTick>
 8006e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e74:	e00a      	b.n	8006e8c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e76:	f7fa fd43 	bl	8001900 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e10c      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e8c:	4b63      	ldr	r3, [pc, #396]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1ee      	bne.n	8006e76 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8101 	beq.w	80070a4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ea2:	4b5e      	ldr	r3, [pc, #376]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eaa:	2b18      	cmp	r3, #24
 8006eac:	f000 80bc 	beq.w	8007028 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	f040 8095 	bne.w	8006fe4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eba:	4b58      	ldr	r3, [pc, #352]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a57      	ldr	r2, [pc, #348]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec6:	f7fa fd1b 	bl	8001900 <HAL_GetTick>
 8006eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ece:	f7fa fd17 	bl	8001900 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e0e2      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ee0:	4b4e      	ldr	r3, [pc, #312]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f0      	bne.n	8006ece <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eec:	4b4b      	ldr	r3, [pc, #300]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ef0:	4b4b      	ldr	r3, [pc, #300]	; (8007020 <HAL_RCC_OscConfig+0x78c>)
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006efc:	0112      	lsls	r2, r2, #4
 8006efe:	430a      	orrs	r2, r1
 8006f00:	4946      	ldr	r1, [pc, #280]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	628b      	str	r3, [r1, #40]	; 0x28
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f14:	3b01      	subs	r3, #1
 8006f16:	025b      	lsls	r3, r3, #9
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	3b01      	subs	r3, #1
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f36:	4939      	ldr	r1, [pc, #228]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f3c:	4b37      	ldr	r3, [pc, #220]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	4a36      	ldr	r2, [pc, #216]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f48:	4b34      	ldr	r3, [pc, #208]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4c:	4b35      	ldr	r3, [pc, #212]	; (8007024 <HAL_RCC_OscConfig+0x790>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f54:	00d2      	lsls	r2, r2, #3
 8006f56:	4931      	ldr	r1, [pc, #196]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f5c:	4b2f      	ldr	r3, [pc, #188]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	f023 020c 	bic.w	r2, r3, #12
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	492c      	ldr	r1, [pc, #176]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f6e:	4b2b      	ldr	r3, [pc, #172]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	f023 0202 	bic.w	r2, r3, #2
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	4928      	ldr	r1, [pc, #160]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f80:	4b26      	ldr	r3, [pc, #152]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	4a25      	ldr	r2, [pc, #148]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f8c:	4b23      	ldr	r3, [pc, #140]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	4a22      	ldr	r2, [pc, #136]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f98:	4b20      	ldr	r3, [pc, #128]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4a1f      	ldr	r2, [pc, #124]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006f9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006fa4:	4b1d      	ldr	r3, [pc, #116]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	4a1c      	ldr	r2, [pc, #112]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006faa:	f043 0301 	orr.w	r3, r3, #1
 8006fae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a19      	ldr	r2, [pc, #100]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fa fca0 	bl	8001900 <HAL_GetTick>
 8006fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fc4:	f7fa fc9c 	bl	8001900 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e067      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0f0      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x730>
 8006fe2:	e05f      	b.n	80070a4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a0c      	ldr	r2, [pc, #48]	; (800701c <HAL_RCC_OscConfig+0x788>)
 8006fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff0:	f7fa fc86 	bl	8001900 <HAL_GetTick>
 8006ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff8:	f7fa fc82 	bl	8001900 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e04d      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800700a:	4b04      	ldr	r3, [pc, #16]	; (800701c <HAL_RCC_OscConfig+0x788>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f0      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x764>
 8007016:	e045      	b.n	80070a4 <HAL_RCC_OscConfig+0x810>
 8007018:	58024800 	.word	0x58024800
 800701c:	58024400 	.word	0x58024400
 8007020:	fffffc0c 	.word	0xfffffc0c
 8007024:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007028:	4b21      	ldr	r3, [pc, #132]	; (80070b0 <HAL_RCC_OscConfig+0x81c>)
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800702e:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <HAL_RCC_OscConfig+0x81c>)
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b01      	cmp	r3, #1
 800703a:	d031      	beq.n	80070a0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f003 0203 	and.w	r2, r3, #3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007046:	429a      	cmp	r2, r3
 8007048:	d12a      	bne.n	80070a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	091b      	lsrs	r3, r3, #4
 800704e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007056:	429a      	cmp	r2, r3
 8007058:	d122      	bne.n	80070a0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007066:	429a      	cmp	r2, r3
 8007068:	d11a      	bne.n	80070a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	0a5b      	lsrs	r3, r3, #9
 800706e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007076:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007078:	429a      	cmp	r2, r3
 800707a:	d111      	bne.n	80070a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	0c1b      	lsrs	r3, r3, #16
 8007080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800708a:	429a      	cmp	r2, r3
 800708c:	d108      	bne.n	80070a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	0e1b      	lsrs	r3, r3, #24
 8007092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800709c:	429a      	cmp	r2, r3
 800709e:	d001      	beq.n	80070a4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3730      	adds	r7, #48	; 0x30
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	58024400 	.word	0x58024400

080070b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e19c      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070c8:	4b8a      	ldr	r3, [pc, #552]	; (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d910      	bls.n	80070f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070d6:	4b87      	ldr	r3, [pc, #540]	; (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f023 020f 	bic.w	r2, r3, #15
 80070de:	4985      	ldr	r1, [pc, #532]	; (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b83      	ldr	r3, [pc, #524]	; (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e184      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d010      	beq.n	8007126 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	4b7b      	ldr	r3, [pc, #492]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007110:	429a      	cmp	r2, r3
 8007112:	d908      	bls.n	8007126 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007114:	4b78      	ldr	r3, [pc, #480]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	4975      	ldr	r1, [pc, #468]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007122:	4313      	orrs	r3, r2
 8007124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d010      	beq.n	8007154 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695a      	ldr	r2, [r3, #20]
 8007136:	4b70      	ldr	r3, [pc, #448]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800713e:	429a      	cmp	r2, r3
 8007140:	d908      	bls.n	8007154 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007142:	4b6d      	ldr	r3, [pc, #436]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	496a      	ldr	r1, [pc, #424]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007150:	4313      	orrs	r3, r2
 8007152:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b00      	cmp	r3, #0
 800715e:	d010      	beq.n	8007182 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699a      	ldr	r2, [r3, #24]
 8007164:	4b64      	ldr	r3, [pc, #400]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800716c:	429a      	cmp	r2, r3
 800716e:	d908      	bls.n	8007182 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007170:	4b61      	ldr	r3, [pc, #388]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	495e      	ldr	r1, [pc, #376]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 800717e:	4313      	orrs	r3, r2
 8007180:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d010      	beq.n	80071b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69da      	ldr	r2, [r3, #28]
 8007192:	4b59      	ldr	r3, [pc, #356]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800719a:	429a      	cmp	r2, r3
 800719c:	d908      	bls.n	80071b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800719e:	4b56      	ldr	r3, [pc, #344]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	4953      	ldr	r1, [pc, #332]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	4b4d      	ldr	r3, [pc, #308]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f003 030f 	and.w	r3, r3, #15
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d908      	bls.n	80071de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071cc:	4b4a      	ldr	r3, [pc, #296]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f023 020f 	bic.w	r2, r3, #15
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4947      	ldr	r1, [pc, #284]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d055      	beq.n	8007296 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80071ea:	4b43      	ldr	r3, [pc, #268]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	4940      	ldr	r1, [pc, #256]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d107      	bne.n	8007214 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007204:	4b3c      	ldr	r3, [pc, #240]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d121      	bne.n	8007254 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e0f6      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b03      	cmp	r3, #3
 800721a:	d107      	bne.n	800722c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800721c:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d115      	bne.n	8007254 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0ea      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d107      	bne.n	8007244 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007234:	4b30      	ldr	r3, [pc, #192]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723c:	2b00      	cmp	r3, #0
 800723e:	d109      	bne.n	8007254 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e0de      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007244:	4b2c      	ldr	r3, [pc, #176]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e0d6      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007254:	4b28      	ldr	r3, [pc, #160]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f023 0207 	bic.w	r2, r3, #7
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	4925      	ldr	r1, [pc, #148]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007262:	4313      	orrs	r3, r2
 8007264:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007266:	f7fa fb4b 	bl	8001900 <HAL_GetTick>
 800726a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800726c:	e00a      	b.n	8007284 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800726e:	f7fa fb47 	bl	8001900 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	f241 3288 	movw	r2, #5000	; 0x1388
 800727c:	4293      	cmp	r3, r2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e0be      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007284:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	429a      	cmp	r2, r3
 8007294:	d1eb      	bne.n	800726e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d010      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d208      	bcs.n	80072c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b2:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	f023 020f 	bic.w	r2, r3, #15
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	490e      	ldr	r1, [pc, #56]	; (80072f8 <HAL_RCC_ClockConfig+0x244>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072c4:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 030f 	and.w	r3, r3, #15
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d214      	bcs.n	80072fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f023 020f 	bic.w	r2, r3, #15
 80072da:	4906      	ldr	r1, [pc, #24]	; (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	4313      	orrs	r3, r2
 80072e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e2:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <HAL_RCC_ClockConfig+0x240>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d005      	beq.n	80072fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e086      	b.n	8007402 <HAL_RCC_ClockConfig+0x34e>
 80072f4:	52002000 	.word	0x52002000
 80072f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d010      	beq.n	800732a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	4b3f      	ldr	r3, [pc, #252]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007314:	429a      	cmp	r2, r3
 8007316:	d208      	bcs.n	800732a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007318:	4b3c      	ldr	r3, [pc, #240]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	4939      	ldr	r1, [pc, #228]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 8007326:	4313      	orrs	r3, r2
 8007328:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d010      	beq.n	8007358 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695a      	ldr	r2, [r3, #20]
 800733a:	4b34      	ldr	r3, [pc, #208]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007342:	429a      	cmp	r2, r3
 8007344:	d208      	bcs.n	8007358 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007346:	4b31      	ldr	r3, [pc, #196]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	492e      	ldr	r1, [pc, #184]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 8007354:	4313      	orrs	r3, r2
 8007356:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d010      	beq.n	8007386 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	4b28      	ldr	r3, [pc, #160]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007370:	429a      	cmp	r2, r3
 8007372:	d208      	bcs.n	8007386 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007374:	4b25      	ldr	r3, [pc, #148]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	4922      	ldr	r1, [pc, #136]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 8007382:	4313      	orrs	r3, r2
 8007384:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d010      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69da      	ldr	r2, [r3, #28]
 8007396:	4b1d      	ldr	r3, [pc, #116]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800739e:	429a      	cmp	r2, r3
 80073a0:	d208      	bcs.n	80073b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073a2:	4b1a      	ldr	r3, [pc, #104]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	4917      	ldr	r1, [pc, #92]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073b4:	f000 f834 	bl	8007420 <HAL_RCC_GetSysClockFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b14      	ldr	r3, [pc, #80]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	0a1b      	lsrs	r3, r3, #8
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	4912      	ldr	r1, [pc, #72]	; (8007410 <HAL_RCC_ClockConfig+0x35c>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	fa22 f303 	lsr.w	r3, r2, r3
 80073d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073d2:	4b0e      	ldr	r3, [pc, #56]	; (800740c <HAL_RCC_ClockConfig+0x358>)
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	4a0d      	ldr	r2, [pc, #52]	; (8007410 <HAL_RCC_ClockConfig+0x35c>)
 80073dc:	5cd3      	ldrb	r3, [r2, r3]
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
 80073e8:	4a0a      	ldr	r2, [pc, #40]	; (8007414 <HAL_RCC_ClockConfig+0x360>)
 80073ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073ec:	4a0a      	ldr	r2, [pc, #40]	; (8007418 <HAL_RCC_ClockConfig+0x364>)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80073f2:	4b0a      	ldr	r3, [pc, #40]	; (800741c <HAL_RCC_ClockConfig+0x368>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fa fa38 	bl	800186c <HAL_InitTick>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	58024400 	.word	0x58024400
 8007410:	080127e4 	.word	0x080127e4
 8007414:	24000004 	.word	0x24000004
 8007418:	24000000 	.word	0x24000000
 800741c:	2400001c 	.word	0x2400001c

08007420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007420:	b480      	push	{r7}
 8007422:	b089      	sub	sp, #36	; 0x24
 8007424:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007426:	4bb3      	ldr	r3, [pc, #716]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800742e:	2b18      	cmp	r3, #24
 8007430:	f200 8155 	bhi.w	80076de <HAL_RCC_GetSysClockFreq+0x2be>
 8007434:	a201      	add	r2, pc, #4	; (adr r2, 800743c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743a:	bf00      	nop
 800743c:	080074a1 	.word	0x080074a1
 8007440:	080076df 	.word	0x080076df
 8007444:	080076df 	.word	0x080076df
 8007448:	080076df 	.word	0x080076df
 800744c:	080076df 	.word	0x080076df
 8007450:	080076df 	.word	0x080076df
 8007454:	080076df 	.word	0x080076df
 8007458:	080076df 	.word	0x080076df
 800745c:	080074c7 	.word	0x080074c7
 8007460:	080076df 	.word	0x080076df
 8007464:	080076df 	.word	0x080076df
 8007468:	080076df 	.word	0x080076df
 800746c:	080076df 	.word	0x080076df
 8007470:	080076df 	.word	0x080076df
 8007474:	080076df 	.word	0x080076df
 8007478:	080076df 	.word	0x080076df
 800747c:	080074cd 	.word	0x080074cd
 8007480:	080076df 	.word	0x080076df
 8007484:	080076df 	.word	0x080076df
 8007488:	080076df 	.word	0x080076df
 800748c:	080076df 	.word	0x080076df
 8007490:	080076df 	.word	0x080076df
 8007494:	080076df 	.word	0x080076df
 8007498:	080076df 	.word	0x080076df
 800749c:	080074d3 	.word	0x080074d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074a0:	4b94      	ldr	r3, [pc, #592]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074ac:	4b91      	ldr	r3, [pc, #580]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	4a90      	ldr	r2, [pc, #576]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074b8:	fa22 f303 	lsr.w	r3, r2, r3
 80074bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80074be:	e111      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074c0:	4b8d      	ldr	r3, [pc, #564]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074c2:	61bb      	str	r3, [r7, #24]
    break;
 80074c4:	e10e      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80074c6:	4b8d      	ldr	r3, [pc, #564]	; (80076fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80074c8:	61bb      	str	r3, [r7, #24]
    break;
 80074ca:	e10b      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80074cc:	4b8c      	ldr	r3, [pc, #560]	; (8007700 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80074ce:	61bb      	str	r3, [r7, #24]
    break;
 80074d0:	e108      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074d2:	4b88      	ldr	r3, [pc, #544]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80074dc:	4b85      	ldr	r3, [pc, #532]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	091b      	lsrs	r3, r3, #4
 80074e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80074e8:	4b82      	ldr	r3, [pc, #520]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80074f2:	4b80      	ldr	r3, [pc, #512]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f6:	08db      	lsrs	r3, r3, #3
 80074f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	fb02 f303 	mul.w	r3, r2, r3
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80e1 	beq.w	80076d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b02      	cmp	r3, #2
 800751a:	f000 8083 	beq.w	8007624 <HAL_RCC_GetSysClockFreq+0x204>
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b02      	cmp	r3, #2
 8007522:	f200 80a1 	bhi.w	8007668 <HAL_RCC_GetSysClockFreq+0x248>
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <HAL_RCC_GetSysClockFreq+0x114>
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d056      	beq.n	80075e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007532:	e099      	b.n	8007668 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007534:	4b6f      	ldr	r3, [pc, #444]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0320 	and.w	r3, r3, #32
 800753c:	2b00      	cmp	r3, #0
 800753e:	d02d      	beq.n	800759c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007540:	4b6c      	ldr	r3, [pc, #432]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	08db      	lsrs	r3, r3, #3
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	4a6b      	ldr	r2, [pc, #428]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800754c:	fa22 f303 	lsr.w	r3, r2, r3
 8007550:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800756a:	4b62      	ldr	r3, [pc, #392]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757a:	ed97 6a02 	vldr	s12, [r7, #8]
 800757e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007704 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800758a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800758e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007596:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800759a:	e087      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007708 <HAL_RCC_GetSysClockFreq+0x2e8>
 80075aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ae:	4b51      	ldr	r3, [pc, #324]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075be:	ed97 6a02 	vldr	s12, [r7, #8]
 80075c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007704 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075de:	e065      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800770c <HAL_RCC_GetSysClockFreq+0x2ec>
 80075ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f2:	4b40      	ldr	r3, [pc, #256]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007602:	ed97 6a02 	vldr	s12, [r7, #8]
 8007606:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007704 <HAL_RCC_GetSysClockFreq+0x2e4>
 800760a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007622:	e043      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007710 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007636:	4b2f      	ldr	r3, [pc, #188]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007646:	ed97 6a02 	vldr	s12, [r7, #8]
 800764a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007704 <HAL_RCC_GetSysClockFreq+0x2e4>
 800764e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800765a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007666:	e021      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007672:	eddf 6a26 	vldr	s13, [pc, #152]	; 800770c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767a:	4b1e      	ldr	r3, [pc, #120]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768a:	ed97 6a02 	vldr	s12, [r7, #8]
 800768e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007704 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800769e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	0a5b      	lsrs	r3, r3, #9
 80076b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b6:	3301      	adds	r3, #1
 80076b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d0:	ee17 3a90 	vmov	r3, s15
 80076d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80076d6:	e005      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	61bb      	str	r3, [r7, #24]
    break;
 80076dc:	e002      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80076de:	4b07      	ldr	r3, [pc, #28]	; (80076fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076e0:	61bb      	str	r3, [r7, #24]
    break;
 80076e2:	bf00      	nop
  }

  return sysclockfreq;
 80076e4:	69bb      	ldr	r3, [r7, #24]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3724      	adds	r7, #36	; 0x24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	58024400 	.word	0x58024400
 80076f8:	03d09000 	.word	0x03d09000
 80076fc:	003d0900 	.word	0x003d0900
 8007700:	00f42400 	.word	0x00f42400
 8007704:	46000000 	.word	0x46000000
 8007708:	4c742400 	.word	0x4c742400
 800770c:	4a742400 	.word	0x4a742400
 8007710:	4b742400 	.word	0x4b742400

08007714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800771a:	f7ff fe81 	bl	8007420 <HAL_RCC_GetSysClockFreq>
 800771e:	4602      	mov	r2, r0
 8007720:	4b10      	ldr	r3, [pc, #64]	; (8007764 <HAL_RCC_GetHCLKFreq+0x50>)
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	490f      	ldr	r1, [pc, #60]	; (8007768 <HAL_RCC_GetHCLKFreq+0x54>)
 800772c:	5ccb      	ldrb	r3, [r1, r3]
 800772e:	f003 031f 	and.w	r3, r3, #31
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <HAL_RCC_GetHCLKFreq+0x50>)
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	4a09      	ldr	r2, [pc, #36]	; (8007768 <HAL_RCC_GetHCLKFreq+0x54>)
 8007742:	5cd3      	ldrb	r3, [r2, r3]
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	fa22 f303 	lsr.w	r3, r2, r3
 800774e:	4a07      	ldr	r2, [pc, #28]	; (800776c <HAL_RCC_GetHCLKFreq+0x58>)
 8007750:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007752:	4a07      	ldr	r2, [pc, #28]	; (8007770 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007758:	4b04      	ldr	r3, [pc, #16]	; (800776c <HAL_RCC_GetHCLKFreq+0x58>)
 800775a:	681b      	ldr	r3, [r3, #0]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	58024400 	.word	0x58024400
 8007768:	080127e4 	.word	0x080127e4
 800776c:	24000004 	.word	0x24000004
 8007770:	24000000 	.word	0x24000000

08007774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007778:	f7ff ffcc 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 800777c:	4602      	mov	r2, r0
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	091b      	lsrs	r3, r3, #4
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	4904      	ldr	r1, [pc, #16]	; (800779c <HAL_RCC_GetPCLK1Freq+0x28>)
 800778a:	5ccb      	ldrb	r3, [r1, r3]
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007794:	4618      	mov	r0, r3
 8007796:	bd80      	pop	{r7, pc}
 8007798:	58024400 	.word	0x58024400
 800779c:	080127e4 	.word	0x080127e4

080077a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80077a4:	f7ff ffb6 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 80077a8:	4602      	mov	r2, r0
 80077aa:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	4904      	ldr	r1, [pc, #16]	; (80077c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077b6:	5ccb      	ldrb	r3, [r1, r3]
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	58024400 	.word	0x58024400
 80077c8:	080127e4 	.word	0x080127e4

080077cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077d4:	2300      	movs	r3, #0
 80077d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077d8:	2300      	movs	r3, #0
 80077da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d03f      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077f0:	d02a      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80077f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077f6:	d824      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80077f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077fc:	d018      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80077fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007802:	d81e      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800780c:	d007      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800780e:	e018      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007810:	4bab      	ldr	r3, [pc, #684]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	4aaa      	ldr	r2, [pc, #680]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800781a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800781c:	e015      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3304      	adds	r3, #4
 8007822:	2102      	movs	r1, #2
 8007824:	4618      	mov	r0, r3
 8007826:	f001 fff3 	bl	8009810 <RCCEx_PLL2_Config>
 800782a:	4603      	mov	r3, r0
 800782c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800782e:	e00c      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3324      	adds	r3, #36	; 0x24
 8007834:	2102      	movs	r1, #2
 8007836:	4618      	mov	r0, r3
 8007838:	f002 f89c 	bl	8009974 <RCCEx_PLL3_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007840:	e003      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	75fb      	strb	r3, [r7, #23]
      break;
 8007846:	e000      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d109      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007850:	4b9b      	ldr	r3, [pc, #620]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800785c:	4998      	ldr	r1, [pc, #608]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800785e:	4313      	orrs	r3, r2
 8007860:	650b      	str	r3, [r1, #80]	; 0x50
 8007862:	e001      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007870:	2b00      	cmp	r3, #0
 8007872:	d03d      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007878:	2b04      	cmp	r3, #4
 800787a:	d826      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007899 	.word	0x08007899
 8007888:	080078a7 	.word	0x080078a7
 800788c:	080078b9 	.word	0x080078b9
 8007890:	080078d1 	.word	0x080078d1
 8007894:	080078d1 	.word	0x080078d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007898:	4b89      	ldr	r3, [pc, #548]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	4a88      	ldr	r2, [pc, #544]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800789e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078a4:	e015      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3304      	adds	r3, #4
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 ffaf 	bl	8009810 <RCCEx_PLL2_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078b6:	e00c      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3324      	adds	r3, #36	; 0x24
 80078bc:	2100      	movs	r1, #0
 80078be:	4618      	mov	r0, r3
 80078c0:	f002 f858 	bl	8009974 <RCCEx_PLL3_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078c8:	e003      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
      break;
 80078ce:	e000      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80078d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d109      	bne.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078d8:	4b79      	ldr	r3, [pc, #484]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078dc:	f023 0207 	bic.w	r2, r3, #7
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e4:	4976      	ldr	r1, [pc, #472]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	650b      	str	r3, [r1, #80]	; 0x50
 80078ea:	e001      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d042      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007904:	d02b      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790a:	d825      	bhi.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800790c:	2bc0      	cmp	r3, #192	; 0xc0
 800790e:	d028      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007910:	2bc0      	cmp	r3, #192	; 0xc0
 8007912:	d821      	bhi.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007914:	2b80      	cmp	r3, #128	; 0x80
 8007916:	d016      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007918:	2b80      	cmp	r3, #128	; 0x80
 800791a:	d81d      	bhi.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d007      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007924:	e018      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007926:	4b66      	ldr	r3, [pc, #408]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	4a65      	ldr	r2, [pc, #404]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800792c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007932:	e017      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3304      	adds	r3, #4
 8007938:	2100      	movs	r1, #0
 800793a:	4618      	mov	r0, r3
 800793c:	f001 ff68 	bl	8009810 <RCCEx_PLL2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007944:	e00e      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3324      	adds	r3, #36	; 0x24
 800794a:	2100      	movs	r1, #0
 800794c:	4618      	mov	r0, r3
 800794e:	f002 f811 	bl	8009974 <RCCEx_PLL3_Config>
 8007952:	4603      	mov	r3, r0
 8007954:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007956:	e005      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	75fb      	strb	r3, [r7, #23]
      break;
 800795c:	e002      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800795e:	bf00      	nop
 8007960:	e000      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800796a:	4b55      	ldr	r3, [pc, #340]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800796c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007976:	4952      	ldr	r1, [pc, #328]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007978:	4313      	orrs	r3, r2
 800797a:	650b      	str	r3, [r1, #80]	; 0x50
 800797c:	e001      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800798a:	2b00      	cmp	r3, #0
 800798c:	d049      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007994:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007998:	d030      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800799a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800799e:	d82a      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079a4:	d02c      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80079a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079aa:	d824      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b0:	d018      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80079b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b6:	d81e      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80079bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079c0:	d007      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80079c2:	e018      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c4:	4b3e      	ldr	r3, [pc, #248]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	4a3d      	ldr	r2, [pc, #244]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079d0:	e017      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3304      	adds	r3, #4
 80079d6:	2100      	movs	r1, #0
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 ff19 	bl	8009810 <RCCEx_PLL2_Config>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80079e2:	e00e      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3324      	adds	r3, #36	; 0x24
 80079e8:	2100      	movs	r1, #0
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 ffc2 	bl	8009974 <RCCEx_PLL3_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079f4:	e005      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
      break;
 80079fa:	e002      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80079fc:	bf00      	nop
 80079fe:	e000      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a08:	4b2d      	ldr	r3, [pc, #180]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a16:	492a      	ldr	r1, [pc, #168]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	658b      	str	r3, [r1, #88]	; 0x58
 8007a1c:	e001      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d04c      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a38:	d030      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a3e:	d82a      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007a40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a44:	d02c      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007a46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a4a:	d824      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007a4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a50:	d018      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a56:	d81e      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a60:	d007      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007a62:	e018      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a64:	4b16      	ldr	r3, [pc, #88]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a70:	e017      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3304      	adds	r3, #4
 8007a76:	2100      	movs	r1, #0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f001 fec9 	bl	8009810 <RCCEx_PLL2_Config>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a82:	e00e      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3324      	adds	r3, #36	; 0x24
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 ff72 	bl	8009974 <RCCEx_PLL3_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a94:	e005      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9a:	e002      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e000      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10d      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007aa8:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ab6:	4902      	ldr	r1, [pc, #8]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	658b      	str	r3, [r1, #88]	; 0x58
 8007abc:	e004      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007abe:	bf00      	nop
 8007ac0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d032      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad8:	2b30      	cmp	r3, #48	; 0x30
 8007ada:	d01c      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007adc:	2b30      	cmp	r3, #48	; 0x30
 8007ade:	d817      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d00c      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d813      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d016      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007aec:	2b10      	cmp	r3, #16
 8007aee:	d10f      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af0:	4baf      	ldr	r3, [pc, #700]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4aae      	ldr	r2, [pc, #696]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007afc:	e00e      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3304      	adds	r3, #4
 8007b02:	2102      	movs	r1, #2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 fe83 	bl	8009810 <RCCEx_PLL2_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b0e:	e005      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
      break;
 8007b14:	e002      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007b16:	bf00      	nop
 8007b18:	e000      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b22:	4ba3      	ldr	r3, [pc, #652]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2e:	49a0      	ldr	r1, [pc, #640]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b34:	e001      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d047      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b4e:	d030      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b54:	d82a      	bhi.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007b56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b5a:	d02c      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007b5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b60:	d824      	bhi.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b66:	d018      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6c:	d81e      	bhi.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b76:	d007      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007b78:	e018      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b7a:	4b8d      	ldr	r3, [pc, #564]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	4a8c      	ldr	r2, [pc, #560]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b86:	e017      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 fe3e 	bl	8009810 <RCCEx_PLL2_Config>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b98:	e00e      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3324      	adds	r3, #36	; 0x24
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 fee7 	bl	8009974 <RCCEx_PLL3_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007baa:	e005      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb0:	e002      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007bb2:	bf00      	nop
 8007bb4:	e000      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007bbe:	4b7c      	ldr	r3, [pc, #496]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bca:	4979      	ldr	r1, [pc, #484]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	650b      	str	r3, [r1, #80]	; 0x50
 8007bd0:	e001      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d049      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bea:	d02e      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bf0:	d828      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bf6:	d02a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007bf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bfc:	d822      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007bfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c02:	d026      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007c04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c08:	d81c      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c0e:	d010      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c14:	d816      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01d      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c1e:	d111      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3304      	adds	r3, #4
 8007c24:	2101      	movs	r1, #1
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 fdf2 	bl	8009810 <RCCEx_PLL2_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c30:	e012      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3324      	adds	r3, #36	; 0x24
 8007c36:	2101      	movs	r1, #1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 fe9b 	bl	8009974 <RCCEx_PLL3_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c42:	e009      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	75fb      	strb	r3, [r7, #23]
      break;
 8007c48:	e006      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c4a:	bf00      	nop
 8007c4c:	e004      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c4e:	bf00      	nop
 8007c50:	e002      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c52:	bf00      	nop
 8007c54:	e000      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c5e:	4b54      	ldr	r3, [pc, #336]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c62:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6a:	4951      	ldr	r1, [pc, #324]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	650b      	str	r3, [r1, #80]	; 0x50
 8007c70:	e001      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d04b      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c8c:	d02e      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c92:	d828      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c98:	d02a      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9e:	d822      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ca0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ca4:	d026      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007ca6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007caa:	d81c      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb0:	d010      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb6:	d816      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01d      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cc0:	d111      	bne.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 fda1 	bl	8009810 <RCCEx_PLL2_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007cd2:	e012      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3324      	adds	r3, #36	; 0x24
 8007cd8:	2101      	movs	r1, #1
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 fe4a 	bl	8009974 <RCCEx_PLL3_Config>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ce4:	e009      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cea:	e006      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007cec:	bf00      	nop
 8007cee:	e004      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007cf0:	bf00      	nop
 8007cf2:	e002      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007cf4:	bf00      	nop
 8007cf6:	e000      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d00:	4b2b      	ldr	r3, [pc, #172]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d04:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d0e:	4928      	ldr	r1, [pc, #160]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	658b      	str	r3, [r1, #88]	; 0x58
 8007d14:	e001      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d02f      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d2e:	d00e      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d34:	d814      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d015      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d3e:	d10f      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d40:	4b1b      	ldr	r3, [pc, #108]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	4a1a      	ldr	r2, [pc, #104]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d4c:	e00c      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3304      	adds	r3, #4
 8007d52:	2101      	movs	r1, #1
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 fd5b 	bl	8009810 <RCCEx_PLL2_Config>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d5e:	e003      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	75fb      	strb	r3, [r7, #23]
      break;
 8007d64:	e000      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d6e:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d7a:	490d      	ldr	r1, [pc, #52]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	650b      	str	r3, [r1, #80]	; 0x50
 8007d80:	e001      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d033      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d81c      	bhi.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007ddb 	.word	0x08007ddb
 8007da4:	08007db5 	.word	0x08007db5
 8007da8:	08007dc3 	.word	0x08007dc3
 8007dac:	08007ddb 	.word	0x08007ddb
 8007db0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db4:	4bb8      	ldr	r3, [pc, #736]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	4ab7      	ldr	r2, [pc, #732]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007dc0:	e00c      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	2102      	movs	r1, #2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 fd21 	bl	8009810 <RCCEx_PLL2_Config>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007dd2:	e003      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd8:	e000      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007de2:	4bad      	ldr	r3, [pc, #692]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de6:	f023 0203 	bic.w	r2, r3, #3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dee:	49aa      	ldr	r1, [pc, #680]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007df4:	e001      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 8086 	beq.w	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e08:	4ba4      	ldr	r3, [pc, #656]	; (800809c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4aa3      	ldr	r2, [pc, #652]	; (800809c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e14:	f7f9 fd74 	bl	8001900 <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e1a:	e009      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e1c:	f7f9 fd70 	bl	8001900 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b64      	cmp	r3, #100	; 0x64
 8007e28:	d902      	bls.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	75fb      	strb	r3, [r7, #23]
        break;
 8007e2e:	e005      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e30:	4b9a      	ldr	r3, [pc, #616]	; (800809c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0ef      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d166      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e42:	4b95      	ldr	r3, [pc, #596]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e4c:	4053      	eors	r3, r2
 8007e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d013      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e56:	4b90      	ldr	r3, [pc, #576]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e60:	4b8d      	ldr	r3, [pc, #564]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e64:	4a8c      	ldr	r2, [pc, #560]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e6a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e6c:	4b8a      	ldr	r3, [pc, #552]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	4a89      	ldr	r2, [pc, #548]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e76:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e78:	4a87      	ldr	r2, [pc, #540]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e88:	d115      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8a:	f7f9 fd39 	bl	8001900 <HAL_GetTick>
 8007e8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e90:	e00b      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e92:	f7f9 fd35 	bl	8001900 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d902      	bls.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	75fb      	strb	r3, [r7, #23]
            break;
 8007ea8:	e005      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eaa:	4b7b      	ldr	r3, [pc, #492]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0ed      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d126      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eca:	d10d      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007ecc:	4b72      	ldr	r3, [pc, #456]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007eda:	0919      	lsrs	r1, r3, #4
 8007edc:	4b70      	ldr	r3, [pc, #448]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007ede:	400b      	ands	r3, r1
 8007ee0:	496d      	ldr	r1, [pc, #436]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	610b      	str	r3, [r1, #16]
 8007ee6:	e005      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007ee8:	4b6b      	ldr	r3, [pc, #428]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	4a6a      	ldr	r2, [pc, #424]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ef2:	6113      	str	r3, [r2, #16]
 8007ef4:	4b68      	ldr	r3, [pc, #416]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f02:	4965      	ldr	r1, [pc, #404]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	670b      	str	r3, [r1, #112]	; 0x70
 8007f08:	e004      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	75bb      	strb	r3, [r7, #22]
 8007f0e:	e001      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d07e      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f24:	2b28      	cmp	r3, #40	; 0x28
 8007f26:	d867      	bhi.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007fff 	.word	0x08007fff
 8007f34:	08007ff9 	.word	0x08007ff9
 8007f38:	08007ff9 	.word	0x08007ff9
 8007f3c:	08007ff9 	.word	0x08007ff9
 8007f40:	08007ff9 	.word	0x08007ff9
 8007f44:	08007ff9 	.word	0x08007ff9
 8007f48:	08007ff9 	.word	0x08007ff9
 8007f4c:	08007ff9 	.word	0x08007ff9
 8007f50:	08007fd5 	.word	0x08007fd5
 8007f54:	08007ff9 	.word	0x08007ff9
 8007f58:	08007ff9 	.word	0x08007ff9
 8007f5c:	08007ff9 	.word	0x08007ff9
 8007f60:	08007ff9 	.word	0x08007ff9
 8007f64:	08007ff9 	.word	0x08007ff9
 8007f68:	08007ff9 	.word	0x08007ff9
 8007f6c:	08007ff9 	.word	0x08007ff9
 8007f70:	08007fe7 	.word	0x08007fe7
 8007f74:	08007ff9 	.word	0x08007ff9
 8007f78:	08007ff9 	.word	0x08007ff9
 8007f7c:	08007ff9 	.word	0x08007ff9
 8007f80:	08007ff9 	.word	0x08007ff9
 8007f84:	08007ff9 	.word	0x08007ff9
 8007f88:	08007ff9 	.word	0x08007ff9
 8007f8c:	08007ff9 	.word	0x08007ff9
 8007f90:	08007fff 	.word	0x08007fff
 8007f94:	08007ff9 	.word	0x08007ff9
 8007f98:	08007ff9 	.word	0x08007ff9
 8007f9c:	08007ff9 	.word	0x08007ff9
 8007fa0:	08007ff9 	.word	0x08007ff9
 8007fa4:	08007ff9 	.word	0x08007ff9
 8007fa8:	08007ff9 	.word	0x08007ff9
 8007fac:	08007ff9 	.word	0x08007ff9
 8007fb0:	08007fff 	.word	0x08007fff
 8007fb4:	08007ff9 	.word	0x08007ff9
 8007fb8:	08007ff9 	.word	0x08007ff9
 8007fbc:	08007ff9 	.word	0x08007ff9
 8007fc0:	08007ff9 	.word	0x08007ff9
 8007fc4:	08007ff9 	.word	0x08007ff9
 8007fc8:	08007ff9 	.word	0x08007ff9
 8007fcc:	08007ff9 	.word	0x08007ff9
 8007fd0:	08007fff 	.word	0x08007fff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	2101      	movs	r1, #1
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 fc18 	bl	8009810 <RCCEx_PLL2_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007fe4:	e00c      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3324      	adds	r3, #36	; 0x24
 8007fea:	2101      	movs	r1, #1
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 fcc1 	bl	8009974 <RCCEx_PLL3_Config>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ff6:	e003      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8007ffc:	e000      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008006:	4b24      	ldr	r3, [pc, #144]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008012:	4921      	ldr	r1, [pc, #132]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008014:	4313      	orrs	r3, r2
 8008016:	654b      	str	r3, [r1, #84]	; 0x54
 8008018:	e001      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d03e      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802e:	2b05      	cmp	r3, #5
 8008030:	d820      	bhi.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008032:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	0800807b 	.word	0x0800807b
 800803c:	08008051 	.word	0x08008051
 8008040:	08008063 	.word	0x08008063
 8008044:	0800807b 	.word	0x0800807b
 8008048:	0800807b 	.word	0x0800807b
 800804c:	0800807b 	.word	0x0800807b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3304      	adds	r3, #4
 8008054:	2101      	movs	r1, #1
 8008056:	4618      	mov	r0, r3
 8008058:	f001 fbda 	bl	8009810 <RCCEx_PLL2_Config>
 800805c:	4603      	mov	r3, r0
 800805e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008060:	e00c      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3324      	adds	r3, #36	; 0x24
 8008066:	2101      	movs	r1, #1
 8008068:	4618      	mov	r0, r3
 800806a:	f001 fc83 	bl	8009974 <RCCEx_PLL3_Config>
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008072:	e003      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	75fb      	strb	r3, [r7, #23]
      break;
 8008078:	e000      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800807a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d110      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008082:	4b05      	ldr	r3, [pc, #20]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008086:	f023 0207 	bic.w	r2, r3, #7
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800808e:	4902      	ldr	r1, [pc, #8]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008090:	4313      	orrs	r3, r2
 8008092:	654b      	str	r3, [r1, #84]	; 0x54
 8008094:	e008      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008096:	bf00      	nop
 8008098:	58024400 	.word	0x58024400
 800809c:	58024800 	.word	0x58024800
 80080a0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a4:	7dfb      	ldrb	r3, [r7, #23]
 80080a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d039      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	d820      	bhi.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80080be:	a201      	add	r2, pc, #4	; (adr r2, 80080c4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80080c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c4:	08008107 	.word	0x08008107
 80080c8:	080080dd 	.word	0x080080dd
 80080cc:	080080ef 	.word	0x080080ef
 80080d0:	08008107 	.word	0x08008107
 80080d4:	08008107 	.word	0x08008107
 80080d8:	08008107 	.word	0x08008107
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3304      	adds	r3, #4
 80080e0:	2101      	movs	r1, #1
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fb94 	bl	8009810 <RCCEx_PLL2_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80080ec:	e00c      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3324      	adds	r3, #36	; 0x24
 80080f2:	2101      	movs	r1, #1
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 fc3d 	bl	8009974 <RCCEx_PLL3_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80080fe:	e003      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	75fb      	strb	r3, [r7, #23]
      break;
 8008104:	e000      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10a      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800810e:	4bb7      	ldr	r3, [pc, #732]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008112:	f023 0207 	bic.w	r2, r3, #7
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811c:	49b3      	ldr	r1, [pc, #716]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800811e:	4313      	orrs	r3, r2
 8008120:	658b      	str	r3, [r1, #88]	; 0x58
 8008122:	e001      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b00      	cmp	r3, #0
 8008132:	d04b      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800813a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800813e:	d02e      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008144:	d828      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814a:	d02a      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800814c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008150:	d822      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008152:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008156:	d026      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008158:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800815c:	d81c      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800815e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008162:	d010      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008168:	d816      	bhi.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d01d      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800816e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008172:	d111      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3304      	adds	r3, #4
 8008178:	2100      	movs	r1, #0
 800817a:	4618      	mov	r0, r3
 800817c:	f001 fb48 	bl	8009810 <RCCEx_PLL2_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008184:	e012      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3324      	adds	r3, #36	; 0x24
 800818a:	2102      	movs	r1, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f001 fbf1 	bl	8009974 <RCCEx_PLL3_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008196:	e009      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	75fb      	strb	r3, [r7, #23]
      break;
 800819c:	e006      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800819e:	bf00      	nop
 80081a0:	e004      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80081a2:	bf00      	nop
 80081a4:	e002      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80081a6:	bf00      	nop
 80081a8:	e000      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80081aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081b2:	4b8e      	ldr	r3, [pc, #568]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081c0:	498a      	ldr	r1, [pc, #552]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	654b      	str	r3, [r1, #84]	; 0x54
 80081c6:	e001      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d04b      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80081e2:	d02e      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80081e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80081e8:	d828      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80081ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ee:	d02a      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80081f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f4:	d822      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80081f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081fa:	d026      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80081fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008200:	d81c      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008206:	d010      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800820c:	d816      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d01d      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008216:	d111      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f001 faf6 	bl	8009810 <RCCEx_PLL2_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008228:	e012      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3324      	adds	r3, #36	; 0x24
 800822e:	2102      	movs	r1, #2
 8008230:	4618      	mov	r0, r3
 8008232:	f001 fb9f 	bl	8009974 <RCCEx_PLL3_Config>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800823a:	e009      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	75fb      	strb	r3, [r7, #23]
      break;
 8008240:	e006      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008242:	bf00      	nop
 8008244:	e004      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008246:	bf00      	nop
 8008248:	e002      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800824a:	bf00      	nop
 800824c:	e000      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800824e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10a      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008256:	4b65      	ldr	r3, [pc, #404]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008264:	4961      	ldr	r1, [pc, #388]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008266:	4313      	orrs	r3, r2
 8008268:	658b      	str	r3, [r1, #88]	; 0x58
 800826a:	e001      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008278:	2b00      	cmp	r3, #0
 800827a:	d04b      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008282:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008286:	d02e      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008288:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800828c:	d828      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800828e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008292:	d02a      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008298:	d822      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800829a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800829e:	d026      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80082a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80082a4:	d81c      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80082a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082aa:	d010      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80082ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082b0:	d816      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d01d      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80082b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ba:	d111      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3304      	adds	r3, #4
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f001 faa4 	bl	8009810 <RCCEx_PLL2_Config>
 80082c8:	4603      	mov	r3, r0
 80082ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80082cc:	e012      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3324      	adds	r3, #36	; 0x24
 80082d2:	2102      	movs	r1, #2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 fb4d 	bl	8009974 <RCCEx_PLL3_Config>
 80082da:	4603      	mov	r3, r0
 80082dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80082de:	e009      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	75fb      	strb	r3, [r7, #23]
      break;
 80082e4:	e006      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80082e6:	bf00      	nop
 80082e8:	e004      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80082ea:	bf00      	nop
 80082ec:	e002      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80082ee:	bf00      	nop
 80082f0:	e000      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80082f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082fa:	4b3c      	ldr	r3, [pc, #240]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008308:	4938      	ldr	r1, [pc, #224]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800830a:	4313      	orrs	r3, r2
 800830c:	658b      	str	r3, [r1, #88]	; 0x58
 800830e:	e001      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01a      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832a:	d10a      	bne.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3324      	adds	r3, #36	; 0x24
 8008330:	2102      	movs	r1, #2
 8008332:	4618      	mov	r0, r3
 8008334:	f001 fb1e 	bl	8009974 <RCCEx_PLL3_Config>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008342:	4b2a      	ldr	r3, [pc, #168]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008350:	4926      	ldr	r1, [pc, #152]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008352:	4313      	orrs	r3, r2
 8008354:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0310 	and.w	r3, r3, #16
 800835e:	2b00      	cmp	r3, #0
 8008360:	d01a      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800836c:	d10a      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3324      	adds	r3, #36	; 0x24
 8008372:	2102      	movs	r1, #2
 8008374:	4618      	mov	r0, r3
 8008376:	f001 fafd 	bl	8009974 <RCCEx_PLL3_Config>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008384:	4b19      	ldr	r3, [pc, #100]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008392:	4916      	ldr	r1, [pc, #88]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008394:	4313      	orrs	r3, r2
 8008396:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d036      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083ae:	d01f      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80083b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083b4:	d817      	bhi.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80083ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083be:	d009      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80083c0:	e011      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3304      	adds	r3, #4
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fa21 	bl	8009810 <RCCEx_PLL2_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80083d2:	e00e      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3324      	adds	r3, #36	; 0x24
 80083d8:	2102      	movs	r1, #2
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 faca 	bl	8009974 <RCCEx_PLL3_Config>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80083e4:	e005      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	75fb      	strb	r3, [r7, #23]
      break;
 80083ea:	e002      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80083ec:	58024400 	.word	0x58024400
      break;
 80083f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083f8:	4b93      	ldr	r3, [pc, #588]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008406:	4990      	ldr	r1, [pc, #576]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008408:	4313      	orrs	r3, r2
 800840a:	658b      	str	r3, [r1, #88]	; 0x58
 800840c:	e001      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d033      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008424:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008428:	d01c      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800842a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800842e:	d816      	bhi.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008434:	d003      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800843a:	d007      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800843c:	e00f      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800843e:	4b82      	ldr	r3, [pc, #520]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	4a81      	ldr	r2, [pc, #516]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800844a:	e00c      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3324      	adds	r3, #36	; 0x24
 8008450:	2101      	movs	r1, #1
 8008452:	4618      	mov	r0, r3
 8008454:	f001 fa8e 	bl	8009974 <RCCEx_PLL3_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	75fb      	strb	r3, [r7, #23]
      break;
 8008462:	e000      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10a      	bne.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800846c:	4b76      	ldr	r3, [pc, #472]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800846e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800847a:	4973      	ldr	r1, [pc, #460]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800847c:	4313      	orrs	r3, r2
 800847e:	654b      	str	r3, [r1, #84]	; 0x54
 8008480:	e001      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d029      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800849a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800849e:	d007      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80084a0:	e00f      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a2:	4b69      	ldr	r3, [pc, #420]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a6:	4a68      	ldr	r2, [pc, #416]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80084ae:	e00b      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3304      	adds	r3, #4
 80084b4:	2102      	movs	r1, #2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 f9aa 	bl	8009810 <RCCEx_PLL2_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80084c0:	e002      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	75fb      	strb	r3, [r7, #23]
      break;
 80084c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084ce:	4b5e      	ldr	r3, [pc, #376]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084da:	495b      	ldr	r1, [pc, #364]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80084e0:	e001      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3324      	adds	r3, #36	; 0x24
 80084f6:	2102      	movs	r1, #2
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 fa3b 	bl	8009974 <RCCEx_PLL3_Config>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d030      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800851c:	d017      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800851e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008522:	d811      	bhi.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d013      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800852a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800852e:	d80b      	bhi.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d010      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008538:	d106      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800853a:	4b43      	ldr	r3, [pc, #268]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	4a42      	ldr	r2, [pc, #264]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008544:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008546:	e007      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	75fb      	strb	r3, [r7, #23]
      break;
 800854c:	e004      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800854e:	bf00      	nop
 8008550:	e002      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008552:	bf00      	nop
 8008554:	e000      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800855e:	4b3a      	ldr	r3, [pc, #232]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008562:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856a:	4937      	ldr	r1, [pc, #220]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800856c:	4313      	orrs	r3, r2
 800856e:	654b      	str	r3, [r1, #84]	; 0x54
 8008570:	e001      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d008      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008582:	4b31      	ldr	r3, [pc, #196]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008586:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858e:	492e      	ldr	r1, [pc, #184]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008590:	4313      	orrs	r3, r2
 8008592:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d009      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80085a0:	4b29      	ldr	r3, [pc, #164]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085ae:	4926      	ldr	r1, [pc, #152]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d008      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085c0:	4b21      	ldr	r3, [pc, #132]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085cc:	491e      	ldr	r1, [pc, #120]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00d      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085de:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	4a19      	ldr	r2, [pc, #100]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085e8:	6113      	str	r3, [r2, #16]
 80085ea:	4b17      	ldr	r3, [pc, #92]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80085f4:	4914      	ldr	r1, [pc, #80]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da08      	bge.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008602:	4b11      	ldr	r3, [pc, #68]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008606:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860e:	490e      	ldr	r1, [pc, #56]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008610:	4313      	orrs	r3, r2
 8008612:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d009      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008620:	4b09      	ldr	r3, [pc, #36]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008624:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800862e:	4906      	ldr	r1, [pc, #24]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008630:	4313      	orrs	r3, r2
 8008632:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008634:	7dbb      	ldrb	r3, [r7, #22]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	e000      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
}
 8008640:	4618      	mov	r0, r3
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	58024400 	.word	0x58024400

0800864c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b090      	sub	sp, #64	; 0x40
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800865a:	f040 8095 	bne.w	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800865e:	4bae      	ldr	r3, [pc, #696]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	633b      	str	r3, [r7, #48]	; 0x30
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2b04      	cmp	r3, #4
 800866c:	f200 8088 	bhi.w	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008670:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008676:	bf00      	nop
 8008678:	0800868d 	.word	0x0800868d
 800867c:	080086b5 	.word	0x080086b5
 8008680:	080086dd 	.word	0x080086dd
 8008684:	08008779 	.word	0x08008779
 8008688:	08008705 	.word	0x08008705

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800868c:	4ba2      	ldr	r3, [pc, #648]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008694:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008698:	d108      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800869a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 ff64 	bl	800956c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086a8:	f000 bc95 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086b0:	f000 bc91 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086b4:	4b98      	ldr	r3, [pc, #608]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086c0:	d108      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086c2:	f107 0318 	add.w	r3, r7, #24
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fca8 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086d0:	f000 bc81 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086d8:	f000 bc7d 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086dc:	4b8e      	ldr	r3, [pc, #568]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086e8:	d108      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086ea:	f107 030c 	add.w	r3, r7, #12
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fde8 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086f8:	f000 bc6d 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008700:	f000 bc69 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008704:	4b84      	ldr	r3, [pc, #528]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800870c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800870e:	4b82      	ldr	r3, [pc, #520]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b04      	cmp	r3, #4
 8008718:	d10c      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	2b00      	cmp	r3, #0
 800871e:	d109      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008720:	4b7d      	ldr	r3, [pc, #500]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	08db      	lsrs	r3, r3, #3
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	4a7c      	ldr	r2, [pc, #496]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800872c:	fa22 f303 	lsr.w	r3, r2, r3
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008732:	e01f      	b.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008734:	4b78      	ldr	r3, [pc, #480]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008740:	d106      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008748:	d102      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800874a:	4b75      	ldr	r3, [pc, #468]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874e:	e011      	b.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008750:	4b71      	ldr	r3, [pc, #452]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800875c:	d106      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008764:	d102      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008766:	4b6f      	ldr	r3, [pc, #444]	; (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800876a:	e003      	b.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008770:	f000 bc31 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008774:	f000 bc2f 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008778:	4b6b      	ldr	r3, [pc, #428]	; (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800877a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800877c:	f000 bc2b 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008784:	f000 bc27 	b.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800878e:	f040 8095 	bne.w	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008792:	4b61      	ldr	r3, [pc, #388]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008796:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800879a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087a2:	d04d      	beq.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087aa:	f200 8084 	bhi.w	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	2bc0      	cmp	r3, #192	; 0xc0
 80087b2:	d07d      	beq.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	2bc0      	cmp	r3, #192	; 0xc0
 80087b8:	d87d      	bhi.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	2b80      	cmp	r3, #128	; 0x80
 80087be:	d02d      	beq.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	2b80      	cmp	r3, #128	; 0x80
 80087c4:	d877      	bhi.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	2b40      	cmp	r3, #64	; 0x40
 80087d0:	d012      	beq.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80087d2:	e070      	b.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087d4:	4b50      	ldr	r3, [pc, #320]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087e0:	d107      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fec0 	bl	800956c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087f0:	e3f1      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087f6:	e3ee      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087f8:	4b47      	ldr	r3, [pc, #284]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008804:	d107      	bne.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008806:	f107 0318 	add.w	r3, r7, #24
 800880a:	4618      	mov	r0, r3
 800880c:	f000 fc06 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008814:	e3df      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800881a:	e3dc      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800881c:	4b3e      	ldr	r3, [pc, #248]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008828:	d107      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800882a:	f107 030c 	add.w	r3, r7, #12
 800882e:	4618      	mov	r0, r3
 8008830:	f000 fd48 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008838:	e3cd      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800883e:	e3ca      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008840:	4b35      	ldr	r3, [pc, #212]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008848:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800884a:	4b33      	ldr	r3, [pc, #204]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0304 	and.w	r3, r3, #4
 8008852:	2b04      	cmp	r3, #4
 8008854:	d10c      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008858:	2b00      	cmp	r3, #0
 800885a:	d109      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800885c:	4b2e      	ldr	r3, [pc, #184]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	08db      	lsrs	r3, r3, #3
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	4a2d      	ldr	r2, [pc, #180]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008868:	fa22 f303 	lsr.w	r3, r2, r3
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800886e:	e01e      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008870:	4b29      	ldr	r3, [pc, #164]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800887c:	d106      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008884:	d102      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008886:	4b26      	ldr	r3, [pc, #152]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800888a:	e010      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800888c:	4b22      	ldr	r3, [pc, #136]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008898:	d106      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088a0:	d102      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80088a2:	4b20      	ldr	r3, [pc, #128]	; (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a6:	e002      	b.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80088ac:	e393      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088ae:	e392      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088b0:	4b1d      	ldr	r3, [pc, #116]	; (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088b4:	e38f      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088ba:	e38c      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088c2:	f040 80a7 	bne.w	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80088c6:	4b14      	ldr	r3, [pc, #80]	; (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80088ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088d6:	d05f      	beq.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088de:	f200 8096 	bhi.w	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088e8:	f000 808e 	beq.w	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088f2:	f200 808c 	bhi.w	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088fc:	d03a      	beq.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008904:	f200 8083 	bhi.w	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00e      	beq.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008914:	d01c      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008916:	e07a      	b.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008918:	58024400 	.word	0x58024400
 800891c:	03d09000 	.word	0x03d09000
 8008920:	003d0900 	.word	0x003d0900
 8008924:	00f42400 	.word	0x00f42400
 8008928:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800892c:	4baa      	ldr	r3, [pc, #680]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008938:	d107      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800893a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fe14 	bl	800956c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008948:	e345      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800894e:	e342      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008950:	4ba1      	ldr	r3, [pc, #644]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800895c:	d107      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800895e:	f107 0318 	add.w	r3, r7, #24
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fb5a 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800896c:	e333      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008972:	e330      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008974:	4b98      	ldr	r3, [pc, #608]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800897c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008980:	d107      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008982:	f107 030c 	add.w	r3, r7, #12
 8008986:	4618      	mov	r0, r3
 8008988:	f000 fc9c 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008990:	e321      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008996:	e31e      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008998:	4b8f      	ldr	r3, [pc, #572]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800899a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800899c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089a2:	4b8d      	ldr	r3, [pc, #564]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d10c      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d109      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089b4:	4b88      	ldr	r3, [pc, #544]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	08db      	lsrs	r3, r3, #3
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	4a87      	ldr	r2, [pc, #540]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80089c0:	fa22 f303 	lsr.w	r3, r2, r3
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c6:	e01e      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089c8:	4b83      	ldr	r3, [pc, #524]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d4:	d106      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80089d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089dc:	d102      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80089de:	4b80      	ldr	r3, [pc, #512]	; (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80089e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e2:	e010      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089e4:	4b7c      	ldr	r3, [pc, #496]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089f0:	d106      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80089f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f8:	d102      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80089fa:	4b7a      	ldr	r3, [pc, #488]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80089fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fe:	e002      	b.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a04:	e2e7      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a06:	e2e6      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a08:	4b77      	ldr	r3, [pc, #476]	; (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a0c:	e2e3      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a12:	e2e0      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a1a:	f040 809c 	bne.w	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008a1e:	4b6e      	ldr	r3, [pc, #440]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a22:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008a26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a2e:	d054      	beq.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a36:	f200 808b 	bhi.w	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a40:	f000 8083 	beq.w	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a4a:	f200 8081 	bhi.w	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a54:	d02f      	beq.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a5c:	d878      	bhi.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a6a:	d012      	beq.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008a6c:	e070      	b.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a6e:	4b5a      	ldr	r3, [pc, #360]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a7a:	d107      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fd73 	bl	800956c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a8a:	e2a4      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a90:	e2a1      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a92:	4b51      	ldr	r3, [pc, #324]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a9e:	d107      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aa0:	f107 0318 	add.w	r3, r7, #24
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fab9 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008aae:	e292      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ab4:	e28f      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ab6:	4b48      	ldr	r3, [pc, #288]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ac2:	d107      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac4:	f107 030c 	add.w	r3, r7, #12
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fbfb 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ad2:	e280      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ad8:	e27d      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ada:	4b3f      	ldr	r3, [pc, #252]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ae2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ae4:	4b3c      	ldr	r3, [pc, #240]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d10c      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d109      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008af6:	4b38      	ldr	r3, [pc, #224]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	08db      	lsrs	r3, r3, #3
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	4a36      	ldr	r2, [pc, #216]	; (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008b02:	fa22 f303 	lsr.w	r3, r2, r3
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b08:	e01e      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b0a:	4b33      	ldr	r3, [pc, #204]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b16:	d106      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b1e:	d102      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b20:	4b2f      	ldr	r3, [pc, #188]	; (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b24:	e010      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b26:	4b2c      	ldr	r3, [pc, #176]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b32:	d106      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b3a:	d102      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b3c:	4b29      	ldr	r3, [pc, #164]	; (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b40:	e002      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b46:	e246      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b48:	e245      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b4a:	4b27      	ldr	r3, [pc, #156]	; (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b4e:	e242      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b54:	e23f      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b5c:	f040 80a8 	bne.w	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008b60:	4b1d      	ldr	r3, [pc, #116]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b64:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008b68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b70:	d060      	beq.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b78:	f200 8097 	bhi.w	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b82:	f000 808f 	beq.w	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b8c:	f200 808d 	bhi.w	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b96:	d03b      	beq.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b9e:	f200 8084 	bhi.w	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d004      	beq.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bae:	d01d      	beq.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008bb0:	e07b      	b.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bbe:	d107      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fcd1 	bl	800956c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bce:	e202      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd4:	e1ff      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	03d09000 	.word	0x03d09000
 8008be0:	003d0900 	.word	0x003d0900
 8008be4:	00f42400 	.word	0x00f42400
 8008be8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bec:	4ba3      	ldr	r3, [pc, #652]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bf8:	d107      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bfa:	f107 0318 	add.w	r3, r7, #24
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fa0c 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c08:	e1e5      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c0e:	e1e2      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c10:	4b9a      	ldr	r3, [pc, #616]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c1c:	d107      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c1e:	f107 030c 	add.w	r3, r7, #12
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fb4e 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c2c:	e1d3      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c32:	e1d0      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c34:	4b91      	ldr	r3, [pc, #580]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c3c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c3e:	4b8f      	ldr	r3, [pc, #572]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d10c      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d109      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c50:	4b8a      	ldr	r3, [pc, #552]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	08db      	lsrs	r3, r3, #3
 8008c56:	f003 0303 	and.w	r3, r3, #3
 8008c5a:	4a89      	ldr	r2, [pc, #548]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c62:	e01e      	b.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c64:	4b85      	ldr	r3, [pc, #532]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c70:	d106      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c78:	d102      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c7a:	4b82      	ldr	r3, [pc, #520]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c7e:	e010      	b.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c80:	4b7e      	ldr	r3, [pc, #504]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c8c:	d106      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c94:	d102      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c96:	4b7c      	ldr	r3, [pc, #496]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c9a:	e002      	b.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ca0:	e199      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ca2:	e198      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ca4:	4b79      	ldr	r3, [pc, #484]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca8:	e195      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cae:	e192      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008cb6:	d173      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008cb8:	4b70      	ldr	r3, [pc, #448]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008cc0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cc8:	d02f      	beq.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cd0:	d863      	bhi.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d004      	beq.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cde:	d012      	beq.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008ce0:	e05b      	b.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ce2:	4b66      	ldr	r3, [pc, #408]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cee:	d107      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf0:	f107 0318 	add.w	r3, r7, #24
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f991 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cfe:	e16a      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d04:	e167      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d06:	4b5d      	ldr	r3, [pc, #372]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d12:	d107      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d14:	f107 030c 	add.w	r3, r7, #12
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 fad3 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d22:	e158      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d28:	e155      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d2a:	4b54      	ldr	r3, [pc, #336]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d34:	4b51      	ldr	r3, [pc, #324]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d10c      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d109      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d46:	4b4d      	ldr	r3, [pc, #308]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	08db      	lsrs	r3, r3, #3
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	4a4b      	ldr	r2, [pc, #300]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d52:	fa22 f303 	lsr.w	r3, r2, r3
 8008d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d58:	e01e      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d5a:	4b48      	ldr	r3, [pc, #288]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d66:	d106      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d6e:	d102      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d70:	4b44      	ldr	r3, [pc, #272]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d74:	e010      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d76:	4b41      	ldr	r3, [pc, #260]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d82:	d106      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d8a:	d102      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d8c:	4b3e      	ldr	r3, [pc, #248]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d90:	e002      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d96:	e11e      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d98:	e11d      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d9e:	e11a      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da6:	d133      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008da8:	4b34      	ldr	r3, [pc, #208]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008db0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dbe:	d012      	beq.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008dc0:	e023      	b.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dc2:	4b2e      	ldr	r3, [pc, #184]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dce:	d107      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fbc9 	bl	800956c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008dde:	e0fa      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008de4:	e0f7      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008de6:	4b25      	ldr	r3, [pc, #148]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008df2:	d107      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df4:	f107 0318 	add.w	r3, r7, #24
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f90f 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e02:	e0e8      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e08:	e0e5      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e0e:	e0e2      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e16:	f040 808f 	bne.w	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008e1a:	4b18      	ldr	r3, [pc, #96]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008e22:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e2a:	d075      	beq.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e32:	d87e      	bhi.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3a:	d060      	beq.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e42:	d876      	bhi.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e4a:	d045      	beq.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e52:	d86e      	bhi.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5a:	d02b      	beq.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e62:	d866      	bhi.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d004      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e70:	d00e      	beq.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008e72:	e05e      	b.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e74:	f000 f8bc 	bl	8008ff0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e78:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008e7a:	e0ac      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e7c:	58024400 	.word	0x58024400
 8008e80:	03d09000 	.word	0x03d09000
 8008e84:	003d0900 	.word	0x003d0900
 8008e88:	00f42400 	.word	0x00f42400
 8008e8c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e90:	4b53      	ldr	r3, [pc, #332]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e9c:	d107      	bne.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e9e:	f107 0318 	add.w	r3, r7, #24
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f8ba 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008eac:	e093      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eb2:	e090      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008eb4:	4b4a      	ldr	r3, [pc, #296]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ec0:	d107      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec2:	f107 030c 	add.w	r3, r7, #12
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f9fc 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ed0:	e081      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ed6:	e07e      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ed8:	4b41      	ldr	r3, [pc, #260]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d109      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ee4:	4b3e      	ldr	r3, [pc, #248]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	08db      	lsrs	r3, r3, #3
 8008eea:	f003 0303 	and.w	r3, r3, #3
 8008eee:	4a3d      	ldr	r2, [pc, #244]	; (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ef6:	e06e      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008efc:	e06b      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008efe:	4b38      	ldr	r3, [pc, #224]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f0a:	d102      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8008f0c:	4b36      	ldr	r3, [pc, #216]	; (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f10:	e061      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f16:	e05e      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f18:	4b31      	ldr	r3, [pc, #196]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f24:	d102      	bne.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8008f26:	4b31      	ldr	r3, [pc, #196]	; (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f2a:	e054      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f30:	e051      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f36:	e04e      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f3e:	d148      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008f40:	4b27      	ldr	r3, [pc, #156]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f50:	d02a      	beq.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f58:	d838      	bhi.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f66:	d00d      	beq.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008f68:	e030      	b.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f6a:	4b1d      	ldr	r3, [pc, #116]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f76:	d102      	bne.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8008f78:	4b1c      	ldr	r3, [pc, #112]	; (8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f7c:	e02b      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f82:	e028      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f84:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f90:	d107      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fae8 	bl	800956c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fa0:	e019      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa6:	e016      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fa8:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fb4:	d107      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fb6:	f107 0318 	add.w	r3, r7, #24
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 f82e 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fc4:	e007      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fca:	e004      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd0:	e001      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3740      	adds	r7, #64	; 0x40
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	58024400 	.word	0x58024400
 8008fe4:	03d09000 	.word	0x03d09000
 8008fe8:	003d0900 	.word	0x003d0900
 8008fec:	00f42400 	.word	0x00f42400

08008ff0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008ff4:	f7fe fb8e 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	4b06      	ldr	r3, [pc, #24]	; (8009014 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	091b      	lsrs	r3, r3, #4
 8009000:	f003 0307 	and.w	r3, r3, #7
 8009004:	4904      	ldr	r1, [pc, #16]	; (8009018 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009006:	5ccb      	ldrb	r3, [r1, r3]
 8009008:	f003 031f 	and.w	r3, r3, #31
 800900c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009010:	4618      	mov	r0, r3
 8009012:	bd80      	pop	{r7, pc}
 8009014:	58024400 	.word	0x58024400
 8009018:	080127e4 	.word	0x080127e4

0800901c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800901c:	b480      	push	{r7}
 800901e:	b089      	sub	sp, #36	; 0x24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009024:	4ba1      	ldr	r3, [pc, #644]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800902e:	4b9f      	ldr	r3, [pc, #636]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	0b1b      	lsrs	r3, r3, #12
 8009034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009038:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800903a:	4b9c      	ldr	r3, [pc, #624]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	091b      	lsrs	r3, r3, #4
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009046:	4b99      	ldr	r3, [pc, #612]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904a:	08db      	lsrs	r3, r3, #3
 800904c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	fb02 f303 	mul.w	r3, r2, r3
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 8111 	beq.w	800928c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b02      	cmp	r3, #2
 800906e:	f000 8083 	beq.w	8009178 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	2b02      	cmp	r3, #2
 8009076:	f200 80a1 	bhi.w	80091bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d056      	beq.n	8009134 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009086:	e099      	b.n	80091bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009088:	4b88      	ldr	r3, [pc, #544]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b00      	cmp	r3, #0
 8009092:	d02d      	beq.n	80090f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009094:	4b85      	ldr	r3, [pc, #532]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	08db      	lsrs	r3, r3, #3
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	4a84      	ldr	r2, [pc, #528]	; (80092b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090be:	4b7b      	ldr	r3, [pc, #492]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80090ee:	e087      	b.n	8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80092b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80090fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009102:	4b6a      	ldr	r3, [pc, #424]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009112:	ed97 6a03 	vldr	s12, [r7, #12]
 8009116:	eddf 5a67 	vldr	s11, [pc, #412]	; 80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800911a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009132:	e065      	b.n	8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80092bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	4b59      	ldr	r3, [pc, #356]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	ed97 6a03 	vldr	s12, [r7, #12]
 800915a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800915e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009176:	e043      	b.n	8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80092c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918a:	4b48      	ldr	r3, [pc, #288]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800918c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919a:	ed97 6a03 	vldr	s12, [r7, #12]
 800919e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091ba:	e021      	b.n	8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80092bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ce:	4b37      	ldr	r3, [pc, #220]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091de:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80092b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009200:	4b2a      	ldr	r3, [pc, #168]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009204:	0a5b      	lsrs	r3, r3, #9
 8009206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800921a:	edd7 6a07 	vldr	s13, [r7, #28]
 800921e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009226:	ee17 2a90 	vmov	r2, s15
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800922e:	4b1f      	ldr	r3, [pc, #124]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009232:	0c1b      	lsrs	r3, r3, #16
 8009234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009244:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009248:	edd7 6a07 	vldr	s13, [r7, #28]
 800924c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009254:	ee17 2a90 	vmov	r2, s15
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800925c:	4b13      	ldr	r3, [pc, #76]	; (80092ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	0e1b      	lsrs	r3, r3, #24
 8009262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009276:	edd7 6a07 	vldr	s13, [r7, #28]
 800927a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800927e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009282:	ee17 2a90 	vmov	r2, s15
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800928a:	e008      	b.n	800929e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	609a      	str	r2, [r3, #8]
}
 800929e:	bf00      	nop
 80092a0:	3724      	adds	r7, #36	; 0x24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	58024400 	.word	0x58024400
 80092b0:	03d09000 	.word	0x03d09000
 80092b4:	46000000 	.word	0x46000000
 80092b8:	4c742400 	.word	0x4c742400
 80092bc:	4a742400 	.word	0x4a742400
 80092c0:	4b742400 	.word	0x4b742400

080092c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b089      	sub	sp, #36	; 0x24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092cc:	4ba1      	ldr	r3, [pc, #644]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80092d6:	4b9f      	ldr	r3, [pc, #636]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	0d1b      	lsrs	r3, r3, #20
 80092dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80092e2:	4b9c      	ldr	r3, [pc, #624]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e6:	0a1b      	lsrs	r3, r3, #8
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80092ee:	4b99      	ldr	r3, [pc, #612]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f2:	08db      	lsrs	r3, r3, #3
 80092f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	fb02 f303 	mul.w	r3, r2, r3
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009306:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 8111 	beq.w	8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	2b02      	cmp	r3, #2
 8009316:	f000 8083 	beq.w	8009420 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	2b02      	cmp	r3, #2
 800931e:	f200 80a1 	bhi.w	8009464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d056      	beq.n	80093dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800932e:	e099      	b.n	8009464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009330:	4b88      	ldr	r3, [pc, #544]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0320 	and.w	r3, r3, #32
 8009338:	2b00      	cmp	r3, #0
 800933a:	d02d      	beq.n	8009398 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800933c:	4b85      	ldr	r3, [pc, #532]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	08db      	lsrs	r3, r3, #3
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	4a84      	ldr	r2, [pc, #528]	; (8009558 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009348:	fa22 f303 	lsr.w	r3, r2, r3
 800934c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	ee07 3a90 	vmov	s15, r3
 8009354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009366:	4b7b      	ldr	r3, [pc, #492]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009376:	ed97 6a03 	vldr	s12, [r7, #12]
 800937a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800955c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800937e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800938a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009392:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009396:	e087      	b.n	80094a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009560 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80093a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093aa:	4b6a      	ldr	r3, [pc, #424]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80093be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800955c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093da:	e065      	b.n	80094a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80093ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ee:	4b59      	ldr	r3, [pc, #356]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009402:	eddf 5a56 	vldr	s11, [pc, #344]	; 800955c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800941e:	e043      	b.n	80094a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800942e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009432:	4b48      	ldr	r3, [pc, #288]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009442:	ed97 6a03 	vldr	s12, [r7, #12]
 8009446:	eddf 5a45 	vldr	s11, [pc, #276]	; 800955c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800944a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009462:	e021      	b.n	80094a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009476:	4b37      	ldr	r3, [pc, #220]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009486:	ed97 6a03 	vldr	s12, [r7, #12]
 800948a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800955c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800948e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80094a8:	4b2a      	ldr	r3, [pc, #168]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	0a5b      	lsrs	r3, r3, #9
 80094ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ce:	ee17 2a90 	vmov	r2, s15
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80094d6:	4b1f      	ldr	r3, [pc, #124]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	0c1b      	lsrs	r3, r3, #16
 80094dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094fc:	ee17 2a90 	vmov	r2, s15
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009504:	4b13      	ldr	r3, [pc, #76]	; (8009554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	0e1b      	lsrs	r3, r3, #24
 800950a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800951a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800951e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800952a:	ee17 2a90 	vmov	r2, s15
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009532:	e008      	b.n	8009546 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	609a      	str	r2, [r3, #8]
}
 8009546:	bf00      	nop
 8009548:	3724      	adds	r7, #36	; 0x24
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	58024400 	.word	0x58024400
 8009558:	03d09000 	.word	0x03d09000
 800955c:	46000000 	.word	0x46000000
 8009560:	4c742400 	.word	0x4c742400
 8009564:	4a742400 	.word	0x4a742400
 8009568:	4b742400 	.word	0x4b742400

0800956c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800956c:	b480      	push	{r7}
 800956e:	b089      	sub	sp, #36	; 0x24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009574:	4ba0      	ldr	r3, [pc, #640]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800957e:	4b9e      	ldr	r3, [pc, #632]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009582:	091b      	lsrs	r3, r3, #4
 8009584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009588:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800958a:	4b9b      	ldr	r3, [pc, #620]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800958c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009594:	4b98      	ldr	r3, [pc, #608]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009598:	08db      	lsrs	r3, r3, #3
 800959a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	fb02 f303 	mul.w	r3, r2, r3
 80095a4:	ee07 3a90 	vmov	s15, r3
 80095a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 8111 	beq.w	80097da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	f000 8083 	beq.w	80096c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	f200 80a1 	bhi.w	800970a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d056      	beq.n	8009682 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80095d4:	e099      	b.n	800970a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095d6:	4b88      	ldr	r3, [pc, #544]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d02d      	beq.n	800963e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095e2:	4b85      	ldr	r3, [pc, #532]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	08db      	lsrs	r3, r3, #3
 80095e8:	f003 0303 	and.w	r3, r3, #3
 80095ec:	4a83      	ldr	r2, [pc, #524]	; (80097fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80095ee:	fa22 f303 	lsr.w	r3, r2, r3
 80095f2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	ee07 3a90 	vmov	s15, r3
 8009604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960c:	4b7a      	ldr	r3, [pc, #488]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800960e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009614:	ee07 3a90 	vmov	s15, r3
 8009618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009620:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009638:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800963c:	e087      	b.n	800974e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	ee07 3a90 	vmov	s15, r3
 8009644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009648:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009804 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800964c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009650:	4b69      	ldr	r3, [pc, #420]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009658:	ee07 3a90 	vmov	s15, r3
 800965c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009660:	ed97 6a03 	vldr	s12, [r7, #12]
 8009664:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009668:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009670:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009674:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009680:	e065      	b.n	800974e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	ee07 3a90 	vmov	s15, r3
 8009688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009808 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009690:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009694:	4b58      	ldr	r3, [pc, #352]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969c:	ee07 3a90 	vmov	s15, r3
 80096a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096c4:	e043      	b.n	800974e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	ee07 3a90 	vmov	s15, r3
 80096cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800980c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80096d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d8:	4b47      	ldr	r3, [pc, #284]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e0:	ee07 3a90 	vmov	s15, r3
 80096e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009704:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009708:	e021      	b.n	800974e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	ee07 3a90 	vmov	s15, r3
 8009710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009714:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009804 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800971c:	4b36      	ldr	r3, [pc, #216]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800971e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009724:	ee07 3a90 	vmov	s15, r3
 8009728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009730:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009734:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009738:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009748:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800974c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800974e:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009752:	0a5b      	lsrs	r3, r3, #9
 8009754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009758:	ee07 3a90 	vmov	s15, r3
 800975c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009760:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009768:	edd7 6a07 	vldr	s13, [r7, #28]
 800976c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009774:	ee17 2a90 	vmov	r2, s15
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800977c:	4b1e      	ldr	r3, [pc, #120]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	0c1b      	lsrs	r3, r3, #16
 8009782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009796:	edd7 6a07 	vldr	s13, [r7, #28]
 800979a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800979e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097a2:	ee17 2a90 	vmov	r2, s15
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80097aa:	4b13      	ldr	r3, [pc, #76]	; (80097f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ae:	0e1b      	lsrs	r3, r3, #24
 80097b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097d0:	ee17 2a90 	vmov	r2, s15
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80097d8:	e008      	b.n	80097ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	609a      	str	r2, [r3, #8]
}
 80097ec:	bf00      	nop
 80097ee:	3724      	adds	r7, #36	; 0x24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	58024400 	.word	0x58024400
 80097fc:	03d09000 	.word	0x03d09000
 8009800:	46000000 	.word	0x46000000
 8009804:	4c742400 	.word	0x4c742400
 8009808:	4a742400 	.word	0x4a742400
 800980c:	4b742400 	.word	0x4b742400

08009810 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800981e:	4b53      	ldr	r3, [pc, #332]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	2b03      	cmp	r3, #3
 8009828:	d101      	bne.n	800982e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e099      	b.n	8009962 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800982e:	4b4f      	ldr	r3, [pc, #316]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a4e      	ldr	r2, [pc, #312]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009834:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800983a:	f7f8 f861 	bl	8001900 <HAL_GetTick>
 800983e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009840:	e008      	b.n	8009854 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009842:	f7f8 f85d 	bl	8001900 <HAL_GetTick>
 8009846:	4602      	mov	r2, r0
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	2b02      	cmp	r3, #2
 800984e:	d901      	bls.n	8009854 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	e086      	b.n	8009962 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009854:	4b45      	ldr	r3, [pc, #276]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1f0      	bne.n	8009842 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009860:	4b42      	ldr	r3, [pc, #264]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009864:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	031b      	lsls	r3, r3, #12
 800986e:	493f      	ldr	r1, [pc, #252]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009870:	4313      	orrs	r3, r2
 8009872:	628b      	str	r3, [r1, #40]	; 0x28
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	3b01      	subs	r3, #1
 800987a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	3b01      	subs	r3, #1
 8009884:	025b      	lsls	r3, r3, #9
 8009886:	b29b      	uxth	r3, r3
 8009888:	431a      	orrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	3b01      	subs	r3, #1
 8009890:	041b      	lsls	r3, r3, #16
 8009892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009896:	431a      	orrs	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	3b01      	subs	r3, #1
 800989e:	061b      	lsls	r3, r3, #24
 80098a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80098a4:	4931      	ldr	r1, [pc, #196]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098aa:	4b30      	ldr	r3, [pc, #192]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	492d      	ldr	r1, [pc, #180]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098bc:	4b2b      	ldr	r3, [pc, #172]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	f023 0220 	bic.w	r2, r3, #32
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	4928      	ldr	r1, [pc, #160]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098ce:	4b27      	ldr	r3, [pc, #156]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	4a26      	ldr	r2, [pc, #152]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098d4:	f023 0310 	bic.w	r3, r3, #16
 80098d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098da:	4b24      	ldr	r3, [pc, #144]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098de:	4b24      	ldr	r3, [pc, #144]	; (8009970 <RCCEx_PLL2_Config+0x160>)
 80098e0:	4013      	ands	r3, r2
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	69d2      	ldr	r2, [r2, #28]
 80098e6:	00d2      	lsls	r2, r2, #3
 80098e8:	4920      	ldr	r1, [pc, #128]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098ee:	4b1f      	ldr	r3, [pc, #124]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f2:	4a1e      	ldr	r2, [pc, #120]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 80098f4:	f043 0310 	orr.w	r3, r3, #16
 80098f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d106      	bne.n	800990e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009900:	4b1a      	ldr	r3, [pc, #104]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	4a19      	ldr	r2, [pc, #100]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800990a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800990c:	e00f      	b.n	800992e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d106      	bne.n	8009922 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009914:	4b15      	ldr	r3, [pc, #84]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	4a14      	ldr	r2, [pc, #80]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 800991a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800991e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009920:	e005      	b.n	800992e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009922:	4b12      	ldr	r3, [pc, #72]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009926:	4a11      	ldr	r2, [pc, #68]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800992c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a0e      	ldr	r2, [pc, #56]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800993a:	f7f7 ffe1 	bl	8001900 <HAL_GetTick>
 800993e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009940:	e008      	b.n	8009954 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009942:	f7f7 ffdd 	bl	8001900 <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	2b02      	cmp	r3, #2
 800994e:	d901      	bls.n	8009954 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e006      	b.n	8009962 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <RCCEx_PLL2_Config+0x15c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0f0      	beq.n	8009942 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009960:	7bfb      	ldrb	r3, [r7, #15]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	58024400 	.word	0x58024400
 8009970:	ffff0007 	.word	0xffff0007

08009974 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009982:	4b53      	ldr	r3, [pc, #332]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	2b03      	cmp	r3, #3
 800998c:	d101      	bne.n	8009992 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e099      	b.n	8009ac6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009992:	4b4f      	ldr	r3, [pc, #316]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a4e      	ldr	r2, [pc, #312]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800999c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800999e:	f7f7 ffaf 	bl	8001900 <HAL_GetTick>
 80099a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099a4:	e008      	b.n	80099b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099a6:	f7f7 ffab 	bl	8001900 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d901      	bls.n	80099b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e086      	b.n	8009ac6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099b8:	4b45      	ldr	r3, [pc, #276]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f0      	bne.n	80099a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099c4:	4b42      	ldr	r3, [pc, #264]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	051b      	lsls	r3, r3, #20
 80099d2:	493f      	ldr	r1, [pc, #252]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	628b      	str	r3, [r1, #40]	; 0x28
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	3b01      	subs	r3, #1
 80099de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	025b      	lsls	r3, r3, #9
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	431a      	orrs	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	041b      	lsls	r3, r3, #16
 80099f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099fa:	431a      	orrs	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	061b      	lsls	r3, r3, #24
 8009a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a08:	4931      	ldr	r1, [pc, #196]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a0e:	4b30      	ldr	r3, [pc, #192]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	492d      	ldr	r1, [pc, #180]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a20:	4b2b      	ldr	r3, [pc, #172]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	4928      	ldr	r1, [pc, #160]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a32:	4b27      	ldr	r3, [pc, #156]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a36:	4a26      	ldr	r2, [pc, #152]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a3e:	4b24      	ldr	r3, [pc, #144]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a42:	4b24      	ldr	r3, [pc, #144]	; (8009ad4 <RCCEx_PLL3_Config+0x160>)
 8009a44:	4013      	ands	r3, r2
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	69d2      	ldr	r2, [r2, #28]
 8009a4a:	00d2      	lsls	r2, r2, #3
 8009a4c:	4920      	ldr	r1, [pc, #128]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a52:	4b1f      	ldr	r3, [pc, #124]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	4a1e      	ldr	r2, [pc, #120]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d106      	bne.n	8009a72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a64:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a68:	4a19      	ldr	r2, [pc, #100]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a70:	e00f      	b.n	8009a92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d106      	bne.n	8009a86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a78:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	4a14      	ldr	r2, [pc, #80]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a84:	e005      	b.n	8009a92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a86:	4b12      	ldr	r3, [pc, #72]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8a:	4a11      	ldr	r2, [pc, #68]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a92:	4b0f      	ldr	r3, [pc, #60]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a0e      	ldr	r2, [pc, #56]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a9e:	f7f7 ff2f 	bl	8001900 <HAL_GetTick>
 8009aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009aa4:	e008      	b.n	8009ab8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009aa6:	f7f7 ff2b 	bl	8001900 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d901      	bls.n	8009ab8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e006      	b.n	8009ac6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ab8:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <RCCEx_PLL3_Config+0x15c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0f0      	beq.n	8009aa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	58024400 	.word	0x58024400
 8009ad4:	ffff0007 	.word	0xffff0007

08009ad8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08a      	sub	sp, #40	; 0x28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e075      	b.n	8009bd6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d105      	bne.n	8009b02 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7f7 f9d1 	bl	8000ea4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2203      	movs	r2, #3
 8009b06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f868 	bl	8009be0 <HAL_SD_InitCard>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e05d      	b.n	8009bd6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009b1a:	f107 0308 	add.w	r3, r7, #8
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fda5 	bl	800a670 <HAL_SD_GetCardStatus>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e052      	b.n	8009bd6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009b30:	7e3b      	ldrb	r3, [r7, #24]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009b36:	7e7b      	ldrb	r3, [r7, #25]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d10a      	bne.n	8009b5a <HAL_SD_Init+0x82>
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d102      	bne.n	8009b50 <HAL_SD_Init+0x78>
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b56:	659a      	str	r2, [r3, #88]	; 0x58
 8009b58:	e00b      	b.n	8009b72 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d104      	bne.n	8009b6c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b68:	659a      	str	r2, [r3, #88]	; 0x58
 8009b6a:	e002      	b.n	8009b72 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fe5b 	bl	800a834 <HAL_SD_ConfigWideBusOperation>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e026      	b.n	8009bd6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009b88:	f7f7 feba 	bl	8001900 <HAL_GetTick>
 8009b8c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009b8e:	e011      	b.n	8009bb4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009b90:	f7f7 feb6 	bl	8001900 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9e:	d109      	bne.n	8009bb4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ba6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e010      	b.n	8009bd6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 ff4d 	bl	800aa54 <HAL_SD_GetCardState>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	d1e7      	bne.n	8009b90 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3728      	adds	r7, #40	; 0x28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
	...

08009be0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009be0:	b590      	push	{r4, r7, lr}
 8009be2:	b08d      	sub	sp, #52	; 0x34
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009bf8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009bfc:	f7fe fd26 	bl	800864c <HAL_RCCEx_GetPeriphCLKFreq>
 8009c00:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d109      	bne.n	8009c1c <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c16:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e06a      	b.n	8009cf2 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	0a1b      	lsrs	r3, r3, #8
 8009c20:	4a36      	ldr	r2, [pc, #216]	; (8009cfc <HAL_SD_InitCard+0x11c>)
 8009c22:	fba2 2303 	umull	r2, r3, r2, r3
 8009c26:	091b      	lsrs	r3, r3, #4
 8009c28:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681c      	ldr	r4, [r3, #0]
 8009c2e:	466a      	mov	r2, sp
 8009c30:	f107 0318 	add.w	r3, r7, #24
 8009c34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c38:	e882 0003 	stmia.w	r2, {r0, r1}
 8009c3c:	f107 030c 	add.w	r3, r7, #12
 8009c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c42:	4620      	mov	r0, r4
 8009c44:	f004 f836 	bl	800dcb4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f004 f879 	bl	800dd44 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009c5e:	4a28      	ldr	r2, [pc, #160]	; (8009d00 <HAL_SD_InitCard+0x120>)
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c66:	3301      	adds	r3, #1
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7f7 fe55 	bl	8001918 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 ffcc 	bl	800ac0c <SD_PowerON>
 8009c74:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00b      	beq.n	8009c94 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e02e      	b.n	8009cf2 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fefd 	bl	800aa94 <SD_InitCard>
 8009c9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00b      	beq.n	8009cba <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e01b      	b.n	8009cf2 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f004 f8d4 	bl	800de70 <SDMMC_CmdBlockLength>
 8009cc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00f      	beq.n	8009cf0 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a0b      	ldr	r2, [pc, #44]	; (8009d04 <HAL_SD_InitCard+0x124>)
 8009cd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	431a      	orrs	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	372c      	adds	r7, #44	; 0x2c
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd90      	pop	{r4, r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	014f8b59 	.word	0x014f8b59
 8009d00:	00012110 	.word	0x00012110
 8009d04:	1fe00fff 	.word	0x1fe00fff

08009d08 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08c      	sub	sp, #48	; 0x30
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d107      	bne.n	8009d30 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e08d      	b.n	8009e4c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	f040 8086 	bne.w	8009e4a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	441a      	add	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d907      	bls.n	8009d62 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e074      	b.n	8009e4c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2203      	movs	r2, #3
 8009d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	025a      	lsls	r2, r3, #9
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d002      	beq.n	8009d8e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	025b      	lsls	r3, r3, #9
 8009d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	025b      	lsls	r3, r3, #9
 8009d98:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009d9a:	2390      	movs	r3, #144	; 0x90
 8009d9c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d9e:	2302      	movs	r3, #2
 8009da0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009da6:	2300      	movs	r3, #0
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f107 0210 	add.w	r2, r7, #16
 8009db2:	4611      	mov	r1, r2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f004 f82f 	bl	800de18 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dc8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d90a      	bls.n	8009df6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2282      	movs	r2, #130	; 0x82
 8009de4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dec:	4618      	mov	r0, r3
 8009dee:	f004 f885 	bl	800defc <SDMMC_CmdReadMultiBlock>
 8009df2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009df4:	e009      	b.n	8009e0a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2281      	movs	r2, #129	; 0x81
 8009dfa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e02:	4618      	mov	r0, r3
 8009e04:	f004 f857 	bl	800deb6 <SDMMC_CmdReadSingleBlock>
 8009e08:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d012      	beq.n	8009e36 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a0f      	ldr	r2, [pc, #60]	; (8009e54 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009e16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e00a      	b.n	8009e4c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009e44:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	e000      	b.n	8009e4c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009e4a:	2302      	movs	r3, #2
  }
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3730      	adds	r7, #48	; 0x30
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	1fe00fff 	.word	0x1fe00fff

08009e58 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b08c      	sub	sp, #48	; 0x30
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d107      	bne.n	8009e80 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e08d      	b.n	8009f9c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	f040 8086 	bne.w	8009f9a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	441a      	add	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d907      	bls.n	8009eb2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e074      	b.n	8009f9c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	025a      	lsls	r2, r3, #9
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d002      	beq.n	8009ede <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	025b      	lsls	r3, r3, #9
 8009edc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ede:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	025b      	lsls	r3, r3, #9
 8009ee8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009eea:	2390      	movs	r3, #144	; 0x90
 8009eec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f107 0210 	add.w	r2, r7, #16
 8009f02:	4611      	mov	r1, r2
 8009f04:	4618      	mov	r0, r3
 8009f06:	f003 ff87 	bl	800de18 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f18:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2201      	movs	r2, #1
 8009f28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d90a      	bls.n	8009f46 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	22a0      	movs	r2, #160	; 0xa0
 8009f34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f004 f823 	bl	800df88 <SDMMC_CmdWriteMultiBlock>
 8009f42:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009f44:	e009      	b.n	8009f5a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2290      	movs	r2, #144	; 0x90
 8009f4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f52:	4618      	mov	r0, r3
 8009f54:	f003 fff5 	bl	800df42 <SDMMC_CmdWriteSingleBlock>
 8009f58:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d012      	beq.n	8009f86 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a0f      	ldr	r2, [pc, #60]	; (8009fa4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e00a      	b.n	8009f9c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009f94:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e000      	b.n	8009f9c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009f9a:	2302      	movs	r3, #2
  }
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3730      	adds	r7, #48	; 0x30
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	1fe00fff 	.word	0x1fe00fff

08009fa8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d008      	beq.n	8009fd6 <HAL_SD_IRQHandler+0x2e>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f003 0308 	and.w	r3, r3, #8
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f001 f904 	bl	800b1dc <SD_Read_IT>
 8009fd4:	e19a      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 80ac 	beq.w	800a13e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	4b9d      	ldr	r3, [pc, #628]	; (800a270 <HAL_SD_IRQHandler+0x2c8>)
 8009ffc:	400b      	ands	r3, r1
 8009ffe:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a00e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a01e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f003 0308 	and.w	r3, r3, #8
 800a026:	2b00      	cmp	r3, #0
 800a028:	d038      	beq.n	800a09c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f003 0302 	and.w	r3, r3, #2
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <HAL_SD_IRQHandler+0x96>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d011      	beq.n	800a062 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4618      	mov	r0, r3
 800a044:	f003 ffc4 	bl	800dfd0 <SDMMC_CmdStopTransfer>
 800a048:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d008      	beq.n	800a062 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	431a      	orrs	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f959 	bl	800a314 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a83      	ldr	r2, [pc, #524]	; (800a274 <HAL_SD_IRQHandler+0x2cc>)
 800a068:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d104      	bne.n	800a08c <HAL_SD_IRQHandler+0xe4>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d003      	beq.n	800a094 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f005 ffe1 	bl	8010054 <HAL_SD_RxCpltCallback>
 800a092:	e13b      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f005 ffd3 	bl	8010040 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a09a:	e137      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 8132 	beq.w	800a30c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d104      	bne.n	800a0d4 <HAL_SD_IRQHandler+0x12c>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d011      	beq.n	800a0f8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f003 ff79 	bl	800dfd0 <SDMMC_CmdStopTransfer>
 800a0de:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d008      	beq.n	800a0f8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f90e 	bl	800a314 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f003 0310 	and.w	r3, r3, #16
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d104      	bne.n	800a11a <HAL_SD_IRQHandler+0x172>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f005 ff90 	bl	8010040 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	2b00      	cmp	r3, #0
 800a128:	d105      	bne.n	800a136 <HAL_SD_IRQHandler+0x18e>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 80eb 	beq.w	800a30c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f005 ff8c 	bl	8010054 <HAL_SD_RxCpltCallback>
}
 800a13c:	e0e6      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d008      	beq.n	800a15e <HAL_SD_IRQHandler+0x1b6>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f003 0308 	and.w	r3, r3, #8
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f001 f886 	bl	800b268 <SD_Write_IT>
 800a15c:	e0d6      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a164:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80a2 	beq.w	800a2b2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a174:	f003 0302 	and.w	r3, r3, #2
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d005      	beq.n	800a188 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a180:	f043 0202 	orr.w	r2, r3, #2
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18e:	f003 0308 	and.w	r3, r3, #8
 800a192:	2b00      	cmp	r3, #0
 800a194:	d005      	beq.n	800a1a2 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19a:	f043 0208 	orr.w	r2, r3, #8
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a8:	f003 0320 	and.w	r3, r3, #32
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b4:	f043 0220 	orr.w	r2, r3, #32
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c2:	f003 0310 	and.w	r3, r3, #16
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d005      	beq.n	800a1d6 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ce:	f043 0210 	orr.w	r2, r3, #16
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a26      	ldr	r2, [pc, #152]	; (800a274 <HAL_SD_IRQHandler+0x2cc>)
 800a1dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a1ec:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1fc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a20c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a21c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4618      	mov	r0, r3
 800a224:	f003 fed4 	bl	800dfd0 <SDMMC_CmdStopTransfer>
 800a228:	4602      	mov	r2, r0
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22e:	431a      	orrs	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68da      	ldr	r2, [r3, #12]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a242:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a24c:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f003 0308 	and.w	r3, r3, #8
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00f      	beq.n	800a278 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f854 	bl	800a314 <HAL_SD_ErrorCallback>
}
 800a26c:	e04e      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
 800a26e:	bf00      	nop
 800a270:	ffff3ec5 	.word	0xffff3ec5
 800a274:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d044      	beq.n	800a30c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a286:	2b00      	cmp	r3, #0
 800a288:	d040      	beq.n	800a30c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a298:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f832 	bl	800a314 <HAL_SD_ErrorCallback>
}
 800a2b0:	e02c      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d025      	beq.n	800a30c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c8:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10c      	bne.n	800a2f2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f003 0320 	and.w	r3, r3, #32
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 f828 	bl	800b338 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a2e8:	e010      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f001 f810 	bl	800b310 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a2f0:	e00c      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f003 0320 	and.w	r3, r3, #32
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f001 f811 	bl	800b324 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a302:	e003      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fff9 	bl	800b2fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a30a:	e7ff      	b.n	800a30c <HAL_SD_IRQHandler+0x364>
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a336:	0f9b      	lsrs	r3, r3, #30
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a342:	0e9b      	lsrs	r3, r3, #26
 800a344:	b2db      	uxtb	r3, r3
 800a346:	f003 030f 	and.w	r3, r3, #15
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a354:	0e1b      	lsrs	r3, r3, #24
 800a356:	b2db      	uxtb	r3, r3
 800a358:	f003 0303 	and.w	r3, r3, #3
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a366:	0c1b      	lsrs	r3, r3, #16
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a372:	0a1b      	lsrs	r3, r3, #8
 800a374:	b2da      	uxtb	r2, r3
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a388:	0d1b      	lsrs	r3, r3, #20
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a394:	0c1b      	lsrs	r3, r3, #16
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f003 030f 	and.w	r3, r3, #15
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3a6:	0bdb      	lsrs	r3, r3, #15
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3b8:	0b9b      	lsrs	r3, r3, #14
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ca:	0b5b      	lsrs	r3, r3, #13
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3dc:	0b1b      	lsrs	r3, r3, #12
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	f003 0301 	and.w	r3, r3, #1
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d163      	bne.n	800a4c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3fc:	009a      	lsls	r2, r3, #2
 800a3fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a402:	4013      	ands	r3, r2
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a408:	0f92      	lsrs	r2, r2, #30
 800a40a:	431a      	orrs	r2, r3
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a414:	0edb      	lsrs	r3, r3, #27
 800a416:	b2db      	uxtb	r3, r3
 800a418:	f003 0307 	and.w	r3, r3, #7
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a426:	0e1b      	lsrs	r3, r3, #24
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	f003 0307 	and.w	r3, r3, #7
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a438:	0d5b      	lsrs	r3, r3, #21
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	b2da      	uxtb	r2, r3
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a44a:	0c9b      	lsrs	r3, r3, #18
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	f003 0307 	and.w	r3, r3, #7
 800a452:	b2da      	uxtb	r2, r3
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a45c:	0bdb      	lsrs	r3, r3, #15
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	f003 0307 	and.w	r3, r3, #7
 800a464:	b2da      	uxtb	r2, r3
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	7e1b      	ldrb	r3, [r3, #24]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	f003 0307 	and.w	r3, r3, #7
 800a47e:	3302      	adds	r3, #2
 800a480:	2201      	movs	r2, #1
 800a482:	fa02 f303 	lsl.w	r3, r2, r3
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a48a:	fb02 f203 	mul.w	r2, r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	7a1b      	ldrb	r3, [r3, #8]
 800a496:	b2db      	uxtb	r3, r3
 800a498:	f003 030f 	and.w	r3, r3, #15
 800a49c:	2201      	movs	r2, #1
 800a49e:	409a      	lsls	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a4ac:	0a52      	lsrs	r2, r2, #9
 800a4ae:	fb02 f203 	mul.w	r2, r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4bc:	655a      	str	r2, [r3, #84]	; 0x54
 800a4be:	e031      	b.n	800a524 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d11d      	bne.n	800a504 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4cc:	041b      	lsls	r3, r3, #16
 800a4ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4d6:	0c1b      	lsrs	r3, r3, #16
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	029a      	lsls	r2, r3, #10
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	655a      	str	r2, [r3, #84]	; 0x54
 800a502:	e00f      	b.n	800a524 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a58      	ldr	r2, [pc, #352]	; (800a66c <HAL_SD_GetCardCSD+0x344>)
 800a50a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a510:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e09d      	b.n	800a660 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a528:	0b9b      	lsrs	r3, r3, #14
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	b2da      	uxtb	r2, r3
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a53a:	09db      	lsrs	r3, r3, #7
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a542:	b2da      	uxtb	r2, r3
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a552:	b2da      	uxtb	r2, r3
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a55c:	0fdb      	lsrs	r3, r3, #31
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a568:	0f5b      	lsrs	r3, r3, #29
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	f003 0303 	and.w	r3, r3, #3
 800a570:	b2da      	uxtb	r2, r3
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a57a:	0e9b      	lsrs	r3, r3, #26
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	f003 0307 	and.w	r3, r3, #7
 800a582:	b2da      	uxtb	r2, r3
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a58c:	0d9b      	lsrs	r3, r3, #22
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	b2da      	uxtb	r2, r3
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a59e:	0d5b      	lsrs	r3, r3, #21
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5ba:	0c1b      	lsrs	r3, r3, #16
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5ce:	0bdb      	lsrs	r3, r3, #15
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5e2:	0b9b      	lsrs	r3, r3, #14
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5f6:	0b5b      	lsrs	r3, r3, #13
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a60a:	0b1b      	lsrs	r3, r3, #12
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	b2da      	uxtb	r2, r3
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a61e:	0a9b      	lsrs	r3, r3, #10
 800a620:	b2db      	uxtb	r3, r3
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	b2da      	uxtb	r2, r3
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a632:	0a1b      	lsrs	r3, r3, #8
 800a634:	b2db      	uxtb	r3, r3
 800a636:	f003 0303 	and.w	r3, r3, #3
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	1fe00fff 	.word	0x1fe00fff

0800a670 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b094      	sub	sp, #80	; 0x50
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a680:	f107 0308 	add.w	r3, r7, #8
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fb4a 	bl	800ad20 <SD_SendSDStatus>
 800a68c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a68e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a690:	2b00      	cmp	r3, #0
 800a692:	d011      	beq.n	800a6b8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a4f      	ldr	r2, [pc, #316]	; (800a7d8 <HAL_SD_GetCardStatus+0x168>)
 800a69a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a6b6:	e070      	b.n	800a79a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	099b      	lsrs	r3, r3, #6
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	f003 0303 	and.w	r3, r3, #3
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	095b      	lsrs	r3, r3, #5
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	0a1b      	lsrs	r3, r3, #8
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	0e1b      	lsrs	r3, r3, #24
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	061a      	lsls	r2, r3, #24
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	021b      	lsls	r3, r3, #8
 800a6fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a6fe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a708:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	0e1b      	lsrs	r3, r3, #24
 800a70e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	b2da      	uxtb	r2, r3
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	0a1b      	lsrs	r3, r3, #8
 800a720:	b2da      	uxtb	r2, r3
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	0d1b      	lsrs	r3, r3, #20
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	f003 030f 	and.w	r3, r3, #15
 800a730:	b2da      	uxtb	r2, r3
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	0c1b      	lsrs	r3, r3, #16
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a740:	b29a      	uxth	r2, r3
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	b29b      	uxth	r3, r3
 800a746:	b2db      	uxtb	r3, r3
 800a748:	b29b      	uxth	r3, r3
 800a74a:	4313      	orrs	r3, r2
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	0a9b      	lsrs	r3, r3, #10
 800a756:	b2db      	uxtb	r3, r3
 800a758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	0a1b      	lsrs	r3, r3, #8
 800a766:	b2db      	uxtb	r3, r3
 800a768:	f003 0303 	and.w	r3, r3, #3
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	091b      	lsrs	r3, r3, #4
 800a776:	b2db      	uxtb	r3, r3
 800a778:	f003 030f 	and.w	r3, r3, #15
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	b2db      	uxtb	r3, r3
 800a786:	f003 030f 	and.w	r3, r3, #15
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	0e1b      	lsrs	r3, r3, #24
 800a794:	b2da      	uxtb	r2, r3
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f003 fb64 	bl	800de70 <SDMMC_CmdBlockLength>
 800a7a8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00d      	beq.n	800a7cc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a08      	ldr	r2, [pc, #32]	; (800a7d8 <HAL_SD_GetCardStatus+0x168>)
 800a7b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7bc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a7cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3750      	adds	r7, #80	; 0x50
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	1fe00fff 	.word	0x1fe00fff

0800a7dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a834:	b590      	push	{r4, r7, lr}
 800a836:	b08d      	sub	sp, #52	; 0x34
 800a838:	af02      	add	r7, sp, #8
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2203      	movs	r2, #3
 800a848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a850:	2b03      	cmp	r3, #3
 800a852:	d02e      	beq.n	800a8b2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a85a:	d106      	bne.n	800a86a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a860:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	635a      	str	r2, [r3, #52]	; 0x34
 800a868:	e029      	b.n	800a8be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a870:	d10a      	bne.n	800a888 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fb4c 	bl	800af10 <SD_WideBus_Enable>
 800a878:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	431a      	orrs	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	635a      	str	r2, [r3, #52]	; 0x34
 800a886:	e01a      	b.n	800a8be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fb89 	bl	800afa6 <SD_WideBus_Disable>
 800a894:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	635a      	str	r2, [r3, #52]	; 0x34
 800a8a2:	e00c      	b.n	800a8be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	635a      	str	r2, [r3, #52]	; 0x34
 800a8b0:	e005      	b.n	800a8be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d007      	beq.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a5e      	ldr	r2, [pc, #376]	; (800aa44 <HAL_SD_ConfigWideBusOperation+0x210>)
 800a8cc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8d4:	e094      	b.n	800aa00 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a8d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a8da:	f7fd feb7 	bl	800864c <HAL_RCCEx_GetPeriphCLKFreq>
 800a8de:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 8083 	beq.w	800a9ee <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	695a      	ldr	r2, [r3, #20]
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	4950      	ldr	r1, [pc, #320]	; (800aa48 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a906:	fba1 1303 	umull	r1, r3, r1, r3
 800a90a:	0e1b      	lsrs	r3, r3, #24
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d303      	bcc.n	800a918 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	61bb      	str	r3, [r7, #24]
 800a916:	e05a      	b.n	800a9ce <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a920:	d103      	bne.n	800a92a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	61bb      	str	r3, [r7, #24]
 800a928:	e051      	b.n	800a9ce <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a932:	d126      	bne.n	800a982 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	695b      	ldr	r3, [r3, #20]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10e      	bne.n	800a95a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	4a43      	ldr	r2, [pc, #268]	; (800aa4c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d906      	bls.n	800a952 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	4a40      	ldr	r2, [pc, #256]	; (800aa48 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a948:	fba2 2303 	umull	r2, r3, r2, r3
 800a94c:	0e5b      	lsrs	r3, r3, #25
 800a94e:	61bb      	str	r3, [r7, #24]
 800a950:	e03d      	b.n	800a9ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	61bb      	str	r3, [r7, #24]
 800a958:	e039      	b.n	800a9ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	69fa      	ldr	r2, [r7, #28]
 800a962:	fbb2 f3f3 	udiv	r3, r2, r3
 800a966:	4a39      	ldr	r2, [pc, #228]	; (800aa4c <HAL_SD_ConfigWideBusOperation+0x218>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d906      	bls.n	800a97a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	4a36      	ldr	r2, [pc, #216]	; (800aa48 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a970:	fba2 2303 	umull	r2, r3, r2, r3
 800a974:	0e5b      	lsrs	r3, r3, #25
 800a976:	61bb      	str	r3, [r7, #24]
 800a978:	e029      	b.n	800a9ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	61bb      	str	r3, [r7, #24]
 800a980:	e025      	b.n	800a9ce <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10e      	bne.n	800a9a8 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	4a30      	ldr	r2, [pc, #192]	; (800aa50 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d906      	bls.n	800a9a0 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	4a2c      	ldr	r2, [pc, #176]	; (800aa48 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a996:	fba2 2303 	umull	r2, r3, r2, r3
 800a99a:	0e1b      	lsrs	r3, r3, #24
 800a99c:	61bb      	str	r3, [r7, #24]
 800a99e:	e016      	b.n	800a9ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	61bb      	str	r3, [r7, #24]
 800a9a6:	e012      	b.n	800a9ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	005b      	lsls	r3, r3, #1
 800a9ae:	69fa      	ldr	r2, [r7, #28]
 800a9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b4:	4a26      	ldr	r2, [pc, #152]	; (800aa50 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d906      	bls.n	800a9c8 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	4a22      	ldr	r2, [pc, #136]	; (800aa48 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a9be:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c2:	0e1b      	lsrs	r3, r3, #24
 800a9c4:	61bb      	str	r3, [r7, #24]
 800a9c6:	e002      	b.n	800a9ce <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681c      	ldr	r4, [r3, #0]
 800a9d2:	466a      	mov	r2, sp
 800a9d4:	f107 0314 	add.w	r3, r7, #20
 800a9d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a9dc:	e882 0003 	stmia.w	r2, {r0, r1}
 800a9e0:	f107 0308 	add.w	r3, r7, #8
 800a9e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f003 f964 	bl	800dcb4 <SDMMC_Init>
 800a9ec:	e008      	b.n	800aa00 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f003 fa31 	bl	800de70 <SDMMC_CmdBlockLength>
 800aa0e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00c      	beq.n	800aa30 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a0a      	ldr	r2, [pc, #40]	; (800aa44 <HAL_SD_ConfigWideBusOperation+0x210>)
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	431a      	orrs	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800aa38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	372c      	adds	r7, #44	; 0x2c
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd90      	pop	{r4, r7, pc}
 800aa44:	1fe00fff 	.word	0x1fe00fff
 800aa48:	55e63b89 	.word	0x55e63b89
 800aa4c:	02faf080 	.word	0x02faf080
 800aa50:	017d7840 	.word	0x017d7840

0800aa54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aa60:	f107 030c 	add.w	r3, r7, #12
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fa2a 	bl	800aec0 <SD_SendStatus>
 800aa6c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d005      	beq.n	800aa80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	0a5b      	lsrs	r3, r3, #9
 800aa84:	f003 030f 	and.w	r3, r3, #15
 800aa88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800aa8a:	693b      	ldr	r3, [r7, #16]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b090      	sub	sp, #64	; 0x40
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f003 f95e 	bl	800dd66 <SDMMC_GetPowerState>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d102      	bne.n	800aab6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aab0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aab4:	e0a5      	b.n	800ac02 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d02e      	beq.n	800ab1c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f003 fba9 	bl	800e21a <SDMMC_CmdSendCID>
 800aac8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800aaca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <SD_InitCard+0x40>
    {
      return errorstate;
 800aad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad2:	e096      	b.n	800ac02 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2100      	movs	r1, #0
 800aada:	4618      	mov	r0, r3
 800aadc:	f003 f989 	bl	800ddf2 <SDMMC_GetResponse>
 800aae0:	4602      	mov	r2, r0
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2104      	movs	r1, #4
 800aaec:	4618      	mov	r0, r3
 800aaee:	f003 f980 	bl	800ddf2 <SDMMC_GetResponse>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2108      	movs	r1, #8
 800aafe:	4618      	mov	r0, r3
 800ab00:	f003 f977 	bl	800ddf2 <SDMMC_GetResponse>
 800ab04:	4602      	mov	r2, r0
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	210c      	movs	r1, #12
 800ab10:	4618      	mov	r0, r3
 800ab12:	f003 f96e 	bl	800ddf2 <SDMMC_GetResponse>
 800ab16:	4602      	mov	r2, r0
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d00d      	beq.n	800ab40 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f107 020e 	add.w	r2, r7, #14
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f003 fbb2 	bl	800e298 <SDMMC_CmdSetRelAdd>
 800ab34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <SD_InitCard+0xac>
    {
      return errorstate;
 800ab3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3e:	e060      	b.n	800ac02 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d036      	beq.n	800abb6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ab48:	89fb      	ldrh	r3, [r7, #14]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab58:	041b      	lsls	r3, r3, #16
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	f003 fb7b 	bl	800e258 <SDMMC_CmdSendCSD>
 800ab62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <SD_InitCard+0xda>
    {
      return errorstate;
 800ab6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6c:	e049      	b.n	800ac02 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2100      	movs	r1, #0
 800ab74:	4618      	mov	r0, r3
 800ab76:	f003 f93c 	bl	800ddf2 <SDMMC_GetResponse>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2104      	movs	r1, #4
 800ab86:	4618      	mov	r0, r3
 800ab88:	f003 f933 	bl	800ddf2 <SDMMC_GetResponse>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2108      	movs	r1, #8
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f003 f92a 	bl	800ddf2 <SDMMC_GetResponse>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	210c      	movs	r1, #12
 800abaa:	4618      	mov	r0, r3
 800abac:	f003 f921 	bl	800ddf2 <SDMMC_GetResponse>
 800abb0:	4602      	mov	r2, r0
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2104      	movs	r1, #4
 800abbc:	4618      	mov	r0, r3
 800abbe:	f003 f918 	bl	800ddf2 <SDMMC_GetResponse>
 800abc2:	4603      	mov	r3, r0
 800abc4:	0d1a      	lsrs	r2, r3, #20
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800abca:	f107 0310 	add.w	r3, r7, #16
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff fba9 	bl	800a328 <HAL_SD_GetCardCSD>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800abe0:	e00f      	b.n	800ac02 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abea:	041b      	lsls	r3, r3, #16
 800abec:	4619      	mov	r1, r3
 800abee:	4610      	mov	r0, r2
 800abf0:	f003 fa2a 	bl	800e048 <SDMMC_CmdSelDesel>
 800abf4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800abf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <SD_InitCard+0x16c>
  {
    return errorstate;
 800abfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abfe:	e000      	b.n	800ac02 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3740      	adds	r7, #64	; 0x40
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
	...

0800ac0c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac14:	2300      	movs	r3, #0
 800ac16:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f003 fa32 	bl	800e08e <SDMMC_CmdGoIdleState>
 800ac2a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	e06e      	b.n	800ad14 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f003 fa45 	bl	800e0ca <SDMMC_CmdOperCond>
 800ac40:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00d      	beq.n	800ac64 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f003 fa1b 	bl	800e08e <SDMMC_CmdGoIdleState>
 800ac58:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d004      	beq.n	800ac6a <SD_PowerON+0x5e>
    {
      return errorstate;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	e057      	b.n	800ad14 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d137      	bne.n	800ace2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2100      	movs	r1, #0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f003 fa46 	bl	800e10a <SDMMC_CmdAppCommand>
 800ac7e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d02d      	beq.n	800ace2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac8a:	e043      	b.n	800ad14 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2100      	movs	r1, #0
 800ac92:	4618      	mov	r0, r3
 800ac94:	f003 fa39 	bl	800e10a <SDMMC_CmdAppCommand>
 800ac98:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <SD_PowerON+0x98>
    {
      return errorstate;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	e037      	b.n	800ad14 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	491c      	ldr	r1, [pc, #112]	; (800ad1c <SD_PowerON+0x110>)
 800acaa:	4618      	mov	r0, r3
 800acac:	f003 fa50 	bl	800e150 <SDMMC_CmdAppOperCommand>
 800acb0:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d002      	beq.n	800acbe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acbc:	e02a      	b.n	800ad14 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2100      	movs	r1, #0
 800acc4:	4618      	mov	r0, r3
 800acc6:	f003 f894 	bl	800ddf2 <SDMMC_GetResponse>
 800acca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	0fdb      	lsrs	r3, r3, #31
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d101      	bne.n	800acd8 <SD_PowerON+0xcc>
 800acd4:	2301      	movs	r3, #1
 800acd6:	e000      	b.n	800acda <SD_PowerON+0xce>
 800acd8:	2300      	movs	r3, #0
 800acda:	613b      	str	r3, [r7, #16]

    count++;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	3301      	adds	r3, #1
 800ace0:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ace8:	4293      	cmp	r3, r2
 800acea:	d802      	bhi.n	800acf2 <SD_PowerON+0xe6>
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d0cc      	beq.n	800ac8c <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d902      	bls.n	800ad02 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800acfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad00:	e008      	b.n	800ad14 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3718      	adds	r7, #24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	c1100000 	.word	0xc1100000

0800ad20 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08c      	sub	sp, #48	; 0x30
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ad2a:	f7f6 fde9 	bl	8001900 <HAL_GetTick>
 800ad2e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2100      	movs	r1, #0
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f003 f859 	bl	800ddf2 <SDMMC_GetResponse>
 800ad40:	4603      	mov	r3, r0
 800ad42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad4a:	d102      	bne.n	800ad52 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad50:	e0b0      	b.n	800aeb4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2140      	movs	r1, #64	; 0x40
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f003 f889 	bl	800de70 <SDMMC_CmdBlockLength>
 800ad5e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d005      	beq.n	800ad72 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	e0a0      	b.n	800aeb4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7a:	041b      	lsls	r3, r3, #16
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f003 f9c3 	bl	800e10a <SDMMC_CmdAppCommand>
 800ad84:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d005      	beq.n	800ad98 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	e08d      	b.n	800aeb4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ad98:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ad9e:	2340      	movs	r3, #64	; 0x40
 800ada0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ada2:	2360      	movs	r3, #96	; 0x60
 800ada4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ada6:	2302      	movs	r3, #2
 800ada8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800adaa:	2300      	movs	r3, #0
 800adac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800adae:	2301      	movs	r3, #1
 800adb0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f107 0208 	add.w	r2, r7, #8
 800adba:	4611      	mov	r1, r2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f003 f82b 	bl	800de18 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f003 faab 	bl	800e322 <SDMMC_CmdStatusRegister>
 800adcc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d02b      	beq.n	800ae2c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	e069      	b.n	800aeb4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adea:	2b00      	cmp	r3, #0
 800adec:	d013      	beq.n	800ae16 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800adee:	2300      	movs	r3, #0
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adf2:	e00d      	b.n	800ae10 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f002 ff85 	bl	800dd08 <SDMMC_ReadFIFO>
 800adfe:	4602      	mov	r2, r0
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	601a      	str	r2, [r3, #0]
        pData++;
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	3304      	adds	r3, #4
 800ae08:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	2b07      	cmp	r3, #7
 800ae14:	d9ee      	bls.n	800adf4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae16:	f7f6 fd73 	bl	8001900 <HAL_GetTick>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae24:	d102      	bne.n	800ae2c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ae26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae2a:	e043      	b.n	800aeb4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae32:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0d2      	beq.n	800ade0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae40:	f003 0308 	and.w	r3, r3, #8
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ae48:	2308      	movs	r3, #8
 800ae4a:	e033      	b.n	800aeb4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e02a      	b.n	800aeb4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae64:	f003 0320 	and.w	r3, r3, #32
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d017      	beq.n	800ae9c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ae6c:	2320      	movs	r3, #32
 800ae6e:	e021      	b.n	800aeb4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f002 ff47 	bl	800dd08 <SDMMC_ReadFIFO>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	601a      	str	r2, [r3, #0]
    pData++;
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	3304      	adds	r3, #4
 800ae84:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae86:	f7f6 fd3b 	bl	8001900 <HAL_GetTick>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae94:	d102      	bne.n	800ae9c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ae96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae9a:	e00b      	b.n	800aeb4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1e2      	bne.n	800ae70 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a03      	ldr	r2, [pc, #12]	; (800aebc <SD_SendSDStatus+0x19c>)
 800aeb0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3730      	adds	r7, #48	; 0x30
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	18000f3a 	.word	0x18000f3a

0800aec0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800aed0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aed4:	e018      	b.n	800af08 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aede:	041b      	lsls	r3, r3, #16
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f003 f9fa 	bl	800e2dc <SDMMC_CmdSendStatus>
 800aee8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	e009      	b.n	800af08 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2100      	movs	r1, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f002 ff79 	bl	800ddf2 <SDMMC_GetResponse>
 800af00:	4602      	mov	r2, r0
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	2300      	movs	r3, #0
 800af1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2100      	movs	r1, #0
 800af26:	4618      	mov	r0, r3
 800af28:	f002 ff63 	bl	800ddf2 <SDMMC_GetResponse>
 800af2c:	4603      	mov	r3, r0
 800af2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af36:	d102      	bne.n	800af3e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af3c:	e02f      	b.n	800af9e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800af3e:	f107 030c 	add.w	r3, r7, #12
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f879 	bl	800b03c <SD_FindSCR>
 800af4a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	e023      	b.n	800af9e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d01c      	beq.n	800af9a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af68:	041b      	lsls	r3, r3, #16
 800af6a:	4619      	mov	r1, r3
 800af6c:	4610      	mov	r0, r2
 800af6e:	f003 f8cc 	bl	800e10a <SDMMC_CmdAppCommand>
 800af72:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	e00f      	b.n	800af9e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2102      	movs	r1, #2
 800af84:	4618      	mov	r0, r3
 800af86:	f003 f903 	bl	800e190 <SDMMC_CmdBusWidth>
 800af8a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	e003      	b.n	800af9e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800af96:	2300      	movs	r3, #0
 800af98:	e001      	b.n	800af9e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b086      	sub	sp, #24
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	2300      	movs	r3, #0
 800afb4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2100      	movs	r1, #0
 800afbc:	4618      	mov	r0, r3
 800afbe:	f002 ff18 	bl	800ddf2 <SDMMC_GetResponse>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afcc:	d102      	bne.n	800afd4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afd2:	e02f      	b.n	800b034 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800afd4:	f107 030c 	add.w	r3, r7, #12
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f82e 	bl	800b03c <SD_FindSCR>
 800afe0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	e023      	b.n	800b034 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d01c      	beq.n	800b030 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800affe:	041b      	lsls	r3, r3, #16
 800b000:	4619      	mov	r1, r3
 800b002:	4610      	mov	r0, r2
 800b004:	f003 f881 	bl	800e10a <SDMMC_CmdAppCommand>
 800b008:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	e00f      	b.n	800b034 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2100      	movs	r1, #0
 800b01a:	4618      	mov	r0, r3
 800b01c:	f003 f8b8 	bl	800e190 <SDMMC_CmdBusWidth>
 800b020:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	e003      	b.n	800b034 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b02c:	2300      	movs	r3, #0
 800b02e:	e001      	b.n	800b034 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b030:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b034:	4618      	mov	r0, r3
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08e      	sub	sp, #56	; 0x38
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b046:	f7f6 fc5b 	bl	8001900 <HAL_GetTick>
 800b04a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b04c:	2300      	movs	r3, #0
 800b04e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b050:	2300      	movs	r3, #0
 800b052:	60bb      	str	r3, [r7, #8]
 800b054:	2300      	movs	r3, #0
 800b056:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2108      	movs	r1, #8
 800b062:	4618      	mov	r0, r3
 800b064:	f002 ff04 	bl	800de70 <SDMMC_CmdBlockLength>
 800b068:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	e0ad      	b.n	800b1d0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07c:	041b      	lsls	r3, r3, #16
 800b07e:	4619      	mov	r1, r3
 800b080:	4610      	mov	r0, r2
 800b082:	f003 f842 	bl	800e10a <SDMMC_CmdAppCommand>
 800b086:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b090:	e09e      	b.n	800b1d0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b092:	f04f 33ff 	mov.w	r3, #4294967295
 800b096:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b098:	2308      	movs	r3, #8
 800b09a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b09c:	2330      	movs	r3, #48	; 0x30
 800b09e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f107 0210 	add.w	r2, r7, #16
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f002 feae 	bl	800de18 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f003 f888 	bl	800e1d6 <SDMMC_CmdSendSCR>
 800b0c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d027      	beq.n	800b11e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	e07e      	b.n	800b1d0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d113      	bne.n	800b108 <SD_FindSCR+0xcc>
 800b0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d110      	bne.n	800b108 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f002 fe0c 	bl	800dd08 <SDMMC_ReadFIFO>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f002 fe05 	bl	800dd08 <SDMMC_ReadFIFO>
 800b0fe:	4603      	mov	r3, r0
 800b100:	60fb      	str	r3, [r7, #12]
      index++;
 800b102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b104:	3301      	adds	r3, #1
 800b106:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b108:	f7f6 fbfa 	bl	8001900 <HAL_GetTick>
 800b10c:	4602      	mov	r2, r0
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b116:	d102      	bne.n	800b11e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b11c:	e058      	b.n	800b1d0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b124:	f240 532a 	movw	r3, #1322	; 0x52a
 800b128:	4013      	ands	r3, r2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0d1      	beq.n	800b0d2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b134:	f003 0308 	and.w	r3, r3, #8
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d005      	beq.n	800b148 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2208      	movs	r2, #8
 800b142:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b144:	2308      	movs	r3, #8
 800b146:	e043      	b.n	800b1d0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14e:	f003 0302 	and.w	r3, r3, #2
 800b152:	2b00      	cmp	r3, #0
 800b154:	d005      	beq.n	800b162 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2202      	movs	r2, #2
 800b15c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b15e:	2302      	movs	r3, #2
 800b160:	e036      	b.n	800b1d0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b168:	f003 0320 	and.w	r3, r3, #32
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2220      	movs	r2, #32
 800b176:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b178:	2320      	movs	r3, #32
 800b17a:	e029      	b.n	800b1d0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a15      	ldr	r2, [pc, #84]	; (800b1d8 <SD_FindSCR+0x19c>)
 800b182:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	061a      	lsls	r2, r3, #24
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	021b      	lsls	r3, r3, #8
 800b18c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b190:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	0a1b      	lsrs	r3, r3, #8
 800b196:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b19a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	0e1b      	lsrs	r3, r3, #24
 800b1a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	601a      	str	r2, [r3, #0]
    scr++;
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	061a      	lsls	r2, r3, #24
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	021b      	lsls	r3, r3, #8
 800b1b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	0a1b      	lsrs	r3, r3, #8
 800b1be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b1c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	0e1b      	lsrs	r3, r3, #24
 800b1c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3738      	adds	r7, #56	; 0x38
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	18000f3a 	.word	0x18000f3a

0800b1dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b086      	sub	sp, #24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ee:	2b1f      	cmp	r3, #31
 800b1f0:	d936      	bls.n	800b260 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	617b      	str	r3, [r7, #20]
 800b1f6:	e027      	b.n	800b248 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f002 fd83 	bl	800dd08 <SDMMC_ReadFIFO>
 800b202:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	b2da      	uxtb	r2, r3
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	3301      	adds	r3, #1
 800b210:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	0a1b      	lsrs	r3, r3, #8
 800b216:	b2da      	uxtb	r2, r3
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	3301      	adds	r3, #1
 800b220:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	0c1b      	lsrs	r3, r3, #16
 800b226:	b2da      	uxtb	r2, r3
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	3301      	adds	r3, #1
 800b230:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	0e1b      	lsrs	r3, r3, #24
 800b236:	b2da      	uxtb	r2, r3
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	3301      	adds	r3, #1
 800b240:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	3301      	adds	r3, #1
 800b246:	617b      	str	r3, [r7, #20]
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2b07      	cmp	r3, #7
 800b24c:	d9d4      	bls.n	800b1f8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b258:	f1a3 0220 	sub.w	r2, r3, #32
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b260:	bf00      	nop
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	2b1f      	cmp	r3, #31
 800b27c:	d93a      	bls.n	800b2f4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b27e:	2300      	movs	r3, #0
 800b280:	617b      	str	r3, [r7, #20]
 800b282:	e02b      	b.n	800b2dc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	3301      	adds	r3, #1
 800b28e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	021a      	lsls	r2, r3, #8
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	4313      	orrs	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	041a      	lsls	r2, r3, #16
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	061a      	lsls	r2, r3, #24
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f107 020c 	add.w	r2, r7, #12
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f002 fd26 	bl	800dd22 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	617b      	str	r3, [r7, #20]
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2b07      	cmp	r3, #7
 800b2e0:	d9d0      	bls.n	800b284 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
 800b2ec:	f1a3 0220 	sub.w	r2, r3, #32
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	621a      	str	r2, [r3, #32]
  }
}
 800b2f4:	bf00      	nop
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b304:	bf00      	nop
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b318:	bf00      	nop
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e049      	b.n	800b3f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d106      	bne.n	800b378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7f5 ffb6 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2202      	movs	r2, #2
 800b37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3304      	adds	r3, #4
 800b388:	4619      	mov	r1, r3
 800b38a:	4610      	mov	r0, r2
 800b38c:	f000 fbec 	bl	800bb68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e049      	b.n	800b4a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f841 	bl	800b4a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2202      	movs	r2, #2
 800b42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3304      	adds	r3, #4
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f000 fb95 	bl	800bb68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	f003 0302 	and.w	r3, r3, #2
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d122      	bne.n	800b518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f003 0302 	and.w	r3, r3, #2
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d11b      	bne.n	800b518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f06f 0202 	mvn.w	r2, #2
 800b4e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	699b      	ldr	r3, [r3, #24]
 800b4f6:	f003 0303 	and.w	r3, r3, #3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fb14 	bl	800bb2c <HAL_TIM_IC_CaptureCallback>
 800b504:	e005      	b.n	800b512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fb06 	bl	800bb18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fb17 	bl	800bb40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	f003 0304 	and.w	r3, r3, #4
 800b522:	2b04      	cmp	r3, #4
 800b524:	d122      	bne.n	800b56c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	f003 0304 	and.w	r3, r3, #4
 800b530:	2b04      	cmp	r3, #4
 800b532:	d11b      	bne.n	800b56c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f06f 0204 	mvn.w	r2, #4
 800b53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2202      	movs	r2, #2
 800b542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	699b      	ldr	r3, [r3, #24]
 800b54a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d003      	beq.n	800b55a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 faea 	bl	800bb2c <HAL_TIM_IC_CaptureCallback>
 800b558:	e005      	b.n	800b566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fadc 	bl	800bb18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 faed 	bl	800bb40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	f003 0308 	and.w	r3, r3, #8
 800b576:	2b08      	cmp	r3, #8
 800b578:	d122      	bne.n	800b5c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	f003 0308 	and.w	r3, r3, #8
 800b584:	2b08      	cmp	r3, #8
 800b586:	d11b      	bne.n	800b5c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f06f 0208 	mvn.w	r2, #8
 800b590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2204      	movs	r2, #4
 800b596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fac0 	bl	800bb2c <HAL_TIM_IC_CaptureCallback>
 800b5ac:	e005      	b.n	800b5ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fab2 	bl	800bb18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fac3 	bl	800bb40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	f003 0310 	and.w	r3, r3, #16
 800b5ca:	2b10      	cmp	r3, #16
 800b5cc:	d122      	bne.n	800b614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	f003 0310 	and.w	r3, r3, #16
 800b5d8:	2b10      	cmp	r3, #16
 800b5da:	d11b      	bne.n	800b614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f06f 0210 	mvn.w	r2, #16
 800b5e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2208      	movs	r2, #8
 800b5ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	69db      	ldr	r3, [r3, #28]
 800b5f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fa96 	bl	800bb2c <HAL_TIM_IC_CaptureCallback>
 800b600:	e005      	b.n	800b60e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa88 	bl	800bb18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fa99 	bl	800bb40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	f003 0301 	and.w	r3, r3, #1
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d10e      	bne.n	800b640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d107      	bne.n	800b640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f06f 0201 	mvn.w	r2, #1
 800b638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fa62 	bl	800bb04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b64a:	2b80      	cmp	r3, #128	; 0x80
 800b64c:	d10e      	bne.n	800b66c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b658:	2b80      	cmp	r3, #128	; 0x80
 800b65a:	d107      	bne.n	800b66c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 ff94 	bl	800c594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b67a:	d10e      	bne.n	800b69a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b686:	2b80      	cmp	r3, #128	; 0x80
 800b688:	d107      	bne.n	800b69a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 ff87 	bl	800c5a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a4:	2b40      	cmp	r3, #64	; 0x40
 800b6a6:	d10e      	bne.n	800b6c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b2:	2b40      	cmp	r3, #64	; 0x40
 800b6b4:	d107      	bne.n	800b6c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 fa47 	bl	800bb54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	f003 0320 	and.w	r3, r3, #32
 800b6d0:	2b20      	cmp	r3, #32
 800b6d2:	d10e      	bne.n	800b6f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f003 0320 	and.w	r3, r3, #32
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	d107      	bne.n	800b6f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f06f 0220 	mvn.w	r2, #32
 800b6ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 ff47 	bl	800c580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6f2:	bf00      	nop
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d101      	bne.n	800b716 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b712:	2302      	movs	r3, #2
 800b714:	e0fd      	b.n	800b912 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b14      	cmp	r3, #20
 800b722:	f200 80f0 	bhi.w	800b906 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b726:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b781 	.word	0x0800b781
 800b730:	0800b907 	.word	0x0800b907
 800b734:	0800b907 	.word	0x0800b907
 800b738:	0800b907 	.word	0x0800b907
 800b73c:	0800b7c1 	.word	0x0800b7c1
 800b740:	0800b907 	.word	0x0800b907
 800b744:	0800b907 	.word	0x0800b907
 800b748:	0800b907 	.word	0x0800b907
 800b74c:	0800b803 	.word	0x0800b803
 800b750:	0800b907 	.word	0x0800b907
 800b754:	0800b907 	.word	0x0800b907
 800b758:	0800b907 	.word	0x0800b907
 800b75c:	0800b843 	.word	0x0800b843
 800b760:	0800b907 	.word	0x0800b907
 800b764:	0800b907 	.word	0x0800b907
 800b768:	0800b907 	.word	0x0800b907
 800b76c:	0800b885 	.word	0x0800b885
 800b770:	0800b907 	.word	0x0800b907
 800b774:	0800b907 	.word	0x0800b907
 800b778:	0800b907 	.word	0x0800b907
 800b77c:	0800b8c5 	.word	0x0800b8c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68b9      	ldr	r1, [r7, #8]
 800b786:	4618      	mov	r0, r3
 800b788:	f000 fa88 	bl	800bc9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	699a      	ldr	r2, [r3, #24]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f042 0208 	orr.w	r2, r2, #8
 800b79a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	699a      	ldr	r2, [r3, #24]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f022 0204 	bic.w	r2, r2, #4
 800b7aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6999      	ldr	r1, [r3, #24]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	691a      	ldr	r2, [r3, #16]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	619a      	str	r2, [r3, #24]
      break;
 800b7be:	e0a3      	b.n	800b908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68b9      	ldr	r1, [r7, #8]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 faf8 	bl	800bdbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	699a      	ldr	r2, [r3, #24]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	699a      	ldr	r2, [r3, #24]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	6999      	ldr	r1, [r3, #24]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	021a      	lsls	r2, r3, #8
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	430a      	orrs	r2, r1
 800b7fe:	619a      	str	r2, [r3, #24]
      break;
 800b800:	e082      	b.n	800b908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 fb61 	bl	800bed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	69da      	ldr	r2, [r3, #28]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f042 0208 	orr.w	r2, r2, #8
 800b81c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	69da      	ldr	r2, [r3, #28]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f022 0204 	bic.w	r2, r2, #4
 800b82c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	69d9      	ldr	r1, [r3, #28]
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	691a      	ldr	r2, [r3, #16]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	430a      	orrs	r2, r1
 800b83e:	61da      	str	r2, [r3, #28]
      break;
 800b840:	e062      	b.n	800b908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 fbc7 	bl	800bfdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	69da      	ldr	r2, [r3, #28]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b85c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	69da      	ldr	r2, [r3, #28]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b86c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69d9      	ldr	r1, [r3, #28]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	021a      	lsls	r2, r3, #8
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	430a      	orrs	r2, r1
 800b880:	61da      	str	r2, [r3, #28]
      break;
 800b882:	e041      	b.n	800b908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68b9      	ldr	r1, [r7, #8]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fc0e 	bl	800c0ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f042 0208 	orr.w	r2, r2, #8
 800b89e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f022 0204 	bic.w	r2, r2, #4
 800b8ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	691a      	ldr	r2, [r3, #16]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b8c2:	e021      	b.n	800b908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68b9      	ldr	r1, [r7, #8]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fc50 	bl	800c170 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	021a      	lsls	r2, r3, #8
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b904:	e000      	b.n	800b908 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop

0800b91c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d101      	bne.n	800b934 <HAL_TIM_ConfigClockSource+0x18>
 800b930:	2302      	movs	r3, #2
 800b932:	e0db      	b.n	800baec <HAL_TIM_ConfigClockSource+0x1d0>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2202      	movs	r2, #2
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4b69      	ldr	r3, [pc, #420]	; (800baf4 <HAL_TIM_ConfigClockSource+0x1d8>)
 800b950:	4013      	ands	r3, r2
 800b952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b95a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a63      	ldr	r2, [pc, #396]	; (800baf8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	f000 80a9 	beq.w	800bac2 <HAL_TIM_ConfigClockSource+0x1a6>
 800b970:	4a61      	ldr	r2, [pc, #388]	; (800baf8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b972:	4293      	cmp	r3, r2
 800b974:	f200 80ae 	bhi.w	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b978:	4a60      	ldr	r2, [pc, #384]	; (800bafc <HAL_TIM_ConfigClockSource+0x1e0>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	f000 80a1 	beq.w	800bac2 <HAL_TIM_ConfigClockSource+0x1a6>
 800b980:	4a5e      	ldr	r2, [pc, #376]	; (800bafc <HAL_TIM_ConfigClockSource+0x1e0>)
 800b982:	4293      	cmp	r3, r2
 800b984:	f200 80a6 	bhi.w	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b988:	4a5d      	ldr	r2, [pc, #372]	; (800bb00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	f000 8099 	beq.w	800bac2 <HAL_TIM_ConfigClockSource+0x1a6>
 800b990:	4a5b      	ldr	r2, [pc, #364]	; (800bb00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b992:	4293      	cmp	r3, r2
 800b994:	f200 809e 	bhi.w	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b998:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b99c:	f000 8091 	beq.w	800bac2 <HAL_TIM_ConfigClockSource+0x1a6>
 800b9a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b9a4:	f200 8096 	bhi.w	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b9a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9ac:	f000 8089 	beq.w	800bac2 <HAL_TIM_ConfigClockSource+0x1a6>
 800b9b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9b4:	f200 808e 	bhi.w	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b9b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9bc:	d03e      	beq.n	800ba3c <HAL_TIM_ConfigClockSource+0x120>
 800b9be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9c2:	f200 8087 	bhi.w	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b9c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ca:	f000 8085 	beq.w	800bad8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9d2:	d87f      	bhi.n	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b9d4:	2b70      	cmp	r3, #112	; 0x70
 800b9d6:	d01a      	beq.n	800ba0e <HAL_TIM_ConfigClockSource+0xf2>
 800b9d8:	2b70      	cmp	r3, #112	; 0x70
 800b9da:	d87b      	bhi.n	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b9dc:	2b60      	cmp	r3, #96	; 0x60
 800b9de:	d050      	beq.n	800ba82 <HAL_TIM_ConfigClockSource+0x166>
 800b9e0:	2b60      	cmp	r3, #96	; 0x60
 800b9e2:	d877      	bhi.n	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b9e4:	2b50      	cmp	r3, #80	; 0x50
 800b9e6:	d03c      	beq.n	800ba62 <HAL_TIM_ConfigClockSource+0x146>
 800b9e8:	2b50      	cmp	r3, #80	; 0x50
 800b9ea:	d873      	bhi.n	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b9ec:	2b40      	cmp	r3, #64	; 0x40
 800b9ee:	d058      	beq.n	800baa2 <HAL_TIM_ConfigClockSource+0x186>
 800b9f0:	2b40      	cmp	r3, #64	; 0x40
 800b9f2:	d86f      	bhi.n	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b9f4:	2b30      	cmp	r3, #48	; 0x30
 800b9f6:	d064      	beq.n	800bac2 <HAL_TIM_ConfigClockSource+0x1a6>
 800b9f8:	2b30      	cmp	r3, #48	; 0x30
 800b9fa:	d86b      	bhi.n	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	d060      	beq.n	800bac2 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba00:	2b20      	cmp	r3, #32
 800ba02:	d867      	bhi.n	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d05c      	beq.n	800bac2 <HAL_TIM_ConfigClockSource+0x1a6>
 800ba08:	2b10      	cmp	r3, #16
 800ba0a:	d05a      	beq.n	800bac2 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ba0c:	e062      	b.n	800bad4 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6818      	ldr	r0, [r3, #0]
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	6899      	ldr	r1, [r3, #8]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	f000 fc89 	bl	800c334 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ba30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	609a      	str	r2, [r3, #8]
      break;
 800ba3a:	e04e      	b.n	800bada <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6818      	ldr	r0, [r3, #0]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	6899      	ldr	r1, [r3, #8]
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	685a      	ldr	r2, [r3, #4]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	f000 fc72 	bl	800c334 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689a      	ldr	r2, [r3, #8]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba5e:	609a      	str	r2, [r3, #8]
      break;
 800ba60:	e03b      	b.n	800bada <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6818      	ldr	r0, [r3, #0]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	6859      	ldr	r1, [r3, #4]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	f000 fbe2 	bl	800c238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2150      	movs	r1, #80	; 0x50
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 fc3c 	bl	800c2f8 <TIM_ITRx_SetConfig>
      break;
 800ba80:	e02b      	b.n	800bada <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6818      	ldr	r0, [r3, #0]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	6859      	ldr	r1, [r3, #4]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	f000 fc01 	bl	800c296 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2160      	movs	r1, #96	; 0x60
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 fc2c 	bl	800c2f8 <TIM_ITRx_SetConfig>
      break;
 800baa0:	e01b      	b.n	800bada <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6818      	ldr	r0, [r3, #0]
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	6859      	ldr	r1, [r3, #4]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	461a      	mov	r2, r3
 800bab0:	f000 fbc2 	bl	800c238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2140      	movs	r1, #64	; 0x40
 800baba:	4618      	mov	r0, r3
 800babc:	f000 fc1c 	bl	800c2f8 <TIM_ITRx_SetConfig>
      break;
 800bac0:	e00b      	b.n	800bada <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4619      	mov	r1, r3
 800bacc:	4610      	mov	r0, r2
 800bace:	f000 fc13 	bl	800c2f8 <TIM_ITRx_SetConfig>
        break;
 800bad2:	e002      	b.n	800bada <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bad4:	bf00      	nop
 800bad6:	e000      	b.n	800bada <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bad8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	ffceff88 	.word	0xffceff88
 800baf8:	00100040 	.word	0x00100040
 800bafc:	00100030 	.word	0x00100030
 800bb00:	00100020 	.word	0x00100020

0800bb04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bb0c:	bf00      	nop
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a40      	ldr	r2, [pc, #256]	; (800bc7c <TIM_Base_SetConfig+0x114>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d013      	beq.n	800bba8 <TIM_Base_SetConfig+0x40>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb86:	d00f      	beq.n	800bba8 <TIM_Base_SetConfig+0x40>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a3d      	ldr	r2, [pc, #244]	; (800bc80 <TIM_Base_SetConfig+0x118>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d00b      	beq.n	800bba8 <TIM_Base_SetConfig+0x40>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a3c      	ldr	r2, [pc, #240]	; (800bc84 <TIM_Base_SetConfig+0x11c>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d007      	beq.n	800bba8 <TIM_Base_SetConfig+0x40>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a3b      	ldr	r2, [pc, #236]	; (800bc88 <TIM_Base_SetConfig+0x120>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d003      	beq.n	800bba8 <TIM_Base_SetConfig+0x40>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4a3a      	ldr	r2, [pc, #232]	; (800bc8c <TIM_Base_SetConfig+0x124>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d108      	bne.n	800bbba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a2f      	ldr	r2, [pc, #188]	; (800bc7c <TIM_Base_SetConfig+0x114>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d01f      	beq.n	800bc02 <TIM_Base_SetConfig+0x9a>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbc8:	d01b      	beq.n	800bc02 <TIM_Base_SetConfig+0x9a>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a2c      	ldr	r2, [pc, #176]	; (800bc80 <TIM_Base_SetConfig+0x118>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d017      	beq.n	800bc02 <TIM_Base_SetConfig+0x9a>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a2b      	ldr	r2, [pc, #172]	; (800bc84 <TIM_Base_SetConfig+0x11c>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d013      	beq.n	800bc02 <TIM_Base_SetConfig+0x9a>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4a2a      	ldr	r2, [pc, #168]	; (800bc88 <TIM_Base_SetConfig+0x120>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d00f      	beq.n	800bc02 <TIM_Base_SetConfig+0x9a>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4a29      	ldr	r2, [pc, #164]	; (800bc8c <TIM_Base_SetConfig+0x124>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d00b      	beq.n	800bc02 <TIM_Base_SetConfig+0x9a>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a28      	ldr	r2, [pc, #160]	; (800bc90 <TIM_Base_SetConfig+0x128>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d007      	beq.n	800bc02 <TIM_Base_SetConfig+0x9a>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4a27      	ldr	r2, [pc, #156]	; (800bc94 <TIM_Base_SetConfig+0x12c>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d003      	beq.n	800bc02 <TIM_Base_SetConfig+0x9a>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a26      	ldr	r2, [pc, #152]	; (800bc98 <TIM_Base_SetConfig+0x130>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d108      	bne.n	800bc14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a10      	ldr	r2, [pc, #64]	; (800bc7c <TIM_Base_SetConfig+0x114>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00f      	beq.n	800bc60 <TIM_Base_SetConfig+0xf8>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a12      	ldr	r2, [pc, #72]	; (800bc8c <TIM_Base_SetConfig+0x124>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d00b      	beq.n	800bc60 <TIM_Base_SetConfig+0xf8>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a11      	ldr	r2, [pc, #68]	; (800bc90 <TIM_Base_SetConfig+0x128>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d007      	beq.n	800bc60 <TIM_Base_SetConfig+0xf8>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a10      	ldr	r2, [pc, #64]	; (800bc94 <TIM_Base_SetConfig+0x12c>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d003      	beq.n	800bc60 <TIM_Base_SetConfig+0xf8>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a0f      	ldr	r2, [pc, #60]	; (800bc98 <TIM_Base_SetConfig+0x130>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d103      	bne.n	800bc68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	691a      	ldr	r2, [r3, #16]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	615a      	str	r2, [r3, #20]
}
 800bc6e:	bf00      	nop
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	40010000 	.word	0x40010000
 800bc80:	40000400 	.word	0x40000400
 800bc84:	40000800 	.word	0x40000800
 800bc88:	40000c00 	.word	0x40000c00
 800bc8c:	40010400 	.word	0x40010400
 800bc90:	40014000 	.word	0x40014000
 800bc94:	40014400 	.word	0x40014400
 800bc98:	40014800 	.word	0x40014800

0800bc9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	f023 0201 	bic.w	r2, r3, #1
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	4b37      	ldr	r3, [pc, #220]	; (800bda4 <TIM_OC1_SetConfig+0x108>)
 800bcc8:	4013      	ands	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f023 0303 	bic.w	r3, r3, #3
 800bcd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	f023 0302 	bic.w	r3, r3, #2
 800bce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a2d      	ldr	r2, [pc, #180]	; (800bda8 <TIM_OC1_SetConfig+0x10c>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d00f      	beq.n	800bd18 <TIM_OC1_SetConfig+0x7c>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a2c      	ldr	r2, [pc, #176]	; (800bdac <TIM_OC1_SetConfig+0x110>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d00b      	beq.n	800bd18 <TIM_OC1_SetConfig+0x7c>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a2b      	ldr	r2, [pc, #172]	; (800bdb0 <TIM_OC1_SetConfig+0x114>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d007      	beq.n	800bd18 <TIM_OC1_SetConfig+0x7c>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a2a      	ldr	r2, [pc, #168]	; (800bdb4 <TIM_OC1_SetConfig+0x118>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d003      	beq.n	800bd18 <TIM_OC1_SetConfig+0x7c>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a29      	ldr	r2, [pc, #164]	; (800bdb8 <TIM_OC1_SetConfig+0x11c>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d10c      	bne.n	800bd32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	f023 0308 	bic.w	r3, r3, #8
 800bd1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	f023 0304 	bic.w	r3, r3, #4
 800bd30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a1c      	ldr	r2, [pc, #112]	; (800bda8 <TIM_OC1_SetConfig+0x10c>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d00f      	beq.n	800bd5a <TIM_OC1_SetConfig+0xbe>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a1b      	ldr	r2, [pc, #108]	; (800bdac <TIM_OC1_SetConfig+0x110>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d00b      	beq.n	800bd5a <TIM_OC1_SetConfig+0xbe>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a1a      	ldr	r2, [pc, #104]	; (800bdb0 <TIM_OC1_SetConfig+0x114>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d007      	beq.n	800bd5a <TIM_OC1_SetConfig+0xbe>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a19      	ldr	r2, [pc, #100]	; (800bdb4 <TIM_OC1_SetConfig+0x118>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d003      	beq.n	800bd5a <TIM_OC1_SetConfig+0xbe>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4a18      	ldr	r2, [pc, #96]	; (800bdb8 <TIM_OC1_SetConfig+0x11c>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d111      	bne.n	800bd7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	693a      	ldr	r2, [r7, #16]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	693a      	ldr	r2, [r7, #16]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	693a      	ldr	r2, [r7, #16]
 800bd82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	621a      	str	r2, [r3, #32]
}
 800bd98:	bf00      	nop
 800bd9a:	371c      	adds	r7, #28
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr
 800bda4:	fffeff8f 	.word	0xfffeff8f
 800bda8:	40010000 	.word	0x40010000
 800bdac:	40010400 	.word	0x40010400
 800bdb0:	40014000 	.word	0x40014000
 800bdb4:	40014400 	.word	0x40014400
 800bdb8:	40014800 	.word	0x40014800

0800bdbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b087      	sub	sp, #28
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	f023 0210 	bic.w	r2, r3, #16
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	4b34      	ldr	r3, [pc, #208]	; (800beb8 <TIM_OC2_SetConfig+0xfc>)
 800bde8:	4013      	ands	r3, r2
 800bdea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	021b      	lsls	r3, r3, #8
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	f023 0320 	bic.w	r3, r3, #32
 800be06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	011b      	lsls	r3, r3, #4
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	4313      	orrs	r3, r2
 800be12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a29      	ldr	r2, [pc, #164]	; (800bebc <TIM_OC2_SetConfig+0x100>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d003      	beq.n	800be24 <TIM_OC2_SetConfig+0x68>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a28      	ldr	r2, [pc, #160]	; (800bec0 <TIM_OC2_SetConfig+0x104>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d10d      	bne.n	800be40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	011b      	lsls	r3, r3, #4
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	4313      	orrs	r3, r2
 800be36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a1e      	ldr	r2, [pc, #120]	; (800bebc <TIM_OC2_SetConfig+0x100>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d00f      	beq.n	800be68 <TIM_OC2_SetConfig+0xac>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a1d      	ldr	r2, [pc, #116]	; (800bec0 <TIM_OC2_SetConfig+0x104>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d00b      	beq.n	800be68 <TIM_OC2_SetConfig+0xac>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a1c      	ldr	r2, [pc, #112]	; (800bec4 <TIM_OC2_SetConfig+0x108>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d007      	beq.n	800be68 <TIM_OC2_SetConfig+0xac>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a1b      	ldr	r2, [pc, #108]	; (800bec8 <TIM_OC2_SetConfig+0x10c>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d003      	beq.n	800be68 <TIM_OC2_SetConfig+0xac>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a1a      	ldr	r2, [pc, #104]	; (800becc <TIM_OC2_SetConfig+0x110>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d113      	bne.n	800be90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	4313      	orrs	r3, r2
 800be82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	699b      	ldr	r3, [r3, #24]
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	621a      	str	r2, [r3, #32]
}
 800beaa:	bf00      	nop
 800beac:	371c      	adds	r7, #28
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	feff8fff 	.word	0xfeff8fff
 800bebc:	40010000 	.word	0x40010000
 800bec0:	40010400 	.word	0x40010400
 800bec4:	40014000 	.word	0x40014000
 800bec8:	40014400 	.word	0x40014400
 800becc:	40014800 	.word	0x40014800

0800bed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a1b      	ldr	r3, [r3, #32]
 800beea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	69db      	ldr	r3, [r3, #28]
 800bef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800befe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f023 0303 	bic.w	r3, r3, #3
 800bf06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	021b      	lsls	r3, r3, #8
 800bf20:	697a      	ldr	r2, [r7, #20]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a27      	ldr	r2, [pc, #156]	; (800bfc8 <TIM_OC3_SetConfig+0xf8>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d003      	beq.n	800bf36 <TIM_OC3_SetConfig+0x66>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a26      	ldr	r2, [pc, #152]	; (800bfcc <TIM_OC3_SetConfig+0xfc>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d10d      	bne.n	800bf52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	021b      	lsls	r3, r3, #8
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4a1c      	ldr	r2, [pc, #112]	; (800bfc8 <TIM_OC3_SetConfig+0xf8>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d00f      	beq.n	800bf7a <TIM_OC3_SetConfig+0xaa>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a1b      	ldr	r2, [pc, #108]	; (800bfcc <TIM_OC3_SetConfig+0xfc>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d00b      	beq.n	800bf7a <TIM_OC3_SetConfig+0xaa>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a1a      	ldr	r2, [pc, #104]	; (800bfd0 <TIM_OC3_SetConfig+0x100>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d007      	beq.n	800bf7a <TIM_OC3_SetConfig+0xaa>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a19      	ldr	r2, [pc, #100]	; (800bfd4 <TIM_OC3_SetConfig+0x104>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d003      	beq.n	800bf7a <TIM_OC3_SetConfig+0xaa>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a18      	ldr	r2, [pc, #96]	; (800bfd8 <TIM_OC3_SetConfig+0x108>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d113      	bne.n	800bfa2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	695b      	ldr	r3, [r3, #20]
 800bf8e:	011b      	lsls	r3, r3, #4
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	011b      	lsls	r3, r3, #4
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	685a      	ldr	r2, [r3, #4]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	621a      	str	r2, [r3, #32]
}
 800bfbc:	bf00      	nop
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	40010000 	.word	0x40010000
 800bfcc:	40010400 	.word	0x40010400
 800bfd0:	40014000 	.word	0x40014000
 800bfd4:	40014400 	.word	0x40014400
 800bfd8:	40014800 	.word	0x40014800

0800bfdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b087      	sub	sp, #28
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	69db      	ldr	r3, [r3, #28]
 800c002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	021b      	lsls	r3, r3, #8
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	031b      	lsls	r3, r3, #12
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	4313      	orrs	r3, r2
 800c032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a18      	ldr	r2, [pc, #96]	; (800c098 <TIM_OC4_SetConfig+0xbc>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d00f      	beq.n	800c05c <TIM_OC4_SetConfig+0x80>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a17      	ldr	r2, [pc, #92]	; (800c09c <TIM_OC4_SetConfig+0xc0>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d00b      	beq.n	800c05c <TIM_OC4_SetConfig+0x80>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a16      	ldr	r2, [pc, #88]	; (800c0a0 <TIM_OC4_SetConfig+0xc4>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d007      	beq.n	800c05c <TIM_OC4_SetConfig+0x80>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a15      	ldr	r2, [pc, #84]	; (800c0a4 <TIM_OC4_SetConfig+0xc8>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d003      	beq.n	800c05c <TIM_OC4_SetConfig+0x80>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a14      	ldr	r2, [pc, #80]	; (800c0a8 <TIM_OC4_SetConfig+0xcc>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d109      	bne.n	800c070 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	019b      	lsls	r3, r3, #6
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685a      	ldr	r2, [r3, #4]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	621a      	str	r2, [r3, #32]
}
 800c08a:	bf00      	nop
 800c08c:	371c      	adds	r7, #28
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	40010000 	.word	0x40010000
 800c09c:	40010400 	.word	0x40010400
 800c0a0:	40014000 	.word	0x40014000
 800c0a4:	40014400 	.word	0x40014400
 800c0a8:	40014800 	.word	0x40014800

0800c0ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b087      	sub	sp, #28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c0ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	041b      	lsls	r3, r3, #16
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4a17      	ldr	r2, [pc, #92]	; (800c15c <TIM_OC5_SetConfig+0xb0>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d00f      	beq.n	800c122 <TIM_OC5_SetConfig+0x76>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a16      	ldr	r2, [pc, #88]	; (800c160 <TIM_OC5_SetConfig+0xb4>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d00b      	beq.n	800c122 <TIM_OC5_SetConfig+0x76>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4a15      	ldr	r2, [pc, #84]	; (800c164 <TIM_OC5_SetConfig+0xb8>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d007      	beq.n	800c122 <TIM_OC5_SetConfig+0x76>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4a14      	ldr	r2, [pc, #80]	; (800c168 <TIM_OC5_SetConfig+0xbc>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d003      	beq.n	800c122 <TIM_OC5_SetConfig+0x76>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4a13      	ldr	r2, [pc, #76]	; (800c16c <TIM_OC5_SetConfig+0xc0>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d109      	bne.n	800c136 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c128:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	021b      	lsls	r3, r3, #8
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	4313      	orrs	r3, r2
 800c134:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	697a      	ldr	r2, [r7, #20]
 800c13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	621a      	str	r2, [r3, #32]
}
 800c150:	bf00      	nop
 800c152:	371c      	adds	r7, #28
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	40010000 	.word	0x40010000
 800c160:	40010400 	.word	0x40010400
 800c164:	40014000 	.word	0x40014000
 800c168:	40014400 	.word	0x40014400
 800c16c:	40014800 	.word	0x40014800

0800c170 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c170:	b480      	push	{r7}
 800c172:	b087      	sub	sp, #28
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a1b      	ldr	r3, [r3, #32]
 800c17e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c19e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	021b      	lsls	r3, r3, #8
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c1b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	051b      	lsls	r3, r3, #20
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a18      	ldr	r2, [pc, #96]	; (800c224 <TIM_OC6_SetConfig+0xb4>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d00f      	beq.n	800c1e8 <TIM_OC6_SetConfig+0x78>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a17      	ldr	r2, [pc, #92]	; (800c228 <TIM_OC6_SetConfig+0xb8>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d00b      	beq.n	800c1e8 <TIM_OC6_SetConfig+0x78>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a16      	ldr	r2, [pc, #88]	; (800c22c <TIM_OC6_SetConfig+0xbc>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d007      	beq.n	800c1e8 <TIM_OC6_SetConfig+0x78>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a15      	ldr	r2, [pc, #84]	; (800c230 <TIM_OC6_SetConfig+0xc0>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d003      	beq.n	800c1e8 <TIM_OC6_SetConfig+0x78>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a14      	ldr	r2, [pc, #80]	; (800c234 <TIM_OC6_SetConfig+0xc4>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d109      	bne.n	800c1fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c1ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	029b      	lsls	r3, r3, #10
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	621a      	str	r2, [r3, #32]
}
 800c216:	bf00      	nop
 800c218:	371c      	adds	r7, #28
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	40010000 	.word	0x40010000
 800c228:	40010400 	.word	0x40010400
 800c22c:	40014000 	.word	0x40014000
 800c230:	40014400 	.word	0x40014400
 800c234:	40014800 	.word	0x40014800

0800c238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	f023 0201 	bic.w	r2, r3, #1
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	011b      	lsls	r3, r3, #4
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f023 030a 	bic.w	r3, r3, #10
 800c274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	621a      	str	r2, [r3, #32]
}
 800c28a:	bf00      	nop
 800c28c:	371c      	adds	r7, #28
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr

0800c296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c296:	b480      	push	{r7}
 800c298:	b087      	sub	sp, #28
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	60f8      	str	r0, [r7, #12]
 800c29e:	60b9      	str	r1, [r7, #8]
 800c2a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6a1b      	ldr	r3, [r3, #32]
 800c2a6:	f023 0210 	bic.w	r2, r3, #16
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6a1b      	ldr	r3, [r3, #32]
 800c2b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c2c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	031b      	lsls	r3, r3, #12
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c2d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	011b      	lsls	r3, r3, #4
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	697a      	ldr	r2, [r7, #20]
 800c2e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	621a      	str	r2, [r3, #32]
}
 800c2ea:	bf00      	nop
 800c2ec:	371c      	adds	r7, #28
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
	...

0800c2f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	4b09      	ldr	r3, [pc, #36]	; (800c330 <TIM_ITRx_SetConfig+0x38>)
 800c30c:	4013      	ands	r3, r2
 800c30e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c310:	683a      	ldr	r2, [r7, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	4313      	orrs	r3, r2
 800c316:	f043 0307 	orr.w	r3, r3, #7
 800c31a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	609a      	str	r2, [r3, #8]
}
 800c322:	bf00      	nop
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	ffcfff8f 	.word	0xffcfff8f

0800c334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c334:	b480      	push	{r7}
 800c336:	b087      	sub	sp, #28
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
 800c340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c34e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	021a      	lsls	r2, r3, #8
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	431a      	orrs	r2, r3
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	697a      	ldr	r2, [r7, #20]
 800c35e:	4313      	orrs	r3, r2
 800c360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	697a      	ldr	r2, [r7, #20]
 800c366:	609a      	str	r2, [r3, #8]
}
 800c368:	bf00      	nop
 800c36a:	371c      	adds	r7, #28
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c384:	2b01      	cmp	r3, #1
 800c386:	d101      	bne.n	800c38c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c388:	2302      	movs	r3, #2
 800c38a:	e068      	b.n	800c45e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a2e      	ldr	r2, [pc, #184]	; (800c46c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d004      	beq.n	800c3c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a2d      	ldr	r2, [pc, #180]	; (800c470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d108      	bne.n	800c3d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c3c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a1e      	ldr	r2, [pc, #120]	; (800c46c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d01d      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3fe:	d018      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a1b      	ldr	r2, [pc, #108]	; (800c474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d013      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a1a      	ldr	r2, [pc, #104]	; (800c478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d00e      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a18      	ldr	r2, [pc, #96]	; (800c47c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d009      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a13      	ldr	r2, [pc, #76]	; (800c470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d004      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a14      	ldr	r2, [pc, #80]	; (800c480 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d10c      	bne.n	800c44c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	4313      	orrs	r3, r2
 800c442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	40010000 	.word	0x40010000
 800c470:	40010400 	.word	0x40010400
 800c474:	40000400 	.word	0x40000400
 800c478:	40000800 	.word	0x40000800
 800c47c:	40000c00 	.word	0x40000c00
 800c480:	40001800 	.word	0x40001800

0800c484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c48e:	2300      	movs	r3, #0
 800c490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d101      	bne.n	800c4a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c49c:	2302      	movs	r3, #2
 800c49e:	e065      	b.n	800c56c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	691b      	ldr	r3, [r3, #16]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	695b      	ldr	r3, [r3, #20]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c506:	4313      	orrs	r3, r2
 800c508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	699b      	ldr	r3, [r3, #24]
 800c514:	041b      	lsls	r3, r3, #16
 800c516:	4313      	orrs	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a16      	ldr	r2, [pc, #88]	; (800c578 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d004      	beq.n	800c52e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a14      	ldr	r2, [pc, #80]	; (800c57c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d115      	bne.n	800c55a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c538:	051b      	lsls	r3, r3, #20
 800c53a:	4313      	orrs	r3, r2
 800c53c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	69db      	ldr	r3, [r3, #28]
 800c548:	4313      	orrs	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3714      	adds	r7, #20
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	40010000 	.word	0x40010000
 800c57c:	40010400 	.word	0x40010400

0800c580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e042      	b.n	800c654 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d106      	bne.n	800c5e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f7f4 ffb9 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2224      	movs	r2, #36	; 0x24
 800c5ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f022 0201 	bic.w	r2, r2, #1
 800c5fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fb06 	bl	800cc10 <UART_SetConfig>
 800c604:	4603      	mov	r3, r0
 800c606:	2b01      	cmp	r3, #1
 800c608:	d101      	bne.n	800c60e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e022      	b.n	800c654 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c612:	2b00      	cmp	r3, #0
 800c614:	d002      	beq.n	800c61c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f001 f85a 	bl	800d6d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c62a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	689a      	ldr	r2, [r3, #8]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c63a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f042 0201 	orr.w	r2, r2, #1
 800c64a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f001 f8e1 	bl	800d814 <UART_CheckIdleState>
 800c652:	4603      	mov	r3, r0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b088      	sub	sp, #32
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	69db      	ldr	r3, [r3, #28]
 800c66a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c67c:	69fa      	ldr	r2, [r7, #28]
 800c67e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c682:	4013      	ands	r3, r2
 800c684:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d118      	bne.n	800c6be <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	f003 0320 	and.w	r3, r3, #32
 800c692:	2b00      	cmp	r3, #0
 800c694:	d013      	beq.n	800c6be <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	f003 0320 	and.w	r3, r3, #32
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d104      	bne.n	800c6aa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d009      	beq.n	800c6be <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 8282 	beq.w	800cbb8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	4798      	blx	r3
      }
      return;
 800c6bc:	e27c      	b.n	800cbb8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f000 80ef 	beq.w	800c8a4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	4b73      	ldr	r3, [pc, #460]	; (800c898 <HAL_UART_IRQHandler+0x23c>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d105      	bne.n	800c6dc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	4b72      	ldr	r3, [pc, #456]	; (800c89c <HAL_UART_IRQHandler+0x240>)
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f000 80e4 	beq.w	800c8a4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	f003 0301 	and.w	r3, r3, #1
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d010      	beq.n	800c708 <HAL_UART_IRQHandler+0xac>
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00b      	beq.n	800c708 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6fe:	f043 0201 	orr.w	r2, r3, #1
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d010      	beq.n	800c734 <HAL_UART_IRQHandler+0xd8>
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00b      	beq.n	800c734 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2202      	movs	r2, #2
 800c722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c72a:	f043 0204 	orr.w	r2, r3, #4
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	f003 0304 	and.w	r3, r3, #4
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d010      	beq.n	800c760 <HAL_UART_IRQHandler+0x104>
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00b      	beq.n	800c760 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2204      	movs	r2, #4
 800c74e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c756:	f043 0202 	orr.w	r2, r3, #2
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	f003 0308 	and.w	r3, r3, #8
 800c766:	2b00      	cmp	r3, #0
 800c768:	d015      	beq.n	800c796 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	f003 0320 	and.w	r3, r3, #32
 800c770:	2b00      	cmp	r3, #0
 800c772:	d104      	bne.n	800c77e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c774:	697a      	ldr	r2, [r7, #20]
 800c776:	4b48      	ldr	r3, [pc, #288]	; (800c898 <HAL_UART_IRQHandler+0x23c>)
 800c778:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00b      	beq.n	800c796 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2208      	movs	r2, #8
 800c784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c78c:	f043 0208 	orr.w	r2, r3, #8
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d011      	beq.n	800c7c4 <HAL_UART_IRQHandler+0x168>
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00c      	beq.n	800c7c4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ba:	f043 0220 	orr.w	r2, r3, #32
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 81f6 	beq.w	800cbbc <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	f003 0320 	and.w	r3, r3, #32
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d011      	beq.n	800c7fe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	f003 0320 	and.w	r3, r3, #32
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d104      	bne.n	800c7ee <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d007      	beq.n	800c7fe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d003      	beq.n	800c7fe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c804:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c810:	2b40      	cmp	r3, #64	; 0x40
 800c812:	d004      	beq.n	800c81e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d031      	beq.n	800c882 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f001 f8c4 	bl	800d9ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c82e:	2b40      	cmp	r3, #64	; 0x40
 800c830:	d123      	bne.n	800c87a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	689a      	ldr	r2, [r3, #8]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c840:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d013      	beq.n	800c872 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c84e:	4a14      	ldr	r2, [pc, #80]	; (800c8a0 <HAL_UART_IRQHandler+0x244>)
 800c850:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c856:	4618      	mov	r0, r3
 800c858:	f7f6 f894 	bl	8002984 <HAL_DMA_Abort_IT>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d017      	beq.n	800c892 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c86c:	4610      	mov	r0, r2
 800c86e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c870:	e00f      	b.n	800c892 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f9b6 	bl	800cbe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c878:	e00b      	b.n	800c892 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f9b2 	bl	800cbe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c880:	e007      	b.n	800c892 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f9ae 	bl	800cbe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c890:	e194      	b.n	800cbbc <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c892:	bf00      	nop
    return;
 800c894:	e192      	b.n	800cbbc <HAL_UART_IRQHandler+0x560>
 800c896:	bf00      	nop
 800c898:	10000001 	.word	0x10000001
 800c89c:	04000120 	.word	0x04000120
 800c8a0:	0800da11 	.word	0x0800da11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	f040 810f 	bne.w	800cacc <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	f003 0310 	and.w	r3, r3, #16
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 8109 	beq.w	800cacc <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	f003 0310 	and.w	r3, r3, #16
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 8103 	beq.w	800cacc <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2210      	movs	r2, #16
 800c8cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d8:	2b40      	cmp	r3, #64	; 0x40
 800c8da:	f040 80bb 	bne.w	800ca54 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a96      	ldr	r2, [pc, #600]	; (800cb40 <HAL_UART_IRQHandler+0x4e4>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d059      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a94      	ldr	r2, [pc, #592]	; (800cb44 <HAL_UART_IRQHandler+0x4e8>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d053      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a92      	ldr	r2, [pc, #584]	; (800cb48 <HAL_UART_IRQHandler+0x4ec>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d04d      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a90      	ldr	r2, [pc, #576]	; (800cb4c <HAL_UART_IRQHandler+0x4f0>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d047      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a8e      	ldr	r2, [pc, #568]	; (800cb50 <HAL_UART_IRQHandler+0x4f4>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d041      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a8c      	ldr	r2, [pc, #560]	; (800cb54 <HAL_UART_IRQHandler+0x4f8>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d03b      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a8a      	ldr	r2, [pc, #552]	; (800cb58 <HAL_UART_IRQHandler+0x4fc>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d035      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a88      	ldr	r2, [pc, #544]	; (800cb5c <HAL_UART_IRQHandler+0x500>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d02f      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a86      	ldr	r2, [pc, #536]	; (800cb60 <HAL_UART_IRQHandler+0x504>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d029      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a84      	ldr	r2, [pc, #528]	; (800cb64 <HAL_UART_IRQHandler+0x508>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d023      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a82      	ldr	r2, [pc, #520]	; (800cb68 <HAL_UART_IRQHandler+0x50c>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d01d      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a80      	ldr	r2, [pc, #512]	; (800cb6c <HAL_UART_IRQHandler+0x510>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d017      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a7e      	ldr	r2, [pc, #504]	; (800cb70 <HAL_UART_IRQHandler+0x514>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d011      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a7c      	ldr	r2, [pc, #496]	; (800cb74 <HAL_UART_IRQHandler+0x518>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d00b      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a7a      	ldr	r2, [pc, #488]	; (800cb78 <HAL_UART_IRQHandler+0x51c>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d005      	beq.n	800c99e <HAL_UART_IRQHandler+0x342>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a78      	ldr	r2, [pc, #480]	; (800cb7c <HAL_UART_IRQHandler+0x520>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d105      	bne.n	800c9aa <HAL_UART_IRQHandler+0x34e>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	e004      	b.n	800c9b4 <HAL_UART_IRQHandler+0x358>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c9b6:	893b      	ldrh	r3, [r7, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 8101 	beq.w	800cbc0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9c4:	893a      	ldrh	r2, [r7, #8]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	f080 80fa 	bcs.w	800cbc0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	893a      	ldrh	r2, [r7, #8]
 800c9d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9d8:	69db      	ldr	r3, [r3, #28]
 800c9da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9de:	d02b      	beq.n	800ca38 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c9ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	689a      	ldr	r2, [r3, #8]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f022 0201 	bic.w	r2, r2, #1
 800c9fe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	689a      	ldr	r2, [r3, #8]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca0e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2220      	movs	r2, #32
 800ca14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f022 0210 	bic.w	r2, r2, #16
 800ca2c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7f5 fc88 	bl	8002348 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	1ad3      	subs	r3, r2, r3
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 f8d3 	bl	800cbf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca52:	e0b5      	b.n	800cbc0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 80a8 	beq.w	800cbc4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800ca74:	897b      	ldrh	r3, [r7, #10]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 80a4 	beq.w	800cbc4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca8a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6899      	ldr	r1, [r3, #8]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	4b3a      	ldr	r3, [pc, #232]	; (800cb80 <HAL_UART_IRQHandler+0x524>)
 800ca98:	400b      	ands	r3, r1
 800ca9a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2220      	movs	r2, #32
 800caa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f022 0210 	bic.w	r2, r2, #16
 800cabe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cac0:	897b      	ldrh	r3, [r7, #10]
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f897 	bl	800cbf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800caca:	e07b      	b.n	800cbc4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00d      	beq.n	800caf2 <HAL_UART_IRQHandler+0x496>
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d008      	beq.n	800caf2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 ffc0 	bl	800da70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800caf0:	e06b      	b.n	800cbca <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d012      	beq.n	800cb22 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d104      	bne.n	800cb10 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d008      	beq.n	800cb22 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d057      	beq.n	800cbc8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	4798      	blx	r3
    }
    return;
 800cb20:	e052      	b.n	800cbc8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d02b      	beq.n	800cb84 <HAL_UART_IRQHandler+0x528>
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d026      	beq.n	800cb84 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 ff80 	bl	800da3c <UART_EndTransmit_IT>
    return;
 800cb3c:	e045      	b.n	800cbca <HAL_UART_IRQHandler+0x56e>
 800cb3e:	bf00      	nop
 800cb40:	40020010 	.word	0x40020010
 800cb44:	40020028 	.word	0x40020028
 800cb48:	40020040 	.word	0x40020040
 800cb4c:	40020058 	.word	0x40020058
 800cb50:	40020070 	.word	0x40020070
 800cb54:	40020088 	.word	0x40020088
 800cb58:	400200a0 	.word	0x400200a0
 800cb5c:	400200b8 	.word	0x400200b8
 800cb60:	40020410 	.word	0x40020410
 800cb64:	40020428 	.word	0x40020428
 800cb68:	40020440 	.word	0x40020440
 800cb6c:	40020458 	.word	0x40020458
 800cb70:	40020470 	.word	0x40020470
 800cb74:	40020488 	.word	0x40020488
 800cb78:	400204a0 	.word	0x400204a0
 800cb7c:	400204b8 	.word	0x400204b8
 800cb80:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d008      	beq.n	800cba0 <HAL_UART_IRQHandler+0x544>
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d003      	beq.n	800cba0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 ff7d 	bl	800da98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb9e:	e014      	b.n	800cbca <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00f      	beq.n	800cbca <HAL_UART_IRQHandler+0x56e>
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	da0c      	bge.n	800cbca <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 ff67 	bl	800da84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbb6:	e008      	b.n	800cbca <HAL_UART_IRQHandler+0x56e>
      return;
 800cbb8:	bf00      	nop
 800cbba:	e006      	b.n	800cbca <HAL_UART_IRQHandler+0x56e>
    return;
 800cbbc:	bf00      	nop
 800cbbe:	e004      	b.n	800cbca <HAL_UART_IRQHandler+0x56e>
      return;
 800cbc0:	bf00      	nop
 800cbc2:	e002      	b.n	800cbca <HAL_UART_IRQHandler+0x56e>
      return;
 800cbc4:	bf00      	nop
 800cbc6:	e000      	b.n	800cbca <HAL_UART_IRQHandler+0x56e>
    return;
 800cbc8:	bf00      	nop
  }
}
 800cbca:	3720      	adds	r7, #32
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	460b      	mov	r3, r1
 800cc02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc04:	bf00      	nop
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc10:	b5b0      	push	{r4, r5, r7, lr}
 800cc12:	b08e      	sub	sp, #56	; 0x38
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	689a      	ldr	r2, [r3, #8]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	431a      	orrs	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	431a      	orrs	r2, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	4bbf      	ldr	r3, [pc, #764]	; (800cf3c <UART_SetConfig+0x32c>)
 800cc3e:	4013      	ands	r3, r2
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	6812      	ldr	r2, [r2, #0]
 800cc44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc46:	430b      	orrs	r3, r1
 800cc48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	68da      	ldr	r2, [r3, #12]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	430a      	orrs	r2, r1
 800cc5e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4ab5      	ldr	r2, [pc, #724]	; (800cf40 <UART_SetConfig+0x330>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d004      	beq.n	800cc7a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc76:	4313      	orrs	r3, r2
 800cc78:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	4bb0      	ldr	r3, [pc, #704]	; (800cf44 <UART_SetConfig+0x334>)
 800cc82:	4013      	ands	r3, r2
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	6812      	ldr	r2, [r2, #0]
 800cc88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc8a:	430b      	orrs	r3, r1
 800cc8c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc94:	f023 010f 	bic.w	r1, r3, #15
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	430a      	orrs	r2, r1
 800cca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4aa7      	ldr	r2, [pc, #668]	; (800cf48 <UART_SetConfig+0x338>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d176      	bne.n	800cd9c <UART_SetConfig+0x18c>
 800ccae:	4ba7      	ldr	r3, [pc, #668]	; (800cf4c <UART_SetConfig+0x33c>)
 800ccb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ccb6:	2b28      	cmp	r3, #40	; 0x28
 800ccb8:	d86c      	bhi.n	800cd94 <UART_SetConfig+0x184>
 800ccba:	a201      	add	r2, pc, #4	; (adr r2, 800ccc0 <UART_SetConfig+0xb0>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800cd65 	.word	0x0800cd65
 800ccc4:	0800cd95 	.word	0x0800cd95
 800ccc8:	0800cd95 	.word	0x0800cd95
 800cccc:	0800cd95 	.word	0x0800cd95
 800ccd0:	0800cd95 	.word	0x0800cd95
 800ccd4:	0800cd95 	.word	0x0800cd95
 800ccd8:	0800cd95 	.word	0x0800cd95
 800ccdc:	0800cd95 	.word	0x0800cd95
 800cce0:	0800cd6d 	.word	0x0800cd6d
 800cce4:	0800cd95 	.word	0x0800cd95
 800cce8:	0800cd95 	.word	0x0800cd95
 800ccec:	0800cd95 	.word	0x0800cd95
 800ccf0:	0800cd95 	.word	0x0800cd95
 800ccf4:	0800cd95 	.word	0x0800cd95
 800ccf8:	0800cd95 	.word	0x0800cd95
 800ccfc:	0800cd95 	.word	0x0800cd95
 800cd00:	0800cd75 	.word	0x0800cd75
 800cd04:	0800cd95 	.word	0x0800cd95
 800cd08:	0800cd95 	.word	0x0800cd95
 800cd0c:	0800cd95 	.word	0x0800cd95
 800cd10:	0800cd95 	.word	0x0800cd95
 800cd14:	0800cd95 	.word	0x0800cd95
 800cd18:	0800cd95 	.word	0x0800cd95
 800cd1c:	0800cd95 	.word	0x0800cd95
 800cd20:	0800cd7d 	.word	0x0800cd7d
 800cd24:	0800cd95 	.word	0x0800cd95
 800cd28:	0800cd95 	.word	0x0800cd95
 800cd2c:	0800cd95 	.word	0x0800cd95
 800cd30:	0800cd95 	.word	0x0800cd95
 800cd34:	0800cd95 	.word	0x0800cd95
 800cd38:	0800cd95 	.word	0x0800cd95
 800cd3c:	0800cd95 	.word	0x0800cd95
 800cd40:	0800cd85 	.word	0x0800cd85
 800cd44:	0800cd95 	.word	0x0800cd95
 800cd48:	0800cd95 	.word	0x0800cd95
 800cd4c:	0800cd95 	.word	0x0800cd95
 800cd50:	0800cd95 	.word	0x0800cd95
 800cd54:	0800cd95 	.word	0x0800cd95
 800cd58:	0800cd95 	.word	0x0800cd95
 800cd5c:	0800cd95 	.word	0x0800cd95
 800cd60:	0800cd8d 	.word	0x0800cd8d
 800cd64:	2301      	movs	r3, #1
 800cd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6a:	e222      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cd6c:	2304      	movs	r3, #4
 800cd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd72:	e21e      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cd74:	2308      	movs	r3, #8
 800cd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7a:	e21a      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cd7c:	2310      	movs	r3, #16
 800cd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd82:	e216      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cd84:	2320      	movs	r3, #32
 800cd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd8a:	e212      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cd8c:	2340      	movs	r3, #64	; 0x40
 800cd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd92:	e20e      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cd94:	2380      	movs	r3, #128	; 0x80
 800cd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd9a:	e20a      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a6b      	ldr	r2, [pc, #428]	; (800cf50 <UART_SetConfig+0x340>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d130      	bne.n	800ce08 <UART_SetConfig+0x1f8>
 800cda6:	4b69      	ldr	r3, [pc, #420]	; (800cf4c <UART_SetConfig+0x33c>)
 800cda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdaa:	f003 0307 	and.w	r3, r3, #7
 800cdae:	2b05      	cmp	r3, #5
 800cdb0:	d826      	bhi.n	800ce00 <UART_SetConfig+0x1f0>
 800cdb2:	a201      	add	r2, pc, #4	; (adr r2, 800cdb8 <UART_SetConfig+0x1a8>)
 800cdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb8:	0800cdd1 	.word	0x0800cdd1
 800cdbc:	0800cdd9 	.word	0x0800cdd9
 800cdc0:	0800cde1 	.word	0x0800cde1
 800cdc4:	0800cde9 	.word	0x0800cde9
 800cdc8:	0800cdf1 	.word	0x0800cdf1
 800cdcc:	0800cdf9 	.word	0x0800cdf9
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdd6:	e1ec      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cdd8:	2304      	movs	r3, #4
 800cdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdde:	e1e8      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cde0:	2308      	movs	r3, #8
 800cde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cde6:	e1e4      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cde8:	2310      	movs	r3, #16
 800cdea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdee:	e1e0      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cdf0:	2320      	movs	r3, #32
 800cdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdf6:	e1dc      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cdf8:	2340      	movs	r3, #64	; 0x40
 800cdfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdfe:	e1d8      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ce00:	2380      	movs	r3, #128	; 0x80
 800ce02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce06:	e1d4      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a51      	ldr	r2, [pc, #324]	; (800cf54 <UART_SetConfig+0x344>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d130      	bne.n	800ce74 <UART_SetConfig+0x264>
 800ce12:	4b4e      	ldr	r3, [pc, #312]	; (800cf4c <UART_SetConfig+0x33c>)
 800ce14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce16:	f003 0307 	and.w	r3, r3, #7
 800ce1a:	2b05      	cmp	r3, #5
 800ce1c:	d826      	bhi.n	800ce6c <UART_SetConfig+0x25c>
 800ce1e:	a201      	add	r2, pc, #4	; (adr r2, 800ce24 <UART_SetConfig+0x214>)
 800ce20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce24:	0800ce3d 	.word	0x0800ce3d
 800ce28:	0800ce45 	.word	0x0800ce45
 800ce2c:	0800ce4d 	.word	0x0800ce4d
 800ce30:	0800ce55 	.word	0x0800ce55
 800ce34:	0800ce5d 	.word	0x0800ce5d
 800ce38:	0800ce65 	.word	0x0800ce65
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce42:	e1b6      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ce44:	2304      	movs	r3, #4
 800ce46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce4a:	e1b2      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ce4c:	2308      	movs	r3, #8
 800ce4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce52:	e1ae      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ce54:	2310      	movs	r3, #16
 800ce56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce5a:	e1aa      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ce5c:	2320      	movs	r3, #32
 800ce5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce62:	e1a6      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ce64:	2340      	movs	r3, #64	; 0x40
 800ce66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce6a:	e1a2      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ce6c:	2380      	movs	r3, #128	; 0x80
 800ce6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce72:	e19e      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a37      	ldr	r2, [pc, #220]	; (800cf58 <UART_SetConfig+0x348>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d130      	bne.n	800cee0 <UART_SetConfig+0x2d0>
 800ce7e:	4b33      	ldr	r3, [pc, #204]	; (800cf4c <UART_SetConfig+0x33c>)
 800ce80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce82:	f003 0307 	and.w	r3, r3, #7
 800ce86:	2b05      	cmp	r3, #5
 800ce88:	d826      	bhi.n	800ced8 <UART_SetConfig+0x2c8>
 800ce8a:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <UART_SetConfig+0x280>)
 800ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce90:	0800cea9 	.word	0x0800cea9
 800ce94:	0800ceb1 	.word	0x0800ceb1
 800ce98:	0800ceb9 	.word	0x0800ceb9
 800ce9c:	0800cec1 	.word	0x0800cec1
 800cea0:	0800cec9 	.word	0x0800cec9
 800cea4:	0800ced1 	.word	0x0800ced1
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceae:	e180      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ceb0:	2304      	movs	r3, #4
 800ceb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceb6:	e17c      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ceb8:	2308      	movs	r3, #8
 800ceba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cebe:	e178      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cec0:	2310      	movs	r3, #16
 800cec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cec6:	e174      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cec8:	2320      	movs	r3, #32
 800ceca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cece:	e170      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ced0:	2340      	movs	r3, #64	; 0x40
 800ced2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ced6:	e16c      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800ced8:	2380      	movs	r3, #128	; 0x80
 800ceda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cede:	e168      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a1d      	ldr	r2, [pc, #116]	; (800cf5c <UART_SetConfig+0x34c>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d142      	bne.n	800cf70 <UART_SetConfig+0x360>
 800ceea:	4b18      	ldr	r3, [pc, #96]	; (800cf4c <UART_SetConfig+0x33c>)
 800ceec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceee:	f003 0307 	and.w	r3, r3, #7
 800cef2:	2b05      	cmp	r3, #5
 800cef4:	d838      	bhi.n	800cf68 <UART_SetConfig+0x358>
 800cef6:	a201      	add	r2, pc, #4	; (adr r2, 800cefc <UART_SetConfig+0x2ec>)
 800cef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cefc:	0800cf15 	.word	0x0800cf15
 800cf00:	0800cf1d 	.word	0x0800cf1d
 800cf04:	0800cf25 	.word	0x0800cf25
 800cf08:	0800cf2d 	.word	0x0800cf2d
 800cf0c:	0800cf35 	.word	0x0800cf35
 800cf10:	0800cf61 	.word	0x0800cf61
 800cf14:	2300      	movs	r3, #0
 800cf16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf1a:	e14a      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cf1c:	2304      	movs	r3, #4
 800cf1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf22:	e146      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cf24:	2308      	movs	r3, #8
 800cf26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf2a:	e142      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cf2c:	2310      	movs	r3, #16
 800cf2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf32:	e13e      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cf34:	2320      	movs	r3, #32
 800cf36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf3a:	e13a      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cf3c:	cfff69f3 	.word	0xcfff69f3
 800cf40:	58000c00 	.word	0x58000c00
 800cf44:	11fff4ff 	.word	0x11fff4ff
 800cf48:	40011000 	.word	0x40011000
 800cf4c:	58024400 	.word	0x58024400
 800cf50:	40004400 	.word	0x40004400
 800cf54:	40004800 	.word	0x40004800
 800cf58:	40004c00 	.word	0x40004c00
 800cf5c:	40005000 	.word	0x40005000
 800cf60:	2340      	movs	r3, #64	; 0x40
 800cf62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf66:	e124      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cf68:	2380      	movs	r3, #128	; 0x80
 800cf6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf6e:	e120      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4acc      	ldr	r2, [pc, #816]	; (800d2a8 <UART_SetConfig+0x698>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d176      	bne.n	800d068 <UART_SetConfig+0x458>
 800cf7a:	4bcc      	ldr	r3, [pc, #816]	; (800d2ac <UART_SetConfig+0x69c>)
 800cf7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf82:	2b28      	cmp	r3, #40	; 0x28
 800cf84:	d86c      	bhi.n	800d060 <UART_SetConfig+0x450>
 800cf86:	a201      	add	r2, pc, #4	; (adr r2, 800cf8c <UART_SetConfig+0x37c>)
 800cf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8c:	0800d031 	.word	0x0800d031
 800cf90:	0800d061 	.word	0x0800d061
 800cf94:	0800d061 	.word	0x0800d061
 800cf98:	0800d061 	.word	0x0800d061
 800cf9c:	0800d061 	.word	0x0800d061
 800cfa0:	0800d061 	.word	0x0800d061
 800cfa4:	0800d061 	.word	0x0800d061
 800cfa8:	0800d061 	.word	0x0800d061
 800cfac:	0800d039 	.word	0x0800d039
 800cfb0:	0800d061 	.word	0x0800d061
 800cfb4:	0800d061 	.word	0x0800d061
 800cfb8:	0800d061 	.word	0x0800d061
 800cfbc:	0800d061 	.word	0x0800d061
 800cfc0:	0800d061 	.word	0x0800d061
 800cfc4:	0800d061 	.word	0x0800d061
 800cfc8:	0800d061 	.word	0x0800d061
 800cfcc:	0800d041 	.word	0x0800d041
 800cfd0:	0800d061 	.word	0x0800d061
 800cfd4:	0800d061 	.word	0x0800d061
 800cfd8:	0800d061 	.word	0x0800d061
 800cfdc:	0800d061 	.word	0x0800d061
 800cfe0:	0800d061 	.word	0x0800d061
 800cfe4:	0800d061 	.word	0x0800d061
 800cfe8:	0800d061 	.word	0x0800d061
 800cfec:	0800d049 	.word	0x0800d049
 800cff0:	0800d061 	.word	0x0800d061
 800cff4:	0800d061 	.word	0x0800d061
 800cff8:	0800d061 	.word	0x0800d061
 800cffc:	0800d061 	.word	0x0800d061
 800d000:	0800d061 	.word	0x0800d061
 800d004:	0800d061 	.word	0x0800d061
 800d008:	0800d061 	.word	0x0800d061
 800d00c:	0800d051 	.word	0x0800d051
 800d010:	0800d061 	.word	0x0800d061
 800d014:	0800d061 	.word	0x0800d061
 800d018:	0800d061 	.word	0x0800d061
 800d01c:	0800d061 	.word	0x0800d061
 800d020:	0800d061 	.word	0x0800d061
 800d024:	0800d061 	.word	0x0800d061
 800d028:	0800d061 	.word	0x0800d061
 800d02c:	0800d059 	.word	0x0800d059
 800d030:	2301      	movs	r3, #1
 800d032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d036:	e0bc      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d038:	2304      	movs	r3, #4
 800d03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d03e:	e0b8      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d040:	2308      	movs	r3, #8
 800d042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d046:	e0b4      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d048:	2310      	movs	r3, #16
 800d04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d04e:	e0b0      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d050:	2320      	movs	r3, #32
 800d052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d056:	e0ac      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d058:	2340      	movs	r3, #64	; 0x40
 800d05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d05e:	e0a8      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d060:	2380      	movs	r3, #128	; 0x80
 800d062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d066:	e0a4      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a90      	ldr	r2, [pc, #576]	; (800d2b0 <UART_SetConfig+0x6a0>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d130      	bne.n	800d0d4 <UART_SetConfig+0x4c4>
 800d072:	4b8e      	ldr	r3, [pc, #568]	; (800d2ac <UART_SetConfig+0x69c>)
 800d074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d076:	f003 0307 	and.w	r3, r3, #7
 800d07a:	2b05      	cmp	r3, #5
 800d07c:	d826      	bhi.n	800d0cc <UART_SetConfig+0x4bc>
 800d07e:	a201      	add	r2, pc, #4	; (adr r2, 800d084 <UART_SetConfig+0x474>)
 800d080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d084:	0800d09d 	.word	0x0800d09d
 800d088:	0800d0a5 	.word	0x0800d0a5
 800d08c:	0800d0ad 	.word	0x0800d0ad
 800d090:	0800d0b5 	.word	0x0800d0b5
 800d094:	0800d0bd 	.word	0x0800d0bd
 800d098:	0800d0c5 	.word	0x0800d0c5
 800d09c:	2300      	movs	r3, #0
 800d09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0a2:	e086      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d0a4:	2304      	movs	r3, #4
 800d0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0aa:	e082      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d0ac:	2308      	movs	r3, #8
 800d0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0b2:	e07e      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d0b4:	2310      	movs	r3, #16
 800d0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ba:	e07a      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d0bc:	2320      	movs	r3, #32
 800d0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0c2:	e076      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d0c4:	2340      	movs	r3, #64	; 0x40
 800d0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ca:	e072      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d0cc:	2380      	movs	r3, #128	; 0x80
 800d0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0d2:	e06e      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a76      	ldr	r2, [pc, #472]	; (800d2b4 <UART_SetConfig+0x6a4>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d130      	bne.n	800d140 <UART_SetConfig+0x530>
 800d0de:	4b73      	ldr	r3, [pc, #460]	; (800d2ac <UART_SetConfig+0x69c>)
 800d0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0e2:	f003 0307 	and.w	r3, r3, #7
 800d0e6:	2b05      	cmp	r3, #5
 800d0e8:	d826      	bhi.n	800d138 <UART_SetConfig+0x528>
 800d0ea:	a201      	add	r2, pc, #4	; (adr r2, 800d0f0 <UART_SetConfig+0x4e0>)
 800d0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f0:	0800d109 	.word	0x0800d109
 800d0f4:	0800d111 	.word	0x0800d111
 800d0f8:	0800d119 	.word	0x0800d119
 800d0fc:	0800d121 	.word	0x0800d121
 800d100:	0800d129 	.word	0x0800d129
 800d104:	0800d131 	.word	0x0800d131
 800d108:	2300      	movs	r3, #0
 800d10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d10e:	e050      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d110:	2304      	movs	r3, #4
 800d112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d116:	e04c      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d118:	2308      	movs	r3, #8
 800d11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d11e:	e048      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d120:	2310      	movs	r3, #16
 800d122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d126:	e044      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d128:	2320      	movs	r3, #32
 800d12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d12e:	e040      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d130:	2340      	movs	r3, #64	; 0x40
 800d132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d136:	e03c      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d138:	2380      	movs	r3, #128	; 0x80
 800d13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d13e:	e038      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a5c      	ldr	r2, [pc, #368]	; (800d2b8 <UART_SetConfig+0x6a8>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d130      	bne.n	800d1ac <UART_SetConfig+0x59c>
 800d14a:	4b58      	ldr	r3, [pc, #352]	; (800d2ac <UART_SetConfig+0x69c>)
 800d14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d14e:	f003 0307 	and.w	r3, r3, #7
 800d152:	2b05      	cmp	r3, #5
 800d154:	d826      	bhi.n	800d1a4 <UART_SetConfig+0x594>
 800d156:	a201      	add	r2, pc, #4	; (adr r2, 800d15c <UART_SetConfig+0x54c>)
 800d158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15c:	0800d175 	.word	0x0800d175
 800d160:	0800d17d 	.word	0x0800d17d
 800d164:	0800d185 	.word	0x0800d185
 800d168:	0800d18d 	.word	0x0800d18d
 800d16c:	0800d195 	.word	0x0800d195
 800d170:	0800d19d 	.word	0x0800d19d
 800d174:	2302      	movs	r3, #2
 800d176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d17a:	e01a      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d17c:	2304      	movs	r3, #4
 800d17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d182:	e016      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d184:	2308      	movs	r3, #8
 800d186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d18a:	e012      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d18c:	2310      	movs	r3, #16
 800d18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d192:	e00e      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d194:	2320      	movs	r3, #32
 800d196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d19a:	e00a      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d19c:	2340      	movs	r3, #64	; 0x40
 800d19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1a2:	e006      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d1a4:	2380      	movs	r3, #128	; 0x80
 800d1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1aa:	e002      	b.n	800d1b2 <UART_SetConfig+0x5a2>
 800d1ac:	2380      	movs	r3, #128	; 0x80
 800d1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a40      	ldr	r2, [pc, #256]	; (800d2b8 <UART_SetConfig+0x6a8>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	f040 80ef 	bne.w	800d39c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d1be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	dc46      	bgt.n	800d254 <UART_SetConfig+0x644>
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	f2c0 8081 	blt.w	800d2ce <UART_SetConfig+0x6be>
 800d1cc:	3b02      	subs	r3, #2
 800d1ce:	2b1e      	cmp	r3, #30
 800d1d0:	d87d      	bhi.n	800d2ce <UART_SetConfig+0x6be>
 800d1d2:	a201      	add	r2, pc, #4	; (adr r2, 800d1d8 <UART_SetConfig+0x5c8>)
 800d1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d8:	0800d25b 	.word	0x0800d25b
 800d1dc:	0800d2cf 	.word	0x0800d2cf
 800d1e0:	0800d263 	.word	0x0800d263
 800d1e4:	0800d2cf 	.word	0x0800d2cf
 800d1e8:	0800d2cf 	.word	0x0800d2cf
 800d1ec:	0800d2cf 	.word	0x0800d2cf
 800d1f0:	0800d273 	.word	0x0800d273
 800d1f4:	0800d2cf 	.word	0x0800d2cf
 800d1f8:	0800d2cf 	.word	0x0800d2cf
 800d1fc:	0800d2cf 	.word	0x0800d2cf
 800d200:	0800d2cf 	.word	0x0800d2cf
 800d204:	0800d2cf 	.word	0x0800d2cf
 800d208:	0800d2cf 	.word	0x0800d2cf
 800d20c:	0800d2cf 	.word	0x0800d2cf
 800d210:	0800d283 	.word	0x0800d283
 800d214:	0800d2cf 	.word	0x0800d2cf
 800d218:	0800d2cf 	.word	0x0800d2cf
 800d21c:	0800d2cf 	.word	0x0800d2cf
 800d220:	0800d2cf 	.word	0x0800d2cf
 800d224:	0800d2cf 	.word	0x0800d2cf
 800d228:	0800d2cf 	.word	0x0800d2cf
 800d22c:	0800d2cf 	.word	0x0800d2cf
 800d230:	0800d2cf 	.word	0x0800d2cf
 800d234:	0800d2cf 	.word	0x0800d2cf
 800d238:	0800d2cf 	.word	0x0800d2cf
 800d23c:	0800d2cf 	.word	0x0800d2cf
 800d240:	0800d2cf 	.word	0x0800d2cf
 800d244:	0800d2cf 	.word	0x0800d2cf
 800d248:	0800d2cf 	.word	0x0800d2cf
 800d24c:	0800d2cf 	.word	0x0800d2cf
 800d250:	0800d2c1 	.word	0x0800d2c1
 800d254:	2b40      	cmp	r3, #64	; 0x40
 800d256:	d036      	beq.n	800d2c6 <UART_SetConfig+0x6b6>
 800d258:	e039      	b.n	800d2ce <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d25a:	f7fb fec9 	bl	8008ff0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d25e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d260:	e03b      	b.n	800d2da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d262:	f107 0314 	add.w	r3, r7, #20
 800d266:	4618      	mov	r0, r3
 800d268:	f7fb fed8 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d270:	e033      	b.n	800d2da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d272:	f107 0308 	add.w	r3, r7, #8
 800d276:	4618      	mov	r0, r3
 800d278:	f7fc f824 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d280:	e02b      	b.n	800d2da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d282:	4b0a      	ldr	r3, [pc, #40]	; (800d2ac <UART_SetConfig+0x69c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0320 	and.w	r3, r3, #32
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d009      	beq.n	800d2a2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d28e:	4b07      	ldr	r3, [pc, #28]	; (800d2ac <UART_SetConfig+0x69c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	08db      	lsrs	r3, r3, #3
 800d294:	f003 0303 	and.w	r3, r3, #3
 800d298:	4a08      	ldr	r2, [pc, #32]	; (800d2bc <UART_SetConfig+0x6ac>)
 800d29a:	fa22 f303 	lsr.w	r3, r2, r3
 800d29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2a0:	e01b      	b.n	800d2da <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d2a2:	4b06      	ldr	r3, [pc, #24]	; (800d2bc <UART_SetConfig+0x6ac>)
 800d2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2a6:	e018      	b.n	800d2da <UART_SetConfig+0x6ca>
 800d2a8:	40011400 	.word	0x40011400
 800d2ac:	58024400 	.word	0x58024400
 800d2b0:	40007800 	.word	0x40007800
 800d2b4:	40007c00 	.word	0x40007c00
 800d2b8:	58000c00 	.word	0x58000c00
 800d2bc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2c0:	4bc4      	ldr	r3, [pc, #784]	; (800d5d4 <UART_SetConfig+0x9c4>)
 800d2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2c4:	e009      	b.n	800d2da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2cc:	e005      	b.n	800d2da <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d2d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 81da 	beq.w	800d696 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e6:	4abc      	ldr	r2, [pc, #752]	; (800d5d8 <UART_SetConfig+0x9c8>)
 800d2e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2f4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	685a      	ldr	r2, [r3, #4]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	005b      	lsls	r3, r3, #1
 800d2fe:	4413      	add	r3, r2
 800d300:	6a3a      	ldr	r2, [r7, #32]
 800d302:	429a      	cmp	r2, r3
 800d304:	d305      	bcc.n	800d312 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d30c:	6a3a      	ldr	r2, [r7, #32]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d903      	bls.n	800d31a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d318:	e1bd      	b.n	800d696 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	4618      	mov	r0, r3
 800d31e:	f04f 0100 	mov.w	r1, #0
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d326:	4aac      	ldr	r2, [pc, #688]	; (800d5d8 <UART_SetConfig+0x9c8>)
 800d328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	f04f 0300 	mov.w	r3, #0
 800d332:	f7f2 ffd1 	bl	80002d8 <__aeabi_uldivmod>
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	4610      	mov	r0, r2
 800d33c:	4619      	mov	r1, r3
 800d33e:	f04f 0200 	mov.w	r2, #0
 800d342:	f04f 0300 	mov.w	r3, #0
 800d346:	020b      	lsls	r3, r1, #8
 800d348:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d34c:	0202      	lsls	r2, r0, #8
 800d34e:	6879      	ldr	r1, [r7, #4]
 800d350:	6849      	ldr	r1, [r1, #4]
 800d352:	0849      	lsrs	r1, r1, #1
 800d354:	4608      	mov	r0, r1
 800d356:	f04f 0100 	mov.w	r1, #0
 800d35a:	1814      	adds	r4, r2, r0
 800d35c:	eb43 0501 	adc.w	r5, r3, r1
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	461a      	mov	r2, r3
 800d366:	f04f 0300 	mov.w	r3, #0
 800d36a:	4620      	mov	r0, r4
 800d36c:	4629      	mov	r1, r5
 800d36e:	f7f2 ffb3 	bl	80002d8 <__aeabi_uldivmod>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	4613      	mov	r3, r2
 800d378:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d380:	d308      	bcc.n	800d394 <UART_SetConfig+0x784>
 800d382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d388:	d204      	bcs.n	800d394 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d390:	60da      	str	r2, [r3, #12]
 800d392:	e180      	b.n	800d696 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d39a:	e17c      	b.n	800d696 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	69db      	ldr	r3, [r3, #28]
 800d3a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3a4:	f040 80bf 	bne.w	800d526 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d3a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3ac:	2b20      	cmp	r3, #32
 800d3ae:	dc49      	bgt.n	800d444 <UART_SetConfig+0x834>
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	db7c      	blt.n	800d4ae <UART_SetConfig+0x89e>
 800d3b4:	2b20      	cmp	r3, #32
 800d3b6:	d87a      	bhi.n	800d4ae <UART_SetConfig+0x89e>
 800d3b8:	a201      	add	r2, pc, #4	; (adr r2, 800d3c0 <UART_SetConfig+0x7b0>)
 800d3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3be:	bf00      	nop
 800d3c0:	0800d44b 	.word	0x0800d44b
 800d3c4:	0800d453 	.word	0x0800d453
 800d3c8:	0800d4af 	.word	0x0800d4af
 800d3cc:	0800d4af 	.word	0x0800d4af
 800d3d0:	0800d45b 	.word	0x0800d45b
 800d3d4:	0800d4af 	.word	0x0800d4af
 800d3d8:	0800d4af 	.word	0x0800d4af
 800d3dc:	0800d4af 	.word	0x0800d4af
 800d3e0:	0800d46b 	.word	0x0800d46b
 800d3e4:	0800d4af 	.word	0x0800d4af
 800d3e8:	0800d4af 	.word	0x0800d4af
 800d3ec:	0800d4af 	.word	0x0800d4af
 800d3f0:	0800d4af 	.word	0x0800d4af
 800d3f4:	0800d4af 	.word	0x0800d4af
 800d3f8:	0800d4af 	.word	0x0800d4af
 800d3fc:	0800d4af 	.word	0x0800d4af
 800d400:	0800d47b 	.word	0x0800d47b
 800d404:	0800d4af 	.word	0x0800d4af
 800d408:	0800d4af 	.word	0x0800d4af
 800d40c:	0800d4af 	.word	0x0800d4af
 800d410:	0800d4af 	.word	0x0800d4af
 800d414:	0800d4af 	.word	0x0800d4af
 800d418:	0800d4af 	.word	0x0800d4af
 800d41c:	0800d4af 	.word	0x0800d4af
 800d420:	0800d4af 	.word	0x0800d4af
 800d424:	0800d4af 	.word	0x0800d4af
 800d428:	0800d4af 	.word	0x0800d4af
 800d42c:	0800d4af 	.word	0x0800d4af
 800d430:	0800d4af 	.word	0x0800d4af
 800d434:	0800d4af 	.word	0x0800d4af
 800d438:	0800d4af 	.word	0x0800d4af
 800d43c:	0800d4af 	.word	0x0800d4af
 800d440:	0800d4a1 	.word	0x0800d4a1
 800d444:	2b40      	cmp	r3, #64	; 0x40
 800d446:	d02e      	beq.n	800d4a6 <UART_SetConfig+0x896>
 800d448:	e031      	b.n	800d4ae <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d44a:	f7fa f993 	bl	8007774 <HAL_RCC_GetPCLK1Freq>
 800d44e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d450:	e033      	b.n	800d4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d452:	f7fa f9a5 	bl	80077a0 <HAL_RCC_GetPCLK2Freq>
 800d456:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d458:	e02f      	b.n	800d4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d45a:	f107 0314 	add.w	r3, r7, #20
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fb fddc 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d468:	e027      	b.n	800d4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d46a:	f107 0308 	add.w	r3, r7, #8
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fb ff28 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d478:	e01f      	b.n	800d4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d47a:	4b58      	ldr	r3, [pc, #352]	; (800d5dc <UART_SetConfig+0x9cc>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f003 0320 	and.w	r3, r3, #32
 800d482:	2b00      	cmp	r3, #0
 800d484:	d009      	beq.n	800d49a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d486:	4b55      	ldr	r3, [pc, #340]	; (800d5dc <UART_SetConfig+0x9cc>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	08db      	lsrs	r3, r3, #3
 800d48c:	f003 0303 	and.w	r3, r3, #3
 800d490:	4a53      	ldr	r2, [pc, #332]	; (800d5e0 <UART_SetConfig+0x9d0>)
 800d492:	fa22 f303 	lsr.w	r3, r2, r3
 800d496:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d498:	e00f      	b.n	800d4ba <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d49a:	4b51      	ldr	r3, [pc, #324]	; (800d5e0 <UART_SetConfig+0x9d0>)
 800d49c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d49e:	e00c      	b.n	800d4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d4a0:	4b4c      	ldr	r3, [pc, #304]	; (800d5d4 <UART_SetConfig+0x9c4>)
 800d4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4a4:	e009      	b.n	800d4ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4ac:	e005      	b.n	800d4ba <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d4b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f000 80ea 	beq.w	800d696 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c6:	4a44      	ldr	r2, [pc, #272]	; (800d5d8 <UART_SetConfig+0x9c8>)
 800d4c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4d4:	005a      	lsls	r2, r3, #1
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	085b      	lsrs	r3, r3, #1
 800d4dc:	441a      	add	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ec:	2b0f      	cmp	r3, #15
 800d4ee:	d916      	bls.n	800d51e <UART_SetConfig+0x90e>
 800d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4f6:	d212      	bcs.n	800d51e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	f023 030f 	bic.w	r3, r3, #15
 800d500:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d504:	085b      	lsrs	r3, r3, #1
 800d506:	b29b      	uxth	r3, r3
 800d508:	f003 0307 	and.w	r3, r3, #7
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d510:	4313      	orrs	r3, r2
 800d512:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d51a:	60da      	str	r2, [r3, #12]
 800d51c:	e0bb      	b.n	800d696 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d51e:	2301      	movs	r3, #1
 800d520:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d524:	e0b7      	b.n	800d696 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d526:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d52a:	2b20      	cmp	r3, #32
 800d52c:	dc4a      	bgt.n	800d5c4 <UART_SetConfig+0x9b4>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f2c0 8086 	blt.w	800d640 <UART_SetConfig+0xa30>
 800d534:	2b20      	cmp	r3, #32
 800d536:	f200 8083 	bhi.w	800d640 <UART_SetConfig+0xa30>
 800d53a:	a201      	add	r2, pc, #4	; (adr r2, 800d540 <UART_SetConfig+0x930>)
 800d53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d540:	0800d5cb 	.word	0x0800d5cb
 800d544:	0800d5e5 	.word	0x0800d5e5
 800d548:	0800d641 	.word	0x0800d641
 800d54c:	0800d641 	.word	0x0800d641
 800d550:	0800d5ed 	.word	0x0800d5ed
 800d554:	0800d641 	.word	0x0800d641
 800d558:	0800d641 	.word	0x0800d641
 800d55c:	0800d641 	.word	0x0800d641
 800d560:	0800d5fd 	.word	0x0800d5fd
 800d564:	0800d641 	.word	0x0800d641
 800d568:	0800d641 	.word	0x0800d641
 800d56c:	0800d641 	.word	0x0800d641
 800d570:	0800d641 	.word	0x0800d641
 800d574:	0800d641 	.word	0x0800d641
 800d578:	0800d641 	.word	0x0800d641
 800d57c:	0800d641 	.word	0x0800d641
 800d580:	0800d60d 	.word	0x0800d60d
 800d584:	0800d641 	.word	0x0800d641
 800d588:	0800d641 	.word	0x0800d641
 800d58c:	0800d641 	.word	0x0800d641
 800d590:	0800d641 	.word	0x0800d641
 800d594:	0800d641 	.word	0x0800d641
 800d598:	0800d641 	.word	0x0800d641
 800d59c:	0800d641 	.word	0x0800d641
 800d5a0:	0800d641 	.word	0x0800d641
 800d5a4:	0800d641 	.word	0x0800d641
 800d5a8:	0800d641 	.word	0x0800d641
 800d5ac:	0800d641 	.word	0x0800d641
 800d5b0:	0800d641 	.word	0x0800d641
 800d5b4:	0800d641 	.word	0x0800d641
 800d5b8:	0800d641 	.word	0x0800d641
 800d5bc:	0800d641 	.word	0x0800d641
 800d5c0:	0800d633 	.word	0x0800d633
 800d5c4:	2b40      	cmp	r3, #64	; 0x40
 800d5c6:	d037      	beq.n	800d638 <UART_SetConfig+0xa28>
 800d5c8:	e03a      	b.n	800d640 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5ca:	f7fa f8d3 	bl	8007774 <HAL_RCC_GetPCLK1Freq>
 800d5ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d5d0:	e03c      	b.n	800d64c <UART_SetConfig+0xa3c>
 800d5d2:	bf00      	nop
 800d5d4:	003d0900 	.word	0x003d0900
 800d5d8:	080127fc 	.word	0x080127fc
 800d5dc:	58024400 	.word	0x58024400
 800d5e0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5e4:	f7fa f8dc 	bl	80077a0 <HAL_RCC_GetPCLK2Freq>
 800d5e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d5ea:	e02f      	b.n	800d64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5ec:	f107 0314 	add.w	r3, r7, #20
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fb fd13 	bl	800901c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5fa:	e027      	b.n	800d64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5fc:	f107 0308 	add.w	r3, r7, #8
 800d600:	4618      	mov	r0, r3
 800d602:	f7fb fe5f 	bl	80092c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d60a:	e01f      	b.n	800d64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d60c:	4b2c      	ldr	r3, [pc, #176]	; (800d6c0 <UART_SetConfig+0xab0>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f003 0320 	and.w	r3, r3, #32
 800d614:	2b00      	cmp	r3, #0
 800d616:	d009      	beq.n	800d62c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d618:	4b29      	ldr	r3, [pc, #164]	; (800d6c0 <UART_SetConfig+0xab0>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	08db      	lsrs	r3, r3, #3
 800d61e:	f003 0303 	and.w	r3, r3, #3
 800d622:	4a28      	ldr	r2, [pc, #160]	; (800d6c4 <UART_SetConfig+0xab4>)
 800d624:	fa22 f303 	lsr.w	r3, r2, r3
 800d628:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d62a:	e00f      	b.n	800d64c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d62c:	4b25      	ldr	r3, [pc, #148]	; (800d6c4 <UART_SetConfig+0xab4>)
 800d62e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d630:	e00c      	b.n	800d64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d632:	4b25      	ldr	r3, [pc, #148]	; (800d6c8 <UART_SetConfig+0xab8>)
 800d634:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d636:	e009      	b.n	800d64c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d63e:	e005      	b.n	800d64c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d640:	2300      	movs	r3, #0
 800d642:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d644:	2301      	movs	r3, #1
 800d646:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d64a:	bf00      	nop
    }

    if (pclk != 0U)
 800d64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d021      	beq.n	800d696 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d656:	4a1d      	ldr	r2, [pc, #116]	; (800d6cc <UART_SetConfig+0xabc>)
 800d658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d65c:	461a      	mov	r2, r3
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	fbb3 f2f2 	udiv	r2, r3, r2
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	085b      	lsrs	r3, r3, #1
 800d66a:	441a      	add	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	fbb2 f3f3 	udiv	r3, r2, r3
 800d674:	b29b      	uxth	r3, r3
 800d676:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67a:	2b0f      	cmp	r3, #15
 800d67c:	d908      	bls.n	800d690 <UART_SetConfig+0xa80>
 800d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d684:	d204      	bcs.n	800d690 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d68c:	60da      	str	r2, [r3, #12]
 800d68e:	e002      	b.n	800d696 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d690:	2301      	movs	r3, #1
 800d692:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d6b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3738      	adds	r7, #56	; 0x38
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bdb0      	pop	{r4, r5, r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	58024400 	.word	0x58024400
 800d6c4:	03d09000 	.word	0x03d09000
 800d6c8:	003d0900 	.word	0x003d0900
 800d6cc:	080127fc 	.word	0x080127fc

0800d6d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00a      	beq.n	800d6fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	430a      	orrs	r2, r1
 800d6f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6fe:	f003 0302 	and.w	r3, r3, #2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00a      	beq.n	800d71c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	430a      	orrs	r2, r1
 800d71a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d720:	f003 0304 	and.w	r3, r3, #4
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00a      	beq.n	800d73e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	430a      	orrs	r2, r1
 800d73c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d742:	f003 0308 	and.w	r3, r3, #8
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00a      	beq.n	800d760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	430a      	orrs	r2, r1
 800d75e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d764:	f003 0310 	and.w	r3, r3, #16
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00a      	beq.n	800d782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	430a      	orrs	r2, r1
 800d780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d786:	f003 0320 	and.w	r3, r3, #32
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00a      	beq.n	800d7a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	430a      	orrs	r2, r1
 800d7a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d01a      	beq.n	800d7e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	430a      	orrs	r2, r1
 800d7c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7ce:	d10a      	bne.n	800d7e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	430a      	orrs	r2, r1
 800d7e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00a      	beq.n	800d808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	430a      	orrs	r2, r1
 800d806:	605a      	str	r2, [r3, #4]
  }
}
 800d808:	bf00      	nop
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af02      	add	r7, sp, #8
 800d81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d824:	f7f4 f86c 	bl	8001900 <HAL_GetTick>
 800d828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f003 0308 	and.w	r3, r3, #8
 800d834:	2b08      	cmp	r3, #8
 800d836:	d10e      	bne.n	800d856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2200      	movs	r2, #0
 800d842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f82f 	bl	800d8aa <UART_WaitOnFlagUntilTimeout>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d852:	2303      	movs	r3, #3
 800d854:	e025      	b.n	800d8a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b04      	cmp	r3, #4
 800d862:	d10e      	bne.n	800d882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f819 	bl	800d8aa <UART_WaitOnFlagUntilTimeout>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d87e:	2303      	movs	r3, #3
 800d880:	e00f      	b.n	800d8a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2220      	movs	r2, #32
 800d886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2220      	movs	r2, #32
 800d88e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	60f8      	str	r0, [r7, #12]
 800d8b2:	60b9      	str	r1, [r7, #8]
 800d8b4:	603b      	str	r3, [r7, #0]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8ba:	e062      	b.n	800d982 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c2:	d05e      	beq.n	800d982 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8c4:	f7f4 f81c 	bl	8001900 <HAL_GetTick>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	69ba      	ldr	r2, [r7, #24]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d302      	bcc.n	800d8da <UART_WaitOnFlagUntilTimeout+0x30>
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d11d      	bne.n	800d916 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d8e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	689a      	ldr	r2, [r3, #8]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f022 0201 	bic.w	r2, r2, #1
 800d8f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2220      	movs	r2, #32
 800d8fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2220      	movs	r2, #32
 800d906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d912:	2303      	movs	r3, #3
 800d914:	e045      	b.n	800d9a2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f003 0304 	and.w	r3, r3, #4
 800d920:	2b00      	cmp	r3, #0
 800d922:	d02e      	beq.n	800d982 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	69db      	ldr	r3, [r3, #28]
 800d92a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d92e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d932:	d126      	bne.n	800d982 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d93c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d94c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	689a      	ldr	r2, [r3, #8]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f022 0201 	bic.w	r2, r2, #1
 800d95c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2220      	movs	r2, #32
 800d962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2220      	movs	r2, #32
 800d96a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2220      	movs	r2, #32
 800d972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d97e:	2303      	movs	r3, #3
 800d980:	e00f      	b.n	800d9a2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	69da      	ldr	r2, [r3, #28]
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	4013      	ands	r3, r2
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	429a      	cmp	r2, r3
 800d990:	bf0c      	ite	eq
 800d992:	2301      	moveq	r3, #1
 800d994:	2300      	movne	r3, #0
 800d996:	b2db      	uxtb	r3, r3
 800d998:	461a      	mov	r2, r3
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d08d      	beq.n	800d8bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
	...

0800d9ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d9c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6899      	ldr	r1, [r3, #8]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	4b0f      	ldr	r3, [pc, #60]	; (800da0c <UART_EndRxTransfer+0x60>)
 800d9d0:	400b      	ands	r3, r1
 800d9d2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d107      	bne.n	800d9ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f022 0210 	bic.w	r2, r2, #16
 800d9ea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2220      	movs	r2, #32
 800d9f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800da00:	bf00      	nop
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	effffffe 	.word	0xeffffffe

0800da10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2200      	movs	r2, #0
 800da22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2200      	movs	r2, #0
 800da2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da2e:	68f8      	ldr	r0, [r7, #12]
 800da30:	f7ff f8d8 	bl	800cbe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da34:	bf00      	nop
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da52:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2220      	movs	r2, #32
 800da58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7ff f8b4 	bl	800cbd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da68:	bf00      	nop
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800da8c:	bf00      	nop
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800daa0:	bf00      	nop
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d101      	bne.n	800dac2 <HAL_UARTEx_DisableFifoMode+0x16>
 800dabe:	2302      	movs	r3, #2
 800dac0:	e027      	b.n	800db12 <HAL_UARTEx_DisableFifoMode+0x66>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2224      	movs	r2, #36	; 0x24
 800dace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f022 0201 	bic.w	r2, r2, #1
 800dae8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800daf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2220      	movs	r2, #32
 800db04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b084      	sub	sp, #16
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d101      	bne.n	800db36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800db32:	2302      	movs	r3, #2
 800db34:	e02d      	b.n	800db92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2224      	movs	r2, #36	; 0x24
 800db42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f022 0201 	bic.w	r2, r2, #1
 800db5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	430a      	orrs	r2, r1
 800db70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f850 	bl	800dc18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2220      	movs	r2, #32
 800db84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b084      	sub	sp, #16
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
 800dba2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d101      	bne.n	800dbb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dbae:	2302      	movs	r3, #2
 800dbb0:	e02d      	b.n	800dc0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2224      	movs	r2, #36	; 0x24
 800dbbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f022 0201 	bic.w	r2, r2, #1
 800dbd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	683a      	ldr	r2, [r7, #0]
 800dbea:	430a      	orrs	r2, r1
 800dbec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f812 	bl	800dc18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b085      	sub	sp, #20
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d108      	bne.n	800dc3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2201      	movs	r2, #1
 800dc34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dc38:	e031      	b.n	800dc9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dc3a:	2310      	movs	r3, #16
 800dc3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dc3e:	2310      	movs	r3, #16
 800dc40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	0e5b      	lsrs	r3, r3, #25
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	f003 0307 	and.w	r3, r3, #7
 800dc50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	0f5b      	lsrs	r3, r3, #29
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	f003 0307 	and.w	r3, r3, #7
 800dc60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
 800dc64:	7b3a      	ldrb	r2, [r7, #12]
 800dc66:	4911      	ldr	r1, [pc, #68]	; (800dcac <UARTEx_SetNbDataToProcess+0x94>)
 800dc68:	5c8a      	ldrb	r2, [r1, r2]
 800dc6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dc6e:	7b3a      	ldrb	r2, [r7, #12]
 800dc70:	490f      	ldr	r1, [pc, #60]	; (800dcb0 <UARTEx_SetNbDataToProcess+0x98>)
 800dc72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc74:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	7b7a      	ldrb	r2, [r7, #13]
 800dc84:	4909      	ldr	r1, [pc, #36]	; (800dcac <UARTEx_SetNbDataToProcess+0x94>)
 800dc86:	5c8a      	ldrb	r2, [r1, r2]
 800dc88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dc8c:	7b7a      	ldrb	r2, [r7, #13]
 800dc8e:	4908      	ldr	r1, [pc, #32]	; (800dcb0 <UARTEx_SetNbDataToProcess+0x98>)
 800dc90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc92:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dc9e:	bf00      	nop
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	08012814 	.word	0x08012814
 800dcb0:	0801281c 	.word	0x0801281c

0800dcb4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	b480      	push	{r7}
 800dcb8:	b085      	sub	sp, #20
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
 800dcbe:	f107 001c 	add.w	r0, r7, #28
 800dcc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dcca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800dccc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800dcce:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800dcd2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800dcd6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800dcda:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	4313      	orrs	r3, r2
 800dce0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	685a      	ldr	r2, [r3, #4]
 800dce6:	4b07      	ldr	r3, [pc, #28]	; (800dd04 <SDMMC_Init+0x50>)
 800dce8:	4013      	ands	r3, r2
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	431a      	orrs	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	b004      	add	sp, #16
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	ffc02c00 	.word	0xffc02c00

0800dd08 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	370c      	adds	r7, #12
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800dd22:	b480      	push	{r7}
 800dd24:	b083      	sub	sp, #12
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f043 0203 	orr.w	r2, r3, #3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800dd66:	b480      	push	{r7}
 800dd68:	b083      	sub	sp, #12
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f003 0303 	and.w	r3, r3, #3
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	370c      	adds	r7, #12
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
	...

0800dd84 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dda2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800dda8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ddae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68da      	ldr	r2, [r3, #12]
 800ddba:	4b06      	ldr	r3, [pc, #24]	; (800ddd4 <SDMMC_SendCommand+0x50>)
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	431a      	orrs	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3714      	adds	r7, #20
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr
 800ddd4:	fffee0c0 	.word	0xfffee0c0

0800ddd8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	b2db      	uxtb	r3, r3
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b085      	sub	sp, #20
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
 800ddfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	3314      	adds	r3, #20
 800de00:	461a      	mov	r2, r3
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	4413      	add	r3, r2
 800de06:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3714      	adds	r7, #20
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800de22:	2300      	movs	r3, #0
 800de24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800de3e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800de44:	431a      	orrs	r2, r3
                       Data->DPSM);
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800de4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	4313      	orrs	r3, r2
 800de50:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	431a      	orrs	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800de62:	2300      	movs	r3, #0

}
 800de64:	4618      	mov	r0, r3
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b088      	sub	sp, #32
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800de7e:	2310      	movs	r3, #16
 800de80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de88:	2300      	movs	r3, #0
 800de8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de92:	f107 0308 	add.w	r3, r7, #8
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff ff73 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800de9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dea2:	2110      	movs	r1, #16
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fa5f 	bl	800e368 <SDMMC_GetCmdResp1>
 800deaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deac:	69fb      	ldr	r3, [r7, #28]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3720      	adds	r7, #32
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}

0800deb6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b088      	sub	sp, #32
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
 800debe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dec4:	2311      	movs	r3, #17
 800dec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800decc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dece:	2300      	movs	r3, #0
 800ded0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ded2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ded6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ded8:	f107 0308 	add.w	r3, r7, #8
 800dedc:	4619      	mov	r1, r3
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7ff ff50 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dee4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dee8:	2111      	movs	r1, #17
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fa3c 	bl	800e368 <SDMMC_GetCmdResp1>
 800def0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800def2:	69fb      	ldr	r3, [r7, #28]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3720      	adds	r7, #32
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b088      	sub	sp, #32
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800df0a:	2312      	movs	r3, #18
 800df0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df14:	2300      	movs	r3, #0
 800df16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df1e:	f107 0308 	add.w	r3, r7, #8
 800df22:	4619      	mov	r1, r3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f7ff ff2d 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800df2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800df2e:	2112      	movs	r1, #18
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 fa19 	bl	800e368 <SDMMC_GetCmdResp1>
 800df36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df38:	69fb      	ldr	r3, [r7, #28]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3720      	adds	r7, #32
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b088      	sub	sp, #32
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
 800df4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800df50:	2318      	movs	r3, #24
 800df52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df5a:	2300      	movs	r3, #0
 800df5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df64:	f107 0308 	add.w	r3, r7, #8
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7ff ff0a 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800df70:	f241 3288 	movw	r2, #5000	; 0x1388
 800df74:	2118      	movs	r1, #24
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f9f6 	bl	800e368 <SDMMC_GetCmdResp1>
 800df7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df7e:	69fb      	ldr	r3, [r7, #28]
}
 800df80:	4618      	mov	r0, r3
 800df82:	3720      	adds	r7, #32
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b088      	sub	sp, #32
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800df96:	2319      	movs	r3, #25
 800df98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfaa:	f107 0308 	add.w	r3, r7, #8
 800dfae:	4619      	mov	r1, r3
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7ff fee7 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dfb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfba:	2119      	movs	r1, #25
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 f9d3 	bl	800e368 <SDMMC_GetCmdResp1>
 800dfc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfc4:	69fb      	ldr	r3, [r7, #28]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3720      	adds	r7, #32
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
	...

0800dfd0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b088      	sub	sp, #32
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dfdc:	230c      	movs	r3, #12
 800dfde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfee:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e008:	f107 0308 	add.w	r3, r7, #8
 800e00c:	4619      	mov	r1, r3
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff feb8 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e014:	4a0b      	ldr	r2, [pc, #44]	; (800e044 <SDMMC_CmdStopTransfer+0x74>)
 800e016:	210c      	movs	r1, #12
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 f9a5 	bl	800e368 <SDMMC_GetCmdResp1>
 800e01e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e032:	d101      	bne.n	800e038 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e034:	2300      	movs	r3, #0
 800e036:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e038:	69fb      	ldr	r3, [r7, #28]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3720      	adds	r7, #32
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	05f5e100 	.word	0x05f5e100

0800e048 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b088      	sub	sp, #32
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e056:	2307      	movs	r3, #7
 800e058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e05a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e05e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e060:	2300      	movs	r3, #0
 800e062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e068:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e06a:	f107 0308 	add.w	r3, r7, #8
 800e06e:	4619      	mov	r1, r3
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7ff fe87 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e076:	f241 3288 	movw	r2, #5000	; 0x1388
 800e07a:	2107      	movs	r1, #7
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 f973 	bl	800e368 <SDMMC_GetCmdResp1>
 800e082:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e084:	69fb      	ldr	r3, [r7, #28]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3720      	adds	r7, #32
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b088      	sub	sp, #32
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e096:	2300      	movs	r3, #0
 800e098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e09a:	2300      	movs	r3, #0
 800e09c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0ac:	f107 0308 	add.w	r3, r7, #8
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7ff fe66 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 fb97 	bl	800e7ec <SDMMC_GetCmdError>
 800e0be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0c0:	69fb      	ldr	r3, [r7, #28]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3720      	adds	r7, #32
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b088      	sub	sp, #32
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e0d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e0d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e0d8:	2308      	movs	r3, #8
 800e0da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0ec:	f107 0308 	add.w	r3, r7, #8
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7ff fe46 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fb29 	bl	800e750 <SDMMC_GetCmdResp7>
 800e0fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e100:	69fb      	ldr	r3, [r7, #28]
}
 800e102:	4618      	mov	r0, r3
 800e104:	3720      	adds	r7, #32
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b088      	sub	sp, #32
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e118:	2337      	movs	r3, #55	; 0x37
 800e11a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e11c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e122:	2300      	movs	r3, #0
 800e124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e12a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e12c:	f107 0308 	add.w	r3, r7, #8
 800e130:	4619      	mov	r1, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7ff fe26 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e138:	f241 3288 	movw	r2, #5000	; 0x1388
 800e13c:	2137      	movs	r1, #55	; 0x37
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f912 	bl	800e368 <SDMMC_GetCmdResp1>
 800e144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e146:	69fb      	ldr	r3, [r7, #28]
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3720      	adds	r7, #32
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e15e:	2329      	movs	r3, #41	; 0x29
 800e160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e162:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e168:	2300      	movs	r3, #0
 800e16a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e16c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e170:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e172:	f107 0308 	add.w	r3, r7, #8
 800e176:	4619      	mov	r1, r3
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7ff fe03 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 fa2e 	bl	800e5e0 <SDMMC_GetCmdResp3>
 800e184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e186:	69fb      	ldr	r3, [r7, #28]
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3720      	adds	r7, #32
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b088      	sub	sp, #32
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e19e:	2306      	movs	r3, #6
 800e1a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1b2:	f107 0308 	add.w	r3, r7, #8
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7ff fde3 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e1be:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1c2:	2106      	movs	r1, #6
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 f8cf 	bl	800e368 <SDMMC_GetCmdResp1>
 800e1ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1cc:	69fb      	ldr	r3, [r7, #28]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3720      	adds	r7, #32
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b088      	sub	sp, #32
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e1e2:	2333      	movs	r3, #51	; 0x33
 800e1e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1f6:	f107 0308 	add.w	r3, r7, #8
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff fdc1 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e202:	f241 3288 	movw	r2, #5000	; 0x1388
 800e206:	2133      	movs	r1, #51	; 0x33
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 f8ad 	bl	800e368 <SDMMC_GetCmdResp1>
 800e20e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e210:	69fb      	ldr	r3, [r7, #28]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3720      	adds	r7, #32
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b088      	sub	sp, #32
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e222:	2300      	movs	r3, #0
 800e224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e226:	2302      	movs	r3, #2
 800e228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e22a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e22e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e230:	2300      	movs	r3, #0
 800e232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e238:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e23a:	f107 0308 	add.w	r3, r7, #8
 800e23e:	4619      	mov	r1, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff fd9f 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 f980 	bl	800e54c <SDMMC_GetCmdResp2>
 800e24c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e24e:	69fb      	ldr	r3, [r7, #28]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3720      	adds	r7, #32
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b088      	sub	sp, #32
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e266:	2309      	movs	r3, #9
 800e268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e26a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e26e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e270:	2300      	movs	r3, #0
 800e272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e27a:	f107 0308 	add.w	r3, r7, #8
 800e27e:	4619      	mov	r1, r3
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff fd7f 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 f960 	bl	800e54c <SDMMC_GetCmdResp2>
 800e28c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e28e:	69fb      	ldr	r3, [r7, #28]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3720      	adds	r7, #32
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b088      	sub	sp, #32
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e2a6:	2303      	movs	r3, #3
 800e2a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2ba:	f107 0308 	add.w	r3, r7, #8
 800e2be:	4619      	mov	r1, r3
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff fd5f 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	2103      	movs	r1, #3
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 f9c8 	bl	800e660 <SDMMC_GetCmdResp6>
 800e2d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2d2:	69fb      	ldr	r3, [r7, #28]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3720      	adds	r7, #32
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b088      	sub	sp, #32
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e2ea:	230d      	movs	r3, #13
 800e2ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2fe:	f107 0308 	add.w	r3, r7, #8
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f7ff fd3d 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e30a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e30e:	210d      	movs	r1, #13
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 f829 	bl	800e368 <SDMMC_GetCmdResp1>
 800e316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e318:	69fb      	ldr	r3, [r7, #28]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3720      	adds	r7, #32
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e322:	b580      	push	{r7, lr}
 800e324:	b088      	sub	sp, #32
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e32a:	2300      	movs	r3, #0
 800e32c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e32e:	230d      	movs	r3, #13
 800e330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e332:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e336:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e338:	2300      	movs	r3, #0
 800e33a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e33c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e340:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e342:	f107 0308 	add.w	r3, r7, #8
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7ff fd1b 	bl	800dd84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e34e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e352:	210d      	movs	r1, #13
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 f807 	bl	800e368 <SDMMC_GetCmdResp1>
 800e35a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e35c:	69fb      	ldr	r3, [r7, #28]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3720      	adds	r7, #32
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
	...

0800e368 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b088      	sub	sp, #32
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	460b      	mov	r3, r1
 800e372:	607a      	str	r2, [r7, #4]
 800e374:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e376:	4b70      	ldr	r3, [pc, #448]	; (800e538 <SDMMC_GetCmdResp1+0x1d0>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a70      	ldr	r2, [pc, #448]	; (800e53c <SDMMC_GetCmdResp1+0x1d4>)
 800e37c:	fba2 2303 	umull	r2, r3, r2, r3
 800e380:	0a5a      	lsrs	r2, r3, #9
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	fb02 f303 	mul.w	r3, r2, r3
 800e388:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	1e5a      	subs	r2, r3, #1
 800e38e:	61fa      	str	r2, [r7, #28]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d102      	bne.n	800e39a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e394:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e398:	e0c9      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e39e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e3a0:	69ba      	ldr	r2, [r7, #24]
 800e3a2:	4b67      	ldr	r3, [pc, #412]	; (800e540 <SDMMC_GetCmdResp1+0x1d8>)
 800e3a4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d0ef      	beq.n	800e38a <SDMMC_GetCmdResp1+0x22>
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d1ea      	bne.n	800e38a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b8:	f003 0304 	and.w	r3, r3, #4
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d004      	beq.n	800e3ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2204      	movs	r2, #4
 800e3c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3c6:	2304      	movs	r3, #4
 800e3c8:	e0b1      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ce:	f003 0301 	and.w	r3, r3, #1
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d004      	beq.n	800e3e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e0a6      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	4a58      	ldr	r2, [pc, #352]	; (800e544 <SDMMC_GetCmdResp1+0x1dc>)
 800e3e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f7ff fcf6 	bl	800ddd8 <SDMMC_GetCommandResponse>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	7afb      	ldrb	r3, [r7, #11]
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d001      	beq.n	800e3fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e099      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f7ff fcf8 	bl	800ddf2 <SDMMC_GetResponse>
 800e402:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e404:	697a      	ldr	r2, [r7, #20]
 800e406:	4b50      	ldr	r3, [pc, #320]	; (800e548 <SDMMC_GetCmdResp1+0x1e0>)
 800e408:	4013      	ands	r3, r2
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d101      	bne.n	800e412 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e40e:	2300      	movs	r3, #0
 800e410:	e08d      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	2b00      	cmp	r3, #0
 800e416:	da02      	bge.n	800e41e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e418:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e41c:	e087      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e424:	2b00      	cmp	r3, #0
 800e426:	d001      	beq.n	800e42c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e428:	2340      	movs	r3, #64	; 0x40
 800e42a:	e080      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e436:	2380      	movs	r3, #128	; 0x80
 800e438:	e079      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e440:	2b00      	cmp	r3, #0
 800e442:	d002      	beq.n	800e44a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e444:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e448:	e071      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e450:	2b00      	cmp	r3, #0
 800e452:	d002      	beq.n	800e45a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e454:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e458:	e069      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e468:	e061      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e470:	2b00      	cmp	r3, #0
 800e472:	d002      	beq.n	800e47a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e478:	e059      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e480:	2b00      	cmp	r3, #0
 800e482:	d002      	beq.n	800e48a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e488:	e051      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e498:	e049      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d002      	beq.n	800e4aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e4a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e4a8:	e041      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e4b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4b8:	e039      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d002      	beq.n	800e4ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e4c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e4c8:	e031      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d002      	beq.n	800e4da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e4d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e4d8:	e029      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d002      	beq.n	800e4ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e4e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e4e8:	e021      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d002      	beq.n	800e4fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e4f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e4f8:	e019      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e500:	2b00      	cmp	r3, #0
 800e502:	d002      	beq.n	800e50a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e504:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e508:	e011      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e514:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e518:	e009      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f003 0308 	and.w	r3, r3, #8
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e524:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e528:	e001      	b.n	800e52e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e52a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3720      	adds	r7, #32
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	24000000 	.word	0x24000000
 800e53c:	10624dd3 	.word	0x10624dd3
 800e540:	00200045 	.word	0x00200045
 800e544:	002000c5 	.word	0x002000c5
 800e548:	fdffe008 	.word	0xfdffe008

0800e54c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e554:	4b1f      	ldr	r3, [pc, #124]	; (800e5d4 <SDMMC_GetCmdResp2+0x88>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4a1f      	ldr	r2, [pc, #124]	; (800e5d8 <SDMMC_GetCmdResp2+0x8c>)
 800e55a:	fba2 2303 	umull	r2, r3, r2, r3
 800e55e:	0a5b      	lsrs	r3, r3, #9
 800e560:	f241 3288 	movw	r2, #5000	; 0x1388
 800e564:	fb02 f303 	mul.w	r3, r2, r3
 800e568:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	1e5a      	subs	r2, r3, #1
 800e56e:	60fa      	str	r2, [r7, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d102      	bne.n	800e57a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e578:	e026      	b.n	800e5c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e57e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e586:	2b00      	cmp	r3, #0
 800e588:	d0ef      	beq.n	800e56a <SDMMC_GetCmdResp2+0x1e>
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e590:	2b00      	cmp	r3, #0
 800e592:	d1ea      	bne.n	800e56a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e598:	f003 0304 	and.w	r3, r3, #4
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d004      	beq.n	800e5aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2204      	movs	r2, #4
 800e5a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5a6:	2304      	movs	r3, #4
 800e5a8:	e00e      	b.n	800e5c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ae:	f003 0301 	and.w	r3, r3, #1
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d004      	beq.n	800e5c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e003      	b.n	800e5c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4a06      	ldr	r2, [pc, #24]	; (800e5dc <SDMMC_GetCmdResp2+0x90>)
 800e5c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e5c6:	2300      	movs	r3, #0
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3714      	adds	r7, #20
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	24000000 	.word	0x24000000
 800e5d8:	10624dd3 	.word	0x10624dd3
 800e5dc:	002000c5 	.word	0x002000c5

0800e5e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e5e8:	4b1a      	ldr	r3, [pc, #104]	; (800e654 <SDMMC_GetCmdResp3+0x74>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a1a      	ldr	r2, [pc, #104]	; (800e658 <SDMMC_GetCmdResp3+0x78>)
 800e5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e5f2:	0a5b      	lsrs	r3, r3, #9
 800e5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5f8:	fb02 f303 	mul.w	r3, r2, r3
 800e5fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	1e5a      	subs	r2, r3, #1
 800e602:	60fa      	str	r2, [r7, #12]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d102      	bne.n	800e60e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e608:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e60c:	e01b      	b.n	800e646 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e612:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d0ef      	beq.n	800e5fe <SDMMC_GetCmdResp3+0x1e>
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1ea      	bne.n	800e5fe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e62c:	f003 0304 	and.w	r3, r3, #4
 800e630:	2b00      	cmp	r3, #0
 800e632:	d004      	beq.n	800e63e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2204      	movs	r2, #4
 800e638:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e63a:	2304      	movs	r3, #4
 800e63c:	e003      	b.n	800e646 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a06      	ldr	r2, [pc, #24]	; (800e65c <SDMMC_GetCmdResp3+0x7c>)
 800e642:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	24000000 	.word	0x24000000
 800e658:	10624dd3 	.word	0x10624dd3
 800e65c:	002000c5 	.word	0x002000c5

0800e660 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b088      	sub	sp, #32
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	460b      	mov	r3, r1
 800e66a:	607a      	str	r2, [r7, #4]
 800e66c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e66e:	4b35      	ldr	r3, [pc, #212]	; (800e744 <SDMMC_GetCmdResp6+0xe4>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4a35      	ldr	r2, [pc, #212]	; (800e748 <SDMMC_GetCmdResp6+0xe8>)
 800e674:	fba2 2303 	umull	r2, r3, r2, r3
 800e678:	0a5b      	lsrs	r3, r3, #9
 800e67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e67e:	fb02 f303 	mul.w	r3, r2, r3
 800e682:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	1e5a      	subs	r2, r3, #1
 800e688:	61fa      	str	r2, [r7, #28]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d102      	bne.n	800e694 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e68e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e692:	e052      	b.n	800e73a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e698:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d0ef      	beq.n	800e684 <SDMMC_GetCmdResp6+0x24>
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1ea      	bne.n	800e684 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b2:	f003 0304 	and.w	r3, r3, #4
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d004      	beq.n	800e6c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2204      	movs	r2, #4
 800e6be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	e03a      	b.n	800e73a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c8:	f003 0301 	and.w	r3, r3, #1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d004      	beq.n	800e6da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e02f      	b.n	800e73a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f7ff fb7c 	bl	800ddd8 <SDMMC_GetCommandResponse>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	7afb      	ldrb	r3, [r7, #11]
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d001      	beq.n	800e6ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e025      	b.n	800e73a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	4a16      	ldr	r2, [pc, #88]	; (800e74c <SDMMC_GetCmdResp6+0xec>)
 800e6f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f7ff fb7b 	bl	800ddf2 <SDMMC_GetResponse>
 800e6fc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d106      	bne.n	800e716 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	0c1b      	lsrs	r3, r3, #16
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e712:	2300      	movs	r3, #0
 800e714:	e011      	b.n	800e73a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e724:	e009      	b.n	800e73a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e734:	e001      	b.n	800e73a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3720      	adds	r7, #32
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	24000000 	.word	0x24000000
 800e748:	10624dd3 	.word	0x10624dd3
 800e74c:	002000c5 	.word	0x002000c5

0800e750 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e758:	4b22      	ldr	r3, [pc, #136]	; (800e7e4 <SDMMC_GetCmdResp7+0x94>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a22      	ldr	r2, [pc, #136]	; (800e7e8 <SDMMC_GetCmdResp7+0x98>)
 800e75e:	fba2 2303 	umull	r2, r3, r2, r3
 800e762:	0a5b      	lsrs	r3, r3, #9
 800e764:	f241 3288 	movw	r2, #5000	; 0x1388
 800e768:	fb02 f303 	mul.w	r3, r2, r3
 800e76c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	1e5a      	subs	r2, r3, #1
 800e772:	60fa      	str	r2, [r7, #12]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d102      	bne.n	800e77e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e77c:	e02c      	b.n	800e7d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e782:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d0ef      	beq.n	800e76e <SDMMC_GetCmdResp7+0x1e>
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1ea      	bne.n	800e76e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79c:	f003 0304 	and.w	r3, r3, #4
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d004      	beq.n	800e7ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2204      	movs	r2, #4
 800e7a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7aa:	2304      	movs	r3, #4
 800e7ac:	e014      	b.n	800e7d8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b2:	f003 0301 	and.w	r3, r3, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d004      	beq.n	800e7c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e009      	b.n	800e7d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2240      	movs	r2, #64	; 0x40
 800e7d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e7d6:	2300      	movs	r3, #0

}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3714      	adds	r7, #20
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr
 800e7e4:	24000000 	.word	0x24000000
 800e7e8:	10624dd3 	.word	0x10624dd3

0800e7ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e7f4:	4b11      	ldr	r3, [pc, #68]	; (800e83c <SDMMC_GetCmdError+0x50>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a11      	ldr	r2, [pc, #68]	; (800e840 <SDMMC_GetCmdError+0x54>)
 800e7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e7fe:	0a5b      	lsrs	r3, r3, #9
 800e800:	f241 3288 	movw	r2, #5000	; 0x1388
 800e804:	fb02 f303 	mul.w	r3, r2, r3
 800e808:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	1e5a      	subs	r2, r3, #1
 800e80e:	60fa      	str	r2, [r7, #12]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d102      	bne.n	800e81a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e818:	e009      	b.n	800e82e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e822:	2b00      	cmp	r3, #0
 800e824:	d0f1      	beq.n	800e80a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a06      	ldr	r2, [pc, #24]	; (800e844 <SDMMC_GetCmdError+0x58>)
 800e82a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	24000000 	.word	0x24000000
 800e840:	10624dd3 	.word	0x10624dd3
 800e844:	002000c5 	.word	0x002000c5

0800e848 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e848:	b084      	sub	sp, #16
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b084      	sub	sp, #16
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
 800e852:	f107 001c 	add.w	r0, r7, #28
 800e856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d120      	bne.n	800e8a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	68da      	ldr	r2, [r3, #12]
 800e870:	4b2a      	ldr	r3, [pc, #168]	; (800e91c <USB_CoreInit+0xd4>)
 800e872:	4013      	ands	r3, r2
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e886:	2b01      	cmp	r3, #1
 800e888:	d105      	bne.n	800e896 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f001 fb14 	bl	800fec4 <USB_CoreReset>
 800e89c:	4603      	mov	r3, r0
 800e89e:	73fb      	strb	r3, [r7, #15]
 800e8a0:	e01a      	b.n	800e8d8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f001 fb08 	bl	800fec4 <USB_CoreReset>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d106      	bne.n	800e8cc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	639a      	str	r2, [r3, #56]	; 0x38
 800e8ca:	e005      	b.n	800e8d8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d116      	bne.n	800e90c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8e2:	b29a      	uxth	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8ec:	4b0c      	ldr	r3, [pc, #48]	; (800e920 <USB_CoreInit+0xd8>)
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	f043 0206 	orr.w	r2, r3, #6
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	689b      	ldr	r3, [r3, #8]
 800e904:	f043 0220 	orr.w	r2, r3, #32
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3710      	adds	r7, #16
 800e912:	46bd      	mov	sp, r7
 800e914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e918:	b004      	add	sp, #16
 800e91a:	4770      	bx	lr
 800e91c:	ffbdffbf 	.word	0xffbdffbf
 800e920:	03ee0000 	.word	0x03ee0000

0800e924 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e924:	b480      	push	{r7}
 800e926:	b087      	sub	sp, #28
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	4613      	mov	r3, r2
 800e930:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e932:	79fb      	ldrb	r3, [r7, #7]
 800e934:	2b02      	cmp	r3, #2
 800e936:	d165      	bne.n	800ea04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	4a41      	ldr	r2, [pc, #260]	; (800ea40 <USB_SetTurnaroundTime+0x11c>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d906      	bls.n	800e94e <USB_SetTurnaroundTime+0x2a>
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	4a40      	ldr	r2, [pc, #256]	; (800ea44 <USB_SetTurnaroundTime+0x120>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d202      	bcs.n	800e94e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e948:	230f      	movs	r3, #15
 800e94a:	617b      	str	r3, [r7, #20]
 800e94c:	e062      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	4a3c      	ldr	r2, [pc, #240]	; (800ea44 <USB_SetTurnaroundTime+0x120>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d306      	bcc.n	800e964 <USB_SetTurnaroundTime+0x40>
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	4a3b      	ldr	r2, [pc, #236]	; (800ea48 <USB_SetTurnaroundTime+0x124>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d202      	bcs.n	800e964 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e95e:	230e      	movs	r3, #14
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	e057      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	4a38      	ldr	r2, [pc, #224]	; (800ea48 <USB_SetTurnaroundTime+0x124>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d306      	bcc.n	800e97a <USB_SetTurnaroundTime+0x56>
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	4a37      	ldr	r2, [pc, #220]	; (800ea4c <USB_SetTurnaroundTime+0x128>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d202      	bcs.n	800e97a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e974:	230d      	movs	r3, #13
 800e976:	617b      	str	r3, [r7, #20]
 800e978:	e04c      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	4a33      	ldr	r2, [pc, #204]	; (800ea4c <USB_SetTurnaroundTime+0x128>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d306      	bcc.n	800e990 <USB_SetTurnaroundTime+0x6c>
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	4a32      	ldr	r2, [pc, #200]	; (800ea50 <USB_SetTurnaroundTime+0x12c>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d802      	bhi.n	800e990 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e98a:	230c      	movs	r3, #12
 800e98c:	617b      	str	r3, [r7, #20]
 800e98e:	e041      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	4a2f      	ldr	r2, [pc, #188]	; (800ea50 <USB_SetTurnaroundTime+0x12c>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d906      	bls.n	800e9a6 <USB_SetTurnaroundTime+0x82>
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	4a2e      	ldr	r2, [pc, #184]	; (800ea54 <USB_SetTurnaroundTime+0x130>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d802      	bhi.n	800e9a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e9a0:	230b      	movs	r3, #11
 800e9a2:	617b      	str	r3, [r7, #20]
 800e9a4:	e036      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	4a2a      	ldr	r2, [pc, #168]	; (800ea54 <USB_SetTurnaroundTime+0x130>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d906      	bls.n	800e9bc <USB_SetTurnaroundTime+0x98>
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	4a29      	ldr	r2, [pc, #164]	; (800ea58 <USB_SetTurnaroundTime+0x134>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d802      	bhi.n	800e9bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e9b6:	230a      	movs	r3, #10
 800e9b8:	617b      	str	r3, [r7, #20]
 800e9ba:	e02b      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	4a26      	ldr	r2, [pc, #152]	; (800ea58 <USB_SetTurnaroundTime+0x134>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d906      	bls.n	800e9d2 <USB_SetTurnaroundTime+0xae>
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	4a25      	ldr	r2, [pc, #148]	; (800ea5c <USB_SetTurnaroundTime+0x138>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d202      	bcs.n	800e9d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e9cc:	2309      	movs	r3, #9
 800e9ce:	617b      	str	r3, [r7, #20]
 800e9d0:	e020      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	4a21      	ldr	r2, [pc, #132]	; (800ea5c <USB_SetTurnaroundTime+0x138>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d306      	bcc.n	800e9e8 <USB_SetTurnaroundTime+0xc4>
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	4a20      	ldr	r2, [pc, #128]	; (800ea60 <USB_SetTurnaroundTime+0x13c>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d802      	bhi.n	800e9e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e9e2:	2308      	movs	r3, #8
 800e9e4:	617b      	str	r3, [r7, #20]
 800e9e6:	e015      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	4a1d      	ldr	r2, [pc, #116]	; (800ea60 <USB_SetTurnaroundTime+0x13c>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d906      	bls.n	800e9fe <USB_SetTurnaroundTime+0xda>
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	4a1c      	ldr	r2, [pc, #112]	; (800ea64 <USB_SetTurnaroundTime+0x140>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d202      	bcs.n	800e9fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e9f8:	2307      	movs	r3, #7
 800e9fa:	617b      	str	r3, [r7, #20]
 800e9fc:	e00a      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e9fe:	2306      	movs	r3, #6
 800ea00:	617b      	str	r3, [r7, #20]
 800ea02:	e007      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ea04:	79fb      	ldrb	r3, [r7, #7]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d102      	bne.n	800ea10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ea0a:	2309      	movs	r3, #9
 800ea0c:	617b      	str	r3, [r7, #20]
 800ea0e:	e001      	b.n	800ea14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ea10:	2309      	movs	r3, #9
 800ea12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	68da      	ldr	r2, [r3, #12]
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	029b      	lsls	r3, r3, #10
 800ea28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ea2c:	431a      	orrs	r2, r3
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	371c      	adds	r7, #28
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr
 800ea40:	00d8acbf 	.word	0x00d8acbf
 800ea44:	00e4e1c0 	.word	0x00e4e1c0
 800ea48:	00f42400 	.word	0x00f42400
 800ea4c:	01067380 	.word	0x01067380
 800ea50:	011a499f 	.word	0x011a499f
 800ea54:	01312cff 	.word	0x01312cff
 800ea58:	014ca43f 	.word	0x014ca43f
 800ea5c:	016e3600 	.word	0x016e3600
 800ea60:	01a6ab1f 	.word	0x01a6ab1f
 800ea64:	01e84800 	.word	0x01e84800

0800ea68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	f043 0201 	orr.w	r2, r3, #1
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	370c      	adds	r7, #12
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr

0800ea8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea8a:	b480      	push	{r7}
 800ea8c:	b083      	sub	sp, #12
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	f023 0201 	bic.w	r2, r3, #1
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ea9e:	2300      	movs	r3, #0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	460b      	mov	r3, r1
 800eab6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eac4:	78fb      	ldrb	r3, [r7, #3]
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d106      	bne.n	800ead8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	60da      	str	r2, [r3, #12]
 800ead6:	e00b      	b.n	800eaf0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ead8:	78fb      	ldrb	r3, [r7, #3]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d106      	bne.n	800eaec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	60da      	str	r2, [r3, #12]
 800eaea:	e001      	b.n	800eaf0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800eaec:	2301      	movs	r3, #1
 800eaee:	e003      	b.n	800eaf8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800eaf0:	2032      	movs	r0, #50	; 0x32
 800eaf2:	f7f2 ff11 	bl	8001918 <HAL_Delay>

  return HAL_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb00:	b084      	sub	sp, #16
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b086      	sub	sp, #24
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800eb0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eb12:	2300      	movs	r3, #0
 800eb14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	613b      	str	r3, [r7, #16]
 800eb1e:	e009      	b.n	800eb34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	3340      	adds	r3, #64	; 0x40
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	4413      	add	r3, r2
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	3301      	adds	r3, #1
 800eb32:	613b      	str	r3, [r7, #16]
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	2b0e      	cmp	r3, #14
 800eb38:	d9f2      	bls.n	800eb20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800eb3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d11c      	bne.n	800eb7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb4e:	f043 0302 	orr.w	r3, r3, #2
 800eb52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	601a      	str	r2, [r3, #0]
 800eb78:	e005      	b.n	800eb86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	2300      	movs	r3, #0
 800eb90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb98:	4619      	mov	r1, r3
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eba0:	461a      	mov	r2, r3
 800eba2:	680b      	ldr	r3, [r1, #0]
 800eba4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d10c      	bne.n	800ebc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ebac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d104      	bne.n	800ebbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 f949 	bl	800ee4c <USB_SetDevSpeed>
 800ebba:	e008      	b.n	800ebce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ebbc:	2101      	movs	r1, #1
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f944 	bl	800ee4c <USB_SetDevSpeed>
 800ebc4:	e003      	b.n	800ebce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ebc6:	2103      	movs	r1, #3
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f93f 	bl	800ee4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ebce:	2110      	movs	r1, #16
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 f8f3 	bl	800edbc <USB_FlushTxFifo>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d001      	beq.n	800ebe0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 f911 	bl	800ee08 <USB_FlushRxFifo>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec02:	461a      	mov	r2, r3
 800ec04:	2300      	movs	r3, #0
 800ec06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec0e:	461a      	mov	r2, r3
 800ec10:	2300      	movs	r3, #0
 800ec12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec14:	2300      	movs	r3, #0
 800ec16:	613b      	str	r3, [r7, #16]
 800ec18:	e043      	b.n	800eca2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	015a      	lsls	r2, r3, #5
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	4413      	add	r3, r2
 800ec22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec30:	d118      	bne.n	800ec64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d10a      	bne.n	800ec4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	015a      	lsls	r2, r3, #5
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	4413      	add	r3, r2
 800ec40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec44:	461a      	mov	r2, r3
 800ec46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec4a:	6013      	str	r3, [r2, #0]
 800ec4c:	e013      	b.n	800ec76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	015a      	lsls	r2, r3, #5
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	4413      	add	r3, r2
 800ec56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ec60:	6013      	str	r3, [r2, #0]
 800ec62:	e008      	b.n	800ec76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	015a      	lsls	r2, r3, #5
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec70:	461a      	mov	r2, r3
 800ec72:	2300      	movs	r3, #0
 800ec74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	015a      	lsls	r2, r3, #5
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec82:	461a      	mov	r2, r3
 800ec84:	2300      	movs	r3, #0
 800ec86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	015a      	lsls	r2, r3, #5
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	4413      	add	r3, r2
 800ec90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec94:	461a      	mov	r2, r3
 800ec96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ec9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	613b      	str	r3, [r7, #16]
 800eca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca4:	693a      	ldr	r2, [r7, #16]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d3b7      	bcc.n	800ec1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ecaa:	2300      	movs	r3, #0
 800ecac:	613b      	str	r3, [r7, #16]
 800ecae:	e043      	b.n	800ed38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	015a      	lsls	r2, r3, #5
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ecc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ecc6:	d118      	bne.n	800ecfa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10a      	bne.n	800ece4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	015a      	lsls	r2, r3, #5
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecda:	461a      	mov	r2, r3
 800ecdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ece0:	6013      	str	r3, [r2, #0]
 800ece2:	e013      	b.n	800ed0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	015a      	lsls	r2, r3, #5
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	4413      	add	r3, r2
 800ecec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ecf6:	6013      	str	r3, [r2, #0]
 800ecf8:	e008      	b.n	800ed0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	015a      	lsls	r2, r3, #5
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	4413      	add	r3, r2
 800ed02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed06:	461a      	mov	r2, r3
 800ed08:	2300      	movs	r3, #0
 800ed0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	015a      	lsls	r2, r3, #5
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	4413      	add	r3, r2
 800ed14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed18:	461a      	mov	r2, r3
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	015a      	lsls	r2, r3, #5
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	4413      	add	r3, r2
 800ed26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ed30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	3301      	adds	r3, #1
 800ed36:	613b      	str	r3, [r7, #16]
 800ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3a:	693a      	ldr	r2, [r7, #16]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d3b7      	bcc.n	800ecb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ed60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d105      	bne.n	800ed74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	699b      	ldr	r3, [r3, #24]
 800ed6c:	f043 0210 	orr.w	r2, r3, #16
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	699a      	ldr	r2, [r3, #24]
 800ed78:	4b0e      	ldr	r3, [pc, #56]	; (800edb4 <USB_DevInit+0x2b4>)
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ed80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d005      	beq.n	800ed92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	699b      	ldr	r3, [r3, #24]
 800ed8a:	f043 0208 	orr.w	r2, r3, #8
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ed92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d105      	bne.n	800eda4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	699a      	ldr	r2, [r3, #24]
 800ed9c:	4b06      	ldr	r3, [pc, #24]	; (800edb8 <USB_DevInit+0x2b8>)
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800eda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3718      	adds	r7, #24
 800edaa:	46bd      	mov	sp, r7
 800edac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800edb0:	b004      	add	sp, #16
 800edb2:	4770      	bx	lr
 800edb4:	803c3800 	.word	0x803c3800
 800edb8:	40000004 	.word	0x40000004

0800edbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800edc6:	2300      	movs	r3, #0
 800edc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	019b      	lsls	r3, r3, #6
 800edce:	f043 0220 	orr.w	r2, r3, #32
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	3301      	adds	r3, #1
 800edda:	60fb      	str	r3, [r7, #12]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	4a09      	ldr	r2, [pc, #36]	; (800ee04 <USB_FlushTxFifo+0x48>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d901      	bls.n	800ede8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ede4:	2303      	movs	r3, #3
 800ede6:	e006      	b.n	800edf6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	f003 0320 	and.w	r3, r3, #32
 800edf0:	2b20      	cmp	r3, #32
 800edf2:	d0f0      	beq.n	800edd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3714      	adds	r7, #20
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
 800ee04:	00030d40 	.word	0x00030d40

0800ee08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ee10:	2300      	movs	r3, #0
 800ee12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2210      	movs	r2, #16
 800ee18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	60fb      	str	r3, [r7, #12]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	4a09      	ldr	r2, [pc, #36]	; (800ee48 <USB_FlushRxFifo+0x40>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d901      	bls.n	800ee2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ee28:	2303      	movs	r3, #3
 800ee2a:	e006      	b.n	800ee3a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	691b      	ldr	r3, [r3, #16]
 800ee30:	f003 0310 	and.w	r3, r3, #16
 800ee34:	2b10      	cmp	r3, #16
 800ee36:	d0f0      	beq.n	800ee1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3714      	adds	r7, #20
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	00030d40 	.word	0x00030d40

0800ee4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b085      	sub	sp, #20
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	460b      	mov	r3, r1
 800ee56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	78fb      	ldrb	r3, [r7, #3]
 800ee66:	68f9      	ldr	r1, [r7, #12]
 800ee68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3714      	adds	r7, #20
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr

0800ee7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ee7e:	b480      	push	{r7}
 800ee80:	b087      	sub	sp, #28
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	f003 0306 	and.w	r3, r3, #6
 800ee96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d102      	bne.n	800eea4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	75fb      	strb	r3, [r7, #23]
 800eea2:	e00a      	b.n	800eeba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d002      	beq.n	800eeb0 <USB_GetDevSpeed+0x32>
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2b06      	cmp	r3, #6
 800eeae:	d102      	bne.n	800eeb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	75fb      	strb	r3, [r7, #23]
 800eeb4:	e001      	b.n	800eeba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800eeb6:	230f      	movs	r3, #15
 800eeb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800eeba:	7dfb      	ldrb	r3, [r7, #23]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	371c      	adds	r7, #28
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	785b      	ldrb	r3, [r3, #1]
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d139      	bne.n	800ef58 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeea:	69da      	ldr	r2, [r3, #28]
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	f003 030f 	and.w	r3, r3, #15
 800eef4:	2101      	movs	r1, #1
 800eef6:	fa01 f303 	lsl.w	r3, r1, r3
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	68f9      	ldr	r1, [r7, #12]
 800eefe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef02:	4313      	orrs	r3, r2
 800ef04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	015a      	lsls	r2, r3, #5
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d153      	bne.n	800efc4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	015a      	lsls	r2, r3, #5
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	4413      	add	r3, r2
 800ef24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	78db      	ldrb	r3, [r3, #3]
 800ef36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	059b      	lsls	r3, r3, #22
 800ef3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef40:	431a      	orrs	r2, r3
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	0159      	lsls	r1, r3, #5
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	440b      	add	r3, r1
 800ef4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4b20      	ldr	r3, [pc, #128]	; (800efd4 <USB_ActivateEndpoint+0x10c>)
 800ef52:	4313      	orrs	r3, r2
 800ef54:	600b      	str	r3, [r1, #0]
 800ef56:	e035      	b.n	800efc4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef5e:	69da      	ldr	r2, [r3, #28]
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	f003 030f 	and.w	r3, r3, #15
 800ef68:	2101      	movs	r1, #1
 800ef6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ef6e:	041b      	lsls	r3, r3, #16
 800ef70:	68f9      	ldr	r1, [r7, #12]
 800ef72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef76:	4313      	orrs	r3, r2
 800ef78:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	015a      	lsls	r2, r3, #5
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	4413      	add	r3, r2
 800ef82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d119      	bne.n	800efc4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	78db      	ldrb	r3, [r3, #3]
 800efaa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800efac:	430b      	orrs	r3, r1
 800efae:	431a      	orrs	r2, r3
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	0159      	lsls	r1, r3, #5
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	440b      	add	r3, r1
 800efb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efbc:	4619      	mov	r1, r3
 800efbe:	4b05      	ldr	r3, [pc, #20]	; (800efd4 <USB_ActivateEndpoint+0x10c>)
 800efc0:	4313      	orrs	r3, r2
 800efc2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3714      	adds	r7, #20
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	10008000 	.word	0x10008000

0800efd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800efd8:	b480      	push	{r7}
 800efda:	b085      	sub	sp, #20
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	785b      	ldrb	r3, [r3, #1]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d161      	bne.n	800f0b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	015a      	lsls	r2, r3, #5
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	4413      	add	r3, r2
 800effc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f00a:	d11f      	bne.n	800f04c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	015a      	lsls	r2, r3, #5
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	4413      	add	r3, r2
 800f014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	0151      	lsls	r1, r2, #5
 800f01e:	68fa      	ldr	r2, [r7, #12]
 800f020:	440a      	add	r2, r1
 800f022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f02a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	015a      	lsls	r2, r3, #5
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	4413      	add	r3, r2
 800f034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68ba      	ldr	r2, [r7, #8]
 800f03c:	0151      	lsls	r1, r2, #5
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	440a      	add	r2, r1
 800f042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f04a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	f003 030f 	and.w	r3, r3, #15
 800f05c:	2101      	movs	r1, #1
 800f05e:	fa01 f303 	lsl.w	r3, r1, r3
 800f062:	b29b      	uxth	r3, r3
 800f064:	43db      	mvns	r3, r3
 800f066:	68f9      	ldr	r1, [r7, #12]
 800f068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f06c:	4013      	ands	r3, r2
 800f06e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f076:	69da      	ldr	r2, [r3, #28]
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	f003 030f 	and.w	r3, r3, #15
 800f080:	2101      	movs	r1, #1
 800f082:	fa01 f303 	lsl.w	r3, r1, r3
 800f086:	b29b      	uxth	r3, r3
 800f088:	43db      	mvns	r3, r3
 800f08a:	68f9      	ldr	r1, [r7, #12]
 800f08c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f090:	4013      	ands	r3, r2
 800f092:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	015a      	lsls	r2, r3, #5
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4413      	add	r3, r2
 800f09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	0159      	lsls	r1, r3, #5
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	440b      	add	r3, r1
 800f0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	4b35      	ldr	r3, [pc, #212]	; (800f188 <USB_DeactivateEndpoint+0x1b0>)
 800f0b2:	4013      	ands	r3, r2
 800f0b4:	600b      	str	r3, [r1, #0]
 800f0b6:	e060      	b.n	800f17a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	015a      	lsls	r2, r3, #5
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	4413      	add	r3, r2
 800f0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0ce:	d11f      	bne.n	800f110 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	015a      	lsls	r2, r3, #5
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68ba      	ldr	r2, [r7, #8]
 800f0e0:	0151      	lsls	r1, r2, #5
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	440a      	add	r2, r1
 800f0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f0ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	015a      	lsls	r2, r3, #5
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	0151      	lsls	r1, r2, #5
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	440a      	add	r2, r1
 800f106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f10a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f10e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	f003 030f 	and.w	r3, r3, #15
 800f120:	2101      	movs	r1, #1
 800f122:	fa01 f303 	lsl.w	r3, r1, r3
 800f126:	041b      	lsls	r3, r3, #16
 800f128:	43db      	mvns	r3, r3
 800f12a:	68f9      	ldr	r1, [r7, #12]
 800f12c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f130:	4013      	ands	r3, r2
 800f132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f13a:	69da      	ldr	r2, [r3, #28]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	f003 030f 	and.w	r3, r3, #15
 800f144:	2101      	movs	r1, #1
 800f146:	fa01 f303 	lsl.w	r3, r1, r3
 800f14a:	041b      	lsls	r3, r3, #16
 800f14c:	43db      	mvns	r3, r3
 800f14e:	68f9      	ldr	r1, [r7, #12]
 800f150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f154:	4013      	ands	r3, r2
 800f156:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	015a      	lsls	r2, r3, #5
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	4413      	add	r3, r2
 800f160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	0159      	lsls	r1, r3, #5
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	440b      	add	r3, r1
 800f16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f172:	4619      	mov	r1, r3
 800f174:	4b05      	ldr	r3, [pc, #20]	; (800f18c <USB_DeactivateEndpoint+0x1b4>)
 800f176:	4013      	ands	r3, r2
 800f178:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f17a:	2300      	movs	r3, #0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3714      	adds	r7, #20
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	ec337800 	.word	0xec337800
 800f18c:	eff37800 	.word	0xeff37800

0800f190 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b08a      	sub	sp, #40	; 0x28
 800f194:	af02      	add	r7, sp, #8
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	4613      	mov	r3, r2
 800f19c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	785b      	ldrb	r3, [r3, #1]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	f040 8163 	bne.w	800f478 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	695b      	ldr	r3, [r3, #20]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d132      	bne.n	800f220 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	015a      	lsls	r2, r3, #5
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1c6:	691a      	ldr	r2, [r3, #16]
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	0159      	lsls	r1, r3, #5
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	440b      	add	r3, r1
 800f1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	4ba5      	ldr	r3, [pc, #660]	; (800f46c <USB_EPStartXfer+0x2dc>)
 800f1d8:	4013      	ands	r3, r2
 800f1da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	015a      	lsls	r2, r3, #5
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1e8:	691b      	ldr	r3, [r3, #16]
 800f1ea:	69ba      	ldr	r2, [r7, #24]
 800f1ec:	0151      	lsls	r1, r2, #5
 800f1ee:	69fa      	ldr	r2, [r7, #28]
 800f1f0:	440a      	add	r2, r1
 800f1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	015a      	lsls	r2, r3, #5
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	4413      	add	r3, r2
 800f204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f208:	691a      	ldr	r2, [r3, #16]
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	0159      	lsls	r1, r3, #5
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	440b      	add	r3, r1
 800f212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f216:	4619      	mov	r1, r3
 800f218:	4b95      	ldr	r3, [pc, #596]	; (800f470 <USB_EPStartXfer+0x2e0>)
 800f21a:	4013      	ands	r3, r2
 800f21c:	610b      	str	r3, [r1, #16]
 800f21e:	e074      	b.n	800f30a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	015a      	lsls	r2, r3, #5
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	4413      	add	r3, r2
 800f228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f22c:	691a      	ldr	r2, [r3, #16]
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	0159      	lsls	r1, r3, #5
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	440b      	add	r3, r1
 800f236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f23a:	4619      	mov	r1, r3
 800f23c:	4b8c      	ldr	r3, [pc, #560]	; (800f470 <USB_EPStartXfer+0x2e0>)
 800f23e:	4013      	ands	r3, r2
 800f240:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	015a      	lsls	r2, r3, #5
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	4413      	add	r3, r2
 800f24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f24e:	691a      	ldr	r2, [r3, #16]
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	0159      	lsls	r1, r3, #5
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	440b      	add	r3, r1
 800f258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f25c:	4619      	mov	r1, r3
 800f25e:	4b83      	ldr	r3, [pc, #524]	; (800f46c <USB_EPStartXfer+0x2dc>)
 800f260:	4013      	ands	r3, r2
 800f262:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	015a      	lsls	r2, r3, #5
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	4413      	add	r3, r2
 800f26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f270:	691a      	ldr	r2, [r3, #16]
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	6959      	ldr	r1, [r3, #20]
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	440b      	add	r3, r1
 800f27c:	1e59      	subs	r1, r3, #1
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	fbb1 f3f3 	udiv	r3, r1, r3
 800f286:	04d9      	lsls	r1, r3, #19
 800f288:	4b7a      	ldr	r3, [pc, #488]	; (800f474 <USB_EPStartXfer+0x2e4>)
 800f28a:	400b      	ands	r3, r1
 800f28c:	69b9      	ldr	r1, [r7, #24]
 800f28e:	0148      	lsls	r0, r1, #5
 800f290:	69f9      	ldr	r1, [r7, #28]
 800f292:	4401      	add	r1, r0
 800f294:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f298:	4313      	orrs	r3, r2
 800f29a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	015a      	lsls	r2, r3, #5
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2a8:	691a      	ldr	r2, [r3, #16]
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	695b      	ldr	r3, [r3, #20]
 800f2ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f2b2:	69b9      	ldr	r1, [r7, #24]
 800f2b4:	0148      	lsls	r0, r1, #5
 800f2b6:	69f9      	ldr	r1, [r7, #28]
 800f2b8:	4401      	add	r1, r0
 800f2ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f2be:	4313      	orrs	r3, r2
 800f2c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	78db      	ldrb	r3, [r3, #3]
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d11f      	bne.n	800f30a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	015a      	lsls	r2, r3, #5
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2d6:	691b      	ldr	r3, [r3, #16]
 800f2d8:	69ba      	ldr	r2, [r7, #24]
 800f2da:	0151      	lsls	r1, r2, #5
 800f2dc:	69fa      	ldr	r2, [r7, #28]
 800f2de:	440a      	add	r2, r1
 800f2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f2e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	015a      	lsls	r2, r3, #5
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	69ba      	ldr	r2, [r7, #24]
 800f2fa:	0151      	lsls	r1, r2, #5
 800f2fc:	69fa      	ldr	r2, [r7, #28]
 800f2fe:	440a      	add	r2, r1
 800f300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f308:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f30a:	79fb      	ldrb	r3, [r7, #7]
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d14b      	bne.n	800f3a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	691b      	ldr	r3, [r3, #16]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d009      	beq.n	800f32c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	015a      	lsls	r2, r3, #5
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	4413      	add	r3, r2
 800f320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f324:	461a      	mov	r2, r3
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	691b      	ldr	r3, [r3, #16]
 800f32a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	78db      	ldrb	r3, [r3, #3]
 800f330:	2b01      	cmp	r3, #1
 800f332:	d128      	bne.n	800f386 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f340:	2b00      	cmp	r3, #0
 800f342:	d110      	bne.n	800f366 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f344:	69bb      	ldr	r3, [r7, #24]
 800f346:	015a      	lsls	r2, r3, #5
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	4413      	add	r3, r2
 800f34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	69ba      	ldr	r2, [r7, #24]
 800f354:	0151      	lsls	r1, r2, #5
 800f356:	69fa      	ldr	r2, [r7, #28]
 800f358:	440a      	add	r2, r1
 800f35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f35e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f362:	6013      	str	r3, [r2, #0]
 800f364:	e00f      	b.n	800f386 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	015a      	lsls	r2, r3, #5
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	4413      	add	r3, r2
 800f36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	69ba      	ldr	r2, [r7, #24]
 800f376:	0151      	lsls	r1, r2, #5
 800f378:	69fa      	ldr	r2, [r7, #28]
 800f37a:	440a      	add	r2, r1
 800f37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f384:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	015a      	lsls	r2, r3, #5
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	4413      	add	r3, r2
 800f38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	69ba      	ldr	r2, [r7, #24]
 800f396:	0151      	lsls	r1, r2, #5
 800f398:	69fa      	ldr	r2, [r7, #28]
 800f39a:	440a      	add	r2, r1
 800f39c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f3a4:	6013      	str	r3, [r2, #0]
 800f3a6:	e133      	b.n	800f610 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	015a      	lsls	r2, r3, #5
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	69ba      	ldr	r2, [r7, #24]
 800f3b8:	0151      	lsls	r1, r2, #5
 800f3ba:	69fa      	ldr	r2, [r7, #28]
 800f3bc:	440a      	add	r2, r1
 800f3be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f3c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	78db      	ldrb	r3, [r3, #3]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d015      	beq.n	800f3fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	695b      	ldr	r3, [r3, #20]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f000 811b 	beq.w	800f610 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	f003 030f 	and.w	r3, r3, #15
 800f3ea:	2101      	movs	r1, #1
 800f3ec:	fa01 f303 	lsl.w	r3, r1, r3
 800f3f0:	69f9      	ldr	r1, [r7, #28]
 800f3f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	634b      	str	r3, [r1, #52]	; 0x34
 800f3fa:	e109      	b.n	800f610 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d110      	bne.n	800f42e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	015a      	lsls	r2, r3, #5
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	4413      	add	r3, r2
 800f414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	69ba      	ldr	r2, [r7, #24]
 800f41c:	0151      	lsls	r1, r2, #5
 800f41e:	69fa      	ldr	r2, [r7, #28]
 800f420:	440a      	add	r2, r1
 800f422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f42a:	6013      	str	r3, [r2, #0]
 800f42c:	e00f      	b.n	800f44e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	015a      	lsls	r2, r3, #5
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	4413      	add	r3, r2
 800f436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	69ba      	ldr	r2, [r7, #24]
 800f43e:	0151      	lsls	r1, r2, #5
 800f440:	69fa      	ldr	r2, [r7, #28]
 800f442:	440a      	add	r2, r1
 800f444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f44c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	68d9      	ldr	r1, [r3, #12]
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	781a      	ldrb	r2, [r3, #0]
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	695b      	ldr	r3, [r3, #20]
 800f45a:	b298      	uxth	r0, r3
 800f45c:	79fb      	ldrb	r3, [r7, #7]
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	4603      	mov	r3, r0
 800f462:	68f8      	ldr	r0, [r7, #12]
 800f464:	f000 fa38 	bl	800f8d8 <USB_WritePacket>
 800f468:	e0d2      	b.n	800f610 <USB_EPStartXfer+0x480>
 800f46a:	bf00      	nop
 800f46c:	e007ffff 	.word	0xe007ffff
 800f470:	fff80000 	.word	0xfff80000
 800f474:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	015a      	lsls	r2, r3, #5
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	4413      	add	r3, r2
 800f480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f484:	691a      	ldr	r2, [r3, #16]
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	0159      	lsls	r1, r3, #5
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	440b      	add	r3, r1
 800f48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f492:	4619      	mov	r1, r3
 800f494:	4b61      	ldr	r3, [pc, #388]	; (800f61c <USB_EPStartXfer+0x48c>)
 800f496:	4013      	ands	r3, r2
 800f498:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	015a      	lsls	r2, r3, #5
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4a6:	691a      	ldr	r2, [r3, #16]
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	0159      	lsls	r1, r3, #5
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	440b      	add	r3, r1
 800f4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	4b5a      	ldr	r3, [pc, #360]	; (800f620 <USB_EPStartXfer+0x490>)
 800f4b8:	4013      	ands	r3, r2
 800f4ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	695b      	ldr	r3, [r3, #20]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d123      	bne.n	800f50c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	015a      	lsls	r2, r3, #5
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d0:	691a      	ldr	r2, [r3, #16]
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4da:	69b9      	ldr	r1, [r7, #24]
 800f4dc:	0148      	lsls	r0, r1, #5
 800f4de:	69f9      	ldr	r1, [r7, #28]
 800f4e0:	4401      	add	r1, r0
 800f4e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	015a      	lsls	r2, r3, #5
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	69ba      	ldr	r2, [r7, #24]
 800f4fa:	0151      	lsls	r1, r2, #5
 800f4fc:	69fa      	ldr	r2, [r7, #28]
 800f4fe:	440a      	add	r2, r1
 800f500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f508:	6113      	str	r3, [r2, #16]
 800f50a:	e033      	b.n	800f574 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	695a      	ldr	r2, [r3, #20]
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	4413      	add	r3, r2
 800f516:	1e5a      	subs	r2, r3, #1
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f520:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	015a      	lsls	r2, r3, #5
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	4413      	add	r3, r2
 800f52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f52e:	691a      	ldr	r2, [r3, #16]
 800f530:	8afb      	ldrh	r3, [r7, #22]
 800f532:	04d9      	lsls	r1, r3, #19
 800f534:	4b3b      	ldr	r3, [pc, #236]	; (800f624 <USB_EPStartXfer+0x494>)
 800f536:	400b      	ands	r3, r1
 800f538:	69b9      	ldr	r1, [r7, #24]
 800f53a:	0148      	lsls	r0, r1, #5
 800f53c:	69f9      	ldr	r1, [r7, #28]
 800f53e:	4401      	add	r1, r0
 800f540:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f544:	4313      	orrs	r3, r2
 800f546:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f548:	69bb      	ldr	r3, [r7, #24]
 800f54a:	015a      	lsls	r2, r3, #5
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	4413      	add	r3, r2
 800f550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f554:	691a      	ldr	r2, [r3, #16]
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	8af9      	ldrh	r1, [r7, #22]
 800f55c:	fb01 f303 	mul.w	r3, r1, r3
 800f560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f564:	69b9      	ldr	r1, [r7, #24]
 800f566:	0148      	lsls	r0, r1, #5
 800f568:	69f9      	ldr	r1, [r7, #28]
 800f56a:	4401      	add	r1, r0
 800f56c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f570:	4313      	orrs	r3, r2
 800f572:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f574:	79fb      	ldrb	r3, [r7, #7]
 800f576:	2b01      	cmp	r3, #1
 800f578:	d10d      	bne.n	800f596 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	68db      	ldr	r3, [r3, #12]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d009      	beq.n	800f596 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	68d9      	ldr	r1, [r3, #12]
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	015a      	lsls	r2, r3, #5
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	4413      	add	r3, r2
 800f58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f592:	460a      	mov	r2, r1
 800f594:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	78db      	ldrb	r3, [r3, #3]
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d128      	bne.n	800f5f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5a4:	689b      	ldr	r3, [r3, #8]
 800f5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d110      	bne.n	800f5d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	015a      	lsls	r2, r3, #5
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	69ba      	ldr	r2, [r7, #24]
 800f5be:	0151      	lsls	r1, r2, #5
 800f5c0:	69fa      	ldr	r2, [r7, #28]
 800f5c2:	440a      	add	r2, r1
 800f5c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f5cc:	6013      	str	r3, [r2, #0]
 800f5ce:	e00f      	b.n	800f5f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	015a      	lsls	r2, r3, #5
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	69ba      	ldr	r2, [r7, #24]
 800f5e0:	0151      	lsls	r1, r2, #5
 800f5e2:	69fa      	ldr	r2, [r7, #28]
 800f5e4:	440a      	add	r2, r1
 800f5e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	015a      	lsls	r2, r3, #5
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	69ba      	ldr	r2, [r7, #24]
 800f600:	0151      	lsls	r1, r2, #5
 800f602:	69fa      	ldr	r2, [r7, #28]
 800f604:	440a      	add	r2, r1
 800f606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f60a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f60e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	3720      	adds	r7, #32
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	fff80000 	.word	0xfff80000
 800f620:	e007ffff 	.word	0xe007ffff
 800f624:	1ff80000 	.word	0x1ff80000

0800f628 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f628:	b480      	push	{r7}
 800f62a:	b087      	sub	sp, #28
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	4613      	mov	r3, r2
 800f634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	785b      	ldrb	r3, [r3, #1]
 800f644:	2b01      	cmp	r3, #1
 800f646:	f040 80cd 	bne.w	800f7e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	695b      	ldr	r3, [r3, #20]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d132      	bne.n	800f6b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	015a      	lsls	r2, r3, #5
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	4413      	add	r3, r2
 800f65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f65e:	691a      	ldr	r2, [r3, #16]
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	0159      	lsls	r1, r3, #5
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	440b      	add	r3, r1
 800f668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f66c:	4619      	mov	r1, r3
 800f66e:	4b98      	ldr	r3, [pc, #608]	; (800f8d0 <USB_EP0StartXfer+0x2a8>)
 800f670:	4013      	ands	r3, r2
 800f672:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	015a      	lsls	r2, r3, #5
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	4413      	add	r3, r2
 800f67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	693a      	ldr	r2, [r7, #16]
 800f684:	0151      	lsls	r1, r2, #5
 800f686:	697a      	ldr	r2, [r7, #20]
 800f688:	440a      	add	r2, r1
 800f68a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f68e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	015a      	lsls	r2, r3, #5
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	4413      	add	r3, r2
 800f69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6a0:	691a      	ldr	r2, [r3, #16]
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	0159      	lsls	r1, r3, #5
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	440b      	add	r3, r1
 800f6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	4b88      	ldr	r3, [pc, #544]	; (800f8d4 <USB_EP0StartXfer+0x2ac>)
 800f6b2:	4013      	ands	r3, r2
 800f6b4:	610b      	str	r3, [r1, #16]
 800f6b6:	e04e      	b.n	800f756 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	015a      	lsls	r2, r3, #5
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	4413      	add	r3, r2
 800f6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6c4:	691a      	ldr	r2, [r3, #16]
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	0159      	lsls	r1, r3, #5
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	440b      	add	r3, r1
 800f6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4b7f      	ldr	r3, [pc, #508]	; (800f8d4 <USB_EP0StartXfer+0x2ac>)
 800f6d6:	4013      	ands	r3, r2
 800f6d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	015a      	lsls	r2, r3, #5
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6e6:	691a      	ldr	r2, [r3, #16]
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	0159      	lsls	r1, r3, #5
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	440b      	add	r3, r1
 800f6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	4b76      	ldr	r3, [pc, #472]	; (800f8d0 <USB_EP0StartXfer+0x2a8>)
 800f6f8:	4013      	ands	r3, r2
 800f6fa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	695a      	ldr	r2, [r3, #20]
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	429a      	cmp	r2, r3
 800f706:	d903      	bls.n	800f710 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	689a      	ldr	r2, [r3, #8]
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	015a      	lsls	r2, r3, #5
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	4413      	add	r3, r2
 800f718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	693a      	ldr	r2, [r7, #16]
 800f720:	0151      	lsls	r1, r2, #5
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	440a      	add	r2, r1
 800f726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f72a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f72e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	015a      	lsls	r2, r3, #5
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	4413      	add	r3, r2
 800f738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f73c:	691a      	ldr	r2, [r3, #16]
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	695b      	ldr	r3, [r3, #20]
 800f742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f746:	6939      	ldr	r1, [r7, #16]
 800f748:	0148      	lsls	r0, r1, #5
 800f74a:	6979      	ldr	r1, [r7, #20]
 800f74c:	4401      	add	r1, r0
 800f74e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f752:	4313      	orrs	r3, r2
 800f754:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f756:	79fb      	ldrb	r3, [r7, #7]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d11e      	bne.n	800f79a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d009      	beq.n	800f778 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	015a      	lsls	r2, r3, #5
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	4413      	add	r3, r2
 800f76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f770:	461a      	mov	r2, r3
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	691b      	ldr	r3, [r3, #16]
 800f776:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	015a      	lsls	r2, r3, #5
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	4413      	add	r3, r2
 800f780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	693a      	ldr	r2, [r7, #16]
 800f788:	0151      	lsls	r1, r2, #5
 800f78a:	697a      	ldr	r2, [r7, #20]
 800f78c:	440a      	add	r2, r1
 800f78e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f796:	6013      	str	r3, [r2, #0]
 800f798:	e092      	b.n	800f8c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	015a      	lsls	r2, r3, #5
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	693a      	ldr	r2, [r7, #16]
 800f7aa:	0151      	lsls	r1, r2, #5
 800f7ac:	697a      	ldr	r2, [r7, #20]
 800f7ae:	440a      	add	r2, r1
 800f7b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f7b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	695b      	ldr	r3, [r3, #20]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d07e      	beq.n	800f8c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	f003 030f 	and.w	r3, r3, #15
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	fa01 f303 	lsl.w	r3, r1, r3
 800f7d8:	6979      	ldr	r1, [r7, #20]
 800f7da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	634b      	str	r3, [r1, #52]	; 0x34
 800f7e2:	e06d      	b.n	800f8c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	015a      	lsls	r2, r3, #5
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f0:	691a      	ldr	r2, [r3, #16]
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	0159      	lsls	r1, r3, #5
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	440b      	add	r3, r1
 800f7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7fe:	4619      	mov	r1, r3
 800f800:	4b34      	ldr	r3, [pc, #208]	; (800f8d4 <USB_EP0StartXfer+0x2ac>)
 800f802:	4013      	ands	r3, r2
 800f804:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	015a      	lsls	r2, r3, #5
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	4413      	add	r3, r2
 800f80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f812:	691a      	ldr	r2, [r3, #16]
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	0159      	lsls	r1, r3, #5
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	440b      	add	r3, r1
 800f81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f820:	4619      	mov	r1, r3
 800f822:	4b2b      	ldr	r3, [pc, #172]	; (800f8d0 <USB_EP0StartXfer+0x2a8>)
 800f824:	4013      	ands	r3, r2
 800f826:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	695b      	ldr	r3, [r3, #20]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d003      	beq.n	800f838 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	689a      	ldr	r2, [r3, #8]
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	015a      	lsls	r2, r3, #5
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	4413      	add	r3, r2
 800f840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f844:	691b      	ldr	r3, [r3, #16]
 800f846:	693a      	ldr	r2, [r7, #16]
 800f848:	0151      	lsls	r1, r2, #5
 800f84a:	697a      	ldr	r2, [r7, #20]
 800f84c:	440a      	add	r2, r1
 800f84e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f856:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	015a      	lsls	r2, r3, #5
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	4413      	add	r3, r2
 800f860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f864:	691a      	ldr	r2, [r3, #16]
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f86e:	6939      	ldr	r1, [r7, #16]
 800f870:	0148      	lsls	r0, r1, #5
 800f872:	6979      	ldr	r1, [r7, #20]
 800f874:	4401      	add	r1, r0
 800f876:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f87a:	4313      	orrs	r3, r2
 800f87c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f87e:	79fb      	ldrb	r3, [r7, #7]
 800f880:	2b01      	cmp	r3, #1
 800f882:	d10d      	bne.n	800f8a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d009      	beq.n	800f8a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	68d9      	ldr	r1, [r3, #12]
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	015a      	lsls	r2, r3, #5
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	4413      	add	r3, r2
 800f898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f89c:	460a      	mov	r2, r1
 800f89e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	015a      	lsls	r2, r3, #5
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	693a      	ldr	r2, [r7, #16]
 800f8b0:	0151      	lsls	r1, r2, #5
 800f8b2:	697a      	ldr	r2, [r7, #20]
 800f8b4:	440a      	add	r2, r1
 800f8b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f8be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8c0:	2300      	movs	r3, #0
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	371c      	adds	r7, #28
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop
 800f8d0:	e007ffff 	.word	0xe007ffff
 800f8d4:	fff80000 	.word	0xfff80000

0800f8d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b089      	sub	sp, #36	; 0x24
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	4611      	mov	r1, r2
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	71fb      	strb	r3, [r7, #7]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f8f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d123      	bne.n	800f946 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f8fe:	88bb      	ldrh	r3, [r7, #4]
 800f900:	3303      	adds	r3, #3
 800f902:	089b      	lsrs	r3, r3, #2
 800f904:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f906:	2300      	movs	r3, #0
 800f908:	61bb      	str	r3, [r7, #24]
 800f90a:	e018      	b.n	800f93e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f90c:	79fb      	ldrb	r3, [r7, #7]
 800f90e:	031a      	lsls	r2, r3, #12
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	4413      	add	r3, r2
 800f914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f918:	461a      	mov	r2, r3
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	3301      	adds	r3, #1
 800f924:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	3301      	adds	r3, #1
 800f92a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	3301      	adds	r3, #1
 800f930:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	3301      	adds	r3, #1
 800f936:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	3301      	adds	r3, #1
 800f93c:	61bb      	str	r3, [r7, #24]
 800f93e:	69ba      	ldr	r2, [r7, #24]
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	429a      	cmp	r2, r3
 800f944:	d3e2      	bcc.n	800f90c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f946:	2300      	movs	r3, #0
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3724      	adds	r7, #36	; 0x24
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f954:	b480      	push	{r7}
 800f956:	b08b      	sub	sp, #44	; 0x2c
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	4613      	mov	r3, r2
 800f960:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f96a:	88fb      	ldrh	r3, [r7, #6]
 800f96c:	089b      	lsrs	r3, r3, #2
 800f96e:	b29b      	uxth	r3, r3
 800f970:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f972:	88fb      	ldrh	r3, [r7, #6]
 800f974:	f003 0303 	and.w	r3, r3, #3
 800f978:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f97a:	2300      	movs	r3, #0
 800f97c:	623b      	str	r3, [r7, #32]
 800f97e:	e014      	b.n	800f9aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f980:	69bb      	ldr	r3, [r7, #24]
 800f982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	601a      	str	r2, [r3, #0]
    pDest++;
 800f98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98e:	3301      	adds	r3, #1
 800f990:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f994:	3301      	adds	r3, #1
 800f996:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99a:	3301      	adds	r3, #1
 800f99c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f9a4:	6a3b      	ldr	r3, [r7, #32]
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	623b      	str	r3, [r7, #32]
 800f9aa:	6a3a      	ldr	r2, [r7, #32]
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d3e6      	bcc.n	800f980 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f9b2:	8bfb      	ldrh	r3, [r7, #30]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d01e      	beq.n	800f9f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	f107 0310 	add.w	r3, r7, #16
 800f9c8:	6812      	ldr	r2, [r2, #0]
 800f9ca:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f9cc:	693a      	ldr	r2, [r7, #16]
 800f9ce:	6a3b      	ldr	r3, [r7, #32]
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	00db      	lsls	r3, r3, #3
 800f9d4:	fa22 f303 	lsr.w	r3, r2, r3
 800f9d8:	b2da      	uxtb	r2, r3
 800f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9dc:	701a      	strb	r2, [r3, #0]
      i++;
 800f9de:	6a3b      	ldr	r3, [r7, #32]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	623b      	str	r3, [r7, #32]
      pDest++;
 800f9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f9ea:	8bfb      	ldrh	r3, [r7, #30]
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f9f0:	8bfb      	ldrh	r3, [r7, #30]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1ea      	bne.n	800f9cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	372c      	adds	r7, #44	; 0x2c
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b085      	sub	sp, #20
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	785b      	ldrb	r3, [r3, #1]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d12c      	bne.n	800fa7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	015a      	lsls	r2, r3, #5
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	4413      	add	r3, r2
 800fa28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	db12      	blt.n	800fa58 <USB_EPSetStall+0x54>
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00f      	beq.n	800fa58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	015a      	lsls	r2, r3, #5
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	4413      	add	r3, r2
 800fa40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	68ba      	ldr	r2, [r7, #8]
 800fa48:	0151      	lsls	r1, r2, #5
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	440a      	add	r2, r1
 800fa4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fa56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	015a      	lsls	r2, r3, #5
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	4413      	add	r3, r2
 800fa60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68ba      	ldr	r2, [r7, #8]
 800fa68:	0151      	lsls	r1, r2, #5
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	440a      	add	r2, r1
 800fa6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	e02b      	b.n	800fad2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	015a      	lsls	r2, r3, #5
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	4413      	add	r3, r2
 800fa82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	db12      	blt.n	800fab2 <USB_EPSetStall+0xae>
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00f      	beq.n	800fab2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	015a      	lsls	r2, r3, #5
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	4413      	add	r3, r2
 800fa9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	0151      	lsls	r1, r2, #5
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	440a      	add	r2, r1
 800faa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800faac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fab0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	015a      	lsls	r2, r3, #5
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	4413      	add	r3, r2
 800faba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	0151      	lsls	r1, r2, #5
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	440a      	add	r2, r1
 800fac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800facc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fad0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3714      	adds	r7, #20
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b085      	sub	sp, #20
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	785b      	ldrb	r3, [r3, #1]
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d128      	bne.n	800fb4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	015a      	lsls	r2, r3, #5
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	4413      	add	r3, r2
 800fb04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	68ba      	ldr	r2, [r7, #8]
 800fb0c:	0151      	lsls	r1, r2, #5
 800fb0e:	68fa      	ldr	r2, [r7, #12]
 800fb10:	440a      	add	r2, r1
 800fb12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	78db      	ldrb	r3, [r3, #3]
 800fb20:	2b03      	cmp	r3, #3
 800fb22:	d003      	beq.n	800fb2c <USB_EPClearStall+0x4c>
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	78db      	ldrb	r3, [r3, #3]
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d138      	bne.n	800fb9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	015a      	lsls	r2, r3, #5
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	4413      	add	r3, r2
 800fb34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	68ba      	ldr	r2, [r7, #8]
 800fb3c:	0151      	lsls	r1, r2, #5
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	440a      	add	r2, r1
 800fb42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb4a:	6013      	str	r3, [r2, #0]
 800fb4c:	e027      	b.n	800fb9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	015a      	lsls	r2, r3, #5
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	4413      	add	r3, r2
 800fb56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	68ba      	ldr	r2, [r7, #8]
 800fb5e:	0151      	lsls	r1, r2, #5
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	440a      	add	r2, r1
 800fb64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	78db      	ldrb	r3, [r3, #3]
 800fb72:	2b03      	cmp	r3, #3
 800fb74:	d003      	beq.n	800fb7e <USB_EPClearStall+0x9e>
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	78db      	ldrb	r3, [r3, #3]
 800fb7a:	2b02      	cmp	r3, #2
 800fb7c:	d10f      	bne.n	800fb9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	015a      	lsls	r2, r3, #5
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	4413      	add	r3, r2
 800fb86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	68ba      	ldr	r2, [r7, #8]
 800fb8e:	0151      	lsls	r1, r2, #5
 800fb90:	68fa      	ldr	r2, [r7, #12]
 800fb92:	440a      	add	r2, r1
 800fb94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fb9e:	2300      	movs	r3, #0
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3714      	adds	r7, #20
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr

0800fbac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fbce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	78fb      	ldrb	r3, [r7, #3]
 800fbda:	011b      	lsls	r3, r3, #4
 800fbdc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fbe0:	68f9      	ldr	r1, [r7, #12]
 800fbe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3714      	adds	r7, #20
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr

0800fbf8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b085      	sub	sp, #20
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fc12:	f023 0303 	bic.w	r3, r3, #3
 800fc16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc26:	f023 0302 	bic.w	r3, r3, #2
 800fc2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3714      	adds	r7, #20
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr

0800fc3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fc3a:	b480      	push	{r7}
 800fc3c:	b085      	sub	sp, #20
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	68fa      	ldr	r2, [r7, #12]
 800fc50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fc54:	f023 0303 	bic.w	r3, r3, #3
 800fc58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	68fa      	ldr	r2, [r7, #12]
 800fc64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc68:	f043 0302 	orr.w	r3, r3, #2
 800fc6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fc6e:	2300      	movs	r3, #0
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	695b      	ldr	r3, [r3, #20]
 800fc88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	699b      	ldr	r3, [r3, #24]
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	4013      	ands	r3, r2
 800fc92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fc94:	68fb      	ldr	r3, [r7, #12]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3714      	adds	r7, #20
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr

0800fca2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fca2:	b480      	push	{r7}
 800fca4:	b085      	sub	sp, #20
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcb4:	699b      	ldr	r3, [r3, #24]
 800fcb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcbe:	69db      	ldr	r3, [r3, #28]
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	4013      	ands	r3, r2
 800fcc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	0c1b      	lsrs	r3, r3, #16
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3714      	adds	r7, #20
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr

0800fcd6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fcd6:	b480      	push	{r7}
 800fcd8:	b085      	sub	sp, #20
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fce8:	699b      	ldr	r3, [r3, #24]
 800fcea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcf2:	69db      	ldr	r3, [r3, #28]
 800fcf4:	68ba      	ldr	r2, [r7, #8]
 800fcf6:	4013      	ands	r3, r2
 800fcf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	b29b      	uxth	r3, r3
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr

0800fd0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fd0a:	b480      	push	{r7}
 800fd0c:	b085      	sub	sp, #20
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
 800fd12:	460b      	mov	r3, r1
 800fd14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fd1a:	78fb      	ldrb	r3, [r7, #3]
 800fd1c:	015a      	lsls	r2, r3, #5
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	4413      	add	r3, r2
 800fd22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd26:	689b      	ldr	r3, [r3, #8]
 800fd28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd30:	695b      	ldr	r3, [r3, #20]
 800fd32:	68ba      	ldr	r2, [r7, #8]
 800fd34:	4013      	ands	r3, r2
 800fd36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fd38:	68bb      	ldr	r3, [r7, #8]
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3714      	adds	r7, #20
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr

0800fd46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fd46:	b480      	push	{r7}
 800fd48:	b087      	sub	sp, #28
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
 800fd4e:	460b      	mov	r3, r1
 800fd50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd5c:	691b      	ldr	r3, [r3, #16]
 800fd5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fd6a:	78fb      	ldrb	r3, [r7, #3]
 800fd6c:	f003 030f 	and.w	r3, r3, #15
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	fa22 f303 	lsr.w	r3, r2, r3
 800fd76:	01db      	lsls	r3, r3, #7
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	693a      	ldr	r2, [r7, #16]
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fd80:	78fb      	ldrb	r3, [r7, #3]
 800fd82:	015a      	lsls	r2, r3, #5
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	4413      	add	r3, r2
 800fd88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd8c:	689b      	ldr	r3, [r3, #8]
 800fd8e:	693a      	ldr	r2, [r7, #16]
 800fd90:	4013      	ands	r3, r2
 800fd92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fd94:	68bb      	ldr	r3, [r7, #8]
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	371c      	adds	r7, #28
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr

0800fda2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fda2:	b480      	push	{r7}
 800fda4:	b083      	sub	sp, #12
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	695b      	ldr	r3, [r3, #20]
 800fdae:	f003 0301 	and.w	r3, r3, #1
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	370c      	adds	r7, #12
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr
	...

0800fdc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdda:	4619      	mov	r1, r3
 800fddc:	4b09      	ldr	r3, [pc, #36]	; (800fe04 <USB_ActivateSetup+0x44>)
 800fdde:	4013      	ands	r3, r2
 800fde0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	68fa      	ldr	r2, [r7, #12]
 800fdec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fdf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fdf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fdf6:	2300      	movs	r3, #0
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3714      	adds	r7, #20
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr
 800fe04:	fffff800 	.word	0xfffff800

0800fe08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b087      	sub	sp, #28
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	460b      	mov	r3, r1
 800fe12:	607a      	str	r2, [r7, #4]
 800fe14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	333c      	adds	r3, #60	; 0x3c
 800fe1e:	3304      	adds	r3, #4
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	4a26      	ldr	r2, [pc, #152]	; (800fec0 <USB_EP0_OutStart+0xb8>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d90a      	bls.n	800fe42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe3c:	d101      	bne.n	800fe42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	e037      	b.n	800feb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe48:	461a      	mov	r2, r3
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe68:	691b      	ldr	r3, [r3, #16]
 800fe6a:	697a      	ldr	r2, [r7, #20]
 800fe6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe70:	f043 0318 	orr.w	r3, r3, #24
 800fe74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fe88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fe8a:	7afb      	ldrb	r3, [r7, #11]
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d10f      	bne.n	800feb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe96:	461a      	mov	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800feae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	371c      	adds	r7, #28
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	4f54300a 	.word	0x4f54300a

0800fec4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b085      	sub	sp, #20
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fecc:	2300      	movs	r3, #0
 800fece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	3301      	adds	r3, #1
 800fed4:	60fb      	str	r3, [r7, #12]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	4a13      	ldr	r2, [pc, #76]	; (800ff28 <USB_CoreReset+0x64>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d901      	bls.n	800fee2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fede:	2303      	movs	r3, #3
 800fee0:	e01b      	b.n	800ff1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	691b      	ldr	r3, [r3, #16]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	daf2      	bge.n	800fed0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800feea:	2300      	movs	r3, #0
 800feec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	f043 0201 	orr.w	r2, r3, #1
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	3301      	adds	r3, #1
 800fefe:	60fb      	str	r3, [r7, #12]
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	4a09      	ldr	r2, [pc, #36]	; (800ff28 <USB_CoreReset+0x64>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d901      	bls.n	800ff0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ff08:	2303      	movs	r3, #3
 800ff0a:	e006      	b.n	800ff1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	691b      	ldr	r3, [r3, #16]
 800ff10:	f003 0301 	and.w	r3, r3, #1
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d0f0      	beq.n	800fefa <USB_CoreReset+0x36>

  return HAL_OK;
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3714      	adds	r7, #20
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr
 800ff26:	bf00      	nop
 800ff28:	00030d40 	.word	0x00030d40

0800ff2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ff30:	4904      	ldr	r1, [pc, #16]	; (800ff44 <MX_FATFS_Init+0x18>)
 800ff32:	4805      	ldr	r0, [pc, #20]	; (800ff48 <MX_FATFS_Init+0x1c>)
 800ff34:	f001 fed2 	bl	8011cdc <FATFS_LinkDriver>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	4b03      	ldr	r3, [pc, #12]	; (800ff4c <MX_FATFS_Init+0x20>)
 800ff3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ff40:	bf00      	nop
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	24000764 	.word	0x24000764
 800ff48:	08012824 	.word	0x08012824
 800ff4c:	24000760 	.word	0x24000760

0800ff50 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ff5a:	f000 f885 	bl	8010068 <BSP_SD_IsDetected>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d001      	beq.n	800ff68 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ff64:	2302      	movs	r3, #2
 800ff66:	e012      	b.n	800ff8e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ff68:	480b      	ldr	r0, [pc, #44]	; (800ff98 <BSP_SD_Init+0x48>)
 800ff6a:	f7f9 fdb5 	bl	8009ad8 <HAL_SD_Init>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ff72:	79fb      	ldrb	r3, [r7, #7]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d109      	bne.n	800ff8c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ff78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ff7c:	4806      	ldr	r0, [pc, #24]	; (800ff98 <BSP_SD_Init+0x48>)
 800ff7e:	f7fa fc59 	bl	800a834 <HAL_SD_ConfigWideBusOperation>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d001      	beq.n	800ff8c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ff8c:	79fb      	ldrb	r3, [r7, #7]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3708      	adds	r7, #8
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop
 800ff98:	24000484 	.word	0x24000484

0800ff9c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b086      	sub	sp, #24
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	68ba      	ldr	r2, [r7, #8]
 800ffb0:	68f9      	ldr	r1, [r7, #12]
 800ffb2:	4806      	ldr	r0, [pc, #24]	; (800ffcc <BSP_SD_ReadBlocks_DMA+0x30>)
 800ffb4:	f7f9 fea8 	bl	8009d08 <HAL_SD_ReadBlocks_DMA>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d001      	beq.n	800ffc2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ffc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3718      	adds	r7, #24
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	24000484 	.word	0x24000484

0800ffd0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	68f9      	ldr	r1, [r7, #12]
 800ffe6:	4806      	ldr	r0, [pc, #24]	; (8010000 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ffe8:	f7f9 ff36 	bl	8009e58 <HAL_SD_WriteBlocks_DMA>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d001      	beq.n	800fff6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fff2:	2301      	movs	r3, #1
 800fff4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fff6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3718      	adds	r7, #24
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	24000484 	.word	0x24000484

08010004 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010008:	4805      	ldr	r0, [pc, #20]	; (8010020 <BSP_SD_GetCardState+0x1c>)
 801000a:	f7fa fd23 	bl	800aa54 <HAL_SD_GetCardState>
 801000e:	4603      	mov	r3, r0
 8010010:	2b04      	cmp	r3, #4
 8010012:	bf14      	ite	ne
 8010014:	2301      	movne	r3, #1
 8010016:	2300      	moveq	r3, #0
 8010018:	b2db      	uxtb	r3, r3
}
 801001a:	4618      	mov	r0, r3
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	24000484 	.word	0x24000484

08010024 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801002c:	6879      	ldr	r1, [r7, #4]
 801002e:	4803      	ldr	r0, [pc, #12]	; (801003c <BSP_SD_GetCardInfo+0x18>)
 8010030:	f7fa fbd4 	bl	800a7dc <HAL_SD_GetCardInfo>
}
 8010034:	bf00      	nop
 8010036:	3708      	adds	r7, #8
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	24000484 	.word	0x24000484

08010040 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010048:	f000 f984 	bl	8010354 <BSP_SD_WriteCpltCallback>
}
 801004c:	bf00      	nop
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801005c:	f000 f986 	bl	801036c <BSP_SD_ReadCpltCallback>
}
 8010060:	bf00      	nop
 8010062:	3708      	adds	r7, #8
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801006e:	2301      	movs	r3, #1
 8010070:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8010072:	79fb      	ldrb	r3, [r7, #7]
 8010074:	b2db      	uxtb	r3, r3
}
 8010076:	4618      	mov	r0, r3
 8010078:	370c      	adds	r7, #12
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b084      	sub	sp, #16
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801008a:	f7f1 fc39 	bl	8001900 <HAL_GetTick>
 801008e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010090:	e006      	b.n	80100a0 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010092:	f7ff ffb7 	bl	8010004 <BSP_SD_GetCardState>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d101      	bne.n	80100a0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801009c:	2300      	movs	r3, #0
 801009e:	e009      	b.n	80100b4 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80100a0:	f7f1 fc2e 	bl	8001900 <HAL_GetTick>
 80100a4:	4602      	mov	r2, r0
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d8f0      	bhi.n	8010092 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80100b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3710      	adds	r7, #16
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	4603      	mov	r3, r0
 80100c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80100c6:	4b0b      	ldr	r3, [pc, #44]	; (80100f4 <SD_CheckStatus+0x38>)
 80100c8:	2201      	movs	r2, #1
 80100ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80100cc:	f7ff ff9a 	bl	8010004 <BSP_SD_GetCardState>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d107      	bne.n	80100e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80100d6:	4b07      	ldr	r3, [pc, #28]	; (80100f4 <SD_CheckStatus+0x38>)
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	f023 0301 	bic.w	r3, r3, #1
 80100e0:	b2da      	uxtb	r2, r3
 80100e2:	4b04      	ldr	r3, [pc, #16]	; (80100f4 <SD_CheckStatus+0x38>)
 80100e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80100e6:	4b03      	ldr	r3, [pc, #12]	; (80100f4 <SD_CheckStatus+0x38>)
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	b2db      	uxtb	r3, r3
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3708      	adds	r7, #8
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	24000021 	.word	0x24000021

080100f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4603      	mov	r3, r0
 8010100:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010102:	f7ff ff25 	bl	800ff50 <BSP_SD_Init>
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	d107      	bne.n	801011c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801010c:	79fb      	ldrb	r3, [r7, #7]
 801010e:	4618      	mov	r0, r3
 8010110:	f7ff ffd4 	bl	80100bc <SD_CheckStatus>
 8010114:	4603      	mov	r3, r0
 8010116:	461a      	mov	r2, r3
 8010118:	4b04      	ldr	r3, [pc, #16]	; (801012c <SD_initialize+0x34>)
 801011a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801011c:	4b03      	ldr	r3, [pc, #12]	; (801012c <SD_initialize+0x34>)
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	b2db      	uxtb	r3, r3
}
 8010122:	4618      	mov	r0, r3
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	24000021 	.word	0x24000021

08010130 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	4603      	mov	r3, r0
 8010138:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801013a:	79fb      	ldrb	r3, [r7, #7]
 801013c:	4618      	mov	r0, r3
 801013e:	f7ff ffbd 	bl	80100bc <SD_CheckStatus>
 8010142:	4603      	mov	r3, r0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3708      	adds	r7, #8
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b086      	sub	sp, #24
 8010150:	af00      	add	r7, sp, #0
 8010152:	60b9      	str	r1, [r7, #8]
 8010154:	607a      	str	r2, [r7, #4]
 8010156:	603b      	str	r3, [r7, #0]
 8010158:	4603      	mov	r3, r0
 801015a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801015c:	2301      	movs	r3, #1
 801015e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010160:	f247 5030 	movw	r0, #30000	; 0x7530
 8010164:	f7ff ff8d 	bl	8010082 <SD_CheckStatusWithTimeout>
 8010168:	4603      	mov	r3, r0
 801016a:	2b00      	cmp	r3, #0
 801016c:	da01      	bge.n	8010172 <SD_read+0x26>
  {
    return res;
 801016e:	7dfb      	ldrb	r3, [r7, #23]
 8010170:	e03b      	b.n	80101ea <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	6879      	ldr	r1, [r7, #4]
 8010176:	68b8      	ldr	r0, [r7, #8]
 8010178:	f7ff ff10 	bl	800ff9c <BSP_SD_ReadBlocks_DMA>
 801017c:	4603      	mov	r3, r0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d132      	bne.n	80101e8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010182:	4b1c      	ldr	r3, [pc, #112]	; (80101f4 <SD_read+0xa8>)
 8010184:	2200      	movs	r2, #0
 8010186:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010188:	f7f1 fbba 	bl	8001900 <HAL_GetTick>
 801018c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801018e:	bf00      	nop
 8010190:	4b18      	ldr	r3, [pc, #96]	; (80101f4 <SD_read+0xa8>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d108      	bne.n	80101aa <SD_read+0x5e>
 8010198:	f7f1 fbb2 	bl	8001900 <HAL_GetTick>
 801019c:	4602      	mov	r2, r0
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	1ad3      	subs	r3, r2, r3
 80101a2:	f247 522f 	movw	r2, #29999	; 0x752f
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d9f2      	bls.n	8010190 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80101aa:	4b12      	ldr	r3, [pc, #72]	; (80101f4 <SD_read+0xa8>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d102      	bne.n	80101b8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80101b2:	2301      	movs	r3, #1
 80101b4:	75fb      	strb	r3, [r7, #23]
 80101b6:	e017      	b.n	80101e8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80101b8:	4b0e      	ldr	r3, [pc, #56]	; (80101f4 <SD_read+0xa8>)
 80101ba:	2200      	movs	r2, #0
 80101bc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80101be:	f7f1 fb9f 	bl	8001900 <HAL_GetTick>
 80101c2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80101c4:	e007      	b.n	80101d6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80101c6:	f7ff ff1d 	bl	8010004 <BSP_SD_GetCardState>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d102      	bne.n	80101d6 <SD_read+0x8a>
          {
            res = RES_OK;
 80101d0:	2300      	movs	r3, #0
 80101d2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80101d4:	e008      	b.n	80101e8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80101d6:	f7f1 fb93 	bl	8001900 <HAL_GetTick>
 80101da:	4602      	mov	r2, r0
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	1ad3      	subs	r3, r2, r3
 80101e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d9ee      	bls.n	80101c6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80101e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3718      	adds	r7, #24
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	240001b8 	.word	0x240001b8

080101f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b086      	sub	sp, #24
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60b9      	str	r1, [r7, #8]
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	603b      	str	r3, [r7, #0]
 8010204:	4603      	mov	r3, r0
 8010206:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010208:	2301      	movs	r3, #1
 801020a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801020c:	4b24      	ldr	r3, [pc, #144]	; (80102a0 <SD_write+0xa8>)
 801020e:	2200      	movs	r2, #0
 8010210:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010212:	f247 5030 	movw	r0, #30000	; 0x7530
 8010216:	f7ff ff34 	bl	8010082 <SD_CheckStatusWithTimeout>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	da01      	bge.n	8010224 <SD_write+0x2c>
  {
    return res;
 8010220:	7dfb      	ldrb	r3, [r7, #23]
 8010222:	e038      	b.n	8010296 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010224:	683a      	ldr	r2, [r7, #0]
 8010226:	6879      	ldr	r1, [r7, #4]
 8010228:	68b8      	ldr	r0, [r7, #8]
 801022a:	f7ff fed1 	bl	800ffd0 <BSP_SD_WriteBlocks_DMA>
 801022e:	4603      	mov	r3, r0
 8010230:	2b00      	cmp	r3, #0
 8010232:	d12f      	bne.n	8010294 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010234:	f7f1 fb64 	bl	8001900 <HAL_GetTick>
 8010238:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801023a:	bf00      	nop
 801023c:	4b18      	ldr	r3, [pc, #96]	; (80102a0 <SD_write+0xa8>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d108      	bne.n	8010256 <SD_write+0x5e>
 8010244:	f7f1 fb5c 	bl	8001900 <HAL_GetTick>
 8010248:	4602      	mov	r2, r0
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010252:	4293      	cmp	r3, r2
 8010254:	d9f2      	bls.n	801023c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010256:	4b12      	ldr	r3, [pc, #72]	; (80102a0 <SD_write+0xa8>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d102      	bne.n	8010264 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801025e:	2301      	movs	r3, #1
 8010260:	75fb      	strb	r3, [r7, #23]
 8010262:	e017      	b.n	8010294 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010264:	4b0e      	ldr	r3, [pc, #56]	; (80102a0 <SD_write+0xa8>)
 8010266:	2200      	movs	r2, #0
 8010268:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801026a:	f7f1 fb49 	bl	8001900 <HAL_GetTick>
 801026e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010270:	e007      	b.n	8010282 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010272:	f7ff fec7 	bl	8010004 <BSP_SD_GetCardState>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d102      	bne.n	8010282 <SD_write+0x8a>
          {
            res = RES_OK;
 801027c:	2300      	movs	r3, #0
 801027e:	75fb      	strb	r3, [r7, #23]
            break;
 8010280:	e008      	b.n	8010294 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010282:	f7f1 fb3d 	bl	8001900 <HAL_GetTick>
 8010286:	4602      	mov	r2, r0
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	1ad3      	subs	r3, r2, r3
 801028c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010290:	4293      	cmp	r3, r2
 8010292:	d9ee      	bls.n	8010272 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010294:	7dfb      	ldrb	r3, [r7, #23]
}
 8010296:	4618      	mov	r0, r3
 8010298:	3718      	adds	r7, #24
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	240001b4 	.word	0x240001b4

080102a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b08c      	sub	sp, #48	; 0x30
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	4603      	mov	r3, r0
 80102ac:	603a      	str	r2, [r7, #0]
 80102ae:	71fb      	strb	r3, [r7, #7]
 80102b0:	460b      	mov	r3, r1
 80102b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80102b4:	2301      	movs	r3, #1
 80102b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80102ba:	4b25      	ldr	r3, [pc, #148]	; (8010350 <SD_ioctl+0xac>)
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	f003 0301 	and.w	r3, r3, #1
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d001      	beq.n	80102cc <SD_ioctl+0x28>
 80102c8:	2303      	movs	r3, #3
 80102ca:	e03c      	b.n	8010346 <SD_ioctl+0xa2>

  switch (cmd)
 80102cc:	79bb      	ldrb	r3, [r7, #6]
 80102ce:	2b03      	cmp	r3, #3
 80102d0:	d834      	bhi.n	801033c <SD_ioctl+0x98>
 80102d2:	a201      	add	r2, pc, #4	; (adr r2, 80102d8 <SD_ioctl+0x34>)
 80102d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102d8:	080102e9 	.word	0x080102e9
 80102dc:	080102f1 	.word	0x080102f1
 80102e0:	08010309 	.word	0x08010309
 80102e4:	08010323 	.word	0x08010323
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80102e8:	2300      	movs	r3, #0
 80102ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80102ee:	e028      	b.n	8010342 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80102f0:	f107 0308 	add.w	r3, r7, #8
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7ff fe95 	bl	8010024 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80102fa:	6a3a      	ldr	r2, [r7, #32]
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010300:	2300      	movs	r3, #0
 8010302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010306:	e01c      	b.n	8010342 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010308:	f107 0308 	add.w	r3, r7, #8
 801030c:	4618      	mov	r0, r3
 801030e:	f7ff fe89 	bl	8010024 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010314:	b29a      	uxth	r2, r3
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801031a:	2300      	movs	r3, #0
 801031c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010320:	e00f      	b.n	8010342 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010322:	f107 0308 	add.w	r3, r7, #8
 8010326:	4618      	mov	r0, r3
 8010328:	f7ff fe7c 	bl	8010024 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032e:	0a5a      	lsrs	r2, r3, #9
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010334:	2300      	movs	r3, #0
 8010336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801033a:	e002      	b.n	8010342 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801033c:	2304      	movs	r3, #4
 801033e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010346:	4618      	mov	r0, r3
 8010348:	3730      	adds	r7, #48	; 0x30
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	24000021 	.word	0x24000021

08010354 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010354:	b480      	push	{r7}
 8010356:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010358:	4b03      	ldr	r3, [pc, #12]	; (8010368 <BSP_SD_WriteCpltCallback+0x14>)
 801035a:	2201      	movs	r2, #1
 801035c:	601a      	str	r2, [r3, #0]
}
 801035e:	bf00      	nop
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr
 8010368:	240001b4 	.word	0x240001b4

0801036c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801036c:	b480      	push	{r7}
 801036e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010370:	4b03      	ldr	r3, [pc, #12]	; (8010380 <BSP_SD_ReadCpltCallback+0x14>)
 8010372:	2201      	movs	r2, #1
 8010374:	601a      	str	r2, [r3, #0]
}
 8010376:	bf00      	nop
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr
 8010380:	240001b8 	.word	0x240001b8

08010384 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010390:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010394:	f002 f986 	bl	80126a4 <USBD_static_malloc>
 8010398:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d105      	bne.n	80103ac <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80103a8:	2302      	movs	r3, #2
 80103aa:	e066      	b.n	801047a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	68fa      	ldr	r2, [r7, #12]
 80103b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	7c1b      	ldrb	r3, [r3, #16]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d119      	bne.n	80103f0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80103bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103c0:	2202      	movs	r2, #2
 80103c2:	2181      	movs	r1, #129	; 0x81
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f002 f84a 	bl	801245e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2201      	movs	r2, #1
 80103ce:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80103d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103d4:	2202      	movs	r2, #2
 80103d6:	2101      	movs	r1, #1
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f002 f840 	bl	801245e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2201      	movs	r2, #1
 80103e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2210      	movs	r2, #16
 80103ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80103ee:	e016      	b.n	801041e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80103f0:	2340      	movs	r3, #64	; 0x40
 80103f2:	2202      	movs	r2, #2
 80103f4:	2181      	movs	r1, #129	; 0x81
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f002 f831 	bl	801245e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2201      	movs	r2, #1
 8010400:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010402:	2340      	movs	r3, #64	; 0x40
 8010404:	2202      	movs	r2, #2
 8010406:	2101      	movs	r1, #1
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f002 f828 	bl	801245e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2201      	movs	r2, #1
 8010412:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2210      	movs	r2, #16
 801041a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801041e:	2308      	movs	r3, #8
 8010420:	2203      	movs	r2, #3
 8010422:	2182      	movs	r1, #130	; 0x82
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f002 f81a 	bl	801245e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2201      	movs	r2, #1
 801042e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2200      	movs	r2, #0
 8010440:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2200      	movs	r2, #0
 8010448:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7c1b      	ldrb	r3, [r3, #16]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d109      	bne.n	8010468 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801045a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801045e:	2101      	movs	r1, #1
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f002 f8eb 	bl	801263c <USBD_LL_PrepareReceive>
 8010466:	e007      	b.n	8010478 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801046e:	2340      	movs	r3, #64	; 0x40
 8010470:	2101      	movs	r1, #1
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f002 f8e2 	bl	801263c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010478:	2300      	movs	r3, #0
}
 801047a:	4618      	mov	r0, r3
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010482:	b580      	push	{r7, lr}
 8010484:	b082      	sub	sp, #8
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
 801048a:	460b      	mov	r3, r1
 801048c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801048e:	2181      	movs	r1, #129	; 0x81
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f002 f80a 	bl	80124aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2200      	movs	r2, #0
 801049a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801049c:	2101      	movs	r1, #1
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f002 f803 	bl	80124aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80104ac:	2182      	movs	r1, #130	; 0x82
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f001 fffb 	bl	80124aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2200      	movs	r2, #0
 80104b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00e      	beq.n	80104ec <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104de:	4618      	mov	r0, r3
 80104e0:	f002 f8ee 	bl	80126c0 <USBD_static_free>
    pdev->pClassData = NULL;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3708      	adds	r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
	...

080104f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b086      	sub	sp, #24
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010508:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801050a:	2300      	movs	r3, #0
 801050c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801050e:	2300      	movs	r3, #0
 8010510:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010512:	2300      	movs	r3, #0
 8010514:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d101      	bne.n	8010520 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801051c:	2303      	movs	r3, #3
 801051e:	e0af      	b.n	8010680 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010528:	2b00      	cmp	r3, #0
 801052a:	d03f      	beq.n	80105ac <USBD_CDC_Setup+0xb4>
 801052c:	2b20      	cmp	r3, #32
 801052e:	f040 809f 	bne.w	8010670 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	88db      	ldrh	r3, [r3, #6]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d02e      	beq.n	8010598 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	b25b      	sxtb	r3, r3
 8010540:	2b00      	cmp	r3, #0
 8010542:	da16      	bge.n	8010572 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010550:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010552:	683a      	ldr	r2, [r7, #0]
 8010554:	88d2      	ldrh	r2, [r2, #6]
 8010556:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	88db      	ldrh	r3, [r3, #6]
 801055c:	2b07      	cmp	r3, #7
 801055e:	bf28      	it	cs
 8010560:	2307      	movcs	r3, #7
 8010562:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	89fa      	ldrh	r2, [r7, #14]
 8010568:	4619      	mov	r1, r3
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f001 fae9 	bl	8011b42 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010570:	e085      	b.n	801067e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	785a      	ldrb	r2, [r3, #1]
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	88db      	ldrh	r3, [r3, #6]
 8010580:	b2da      	uxtb	r2, r3
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010588:	6939      	ldr	r1, [r7, #16]
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	88db      	ldrh	r3, [r3, #6]
 801058e:	461a      	mov	r2, r3
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f001 fb02 	bl	8011b9a <USBD_CtlPrepareRx>
      break;
 8010596:	e072      	b.n	801067e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	683a      	ldr	r2, [r7, #0]
 80105a2:	7850      	ldrb	r0, [r2, #1]
 80105a4:	2200      	movs	r2, #0
 80105a6:	6839      	ldr	r1, [r7, #0]
 80105a8:	4798      	blx	r3
      break;
 80105aa:	e068      	b.n	801067e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	785b      	ldrb	r3, [r3, #1]
 80105b0:	2b0b      	cmp	r3, #11
 80105b2:	d852      	bhi.n	801065a <USBD_CDC_Setup+0x162>
 80105b4:	a201      	add	r2, pc, #4	; (adr r2, 80105bc <USBD_CDC_Setup+0xc4>)
 80105b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ba:	bf00      	nop
 80105bc:	080105ed 	.word	0x080105ed
 80105c0:	08010669 	.word	0x08010669
 80105c4:	0801065b 	.word	0x0801065b
 80105c8:	0801065b 	.word	0x0801065b
 80105cc:	0801065b 	.word	0x0801065b
 80105d0:	0801065b 	.word	0x0801065b
 80105d4:	0801065b 	.word	0x0801065b
 80105d8:	0801065b 	.word	0x0801065b
 80105dc:	0801065b 	.word	0x0801065b
 80105e0:	0801065b 	.word	0x0801065b
 80105e4:	08010617 	.word	0x08010617
 80105e8:	08010641 	.word	0x08010641
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b03      	cmp	r3, #3
 80105f6:	d107      	bne.n	8010608 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80105f8:	f107 030a 	add.w	r3, r7, #10
 80105fc:	2202      	movs	r2, #2
 80105fe:	4619      	mov	r1, r3
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f001 fa9e 	bl	8011b42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010606:	e032      	b.n	801066e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f001 fa28 	bl	8011a60 <USBD_CtlError>
            ret = USBD_FAIL;
 8010610:	2303      	movs	r3, #3
 8010612:	75fb      	strb	r3, [r7, #23]
          break;
 8010614:	e02b      	b.n	801066e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801061c:	b2db      	uxtb	r3, r3
 801061e:	2b03      	cmp	r3, #3
 8010620:	d107      	bne.n	8010632 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010622:	f107 030d 	add.w	r3, r7, #13
 8010626:	2201      	movs	r2, #1
 8010628:	4619      	mov	r1, r3
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f001 fa89 	bl	8011b42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010630:	e01d      	b.n	801066e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010632:	6839      	ldr	r1, [r7, #0]
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f001 fa13 	bl	8011a60 <USBD_CtlError>
            ret = USBD_FAIL;
 801063a:	2303      	movs	r3, #3
 801063c:	75fb      	strb	r3, [r7, #23]
          break;
 801063e:	e016      	b.n	801066e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010646:	b2db      	uxtb	r3, r3
 8010648:	2b03      	cmp	r3, #3
 801064a:	d00f      	beq.n	801066c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801064c:	6839      	ldr	r1, [r7, #0]
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f001 fa06 	bl	8011a60 <USBD_CtlError>
            ret = USBD_FAIL;
 8010654:	2303      	movs	r3, #3
 8010656:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010658:	e008      	b.n	801066c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801065a:	6839      	ldr	r1, [r7, #0]
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f001 f9ff 	bl	8011a60 <USBD_CtlError>
          ret = USBD_FAIL;
 8010662:	2303      	movs	r3, #3
 8010664:	75fb      	strb	r3, [r7, #23]
          break;
 8010666:	e002      	b.n	801066e <USBD_CDC_Setup+0x176>
          break;
 8010668:	bf00      	nop
 801066a:	e008      	b.n	801067e <USBD_CDC_Setup+0x186>
          break;
 801066c:	bf00      	nop
      }
      break;
 801066e:	e006      	b.n	801067e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010670:	6839      	ldr	r1, [r7, #0]
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f001 f9f4 	bl	8011a60 <USBD_CtlError>
      ret = USBD_FAIL;
 8010678:	2303      	movs	r3, #3
 801067a:	75fb      	strb	r3, [r7, #23]
      break;
 801067c:	bf00      	nop
  }

  return (uint8_t)ret;
 801067e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010680:	4618      	mov	r0, r3
 8010682:	3718      	adds	r7, #24
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	460b      	mov	r3, r1
 8010692:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801069a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d101      	bne.n	80106aa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80106a6:	2303      	movs	r3, #3
 80106a8:	e04f      	b.n	801074a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80106b2:	78fa      	ldrb	r2, [r7, #3]
 80106b4:	6879      	ldr	r1, [r7, #4]
 80106b6:	4613      	mov	r3, r2
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	4413      	add	r3, r2
 80106bc:	009b      	lsls	r3, r3, #2
 80106be:	440b      	add	r3, r1
 80106c0:	3318      	adds	r3, #24
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d029      	beq.n	801071c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80106c8:	78fa      	ldrb	r2, [r7, #3]
 80106ca:	6879      	ldr	r1, [r7, #4]
 80106cc:	4613      	mov	r3, r2
 80106ce:	009b      	lsls	r3, r3, #2
 80106d0:	4413      	add	r3, r2
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	440b      	add	r3, r1
 80106d6:	3318      	adds	r3, #24
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	78f9      	ldrb	r1, [r7, #3]
 80106dc:	68f8      	ldr	r0, [r7, #12]
 80106de:	460b      	mov	r3, r1
 80106e0:	00db      	lsls	r3, r3, #3
 80106e2:	1a5b      	subs	r3, r3, r1
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	4403      	add	r3, r0
 80106e8:	3344      	adds	r3, #68	; 0x44
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80106f0:	fb03 f301 	mul.w	r3, r3, r1
 80106f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d110      	bne.n	801071c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80106fa:	78fa      	ldrb	r2, [r7, #3]
 80106fc:	6879      	ldr	r1, [r7, #4]
 80106fe:	4613      	mov	r3, r2
 8010700:	009b      	lsls	r3, r3, #2
 8010702:	4413      	add	r3, r2
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	440b      	add	r3, r1
 8010708:	3318      	adds	r3, #24
 801070a:	2200      	movs	r2, #0
 801070c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801070e:	78f9      	ldrb	r1, [r7, #3]
 8010710:	2300      	movs	r3, #0
 8010712:	2200      	movs	r2, #0
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f001 ff70 	bl	80125fa <USBD_LL_Transmit>
 801071a:	e015      	b.n	8010748 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	2200      	movs	r2, #0
 8010720:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00b      	beq.n	8010748 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010736:	691b      	ldr	r3, [r3, #16]
 8010738:	68ba      	ldr	r2, [r7, #8]
 801073a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010744:	78fa      	ldrb	r2, [r7, #3]
 8010746:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010748:	2300      	movs	r3, #0
}
 801074a:	4618      	mov	r0, r3
 801074c:	3710      	adds	r7, #16
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b084      	sub	sp, #16
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	460b      	mov	r3, r1
 801075c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010764:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801076c:	2b00      	cmp	r3, #0
 801076e:	d101      	bne.n	8010774 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010770:	2303      	movs	r3, #3
 8010772:	e015      	b.n	80107a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010774:	78fb      	ldrb	r3, [r7, #3]
 8010776:	4619      	mov	r1, r3
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f001 ff80 	bl	801267e <USBD_LL_GetRxDataSize>
 801077e:	4602      	mov	r2, r0
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801079a:	4611      	mov	r1, r2
 801079c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801079e:	2300      	movs	r3, #0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3710      	adds	r7, #16
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d101      	bne.n	80107c2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80107be:	2303      	movs	r3, #3
 80107c0:	e01b      	b.n	80107fa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d015      	beq.n	80107f8 <USBD_CDC_EP0_RxReady+0x50>
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80107d2:	2bff      	cmp	r3, #255	; 0xff
 80107d4:	d010      	beq.n	80107f8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107dc:	689b      	ldr	r3, [r3, #8]
 80107de:	68fa      	ldr	r2, [r7, #12]
 80107e0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80107e4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80107ec:	b292      	uxth	r2, r2
 80107ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	22ff      	movs	r2, #255	; 0xff
 80107f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80107f8:	2300      	movs	r3, #0
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
	...

08010804 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2243      	movs	r2, #67	; 0x43
 8010810:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010812:	4b03      	ldr	r3, [pc, #12]	; (8010820 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010814:	4618      	mov	r0, r3
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr
 8010820:	240000ac 	.word	0x240000ac

08010824 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2243      	movs	r2, #67	; 0x43
 8010830:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010832:	4b03      	ldr	r3, [pc, #12]	; (8010840 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010834:	4618      	mov	r0, r3
 8010836:	370c      	adds	r7, #12
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr
 8010840:	24000068 	.word	0x24000068

08010844 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2243      	movs	r2, #67	; 0x43
 8010850:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010852:	4b03      	ldr	r3, [pc, #12]	; (8010860 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010854:	4618      	mov	r0, r3
 8010856:	370c      	adds	r7, #12
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr
 8010860:	240000f0 	.word	0x240000f0

08010864 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	220a      	movs	r2, #10
 8010870:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010872:	4b03      	ldr	r3, [pc, #12]	; (8010880 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010874:	4618      	mov	r0, r3
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr
 8010880:	24000024 	.word	0x24000024

08010884 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d101      	bne.n	8010898 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010894:	2303      	movs	r3, #3
 8010896:	e004      	b.n	80108a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	370c      	adds	r7, #12
 80108a6:	46bd      	mov	sp, r7
 80108a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ac:	4770      	bx	lr

080108ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80108ae:	b480      	push	{r7}
 80108b0:	b087      	sub	sp, #28
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	60f8      	str	r0, [r7, #12]
 80108b6:	60b9      	str	r1, [r7, #8]
 80108b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108c0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d101      	bne.n	80108cc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80108c8:	2303      	movs	r3, #3
 80108ca:	e008      	b.n	80108de <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	687a      	ldr	r2, [r7, #4]
 80108d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80108dc:	2300      	movs	r3, #0
}
 80108de:	4618      	mov	r0, r3
 80108e0:	371c      	adds	r7, #28
 80108e2:	46bd      	mov	sp, r7
 80108e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e8:	4770      	bx	lr

080108ea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80108ea:	b480      	push	{r7}
 80108ec:	b085      	sub	sp, #20
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d101      	bne.n	8010906 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010902:	2303      	movs	r3, #3
 8010904:	e004      	b.n	8010910 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	683a      	ldr	r2, [r7, #0]
 801090a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	3714      	adds	r7, #20
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b084      	sub	sp, #16
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801092a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010936:	2303      	movs	r3, #3
 8010938:	e016      	b.n	8010968 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	7c1b      	ldrb	r3, [r3, #16]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d109      	bne.n	8010956 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010948:	f44f 7300 	mov.w	r3, #512	; 0x200
 801094c:	2101      	movs	r1, #1
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f001 fe74 	bl	801263c <USBD_LL_PrepareReceive>
 8010954:	e007      	b.n	8010966 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801095c:	2340      	movs	r3, #64	; 0x40
 801095e:	2101      	movs	r1, #1
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f001 fe6b 	bl	801263c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010966:	2300      	movs	r3, #0
}
 8010968:	4618      	mov	r0, r3
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b086      	sub	sp, #24
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	4613      	mov	r3, r2
 801097c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d101      	bne.n	8010988 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010984:	2303      	movs	r3, #3
 8010986:	e01f      	b.n	80109c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2200      	movs	r2, #0
 801098c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2200      	movs	r2, #0
 8010994:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2200      	movs	r2, #0
 801099c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d003      	beq.n	80109ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2201      	movs	r2, #1
 80109b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	79fa      	ldrb	r2, [r7, #7]
 80109ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f001 fce3 	bl	8012388 <USBD_LL_Init>
 80109c2:	4603      	mov	r3, r0
 80109c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80109c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3718      	adds	r7, #24
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80109da:	2300      	movs	r3, #0
 80109dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d101      	bne.n	80109e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80109e4:	2303      	movs	r3, #3
 80109e6:	e016      	b.n	8010a16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	683a      	ldr	r2, [r7, #0]
 80109ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00b      	beq.n	8010a14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a04:	f107 020e 	add.w	r2, r7, #14
 8010a08:	4610      	mov	r0, r2
 8010a0a:	4798      	blx	r3
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010a14:	2300      	movs	r3, #0
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3710      	adds	r7, #16
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}

08010a1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010a1e:	b580      	push	{r7, lr}
 8010a20:	b082      	sub	sp, #8
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f001 fcfe 	bl	8012428 <USBD_LL_Start>
 8010a2c:	4603      	mov	r3, r0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}

08010a36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010a36:	b480      	push	{r7}
 8010a38:	b083      	sub	sp, #12
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010a3e:	2300      	movs	r3, #0
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	460b      	mov	r3, r1
 8010a56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d009      	beq.n	8010a7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	78fa      	ldrb	r2, [r7, #3]
 8010a70:	4611      	mov	r1, r2
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	4798      	blx	r3
 8010a76:	4603      	mov	r3, r0
 8010a78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3710      	adds	r7, #16
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d007      	beq.n	8010aaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	78fa      	ldrb	r2, [r7, #3]
 8010aa4:	4611      	mov	r1, r2
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	4798      	blx	r3
  }

  return USBD_OK;
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3708      	adds	r7, #8
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010ac4:	6839      	ldr	r1, [r7, #0]
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f000 ff90 	bl	80119ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010ada:	461a      	mov	r2, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010ae8:	f003 031f 	and.w	r3, r3, #31
 8010aec:	2b02      	cmp	r3, #2
 8010aee:	d01a      	beq.n	8010b26 <USBD_LL_SetupStage+0x72>
 8010af0:	2b02      	cmp	r3, #2
 8010af2:	d822      	bhi.n	8010b3a <USBD_LL_SetupStage+0x86>
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d002      	beq.n	8010afe <USBD_LL_SetupStage+0x4a>
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d00a      	beq.n	8010b12 <USBD_LL_SetupStage+0x5e>
 8010afc:	e01d      	b.n	8010b3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b04:	4619      	mov	r1, r3
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 fa62 	bl	8010fd0 <USBD_StdDevReq>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8010b10:	e020      	b.n	8010b54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b18:	4619      	mov	r1, r3
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 fac6 	bl	80110ac <USBD_StdItfReq>
 8010b20:	4603      	mov	r3, r0
 8010b22:	73fb      	strb	r3, [r7, #15]
      break;
 8010b24:	e016      	b.n	8010b54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 fb05 	bl	801113e <USBD_StdEPReq>
 8010b34:	4603      	mov	r3, r0
 8010b36:	73fb      	strb	r3, [r7, #15]
      break;
 8010b38:	e00c      	b.n	8010b54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010b40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	4619      	mov	r1, r3
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f001 fccd 	bl	80124e8 <USBD_LL_StallEP>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	73fb      	strb	r3, [r7, #15]
      break;
 8010b52:	bf00      	nop
  }

  return ret;
 8010b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b086      	sub	sp, #24
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	60f8      	str	r0, [r7, #12]
 8010b66:	460b      	mov	r3, r1
 8010b68:	607a      	str	r2, [r7, #4]
 8010b6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010b6c:	7afb      	ldrb	r3, [r7, #11]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d138      	bne.n	8010be4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010b78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010b80:	2b03      	cmp	r3, #3
 8010b82:	d14a      	bne.n	8010c1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	689a      	ldr	r2, [r3, #8]
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d913      	bls.n	8010bb8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	689a      	ldr	r2, [r3, #8]
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	1ad2      	subs	r2, r2, r3
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	68da      	ldr	r2, [r3, #12]
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	689b      	ldr	r3, [r3, #8]
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	bf28      	it	cs
 8010baa:	4613      	movcs	r3, r2
 8010bac:	461a      	mov	r2, r3
 8010bae:	6879      	ldr	r1, [r7, #4]
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	f001 f80f 	bl	8011bd4 <USBD_CtlContinueRx>
 8010bb6:	e030      	b.n	8010c1a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d10b      	bne.n	8010bdc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bca:	691b      	ldr	r3, [r3, #16]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d005      	beq.n	8010bdc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bd6:	691b      	ldr	r3, [r3, #16]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010bdc:	68f8      	ldr	r0, [r7, #12]
 8010bde:	f001 f80a 	bl	8011bf6 <USBD_CtlSendStatus>
 8010be2:	e01a      	b.n	8010c1a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	2b03      	cmp	r3, #3
 8010bee:	d114      	bne.n	8010c1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bf6:	699b      	ldr	r3, [r3, #24]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d00e      	beq.n	8010c1a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c02:	699b      	ldr	r3, [r3, #24]
 8010c04:	7afa      	ldrb	r2, [r7, #11]
 8010c06:	4611      	mov	r1, r2
 8010c08:	68f8      	ldr	r0, [r7, #12]
 8010c0a:	4798      	blx	r3
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010c10:	7dfb      	ldrb	r3, [r7, #23]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d001      	beq.n	8010c1a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010c16:	7dfb      	ldrb	r3, [r7, #23]
 8010c18:	e000      	b.n	8010c1c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010c1a:	2300      	movs	r3, #0
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3718      	adds	r7, #24
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b086      	sub	sp, #24
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	60f8      	str	r0, [r7, #12]
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	607a      	str	r2, [r7, #4]
 8010c30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010c32:	7afb      	ldrb	r3, [r7, #11]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d16b      	bne.n	8010d10 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	3314      	adds	r3, #20
 8010c3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010c44:	2b02      	cmp	r3, #2
 8010c46:	d156      	bne.n	8010cf6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	689a      	ldr	r2, [r3, #8]
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	68db      	ldr	r3, [r3, #12]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d914      	bls.n	8010c7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	689a      	ldr	r2, [r3, #8]
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	1ad2      	subs	r2, r2, r3
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	689b      	ldr	r3, [r3, #8]
 8010c66:	461a      	mov	r2, r3
 8010c68:	6879      	ldr	r1, [r7, #4]
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f000 ff84 	bl	8011b78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010c70:	2300      	movs	r3, #0
 8010c72:	2200      	movs	r2, #0
 8010c74:	2100      	movs	r1, #0
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f001 fce0 	bl	801263c <USBD_LL_PrepareReceive>
 8010c7c:	e03b      	b.n	8010cf6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	68da      	ldr	r2, [r3, #12]
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	689b      	ldr	r3, [r3, #8]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d11c      	bne.n	8010cc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	685a      	ldr	r2, [r3, #4]
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d316      	bcc.n	8010cc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	685a      	ldr	r2, [r3, #4]
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d20f      	bcs.n	8010cc4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	f000 ff65 	bl	8011b78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	2200      	movs	r2, #0
 8010cba:	2100      	movs	r1, #0
 8010cbc:	68f8      	ldr	r0, [r7, #12]
 8010cbe:	f001 fcbd 	bl	801263c <USBD_LL_PrepareReceive>
 8010cc2:	e018      	b.n	8010cf6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	2b03      	cmp	r3, #3
 8010cce:	d10b      	bne.n	8010ce8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d005      	beq.n	8010ce8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	68f8      	ldr	r0, [r7, #12]
 8010ce6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ce8:	2180      	movs	r1, #128	; 0x80
 8010cea:	68f8      	ldr	r0, [r7, #12]
 8010cec:	f001 fbfc 	bl	80124e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f000 ff93 	bl	8011c1c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d122      	bne.n	8010d46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f7ff fe98 	bl	8010a36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010d0e:	e01a      	b.n	8010d46 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	2b03      	cmp	r3, #3
 8010d1a:	d114      	bne.n	8010d46 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d22:	695b      	ldr	r3, [r3, #20]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00e      	beq.n	8010d46 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d2e:	695b      	ldr	r3, [r3, #20]
 8010d30:	7afa      	ldrb	r2, [r7, #11]
 8010d32:	4611      	mov	r1, r2
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	4798      	blx	r3
 8010d38:	4603      	mov	r3, r0
 8010d3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010d3c:	7dfb      	ldrb	r3, [r7, #23]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d001      	beq.n	8010d46 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010d42:	7dfb      	ldrb	r3, [r7, #23]
 8010d44:	e000      	b.n	8010d48 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010d46:	2300      	movs	r3, #0
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3718      	adds	r7, #24
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d101      	bne.n	8010d84 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010d80:	2303      	movs	r3, #3
 8010d82:	e02f      	b.n	8010de4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00f      	beq.n	8010dae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d009      	beq.n	8010dae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	6852      	ldr	r2, [r2, #4]
 8010da6:	b2d2      	uxtb	r2, r2
 8010da8:	4611      	mov	r1, r2
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010dae:	2340      	movs	r3, #64	; 0x40
 8010db0:	2200      	movs	r2, #0
 8010db2:	2100      	movs	r1, #0
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f001 fb52 	bl	801245e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2240      	movs	r2, #64	; 0x40
 8010dc6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010dca:	2340      	movs	r3, #64	; 0x40
 8010dcc:	2200      	movs	r2, #0
 8010dce:	2180      	movs	r1, #128	; 0x80
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f001 fb44 	bl	801245e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2240      	movs	r2, #64	; 0x40
 8010de0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	460b      	mov	r3, r1
 8010df6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	78fa      	ldrb	r2, [r7, #3]
 8010dfc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010dfe:	2300      	movs	r3, #0
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	370c      	adds	r7, #12
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2204      	movs	r2, #4
 8010e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	370c      	adds	r7, #12
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr

08010e38 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	2b04      	cmp	r3, #4
 8010e4a:	d106      	bne.n	8010e5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d101      	bne.n	8010e7e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010e7a:	2303      	movs	r3, #3
 8010e7c:	e012      	b.n	8010ea4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	2b03      	cmp	r3, #3
 8010e88:	d10b      	bne.n	8010ea2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e90:	69db      	ldr	r3, [r3, #28]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d005      	beq.n	8010ea2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e9c:	69db      	ldr	r3, [r3, #28]
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010ea2:	2300      	movs	r3, #0
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d101      	bne.n	8010ec6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010ec2:	2303      	movs	r3, #3
 8010ec4:	e014      	b.n	8010ef0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	2b03      	cmp	r3, #3
 8010ed0:	d10d      	bne.n	8010eee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ed8:	6a1b      	ldr	r3, [r3, #32]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d007      	beq.n	8010eee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ee4:	6a1b      	ldr	r3, [r3, #32]
 8010ee6:	78fa      	ldrb	r2, [r7, #3]
 8010ee8:	4611      	mov	r1, r2
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	460b      	mov	r3, r1
 8010f02:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d101      	bne.n	8010f12 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010f0e:	2303      	movs	r3, #3
 8010f10:	e014      	b.n	8010f3c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	2b03      	cmp	r3, #3
 8010f1c:	d10d      	bne.n	8010f3a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d007      	beq.n	8010f3a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f32:	78fa      	ldrb	r2, [r7, #3]
 8010f34:	4611      	mov	r1, r2
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f3a:	2300      	movs	r3, #0
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3708      	adds	r7, #8
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}

08010f44 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010f44:	b480      	push	{r7}
 8010f46:	b083      	sub	sp, #12
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr

08010f5a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010f5a:	b580      	push	{r7, lr}
 8010f5c:	b082      	sub	sp, #8
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2201      	movs	r2, #1
 8010f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d009      	beq.n	8010f88 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	6852      	ldr	r2, [r2, #4]
 8010f80:	b2d2      	uxtb	r2, r2
 8010f82:	4611      	mov	r1, r2
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	4798      	blx	r3
  }

  return USBD_OK;
 8010f88:	2300      	movs	r3, #0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3708      	adds	r7, #8
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010f92:	b480      	push	{r7}
 8010f94:	b087      	sub	sp, #28
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010fb0:	8a3b      	ldrh	r3, [r7, #16]
 8010fb2:	021b      	lsls	r3, r3, #8
 8010fb4:	b21a      	sxth	r2, r3
 8010fb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	b21b      	sxth	r3, r3
 8010fbe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010fc0:	89fb      	ldrh	r3, [r7, #14]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	371c      	adds	r7, #28
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr
	...

08010fd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b084      	sub	sp, #16
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010fe6:	2b40      	cmp	r3, #64	; 0x40
 8010fe8:	d005      	beq.n	8010ff6 <USBD_StdDevReq+0x26>
 8010fea:	2b40      	cmp	r3, #64	; 0x40
 8010fec:	d853      	bhi.n	8011096 <USBD_StdDevReq+0xc6>
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d00b      	beq.n	801100a <USBD_StdDevReq+0x3a>
 8010ff2:	2b20      	cmp	r3, #32
 8010ff4:	d14f      	bne.n	8011096 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ffc:	689b      	ldr	r3, [r3, #8]
 8010ffe:	6839      	ldr	r1, [r7, #0]
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	4798      	blx	r3
 8011004:	4603      	mov	r3, r0
 8011006:	73fb      	strb	r3, [r7, #15]
      break;
 8011008:	e04a      	b.n	80110a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	785b      	ldrb	r3, [r3, #1]
 801100e:	2b09      	cmp	r3, #9
 8011010:	d83b      	bhi.n	801108a <USBD_StdDevReq+0xba>
 8011012:	a201      	add	r2, pc, #4	; (adr r2, 8011018 <USBD_StdDevReq+0x48>)
 8011014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011018:	0801106d 	.word	0x0801106d
 801101c:	08011081 	.word	0x08011081
 8011020:	0801108b 	.word	0x0801108b
 8011024:	08011077 	.word	0x08011077
 8011028:	0801108b 	.word	0x0801108b
 801102c:	0801104b 	.word	0x0801104b
 8011030:	08011041 	.word	0x08011041
 8011034:	0801108b 	.word	0x0801108b
 8011038:	08011063 	.word	0x08011063
 801103c:	08011055 	.word	0x08011055
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011040:	6839      	ldr	r1, [r7, #0]
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 f9de 	bl	8011404 <USBD_GetDescriptor>
          break;
 8011048:	e024      	b.n	8011094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801104a:	6839      	ldr	r1, [r7, #0]
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f000 fb43 	bl	80116d8 <USBD_SetAddress>
          break;
 8011052:	e01f      	b.n	8011094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011054:	6839      	ldr	r1, [r7, #0]
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 fb82 	bl	8011760 <USBD_SetConfig>
 801105c:	4603      	mov	r3, r0
 801105e:	73fb      	strb	r3, [r7, #15]
          break;
 8011060:	e018      	b.n	8011094 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 fc21 	bl	80118ac <USBD_GetConfig>
          break;
 801106a:	e013      	b.n	8011094 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801106c:	6839      	ldr	r1, [r7, #0]
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 fc52 	bl	8011918 <USBD_GetStatus>
          break;
 8011074:	e00e      	b.n	8011094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011076:	6839      	ldr	r1, [r7, #0]
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 fc81 	bl	8011980 <USBD_SetFeature>
          break;
 801107e:	e009      	b.n	8011094 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011080:	6839      	ldr	r1, [r7, #0]
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 fc90 	bl	80119a8 <USBD_ClrFeature>
          break;
 8011088:	e004      	b.n	8011094 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801108a:	6839      	ldr	r1, [r7, #0]
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f000 fce7 	bl	8011a60 <USBD_CtlError>
          break;
 8011092:	bf00      	nop
      }
      break;
 8011094:	e004      	b.n	80110a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011096:	6839      	ldr	r1, [r7, #0]
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 fce1 	bl	8011a60 <USBD_CtlError>
      break;
 801109e:	bf00      	nop
  }

  return ret;
 80110a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3710      	adds	r7, #16
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop

080110ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110b6:	2300      	movs	r3, #0
 80110b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110c2:	2b40      	cmp	r3, #64	; 0x40
 80110c4:	d005      	beq.n	80110d2 <USBD_StdItfReq+0x26>
 80110c6:	2b40      	cmp	r3, #64	; 0x40
 80110c8:	d82f      	bhi.n	801112a <USBD_StdItfReq+0x7e>
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d001      	beq.n	80110d2 <USBD_StdItfReq+0x26>
 80110ce:	2b20      	cmp	r3, #32
 80110d0:	d12b      	bne.n	801112a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	3b01      	subs	r3, #1
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d81d      	bhi.n	801111c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	889b      	ldrh	r3, [r3, #4]
 80110e4:	b2db      	uxtb	r3, r3
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d813      	bhi.n	8011112 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110f0:	689b      	ldr	r3, [r3, #8]
 80110f2:	6839      	ldr	r1, [r7, #0]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	4798      	blx	r3
 80110f8:	4603      	mov	r3, r0
 80110fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	88db      	ldrh	r3, [r3, #6]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d110      	bne.n	8011126 <USBD_StdItfReq+0x7a>
 8011104:	7bfb      	ldrb	r3, [r7, #15]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d10d      	bne.n	8011126 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 fd73 	bl	8011bf6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011110:	e009      	b.n	8011126 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011112:	6839      	ldr	r1, [r7, #0]
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 fca3 	bl	8011a60 <USBD_CtlError>
          break;
 801111a:	e004      	b.n	8011126 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801111c:	6839      	ldr	r1, [r7, #0]
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 fc9e 	bl	8011a60 <USBD_CtlError>
          break;
 8011124:	e000      	b.n	8011128 <USBD_StdItfReq+0x7c>
          break;
 8011126:	bf00      	nop
      }
      break;
 8011128:	e004      	b.n	8011134 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801112a:	6839      	ldr	r1, [r7, #0]
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f000 fc97 	bl	8011a60 <USBD_CtlError>
      break;
 8011132:	bf00      	nop
  }

  return ret;
 8011134:	7bfb      	ldrb	r3, [r7, #15]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b084      	sub	sp, #16
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011148:	2300      	movs	r3, #0
 801114a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	889b      	ldrh	r3, [r3, #4]
 8011150:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801115a:	2b40      	cmp	r3, #64	; 0x40
 801115c:	d007      	beq.n	801116e <USBD_StdEPReq+0x30>
 801115e:	2b40      	cmp	r3, #64	; 0x40
 8011160:	f200 8145 	bhi.w	80113ee <USBD_StdEPReq+0x2b0>
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00c      	beq.n	8011182 <USBD_StdEPReq+0x44>
 8011168:	2b20      	cmp	r3, #32
 801116a:	f040 8140 	bne.w	80113ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011174:	689b      	ldr	r3, [r3, #8]
 8011176:	6839      	ldr	r1, [r7, #0]
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	4798      	blx	r3
 801117c:	4603      	mov	r3, r0
 801117e:	73fb      	strb	r3, [r7, #15]
      break;
 8011180:	e13a      	b.n	80113f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	785b      	ldrb	r3, [r3, #1]
 8011186:	2b03      	cmp	r3, #3
 8011188:	d007      	beq.n	801119a <USBD_StdEPReq+0x5c>
 801118a:	2b03      	cmp	r3, #3
 801118c:	f300 8129 	bgt.w	80113e2 <USBD_StdEPReq+0x2a4>
 8011190:	2b00      	cmp	r3, #0
 8011192:	d07f      	beq.n	8011294 <USBD_StdEPReq+0x156>
 8011194:	2b01      	cmp	r3, #1
 8011196:	d03c      	beq.n	8011212 <USBD_StdEPReq+0xd4>
 8011198:	e123      	b.n	80113e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	2b02      	cmp	r3, #2
 80111a4:	d002      	beq.n	80111ac <USBD_StdEPReq+0x6e>
 80111a6:	2b03      	cmp	r3, #3
 80111a8:	d016      	beq.n	80111d8 <USBD_StdEPReq+0x9a>
 80111aa:	e02c      	b.n	8011206 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111ac:	7bbb      	ldrb	r3, [r7, #14]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00d      	beq.n	80111ce <USBD_StdEPReq+0x90>
 80111b2:	7bbb      	ldrb	r3, [r7, #14]
 80111b4:	2b80      	cmp	r3, #128	; 0x80
 80111b6:	d00a      	beq.n	80111ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80111b8:	7bbb      	ldrb	r3, [r7, #14]
 80111ba:	4619      	mov	r1, r3
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f001 f993 	bl	80124e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80111c2:	2180      	movs	r1, #128	; 0x80
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f001 f98f 	bl	80124e8 <USBD_LL_StallEP>
 80111ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80111cc:	e020      	b.n	8011210 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80111ce:	6839      	ldr	r1, [r7, #0]
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f000 fc45 	bl	8011a60 <USBD_CtlError>
              break;
 80111d6:	e01b      	b.n	8011210 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	885b      	ldrh	r3, [r3, #2]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d10e      	bne.n	80111fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80111e0:	7bbb      	ldrb	r3, [r7, #14]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d00b      	beq.n	80111fe <USBD_StdEPReq+0xc0>
 80111e6:	7bbb      	ldrb	r3, [r7, #14]
 80111e8:	2b80      	cmp	r3, #128	; 0x80
 80111ea:	d008      	beq.n	80111fe <USBD_StdEPReq+0xc0>
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	88db      	ldrh	r3, [r3, #6]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d104      	bne.n	80111fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80111f4:	7bbb      	ldrb	r3, [r7, #14]
 80111f6:	4619      	mov	r1, r3
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f001 f975 	bl	80124e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 fcf9 	bl	8011bf6 <USBD_CtlSendStatus>

              break;
 8011204:	e004      	b.n	8011210 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011206:	6839      	ldr	r1, [r7, #0]
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f000 fc29 	bl	8011a60 <USBD_CtlError>
              break;
 801120e:	bf00      	nop
          }
          break;
 8011210:	e0ec      	b.n	80113ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011218:	b2db      	uxtb	r3, r3
 801121a:	2b02      	cmp	r3, #2
 801121c:	d002      	beq.n	8011224 <USBD_StdEPReq+0xe6>
 801121e:	2b03      	cmp	r3, #3
 8011220:	d016      	beq.n	8011250 <USBD_StdEPReq+0x112>
 8011222:	e030      	b.n	8011286 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011224:	7bbb      	ldrb	r3, [r7, #14]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d00d      	beq.n	8011246 <USBD_StdEPReq+0x108>
 801122a:	7bbb      	ldrb	r3, [r7, #14]
 801122c:	2b80      	cmp	r3, #128	; 0x80
 801122e:	d00a      	beq.n	8011246 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011230:	7bbb      	ldrb	r3, [r7, #14]
 8011232:	4619      	mov	r1, r3
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f001 f957 	bl	80124e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801123a:	2180      	movs	r1, #128	; 0x80
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f001 f953 	bl	80124e8 <USBD_LL_StallEP>
 8011242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011244:	e025      	b.n	8011292 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fc09 	bl	8011a60 <USBD_CtlError>
              break;
 801124e:	e020      	b.n	8011292 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	885b      	ldrh	r3, [r3, #2]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d11b      	bne.n	8011290 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011258:	7bbb      	ldrb	r3, [r7, #14]
 801125a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801125e:	2b00      	cmp	r3, #0
 8011260:	d004      	beq.n	801126c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011262:	7bbb      	ldrb	r3, [r7, #14]
 8011264:	4619      	mov	r1, r3
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f001 f95d 	bl	8012526 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f000 fcc2 	bl	8011bf6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011278:	689b      	ldr	r3, [r3, #8]
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	4798      	blx	r3
 8011280:	4603      	mov	r3, r0
 8011282:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011284:	e004      	b.n	8011290 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011286:	6839      	ldr	r1, [r7, #0]
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f000 fbe9 	bl	8011a60 <USBD_CtlError>
              break;
 801128e:	e000      	b.n	8011292 <USBD_StdEPReq+0x154>
              break;
 8011290:	bf00      	nop
          }
          break;
 8011292:	e0ab      	b.n	80113ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801129a:	b2db      	uxtb	r3, r3
 801129c:	2b02      	cmp	r3, #2
 801129e:	d002      	beq.n	80112a6 <USBD_StdEPReq+0x168>
 80112a0:	2b03      	cmp	r3, #3
 80112a2:	d032      	beq.n	801130a <USBD_StdEPReq+0x1cc>
 80112a4:	e097      	b.n	80113d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112a6:	7bbb      	ldrb	r3, [r7, #14]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d007      	beq.n	80112bc <USBD_StdEPReq+0x17e>
 80112ac:	7bbb      	ldrb	r3, [r7, #14]
 80112ae:	2b80      	cmp	r3, #128	; 0x80
 80112b0:	d004      	beq.n	80112bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80112b2:	6839      	ldr	r1, [r7, #0]
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f000 fbd3 	bl	8011a60 <USBD_CtlError>
                break;
 80112ba:	e091      	b.n	80113e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	da0b      	bge.n	80112dc <USBD_StdEPReq+0x19e>
 80112c4:	7bbb      	ldrb	r3, [r7, #14]
 80112c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112ca:	4613      	mov	r3, r2
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	4413      	add	r3, r2
 80112d0:	009b      	lsls	r3, r3, #2
 80112d2:	3310      	adds	r3, #16
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	4413      	add	r3, r2
 80112d8:	3304      	adds	r3, #4
 80112da:	e00b      	b.n	80112f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80112dc:	7bbb      	ldrb	r3, [r7, #14]
 80112de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112e2:	4613      	mov	r3, r2
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	4413      	add	r3, r2
 80112e8:	009b      	lsls	r3, r3, #2
 80112ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80112ee:	687a      	ldr	r2, [r7, #4]
 80112f0:	4413      	add	r3, r2
 80112f2:	3304      	adds	r3, #4
 80112f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	2200      	movs	r2, #0
 80112fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	2202      	movs	r2, #2
 8011300:	4619      	mov	r1, r3
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 fc1d 	bl	8011b42 <USBD_CtlSendData>
              break;
 8011308:	e06a      	b.n	80113e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801130a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801130e:	2b00      	cmp	r3, #0
 8011310:	da11      	bge.n	8011336 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011312:	7bbb      	ldrb	r3, [r7, #14]
 8011314:	f003 020f 	and.w	r2, r3, #15
 8011318:	6879      	ldr	r1, [r7, #4]
 801131a:	4613      	mov	r3, r2
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	4413      	add	r3, r2
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	440b      	add	r3, r1
 8011324:	3324      	adds	r3, #36	; 0x24
 8011326:	881b      	ldrh	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d117      	bne.n	801135c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801132c:	6839      	ldr	r1, [r7, #0]
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 fb96 	bl	8011a60 <USBD_CtlError>
                  break;
 8011334:	e054      	b.n	80113e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011336:	7bbb      	ldrb	r3, [r7, #14]
 8011338:	f003 020f 	and.w	r2, r3, #15
 801133c:	6879      	ldr	r1, [r7, #4]
 801133e:	4613      	mov	r3, r2
 8011340:	009b      	lsls	r3, r3, #2
 8011342:	4413      	add	r3, r2
 8011344:	009b      	lsls	r3, r3, #2
 8011346:	440b      	add	r3, r1
 8011348:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801134c:	881b      	ldrh	r3, [r3, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d104      	bne.n	801135c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f000 fb83 	bl	8011a60 <USBD_CtlError>
                  break;
 801135a:	e041      	b.n	80113e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801135c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011360:	2b00      	cmp	r3, #0
 8011362:	da0b      	bge.n	801137c <USBD_StdEPReq+0x23e>
 8011364:	7bbb      	ldrb	r3, [r7, #14]
 8011366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801136a:	4613      	mov	r3, r2
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	4413      	add	r3, r2
 8011370:	009b      	lsls	r3, r3, #2
 8011372:	3310      	adds	r3, #16
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	4413      	add	r3, r2
 8011378:	3304      	adds	r3, #4
 801137a:	e00b      	b.n	8011394 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801137c:	7bbb      	ldrb	r3, [r7, #14]
 801137e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011382:	4613      	mov	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801138e:	687a      	ldr	r2, [r7, #4]
 8011390:	4413      	add	r3, r2
 8011392:	3304      	adds	r3, #4
 8011394:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011396:	7bbb      	ldrb	r3, [r7, #14]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d002      	beq.n	80113a2 <USBD_StdEPReq+0x264>
 801139c:	7bbb      	ldrb	r3, [r7, #14]
 801139e:	2b80      	cmp	r3, #128	; 0x80
 80113a0:	d103      	bne.n	80113aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	2200      	movs	r2, #0
 80113a6:	601a      	str	r2, [r3, #0]
 80113a8:	e00e      	b.n	80113c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80113aa:	7bbb      	ldrb	r3, [r7, #14]
 80113ac:	4619      	mov	r1, r3
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f001 f8d8 	bl	8012564 <USBD_LL_IsStallEP>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d003      	beq.n	80113c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	2201      	movs	r2, #1
 80113be:	601a      	str	r2, [r3, #0]
 80113c0:	e002      	b.n	80113c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	2200      	movs	r2, #0
 80113c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	2202      	movs	r2, #2
 80113cc:	4619      	mov	r1, r3
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 fbb7 	bl	8011b42 <USBD_CtlSendData>
              break;
 80113d4:	e004      	b.n	80113e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80113d6:	6839      	ldr	r1, [r7, #0]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 fb41 	bl	8011a60 <USBD_CtlError>
              break;
 80113de:	bf00      	nop
          }
          break;
 80113e0:	e004      	b.n	80113ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80113e2:	6839      	ldr	r1, [r7, #0]
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 fb3b 	bl	8011a60 <USBD_CtlError>
          break;
 80113ea:	bf00      	nop
      }
      break;
 80113ec:	e004      	b.n	80113f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80113ee:	6839      	ldr	r1, [r7, #0]
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f000 fb35 	bl	8011a60 <USBD_CtlError>
      break;
 80113f6:	bf00      	nop
  }

  return ret;
 80113f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
	...

08011404 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801140e:	2300      	movs	r3, #0
 8011410:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011412:	2300      	movs	r3, #0
 8011414:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011416:	2300      	movs	r3, #0
 8011418:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	885b      	ldrh	r3, [r3, #2]
 801141e:	0a1b      	lsrs	r3, r3, #8
 8011420:	b29b      	uxth	r3, r3
 8011422:	3b01      	subs	r3, #1
 8011424:	2b06      	cmp	r3, #6
 8011426:	f200 8128 	bhi.w	801167a <USBD_GetDescriptor+0x276>
 801142a:	a201      	add	r2, pc, #4	; (adr r2, 8011430 <USBD_GetDescriptor+0x2c>)
 801142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011430:	0801144d 	.word	0x0801144d
 8011434:	08011465 	.word	0x08011465
 8011438:	080114a5 	.word	0x080114a5
 801143c:	0801167b 	.word	0x0801167b
 8011440:	0801167b 	.word	0x0801167b
 8011444:	0801161b 	.word	0x0801161b
 8011448:	08011647 	.word	0x08011647
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	7c12      	ldrb	r2, [r2, #16]
 8011458:	f107 0108 	add.w	r1, r7, #8
 801145c:	4610      	mov	r0, r2
 801145e:	4798      	blx	r3
 8011460:	60f8      	str	r0, [r7, #12]
      break;
 8011462:	e112      	b.n	801168a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	7c1b      	ldrb	r3, [r3, #16]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d10d      	bne.n	8011488 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011474:	f107 0208 	add.w	r2, r7, #8
 8011478:	4610      	mov	r0, r2
 801147a:	4798      	blx	r3
 801147c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	3301      	adds	r3, #1
 8011482:	2202      	movs	r2, #2
 8011484:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011486:	e100      	b.n	801168a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011490:	f107 0208 	add.w	r2, r7, #8
 8011494:	4610      	mov	r0, r2
 8011496:	4798      	blx	r3
 8011498:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	3301      	adds	r3, #1
 801149e:	2202      	movs	r2, #2
 80114a0:	701a      	strb	r2, [r3, #0]
      break;
 80114a2:	e0f2      	b.n	801168a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	885b      	ldrh	r3, [r3, #2]
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	2b05      	cmp	r3, #5
 80114ac:	f200 80ac 	bhi.w	8011608 <USBD_GetDescriptor+0x204>
 80114b0:	a201      	add	r2, pc, #4	; (adr r2, 80114b8 <USBD_GetDescriptor+0xb4>)
 80114b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114b6:	bf00      	nop
 80114b8:	080114d1 	.word	0x080114d1
 80114bc:	08011505 	.word	0x08011505
 80114c0:	08011539 	.word	0x08011539
 80114c4:	0801156d 	.word	0x0801156d
 80114c8:	080115a1 	.word	0x080115a1
 80114cc:	080115d5 	.word	0x080115d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d00b      	beq.n	80114f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	7c12      	ldrb	r2, [r2, #16]
 80114e8:	f107 0108 	add.w	r1, r7, #8
 80114ec:	4610      	mov	r0, r2
 80114ee:	4798      	blx	r3
 80114f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114f2:	e091      	b.n	8011618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80114f4:	6839      	ldr	r1, [r7, #0]
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f000 fab2 	bl	8011a60 <USBD_CtlError>
            err++;
 80114fc:	7afb      	ldrb	r3, [r7, #11]
 80114fe:	3301      	adds	r3, #1
 8011500:	72fb      	strb	r3, [r7, #11]
          break;
 8011502:	e089      	b.n	8011618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801150a:	689b      	ldr	r3, [r3, #8]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d00b      	beq.n	8011528 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011516:	689b      	ldr	r3, [r3, #8]
 8011518:	687a      	ldr	r2, [r7, #4]
 801151a:	7c12      	ldrb	r2, [r2, #16]
 801151c:	f107 0108 	add.w	r1, r7, #8
 8011520:	4610      	mov	r0, r2
 8011522:	4798      	blx	r3
 8011524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011526:	e077      	b.n	8011618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011528:	6839      	ldr	r1, [r7, #0]
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f000 fa98 	bl	8011a60 <USBD_CtlError>
            err++;
 8011530:	7afb      	ldrb	r3, [r7, #11]
 8011532:	3301      	adds	r3, #1
 8011534:	72fb      	strb	r3, [r7, #11]
          break;
 8011536:	e06f      	b.n	8011618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00b      	beq.n	801155c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	687a      	ldr	r2, [r7, #4]
 801154e:	7c12      	ldrb	r2, [r2, #16]
 8011550:	f107 0108 	add.w	r1, r7, #8
 8011554:	4610      	mov	r0, r2
 8011556:	4798      	blx	r3
 8011558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801155a:	e05d      	b.n	8011618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801155c:	6839      	ldr	r1, [r7, #0]
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f000 fa7e 	bl	8011a60 <USBD_CtlError>
            err++;
 8011564:	7afb      	ldrb	r3, [r7, #11]
 8011566:	3301      	adds	r3, #1
 8011568:	72fb      	strb	r3, [r7, #11]
          break;
 801156a:	e055      	b.n	8011618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011572:	691b      	ldr	r3, [r3, #16]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d00b      	beq.n	8011590 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801157e:	691b      	ldr	r3, [r3, #16]
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	7c12      	ldrb	r2, [r2, #16]
 8011584:	f107 0108 	add.w	r1, r7, #8
 8011588:	4610      	mov	r0, r2
 801158a:	4798      	blx	r3
 801158c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801158e:	e043      	b.n	8011618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011590:	6839      	ldr	r1, [r7, #0]
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f000 fa64 	bl	8011a60 <USBD_CtlError>
            err++;
 8011598:	7afb      	ldrb	r3, [r7, #11]
 801159a:	3301      	adds	r3, #1
 801159c:	72fb      	strb	r3, [r7, #11]
          break;
 801159e:	e03b      	b.n	8011618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115a6:	695b      	ldr	r3, [r3, #20]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d00b      	beq.n	80115c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115b2:	695b      	ldr	r3, [r3, #20]
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	7c12      	ldrb	r2, [r2, #16]
 80115b8:	f107 0108 	add.w	r1, r7, #8
 80115bc:	4610      	mov	r0, r2
 80115be:	4798      	blx	r3
 80115c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115c2:	e029      	b.n	8011618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80115c4:	6839      	ldr	r1, [r7, #0]
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f000 fa4a 	bl	8011a60 <USBD_CtlError>
            err++;
 80115cc:	7afb      	ldrb	r3, [r7, #11]
 80115ce:	3301      	adds	r3, #1
 80115d0:	72fb      	strb	r3, [r7, #11]
          break;
 80115d2:	e021      	b.n	8011618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115da:	699b      	ldr	r3, [r3, #24]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d00b      	beq.n	80115f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115e6:	699b      	ldr	r3, [r3, #24]
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	7c12      	ldrb	r2, [r2, #16]
 80115ec:	f107 0108 	add.w	r1, r7, #8
 80115f0:	4610      	mov	r0, r2
 80115f2:	4798      	blx	r3
 80115f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115f6:	e00f      	b.n	8011618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80115f8:	6839      	ldr	r1, [r7, #0]
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 fa30 	bl	8011a60 <USBD_CtlError>
            err++;
 8011600:	7afb      	ldrb	r3, [r7, #11]
 8011602:	3301      	adds	r3, #1
 8011604:	72fb      	strb	r3, [r7, #11]
          break;
 8011606:	e007      	b.n	8011618 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011608:	6839      	ldr	r1, [r7, #0]
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f000 fa28 	bl	8011a60 <USBD_CtlError>
          err++;
 8011610:	7afb      	ldrb	r3, [r7, #11]
 8011612:	3301      	adds	r3, #1
 8011614:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011616:	bf00      	nop
      }
      break;
 8011618:	e037      	b.n	801168a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	7c1b      	ldrb	r3, [r3, #16]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d109      	bne.n	8011636 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801162a:	f107 0208 	add.w	r2, r7, #8
 801162e:	4610      	mov	r0, r2
 8011630:	4798      	blx	r3
 8011632:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011634:	e029      	b.n	801168a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011636:	6839      	ldr	r1, [r7, #0]
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f000 fa11 	bl	8011a60 <USBD_CtlError>
        err++;
 801163e:	7afb      	ldrb	r3, [r7, #11]
 8011640:	3301      	adds	r3, #1
 8011642:	72fb      	strb	r3, [r7, #11]
      break;
 8011644:	e021      	b.n	801168a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	7c1b      	ldrb	r3, [r3, #16]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d10d      	bne.n	801166a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011656:	f107 0208 	add.w	r2, r7, #8
 801165a:	4610      	mov	r0, r2
 801165c:	4798      	blx	r3
 801165e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	3301      	adds	r3, #1
 8011664:	2207      	movs	r2, #7
 8011666:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011668:	e00f      	b.n	801168a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f000 f9f7 	bl	8011a60 <USBD_CtlError>
        err++;
 8011672:	7afb      	ldrb	r3, [r7, #11]
 8011674:	3301      	adds	r3, #1
 8011676:	72fb      	strb	r3, [r7, #11]
      break;
 8011678:	e007      	b.n	801168a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801167a:	6839      	ldr	r1, [r7, #0]
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f000 f9ef 	bl	8011a60 <USBD_CtlError>
      err++;
 8011682:	7afb      	ldrb	r3, [r7, #11]
 8011684:	3301      	adds	r3, #1
 8011686:	72fb      	strb	r3, [r7, #11]
      break;
 8011688:	bf00      	nop
  }

  if (err != 0U)
 801168a:	7afb      	ldrb	r3, [r7, #11]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d11e      	bne.n	80116ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	88db      	ldrh	r3, [r3, #6]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d016      	beq.n	80116c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011698:	893b      	ldrh	r3, [r7, #8]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00e      	beq.n	80116bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	88da      	ldrh	r2, [r3, #6]
 80116a2:	893b      	ldrh	r3, [r7, #8]
 80116a4:	4293      	cmp	r3, r2
 80116a6:	bf28      	it	cs
 80116a8:	4613      	movcs	r3, r2
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80116ae:	893b      	ldrh	r3, [r7, #8]
 80116b0:	461a      	mov	r2, r3
 80116b2:	68f9      	ldr	r1, [r7, #12]
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f000 fa44 	bl	8011b42 <USBD_CtlSendData>
 80116ba:	e009      	b.n	80116d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80116bc:	6839      	ldr	r1, [r7, #0]
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f000 f9ce 	bl	8011a60 <USBD_CtlError>
 80116c4:	e004      	b.n	80116d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f000 fa95 	bl	8011bf6 <USBD_CtlSendStatus>
 80116cc:	e000      	b.n	80116d0 <USBD_GetDescriptor+0x2cc>
    return;
 80116ce:	bf00      	nop
  }
}
 80116d0:	3710      	adds	r7, #16
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop

080116d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	889b      	ldrh	r3, [r3, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d131      	bne.n	801174e <USBD_SetAddress+0x76>
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	88db      	ldrh	r3, [r3, #6]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d12d      	bne.n	801174e <USBD_SetAddress+0x76>
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	885b      	ldrh	r3, [r3, #2]
 80116f6:	2b7f      	cmp	r3, #127	; 0x7f
 80116f8:	d829      	bhi.n	801174e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	885b      	ldrh	r3, [r3, #2]
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011704:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801170c:	b2db      	uxtb	r3, r3
 801170e:	2b03      	cmp	r3, #3
 8011710:	d104      	bne.n	801171c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011712:	6839      	ldr	r1, [r7, #0]
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f000 f9a3 	bl	8011a60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801171a:	e01d      	b.n	8011758 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	7bfa      	ldrb	r2, [r7, #15]
 8011720:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011724:	7bfb      	ldrb	r3, [r7, #15]
 8011726:	4619      	mov	r1, r3
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f000 ff47 	bl	80125bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 fa61 	bl	8011bf6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011734:	7bfb      	ldrb	r3, [r7, #15]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d004      	beq.n	8011744 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2202      	movs	r2, #2
 801173e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011742:	e009      	b.n	8011758 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2201      	movs	r2, #1
 8011748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801174c:	e004      	b.n	8011758 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801174e:	6839      	ldr	r1, [r7, #0]
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f000 f985 	bl	8011a60 <USBD_CtlError>
  }
}
 8011756:	bf00      	nop
 8011758:	bf00      	nop
 801175a:	3710      	adds	r7, #16
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801176a:	2300      	movs	r3, #0
 801176c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	885b      	ldrh	r3, [r3, #2]
 8011772:	b2da      	uxtb	r2, r3
 8011774:	4b4c      	ldr	r3, [pc, #304]	; (80118a8 <USBD_SetConfig+0x148>)
 8011776:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011778:	4b4b      	ldr	r3, [pc, #300]	; (80118a8 <USBD_SetConfig+0x148>)
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	2b01      	cmp	r3, #1
 801177e:	d905      	bls.n	801178c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011780:	6839      	ldr	r1, [r7, #0]
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f000 f96c 	bl	8011a60 <USBD_CtlError>
    return USBD_FAIL;
 8011788:	2303      	movs	r3, #3
 801178a:	e088      	b.n	801189e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011792:	b2db      	uxtb	r3, r3
 8011794:	2b02      	cmp	r3, #2
 8011796:	d002      	beq.n	801179e <USBD_SetConfig+0x3e>
 8011798:	2b03      	cmp	r3, #3
 801179a:	d025      	beq.n	80117e8 <USBD_SetConfig+0x88>
 801179c:	e071      	b.n	8011882 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801179e:	4b42      	ldr	r3, [pc, #264]	; (80118a8 <USBD_SetConfig+0x148>)
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d01c      	beq.n	80117e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80117a6:	4b40      	ldr	r3, [pc, #256]	; (80118a8 <USBD_SetConfig+0x148>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	461a      	mov	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80117b0:	4b3d      	ldr	r3, [pc, #244]	; (80118a8 <USBD_SetConfig+0x148>)
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	4619      	mov	r1, r3
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f7ff f948 	bl	8010a4c <USBD_SetClassConfig>
 80117bc:	4603      	mov	r3, r0
 80117be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80117c0:	7bfb      	ldrb	r3, [r7, #15]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d004      	beq.n	80117d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80117c6:	6839      	ldr	r1, [r7, #0]
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f000 f949 	bl	8011a60 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80117ce:	e065      	b.n	801189c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f000 fa10 	bl	8011bf6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2203      	movs	r2, #3
 80117da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80117de:	e05d      	b.n	801189c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f000 fa08 	bl	8011bf6 <USBD_CtlSendStatus>
      break;
 80117e6:	e059      	b.n	801189c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80117e8:	4b2f      	ldr	r3, [pc, #188]	; (80118a8 <USBD_SetConfig+0x148>)
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d112      	bne.n	8011816 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2202      	movs	r2, #2
 80117f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80117f8:	4b2b      	ldr	r3, [pc, #172]	; (80118a8 <USBD_SetConfig+0x148>)
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	461a      	mov	r2, r3
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011802:	4b29      	ldr	r3, [pc, #164]	; (80118a8 <USBD_SetConfig+0x148>)
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	4619      	mov	r1, r3
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f7ff f93b 	bl	8010a84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 f9f1 	bl	8011bf6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011814:	e042      	b.n	801189c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011816:	4b24      	ldr	r3, [pc, #144]	; (80118a8 <USBD_SetConfig+0x148>)
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	461a      	mov	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	429a      	cmp	r2, r3
 8011822:	d02a      	beq.n	801187a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	b2db      	uxtb	r3, r3
 801182a:	4619      	mov	r1, r3
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f7ff f929 	bl	8010a84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011832:	4b1d      	ldr	r3, [pc, #116]	; (80118a8 <USBD_SetConfig+0x148>)
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	461a      	mov	r2, r3
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801183c:	4b1a      	ldr	r3, [pc, #104]	; (80118a8 <USBD_SetConfig+0x148>)
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	4619      	mov	r1, r3
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f7ff f902 	bl	8010a4c <USBD_SetClassConfig>
 8011848:	4603      	mov	r3, r0
 801184a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801184c:	7bfb      	ldrb	r3, [r7, #15]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d00f      	beq.n	8011872 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011852:	6839      	ldr	r1, [r7, #0]
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f000 f903 	bl	8011a60 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	b2db      	uxtb	r3, r3
 8011860:	4619      	mov	r1, r3
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7ff f90e 	bl	8010a84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2202      	movs	r2, #2
 801186c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011870:	e014      	b.n	801189c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f000 f9bf 	bl	8011bf6 <USBD_CtlSendStatus>
      break;
 8011878:	e010      	b.n	801189c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 f9bb 	bl	8011bf6 <USBD_CtlSendStatus>
      break;
 8011880:	e00c      	b.n	801189c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011882:	6839      	ldr	r1, [r7, #0]
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f000 f8eb 	bl	8011a60 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801188a:	4b07      	ldr	r3, [pc, #28]	; (80118a8 <USBD_SetConfig+0x148>)
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	4619      	mov	r1, r3
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7ff f8f7 	bl	8010a84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011896:	2303      	movs	r3, #3
 8011898:	73fb      	strb	r3, [r7, #15]
      break;
 801189a:	bf00      	nop
  }

  return ret;
 801189c:	7bfb      	ldrb	r3, [r7, #15]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3710      	adds	r7, #16
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	240001bc 	.word	0x240001bc

080118ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	88db      	ldrh	r3, [r3, #6]
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d004      	beq.n	80118c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80118be:	6839      	ldr	r1, [r7, #0]
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f000 f8cd 	bl	8011a60 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80118c6:	e023      	b.n	8011910 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	2b02      	cmp	r3, #2
 80118d2:	dc02      	bgt.n	80118da <USBD_GetConfig+0x2e>
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	dc03      	bgt.n	80118e0 <USBD_GetConfig+0x34>
 80118d8:	e015      	b.n	8011906 <USBD_GetConfig+0x5a>
 80118da:	2b03      	cmp	r3, #3
 80118dc:	d00b      	beq.n	80118f6 <USBD_GetConfig+0x4a>
 80118de:	e012      	b.n	8011906 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	3308      	adds	r3, #8
 80118ea:	2201      	movs	r2, #1
 80118ec:	4619      	mov	r1, r3
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 f927 	bl	8011b42 <USBD_CtlSendData>
        break;
 80118f4:	e00c      	b.n	8011910 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	3304      	adds	r3, #4
 80118fa:	2201      	movs	r2, #1
 80118fc:	4619      	mov	r1, r3
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 f91f 	bl	8011b42 <USBD_CtlSendData>
        break;
 8011904:	e004      	b.n	8011910 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011906:	6839      	ldr	r1, [r7, #0]
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f000 f8a9 	bl	8011a60 <USBD_CtlError>
        break;
 801190e:	bf00      	nop
}
 8011910:	bf00      	nop
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011928:	b2db      	uxtb	r3, r3
 801192a:	3b01      	subs	r3, #1
 801192c:	2b02      	cmp	r3, #2
 801192e:	d81e      	bhi.n	801196e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	88db      	ldrh	r3, [r3, #6]
 8011934:	2b02      	cmp	r3, #2
 8011936:	d004      	beq.n	8011942 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011938:	6839      	ldr	r1, [r7, #0]
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f000 f890 	bl	8011a60 <USBD_CtlError>
        break;
 8011940:	e01a      	b.n	8011978 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2201      	movs	r2, #1
 8011946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801194e:	2b00      	cmp	r3, #0
 8011950:	d005      	beq.n	801195e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	f043 0202 	orr.w	r2, r3, #2
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	330c      	adds	r3, #12
 8011962:	2202      	movs	r2, #2
 8011964:	4619      	mov	r1, r3
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f000 f8eb 	bl	8011b42 <USBD_CtlSendData>
      break;
 801196c:	e004      	b.n	8011978 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801196e:	6839      	ldr	r1, [r7, #0]
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f000 f875 	bl	8011a60 <USBD_CtlError>
      break;
 8011976:	bf00      	nop
  }
}
 8011978:	bf00      	nop
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b082      	sub	sp, #8
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	885b      	ldrh	r3, [r3, #2]
 801198e:	2b01      	cmp	r3, #1
 8011990:	d106      	bne.n	80119a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2201      	movs	r2, #1
 8011996:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f000 f92b 	bl	8011bf6 <USBD_CtlSendStatus>
  }
}
 80119a0:	bf00      	nop
 80119a2:	3708      	adds	r7, #8
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	3b01      	subs	r3, #1
 80119bc:	2b02      	cmp	r3, #2
 80119be:	d80b      	bhi.n	80119d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	885b      	ldrh	r3, [r3, #2]
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d10c      	bne.n	80119e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2200      	movs	r2, #0
 80119cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 f910 	bl	8011bf6 <USBD_CtlSendStatus>
      }
      break;
 80119d6:	e004      	b.n	80119e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80119d8:	6839      	ldr	r1, [r7, #0]
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f000 f840 	bl	8011a60 <USBD_CtlError>
      break;
 80119e0:	e000      	b.n	80119e4 <USBD_ClrFeature+0x3c>
      break;
 80119e2:	bf00      	nop
  }
}
 80119e4:	bf00      	nop
 80119e6:	3708      	adds	r7, #8
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	781a      	ldrb	r2, [r3, #0]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	3301      	adds	r3, #1
 8011a06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	781a      	ldrb	r2, [r3, #0]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	3301      	adds	r3, #1
 8011a14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011a16:	68f8      	ldr	r0, [r7, #12]
 8011a18:	f7ff fabb 	bl	8010f92 <SWAPBYTE>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	461a      	mov	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	3301      	adds	r3, #1
 8011a28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	3301      	adds	r3, #1
 8011a2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f7ff faae 	bl	8010f92 <SWAPBYTE>
 8011a36:	4603      	mov	r3, r0
 8011a38:	461a      	mov	r2, r3
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	3301      	adds	r3, #1
 8011a42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	3301      	adds	r3, #1
 8011a48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011a4a:	68f8      	ldr	r0, [r7, #12]
 8011a4c:	f7ff faa1 	bl	8010f92 <SWAPBYTE>
 8011a50:	4603      	mov	r3, r0
 8011a52:	461a      	mov	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	80da      	strh	r2, [r3, #6]
}
 8011a58:	bf00      	nop
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a6a:	2180      	movs	r1, #128	; 0x80
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f000 fd3b 	bl	80124e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011a72:	2100      	movs	r1, #0
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f000 fd37 	bl	80124e8 <USBD_LL_StallEP>
}
 8011a7a:	bf00      	nop
 8011a7c:	3708      	adds	r7, #8
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b086      	sub	sp, #24
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	60f8      	str	r0, [r7, #12]
 8011a8a:	60b9      	str	r1, [r7, #8]
 8011a8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d036      	beq.n	8011b06 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011a9c:	6938      	ldr	r0, [r7, #16]
 8011a9e:	f000 f836 	bl	8011b0e <USBD_GetLen>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011ab0:	7dfb      	ldrb	r3, [r7, #23]
 8011ab2:	68ba      	ldr	r2, [r7, #8]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	7812      	ldrb	r2, [r2, #0]
 8011aba:	701a      	strb	r2, [r3, #0]
  idx++;
 8011abc:	7dfb      	ldrb	r3, [r7, #23]
 8011abe:	3301      	adds	r3, #1
 8011ac0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011ac2:	7dfb      	ldrb	r3, [r7, #23]
 8011ac4:	68ba      	ldr	r2, [r7, #8]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	2203      	movs	r2, #3
 8011aca:	701a      	strb	r2, [r3, #0]
  idx++;
 8011acc:	7dfb      	ldrb	r3, [r7, #23]
 8011ace:	3301      	adds	r3, #1
 8011ad0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011ad2:	e013      	b.n	8011afc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011ad4:	7dfb      	ldrb	r3, [r7, #23]
 8011ad6:	68ba      	ldr	r2, [r7, #8]
 8011ad8:	4413      	add	r3, r2
 8011ada:	693a      	ldr	r2, [r7, #16]
 8011adc:	7812      	ldrb	r2, [r2, #0]
 8011ade:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	613b      	str	r3, [r7, #16]
    idx++;
 8011ae6:	7dfb      	ldrb	r3, [r7, #23]
 8011ae8:	3301      	adds	r3, #1
 8011aea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011aec:	7dfb      	ldrb	r3, [r7, #23]
 8011aee:	68ba      	ldr	r2, [r7, #8]
 8011af0:	4413      	add	r3, r2
 8011af2:	2200      	movs	r2, #0
 8011af4:	701a      	strb	r2, [r3, #0]
    idx++;
 8011af6:	7dfb      	ldrb	r3, [r7, #23]
 8011af8:	3301      	adds	r3, #1
 8011afa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d1e7      	bne.n	8011ad4 <USBD_GetString+0x52>
 8011b04:	e000      	b.n	8011b08 <USBD_GetString+0x86>
    return;
 8011b06:	bf00      	nop
  }
}
 8011b08:	3718      	adds	r7, #24
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011b0e:	b480      	push	{r7}
 8011b10:	b085      	sub	sp, #20
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011b16:	2300      	movs	r3, #0
 8011b18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011b1e:	e005      	b.n	8011b2c <USBD_GetLen+0x1e>
  {
    len++;
 8011b20:	7bfb      	ldrb	r3, [r7, #15]
 8011b22:	3301      	adds	r3, #1
 8011b24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	3301      	adds	r3, #1
 8011b2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d1f5      	bne.n	8011b20 <USBD_GetLen+0x12>
  }

  return len;
 8011b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3714      	adds	r7, #20
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b40:	4770      	bx	lr

08011b42 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b084      	sub	sp, #16
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	60f8      	str	r0, [r7, #12]
 8011b4a:	60b9      	str	r1, [r7, #8]
 8011b4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	2202      	movs	r2, #2
 8011b52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	2100      	movs	r1, #0
 8011b68:	68f8      	ldr	r0, [r7, #12]
 8011b6a:	f000 fd46 	bl	80125fa <USBD_LL_Transmit>

  return USBD_OK;
 8011b6e:	2300      	movs	r3, #0
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3710      	adds	r7, #16
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b084      	sub	sp, #16
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	68ba      	ldr	r2, [r7, #8]
 8011b88:	2100      	movs	r1, #0
 8011b8a:	68f8      	ldr	r0, [r7, #12]
 8011b8c:	f000 fd35 	bl	80125fa <USBD_LL_Transmit>

  return USBD_OK;
 8011b90:	2300      	movs	r3, #0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}

08011b9a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011b9a:	b580      	push	{r7, lr}
 8011b9c:	b084      	sub	sp, #16
 8011b9e:	af00      	add	r7, sp, #0
 8011ba0:	60f8      	str	r0, [r7, #12]
 8011ba2:	60b9      	str	r1, [r7, #8]
 8011ba4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	2203      	movs	r2, #3
 8011baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	68ba      	ldr	r2, [r7, #8]
 8011bc2:	2100      	movs	r1, #0
 8011bc4:	68f8      	ldr	r0, [r7, #12]
 8011bc6:	f000 fd39 	bl	801263c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bca:	2300      	movs	r3, #0
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3710      	adds	r7, #16
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b084      	sub	sp, #16
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	68ba      	ldr	r2, [r7, #8]
 8011be4:	2100      	movs	r1, #0
 8011be6:	68f8      	ldr	r0, [r7, #12]
 8011be8:	f000 fd28 	bl	801263c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3710      	adds	r7, #16
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}

08011bf6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011bf6:	b580      	push	{r7, lr}
 8011bf8:	b082      	sub	sp, #8
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2204      	movs	r2, #4
 8011c02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011c06:	2300      	movs	r3, #0
 8011c08:	2200      	movs	r2, #0
 8011c0a:	2100      	movs	r1, #0
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f000 fcf4 	bl	80125fa <USBD_LL_Transmit>

  return USBD_OK;
 8011c12:	2300      	movs	r3, #0
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3708      	adds	r7, #8
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2205      	movs	r2, #5
 8011c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	2200      	movs	r2, #0
 8011c30:	2100      	movs	r1, #0
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f000 fd02 	bl	801263c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c38:	2300      	movs	r3, #0
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3708      	adds	r7, #8
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
	...

08011c44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b087      	sub	sp, #28
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	60f8      	str	r0, [r7, #12]
 8011c4c:	60b9      	str	r1, [r7, #8]
 8011c4e:	4613      	mov	r3, r2
 8011c50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011c52:	2301      	movs	r3, #1
 8011c54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011c56:	2300      	movs	r3, #0
 8011c58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011c5a:	4b1f      	ldr	r3, [pc, #124]	; (8011cd8 <FATFS_LinkDriverEx+0x94>)
 8011c5c:	7a5b      	ldrb	r3, [r3, #9]
 8011c5e:	b2db      	uxtb	r3, r3
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d131      	bne.n	8011cc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011c64:	4b1c      	ldr	r3, [pc, #112]	; (8011cd8 <FATFS_LinkDriverEx+0x94>)
 8011c66:	7a5b      	ldrb	r3, [r3, #9]
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	4b1a      	ldr	r3, [pc, #104]	; (8011cd8 <FATFS_LinkDriverEx+0x94>)
 8011c6e:	2100      	movs	r1, #0
 8011c70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011c72:	4b19      	ldr	r3, [pc, #100]	; (8011cd8 <FATFS_LinkDriverEx+0x94>)
 8011c74:	7a5b      	ldrb	r3, [r3, #9]
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	4a17      	ldr	r2, [pc, #92]	; (8011cd8 <FATFS_LinkDriverEx+0x94>)
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	4413      	add	r3, r2
 8011c7e:	68fa      	ldr	r2, [r7, #12]
 8011c80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011c82:	4b15      	ldr	r3, [pc, #84]	; (8011cd8 <FATFS_LinkDriverEx+0x94>)
 8011c84:	7a5b      	ldrb	r3, [r3, #9]
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	461a      	mov	r2, r3
 8011c8a:	4b13      	ldr	r3, [pc, #76]	; (8011cd8 <FATFS_LinkDriverEx+0x94>)
 8011c8c:	4413      	add	r3, r2
 8011c8e:	79fa      	ldrb	r2, [r7, #7]
 8011c90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011c92:	4b11      	ldr	r3, [pc, #68]	; (8011cd8 <FATFS_LinkDriverEx+0x94>)
 8011c94:	7a5b      	ldrb	r3, [r3, #9]
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	1c5a      	adds	r2, r3, #1
 8011c9a:	b2d1      	uxtb	r1, r2
 8011c9c:	4a0e      	ldr	r2, [pc, #56]	; (8011cd8 <FATFS_LinkDriverEx+0x94>)
 8011c9e:	7251      	strb	r1, [r2, #9]
 8011ca0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011ca2:	7dbb      	ldrb	r3, [r7, #22]
 8011ca4:	3330      	adds	r3, #48	; 0x30
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	223a      	movs	r2, #58	; 0x3a
 8011cb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	3302      	adds	r3, #2
 8011cb8:	222f      	movs	r2, #47	; 0x2f
 8011cba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	3303      	adds	r3, #3
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	371c      	adds	r7, #28
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd4:	4770      	bx	lr
 8011cd6:	bf00      	nop
 8011cd8:	240001c0 	.word	0x240001c0

08011cdc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b082      	sub	sp, #8
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	6839      	ldr	r1, [r7, #0]
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f7ff ffaa 	bl	8011c44 <FATFS_LinkDriverEx>
 8011cf0:	4603      	mov	r3, r0
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3708      	adds	r7, #8
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
	...

08011cfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011d00:	2200      	movs	r2, #0
 8011d02:	4913      	ldr	r1, [pc, #76]	; (8011d50 <MX_USB_DEVICE_Init+0x54>)
 8011d04:	4813      	ldr	r0, [pc, #76]	; (8011d54 <MX_USB_DEVICE_Init+0x58>)
 8011d06:	f7fe fe33 	bl	8010970 <USBD_Init>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d001      	beq.n	8011d14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011d10:	f7ef f89e 	bl	8000e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011d14:	4910      	ldr	r1, [pc, #64]	; (8011d58 <MX_USB_DEVICE_Init+0x5c>)
 8011d16:	480f      	ldr	r0, [pc, #60]	; (8011d54 <MX_USB_DEVICE_Init+0x58>)
 8011d18:	f7fe fe5a 	bl	80109d0 <USBD_RegisterClass>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d001      	beq.n	8011d26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011d22:	f7ef f895 	bl	8000e50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011d26:	490d      	ldr	r1, [pc, #52]	; (8011d5c <MX_USB_DEVICE_Init+0x60>)
 8011d28:	480a      	ldr	r0, [pc, #40]	; (8011d54 <MX_USB_DEVICE_Init+0x58>)
 8011d2a:	f7fe fdab 	bl	8010884 <USBD_CDC_RegisterInterface>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d001      	beq.n	8011d38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011d34:	f7ef f88c 	bl	8000e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011d38:	4806      	ldr	r0, [pc, #24]	; (8011d54 <MX_USB_DEVICE_Init+0x58>)
 8011d3a:	f7fe fe70 	bl	8010a1e <USBD_Start>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d001      	beq.n	8011d48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011d44:	f7ef f884 	bl	8000e50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011d48:	f7f4 fd94 	bl	8006874 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011d4c:	bf00      	nop
 8011d4e:	bd80      	pop	{r7, pc}
 8011d50:	24000148 	.word	0x24000148
 8011d54:	240027cc 	.word	0x240027cc
 8011d58:	24000030 	.word	0x24000030
 8011d5c:	24000134 	.word	0x24000134

08011d60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011d64:	2200      	movs	r2, #0
 8011d66:	4905      	ldr	r1, [pc, #20]	; (8011d7c <CDC_Init_FS+0x1c>)
 8011d68:	4805      	ldr	r0, [pc, #20]	; (8011d80 <CDC_Init_FS+0x20>)
 8011d6a:	f7fe fda0 	bl	80108ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011d6e:	4905      	ldr	r1, [pc, #20]	; (8011d84 <CDC_Init_FS+0x24>)
 8011d70:	4803      	ldr	r0, [pc, #12]	; (8011d80 <CDC_Init_FS+0x20>)
 8011d72:	f7fe fdba 	bl	80108ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011d76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	bd80      	pop	{r7, pc}
 8011d7c:	2400329c 	.word	0x2400329c
 8011d80:	240027cc 	.word	0x240027cc
 8011d84:	24002a9c 	.word	0x24002a9c

08011d88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011d88:	b480      	push	{r7}
 8011d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011d8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b083      	sub	sp, #12
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	4603      	mov	r3, r0
 8011da0:	6039      	str	r1, [r7, #0]
 8011da2:	71fb      	strb	r3, [r7, #7]
 8011da4:	4613      	mov	r3, r2
 8011da6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011da8:	79fb      	ldrb	r3, [r7, #7]
 8011daa:	2b23      	cmp	r3, #35	; 0x23
 8011dac:	d84a      	bhi.n	8011e44 <CDC_Control_FS+0xac>
 8011dae:	a201      	add	r2, pc, #4	; (adr r2, 8011db4 <CDC_Control_FS+0x1c>)
 8011db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db4:	08011e45 	.word	0x08011e45
 8011db8:	08011e45 	.word	0x08011e45
 8011dbc:	08011e45 	.word	0x08011e45
 8011dc0:	08011e45 	.word	0x08011e45
 8011dc4:	08011e45 	.word	0x08011e45
 8011dc8:	08011e45 	.word	0x08011e45
 8011dcc:	08011e45 	.word	0x08011e45
 8011dd0:	08011e45 	.word	0x08011e45
 8011dd4:	08011e45 	.word	0x08011e45
 8011dd8:	08011e45 	.word	0x08011e45
 8011ddc:	08011e45 	.word	0x08011e45
 8011de0:	08011e45 	.word	0x08011e45
 8011de4:	08011e45 	.word	0x08011e45
 8011de8:	08011e45 	.word	0x08011e45
 8011dec:	08011e45 	.word	0x08011e45
 8011df0:	08011e45 	.word	0x08011e45
 8011df4:	08011e45 	.word	0x08011e45
 8011df8:	08011e45 	.word	0x08011e45
 8011dfc:	08011e45 	.word	0x08011e45
 8011e00:	08011e45 	.word	0x08011e45
 8011e04:	08011e45 	.word	0x08011e45
 8011e08:	08011e45 	.word	0x08011e45
 8011e0c:	08011e45 	.word	0x08011e45
 8011e10:	08011e45 	.word	0x08011e45
 8011e14:	08011e45 	.word	0x08011e45
 8011e18:	08011e45 	.word	0x08011e45
 8011e1c:	08011e45 	.word	0x08011e45
 8011e20:	08011e45 	.word	0x08011e45
 8011e24:	08011e45 	.word	0x08011e45
 8011e28:	08011e45 	.word	0x08011e45
 8011e2c:	08011e45 	.word	0x08011e45
 8011e30:	08011e45 	.word	0x08011e45
 8011e34:	08011e45 	.word	0x08011e45
 8011e38:	08011e45 	.word	0x08011e45
 8011e3c:	08011e45 	.word	0x08011e45
 8011e40:	08011e45 	.word	0x08011e45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011e44:	bf00      	nop
  }

  return (USBD_OK);
 8011e46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	370c      	adds	r7, #12
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e52:	4770      	bx	lr

08011e54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011e5e:	6879      	ldr	r1, [r7, #4]
 8011e60:	4805      	ldr	r0, [pc, #20]	; (8011e78 <CDC_Receive_FS+0x24>)
 8011e62:	f7fe fd42 	bl	80108ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011e66:	4804      	ldr	r0, [pc, #16]	; (8011e78 <CDC_Receive_FS+0x24>)
 8011e68:	f7fe fd58 	bl	801091c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011e6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3708      	adds	r7, #8
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	240027cc 	.word	0x240027cc

08011e7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b087      	sub	sp, #28
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	60f8      	str	r0, [r7, #12]
 8011e84:	60b9      	str	r1, [r7, #8]
 8011e86:	4613      	mov	r3, r2
 8011e88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	371c      	adds	r7, #28
 8011e96:	46bd      	mov	sp, r7
 8011e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9c:	4770      	bx	lr
	...

08011ea0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	6039      	str	r1, [r7, #0]
 8011eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	2212      	movs	r2, #18
 8011eb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011eb2:	4b03      	ldr	r3, [pc, #12]	; (8011ec0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	370c      	adds	r7, #12
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr
 8011ec0:	24000164 	.word	0x24000164

08011ec4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	6039      	str	r1, [r7, #0]
 8011ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	2204      	movs	r2, #4
 8011ed4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011ed6:	4b03      	ldr	r3, [pc, #12]	; (8011ee4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	370c      	adds	r7, #12
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr
 8011ee4:	24000178 	.word	0x24000178

08011ee8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	4603      	mov	r3, r0
 8011ef0:	6039      	str	r1, [r7, #0]
 8011ef2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ef4:	79fb      	ldrb	r3, [r7, #7]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d105      	bne.n	8011f06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011efa:	683a      	ldr	r2, [r7, #0]
 8011efc:	4907      	ldr	r1, [pc, #28]	; (8011f1c <USBD_FS_ProductStrDescriptor+0x34>)
 8011efe:	4808      	ldr	r0, [pc, #32]	; (8011f20 <USBD_FS_ProductStrDescriptor+0x38>)
 8011f00:	f7ff fdbf 	bl	8011a82 <USBD_GetString>
 8011f04:	e004      	b.n	8011f10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011f06:	683a      	ldr	r2, [r7, #0]
 8011f08:	4904      	ldr	r1, [pc, #16]	; (8011f1c <USBD_FS_ProductStrDescriptor+0x34>)
 8011f0a:	4805      	ldr	r0, [pc, #20]	; (8011f20 <USBD_FS_ProductStrDescriptor+0x38>)
 8011f0c:	f7ff fdb9 	bl	8011a82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f10:	4b02      	ldr	r3, [pc, #8]	; (8011f1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	24003a9c 	.word	0x24003a9c
 8011f20:	0801279c 	.word	0x0801279c

08011f24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	6039      	str	r1, [r7, #0]
 8011f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011f30:	683a      	ldr	r2, [r7, #0]
 8011f32:	4904      	ldr	r1, [pc, #16]	; (8011f44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011f34:	4804      	ldr	r0, [pc, #16]	; (8011f48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011f36:	f7ff fda4 	bl	8011a82 <USBD_GetString>
  return USBD_StrDesc;
 8011f3a:	4b02      	ldr	r3, [pc, #8]	; (8011f44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3708      	adds	r7, #8
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}
 8011f44:	24003a9c 	.word	0x24003a9c
 8011f48:	080127b4 	.word	0x080127b4

08011f4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	4603      	mov	r3, r0
 8011f54:	6039      	str	r1, [r7, #0]
 8011f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	221a      	movs	r2, #26
 8011f5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011f5e:	f000 f843 	bl	8011fe8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011f62:	4b02      	ldr	r3, [pc, #8]	; (8011f6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	2400017c 	.word	0x2400017c

08011f70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	4603      	mov	r3, r0
 8011f78:	6039      	str	r1, [r7, #0]
 8011f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011f7c:	79fb      	ldrb	r3, [r7, #7]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d105      	bne.n	8011f8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011f82:	683a      	ldr	r2, [r7, #0]
 8011f84:	4907      	ldr	r1, [pc, #28]	; (8011fa4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011f86:	4808      	ldr	r0, [pc, #32]	; (8011fa8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011f88:	f7ff fd7b 	bl	8011a82 <USBD_GetString>
 8011f8c:	e004      	b.n	8011f98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011f8e:	683a      	ldr	r2, [r7, #0]
 8011f90:	4904      	ldr	r1, [pc, #16]	; (8011fa4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011f92:	4805      	ldr	r0, [pc, #20]	; (8011fa8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011f94:	f7ff fd75 	bl	8011a82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f98:	4b02      	ldr	r3, [pc, #8]	; (8011fa4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	24003a9c 	.word	0x24003a9c
 8011fa8:	080127c8 	.word	0x080127c8

08011fac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	6039      	str	r1, [r7, #0]
 8011fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011fb8:	79fb      	ldrb	r3, [r7, #7]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d105      	bne.n	8011fca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011fbe:	683a      	ldr	r2, [r7, #0]
 8011fc0:	4907      	ldr	r1, [pc, #28]	; (8011fe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011fc2:	4808      	ldr	r0, [pc, #32]	; (8011fe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011fc4:	f7ff fd5d 	bl	8011a82 <USBD_GetString>
 8011fc8:	e004      	b.n	8011fd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011fca:	683a      	ldr	r2, [r7, #0]
 8011fcc:	4904      	ldr	r1, [pc, #16]	; (8011fe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011fce:	4805      	ldr	r0, [pc, #20]	; (8011fe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011fd0:	f7ff fd57 	bl	8011a82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011fd4:	4b02      	ldr	r3, [pc, #8]	; (8011fe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3708      	adds	r7, #8
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	24003a9c 	.word	0x24003a9c
 8011fe4:	080127d4 	.word	0x080127d4

08011fe8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b084      	sub	sp, #16
 8011fec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011fee:	4b0f      	ldr	r3, [pc, #60]	; (801202c <Get_SerialNum+0x44>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011ff4:	4b0e      	ldr	r3, [pc, #56]	; (8012030 <Get_SerialNum+0x48>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011ffa:	4b0e      	ldr	r3, [pc, #56]	; (8012034 <Get_SerialNum+0x4c>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	4413      	add	r3, r2
 8012006:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d009      	beq.n	8012022 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801200e:	2208      	movs	r2, #8
 8012010:	4909      	ldr	r1, [pc, #36]	; (8012038 <Get_SerialNum+0x50>)
 8012012:	68f8      	ldr	r0, [r7, #12]
 8012014:	f000 f814 	bl	8012040 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012018:	2204      	movs	r2, #4
 801201a:	4908      	ldr	r1, [pc, #32]	; (801203c <Get_SerialNum+0x54>)
 801201c:	68b8      	ldr	r0, [r7, #8]
 801201e:	f000 f80f 	bl	8012040 <IntToUnicode>
  }
}
 8012022:	bf00      	nop
 8012024:	3710      	adds	r7, #16
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	1ff1e800 	.word	0x1ff1e800
 8012030:	1ff1e804 	.word	0x1ff1e804
 8012034:	1ff1e808 	.word	0x1ff1e808
 8012038:	2400017e 	.word	0x2400017e
 801203c:	2400018e 	.word	0x2400018e

08012040 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012040:	b480      	push	{r7}
 8012042:	b087      	sub	sp, #28
 8012044:	af00      	add	r7, sp, #0
 8012046:	60f8      	str	r0, [r7, #12]
 8012048:	60b9      	str	r1, [r7, #8]
 801204a:	4613      	mov	r3, r2
 801204c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801204e:	2300      	movs	r3, #0
 8012050:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012052:	2300      	movs	r3, #0
 8012054:	75fb      	strb	r3, [r7, #23]
 8012056:	e027      	b.n	80120a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	0f1b      	lsrs	r3, r3, #28
 801205c:	2b09      	cmp	r3, #9
 801205e:	d80b      	bhi.n	8012078 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	0f1b      	lsrs	r3, r3, #28
 8012064:	b2da      	uxtb	r2, r3
 8012066:	7dfb      	ldrb	r3, [r7, #23]
 8012068:	005b      	lsls	r3, r3, #1
 801206a:	4619      	mov	r1, r3
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	440b      	add	r3, r1
 8012070:	3230      	adds	r2, #48	; 0x30
 8012072:	b2d2      	uxtb	r2, r2
 8012074:	701a      	strb	r2, [r3, #0]
 8012076:	e00a      	b.n	801208e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	0f1b      	lsrs	r3, r3, #28
 801207c:	b2da      	uxtb	r2, r3
 801207e:	7dfb      	ldrb	r3, [r7, #23]
 8012080:	005b      	lsls	r3, r3, #1
 8012082:	4619      	mov	r1, r3
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	440b      	add	r3, r1
 8012088:	3237      	adds	r2, #55	; 0x37
 801208a:	b2d2      	uxtb	r2, r2
 801208c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	011b      	lsls	r3, r3, #4
 8012092:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012094:	7dfb      	ldrb	r3, [r7, #23]
 8012096:	005b      	lsls	r3, r3, #1
 8012098:	3301      	adds	r3, #1
 801209a:	68ba      	ldr	r2, [r7, #8]
 801209c:	4413      	add	r3, r2
 801209e:	2200      	movs	r2, #0
 80120a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80120a2:	7dfb      	ldrb	r3, [r7, #23]
 80120a4:	3301      	adds	r3, #1
 80120a6:	75fb      	strb	r3, [r7, #23]
 80120a8:	7dfa      	ldrb	r2, [r7, #23]
 80120aa:	79fb      	ldrb	r3, [r7, #7]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d3d3      	bcc.n	8012058 <IntToUnicode+0x18>
  }
}
 80120b0:	bf00      	nop
 80120b2:	bf00      	nop
 80120b4:	371c      	adds	r7, #28
 80120b6:	46bd      	mov	sp, r7
 80120b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120bc:	4770      	bx	lr
	...

080120c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b0b8      	sub	sp, #224	; 0xe0
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80120c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80120cc:	2200      	movs	r2, #0
 80120ce:	601a      	str	r2, [r3, #0]
 80120d0:	605a      	str	r2, [r3, #4]
 80120d2:	609a      	str	r2, [r3, #8]
 80120d4:	60da      	str	r2, [r3, #12]
 80120d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80120d8:	f107 0310 	add.w	r3, r7, #16
 80120dc:	22bc      	movs	r2, #188	; 0xbc
 80120de:	2100      	movs	r1, #0
 80120e0:	4618      	mov	r0, r3
 80120e2:	f000 fb47 	bl	8012774 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	4a2b      	ldr	r2, [pc, #172]	; (8012198 <HAL_PCD_MspInit+0xd8>)
 80120ec:	4293      	cmp	r3, r2
 80120ee:	d14e      	bne.n	801218e <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80120f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80120f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80120f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80120fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80120fe:	f107 0310 	add.w	r3, r7, #16
 8012102:	4618      	mov	r0, r3
 8012104:	f7f5 fb62 	bl	80077cc <HAL_RCCEx_PeriphCLKConfig>
 8012108:	4603      	mov	r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	d001      	beq.n	8012112 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 801210e:	f7ee fe9f 	bl	8000e50 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012112:	f7f4 fbaf 	bl	8006874 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012116:	4b21      	ldr	r3, [pc, #132]	; (801219c <HAL_PCD_MspInit+0xdc>)
 8012118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801211c:	4a1f      	ldr	r2, [pc, #124]	; (801219c <HAL_PCD_MspInit+0xdc>)
 801211e:	f043 0301 	orr.w	r3, r3, #1
 8012122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012126:	4b1d      	ldr	r3, [pc, #116]	; (801219c <HAL_PCD_MspInit+0xdc>)
 8012128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801212c:	f003 0301 	and.w	r3, r3, #1
 8012130:	60fb      	str	r3, [r7, #12]
 8012132:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012134:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801213c:	2302      	movs	r3, #2
 801213e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012142:	2300      	movs	r3, #0
 8012144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012148:	2300      	movs	r3, #0
 801214a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801214e:	230a      	movs	r3, #10
 8012150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012154:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012158:	4619      	mov	r1, r3
 801215a:	4811      	ldr	r0, [pc, #68]	; (80121a0 <HAL_PCD_MspInit+0xe0>)
 801215c:	f7f1 ffca 	bl	80040f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012160:	4b0e      	ldr	r3, [pc, #56]	; (801219c <HAL_PCD_MspInit+0xdc>)
 8012162:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012166:	4a0d      	ldr	r2, [pc, #52]	; (801219c <HAL_PCD_MspInit+0xdc>)
 8012168:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801216c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012170:	4b0a      	ldr	r3, [pc, #40]	; (801219c <HAL_PCD_MspInit+0xdc>)
 8012172:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801217a:	60bb      	str	r3, [r7, #8]
 801217c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801217e:	2200      	movs	r2, #0
 8012180:	2100      	movs	r1, #0
 8012182:	2065      	movs	r0, #101	; 0x65
 8012184:	f7ef fcd3 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012188:	2065      	movs	r0, #101	; 0x65
 801218a:	f7ef fcea 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801218e:	bf00      	nop
 8012190:	37e0      	adds	r7, #224	; 0xe0
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	40080000 	.word	0x40080000
 801219c:	58024400 	.word	0x58024400
 80121a0:	58020000 	.word	0x58020000

080121a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80121b8:	4619      	mov	r1, r3
 80121ba:	4610      	mov	r0, r2
 80121bc:	f7fe fc7a 	bl	8010ab4 <USBD_LL_SetupStage>
}
 80121c0:	bf00      	nop
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	460b      	mov	r3, r1
 80121d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80121da:	78fa      	ldrb	r2, [r7, #3]
 80121dc:	6879      	ldr	r1, [r7, #4]
 80121de:	4613      	mov	r3, r2
 80121e0:	00db      	lsls	r3, r3, #3
 80121e2:	1a9b      	subs	r3, r3, r2
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	440b      	add	r3, r1
 80121e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80121ec:	681a      	ldr	r2, [r3, #0]
 80121ee:	78fb      	ldrb	r3, [r7, #3]
 80121f0:	4619      	mov	r1, r3
 80121f2:	f7fe fcb4 	bl	8010b5e <USBD_LL_DataOutStage>
}
 80121f6:	bf00      	nop
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b082      	sub	sp, #8
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
 8012206:	460b      	mov	r3, r1
 8012208:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012210:	78fa      	ldrb	r2, [r7, #3]
 8012212:	6879      	ldr	r1, [r7, #4]
 8012214:	4613      	mov	r3, r2
 8012216:	00db      	lsls	r3, r3, #3
 8012218:	1a9b      	subs	r3, r3, r2
 801221a:	009b      	lsls	r3, r3, #2
 801221c:	440b      	add	r3, r1
 801221e:	3348      	adds	r3, #72	; 0x48
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	78fb      	ldrb	r3, [r7, #3]
 8012224:	4619      	mov	r1, r3
 8012226:	f7fe fcfd 	bl	8010c24 <USBD_LL_DataInStage>
}
 801222a:	bf00      	nop
 801222c:	3708      	adds	r7, #8
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}

08012232 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012232:	b580      	push	{r7, lr}
 8012234:	b082      	sub	sp, #8
 8012236:	af00      	add	r7, sp, #0
 8012238:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012240:	4618      	mov	r0, r3
 8012242:	f7fe fe11 	bl	8010e68 <USBD_LL_SOF>
}
 8012246:	bf00      	nop
 8012248:	3708      	adds	r7, #8
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}

0801224e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801224e:	b580      	push	{r7, lr}
 8012250:	b084      	sub	sp, #16
 8012252:	af00      	add	r7, sp, #0
 8012254:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012256:	2301      	movs	r3, #1
 8012258:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	68db      	ldr	r3, [r3, #12]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d102      	bne.n	8012268 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012262:	2300      	movs	r3, #0
 8012264:	73fb      	strb	r3, [r7, #15]
 8012266:	e008      	b.n	801227a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	2b02      	cmp	r3, #2
 801226e:	d102      	bne.n	8012276 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012270:	2301      	movs	r3, #1
 8012272:	73fb      	strb	r3, [r7, #15]
 8012274:	e001      	b.n	801227a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012276:	f7ee fdeb 	bl	8000e50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012280:	7bfa      	ldrb	r2, [r7, #15]
 8012282:	4611      	mov	r1, r2
 8012284:	4618      	mov	r0, r3
 8012286:	f7fe fdb1 	bl	8010dec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012290:	4618      	mov	r0, r3
 8012292:	f7fe fd5d 	bl	8010d50 <USBD_LL_Reset>
}
 8012296:	bf00      	nop
 8012298:	3710      	adds	r7, #16
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
	...

080122a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7fe fdac 	bl	8010e0c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	6812      	ldr	r2, [r2, #0]
 80122c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80122c6:	f043 0301 	orr.w	r3, r3, #1
 80122ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6a1b      	ldr	r3, [r3, #32]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d005      	beq.n	80122e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80122d4:	4b04      	ldr	r3, [pc, #16]	; (80122e8 <HAL_PCD_SuspendCallback+0x48>)
 80122d6:	691b      	ldr	r3, [r3, #16]
 80122d8:	4a03      	ldr	r2, [pc, #12]	; (80122e8 <HAL_PCD_SuspendCallback+0x48>)
 80122da:	f043 0306 	orr.w	r3, r3, #6
 80122de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80122e0:	bf00      	nop
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	e000ed00 	.word	0xe000ed00

080122ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7fe fd9c 	bl	8010e38 <USBD_LL_Resume>
}
 8012300:	bf00      	nop
 8012302:	3708      	adds	r7, #8
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	460b      	mov	r3, r1
 8012312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801231a:	78fa      	ldrb	r2, [r7, #3]
 801231c:	4611      	mov	r1, r2
 801231e:	4618      	mov	r0, r3
 8012320:	f7fe fdea 	bl	8010ef8 <USBD_LL_IsoOUTIncomplete>
}
 8012324:	bf00      	nop
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	460b      	mov	r3, r1
 8012336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801233e:	78fa      	ldrb	r2, [r7, #3]
 8012340:	4611      	mov	r1, r2
 8012342:	4618      	mov	r0, r3
 8012344:	f7fe fdb2 	bl	8010eac <USBD_LL_IsoINIncomplete>
}
 8012348:	bf00      	nop
 801234a:	3708      	adds	r7, #8
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801235e:	4618      	mov	r0, r3
 8012360:	f7fe fdf0 	bl	8010f44 <USBD_LL_DevConnected>
}
 8012364:	bf00      	nop
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801237a:	4618      	mov	r0, r3
 801237c:	f7fe fded 	bl	8010f5a <USBD_LL_DevDisconnected>
}
 8012380:	bf00      	nop
 8012382:	3708      	adds	r7, #8
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d13e      	bne.n	8012416 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012398:	4a21      	ldr	r2, [pc, #132]	; (8012420 <USBD_LL_Init+0x98>)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	4a1f      	ldr	r2, [pc, #124]	; (8012420 <USBD_LL_Init+0x98>)
 80123a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80123a8:	4b1d      	ldr	r3, [pc, #116]	; (8012420 <USBD_LL_Init+0x98>)
 80123aa:	4a1e      	ldr	r2, [pc, #120]	; (8012424 <USBD_LL_Init+0x9c>)
 80123ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80123ae:	4b1c      	ldr	r3, [pc, #112]	; (8012420 <USBD_LL_Init+0x98>)
 80123b0:	2209      	movs	r2, #9
 80123b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80123b4:	4b1a      	ldr	r3, [pc, #104]	; (8012420 <USBD_LL_Init+0x98>)
 80123b6:	2202      	movs	r2, #2
 80123b8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80123ba:	4b19      	ldr	r3, [pc, #100]	; (8012420 <USBD_LL_Init+0x98>)
 80123bc:	2200      	movs	r2, #0
 80123be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80123c0:	4b17      	ldr	r3, [pc, #92]	; (8012420 <USBD_LL_Init+0x98>)
 80123c2:	2202      	movs	r2, #2
 80123c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80123c6:	4b16      	ldr	r3, [pc, #88]	; (8012420 <USBD_LL_Init+0x98>)
 80123c8:	2200      	movs	r2, #0
 80123ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80123cc:	4b14      	ldr	r3, [pc, #80]	; (8012420 <USBD_LL_Init+0x98>)
 80123ce:	2200      	movs	r2, #0
 80123d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80123d2:	4b13      	ldr	r3, [pc, #76]	; (8012420 <USBD_LL_Init+0x98>)
 80123d4:	2200      	movs	r2, #0
 80123d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80123d8:	4b11      	ldr	r3, [pc, #68]	; (8012420 <USBD_LL_Init+0x98>)
 80123da:	2200      	movs	r2, #0
 80123dc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80123de:	4b10      	ldr	r3, [pc, #64]	; (8012420 <USBD_LL_Init+0x98>)
 80123e0:	2200      	movs	r2, #0
 80123e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80123e4:	4b0e      	ldr	r3, [pc, #56]	; (8012420 <USBD_LL_Init+0x98>)
 80123e6:	2200      	movs	r2, #0
 80123e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80123ea:	480d      	ldr	r0, [pc, #52]	; (8012420 <USBD_LL_Init+0x98>)
 80123ec:	f7f3 f80c 	bl	8005408 <HAL_PCD_Init>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d001      	beq.n	80123fa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80123f6:	f7ee fd2b 	bl	8000e50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80123fa:	2180      	movs	r1, #128	; 0x80
 80123fc:	4808      	ldr	r0, [pc, #32]	; (8012420 <USBD_LL_Init+0x98>)
 80123fe:	f7f4 f99e 	bl	800673e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012402:	2240      	movs	r2, #64	; 0x40
 8012404:	2100      	movs	r1, #0
 8012406:	4806      	ldr	r0, [pc, #24]	; (8012420 <USBD_LL_Init+0x98>)
 8012408:	f7f4 f952 	bl	80066b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801240c:	2280      	movs	r2, #128	; 0x80
 801240e:	2101      	movs	r1, #1
 8012410:	4803      	ldr	r0, [pc, #12]	; (8012420 <USBD_LL_Init+0x98>)
 8012412:	f7f4 f94d 	bl	80066b0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012416:	2300      	movs	r3, #0
}
 8012418:	4618      	mov	r0, r3
 801241a:	3708      	adds	r7, #8
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}
 8012420:	24003c9c 	.word	0x24003c9c
 8012424:	40080000 	.word	0x40080000

08012428 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012430:	2300      	movs	r3, #0
 8012432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012434:	2300      	movs	r3, #0
 8012436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801243e:	4618      	mov	r0, r3
 8012440:	f7f3 f906 	bl	8005650 <HAL_PCD_Start>
 8012444:	4603      	mov	r3, r0
 8012446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012448:	7bfb      	ldrb	r3, [r7, #15]
 801244a:	4618      	mov	r0, r3
 801244c:	f000 f942 	bl	80126d4 <USBD_Get_USB_Status>
 8012450:	4603      	mov	r3, r0
 8012452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012454:	7bbb      	ldrb	r3, [r7, #14]
}
 8012456:	4618      	mov	r0, r3
 8012458:	3710      	adds	r7, #16
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b084      	sub	sp, #16
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
 8012466:	4608      	mov	r0, r1
 8012468:	4611      	mov	r1, r2
 801246a:	461a      	mov	r2, r3
 801246c:	4603      	mov	r3, r0
 801246e:	70fb      	strb	r3, [r7, #3]
 8012470:	460b      	mov	r3, r1
 8012472:	70bb      	strb	r3, [r7, #2]
 8012474:	4613      	mov	r3, r2
 8012476:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012478:	2300      	movs	r3, #0
 801247a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801247c:	2300      	movs	r3, #0
 801247e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012486:	78bb      	ldrb	r3, [r7, #2]
 8012488:	883a      	ldrh	r2, [r7, #0]
 801248a:	78f9      	ldrb	r1, [r7, #3]
 801248c:	f7f3 fd17 	bl	8005ebe <HAL_PCD_EP_Open>
 8012490:	4603      	mov	r3, r0
 8012492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012494:	7bfb      	ldrb	r3, [r7, #15]
 8012496:	4618      	mov	r0, r3
 8012498:	f000 f91c 	bl	80126d4 <USBD_Get_USB_Status>
 801249c:	4603      	mov	r3, r0
 801249e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3710      	adds	r7, #16
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b084      	sub	sp, #16
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	460b      	mov	r3, r1
 80124b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124b6:	2300      	movs	r3, #0
 80124b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124ba:	2300      	movs	r3, #0
 80124bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80124c4:	78fa      	ldrb	r2, [r7, #3]
 80124c6:	4611      	mov	r1, r2
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7f3 fd60 	bl	8005f8e <HAL_PCD_EP_Close>
 80124ce:	4603      	mov	r3, r0
 80124d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124d2:	7bfb      	ldrb	r3, [r7, #15]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f000 f8fd 	bl	80126d4 <USBD_Get_USB_Status>
 80124da:	4603      	mov	r3, r0
 80124dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124de:	7bbb      	ldrb	r3, [r7, #14]
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3710      	adds	r7, #16
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b084      	sub	sp, #16
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	460b      	mov	r3, r1
 80124f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124f4:	2300      	movs	r3, #0
 80124f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124f8:	2300      	movs	r3, #0
 80124fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012502:	78fa      	ldrb	r2, [r7, #3]
 8012504:	4611      	mov	r1, r2
 8012506:	4618      	mov	r0, r3
 8012508:	f7f3 fe38 	bl	800617c <HAL_PCD_EP_SetStall>
 801250c:	4603      	mov	r3, r0
 801250e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012510:	7bfb      	ldrb	r3, [r7, #15]
 8012512:	4618      	mov	r0, r3
 8012514:	f000 f8de 	bl	80126d4 <USBD_Get_USB_Status>
 8012518:	4603      	mov	r3, r0
 801251a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801251c:	7bbb      	ldrb	r3, [r7, #14]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012526:	b580      	push	{r7, lr}
 8012528:	b084      	sub	sp, #16
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
 801252e:	460b      	mov	r3, r1
 8012530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012532:	2300      	movs	r3, #0
 8012534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012536:	2300      	movs	r3, #0
 8012538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012540:	78fa      	ldrb	r2, [r7, #3]
 8012542:	4611      	mov	r1, r2
 8012544:	4618      	mov	r0, r3
 8012546:	f7f3 fe7d 	bl	8006244 <HAL_PCD_EP_ClrStall>
 801254a:	4603      	mov	r3, r0
 801254c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801254e:	7bfb      	ldrb	r3, [r7, #15]
 8012550:	4618      	mov	r0, r3
 8012552:	f000 f8bf 	bl	80126d4 <USBD_Get_USB_Status>
 8012556:	4603      	mov	r3, r0
 8012558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801255a:	7bbb      	ldrb	r3, [r7, #14]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3710      	adds	r7, #16
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012564:	b480      	push	{r7}
 8012566:	b085      	sub	sp, #20
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	460b      	mov	r3, r1
 801256e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801257c:	2b00      	cmp	r3, #0
 801257e:	da0b      	bge.n	8012598 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012580:	78fb      	ldrb	r3, [r7, #3]
 8012582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012586:	68f9      	ldr	r1, [r7, #12]
 8012588:	4613      	mov	r3, r2
 801258a:	00db      	lsls	r3, r3, #3
 801258c:	1a9b      	subs	r3, r3, r2
 801258e:	009b      	lsls	r3, r3, #2
 8012590:	440b      	add	r3, r1
 8012592:	333e      	adds	r3, #62	; 0x3e
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	e00b      	b.n	80125b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012598:	78fb      	ldrb	r3, [r7, #3]
 801259a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801259e:	68f9      	ldr	r1, [r7, #12]
 80125a0:	4613      	mov	r3, r2
 80125a2:	00db      	lsls	r3, r3, #3
 80125a4:	1a9b      	subs	r3, r3, r2
 80125a6:	009b      	lsls	r3, r3, #2
 80125a8:	440b      	add	r3, r1
 80125aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80125ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3714      	adds	r7, #20
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	460b      	mov	r3, r1
 80125c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125c8:	2300      	movs	r3, #0
 80125ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125cc:	2300      	movs	r3, #0
 80125ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80125d6:	78fa      	ldrb	r2, [r7, #3]
 80125d8:	4611      	mov	r1, r2
 80125da:	4618      	mov	r0, r3
 80125dc:	f7f3 fc4a 	bl	8005e74 <HAL_PCD_SetAddress>
 80125e0:	4603      	mov	r3, r0
 80125e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125e4:	7bfb      	ldrb	r3, [r7, #15]
 80125e6:	4618      	mov	r0, r3
 80125e8:	f000 f874 	bl	80126d4 <USBD_Get_USB_Status>
 80125ec:	4603      	mov	r3, r0
 80125ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b086      	sub	sp, #24
 80125fe:	af00      	add	r7, sp, #0
 8012600:	60f8      	str	r0, [r7, #12]
 8012602:	607a      	str	r2, [r7, #4]
 8012604:	603b      	str	r3, [r7, #0]
 8012606:	460b      	mov	r3, r1
 8012608:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801260a:	2300      	movs	r3, #0
 801260c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801260e:	2300      	movs	r3, #0
 8012610:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012618:	7af9      	ldrb	r1, [r7, #11]
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	f7f3 fd63 	bl	80060e8 <HAL_PCD_EP_Transmit>
 8012622:	4603      	mov	r3, r0
 8012624:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012626:	7dfb      	ldrb	r3, [r7, #23]
 8012628:	4618      	mov	r0, r3
 801262a:	f000 f853 	bl	80126d4 <USBD_Get_USB_Status>
 801262e:	4603      	mov	r3, r0
 8012630:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012632:	7dbb      	ldrb	r3, [r7, #22]
}
 8012634:	4618      	mov	r0, r3
 8012636:	3718      	adds	r7, #24
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b086      	sub	sp, #24
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	607a      	str	r2, [r7, #4]
 8012646:	603b      	str	r3, [r7, #0]
 8012648:	460b      	mov	r3, r1
 801264a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801264c:	2300      	movs	r3, #0
 801264e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012650:	2300      	movs	r3, #0
 8012652:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801265a:	7af9      	ldrb	r1, [r7, #11]
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	f7f3 fcdf 	bl	8006022 <HAL_PCD_EP_Receive>
 8012664:	4603      	mov	r3, r0
 8012666:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012668:	7dfb      	ldrb	r3, [r7, #23]
 801266a:	4618      	mov	r0, r3
 801266c:	f000 f832 	bl	80126d4 <USBD_Get_USB_Status>
 8012670:	4603      	mov	r3, r0
 8012672:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012674:	7dbb      	ldrb	r3, [r7, #22]
}
 8012676:	4618      	mov	r0, r3
 8012678:	3718      	adds	r7, #24
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}

0801267e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801267e:	b580      	push	{r7, lr}
 8012680:	b082      	sub	sp, #8
 8012682:	af00      	add	r7, sp, #0
 8012684:	6078      	str	r0, [r7, #4]
 8012686:	460b      	mov	r3, r1
 8012688:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012690:	78fa      	ldrb	r2, [r7, #3]
 8012692:	4611      	mov	r1, r2
 8012694:	4618      	mov	r0, r3
 8012696:	f7f3 fd0f 	bl	80060b8 <HAL_PCD_EP_GetRxCount>
 801269a:	4603      	mov	r3, r0
}
 801269c:	4618      	mov	r0, r3
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80126a4:	b480      	push	{r7}
 80126a6:	b083      	sub	sp, #12
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80126ac:	4b03      	ldr	r3, [pc, #12]	; (80126bc <USBD_static_malloc+0x18>)
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	370c      	adds	r7, #12
 80126b2:	46bd      	mov	sp, r7
 80126b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b8:	4770      	bx	lr
 80126ba:	bf00      	nop
 80126bc:	240001cc 	.word	0x240001cc

080126c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80126c0:	b480      	push	{r7}
 80126c2:	b083      	sub	sp, #12
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]

}
 80126c8:	bf00      	nop
 80126ca:	370c      	adds	r7, #12
 80126cc:	46bd      	mov	sp, r7
 80126ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d2:	4770      	bx	lr

080126d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80126d4:	b480      	push	{r7}
 80126d6:	b085      	sub	sp, #20
 80126d8:	af00      	add	r7, sp, #0
 80126da:	4603      	mov	r3, r0
 80126dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126de:	2300      	movs	r3, #0
 80126e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80126e2:	79fb      	ldrb	r3, [r7, #7]
 80126e4:	2b03      	cmp	r3, #3
 80126e6:	d817      	bhi.n	8012718 <USBD_Get_USB_Status+0x44>
 80126e8:	a201      	add	r2, pc, #4	; (adr r2, 80126f0 <USBD_Get_USB_Status+0x1c>)
 80126ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126ee:	bf00      	nop
 80126f0:	08012701 	.word	0x08012701
 80126f4:	08012707 	.word	0x08012707
 80126f8:	0801270d 	.word	0x0801270d
 80126fc:	08012713 	.word	0x08012713
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012700:	2300      	movs	r3, #0
 8012702:	73fb      	strb	r3, [r7, #15]
    break;
 8012704:	e00b      	b.n	801271e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012706:	2303      	movs	r3, #3
 8012708:	73fb      	strb	r3, [r7, #15]
    break;
 801270a:	e008      	b.n	801271e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801270c:	2301      	movs	r3, #1
 801270e:	73fb      	strb	r3, [r7, #15]
    break;
 8012710:	e005      	b.n	801271e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012712:	2303      	movs	r3, #3
 8012714:	73fb      	strb	r3, [r7, #15]
    break;
 8012716:	e002      	b.n	801271e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012718:	2303      	movs	r3, #3
 801271a:	73fb      	strb	r3, [r7, #15]
    break;
 801271c:	bf00      	nop
  }
  return usb_status;
 801271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012720:	4618      	mov	r0, r3
 8012722:	3714      	adds	r7, #20
 8012724:	46bd      	mov	sp, r7
 8012726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272a:	4770      	bx	lr

0801272c <__libc_init_array>:
 801272c:	b570      	push	{r4, r5, r6, lr}
 801272e:	4d0d      	ldr	r5, [pc, #52]	; (8012764 <__libc_init_array+0x38>)
 8012730:	4c0d      	ldr	r4, [pc, #52]	; (8012768 <__libc_init_array+0x3c>)
 8012732:	1b64      	subs	r4, r4, r5
 8012734:	10a4      	asrs	r4, r4, #2
 8012736:	2600      	movs	r6, #0
 8012738:	42a6      	cmp	r6, r4
 801273a:	d109      	bne.n	8012750 <__libc_init_array+0x24>
 801273c:	4d0b      	ldr	r5, [pc, #44]	; (801276c <__libc_init_array+0x40>)
 801273e:	4c0c      	ldr	r4, [pc, #48]	; (8012770 <__libc_init_array+0x44>)
 8012740:	f000 f820 	bl	8012784 <_init>
 8012744:	1b64      	subs	r4, r4, r5
 8012746:	10a4      	asrs	r4, r4, #2
 8012748:	2600      	movs	r6, #0
 801274a:	42a6      	cmp	r6, r4
 801274c:	d105      	bne.n	801275a <__libc_init_array+0x2e>
 801274e:	bd70      	pop	{r4, r5, r6, pc}
 8012750:	f855 3b04 	ldr.w	r3, [r5], #4
 8012754:	4798      	blx	r3
 8012756:	3601      	adds	r6, #1
 8012758:	e7ee      	b.n	8012738 <__libc_init_array+0xc>
 801275a:	f855 3b04 	ldr.w	r3, [r5], #4
 801275e:	4798      	blx	r3
 8012760:	3601      	adds	r6, #1
 8012762:	e7f2      	b.n	801274a <__libc_init_array+0x1e>
 8012764:	08012840 	.word	0x08012840
 8012768:	08012840 	.word	0x08012840
 801276c:	08012840 	.word	0x08012840
 8012770:	08012844 	.word	0x08012844

08012774 <memset>:
 8012774:	4402      	add	r2, r0
 8012776:	4603      	mov	r3, r0
 8012778:	4293      	cmp	r3, r2
 801277a:	d100      	bne.n	801277e <memset+0xa>
 801277c:	4770      	bx	lr
 801277e:	f803 1b01 	strb.w	r1, [r3], #1
 8012782:	e7f9      	b.n	8012778 <memset+0x4>

08012784 <_init>:
 8012784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012786:	bf00      	nop
 8012788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801278a:	bc08      	pop	{r3}
 801278c:	469e      	mov	lr, r3
 801278e:	4770      	bx	lr

08012790 <_fini>:
 8012790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012792:	bf00      	nop
 8012794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012796:	bc08      	pop	{r3}
 8012798:	469e      	mov	lr, r3
 801279a:	4770      	bx	lr
